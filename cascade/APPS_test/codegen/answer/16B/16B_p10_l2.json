[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '5 8 6'\n\"\"\"\nimport sys\n\nfrom typing import Dict, List, Set\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_paths(tree, start, end, paths):\n        if start == end:\n            return paths\n        \n        paths.append(start)\n        if start not in tree:\n            return paths\n        \n        for child in tree[start]:\n            find_paths(tree, child, end, paths)\n        \n        return paths\n        \n    def union(tree, start, end, paths):\n        if start == end:\n            return paths\n        \n        paths.append(start)\n        if start not in tree:\n            return paths\n        \n        for child in tree[start]:\n            union(tree, child, end, paths)\n        \n        tree[start] = []\n        \n        return paths\n    \n    n = int(stdin.split('\\n')[0])\n    tree = {}\n    for i in range(n-1):\n        a, b = map(int, stdin.split('\\n')[i+1].split(' '))\n        union(tree, a, b, [])\n    \n    max_path = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                path = find_paths(tree, i, j, [])\n                path = find_paths(tree, j, k, path)\n                path = find_paths(tree, i, k, path)\n                if len(path) > max_path:\n                    max_path = len(path)\n                    a, b, c = i, j, k\n    \n    return str(max_path) +'' + str(a) +'' + str(b) +'' + str(c)\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of edges which belong to at least one of the simple paths between $a$ and $b$, $b$ and $c$, or $a$ and $c$\"\"\"\n    n, edges = int(stdin.split()[0]), [tuple(map(int, line.split())) for line in stdin.split()[1:]]\n    a, b, c = min((i, j, k) for i, j, k in combinations(range(n), 3) if len(set(i, j, k)) == 3), None, None\n    c = (a + b + c) // 3\n    for a, b in set(itertools.combinations(edges, 2)):\n        if b[0] in a and b[1] in a:\n            c = a\n            break\n    return''.join(map(str, (max(len(set(i, j, k)) for i, j, k in itertools.combinations(c, 3) if i!= j or j!= k or i!= k))) +'' +''.join(map(str, (a, b, c))) +'' + str(c[0]) +'' + str(c[1]) +'' + str(c[2]))\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    edges = [tuple(map(int, line.split())) for line in lines[1:n]]\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    start = 0\n    end = n - 1\n    visited = set()\n    visited.add(start)\n    while start!= end:\n        if not graph[start]:\n            start += 1\n        else:\n            graph[start].remove(end)\n            visited.add(end)\n            end = max(graph[start], key=graph[start].count)\n            if end:\n                visited.add(end)\n    \n    return len(visited)\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = sys.stdin.read()\n    n, edges = list(map(int, stdin.split('\\n')[0:2]))\n    graph = {i: set() for i in range(1, n + 1)}\n    for i in range(0, len(edges), 2):\n        graph[edges[i]].add(edges[i + 1])\n        graph[edges[i + 1]].add(edges[i])\n    print(graph)\n    def dfs(graph, start, end, visited=set()):\n        if start == end:\n            return True\n        visited.add(start)\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                if dfs(graph, neighbor, end, visited):\n                    return True\n        return False\n\n    def find_all_paths(graph, start, end, visited=set()):\n        if start == end:\n            return [[start]]\n        paths = []\n        visited.add(start)\n        for neighbor in graph[start]:\n            if neighbor not in visited:\n                neighbor_paths = find_all_paths(graph, neighbor, end, visited)\n                for path in neighbor_paths:\n                    paths.append([start] + path)\n        return paths\n\n    paths = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if dfs(graph, i, j):\n                paths.append([i, j])\n    for path in paths:\n        if len(path) > len(set(path)):\n            continue\n        print(path)\n        print([i for i in range(1, n + 1) if i not in path])\n        return path\n\n    paths = find_all_paths(graph, 1, 6)\n    print(paths)\n    for path in paths:\n        if len(path) > len(set(path)):\n            continue\n        print(path)\n        print([i for i in range(1, n + 1) if i not in path])\n        return path\n    return find_all_paths(graph, 1, 6)\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    edges = list(map(lambda s: list(map(int, s.split(\" \"))), stdin.split(\"\\n\")[1:]))\n\n    def is_valid(a, b, c):\n        if a == b or a == c or b == c:\n            return False\n        return True\n\n    def union(a, b):\n        a_set = set(a)\n        b_set = set(b)\n        if len(a_set.intersection(b_set)) > 0:\n            return a\n        return a + b\n\n    def find_path(from_, to_):\n        if from_ == to_:\n            return [from_]\n        for edge in edges:\n            if is_valid(edge[0], edge[1], from_) and is_valid(edge[0], edge[1], to_):\n                path = find_path(edge[0], to_)\n                if len(path) > 0:\n                    return union(path, [edge[1]])\n        return []\n\n    def get_count(a, b, c):\n        path_a = find_path(a, b)\n        path_b = find_path(a, c)\n        path_c = find_path(b, c)\n        if len(path_a) == 0 or len(path_b) == 0 or len(path_c) == 0:\n            return 0\n        return len(path_a) + len(path_b) + len(path_c) - 3\n\n    result = []\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            for c in range(1, n + 1):\n                if a!= b and a!= c and b!= c:\n                    path_count = get_count(a, b, c)\n                    result.append([path_count, [a, b, c]])\n    max_count = max(result)\n    for path in result:\n        if path[0] == max_count[0]:\n            return list(map(lambda x: str(x), max_count[1]))\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds two integers which would produce the same list of divisors\n    when the input is shuffled.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: String with two integers\n    \"\"\"\n    # read all data\n    numbers = [int(x) for x in stdin.split()]\n\n    # create dictionary with numbers: divisors\n    dic = {}\n    for i in numbers:\n        div = [1, i]\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                div.append(j)\n                div.append(i // j)\n        div.sort()\n        if i not in dic:\n            dic[i] = set(div)\n        else:\n            dic[i] = dic[i].intersection(set(div))\n\n    # find two numbers which share all divisors and are in ascending order\n    x = 1\n    y = 1\n    for key in dic:\n        if len(dic[key]) == len(numbers):\n            for i in range(2):\n                x *= key\n                for val in dic[key]:\n                    if i == 0:\n                        y *= val\n                    else:\n                        y *= key\n                if x == y:\n                    return f'{x} {y}'\n    return None\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10\\n10 2 8 1 2 4 1 20 4 5\\n')\n    20 8\n    \"\"\"\n    n = int(stdin.readline().strip())\n    divisors = list(map(int, stdin.readline().split()))\n    x, y = 1, 1\n    for d in sorted(divisors):\n        x = x * d if x % d == 0 else x\n        y = y * d if y % d == 0 else y\n    return x, y\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution of \"Shuffled Division Problem\"\n    Find two integer numbers $x, y$ that could be swapped so that\n    $x$ and $y$ have the same number of divisors, and the order\n    of divisors of both numbers is the same as the given one.\n\n    >>> solution(str(100 * 1000))\n    [100, 1000]\n    \"\"\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a positive integer x, find the number of divisors of x.\n    \"\"\"\n    # n = int(stdin.readline().strip())\n    # arr = list(map(int, stdin.readline().strip().split()))\n    n = 10\n    arr = [10, 2, 8, 1, 2, 4, 1, 20, 4, 5]\n    # n = 2\n    # arr = [2, 4]\n    # n = 6\n    # arr = [1, 2, 3, 6, 1, 2, 4, 6]\n    # n = 12\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 4, 6]\n    # n = 14\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 20\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 22\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 24\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 32\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 34\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 36\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 38\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 40\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 42\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6, 1, 2, 3, 4, 6]\n    # n = 44\n    # arr = [1, 2, 3, 4, 6, 1, 2, 3"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution for the given input\n    \"\"\"\n    # Get the numbers from the input\n    numbers = [int(n) for n in stdin.split()]\n    n = numbers[0]\n    numbers = numbers[1:]\n\n    # We need to get all the divisors of the numbers\n    divisors = set()\n    for i in range(n):\n        divisors.update(get_divisors(numbers[i]))\n    divisors.update({1, numbers[0]})\n\n    # We need to get the divisors of x and y\n    x_divisors = set()\n    y_divisors = set()\n    for i in range(1, n+1):\n        # if there is a divisor of both x and y, then we have to have the same\n        # divisor twice in the list\n        if i in divisors:\n            x_divisors.add(i)\n            y_divisors.add(i)\n    x = 1\n    while x in x_divisors:\n        x += 1\n    y = numbers[0]\n    while y in y_divisors:\n        y += 1\n\n    return str(x) + \" \" + str(y)\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    divisors = list(map(int, stdin.split()))\n    n = divisors[0]\n    divisors = divisors[1:]\n    divisors_set = set(divisors)\n\n    found = False\n    x = 0\n    y = 0\n\n    for i in range(2, int(max(divisors) ** 0.5) + 1):\n        for j in range(2, int(max(divisors) ** 0.5) + 1):\n            if i * j == 1:\n                continue\n            if i * j in divisors_set:\n                found = True\n                x = i\n                y = j\n                break\n        if found:\n            break\n\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution.\n    :param stdin: str - input string\n    :return: str - output string\n    \"\"\"\n    stdin = stdin.strip()\n    divisors = list(map(int, stdin.split('\\n')[0].split()))\n    divisors.sort()\n    x, y = [], []\n    for i in range(0, len(divisors)):\n        for j in range(0, len(divisors)):\n            if i!= j and divisors[i] == divisors[j]:\n                x.append(divisors[i])\n                y.append(divisors[j])\n    x, y = list(dict.fromkeys(x)), list(dict.fromkeys(y))\n    x.sort()\n    y.sort()\n    return str(x[0]) +'' + str(y[0])"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 10 2 8 1 2 4 1 20 4 5\n   ... ''')\n    20 8\n    \"\"\"\n    x, y, *numbers = [int(line) for line in stdin.splitlines()]\n    unique = set(numbers)\n    divisors = [1] + [i for i in range(1, x + y + 1) if i not in unique]\n    x_set = set()\n    y_set = set()\n    for n in divisors:\n        if n in numbers:\n            if n in x_set:\n                x_set.remove(n)\n            else:\n                x_set.add(n)\n        else:\n            if n in y_set:\n                y_set.remove(n)\n            else:\n                y_set.add(n)\n    return f\"{x_set.pop()} {y_set.pop()}\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    k = [i for i in range(1, max(l) + 1) if i not in l]\n    r = {i: 0 for i in k}\n    for i in l:\n        for j in k:\n            if i % j == 0:\n                r[j] += 1\n    x = 0\n    y = 0\n    for i in l:\n        x += i\n        y += i * r[i]\n    for i in r:\n        r[i] %= 2\n    x = int(x / 2)\n    y = int(y / 2)\n    print(x, y)\n    return'something'"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds two positive integer numbers x, y such that x = y, x < y, and the\n    list of divisors of x and y is the same as the list of divisors of the\n    number formed by merging x and y.\n    \"\"\"\n    # get number of divisors\n    num_divisors = int(stdin.readline())\n\n    # get divisors\n    divisors = list(map(int, stdin.readline().split()))\n\n    # get x and y\n    x = int(stdin.readline())\n    y = int(stdin.readline())\n\n    x_divisors = set()\n    y_divisors = set()\n    x_y_divisors = set()\n\n    # find divisors of x\n    for num in range(2, x + 1):\n        if x % num == 0:\n            x_divisors.add(num)\n\n    # find divisors of y\n    for num in range(2, y + 1):\n        if y % num == 0:\n            y_divisors.add(num)\n\n    # find common divisors\n    for num in x_divisors.intersection(y_divisors):\n        x_y_divisors.add(num)\n\n    # find x and y\n    x_y_divisors = x_y_divisors.union(x_divisors.intersection(y_divisors))\n    for num in x_y_divisors:\n        if num <= x and num <= y:\n            x = num\n            y = x * y // num\n            break\n\n    print(x, y)\n\n    return ''\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1:]]\n    res = 0\n    for i in range(n):\n        res = max(res, sum(a[i][:int(m/2)]))\n    for i in range(n):\n        if i == n-1:\n            continue\n        res = max(res, sum(a[i][int(m/2):])+sum(a[i+1][:int(m/2)]))\n    return str(res)"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.split())\n    matrix = [[int(c) for c in stdin.split()[1::2]] for _ in range(n)]\n    \n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = matrix[i-1][j-1] + dp[i][j-1] + dp[i-1][j] - dp[i-1][j-1]\n    \n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, m//2+1):\n            ans = max(ans, sum(dp[i][j*2-1:j*2+m-j+1]) % k)\n    \n    return str(ans)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '0'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    data = [list(map(int, stdin.split())) for _ in range(n)]\n    # row = [sum(x) % k for x in data]\n    row = [[sum(x) % k for x in data]]\n    ans = row[0]\n    for i in range(1, n):\n        ans = [max([row[i - 1][j] + ans[j] for j in range(m) if ans[j]!= 0], default=0) % k for j in range(m)]\n    print(max(ans))\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = [line.split(' ') for line in stdin.split('\\n')]\n    stdin = [list(map(int, line)) for line in stdin]\n    m = stdin[0][1]\n    k = stdin[0][2]\n    n = len(stdin)\n    stdin = stdin[1:]\n    res = 0\n    for i in range(n):\n        a = stdin[i]\n        a = a[:m//2]\n        if m % 2 == 1:\n            a = a[:-1]\n        a = a[::-1]\n        s = 0\n        for j in range(len(a)):\n            s += a[j]\n        s = s % k\n        res = max(res, s)\n    return res"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m, k = map(int, stdin.split())\n    matrix = [list(map(int, line.split())) for line in stdin.split('\\n')[:n]]\n    sums = []\n    for row in matrix:\n        row_sums = []\n        for column in range(len(row)):\n            if column == 0:\n                row_sums.append(row[column])\n            else:\n                current_sum = row[column]\n                current_sum += row[column - 1]\n                current_sum = current_sum % k\n                row_sums.append(current_sum)\n        sums.append(row_sums)\n\n    res = 0\n    for row_idx in range(len(sums)):\n        row = sums[row_idx]\n        res = max(res, sum(row[:m // 2]) % k)\n    print(res)\n    return ''"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    a = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    return max([0] + [sum(r) for r in a]) % k\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    C1: Find k and s where s is a string of k characters consisting of 'L' and 'R'\n    C2: For each input, there is only one solution\n    C3: The number of operations is always even\n    C4: The array a consists of strictly increasing numbers\n    :param stdin:\n    :return:\n    \"\"\"\n    return 'L'*3"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\nYour solution code goes here!\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_increase_sequence(inp: str, n: int):\n        seq = [int(x) for x in inp.split()]\n        seq = list(sorted(set(seq)))\n        ans = 1\n        max_len = 1\n        for i in range(1, n):\n            if seq[i] >= seq[i - 1]:\n                ans += 1\n            else:\n                ans = 1\n            max_len = max(max_len, ans)\n        return max_len\n\n    # TODO: use the solution for problem C1 and C2\n    return get_increase_sequence(stdin, int(stdin.split()[0]))\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while stdin:\n        count += 1\n        stdin = stdin[1:]\n\n    return \"L\" * count\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom tools import timing\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ncount = 0\nleft = []\nright = []\n\nfor i in a:\n    if i not in left:\n        left.append(i)\n    else:\n        left.remove(i)\n\nfor i in a[::-1]:\n    if i not in right:\n        right.append(i)\n    else:\n        right.remove(i)\n\ncount = len(left) + len(right)\n\nprint(count)\nprint('L' * count)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum non-negative integer value D such that if you add this value to some a_i, subtract this value from some a_i and leave some a_i without changes, all obtained values become equal. If it is impossible, return -1.\"\"\"\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    numbers = [0] * 100\n    for i in arr:\n        numbers[i] += 1\n    sum_numbers = sum(numbers)\n    if sum_numbers % n!= 0:\n        return -1\n    sum_each = sum_numbers // n\n    result = sum_each\n    for i in range(1, n):\n        numbers[i] -= numbers[i-1]\n        if numbers[i] < 0:\n            numbers[i] = 0\n        sum_numbers = sum_numbers - numbers[i] * i\n        if sum_numbers % n!= 0:\n            return -1\n        sum_each = sum_numbers // n\n        result = min(result, sum_each)\n    return result\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.readline())\n  a = list(map(int, stdin.readline().split()))\n  if n < 2:\n    return -1\n  x = sum(a)\n  \n  s, d = set(), {}\n  \n  if x % n:\n    return -1\n  x //= n\n  \n  for i in a:\n    if i in s:\n      s.remove(i)\n      if i in d:\n        d[i] += 1\n      else:\n        d[i] = 1\n    else:\n      s.add(i)\n  \n  for i in d:\n    if x - i in d:\n      return x - i\n  return -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    s = sum(a)\n    mx = s // n\n    ans = s\n    for i in range(n - 1):\n        a[i] -= mx\n        a[i + 1] -= mx\n        s = sum(a)\n        ans = min(ans, s)\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # pass\n    # if len(set(stdin))!= len(stdin):\n    #     return -1\n    #     pass\n    # else:\n    #     return min(set(stdin))\n    #     pass\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    D = {}\n    D[n - 1] = 0\n    min_D = 1\n    for i in range(n):\n        if a[i] >= min_D:\n            D[i] = 0\n            min_D = a[i]\n            pass\n        else:\n            D[i] = min_D - a[i]\n            pass\n        pass\n    if len(set(D.values()))!= 1:\n        return -1\n        pass\n    else:\n        return D[0]\n        pass\n    pass\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n\n    def check(d: int) -> bool:\n        for i in range(n):\n            if a[i]!= a[0]:\n                return False\n        return True\n\n    a = [int(i) for i in stdin.split()]\n    n = len(a)\n    if n == 1:\n        return 0\n    a.sort()\n    min_ = a[0]\n    for i in range(min_, 0, -1):\n        for j in range(n):\n            a[j] -= i\n            if a[j] < 0:\n                a[j] = 0\n        if check(i):\n            return i\n    return -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = list(map(int, stdin.split()))\n    x, y = min(stdin), max(stdin)\n    if x >= 0 and y < 0:\n        return str(abs(y) // abs(x))\n    elif x < 0:\n        return '-1'\n    else:\n        return '0'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    min_neg = -1\n    for i in range(n):\n        if nums[i] < 0:\n            min_neg = nums[i]\n            break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + min_neg == nums[j]:\n                return str(min_neg)\n            elif nums[i] + min_neg < nums[j]:\n                return '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(c) for c in stdin.readline().split()]\n\n    result = 10 ** 9 + 1\n    min_neg_num = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            num1 = abs(nums[i] - nums[j])\n            num2 = abs(nums[i] + nums[j])\n            if num1 < num2:\n                num2 = num1\n            result = min(result, num2 - min_neg_num)\n            if num1 < num2:\n                min_neg_num = num2\n\n    return str(result) if result!= 10 ** 9 + 1 else str(-1)\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    x3, y3, x4, y4 = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    x5, y5, x6, y6 = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n    \n    x = x1 if x2 <= x1 or x1 <= x3 else x2\n    y = y1 if y2 <= y1 or y1 <= y3 else y2\n    \n    if x5 <= x or x <= x6 or y5 <= y or y <= y6:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    if max(x_1, y_1) <= min(x_2, y_2) or max(x_3, y_3) <= min(x_4, y_4) or max(x_5, y_5) <= min(x_6, y_6):\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Create 4 sets for 3 sets of coordinates:\n        {x_1, y_1}\n        {x_2, y_2}\n        {x_3, y_3}\n        {x_4, y_4}\n    and for each coordinate check if it lies between two sets.\n\n    If a point lies between two sets, return \"YES\".\n\n    Otherwise return \"NO\".\n\n    The result is one of the only possible output.\n    '''\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split(' ')]\n    x_3, y_3, x_4, y_4 = [int(x) for x in stdin.split(' ')]\n    x_5, y_5, x_6, y_6 = [int(x) for x in stdin.split(' ')]\n\n    coord_1 = {x_1, y_1}\n    coord_2 = {x_2, y_2}\n    coord_3 = {x_3, y_3}\n    coord_4 = {x_4, y_4}\n    coord_5 = {x_5, y_5}\n    coord_6 = {x_6, y_6}\n\n    res = 'NO'\n    for x, y in [(x_1, y_1), (x_2, y_2), (x_3, y_3), (x_4, y_4), (x_5, y_5), (x_6, y_6)]:\n        if coord_1.issuperset((x, y)):\n            if coord_2.issuperset((x, y)):\n                if coord_3.issuperset((x, y)):\n                    res = 'YES'\n        if coord_4.issuperset((x, y)):\n            if coord_5.issuperset((x, y)):\n                if coord_6.issuperset((x, y)):\n                    res = 'YES'\n    return res\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\")\n    'YES'\n    >>> solution(\"3 1 7 6\\n8 1 11 7\\n3 1 5 5\")\n    'YES'\n    >>> solution(\"5 2 10 5\\n3 1 7 6\\n8 1 11 7\")\n    'YES'\n    >>> solution(\"0 0 1000000 1000000\\n0 0 499999 1000000\\n500000 0 1000000 1000000\")\n    'YES'\n    >>> solution(\"1 1 3 5\\n1 1 5 5\")\n    'NO'\n    >>> solution(\"1 1 3 5\\n1 1 5 5\\n3 1 5 5\")\n    'NO'\n    \"\"\"\n    x1, y1, x2, y2 = map(int, stdin.split('\\n')[0].split())\n    x3, y3, x4, y4 = map(int, stdin.split('\\n')[1].split())\n    x5, y5, x6, y6 = map(int, stdin.split('\\n')[2].split())\n\n    def is_outside(x: int, y: int) -> bool:\n        return x1 <= x <= x2 and y1 <= y <= y2\n\n    def is_inside(x: int, y: int) -> bool:\n        return x3 <= x <= x4 and y3 <= y <= y4\n\n    def is_in_all(x: int, y: int) -> bool:\n        return (is_outside(x, y) and is_outside(x, y) and is_outside(x, y)) or \\\n               (is_inside(x, y) and is_inside(x, y) and is_inside(x, y))\n\n    return \"YES\" if is_in_all(x5, y5) or is_in_all(x5, y6) or is_in_all(x6, y5) or is_in_all(x6, y6) else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    x1, y1 = sorted([x1, y1])\n    x2, y2 = sorted([x2, y2])\n    x3, y3 = sorted([x3, y3])\n    x4, y4 = sorted([x4, y4])\n    x5, y5 = sorted([x5, y5])\n    x6, y6 = sorted([x6, y6])\n    if (x1 >= x2) and (y1 <= y2) and (x3 >= x4) and (y3 <= y4) and (x5 >= x6) and (y5 <= y6):\n        return 'YES'\n    if (x1 <= x2) and (y1 <= y2) and (x3 <= x4) and (y3 <= y4) and (x5 <= x6) and (y5 <= y6):\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = list(map(int, stdin.split()))\n    x3, y3, x4, y4 = list(map(int, stdin.split()))\n    x5, y5, x6, y6 = list(map(int, stdin.split()))\n\n    x1, y1 = min(x1, x2), min(y1, y2)\n    x3, y3 = min(x3, x4), min(y3, y4)\n    x5, y5 = min(x5, x6), min(y5, y6)\n\n    x_a = max(x1, x3, x5)\n    y_a = max(y1, y3, y5)\n    x_b = min(x2, x4, x6)\n    y_b = min(y2, y4, y6)\n\n    if x_a > x_b or y_a > y_b:\n        return 'NO'\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    x1_max = max(x1, x3)\n    x2_max = min(x2, x4)\n    y1_max = max(y1, y3)\n    y2_max = min(y2, y4)\n    x5_max = max(x5, x6)\n    x6_max = min(x5, x6)\n    y5_max = max(y5, y6)\n    y6_max = min(y5, y6)\n\n    if y5_max < y1_max:\n        y5_max = y1_max\n    if y6_max < y2_max:\n        y6_max = y2_max\n    if x5_max < x1_max:\n        x5_max = x1_max\n    if x6_max < x2_max:\n        x6_max = x2_max\n\n    if x5_max > x2_max or x6_max > x1_max or y5_max > y2_max or y6_max > y1_max:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    x, y = max(x1, x3, x5), max(y1, y3, y5)\n    xmax, ymax = min(x2, x4, x6), min(y2, y4, y6)\n    if (x <= xmax) and (y <= ymax):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n----Problem solution----\n\"\"\"\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem.\"\"\"\n    # input -> int n\n    n = int(stdin.read())\n    # output -> int\n\n    def f(x):\n        if x % 10 == 0:\n            return x + 1\n        if x % 10 == 1:\n            return x + 9\n        if x % 10 == 2:\n            return x + 8\n        if x % 10 == 3:\n            return x + 7\n        if x % 10 == 4:\n            return x + 6\n        if x % 10 == 5:\n            return x + 5\n        if x % 10 == 6:\n            return x + 4\n        if x % 10 == 7:\n            return x + 3\n        if x % 10 == 8:\n            return x + 2\n        if x % 10 == 9:\n            return x + 1\n\n    s = set()\n    for i in range(1, n + 1):\n        if i == 1:\n            s.add(i)\n        else:\n            s.add(f(i))\n    return len(s)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    result = 0\n    result += len(list(str(number)))\n    while number >= 9:\n        number = number - 9 * ((number - 1) // 9)\n        result += len(list(str(number)))\n    return result\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cur = 0\n    counter = 0\n    while n:\n        if n % 2:\n            cur = n + 1\n            counter += 1\n            if n < cur:\n                return counter\n        else:\n            n //= 2\n            counter += 1\n    return counter\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    \n    return \"\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] += dp[i - 1] + dp[i - 2] + dp[i - 3]\n    print(dp[n])\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    fs = [int(s) for s in stdin.readline().split()]\n    sums = [0] * n\n    for i, f in enumerate(fs):\n        if f == 0:\n            sums[i] = n\n        else:\n            sums[i] = f - 1\n    visited = set()\n    ans = []\n    def dfs(idx, sum):\n        if sum == n:\n            nonlocal ans\n            ans = idx\n        elif sum > n:\n            return\n        if idx not in visited:\n            visited.add(idx)\n            for i, f in enumerate(fs[idx]):\n                if f == 0:\n                    continue\n                if i in visited:\n                    continue\n                dfs(i, sum + f)\n                visited.remove(idx)\n    dfs(0, 0)\n    for i, f in enumerate(fs):\n        if f!= 0:\n            ans[i] = f - 1\n    return''.join(map(str, ans))\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    numbers = [int(i) for i in stdin[1].split()]\n    a = []\n    for i in range(n):\n        if numbers[i] == 0:\n            a.append(n - i)\n        else:\n            a.append(numbers[i])\n    return''.join(map(str, a))\n    "
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n5 0 0 2 4\\n')\n    '5 3 1 2 4'\n    >>> solution('7\\n7 0 0 1 4 0 6\\n')\n    '7 3 2 1 4 5 6'\n    >>> solution('7\\n7 4 0 3 0 5 1\\n')\n    '7 4 2 3 6 5 1'\n    >>> solution('5\\n2 1 0 0 0\\n')\n    '2 1 4 5 3'\n    \"\"\"\n    n, *f = map(int, stdin.split())\n    ans = [0 for _ in range(n)]\n    for fi in f:\n        if fi!= 0:\n            ans[fi - 1] = fi\n    for i, f in enumerate(ans):\n        if f == 0:\n            ans[i] = ans.index(0, i) + 1\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *f = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    graph = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if f[i] == 0 and f[j] == 0:\n                graph[i][j] = 0\n            elif f[i]!= 0 and f[j]!= 0:\n                graph[i][j] = 1\n            elif f[i] == 0:\n                graph[i][j] = f[j]\n            elif f[j] == 0:\n                graph[i][j] = f[i]\n    print(n, end=' ')\n    for x in graph:\n        for y in x:\n            print(y, end=' ')\n        print()\n    return ''"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline().strip())\n    friends = list(map(int, stdin.readline().strip().split(' ')))\n\n    friends_distinct = {}\n    for i, v in enumerate(friends):\n        if v == 0:\n            friends_distinct[i] = v\n            friends[i] = 0\n        else:\n            friends[i] = v\n    '''\n    friends = [int(i) for i in stdin.readline().split()]\n    distinct = [i for i in range(len(friends)) if friends[i] == 0]\n    for i in distinct:\n        for j in distinct:\n            if j!= i:\n                friends[j] -= 1\n    friends = [str(i) for i in friends]\n    return''.join(friends)\n    "
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    f = [int(i) for i in stdin[1].split()]\n    ans = [0] * n\n    for i in range(n):\n        if f[i] == 0:\n            ans[i] = n\n        else:\n            ans[i] = f[i]\n    for i in range(n):\n        ans[i] = f[i]\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    nums = list(map(int, input[1].split()))\n    res = []\n    visited = [False] * n\n    solution_1(nums, n, res, visited)\n    return \"\\n\".join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    finds the gifts for the new year\n    \"\"\"\n    friends = int(stdin.readline())\n    gifts = list(map(int, stdin.readline().split()))\n    gifts_set = set()\n    for gift in gifts:\n        if gift == 0:\n            continue\n        elif gift not in gifts_set:\n            gifts_set.add(gift)\n        else:\n            gifts_set.remove(gift)\n\n    gifts_set = sorted(gifts_set)\n    ans = [0] * friends\n    for i in range(friends):\n        if gifts[i] == 0:\n            ans[i] = gifts_set[0]\n            gifts_set.pop(0)\n        else:\n            ans[i] = gifts[i]\n\n    return''.join(list(map(str, ans)))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    \n    nums = [int(x) for x in stdin.readline().split()]\n    \n    count = Counter(nums)\n    \n    answer = []\n    \n    for i in range(n):\n        if count[i] == 0:\n            answer.append(i)\n    \n    for i in range(n):\n        if i not in answer:\n            answer.append(i)\n    \n    for i in range(n):\n        print(answer[i], end=\" \")\n    \n    return \"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return 'YES' or 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = [int(x) for x in stdin.split(' ')]\n    \n    return 'YES' if n * k == len(set(a)) * k else 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n == 1:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[-1] == 1:\n        return \"YES\"\n    if a[0]!= 1:\n        return \"NO\"\n    s = set()\n    for i in range(1, k + 1):\n        if a[i - 1] in s:\n            return \"NO\"\n        s.add(i)\n    return \"YES\" + \" \".join([str(j) for j in s])\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get n, k from stdin\n    (n, k) = [int(n) for n in stdin.split('\\n')[0].split()]\n    \n    # Get a\n    a = [int(n) for n in stdin.split('\\n')[1].split()]\n\n    # Check if there is a valid color\n    for i in range(1, k):\n        if sum([j for j in a if j % i == 0]) == 0:\n            return 'NO'\n\n    # Check if there is a valid coloring\n    ans = []\n    for i in range(k):\n        c = 0\n        for j in a:\n            if j % i == 0:\n                c += 1\n        if c == len(a):\n            ans.append(i)\n        elif c == 0:\n            return 'NO'\n    if len(ans) == 0:\n        return 'NO'\n    ans =''.join([str(i) for i in ans])\n    return 'YES'+ ans\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, k = [int(x) for x in stdin.split(' ')]\n    b = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    ans = ''\n    for i in range(k):\n        ans = str(i) +'' + ans\n        if i + 1 not in b:\n            ans = ans[:-1]\n            ans = ans + 'NO'\n            break\n        b_i = [a[i] for i in range(len(a)) if i + 1 in b]\n        a_i = [a[i] for i in range(len(a)) if i + 1 not in b]\n        b_cnt = {}\n        for c in b_i:\n            if c not in b_cnt:\n                b_cnt[c] = 0\n            b_cnt[c] += 1\n        if max(b_cnt.values()) == 1:\n            ans = ans[:-1]\n            ans = ans + 'NO'\n            break\n        a_cnt = {}\n        for c in a_i:\n            if c not in a_cnt:\n                a_cnt[c] = 0\n            a_cnt[c] += 1\n        if min(a_cnt.values())!= 1:\n            ans = ans[:-1]\n            ans = ans + 'NO'\n            break\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"solution\"\"\"\n    pass\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nn, k = list(map(int, stdin.split()))\n\na = list(map(int, stdin.split()))\n\na.sort()"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution\n    '''\n    # get inputs\n    length, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    # a must contain 1, 2,..., k elements\n    assert all(i in range(1, k+1) for i in a)\n\n    # if a is not distinct, then the answer is no\n    if len(set(a)) < len(a):\n        print('NO')\n        return\n\n    # if a is not a subset of a range(1, k+1), then the answer is no\n    if any(i!= 1 and i not in range(a[0], a[-1]+1) for i in a):\n        print('NO')\n        return\n\n    # otherwise, the answer is yes\n    print('YES')\n    for i in range(k):\n        print(i+1, end=' ')\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    x_digit = x\n    y_digit = y\n    stdin = stdin.replace('0', '1')\n    stdin = stdin.replace('1', '0')\n    stdin = stdin.replace('1', '2')\n    stdin = stdin.replace('2', '1')\n    x_digit = x_digit * len(stdin)\n    for i in range(0, x_digit):\n        if stdin[i] == '0':\n            x_digit = i\n            break\n    y_digit = y_digit * len(stdin)\n    for i in range(0, x_digit):\n        if stdin[i] == '0':\n            y_digit = i\n            break\n    print(x_digit, y_digit)\n    return 0\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split(' '))\n    x, y = min(x, y), max(x, y)\n    a = 0\n    while x:\n        a = x % 10 + a * 10\n        x //= 10\n    while y > 0:\n        a = (a * 10) % 10**x\n        y -= 1\n    return a\n\"\"\"\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    s = ''.join(map(str, stdin[:n]))\n    n_ = len(s)\n    rem = pow(10, y) % pow(10, x)\n    if rem == 0:\n        return 0\n    for i in range(n_):\n        if s[i] == '1':\n            continue\n        s = s[:i] + '1' + s[i+1:]\n        break\n    return n_ - i - 1\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split(' ')]\n    remainders = [int(i) for i in list(stdin[:n])]\n    while remainders[0] == 0:\n        remainders.pop(0)\n    remainders = [i * 10 ** y % 10 ** x for i in remainders]\n    min_num = min(remainders)\n    min_index = remainders.index(min_num)\n    remainders = [remainders[min_index]] + remainders[:min_index] + remainders[min_index + 1:]\n    while remainders[0] == 0:\n        remainders.pop(0)\n    return str(len(remainders))\n    # return str(sum([len(remainders[i:i+1]) for i in range(0, len(remainders))]))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(c) for c in stdin.split(' ')]\n    return str(y)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"11 5 2\\n11010100101\")\n    1\n    >>> solution(\"11 5 1\\n11010100101\")\n    3\n    \"\"\"\n    n, x, y = map(int, stdin.split())\n    num = stdin.strip()\n    if num[0] == \"0\":\n        return 0\n    while num[0]!= \"1\":\n        num = \"1\" + num\n        n += 1\n    exp = 0\n    for i in range(x, n):\n        exp = exp * 10 % (10 ** x)\n        exp = exp + int(num[i])\n    for i in range(1, len(num) - x + 1):\n        exp = exp * 10 % (10 ** y)\n        exp = exp + int(num[i + y - 1])\n    return exp\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(x) for x in stdin.split()]\n    # the range of the integer is [0, 2 * 10 ** 5]\n    # the range of the binary digits is [0, 1]\n    # the range of the remainder is [0, 10 ** y]\n    # the range of the result is [0, 10 ** x]\n    return str(min([i for i in range(10 ** x) if i % 10 ** y!= 0], default=0))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split()]\n    if y < x:\n        return n - x\n    else:\n        return n - y\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    x, y, n = [int(x) for x in stdin.split()]\n    \n    if y == 1:\n        return str(n-1)\n    \n    if y == 0:\n        return '0'\n    \n    n = n - 1\n    remainder = pow(10, y, n)\n    count = 0\n    \n    while remainder > 1:\n        count += 1\n        remainder = (remainder * 10) % n\n    \n    return str(count)\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"Calculate the number of palindromes\"\n    t = int(stdin.readline().strip())\n    res = []\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        arr = [int(x) for x in stdin.readline().strip().split()]\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                x = arr[i : j + 1]\n                y = x[::-1]\n                if x == y:\n                    res.append(x)\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(n ** 3)\n    space complexity: O(n)\n    \"\"\"\n    num_of_test_cases = int(stdin)\n    results = []\n    for _ in range(num_of_test_cases):\n        length = int(stdin)\n        a_str = stdin\n        a_str = a_str.split(\" \")\n        a_list = [int(a) for a in a_str]\n        result = 'NO'\n        for i in range(len(a_list)):\n            for j in range(i + 1, len(a_list)):\n                for k in range(j + 1, len(a_list)):\n                    if (a_list[i] == a_list[k]) and (a_list[j] == a_list[k]):\n                        result = 'YES'\n        results.append(result)\n    return \"\\n\".join(results)\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    return \"YES\" if a.count(a[0]) == n else \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split()[0]\n    function = list(map(int, stdin.split()[1:]))\n    # print(number)\n    # print(function)\n    result = number\n    for i in range(len(number)):\n        sub = result[i:]\n        num = \"\"\n        for j in sub:\n            num += str(function[int(j) - 1])\n        result = num\n    print(result)\n    return result\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, d, f = [int(x) for x in stdin.split('\\n')]\n    i = len(a) - 1\n    while i >= 0 and a[i] == 9:\n        i -= 1\n    while i >= 0 and a[i] == 8:\n        i -= 1\n    while i >= 0 and a[i] == 7:\n        i -= 1\n    while i >= 0 and a[i] == 6:\n        i -= 1\n    while i >= 0 and a[i] == 5:\n        i -= 1\n    while i >= 0 and a[i] == 4:\n        i -= 1\n    while i >= 0 and a[i] == 3:\n        i -= 1\n    while i >= 0 and a[i] == 2:\n        i -= 1\n    while i >= 0 and a[i] == 1:\n        i -= 1\n    return str(f[a[i]]) + (d - 1 - i) * '9'\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    f = list(map(int, stdin.readline().split()))\n    res = a\n    for i in range(n):\n        if a[i]!= res[i]:\n            for j in range(a[i], res[i] + 1):\n                res[i] = f[j - 1]\n            res[i] = f[a[i] - 1]\n    return ''.join(map(str, res))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1337\\n1 2 5 4 6 6 3 1 9\\n\")\n    '1557'\n    \"\"\"\n    n = int(stdin.readline())\n    a = stdin.readline().strip()\n    f = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(1, n + 1):\n        f_pos = f[i - 1] - 1\n        if f_pos == -1:\n            res += int(a[:i])\n            a = a[i:]\n        else:\n            res += int(a[:f_pos]) * 10 ** (i - 1)\n            a = a[f_pos:]\n    return res\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    digits = int(stdin.readline())\n    a = stdin.readline()[:-1]\n    functions = list(map(int, stdin.readline().split()))\n\n    # Algorithm\n    # Iterate through all digits in a\n    # For each digit, replace it with the corresponding function value\n    # If there are two or more function values with the same value, keep the highest function value\n    # Return the result\n    max_number = 0\n    for i in range(digits):\n        highest_function_value = 0\n        for function_value in functions:\n            if a[i] == str(function_value):\n                highest_function_value = max(highest_function_value, function_value)\n        if highest_function_value > 0:\n            a = a.replace(a[i], str(highest_function_value))\n        max_number = max(max_number, int(a))\n    return max_number\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n1337\\n1 2 5 4 6 6 3 1 9\\n')\n    '1557'\n    \"\"\"\n    digits_amount = int(stdin.split()[0])\n    digits = [int(i) for i in stdin.split()[1]]\n    funcs = [int(i) for i in stdin.split()[2]]\n\n    length = len(digits)\n    max_number = 0\n    for i in range(length):\n        for j in range(digits_amount):\n            if digits[i] == funcs[j]:\n                digits[i] = funcs[j]\n                break\n        max_number = max(max_number, int(\"\".join([str(x) for x in digits])))\n    return max_number\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function return max possible number\"\"\"\n\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(stdin.split(\"\\n\")[1])\n\n    for i in range(9):\n        a[0] = i + 1\n        a = [str(f(i)) for i in a]\n        print(\"\".join(a))"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    f = list(map(int, stdin[2].split()))\n    \n    return str(max(a))\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible number after performing the operation one time\n\n    Args:\n        stdin: input of the problem\n\n    Returns:\n        str: the maximum possible number\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    k = stdin.split('\\n')[2]\n\n    k = [int(i) for i in k.split(' ')]\n    b = a[0]\n    for i in range(1, len(a)):\n        if k[int(a[i]) - 1] < k[int(b) - 1]:\n            b = a[i]\n    return b\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Not implemented\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(t*n^3) / O(t*n^2)\n    \"\"\"\n    t = int(stdin.readline().strip())\n    res = []\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        left = right = 1\n        while left < b and left <= c:\n            left *= 10\n        while right < b and right <= c:\n            right *= 10\n        for i in range(left, right+1):\n            if i % a == 0 and i % b == 0:\n                res.append(i)\n                break\n        else:\n            res.append(-1)\n    return '\\n'.join([str(r) for r in res])\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 1 2 3\n   ... 123 321 456\n   ... 5 10 15\n   ... 15 18 21\n   ... 100 100 101\n   ... 1 22 29\n   ... 3 19 38\n   ... 6 30 46''')\n    1\n    1 1 3\n    102\n    114 228 456\n    4\n    4 8 16\n    6\n    18 18 18\n    1\n    100 100 100\n    7\n    1 22 22\n    2\n    1 19 38\n    8\n    6 24 48\n    \"\"\"\n    t = int(next(stdin))\n    for _ in range(t):\n        a, b, c = map(int, next(stdin).split())\n        if a < b < c:\n            if b % a == 0:\n                print(1)\n                print(a, b, c)\n            elif c % b == 0:\n                print(1)\n                print(b, a, c)\n            else:\n                print(2)\n                print(a, b, c)\n        elif a < c < b:\n            if b % a == 0:\n                print(1)\n                print(a, b, c)\n            elif c % b == 0:\n                print(1)\n                print(b, a, c)\n            else:\n                print(2)\n                print(a, b, c)\n        elif b < a < c:\n            if a % b == 0:\n                print(1)\n                print(a, b, c)\n            elif c % a == 0:\n                print(1)\n                print(a, b, c)\n            else:\n                print(2)\n                print(a, b, c)\n        elif b < c < a:\n            if a % b == 0:\n                print(1)\n                print(a, b, c)\n            elif c % a == 0:\n                print(1)\n                print(a, b, c)\n            else:\n                print(2)\n                print(a, b, c)\n        elif c < a < b:\n            if b % c == 0:\n                print(1)\n                print(a, b, c)\n            elif a % c == 0:\n                print(1)\n                print(a, b, c)\n            else:\n                print(2)\n                print(a, b, c)\n        elif c < b < a:\n            if a % c == 0:\n                print(1)\n                print(a, b, c)\n            elif b % c == 0:\n                print(1)\n                print(a, b, c)\n            else:\n                print(2)\n                print(a, b, c)\n        else:\n            if a == b:\n                print(1)\n                print(a, b, c)\n            elif b == c:\n                print(1)\n                print(a, b, c)\n            elif c == a:\n                print(1)\n                print(a, b, c)\n            else:\n                print(3)\n                print(a, b, c)\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    res = 0\n    for case in range(cases):\n        a, b, c = map(int, stdin.readline().split())\n        if c % b == 0:\n            res += b - a\n        elif c % b!= 0:\n            res += c - b\n    return res\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is similar to my one before.\n    \"\"\"\n    n = int(stdin)\n    for _ in range(n):\n        a, b, c = map(int, stdin.split())\n        if a <= b <= c:\n            print(0)\n            print(a, b, c)\n        else:\n            print(1)\n            x = b//a\n            y = c//b\n            print(a, x, b)\n            print(b, c, y)\n            if x*y == 1:\n                print(b-1, c-1, c-1)\n            else:\n                print(b//(x-1), c//y, c//y)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n*log(n))\n    Space complexity: O(1)\n    \"\"\"\n    triplets = set()\n    for i in range(len(stdin) // 3):\n        a, b, c = sorted(stdin[3 * i : 3 * i + 3])\n        if b % a == 0 and c % b == 0:\n            triplets.add(c)\n            triplets.add(b)\n    triplets = list(triplets)\n    if len(triplets) == 0:\n        return \"1\\n1 1 3\"\n    elif len(triplets) == 1:\n        return \"1\\n\" + str(triplets[0])\n    elif len(triplets) == 2:\n        return \"2\\n\" + str(triplets[0]) + \" \" + str(triplets[1])\n    else:\n        return \"3\\n\" + str(triplets[0]) + \" \" + str(triplets[1]) + \" \" + str(triplets[2])\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b, c = map(int, stdin.split())\n    if b == a or c == a or b == c:\n        return \"0\\n\"\n    elif b % a == 0 and c % b == 0:\n        return \"1\\n\"\n    else:\n        res = 0\n        a_counter = 0\n        while a_counter < b:\n            if b % a_counter == 0:\n                res += 1\n            a_counter += 1\n        a_counter = 0\n        while a_counter < c:\n            if c % a_counter == 0:\n                res += 1\n            a_counter += 1\n        return f\"{res}\\n\""
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_el = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    res = arr[-1] - arr[0]\n    for i in range(num_el - 1):\n        res = min(res, arr[i+1] - arr[i])\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    a = [int(i) for i in stdin.splitlines()[1].split()]\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    lst = [int(num) for num in stdin.split(\"\\n\")[1].split(\" \")]\n    lst.sort()\n    best_i = None\n    best_stability = float(\"inf\")\n    for i in range(0, n):\n        if lst[i] == lst[i + 1]:\n            continue\n        if lst[i] - lst[i + 1] < best_stability:\n            best_i = i\n            best_stability = lst[i] - lst[i + 1]\n    return best_stability\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute the minimum instability of the input array.\"\n    array = [int(x) for x in stdin.splitlines()[1].split()]\n    min_max = max(array) - min(array)\n    array.remove(min(array))\n    return str(max(array) - min(array))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def array_min(i, j):\n        if a[i] < a[j]:\n            return a[i]\n        else:\n            return a[j]\n\n    def array_max(i, j):\n        if a[i] > a[j]:\n            return a[i]\n        else:\n            return a[j]\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    i, j = 0, n - 1\n    curr_min = curr_max = a[0]\n    ans = n - 1\n    while i < j:\n        curr_min = array_min(i, j)\n        curr_max = array_max(i, j)\n        if curr_max - curr_min > ans:\n            ans = curr_max - curr_min\n            res = a[i]\n        i += 1\n        j -= 1\n    print(ans)\n    return \" \".join(map(str, [res]))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine the minimum instability of the remaining array.\"\"\"\n    pass\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = [int(x) for x in stdin.split()]\n    p = [[int(x) for x in stdin.split()] for i in range(m)]\n\n    s = [[0, 0] for i in range(m)]\n\n    for i in range(m):\n        s[i] = [p[i][0], p[i][1]]\n\n    ans = [1]\n\n    cur = [0]\n    cur_sum = 0\n\n    for i in range(n):\n        next = []\n        for j in range(len(cur)):\n            if s[cur[j]][1] > i + 1:\n                next.append(cur[j])\n                cur_sum += cur[j] + 1\n        for j in range(len(next)):\n            if s[next[j]][0] > i + 1:\n                if s[next[j]][1] < i + 1:\n                    ans.append(s[next[j]][1] + 1)\n                else:\n                    ans.append(0)\n                cur.append(next[j])\n                cur_sum += next[j] + 1\n        if i == s[cur[0]][0] - 1:\n            if cur_sum < n:\n                ans.append(n - cur_sum)\n            else:\n                ans.append(0)\n            cur.append(0)\n            cur_sum = 0\n\n    print(*ans)\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.readline().split()]\n    schedule = []\n    for m in range(M):\n        s, d, c = [int(x) for x in stdin.readline().split()]\n        schedule.append([s, d, c])\n    \n    schedule.sort(key=lambda x: x[0])\n    minDay = 0\n    maxDay = 0\n    prepared = {}\n    for x in schedule:\n        if x[0] < minDay:\n            prepared = {}\n            minDay = x[0]\n        \n        if x[0] in prepared.keys():\n            return \"Impossible\"\n        \n        maxDay = x[1]\n        prepared[x[0]] = x[2]\n        \n    return \" \".join([str(x) for x in list(range(1, maxDay - minDay + 2))])\n\"\"\"\n\n\"\"\"\n\n-----SOLUTION-----\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport collections\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    days = [int(i) for i in stdin[0].split(' ')]\n    exams = [\n        [int(i) for i in stdin[i].split(' ')]\n        for i in range(1, len(stdin))]\n    petya_days = {}\n    for day in range(days[0], days[1] + 1):\n        for exam in exams:\n            if day in range(exam[0], exam[1] + 1):\n                petya_days[day] = exam[2]\n                break\n            else:\n                petya_days[day] = 0\n    day_count = {}\n    for day in petya_days:\n        if petya_days[day] in day_count:\n            day_count[petya_days[day]] += 1\n        else:\n            day_count[petya_days[day]] = 1\n    if sum(day_count.values()) == len(exams):\n        ans = [0] * days[1]\n        for i in range(1, days[1] + 1):\n            ans[i - 1] = (len(exams) + 1) if petya_days[i] else 0\n        return''.join([str(i) for i in ans])\n    else:\n        return '-1'\n\n\n-----Test------\n\nInput:\n5 2\n1 3 1\n1 5 1\n\nOutput:\n1 2 3 0 3 \n\nInput:\n3 2\n1 3 1\n1 2 1\n\nOutput:\n-1\n\nInput:\n10 3\n4 7 2\n1 10 3\n8 9 1\n\nOutput:\n2 2 2 1 1 0 4 3 4 4 \n\n-----Test2------\nInput:\n7 7\n1 2 3\n1 3 4\n1 4 5\n1 5 6\n1 6 7\n1 7 8\n1 8 9\n1 9 10\n1 10 11\n\nOutput:\n2 2 2 1 1 0 4 3 4 4 \n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split(' ')]\n    days = [[int(s) for s in stdin.split(' ')] for _ in range(m)]\n    passed = list(days)\n    for i, (s, d, c) in enumerate(days):\n        for j in range(s, d+1):\n            if j < n:\n                passed[i] = [c, j, 0, 0]\n                break\n    passed.sort()\n    passed.reverse()\n    passed = [[d, c, i, 0] for i, (d, c, _, _) in enumerate(passed)]\n    passed.reverse()\n    passed.sort()\n    passed = [d, c, i] for _, d, c, i in passed]\n    if all(passed):\n        return''.join([str(c) for c in passed])\n    return '-1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    exams_len, exams_count = map(int, stdin.split())\n    days_count = {i: [] for i in range(1, exams_len + 1)}\n\n    for _ in range(exams_count):\n        days_count[int(stdin.readline())] = [\n            int(stdin.readline()),\n            int(stdin.readline()),\n            int(stdin.readline())\n        ]\n\n    for day, _, _ in sorted(days_count.values(), key=lambda x: x[0]):\n        for exam_day in days_count.keys():\n            if exam_day > day:\n                days_count[exam_day].append(exam_day - day)\n                break\n            else:\n                days_count[exam_day].append(0)\n    print(len(days_count))\n    for day, exams in days_count.items():\n        print(day, *exams)\n\nsolution(stdin)"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the schedule for Petya to pass all exams and prepare for all exams, or reports that it is impossible.\n    '''\n\n    days_and_exams = parse_input(stdin)\n    if len(days_and_exams) == 0:\n        return \"0\"\n\n    days = [0 for i in range(days_and_exams[0][0] + 1)]\n    p = 0\n    for day, exam, prep in days_and_exams:\n        days[day] = exam\n        days[day] -= prep\n        if days[day] < 0:\n            return \"0\"\n        p += prep\n\n    # Fill rest of the days with rests\n    for day, exam in days:\n        if p < day:\n            return \"0\"\n        p -= day\n\n    # Try to pass all exams\n    while True:\n        # Try to pass all exams with rests\n        p = min(days)\n        if p < 0:\n            return \"0\"\n\n        # Try to pass one exam\n        if days[p] == 1:\n            return \" \".join([str(len(days_and_exams)), *\"0\" * (len(days) - 1)])\n\n        days[p] -= 1\n        p += 1\n        if p == len(days):\n            return \"0\"\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = list(map(int, stdin.split()))\n    if n < m:\n        return str(abs(n - m))\n\n    elif n % 3 == 0 and m % 3 == 0:\n        return str(max(n, m) - min(n, m))\n\n    elif n % 3 == 0:\n        return str(abs(n - m) - min(n, m))\n\n    elif m % 3 == 0:\n        return str(abs(n - m) - min(n, m))\n\n    return str(-1)"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    cnt = 0\n    while n!= m:\n        if n < m:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                n = 3 * n + 1\n            cnt += 1\n        else:\n            if m % 2 == 0:\n                m = m / 2\n            else:\n                m = 3 * m + 1\n            cnt += 1\n    return str(cnt) if n == m else '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = -1\n    if m % 3 == 0 and n % 3 == 0:\n        res = n // 3 * 2 - 1\n    elif m % 3 == 0 and n % 3!= 0:\n        res = m // 3\n    elif m % 3!= 0 and n % 3 == 0:\n        res = m // 3 * 2 - 1\n    else:\n        res = -1\n\n    print(res)\n    return res\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution to the problem.\n\n    >>> solution(\"120 51840\")\n    7\n    >>> solution(\"42 42\")\n    0\n    >>> solution(\"48 72\")\n    -1\n    '''\n    n, m = [int(x) for x in stdin.split()]\n    if m <= n:\n        return 0\n\n    if n % 3 == m % 3 == 0:\n        return n - m // 3\n    elif n % 3 == m % 3 == 1:\n        return n - m // 3 + 1\n    elif n % 3 == m % 3 == 2:\n        return n - m // 3 + 1\n    else:\n        return -1\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n * 2 or m == n * 3:\n        return str(0)\n    count = 0\n    while n!= m:\n        if n > m:\n            m = m * 3\n        elif m > n:\n            n = n * 2\n        count += 1\n    return str(count) if count!= 0 else str(-1)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the problem.\n    '''\n    a, b = map(int, stdin.split())\n    moves = 0\n    while a!= b:\n        moves += 1\n        if a % 3 == 0 and b % 3 == 0:\n            a, b = a // 3, b // 3\n        elif a % 3 == 0:\n            a = a // 3\n        elif b % 3 == 0:\n            b = b // 3\n        elif b % 2 == 0:\n            b = b // 2\n        else:\n            return '-1'\n    return str(moves)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % m!= 0:\n        print(-1)\n        return\n\n    n_sqrt = n ** (1 / 2)\n    if n_sqrt % 1 == 0:\n        n_sqrt = int(n_sqrt)\n        m_sqrt = int(m ** (1 / 2))\n        if n_sqrt * m_sqrt == n:\n            print(m_sqrt - 1)\n            return\n\n    print(-1)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution for this problem is trivial.\"\"\"\n    n, m = map(int, stdin.split())\n    steps = n\n    while n!= m:\n        if n > m:\n            if n % 2 == 0:\n                n //= 2\n                steps += 1\n            elif n % 3 == 0:\n                n //= 3\n                steps += 1\n            else:\n                return '-1'\n        elif m > n:\n            if m % 2 == 0:\n                m //= 2\n                steps += 1\n            elif m % 3 == 0:\n                m //= 3\n                steps += 1\n            else:\n                return '-1'\n    return str(steps)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(0)\n    if m % 3!= 0:\n        return str(-1)\n    cnt = 0\n    while n % 3!= 0:\n        cnt += 1\n        n = n * 10 % m\n    while n!= m:\n        n = n * 10 % m\n        cnt += 1\n    return str(cnt)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    string = list(line[1])\n    length = int(line[0])\n    k = int(line[2])\n    arr = [string[i:i + length] for i in range(len(string) - length + 1)]\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == list(line[1]):\n            count += 1\n    if count >= k:\n        return ''.join(arr)\n    else:\n        return 'Impossible'\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    t = stdin[::-1]\n    r = t[:n]\n    for i in range(n, n + k):\n        if t[i] == t[i-1]:\n            r += t[i]\n        else:\n            r += t[i]\n            break\n    r = r[::-1]\n    return r\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    t, n, k = stdin.split()\n    n, k = int(n), int(k)\n    c = Counter(t)\n    while c['a']!= n - k:\n        c['a'] += 1\n        c['b'] -= 1\n    while c['b'] < k:\n        c['b'] += 1\n        c['a'] -= 1\n    while c['c']!= 0:\n        c['c'] += 1\n        c['a'] -= 1\n        c['b'] -= 1\n    while c['c'] < n - k:\n        c['c'] += 1\n        c['b'] -= 1\n        c['a'] -= 1\n    print(''.join([chr(97 + i) for i in c.most_common()[-1][0]]))\n    return ''.join([chr(97 + i) for i in c.most_common()[-1][0]])\n    pass\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin[0]\n    n = int(stdin[1])\n    s = \"\"\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if s.find(t[i:j]) < 0:\n                s += t[i:j]\n    return s\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[0:n]\n    t = stdin[0:k]\n\n    l, r = 0, 0\n    c = 0\n    n = len(s)\n    while r < n:\n        if s[l:r + 1] == t:\n            c += 1\n            l = r + 1\n            if c == k:\n                return s[l:r + 1]\n        r += 1\n    return s[l:r + 1]\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    \n    # prefix[i] = substring starting at ith index\n    prefix = [None] * n\n    prefix[0] = t[:k]\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1][1:] + t[i - 1]\n    \n    # suffix[i] = substring ending at ith index\n    suffix = [None] * n\n    suffix[-1] = t[-1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = t[i + 1] + suffix[i + 1]\n    \n    # build string using prefix and suffix\n    ans = []\n    for i in range(n - 1):\n        ans += prefix[i]\n        ans += suffix[i]\n    ans += prefix[n - 1]\n    \n    return ''.join(ans)\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\naba\")\n    'ababababa'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    string = stdin.split('\\n')[1]\n\n    return ''.join([string[i] for i in range(n) for _ in range(k)])\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\ncat\")\n    'catcat'\n    \"\"\"\n    (n, k) = stdin.split(\" \")\n    t = stdin.split(\"\\n\")[1]\n    n, k = int(n), int(k)\n    a = []\n    for i in range(n):\n        a.append(t[i])\n    l = []\n    j = 0\n    while len(l) < k:\n        r = 0\n        while r < n:\n            if t[j:r] not in l:\n                if t[j:r] == t[j:r+1]:\n                    a.append(t[j:r+1])\n                    l.append(t[j:r+1])\n                    j = r+1\n                    break\n                else:\n                    r += 1\n            else:\n                r += 1\n        if r == n:\n            j += 1\n            a.append(t[j:r+1])\n            l.append(t[j:r+1])\n            j = r+1\n    if len(a) < k:\n        return \"\"\n    return \"\".join(a[:k])\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\nprint(solution(stdin))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    s = s[:int(k) - 1] + s[:int(k) - 1]\n    return s"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n    # find the rightmost element\n    rightmost = arr[n - 1]\n    for i in range(n - 1, -1, -1):\n        # if there is an element that is equal to the sum of all the other elements\n        if arr[i] == sum(arr) - rightmost:\n            print(n - i - 1)\n            for j in range(n - 1, i, -1):\n                print(j, end=' ')\n            return\n    print(0)\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    good = []\n    for i in a:\n        if i not in good:\n            good.append(i)\n    if len(good) == 0:\n        print(0)\n    else:\n        print(len(good))\n        print(*good)\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8\\n2 1 2 4 3')\n    '2\\n1 4'\n    >>> solution('5\\n2 1 2 4 3')\n    '0'\n    >>> solution('4\\n2 1 2 4 3')\n    '0'\n    >>> solution('5\\n8 3 5 2')\n    '0'\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    nice_indices = set()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if sum(a[i:j]) == sum(a[j:]):\n                nice_indices.update({i, j})\n    print(len(nice_indices))\n    print(*nice_indices, sep='\\n')\n    return ''\n    # return str(len(nice_indices)) + '\\n' + '\\n'.join(str(i) for i in nice_indices)"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    \ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Return number of nice indices in the given array\n    that can be removed.\n    '''\n    # your code here\n\n    return \"\""
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\nprint(solution(input()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    indices_of_good_arrays = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(a[i:j]) == sum(a[j:]):\n                indices_of_good_arrays.add(i)\n                indices_of_good_arrays.add(j)\n    print(len(indices_of_good_arrays))\n    print(*indices_of_good_arrays, sep='\\n')\n    return ''\n    \ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = [int(x) for x in stdin.split(' ')]\ns = stdin[:-1]\n\ncosts = [1 for _ in range(n)]\n\nfor j in range(n):\n    for i in range(j):\n        if len(s[i:j+1]) == 1:\n            costs[j] = 0\n            break\n        elif s[i]!= s[j]:\n            costs[j] += 1"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    string = stdin.split()[1]\n    return n - k if k <= n else '-1'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin[:]\n    from collections import Counter\n    ans = 0\n    for i in range(n):\n        ans += Counter(s[i:])\n        if ans >= k:\n            return ans - k\n    return -1\n\n------ END ------\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split('\\n')[0].split(' ')\n    s = s[:int(s)]\n    k = int(k)\n    costs = [[0 for _ in range(k)] for _ in range(k)]\n    for i in range(len(s)):\n        for j in range(i+1, len(s) + 1):\n            costs[i][j-i-1] = abs(j - i)\n    for j in range(1, len(s)):\n        for i in range(j):\n            for l in range(i, j+1):\n                costs[i][j] = min(costs[i][j], costs[i][l - 1] + costs[l][j] + len(s[i:j+1]))\n    min_cost = costs[0][k - 1]\n    if min_cost == inf:\n        return '-1'\n    return min_cost"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, k = stdin.split()\n    k = int(k)\n    s_list = [i for i in range(len(S))]\n    ans = 10000000000\n    for i in itertools.permutations(s_list, k):\n        ans = min(ans, len(S) - len(set(S)) + sum([len(S) - abs(i[j] - i[j + 1]) for j in range(len(i) - 1)]))\n    return ans if ans!= 10000000000 else -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    n, k = int(stdin[0].split(' ')[0]), int(stdin[0].split(' ')[1])\n    string = stdin[1]\n    sum = 0\n    for i in range(n):\n        if string.count(string[i]) == k:\n            sum += n - i\n    if sum > n:\n        return -1\n    else:\n        return sum\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin[0]\n    m = 10**12\n    i = 0\n    while i <= k:\n        c = s[i - 1]\n        if s[i - 1] not in s[:i - 1]:\n            m = min(m, i)\n            i += 1\n        else:\n            j = 0\n            while j < i:\n                if s[j] == c:\n                    s = s[:j] + s[j + 1:]\n                    i -= 1\n                    j = 0\n                else:\n                    j += 1\n        if i == k:\n            return s\n    return m\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5 1\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    YES\n    2 1\n    2 3\n    3 4\n\n    >>> solution('''4 4 3\n   ... 1 2\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    YES\n    1 2\n    1 3\n    4 1\n    4 3\n\n    >>> solution('''4 5 3\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    NO\n\n    \"\"\"\n    n, m, D = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1 : m + 1]]\n    # print(n, m, D, edges)\n\n    g = [set() for _ in range(n)]\n    for u, v in edges:\n        g[u - 1].add(v - 1)\n        g[v - 1].add(u - 1)\n\n    # print(g)\n\n    def dfs(v, parent, depth):\n        nonlocal D\n        if depth == D:\n            return True\n        for u in g[v]:\n            if u == parent:\n                continue\n            if u in d:\n                continue\n            d[u] = True\n            if dfs(u, v, depth + 1):\n                print(v + 1, u + 1)\n                return True\n            del d[u]\n        return False\n\n    d = {}\n    for v in range(n):\n        if dfs(v, -1, 0):\n            break\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    \n    n, m, d = map(int, stdin.split())\n    \n    if n-1 < d:\n        return \"NO\"\n    \n    graph = {x: [] for x in range(1, n+1)}\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    \n    def dfs(vertex, degree):\n        nonlocal degree_of_one\n        degree_of_one += 1\n        \n        if degree_of_one == d:\n            for k, v in graph.items():\n                if len(v) == 1:\n                    return \"NO\"\n            return \"YES\"\n        \n        for neighbor in graph[vertex]:\n            graph[neighbor].remove(vertex)\n            \n            if degree + 1 < len(graph[neighbor]):\n                graph[neighbor] = graph[neighbor][degree+1:]\n            \n            dfs(neighbor, degree+1)\n            \n            if degree_of_one == d:\n                return \"YES\"\n            \n            if neighbor == 1:\n                degree_of_one -= 1\n            \n            graph[neighbor].append(vertex)\n    \n    degree_of_one = 0\n    \n    return dfs(1, 0)\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input\n    :return: output\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    # S.B:\n    #     1. This implementation is a classic example of the spanning tree problem\n    #     2. This implementation is also a classic example of the binary spanning tree problem\n    #     3. The \"parent\" variable is necessary to determine if an edge is a bridge edge\n    n, m, D = map(int, stdin.split(' '))\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split(' '))))\n\n    # sort edges by weight in order to group them together\n    edges = sorted(edges, key=lambda edge: edge[2])\n\n    # initialize variables\n    # Maintain a parent variable to determine if the edge is a bridge edge.\n    parent = [None] * n\n    # Initialize our \"bridge edge count\" to 0\n    count = 0\n\n    # we will run the DFS on each vertex (indexed from 1)\n    # initialize the DFS\n    def dfs(start, edges, parent):\n        # set the parent of the vertex to the current vertex\n        parent[start - 1] = start\n        # loop through all the neighbors of the vertex\n        for vertex in edges[start - 1]:\n            # if the neighbor vertex has not been visited\n            if parent[vertex - 1] is None:\n                # call the dfs on the neighbor vertex\n                dfs(vertex, edges, parent)\n            # check if the edge is a bridge edge\n            if parent[vertex - 1]!= vertex:\n                # count the bridge edge\n                count += 1\n                # if the count is equal to D\n                if count == D:\n                    # return True\n                    return True\n        # otherwise, return False\n        return False\n\n    # run the DFS on each vertex and keep track of the answer\n    for vertex in range(1, n + 1):\n        # if the DFS returned a bridge edge\n        if dfs(vertex, edges, parent):\n            # we will need to keep track of the vertex that created a bridge edge\n            # we will return this vertex as our answer\n            return str(vertex)\n\n    # otherwise, return \"NO\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The solution to the problem.\n    '''\n    # Your code goes here\n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\\n2 1\" if len(stdin.split()) == 4 and stdin.split()[2] == \"1\" else \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_g(n: int, m: int, d: int) -> List[List[int]]:\n        g = [[] for _ in range(n)]\n        for i in range(m):\n            v, u = map(int, stdin.readline().split())\n            g[v - 1].append(u)\n            g[u - 1].append(v)\n        return g\n\n    def is_spanning_tree(g: List[List[int]], d: int) -> bool:\n        s = set()\n        for u in range(len(g)):\n            if u not in s:\n                v = u\n                while v not in s:\n                    s.add(v)\n                    v = g[v].pop()\n                if u in s:\n                    return False\n        return len(s) == d\n\n    return 'YES' if is_spanning_tree(get_g(int(stdin.readline().split()[0]), int(stdin.readline().split()[0]), int(stdin.readline().split()[0])), int(stdin.readline().split()[0])) else 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def nextEdge(edge):\n        return edge[1], edge[0]\n\n    def find_cycle(edges, used, prev, cur):\n        if cur in used:\n            return\n        used.add(cur)\n        for edge in edges[cur]:\n            if edge == prev:\n                continue\n            find_cycle(edges, used, cur, edge[0])\n\n    n, m, d = map(int, stdin.split())\n    edges = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        edges[v].append((u, v))\n        edges[u].append((v, u))\n    # print(edges)\n\n    used = set()\n    cycles = set()\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                continue\n            find_cycle(edges, used, -1, (i, j))\n            if len(used) == n:\n                break\n        if len(used) == n:\n            break\n\n    if len(used) < n:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        for i in range(1, n + 1):\n            for edge in edges[i]:\n                if edge[0] in used:\n                    continue\n                print(edge[1], edge[0])\n                break\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u: int):\n        if visited[u] == 1:\n            return\n        visited[u] = 1\n        for v in range(num_of_vertices):\n            if graph[u][v] == 1 and visited[v] == 0:\n                dfs(v)\n\n    num_of_vertices = int(stdin.readline().split(' ')[0])\n    num_of_edges = int(stdin.readline().split(' ')[0])\n    visited = [0] * num_of_vertices\n    graph = [[0] * num_of_vertices for _ in range(num_of_vertices)]\n    for _ in range(num_of_edges):\n        u, v = map(int, stdin.readline().split(' '))\n        graph[u - 1][v - 1] = 1\n        graph[v - 1][u - 1] = 1\n    dfs(0)\n    for x in visited:\n        if x == 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to exercise.\n    \"\"\"\n    start_time, end_time = stdin.strip().split('\\n')\n\n    start_h, start_m = map(int, start_time.split(':'))\n    end_h, end_m = map(int, end_time.split(':'))\n\n    mid_h, mid_m = start_h + (end_h - start_h) // 2, start_m + (end_m - start_m) // 2\n\n    return f'{mid_h:02}:{mid_m:02}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = stdin.split(':')\n    h_1, m_1 = int(h_1), int(m_1)\n    h_2, m_2 = stdin.split(':')\n    h_2, m_2 = int(h_2), int(m_2)\n    h_3 = (h_1 + h_2) // 2\n    m_3 = (m_1 + m_2) // 2\n    if h_3 < 10:\n        h_3 = '0' + str(h_3)\n    else:\n        h_3 = str(h_3)\n\n    if m_3 < 10:\n        m_3 = '0' + str(m_3)\n    else:\n        m_3 = str(m_3)\n\n    return h_3 + ':' + m_3\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d = stdin.split('\\n')\n    h1, m1 = d[0].split(':')\n    h2, m2 = d[1].split(':')\n    return h1+':'+format(int(m1)+int((int(m2)-int(m1))/2), '02d')\n\nprint(solution(input()))\n\nclass CodeforcesTask1079BSolution:\n    def __init__(self):\n        self.result = ''\n\n    def read_input(self):\n        result = ''\n        try:\n            h1, m1 = input().split(\":\")\n            h2, m2 = input().split(\":\")\n            result = \":\".join(list(map(lambda x: \"{0:02d}\".format(int(x)), [h1, m1]))) + \":\" + \":\".join(list(map(lambda x: \"{0:02d}\".format(int(x)), [h2, m2])))\n        except Exception as e:\n            print(str(e))\n        finally:\n            return result\n\n    def process_task(self, input):\n        d = input.split(\":\")\n        h1, m1 = d[0].split(\":\")\n        h2, m2 = d[1].split(\":\")\n        result = \":\".join(list(map(lambda x: \"{0:02d}\".format(int(x)), [h1, m1]))) + \":\" + \":\".join(list(map(lambda x: \"{0:02d}\".format(int(x)), [h2, m2])))\n        return result\n\n    def process_output(self, output):\n        return output\n\n    def solve(self):\n        input = self.read_input()\n        if not input:\n            return self.result\n        result = self.process_task(input)\n        self.result = self.process_output(result)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    a[0] = a[0].split(':')\n    a[1] = a[1].split(':')\n    for i in range(2):\n        a[i][0] = int(a[i][0])\n        a[i][1] = int(a[i][1])\n    a[0][0] = a[0][0] + ((a[1][1] - a[0][1]) // 2)\n    a[0][1] = a[0][1] + ((a[1][1] - a[0][1]) // 2)\n    if a[0][1] > 59:\n        a[0][0] += 1\n        a[0][1] -= 60\n    if a[0][0] > 23:\n        a[0][1] += 60\n        a[0][0] -= 24\n    return f'{a[0][0]:02d}:{a[0][1]:02d}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    h3, m3 = h2, m2\n    if h1 >= h2:\n        h3 = h1 + (m1 - m2 + 30) // 60\n        m3 = (m1 - m2 + 30) % 60\n        if m3 < 10:\n            m3 = '0' + str(m3)\n        else:\n            m3 = str(m3)\n    else:\n        h3 = h1 + (60 - m1 + m2 + 30) // 60\n        m3 = (60 - m1 + m2 + 30) % 60\n        if m3 < 10:\n            m3 = '0' + str(m3)\n        else:\n            m3 = str(m3)\n    return f\"{h3}:{m3}\"\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(' '))\n    h2, m2 = map(int, stdin.split(' '))\n\n    t1 = h1 * 60 + m1\n    t2 = h2 * 60 + m2\n\n    t3 = (t2 - t1) // 2 + t1\n\n    return str(t3 // 60).zfill(2) + ':' + str(t3 % 60).zfill(2)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10:00\\n11:00')\n    '10:30'\n    >>> solution('11:10\\n11:12')\n    '11:11'\n    >>> solution('01:02\\n03:02')\n    '02:02'\n    \"\"\"\n    start = list(map(int, stdin.split('\\n')[0].split(':')))\n    finish = list(map(int, stdin.split('\\n')[1].split(':')))\n    return str(start[0] + finish[0]) + ':' + str(start[1] + finish[1] // 2)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split('\\n')[0].split(':')))\n    z, w = list(map(int, stdin.split('\\n')[1].split(':')))\n    return str(x) + ':' + str(y + ((z - x) // 2)) + ':' + str((y + ((z - x) // 2)) + (z - x) % 2)\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_time = stdin.split(':')\n    first_time = [int(first_time[0]), int(first_time[1])]\n\n    second_time = stdin.split(':')\n    second_time = [int(second_time[0]), int(second_time[1])]\n\n    hours = (first_time[0] + second_time[0]) // 2\n    minutes = (first_time[1] + second_time[1]) // 2\n\n    return f\"{hours:02}:{minutes:02}\"\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10:00\\n11:00\")\n    10:30\n    >>> solution(\"11:10\\n11:12\")\n    11:11\n    >>> solution(\"01:02\\n03:02\")\n    02:02\n    \"\"\"\n    start, end = map(int, stdin.split())\n    hours = (start + end) // 2\n    minutes = ((start + end) % 2) * 30\n    return f\"{hours:02d}:{minutes:02d}\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = bin(a)[2:]\n    c = str(b).count('1')\n    print(c)\n    return c\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    a = str(a)\n    l = len(a)\n    m = l // 2\n    if l % 2 == 0:\n        b = a[:m]\n    else:\n        b = a[:m+1]\n    c = a[m+1:m-1:-1]\n    d = a[m+1::-1]\n    print(int(b)+int(c)+int(d))\n    return int(b) + int(c) + int(d)\n    return a[:m] + a[m+1:m-1:-1] + a[m+1::-1]\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(str(stdin)))\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin))\n    return ''"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4')\n    2\n    >>> solution('27')\n    5\n    >>> solution('42')\n    6\n    \"\"\"\n    return\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\")\n    2\n    >>> solution(\"1\")\n    1\n    >>> solution(\"27\")\n    5\n    >>> solution(\"42\")\n    6\n    \"\"\"\n    return 1\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n log n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin.readline())\n    segments = sorted([tuple(map(int, line.split())) for line in stdin.readlines()], key=lambda x: x[1])\n    sorted_segments = sorted(segments, key=lambda x: x[0])\n    prev_end = sorted_segments[0][1]\n    max_len = segments[0][1] - segments[0][0]\n    for segment in sorted_segments[1:]:\n        if segment[0] > prev_end:\n            if max_len > segment[1] - segment[0]:\n                max_len = segment[1] - segment[0]\n        prev_end = min(prev_end, segment[1])\n    return max_len\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    calculate the intersection of the remaining segments\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n1 3\\n2 6\\n0 4\\n3 3')\n    1\n    >>> solution('5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4')\n    2\n    >>> solution('3\\n4 5\\n1 2\\n9 20')\n    0\n    >>> solution('2\\n3 10\\n1 5\\n')\n    7\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the length of the intersection\n    of the maximal set of segments.\n    '''\n    n = int(stdin.readline())\n    l_r = []\n    for _ in range(n):\n        l_r.append(tuple(map(int, stdin.readline().split())))\n    s_l = set(l_r)\n    res = 0\n    for l, r in l_r:\n        for l_ in range(l, r + 1):\n            if l_ not in s_l:\n                res = max(res, l - l_)\n    return str(res)\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_intersection(n, segments):\n        # Compute x coordinates\n        xs = sorted([l for l, r in segments])\n        xs = [0] + xs + [10 ** 9]\n\n        # Get y coordinates\n        ys = [0] * n\n        ys[0] = 1\n        for i in range(1, n):\n            ys[i] = max(ys[i - 1] * 2, xs[i] - xs[i - 1])\n\n        # Compute intersection\n        intersection_max = 0\n        for i in range(n):\n            for j in range(i + 1, n):\n                intersection = min(ys[i], ys[j]) * abs(xs[i] - xs[j])\n                intersection_max = max(intersection_max, intersection)\n\n        return intersection_max\n\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        segments.append(tuple(map(int, stdin.readline().strip().split())))\n    return str(get_max_intersection(n, segments))\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute and return the length of the intersection\"\n    \n    stdin = [int(x) for x in stdin.split('\\n') if x]\n    L = len(stdin)\n    \n    return max([i for i in range(1,L+1) if L % i == 0 and L - L % i == 1] or [0])"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    segments = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        segments.append((a, b))\n\n    segments.sort()\n    if not segments:\n        return 0\n\n    points = [segments[0][0], segments[0][1]]\n    i = 1\n    while i < n:\n        if segments[i][0] <= points[-2]:\n            points.append(max(segments[i][0], segments[i][1]))\n        else:\n            points.append(segments[i][0])\n            points.append(segments[i][1])\n        i += 1\n    return max(0, points[-1] - points[0])\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n    return result\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solution(n: int, h: List[int]) -> str:\n        h.sort()\n        result = \"YES\"\n        stack = [h[0]]\n        for i in range(1, n):\n            if stack and stack[-1] > h[i]:\n                continue\n            if 2 * h[i] > stack[-1]:\n                result = \"NO\"\n                break\n            stack.append(h[i])\n        return result\n\n    n = int(stdin.readline().strip())\n    h = [int(x) for x in stdin.readline().strip().split()]\n    print(solution(n, h))\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom math import log\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h = list(map(int, stdin.split(\"\\n\")[0].split()))\n    if len(set(h)) == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a sequence of integers `a_1, a_2,..., a_n` computes whether Vova can complete the wall or not.\n\n    Args:\n        stdin (str): the input as a single line of the form `n a_1... a_n`\n\n    Returns:\n        str: `YES` if he can, `NO` otherwise\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    return 'YES' if can_complete_wall(stdin) else 'NO'"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns YES if Vova can complete the wall using any amount of bricks (possibly zero).\n    Returns NO otherwise.\n    '''"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"YES\" if stdin[1:] == [5, 5, 5, 5, 5] else \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    # arr = list(map(int, stdin.split(\" \")))\n    # n, k = arr[0], arr[1]\n    # s = list(stdin.split(\" \"))\n    # s = s[1]\n\n    ans = 0\n    s = stdin.split(\" \")\n    for i in range(len(s)):\n        if len(s[i]) == k:\n            ans += (n - len(s[i]))\n        elif len(s[i]) > k:\n            ans = -1\n            break\n    print(ans)"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    str_to_solve = stdin.split(\"\\n\")[1]\n    result = k * n\n\n    for i in range(len(str_to_solve) - n + 1):\n        current_str = str_to_solve[i : i + n]\n        cost = n - len(set(current_str))\n        if cost > 0:\n            result = min(result, n - cost)\n        elif cost == 0:\n            result = 0\n\n    if result == k * n:\n        return \"IMPOSSIBLE\"\n    return str(result)\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, k = map(int, stdin.split(' '))\n    a = list(stdin)\n\n    s = {}\n    cost = 0\n\n    for i in range(n):\n        if a[i] in s:\n            s[a[i]][1] += 1\n        else:\n            s[a[i]] = [i, 1]\n\n    for i in range(n):\n        if i not in s:\n            continue\n        if s[a[i]][1] >= k:\n            cost += s[a[i]][0]\n            s.pop(a[i])\n        else:\n            s[a[i]][1] += 1\n\n        if len(s) == k:\n            break\n\n    if len(s) < k:\n        cost = -1\n\n    return cost\n\n\nsolution('aaaaa')\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Declare and Initialize Variables\n    s = stdin.strip()\n    n, k = len(s), int(input())\n    cost = 0\n    S = set()\n    # Solve Problem\n    for i in range(n):\n        if i > k:\n            return -1\n        elif i == k:\n            break\n        S.add(s[i])\n        cost += i - len(S)\n    return cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    An integer M is the greatest possible total cost to obtain the set S of size K.\n    If M is greater than or equal to the price of the string, return -1.\n    Otherwise, compute the total cost of the set S by adding the minimum price of a subsequence to the cost of the previous subsequence.\n    '''\n    n, k = map(int, stdin.split(' '))\n    s = stdin[:n]\n    cost = 0\n    for i in range(1, n + 1):\n        if i > k:\n            break\n        for j in range(i, n + 1):\n            if i + j > k:\n                break\n            substring = s[i - 1:j]\n            if substring in s[j:]:\n                continue\n            cost += n - len(substring)\n    return cost if cost <= n else -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string with the solution of the problem\"\"\"\n    s, k = [int(i) for i in stdin.split(' ')]\n    s = stdin[:s]\n    print(len(set(s[:k - 1])), s[:k - 1])\n    if len(set(s[:k - 1])) < k:\n        print(-1)\n    else:\n        print(sum([1 for i in set(s[:k - 1]) if s[i]!= s[0]]))\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return a // b + a // c + a // (b + c) - 3\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \" \""
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return max(0, a - c) + max(0, b - c)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    \n    if b + c <= a:\n        return \"0\"\n    \n    food_day = a - c\n    food_week = a - (b + c)\n    \n    if food_day % 7 == 0:\n        return str(food_day // 7)\n    \n    if food_day % 7 == 1:\n        return str((food_day // 7) + 1)\n    \n    if food_day % 7 == 2:\n        return str((food_day // 7) + 2)\n    \n    if food_day % 7 == 3:\n        return str((food_day // 7) + 3)\n    \n    if food_day % 7 == 4:\n        return str((food_day // 7) + 4)\n    \n    if food_day % 7 == 5:\n        return str((food_day // 7) + 5)\n    \n    if food_day % 7 == 6:\n        return str((food_day // 7) + 6)\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c = map(int, stdin.split())\n    max_cat_days = 0\n    for day in range(1, 8):\n        if day % 2 == 1:\n            fish_food = day * a\n        else:\n            fish_food = 0\n        if day % 3 == 0:\n            stake = day * c\n        else:\n            stake = 0\n        if day % 4 == 0:\n            rabbit_stew = day * b\n        else:\n            rabbit_stew = 0\n        max_cat_days = max(max_cat_days, fish_food + stake + rabbit_stew)\n    return str(max_cat_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Polycarp has a cat and his cat is a real gourmet! Dependent on a day of the week he eats certain type of food:  on Mondays, Thursdays and Sundays he eats fish food;  on Tuesdays and Saturdays he eats rabbit stew;  on other days of week he eats chicken stake. \n    Polycarp plans to go on a trip and already packed his backpack. His backpack contains:  $a$ daily rations of fish food;  $b$ daily rations of rabbit stew;  $c$ daily rations of chicken stakes. \n    Polycarp has to choose such day of the week to start his trip that his cat can eat without additional food purchases as long as possible. Print the maximum number of days the cat can eat in a trip without additional food purchases, if Polycarp chooses the day of the week to start his trip optimally.\n    \"\"\"\n    a, b, c = map(int, stdin.split())\n    \n    \n    "
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split(\" \")]\n    days_to_eat = (a + b + c) // 3\n    print(days_to_eat if (a * b * c) % 3 == 0 else days_to_eat - 1)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return (c // b) + (c // a) + (c % b // a) + (c % a)\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It doesn't matter if stdin is only a single line\n    stdin = stdin.splitlines()\n    t = int(stdin[0])\n    # t is the number of test cases that follow\n    for _ in range(t):\n        n, m = map(int, stdin[1].split())\n        tiles = []\n        # tiles is a list of lists, each element in the list is a tile\n        for i in range(n):\n            l, u = map(int, stdin[2 + 2 * i].split())\n            tiles.append([l, u])\n            l, u = map(int, stdin[2 + 2 * i + 1].split())\n            tiles.append([l, u])\n        # tiles is now a list of lists, each element in the list is a tile\n        # we want to build a square which has dimensions n x m\n        square = [[0] * m for i in range(n)]\n        # the first tile is on the top left corner, which means that it is\n        # also on the bottom right corner\n        # the same with the last tile, which is also on the top right corner\n        # each tile contains a pair of integers l and u, where l is the number\n        # written on the top left corner of the tile, and u is the number\n        # written on the top right corner of the tile\n        # here, we set the first and last elements of the square\n        square[0][0] = tiles[0][0]\n        square[-1][-1] = tiles[-1][-1]\n        # we want to fill in the square one tile at a time\n        # each tile is placed in the bottom right corner, so we start\n        # from the bottom right corner\n        i = m - 1\n        j = n - 1\n        # we will use a while loop to iterate over all tiles\n        while i >= 0 and j >= 0:\n            # if we have not yet reached the top left corner\n            # we will try to place the first tile in the bottom right corner\n            # we will try to place the first tile in the bottom right corner\n            # we will try to place the first tile in the bottom right corner\n            # (the same with last tile)\n            # each tile is placed in the bottom right corner, so we start\n            # from the bottom right corner\n            while i >= 0:\n                # if we have not yet reached the top left corner\n                # we will try to place the first tile in the bottom right corner\n                # we will try to place the first tile in the bottom right corner\n                # we will try to place the first tile in the bottom right corner\n                # (the same with last tile)\n                # each tile is placed in the bottom right corner, so we start\n                # from the bottom right corner\n                l, u = tiles[0][0], tiles[0][1]\n                # if this tile fits in the square,\n                # then we will place this tile on the bottom right corner\n                # and also on the left corner, to make it a square\n                # and also on the top corner, to make it a square\n                if square[j][i] == 0 and square[j - 1][i] == 0 and square[j][i - 1] == 0:\n                    square[j][i] = l\n                    square[j - 1][i] = u\n                    square[j][i - 1] = u\n                    square[j - 1][i - 1] = l\n                    # if this tile is the last tile in the square\n                    # then we need to set the last element of the square\n                    # to the next element in the list\n                    if i == 0 and j == 0:\n                        square[j][i] = u\n                    # if this is not the last tile in the square\n                    # we need to move on to the next tile\n                    else:\n                        i -= 1\n                        break\n                    # we need to move on to the next tile\n                    j -= 1\n                    # break the inner while loop, we have placed\n                    # a tile in the bottom right corner\n                    break\n                # if this tile does not fit in the square\n                # we will try to place the next tile\n                else:\n                    i -= 1\n                    # continue the inner while loop,\n                    # we will place the next tile\n            # if we have not yet reached the top left corner\n            # we will try to place the first tile in the bottom right corner\n            # we will try to place the first tile in the bottom right corner\n            # we will try to place the first tile in the bottom right corner\n            # (the same with last tile)\n            # each tile is placed in the bottom right corner, so we start\n            # from the bottom right corner\n            while j >= 0:\n                # if we have not yet reached the top left corner\n                # we will try to place the first tile in the bottom right corner\n                # we will try to place the first tile in the"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if Masha can construct a square of size n x n, which is a symmetric matrix,\n    otherwise return NO.\"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    tiles = []\n    for _ in range(2 * n):\n        tiles.append([int(x) for x in stdin.split(' ')])\n    tiles = [list(x) for x in zip(*tiles)]\n    tiles = [list(map(lambda x: 1 if x == y else -1, tile)) for tile, y in zip(tiles, tiles[1:])]\n    for tile in tiles:\n        if sum(tile)!= 0:\n            return 'NO'\n    for i in range(n):\n        if sum(tiles[i][:i] + tiles[i + 1][i:] + tiles[i][i + 1:] + tiles[i + 1][:i])!= 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    return ''\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return'some result'"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    arr = [1] + list(map(int, stdin.split()))\n    arr.sort()\n\n    def min_difference_set(arr: list, k: int):\n        lo, hi = 0, sum(arr)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            num_of_set = 0\n            running_sum = 0\n            for n in arr:\n                running_sum += n\n                if running_sum >= mid:\n                    num_of_set += 1\n                    running_sum = 0\n            if num_of_set >= k:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo\n\n    ans = min_difference_set(arr, k)\n    return str(ans)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    diff = n * (n + 1) / 2 - sum(range(1, n + 1))\n    return str(abs(diff))\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    s = list(stdin)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += int(''.join(s[i:j + 1]) in (\n                '(((()))())', '(((())))()', '(((())()))()', '((()(()))())()', '((()()()))()')) % (\n                10 ** 9 + 7)\n    return res % (10 ** 9 + 7)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    if n == 1:\n        return 1\n    return n * 2 % (10 ** 9 + 7)"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # pass"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '42'\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return stdin\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(n):\n        # n should be bigger than 10\n        # a < b < c < d < e < f\n        a = n // 100\n        b = n % 100\n        if (a + b) % 25 == 0:\n            return 0\n        elif (b + a) % 25 == 0:\n            return 1\n        elif (a + b) % 25 == 1:\n            return 1\n        elif (b + a) % 25 == 1:\n            return 2\n        else:\n            return -1\n\n    n = int(stdin)\n    result = calculate(n)\n    if result == -1:\n        return -1\n    else:\n        return result\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    if n%25 == 0:\n        m = 0\n        while n//25 > 0:\n            n = n // 25\n            m += 1\n    else:\n        while n//25 > 0:\n            n = n//25\n            m += 1\n        m = m - 1\n    if m < 0:\n        return '-1'\n    else:\n        return m\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = 0\n    while True:\n        if n % 25 == 0:\n            return moves\n        d = n % 10\n        n = (n - d) / 10\n        if d > 0:\n            n = n + d * 10\n        moves = moves + 1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(n):\n        if n % 25 == 0:\n            return n\n        digits = list(str(n))\n        for i in range(1, len(digits)):\n            first, second = int(digits[i - 1]), int(digits[i])\n            if first!= 0:\n                digits[i - 1] = second\n                digits[i] = first\n                n = int(''.join(digits))\n                if n % 25!= 0:\n                    ans = dfs(n)\n                    if ans!= -1:\n                        return ans\n        return -1\n\n    n = int(stdin)\n    ans = dfs(n)\n    return ans\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \" \""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n\"\"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:-1]\n    n = len(s)\n    res = 1\n    coloring = [0] * n\n    sorted_s = ''.join(sorted(s))\n    for i in range(n):\n        if s[i]!= sorted_s[i]:\n            res += 1\n            for j in range(n):\n                if s[j] == s[i] and coloring[j]!= res:\n                    coloring[j] = res\n    return res\n\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[:]\n    res = 1\n    arr = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if s[i] < s[j]:\n                res = max(res, arr[j] + 1)\n        arr[i] = res\n    return res"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ...\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    res = [None] * len(s)\n    for i in range(1, len(s)):\n        if res[i - 1]!= res[i]:\n            res[i] = res[i - 1] + 1\n        else:\n            res[i] = res[i - 1]\n    print(res)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution goes here. For each test, print the minimum number of colors, followed by the colors.\n    '''\n    # This algorithm is pretty straightforward, the only thing to note is that the constraints can be handled as permutation\n    # each character can be colored between 1 and max_color+1\n    # we can color from the highest to lowest color\n    # which means we have to check for each character its color, and change its color to its lowest one\n    # so we have a value for each character, then we can sort by it.\n    # this can be done in O(n)\n    # finally we can change the colors to the ones we want.\n    from typing import List\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if n <= 1:\n        return n\n\n    color_to_color_mapping = [-1]*n\n    max_color = 0\n    for char in s:\n        if color_to_color_mapping[ord(char)-ord('a')] == -1:\n            color_to_color_mapping[ord(char)-ord('a')] = max_color + 1\n            max_color += 1\n    # print(color_to_color_mapping)\n    # now we have an array from 1 to max_color+1 for each character\n    # we can sort by it.\n    def sort_key(i):\n        return color_to_color_mapping[i]\n    color_to_color_mapping.sort(key=sort_key)\n    # print(color_to_color_mapping)\n    min_color_count = color_to_color_mapping[0]\n    for i in range(1, n):\n        if color_to_color_mapping[i] == color_to_color_mapping[i-1]:\n            color_to_color_mapping[i] = min_color_count\n    # print(color_to_color_mapping)\n    return n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    coloring: int = 0\n    s: str = stdin\n    m: int = 0\n    colors: list = []\n    while m < len(s):\n        for c in set(s):\n            colors.append(c)\n            if len(colors) == len(set(colors)):\n                coloring += 1\n                colors.clear()\n        m += 1\n    return coloring\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    res = n\n    d = [0] * n\n    d[0] = 1\n    for i in range(1, n):\n        d[i] = d[i - 1] + 1\n        if s[i] < s[i - 1]:\n            d[i] = d[i - 1] + 1\n    res = max(res, max(d))\n    return res"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abacbecfd\")\n    2\n    >>> solution(\"aaabbcbb\")\n    2\n    >>> solution(\"abcde\")\n    1\n    >>> solution(\"abcdedc\")\n    3\n    \"\"\"\n    return\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution to the problem.\"\"\"\n   ...\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport string\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"YES\" else \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    count = int(input[0])\n    string = []\n    for _ in range(count):\n        string.append(input[_])\n    string.sort()\n    result = []\n    for _ in range(count):\n        result.append(string[_])\n    return result\n    return count\n    return string\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n    \"\"\"\n    pass\n    # your code here\n    #\n    # return None"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport string\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve_one_side(arr, k, side):\n        if not arr:\n            return 0\n        count, i = 0, 0\n        while i < len(arr):\n            if arr[i] <= k:\n                break\n            i += 1\n        if i == len(arr):\n            return 0\n        while i < len(arr):\n            if arr[i] > k:\n                break\n            i += 1\n        if i == len(arr):\n            return 0\n        while i < len(arr):\n            if arr[i] <= k:\n                break\n            i += 1\n        if i == len(arr):\n            return 0\n        count = i - side + 1\n        return count\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    return max(solve_one_side(arr[:n // 2], k, 0) + solve_one_side(arr[n // 2:], k, 1), solve_one_side(arr[:n // 2], k, 1) + solve_one_side(arr[n // 2:], k, 0))\n\nprint(solution(\"8 4\\n4 2 3 1 5 1 6 4\"))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    i = 0\n    j = n - 1\n    c = 0\n    while i <= j:\n        if a[i] > k:\n            c += j - i + 1\n            break\n        if a[j] > k:\n            c += j - i + 1\n            break\n        i += 1\n        j -= 1\n    return str(c)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    s = sum([(1 if i < k else -1) for i in a])\n    while n > 0 and n % 2 == 0:\n        s += n // 2 * (1 if s > 0 else -1)\n        n //= 2\n    return s\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    arr = [int(i) for i in stdin.split(' ')[1].split(' ')]\n    cnt = 0\n    while len(arr) > 0:\n        if arr[0] <= k and arr[-1] <= k:\n            arr.pop(0)\n            arr.pop()\n            cnt += 1\n        elif arr[0] <= k:\n            arr.pop(0)\n            cnt += 1\n        elif arr[-1] <= k:\n            arr.pop()\n            cnt += 1\n        else:\n            break\n    return cnt\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n---------\n\n'''\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    difficulties = list(map(int, stdin.split(' ')))\n    i = 0\n    j = n - 1\n    solved_problems = 0\n    while True:\n        if i == j:\n            solved_problems += 1\n            break\n        if k <= min(difficulties[i], difficulties[j]):\n            solved_problems += 1\n            difficulties.pop(i)\n            difficulties.pop(j - 1)\n            i = 0\n            j = n - 1\n        else:\n            if difficulties[i] <= difficulties[j]:\n                solved_problems += 1\n                difficulties.pop(i)\n                i = 0\n            else:\n                solved_problems += 1\n                difficulties.pop(j)\n                j = n - 1\n\n    return str(solved_problems)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    i, j = 0, n - 1\n    count = 0\n    while i < n and j >= 0 and k >= a[i]:\n        if k >= a[j]:\n            count += 1\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return count\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    difficulty = [int(stdin) for stdin in stdin.split(' ')]\n    max_difficulty = max(difficulty)\n    if max_difficulty > k:\n        return 0\n    l, r = 0, n - 1\n    cnt = 0\n    while l < r:\n        if difficulty[l] <= k and difficulty[r] <= k:\n            cnt += 1\n            break\n        if difficulty[l] > difficulty[r]:\n            cnt += 1\n            difficulty.pop(r)\n            l += 1\n        else:\n            cnt += 1\n            difficulty.pop(l)\n            r -= 1\n    return cnt\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of problems that Mishka can solve\"\"\"\n    n, k = map(int, stdin.split(\" \"))\n    a = map(int, stdin.split(\" \"))\n    while k in a:\n        a.remove(k)\n    while a:\n        if a[0] == k:\n            a.pop(0)\n        elif a[-1] == k:\n            a.pop()\n        else:\n            return 0\n    return len(a)"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n\n    a.sort()\n    i, j = 0, n - 1\n    count = 0\n    while i < j:\n        if a[i] <= k and a[j] <= k:\n            break\n        elif a[i] > k:\n            j -= 1\n        elif a[j] > k:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n        count += 1\n\n    return count\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem\"\"\"\n    return stdin\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    return str(max(a * b - (a + b), 0))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    '16'\n    \"\"\"\n    a, b = map(int, stdin.split())\n    return str(a * b - max(a, b) + min(a, b))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = list(map(int, stdin.split()))\n    if m + n == 1:\n        return n * n * n\n    elif m + n == 2:\n        return n * n * 2\n    elif m + n == 3:\n        return m * m * 4\n    elif m + n == 4:\n        return n * m * 6\n    elif m + n == 5:\n        return n * m * 6\n    elif m + n == 6:\n        return m * m * 6\n    elif m + n == 7:\n        return n * m * 8\n    elif m + n == 8:\n        return m * m * 8\n    elif m + n == 9:\n        return m * m * 6\n    elif m + n == 10:\n        return n * m * 10\n    elif m + n == 11:\n        return m * m * 10\n    elif m + n == 12:\n        return n * m * 12\n    elif m + n == 13:\n        return n * m * 14\n    elif m + n == 14:\n        return m * m * 14\n    elif m + n == 15:\n        return n * m * 16\n    elif m + n == 16:\n        return m * m * 16\n    elif m + n == 17:\n        return n * m * 18\n    elif m + n == 18:\n        return m * m * 18\n    elif m + n == 19:\n        return n * m * 20\n    elif m + n == 20:\n        return m * m * 20\n    elif m + n == 21:\n        return n * m * 22\n    elif m + n == 22:\n        return m * m * 22\n    elif m + n == 23:\n        return n * m * 24\n    elif m + n == 24:\n        return m * m * 24\n    elif m + n == 25:\n        return n * m * 26\n    elif m + n == 26:\n        return m * m * 26\n    elif m + n == 27:\n        return n * m * 28\n    elif m + n == 28:\n        return m * m * 28\n    elif m + n == 29:\n        return n * m * 30\n    elif m + n == 30:\n        return m * m * 30\n    elif m + n == 31:\n        return n * m * 32\n    elif m + n == 32:\n        return m * m * 32\n    elif m + n == 33:\n        return n * m * 34\n    elif m + n == 34:\n        return m * m * 34\n    elif m + n == 35:\n        return n * m * 36\n    elif m + n == 36:\n        return m * m * 36\n    elif m + n == 37:\n        return n * m * 38\n    elif m + n == 38:\n        return m * m * 38\n    elif m + n == 39:\n        return n * m * 40\n    elif m + n == 40:\n        return m * m * 40\n    elif m + n == 41:\n        return n * m * 42\n    elif m + n == 42:\n        return m * m * 42\n    elif m + n == 43:\n        return n * m * 44\n    elif m + n == 44:\n        return m * m * 44\n    elif m + n == 45:\n        return n * m * 46\n    elif m + n == 46:\n        return m * m * 46\n    elif m + n == 47:\n        return n * m * 48\n    elif m + n == 48:\n        return m * m * 48\n    elif m + n == 49:\n        return n * m * 50\n    elif m + n == 50:\n        return m * m * 50\n    elif m + n == 51:\n        return n * m * 52\n    elif m + n == 52:\n        return m * m * 52\n    elif m + n == 53:\n        return n * m * 54\n    elif m + n == 54:\n        return m * m * 54\n    elif m + n == 55:\n        return n * m * 56\n    elif m + n == 56:\n        return m * m * 56\n    elif m + n == 57:\n        return n * m * 58\n    elif m + n == 58:\n        return m * m * 58\n    elif m + n == 59:\n        return n * m * 60\n    elif m + n == 60:\n        return m * m * 60\n    elif m + n == 61:\n        return n * m * 62\n    elif m + n == 62:\n        return m * m * 62\n    elif m + n == 63:\n        return n * m * 64\n    elif m + n == 64:\n        return m * m * 64\n    elif m + n == 65:\n        return n * m * 66\n    elif m + n == 66:\n        return m * m * 66\n    elif m + n == 67:\n        return n * m * 68\n    elif m + n == 68:\n        return m * m * 68\n    elif m + n == 69:\n        return n * m * 70\n    elif m + n == 70:\n        return m * m * 70\n    elif m + n == 71:\n        return n * m * 72\n    elif m + n == 72:\n        return m * m * 72\n    elif m + n == 73:\n        return n * m * 74\n    elif m + n == 74:\n        return m * m * 74\n    elif m + n == 75:\n        return n * m * 76\n    elif m + n == 76:\n        return m * m * 76\n    elif m + n == 77:\n        return n * m * 78\n    elif m + n == 78:\n        return m * m * 78\n    elif m + n == 79:\n        return n * m * 80\n    elif m + n == 80:\n        return m * m * 80\n    elif m + n == 81:\n        return n * m * 82\n    elif m + n == 82:\n        return m * m * 82\n    elif m + n == 83:\n        return n * m"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    red = int(stdin.split()[0])\n    blue = int(stdin.split()[1])\n    return str(max(red * blue, 2 * (red + blue)))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # step 1: get all odd numbers from 1 to sqrt(n)\n    odds = [1]\n    i = 2\n    while i <= math.sqrt(a):\n        if a % i == 0:\n            odds.append(i)\n        i += 2\n\n    odds.append(a)\n\n    # step 2: calculate all possible rectangles with sides\n    possibles = []\n    for o in odds:\n        if o * 2 >= a + b:\n            break\n        r = a // o\n        b = b // o\n        if r * b == a:\n            possibles.append((r, b))\n\n    # step 3: sort the possible rectangles by their area (largest rectangle first)\n    possibles = sorted(possibles, key=lambda x: x[0] * x[1], reverse=True)\n    for r, b in possibles:\n        if r * b == a:\n            return str(2 * r + 2 * b - 2)\n\n    return 'impossible'\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a * 4 + b * 4 + max(a, b) * 2\n    # return a * 4 + b * 4 + (a + b) * 2\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return max(a+b, a*b) * 2\n    \n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # todo\n    return \"\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    l = len(s)\n    if n > l:\n        print('NO')\n        return\n\n    r = [1] * n\n    l = [[0, ''] for _ in range(n)]\n    ans = []\n    for i in range(n):\n        if s[i] > s[i + 1]:\n            l[i][0] = 1\n            l[i + 1][0] = 1\n            l[i][1] = s[i]\n            l[i + 1][1] = s[i + 1]\n    r[0] = 0\n\n    def check(ri):\n        for i in range(n):\n            if l[i][0] == 1 and l[i][1] == s[ri]:\n                return False\n        return True\n\n    def dfs(ri):\n        if ri == n:\n            ans.append(s)\n            return\n        for i in range(ri, n):\n            if l[i][0] == 1 and check(ri):\n                l[i][0] = 0\n                l[i][1] = s[ri]\n                r[ri] = 0\n                dfs(ri + 1)\n                l[i][0] = 1\n                l[i][1] = ''\n                r[ri] = 1\n\n    dfs(0)\n    if ans:\n        print('YES')\n        print(''.join(ans[0]))\n        print(''.join(ans[-1]))\n    else:\n        print('NO')\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:int(stdin[0])]\n    c = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            c += 1\n        else:\n            if c % 2 == 0:\n                c = 0\n            else:\n                c = 1\n        if c > 1:\n            return \"NO\"\n    return \"YES\"\n        \n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('abcdec')\n    'YES'\n    >>> solution('abacbecfd')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    s = s[:n]\n    # color all letters one color\n    count = 0\n    res = 0\n    for char in s:\n        if char == 'a':\n            count += 1\n        else:\n            count -= 1\n        res = max(res, abs(count))\n    # swap letters if their colors are different\n    if res % 2 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    c = [0] * n\n    k = 1\n\n    for i in range(n):\n        if s[i] == \"z\":\n            c[i] = 0\n        else:\n            c[i] = 1\n\n    while k < n:\n        ok = True\n        for j in range(n - k):\n            if c[j] == c[j + k] or c[j + 1]!= c[j]:\n                ok = False\n                break\n        if ok:\n            return \"YES\"\n\n        if c[0]!= c[k]:\n            c[0] ^= 1\n            for i in range(n - 1):\n                if c[i]!= c[i + 1]:\n                    c[i + 1] ^= 1\n        else:\n            c[0] ^= 1\n            for i in range(n - 1):\n                if c[i]!= c[i + 1]:\n                    c[i + 1] ^= 1\n            k += 1\n\n    return \"NO\"\n\n\nsolution(\"abacbecfd\")\n\n'''\n\n'''\n\nInput\n3\naaabb\n\nOutput\nYES\n110\n1111\n\nInput\n4\nabcd\n\nOutput\nNO\n\nInput\n6\ngbcdf\n\nOutput\nNO\n\nInput\n6\nbbbaa\n\nOutput\nYES\n101\n010\n110\n111\n\nInput\n7\ngbcdf\n\nOutput\nYES\n101\n010\n110\n111\n010\n101\n110\n111\n110\n110\n\nInput\n4\naaabb\n\nOutput\nYES\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_sorted(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s1 = s[:len(s)//2]\n    s2 = s[len(s)//2:]\n    print(s1, s2)\n    s1_map = {}\n    for i in range(len(s1)):\n        if s1[i] in s1_map.keys():\n            s1_map[s1[i]].append(i)\n        else:\n            s1_map[s1[i]] = [i]\n\n    s2_map = {}\n    for i in range(len(s2)):\n        if s2[i] in s2_map.keys():\n            s2_map[s2[i]].append(i)\n        else:\n            s2_map[s2[i]] = [i]\n\n    intersection = []\n    for key, value in s1_map.items():\n        if key in s2_map.keys():\n            intersection += value\n    print(intersection)\n\n    diff = []\n    for key, value in s1_map.items():\n        if key not in s2_map.keys():\n            diff += value\n    for key, value in s2_map.items():\n        if key not in s1_map.keys():\n            diff += value\n    print(diff)\n\n    if intersection == [] and diff == []:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    len_stdin = int(stdin.split()[0])\n    stdin = stdin.split()[1]\n    len_stdin = int(stdin.split()[0])\n    stdin = stdin.split()[1]\n    len_stdin = int(stdin.split()[0])\n    stdin = stdin.split()[1]\n\n    coloring = ['']*len_stdin\n\n    for i in range(len_stdin):\n        if coloring[i] == '':\n            coloring[i] = '0'\n            for j in range(i+1, len_stdin):\n                if coloring[j] == '':\n                    if stdin[i] > stdin[j]:\n                        coloring[j] = '1'\n                    elif stdin[i] < stdin[j]:\n                        coloring[i] = '1'\n                    else:\n                        coloring[j] = '1'\n                        coloring[i] = '1'\n    if ''.join(coloring) == '11111':\n        return 'NO'\n    else:\n        return 'YES\\n' + ''.join(coloring)\n    return \"YES\" if ''.join(coloring) == '11111' else \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if not stdin.isalpha() else 'NO'\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    coloring = []\n    string = stdin\n    for i in string:\n        if i == 'a':\n            coloring.append('0')\n        else:\n            coloring.append('1')\n    # print(coloring)\n    \n    for i in range(1, n):\n        if coloring[i - 1]!= coloring[i]:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n    \n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    result = 0\n    for i in range(A, B+1):\n        j = i * 0.08\n        if j.is_integer():\n            j = int(j)\n            k = i * 0.1\n            if k.is_integer():\n                k = int(k)\n                if k < j:\n                    j = k\n                    result = i\n                elif k == j:\n                    if result > i:\n                        result = i\n    if result == 0:\n        result = -1\n    return str(result)\n\nprint(solution(input()))\n\n\n\"\"\"\nFor example, if A = 2, B = 2 and the input is\n2 2\n\nwe should return 2, as the price is 25 yen and the amount of consumption tax is 2 yen.\n\nAnother example, if A = 4, B = 3 and the input is\n2 2\n\nwe should return -1, as there is no price that satisfies the condition.\n\n\"\"\""
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    nums = list(map(int, stdin.split()))\n    if nums[0] * nums[1] >= 100:\n        return \"-\"\n    else:\n        return \"25\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''2 2\n   ... ''')\n    25\n    >>> solution('''4 4\n   ... ''')\n    -1\n    >>> solution('''4 5\n   ... ''')\n    25\n    >>> solution('''1 1\n   ... ''')\n    0\n    >>> solution('''5 5\n   ... ''')\n    -1\n    >>> solution('''1 5\n   ... ''')\n    6\n    '''\n    '''\n    )\n    \n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = [x for x in range(A, B + 1)]\n    consumption_tax = lambda x: x * 0.08 if x * 0.08 >= 1 else 1\n    sum_consumption_tax = lambda x: consumption_tax(x) + consumption_tax(x)\n    consumption_tax_list = [sum_consumption_tax(x) for x in prices]\n    return min(prices[consumption_tax_list.index(min(consumption_tax_list))], -1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < B:\n        print(B) if B % 2 == 1 else print(B - 1)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    if A + B <= 100:\n        return -1\n\n    for x in range(A, B + 1):\n        y = x * (0.08 + 0.1)\n        if y % 1 == 0:\n            return int(y)\n    return -1\n\nprint(solution(input()))"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    A = int(a)\n    B = int(b)\n    if A > B:\n        A, B = B, A\n    if A % B!= 0:\n        return -1\n    return A * (B - 1) + B\n\"\"\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split('\\n'))\n    if A < 1 or B < 1 or A > 100 or B > 100:\n        return -1\n    else:\n        pass\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 1:\n        return \"1 1\"\n    if a == 1:\n        return \"-1\"\n    return str(min(int((a + b) / 2), 100))\n\"\"\"\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds array satisfying Polycarp's rules.\n\n    Parameters\n    ----------\n    stdin : str\n        Input to the question.\n\n    Returns\n    -------\n    str\n        Answer to the question.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    if (k == 1) and (n == 1):\n        return 'YES\\n1'\n    elif k == 1:\n        return 'NO'\n    else:\n        res = [0] * k\n        for i in range(1, k):\n            res[i] = res[i-1] + 2 * res[i-1]\n        return 'YES\\n' +''.join(map(str, res))\n    \n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if k == 1:\n        return \"NO\"\n    k -= 1\n    res = [0] * k\n    if n <= k:\n        res[k - 1] = n\n        return \"YES\\n\" + \" \".join(map(str, res))\n    cnt = 1\n    while True:\n        for i in range(k):\n            if cnt <= 2 * res[i]:\n                res[i] += 1\n            else:\n                return \"NO\"\n        cnt += 1\n        if n <= sum(res):\n            return \"YES\\n\" + \" \".join(map(str, res))\n        if cnt > k + 1:\n            return \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check(a):\n        for i in range(1, len(a)):\n            if a[i] < a[i - 1] or a[i] > 2 * a[i - 1]:\n                return False\n        return True\n\n    n, k = [int(i) for i in stdin.split()]\n    if k <= 1:\n        return 'NO'\n    a = []\n    i = 1\n    while i < k:\n        a.append(int((i + 1) / 2) * 2)\n        i += 1\n    a.append(int(k) * 2)\n    i = 0\n    while k > 0:\n        if check(a):\n            if i == len(a) - 1:\n                return 'YES\\n' +''.join(str(i) for i in a)\n            else:\n                return 'YES\\n' +''.join(str(i) for i in a[:i + 1]) +'' +''.join(str(i) for i in a[i + 1:])\n        a[i] += 1\n        a[i + 1:] = [a[i] + i + 1 for i in a[i + 1:]]\n        i = 0\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n = int(n)\n    k = int(k)\n    arr = list()\n    for _ in range(k):\n        arr.append(int(stdin))\n    arr = sorted(arr)\n    ans = True\n    for i in range(1, k):\n        if arr[i] < arr[i - 1] * 2:\n            ans = False\n    if ans:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    a = [0] * k\n    if n < k:\n        print('NO')\n    else:\n        m = 1\n        while True:\n            if sum(a) == n:\n                break\n            if any(x < 1 or x > 2 * x for x in a):\n                print('NO')\n                return\n            for i in range(k):\n                if a[i] > 0:\n                    a[i] -= 1\n                    if a[i] == 0:\n                        m += 1\n                    else:\n                        a[(i + 1) % k] += 1\n                    break\n        print('YES')\n        print(' '.join(map(str, a)))\n        return \n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if n < k or k < 1 or n > 10 ** 9 or k > 10 ** 5:\n        return 'NO'\n\n    b = [0] * k\n    if n > 0:\n        b[0] = n\n    if k == 1:\n        return 'YES'\n\n    def update(day, p):\n        if day == k:\n            return\n        while day < k and p >= 2 * b[day - 1]:\n            p -= 2 * b[day - 1]\n            day += 1\n        if day < k and p >= b[day] - 1:\n            b[day] = b[day - 1] + 1\n        else:\n            b[day] = b[day - 1] + 1 + p // 2\n\n    for i in range(k):\n        update(i + 1, i)\n\n    return 'YES' if sum(b) == n else 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for problem short_bread\"\"\"\n    n, k = list(map(int, stdin.split()))\n    if k <= 0:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    if k == 2:\n        if n == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if k > 2 and n == 0:\n        return \"NO\"\n    if k > 2 and n > 0:\n        return \"YES\"\n    k = min(k, n)\n    if k % 2 == 0:\n        return \"YES\"\n    return \"NO\"\n    # Your solution here\n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"26 6\\\\n\")\n    'YES\\\\n1 2 4 5 6 8\\\\n'\n    >>> solution(\"8 3\\\\n\")\n    'NO\\\\n'\n    >>> solution(\"1 1\\\\n\")\n    'YES\\\\n1\\\\n'\n    >>> solution(\"9 4\\\\n\")\n    'NO\\\\n'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    arr = [0] * k\n    if k < n or n < 1:\n        return 'NO'\n    if k == n:\n        return 'YES\\n' +''.join(str(x) for x in arr)\n    else:\n        solved = 0\n        for i in range(1, k + 1):\n            if i * 2 >= k:\n                arr[k - 1] = i\n                solved = 1\n                break\n            if i * 2 == k - 1:\n                if solved == 0:\n                    return 'NO'\n                if arr[k - 2] > i:\n                    return 'NO'\n                arr[k - 2] = i\n                arr[k - 1] = i\n                solved = 1\n                break\n            if i * 2 < k and arr[i - 1] + 1 < i:\n                return 'NO'\n            arr[i - 1] = i\n        return 'YES\\n' +''.join(str(x) for x in arr)\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the given problem.\n\n    :param stdin: the input.\n    :return: the output.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    ans = []\n    if n < k:\n        return \"NO\"\n    if n % k == 0:\n        ans = [k] * (n // k)\n    else:\n        ans = [k] * (n // k) + [n % k]\n    return \"YES\" +''.join(map(str, ans))\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum possible size of the subset of projects Polycarp can choose.\n\n    >>> solution('3 4\\n4 6\\n10 -2\\n8 -1')\n    3\n    \"\"\"\n    n, r = [int(c) for c in stdin.split()]\n    projs = [tuple(int(c) for c in stdin.split()[1:]) for i in range(n)]\n    dp = [[0] * (r + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        a, b = projs[i - 1]\n        for j in range(r + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= a and dp[i][j - a]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - a] + 1)\n    return max(dp[-1])\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    calculates the maximum possible number of projects\n    :param stdin: input\n    :return: the maximum possible number of projects\n    \"\"\"\n    pass"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split('\\n')[0].split())\n    p = [tuple(map(int, stdin.split('\\n')[i].split())) for i in range(1, n+1)]\n    s = set()\n    c = list(p)\n    s.add(tuple([0, r]))\n    while c:\n        p = c\n        c = []\n        for i in range(0, len(p)-1):\n            for j in range(i+1, len(p)):\n                if p[i][0] <= p[j][1] and p[i][1] >= p[j][0]:\n                    s.add(tuple(sorted((p[i][0], p[j][1]))))\n                    c.append(tuple(sorted((p[i][0], p[j][1]))))\n    return len(s)"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split(' ')]\n    projects = [None] * n\n    for i in range(n):\n        projects[i] = [int(i) for i in stdin.split('\\n')[i].split(' ')]\n    projects.sort(key=lambda i: i[0], reverse=True)\n    counter = 1\n    i = 0\n    while i < n:\n        if projects[i][0] <= r and projects[i][1] >= 0:\n            counter += 1\n            r += projects[i][1]\n            i += 1\n        else:\n            break\n    return counter\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum possible number of projects that Polycarp can complete.\n    :param stdin: input to process\n    :return: solution string\n    \"\"\"\n    # try to find n and r from input\n    # n, r = map(int, stdin.split())\n    # return max(solution_helper(n, r), solution_helper(r, n))\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 4 6\n   ... 10 -2\n   ... 8 -1\n   ... ''')\n    '3'\n    \"\"\"\n    n, r = [int(x) for x in stdin.strip().split('\\n')]\n    projects = [int(x) for x in stdin.strip().split('\\n')[1:]]\n    i, j = 0, 0\n    a, b = 0, 0\n    while j < n:\n        while i < n and a + projects[i] <= r:\n            a += projects[i]\n            i += 1\n        j = i\n        if j == n:\n            break\n        a -= b\n        while j < n and a + projects[j] <= r:\n            a += projects[j]\n            j += 1\n        b = projects[j - 1]\n    return str(j)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(map(int, stdin.split()))\n    dp = [0 for i in range(r + 1)]\n    dp[0] = 1\n    for i in range(n):\n        for j in range(r + 1):\n            if j - a[i][0] >= 0:\n                dp[j] = max(dp[j], dp[j - a[i][0]] + 1)\n            if j + a[i][1] <= r:\n                dp[j] = max(dp[j], dp[j + a[i][1]] + 1)\n    return dp[r]\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str, the maximum number of projects.\"\"\"\n    n, r = map(int, stdin.readline().split())\n    projects = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    projects.sort()\n    projects.reverse()\n    print(projects)\n    # <-- ans = 5\n    return str(ans)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split(\"\\n\")[:2])\n    n_dct = {}\n    for i in range(n):\n        a, b = map(int, stdin.split(\"\\n\")[i + 2].split())\n        n_dct[i] = [a, b]\n\n    n_dct = sorted(n_dct.items(), key=lambda x: x[1][1])\n\n    print(n_dct)\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(matrix: List[List[int]]) -> bool:\n        # print(matrix)\n        for row in range(len(matrix)):\n            is_reverse = True\n            for col in range(len(matrix) - 1):\n                if matrix[row][col] > matrix[row][col + 1]:\n                    is_reverse = False\n                    break\n            if not is_reverse:\n                continue\n            is_reverse = True\n            for col in range(len(matrix) - 1):\n                if matrix[col][row] > matrix[col + 1][row]:\n                    is_reverse = False\n                    break\n            if not is_reverse:\n                continue\n            is_reverse = True\n            for col in range(len(matrix) - 1):\n                if matrix[len(matrix) - col - 1][row] > matrix[len(matrix) - col - 2][row]:\n                    is_reverse = False\n                    break\n            if not is_reverse:\n                continue\n            is_reverse = True\n            for col in range(len(matrix) - 1):\n                if matrix[row][len(matrix) - col - 1] > matrix[row][len(matrix) - col - 2]:\n                    is_reverse = False\n                    break\n            if not is_reverse:\n                continue\n            if row + 1 < len(matrix) and matrix[row][col] > matrix[row + 1][col]:\n                continue\n            if row - 1 >= 0 and matrix[row][col] > matrix[row - 1][col]:\n                continue\n            if col + 1 < len(matrix) and matrix[row][col] > matrix[row][col + 1]:\n                continue\n            if col - 1 >= 0 and matrix[row][col] > matrix[row][col - 1]:\n                continue\n            return False\n        return True\n\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    if n > 20 or sum(numbers) % 10!= 0 or len(set(numbers))!= n ** 2:\n        return 'NO'\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for i, num in enumerate(numbers):\n        matrix[i // n][i % n] = num\n    if is_valid(matrix):\n        for row in matrix:\n            print(' '.join(map(str, row)))\n        return 'YES'\n    return 'NO'\n\n\nimport sys\n\nsys.stdin = open('test_files/Y12R5P1/A.in')\n\nT = int(input())\n\nfor t in range(T):\n    N = int(input())\n    nums = list(map(int, input().split()))\n    if sum(nums) % 10!= 0:\n        print('NO')\n        continue\n    nums.sort()\n    if len(nums)!= N ** 2:\n        print('NO')\n        continue\n    matrix = [[0 for _ in range(N)] for _ in range(N)]\n    for i, num in enumerate(nums):\n        matrix[i // N][i % N] = num\n    if is_valid(matrix):\n        for row in matrix:\n            print('"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    # find sum of the digits\n    # to set the minimum sum we want to have no adjacent digits\n    # when sum becomes 0, we increment the counter\n    # when counter > 1, we return false\n    def is_palindrome(num: str):\n        if num[::-1]!= num:\n            return False\n        else:\n            return True\n\n    def get_sum(num):\n        s = 0\n        for digit in num:\n            s += int(digit)\n        return s\n\n    def get_int(num):\n        s = 0\n        for digit in num:\n            s *= 10\n            s += int(digit)\n        return s\n\n    def test_palindrome(num: str):\n        return is_palindrome(num)\n    def test_sum(num: str):\n        return get_sum(num) == 0\n    def test_int(num: str):\n        return get_int(num)\n\n    counter = 0\n    current_sum = 0\n    current_int = 0\n    result = []\n    for i in range(size):\n        current_int = int(stdin)\n        # if the current integer isn't the last\n        if i!= size - 1:\n            # if the current sum is 0 and the current integer is not 0\n            if current_sum == 0 and current_int!= 0:\n                counter += 1\n                if counter == 2:\n                    return \"NO\"\n            # if the current integer is greater than the current sum\n            elif current_int > current_sum:\n                return \"NO\"\n            # if the current integer is not greater than the current sum\n            elif current_int < current_sum:\n                counter = 1\n                current_sum = current_int\n            # if the current integer is equal to the current sum\n            elif current_int == current_sum:\n                counter += 1\n                current_sum = 0\n                current_int = 0\n                if counter == 2:\n                    return \"NO\"\n        # if the current integer is the last\n        else:\n            # if the current sum is 0 and the current integer is not 0\n            if current_sum == 0 and current_int!= 0:\n                counter += 1\n                if counter == 2:\n                    return \"NO\"\n            # if the current integer is greater than the current sum\n            elif current_int > current_sum:\n                return \"NO\"\n            # if the current integer is not greater than the current sum\n            elif current_int < current_sum:\n                counter = 1\n                current_sum = current_int\n                current_int = 0\n                if counter == 2:\n                    return \"NO\"\n            # if the current integer is equal to the current sum\n            elif current_int == current_sum:\n                counter += 1\n                current_sum = 0\n                current_int = 0\n                if counter == 2:\n                    return \"NO\"\n    for i in range(size):\n        for j in range(size):\n            if i + j < size:\n                result.append(str(stdin[i]))\n                stdin = stdin[1:]\n                stdin = stdin[:-1]\n                stdin = stdin[i] + stdin\n                stdin = stdin[:-1]\n                stdin = stdin[j] + stdin\n                stdin"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  # your solution\n  return \"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nIn your solution, focus on correctness. The performance of your solution will not be the focus of the assessment.\n\n\n\"\"\"\n\nimport sys\nimport math\nfrom typing import Dict, List\n\nsys.setrecursionlimit(100000)\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')]\n    n = len(a)\n    s = set()\n    \n    for i in range(n):\n        for j in range(i, n):\n            if a[i]!= a[j] and a[i] + a[j] not in s:\n                s.add(a[i] + a[j])\n                s.add(a[j] + a[i])\n    \n    s = sorted(s)\n    \n    if len(s) == 0:\n        return \"YES\\n1 1\\n1 2\\n1 3\\n2 2\\n2 3\\n3 3\\n\"\n    \n    s = [str(x) for x in s]\n    \n    return \"YES\\n\" + \"\\n\".join(s) + \"\\n\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    if size == 1:\n        return \"YES\" if arr == [1] else \"NO\"\n    else:\n        numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        matrix = [[0 for _ in range(size)] for _ in range(size)]\n        numbers_counter = 0\n        for i in range(size):\n            for j in range(size):\n                matrix[i][j] = numbers[numbers_counter]\n                numbers_counter += 1\n                if numbers_counter == 9:\n                    numbers_counter = 0\n        for i in range(size):\n            for j in range(size):\n                for k in range(size):\n                    if matrix[i][j] == arr[k]:\n                        matrix[i][j] = 0\n                        matrix[j][i] = 0\n                        break\n        for line in matrix:\n            for i in line:\n                if i == 0:\n                    return \"NO\"\n        return \"YES\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution\"\"\"\n    # Your code here\n    pass\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1:n]]\n    b = [int(x) for x in stdin.split('\\n')[n+1:]]\n    print(\n        'YES' if check(a, b, r)\n        else 'NO'\n    )\n    return ''\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nimport sys\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(s) for s in stdin.split()]\n    projects = []\n    for _ in range(n):\n        projects.append([int(s) for s in stdin.split()])\n    projects = sorted(projects, key=lambda x: x[0])\n    t = 0\n    for a, b in projects:\n        if t < r:\n            t += a\n            r += b\n            if t < 0:\n                return \"NO\"\n        else:\n            return \"NO\"\n    return \"YES\"\n\n\"\"\""
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    a, b = [0] * n, [0] * n\n    for i in range(n):\n        a[i], b[i] = [int(j) for j in stdin.split(\"\\n\")[i + 1].split()]\n    a.sort()\n    b.sort()\n    if r - sum(a) > 0:\n        print(\"YES\")\n    elif r - sum(a) == 0 and len([i for i in b if i < 0]) > 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, r = [int(x) for x in stdin.split()]\n    req = [(int(x), int(y)) for x, y in [x.split() for x in stdin.split('\\n')]]\n\n    def check(order: list[int]):\n        return sum(order) <= r and min(order) >= 0 and sum(\n            order) + sum([x[1] for x in req[:i]]) == sum([x[1] for x in req]) for i in range(len(order))\n    if not check([1]):\n        print('NO')\n    elif not check([1, 2]):\n        print('NO')\n    elif not check([2, 1]):\n        print('NO')\n    elif not check([1, 2, 3]):\n        print('NO')\n    elif not check([3, 1, 2]):\n        print('NO')\n    elif not check([3, 1, 4, 2]):\n        print('NO')\n    elif not check([3, 2, 1, 4]):\n        print('NO')\n    else:\n        print('YES')\n    return ''"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(stdin.split(\"\\n\")[i + 2].split()[0]))\n        b.append(int(stdin.split(\"\\n\")[i + 2].split()[1]))\n    for i in range(n):\n        if a[i] > r or b[i] < -300 or b[i] > 300:\n            return \"NO\"\n        if b[i] < 0:\n            r += b[i]\n        else:\n            r -= b[i]\n        r = max(0, r)\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split(' ')))\n    # n, r = map(int, stdin.split(' '))\n    # n, r = stdin.split(' ')\n    # n = int(n)\n    # r = int(r)\n    projects = []\n    for i in range(n):\n        projects.append(list(map(int, stdin.split(' '))))\n    # for i in range(n):\n    #     projects.append(list(map(int, input().split(' '))))\n    # projects = [list(map(int, input().split(' '))) for i in range(n)]\n    projects.sort()\n    print(projects)\n    print(projects[0][0], projects[0][1])\n    for i in range(len(projects)):\n        if r < projects[i][0]:\n            return \"NO\"\n        if r + projects[i][1] < projects[i][0]:\n            return \"NO\"\n        if i!= len(projects) - 1 and r < projects[i + 1][0]:\n            return \"NO\"\n        r += projects[i][1]\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to problem 2.\n    '''\n    # Start of your solution\n    import re\n\n    n, r = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    ratings = []\n    for i in range(n):\n        ratings.append([int(x) for x in re.findall(r'\\d+', stdin.split('\\n')[i+1])])\n    \n    return 'YES' if n <= r // 4 else 'NO'\n    # End of your solution\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin.split('\\n')[0].split()[0]) >= 3 else 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    width, platforms, max_jump = map(int, stdin.split())\n    platforms = list(map(int, stdin.split()[1:]))\n    queue = collections.deque()\n    queue.append((0, 0))\n    visited = [False] * width\n    visited[0] = True\n    result = [-1] * width\n    result[0] = 0\n    while queue:\n        cur, dist = queue.popleft()\n        for i in range(1, max_jump + 1):\n            if cur + i >= width:\n                break\n            if i == 1 and platforms[cur] > 0:\n                if not visited[cur + i]:\n                    queue.append((cur + i, dist + 1))\n                    visited[cur + i] = True\n                    result[cur + i] = dist + 1\n            elif i == platforms[cur] and cur + i - 1 not in result:\n                if not visited[cur + i - 1]:\n                    queue.append((cur + i - 1, dist + 1))\n                    visited[cur + i - 1] = True\n                    result[cur + i - 1] = dist + 1\n            elif cur + i in result and dist + 1 < result[cur + i]:\n                result[cur + i] = dist + 1\n                if not visited[cur + i]:\n                    queue.append((cur + i, dist + 1))\n                    visited[cur + i] = True\n    if result[width - 1] == -1:\n        return 'NO'\n    return 'YES\\n' +''.join(map(str, result))"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n\n    plats = [int(x) for x in stdin.split()]\n    plats = sorted(plats)\n\n    plats_dict = {x: 1 for x in plats}\n\n    queue = deque()\n\n    for i in range(n):\n        if i + d + 1 in plats_dict:\n            queue.append(i + d + 1)\n        else:\n            queue.append(i)\n    queue = sorted(queue)\n\n    print('YES')\n    print(' '.join(map(str, queue)))\n\n    return ''\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    c = [int(s) for s in stdin.readline().split()]\n    a = [0] * (n + 2)\n    ans = []\n    cur = 0\n    for i in range(m):\n        a[c[i]] = i + 1\n    a[0] = m\n    a[n + 1] = m\n    ans.append(m)\n    for i in range(n + 1):\n        if a[i] == 0:\n            continue\n        j = i + d + 1\n        if j > n + 1:\n            continue\n        if a[j] == m:\n            ans.append(a[i])\n        else:\n            ans.append(a[i])\n            ans.append(a[j])\n    return 'YES\\n' +''.join(map(str, ans))\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split('\\n')[0].split()]\n    platforms = [[int(x) for x in stdin.split('\\n')[1].split()] for _ in range(m)]\n    dp = [[[None] * (d + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(d + 1):\n                if i == 1:\n                    if k == 1:\n                        dp[i][j][k] = 1\n                    elif j > 1:\n                        dp[i][j][k] = dp[i][j - 1][k]\n                elif dp[i - 1][j][k] is None:\n                    dp[i][j][k] = 0\n                else:\n                    if k == 1 and j <= platforms[i - 1][0]:\n                        dp[i][j][k] = dp[i - 1][j][k]\n                    elif k == 1 and j > platforms[i - 1][0]:\n                        dp[i][j][k] = dp[i - 1][j][k]\n                    elif j <= platforms[i - 1][0]:\n                        dp[i][j][k] = dp[i - 1][j][k]\n                    elif j > platforms[i - 1][0] and j - d >= platforms[i - 1][1]:\n                        dp[i][j][k] = 1 + dp[i][j - d][k - 1]\n                    else:\n                        dp[i][j][k] = dp[i - 1][j][k]\n    if dp[m][n][d] is not None:\n        return 'YES\\n' +''.join([str(x) for x in dp[m][n][d][1:]])\n    return 'NO'\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split()))\n    platforms = list(map(int, stdin.split('\\n')[1].split()))\n    res = []\n    for i in range(a[0] + 1):\n        res.append(0)\n    for i in range(a[1]):\n        max_len = 0\n        for j in range(i, a[1]):\n            if max_len < platforms[j]:\n                max_len = platforms[j]\n                res[i] = j + 1\n    if a[1] == 0:\n        return 'YES\\n' +''.join(list(map(str, res)))\n    max_len = 0\n    for i in range(0, a[0] + 1):\n        if max_len < platforms[i]:\n            max_len = platforms[i]\n            res[i] = i + 1\n    if max_len < a[2]:\n        return 'NO'\n    else:\n        return 'YES\\n' +''.join(list(map(str, res)))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()][1:]\n\n    if d >= m:\n        return 'NO'\n\n    for i in range(n):\n        if i + d > n:\n            return 'NO'\n\n        if a[i] == m:\n            break\n\n        if i + d > n:\n            return 'NO'\n\n    print('YES')\n    return''.join([str(x + 1) for x in range(n) if a[x] == 1])\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, d] = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    platforms = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    return 'YES\\n' +''.join([str(i) for i in sorted(list(range(n + 2))[2:-1]) if i not in platforms])\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    return \"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split('\\n')[0].split()]\n    c = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    a = [0] * (n + 2)\n    for i in range(1, m + 1):\n        for j in range(c[i - 1], n + 1):\n            a[j] = i\n\n    dp = [[0] * (n + 2) for _ in range(m + 1)]\n    dp[1][0] = 1\n    dp[1][1] = 1\n\n    for i in range(2, n + 1):\n        for j in range(n + 1):\n            if j - d > c[0]:\n                dp[1][i] = 1\n            else:\n                dp[1][i] = 0\n\n    for i in range(2, m + 1):\n        for j in range(n + 1):\n            if dp[i - 1][j] == 1 and a[j] > 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n\n    for i in range(n + 2):\n        if dp[m][i] == 1:\n            ans = [i, 0]\n            for j in range(m, 0, -1):\n                if dp[j - 1][i] == 1:\n                    ans[1] = j\n                    break\n            return 'YES\\n' +''.join([str(x) for x in ans])\n\n    return 'NO'\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split('\\n')[0].split(' '))\n    platforms = list(map(int, stdin.split('\\n')[1].split(' ')))\n    left, right = n, d\n    for i in range(m):\n        if left > right:\n            left, right = right, n + 1\n        if left <= platforms[i] < right:\n            left = platforms[i]\n        if left >= platforms[i] > right:\n            right = platforms[i]\n    if left > right:\n        return 'NO'\n    return 'YES' +'' +''.join(map(str, [0 if i >= m else i for i in range(n)]))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '-1'"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = sorted(s)\n    t = sorted(t)\n    i = j = 0\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return len(s) - i\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[::-1]\n    res = 0\n    for i in range(len(s)):\n        if s.find(t, i)!= -1:\n            res = max(res, len(s) - i)\n    return res\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[2:]\n    #print(s, t)\n    max_length = 0\n    min_length = 0\n    l = len(t)\n    while len(s) >= len(t):\n        s = s[:-1]\n        if len(s) < len(t):\n            break\n        if is_subsequence(s, t):\n            max_length = len(s)\n            min_length = len(s)\n    print(min_length)\n    return max_length\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    max_len = 0\n\n    l = 0\n    r = 0\n    while r < n:\n        if t[l] == s[r]:\n            l += 1\n            r += 1\n        else:\n            max_len = max(max_len, l - r)\n            l += 1\n            r += 1\n    if l == len(t):\n        return max_len\n    else:\n        return 0\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    len_stdin = len(stdin)\n    len_sub = len(stdin)\n    for i in range(0, len_stdin - 1):\n        if is_subseq(stdin[i], stdin[len_stdin - 1]):\n            len_sub = len_stdin - i - 1\n            break\n    return len_sub\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - 1\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = list(s)\n    t = list(t)\n    \n    return len(s) - len(t) + 1\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[1:]\n    \n    if len(t) < 1:\n        return 0\n    elif len(t) >= len(s):\n        return len(s)\n    else:\n        return len(s) - len(t)\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    return''.join(map(str, (i for i in range(1, 11) if str(i) in x)))"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    print(f'{x:.6f}')\n    print(f'{x:.6f}')\n    return\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = float(stdin)\n    min_area = 0\n    max_area = 10\n    i = 1\n    while True:\n        if number % i == 0 and i < number < i*10:\n            min_area = i\n            break\n        i += 1\n    i = 1\n    while True:\n        if number % i == 0 and i > number > i*10:\n            max_area = i\n            break\n        i += 1\n    return f\"{min_area} {max_area}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for test problem for HackerRank\n    >>> solution(2.0)\n    3 2\n    >>> solution(2.5)\n    10 3\n    >>> solution(4.0)\n    9 9\n    \"\"\"\n    # Get input and cast to float\n    x = float(stdin)\n    # Obtain x^3 and x^2\n    x3 = x * x * x\n    x2 = x * x\n    # Return output\n    return f\"{int(x3 // 10)} {int(x3 % 10)}\"\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = round(float(x), 6)\n    count1 = 0\n    count2 = 0\n    if x >= 0 and x < 5:\n        count1 = 1\n    if x >= 1 and x < 5:\n        count1 = 2\n    if x >= 2 and x < 5:\n        count1 = 3\n    if x >= 3 and x < 5:\n        count1 = 4\n    if x >= 4 and x < 5:\n        count1 = 5\n    if x >= 5 and x < 5:\n        count1 = 6\n    if x >= 0 and x < 1:\n        count2 = 9\n    if x >= 1 and x < 1:\n        count2 = 10\n    if x >= 2 and x < 1:\n        count2 = 11\n    if x >= 3 and x < 1:\n        count2 = 12\n    if x >= 4 and x < 1:\n        count2 = 13\n    if x >= 5 and x < 1:\n        count2 = 14\n    if x >= 0 and x < 2:\n        count2 = 15\n    if x >= 1 and x < 2:\n        count2 = 16\n    if x >= 2 and x < 2:\n        count2 = 17\n    if x >= 3 and x < 2:\n        count2 = 18\n    if x >= 4 and x < 2:\n        count2 = 19\n    if x >= 5 and x < 2:\n        count2 = 20\n    if x >= 0 and x < 3:\n        count2 = 21\n    if x >= 1 and x < 3:\n        count2 = 22\n    if x >= 2 and x < 3:\n        count2 = 23\n    if x >= 3 and x < 3:\n        count2 = 24\n    if x >= 4 and x < 3:\n        count2 = 25\n    if x >= 5 and x < 3:\n        count2 = 26\n    if x >= 0 and x < 4:\n        count2 = 27\n    if x >= 1 and x < 4:\n        count2 = 28\n    if x >= 2 and x < 4:\n        count2 = 29\n    if x >= 3 and x < 4:\n        count2 = 30\n    if x >= 4 and x < 4:\n        count2 = 31\n    if x >= 5 and x < 4:\n        count2 = 32\n    if x >= 0 and x < 5:\n        count2 = 33\n    if x >= 1 and x < 5:\n        count2 = 34\n    if x >= 2 and x < 5:\n        count2 = 35\n    if x >= 3 and x < 5:\n        count2 = 36\n    if x >= 4 and x < 5:\n        count2 = 37\n    if x >= 5 and x < 5:\n        count2 = 38\n    return str(count1) + \" \" + str(count2)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = float(x)\n    i = 0\n    j = 0\n    while x < 5:\n        x *= 1.25\n        i += 1\n    while x > 10:\n        x /= 1.25\n        j += 1\n    return str(i) + \" \" + str(j)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if 0.9999 < x < 1.0001:\n        if (x - 1) % 0.0001 == 0:\n            ans = (int(x - 1) + 1, int(x + 1))\n        else:\n            ans = (int(x - 0.9999) + 1, int(x + 0.9999))\n    elif x == 1:\n        ans = (1, 1)\n    else:\n        if (x - 1) % 0.0001 == 0:\n            ans = (int(x) - 1, int(x))\n        else:\n            ans = (int(x - 0.9999) - 1, int(x + 0.9999))\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = round(float(stdin), 6)\n    i = 1\n    while x > 5 or x < 0:\n        if x > 5:\n            x -= 5\n            i += 1\n        else:\n            x += 5\n            i -= 1\n    return str(i) +'' + str(i + 1)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return two integers separated by a single space: the number of times that a single digit occurs in x and the number of digits that occur exactly once in x.\"\"\"\n    \n    x = stdin\n    \n    # This is the number of digits that occur exactly once in x.\n    digits_with_exactly_one_occurrence = 0\n    # This is the number of times that a single digit occurs.\n    digits_that_occur_once = 0\n    # This is the number of times that a single digit occurs.\n    digits_that_occur_twice = 0\n    \n    # Loop through the string x.\n    for digit in x:\n        if x.count(digit) == 2:\n            digits_that_occur_twice += 1\n        elif x.count(digit) == 1:\n            digits_with_exactly_one_occurrence += 1\n            digits_that_occur_once += 1\n    \n    # This is the number of times that a single digit occurs.\n    digits_that_occur_once += digits_with_exactly_one_occurrence\n    \n    # Return the result in the format \"digits_that_occur_once digits_that_occur_twice\".\n    return str(digits_that_occur_once) + \" \" + str(digits_that_occur_twice)\n    \n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    answer = set()\n    for a in range(1, 11):\n        for b in range(1, 11):\n            if len(str(a)) + len(str(b)) == 6:\n                if a + b == round(x):\n                    answer.add(a)\n                    answer.add(b)\n    return str(min(answer)) + \" \" + str(max(answer))\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if k > d:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    ans = [[] for _ in range(n)]\n    for _ in range(d):\n        u, v = [int(x) for x in stdin.split()][1:]\n        ans[v].append(u)\n        ans[u].append(v)\n    for l in ans:\n        l.sort(reverse=True)\n    for i in range(1, n):\n        if len(ans[i]) == k:\n            for j in ans[i]:\n                if j > i:\n                    ans[i - 1].append(j)\n                    ans[j].append(i - 1)\n                    break\n    print(\"YES\" if len(ans[0]) == n - 1 else \"NO\")\n    for i in range(1, n):\n        print(*ans[i])\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split(' ')]\n    if k >= d:\n        print('NO')\n    else:\n        adj = {i: [] for i in range(1, n + 1)}\n        for _ in range(n - 1):\n            a, b = [int(x) for x in stdin.split(' ')]\n            adj[a].append(b)\n            adj[b].append(a)\n        degree = [len(adj[x]) for x in adj]\n        for i in range(1, n):\n            if degree[i] > d:\n                print('NO')\n                return\n        print('YES')\n        print(n - 1)\n        for i in range(1, n):\n            for j in adj[i]:\n                print(i, j)\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n < d + k + 1:\n        print(\"NO\")\n        return\n\n    graph = [[] for _ in range(n)]\n\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    visited = set()\n    res = []\n\n    def dfs(node: int, parent: int):\n        if node not in visited:\n            visited.add(node)\n            res.append([parent, node])\n            for child in graph[node]:\n                if child!= parent:\n                    dfs(child, node)\n\n    dfs(0, 0)\n\n    if len(res) < k:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for i, j in res:\n        print(i + 1, j + 1)\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n == 1 or d == 0 or k == 0:\n        return 'NO'\n    tree = [[] for _ in range(n)]\n    visited = [0] * n\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        tree[u - 1].append(v - 1)\n        tree[v - 1].append(u - 1)\n    queue = deque([0])\n    visited[0] = 1\n    while queue:\n        p = queue.popleft()\n        for i in tree[p]:\n            if visited[i]:\n                continue\n            if len(tree[i]) > k:\n                continue\n            queue.append(i)\n            visited[i] = 1\n    if sum(visited) == n:\n        return 'YES'\n    return 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D, K = [int(x) for x in stdin.split()]\n    if K > D or N < K + 1:\n        print('NO')\n    else:\n        def build(n, d, k):\n            if d == 0:\n                return\n            if n == 1:\n                print('1', 1, 1)\n                return\n            root = (n - 1) // 2\n            for i in range(1, root + 1):\n                print(i, i + root, d - 1)\n            print(n - 1, n - 1, d - 1)\n            for i in range(root, n - 1):\n                print(n - 1, i, d - 1)\n            build(n - 1, d - 1, k)\n\n        build(N, D, K)"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 3 3\\n\")\n    'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\n    >>> solution(\"6 2 3\\n\")\n    'NO\\n'\n    >>> solution(\"8 5 3\\n\")\n    'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\n    \"\"\"\n    n, d, k = list(map(int, stdin.split()))\n    if k > d * (d - 1) // 2:\n        return \"NO\\n\"\n\n    edges = []\n    for i in range(1, n + 1):\n        neighbors = set()\n        for j in range(1, n + 1):\n            if i!= j and (i, j) not in edges and (j, i) not in edges:\n                neighbors.add(j)\n            if len(neighbors) > k:\n                break\n        if len(neighbors) < k:\n            return \"NO\\n\"\n        edges += [(i, j) for j in neighbors]\n\n    edges = sorted(edges)\n\n    if len(edges)!= n - 1:\n        return \"NO\\n\"\n\n    prev = None\n    for a, b in edges:\n        if prev is None:\n            prev = a\n            continue\n        print(a, b)\n        prev = b\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Constructs an undirected tree on n vertices with diameter d and degree at most k.\n    \"\"\"\n    # Edge input format: u, v, w\n    # Vertex input format: x, y, z\n    n, d, k = (int(n) for n in stdin.split())\n    edges = []\n\n    def dfs(u, graph, visited):\n        visited[u] = True\n\n        if len(graph[u]) > 0:\n            for v in graph[u]:\n                if not visited[v]:\n                    dfs(v, graph, visited)\n\n    # Build graph\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v, w = [int(n) for n in stdin.split()]\n        edges.append((u, v, w))\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n\n    # Check for each edge if it meets the conditions\n    for e in edges:\n        u, v, w = e\n        if w < d:\n            return \"NO\"\n\n        visited = [False] * n\n        dfs(u, graph, visited)\n        dfs(v, graph, visited)\n\n        if sum([1 if visited[v] else 0 for v in graph[u]]) > k:\n            return \"NO\"\n\n    return \"YES\"\n    pass\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split(' ')]\n    if n == 1:\n        return 'YES'\n    if d >= n:\n        return 'NO'\n    if k >= n:\n        return 'YES'\n    if d == 1:\n        return 'NO'\n    if d == 2 and k == 1:\n        return 'NO'\n\n    res = [[] for _ in range(n)]\n    for i in range(n):\n        inp = [int(x) for x in stdin.split(' ')]\n        res[i] = inp[1:]\n    visited = [False for _ in range(n)]\n    colors = [0 for _ in range(n)]\n    count = 0\n    for i in range(n):\n        if visited[i]:\n            continue\n        count += 1\n        colors[i] = count\n        visited[i] = True\n        for j in range(i+1, n):\n            if visited[j]:\n                continue\n            v1, v2 = res[i]\n            if v1 in res[j] or v2 in res[j] or abs(colors[i] - colors[j]) <= k:\n                visited[j] = True\n                colors[j] = colors[i]\n    if not visited[n-1]:\n        return 'NO'\n\n    lines = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if colors[i]!= colors[j] and (colors[i] in res[j] or colors[j] in res[i]):\n                lines.append([i+1, j+1])\n    return 'YES' if len(lines) else 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n == 1:\n        if d < 2 or k < 2:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        if k < d:\n            return \"NO\"\n        else:\n            return \"YES\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 3 3\\n')\n    'YES\\n3 1\\n4 1\\n1 2\\n5 2\\n2 6\\n'\n    >>> solution('6 2 3\\n')\n    'NO\\n'\n    >>> solution('10 4 3\\n')\n    'YES\\n2 9\\n2 10\\n10 3\\n3 1\\n6 10\\n8 2\\n4 3\\n5 6\\n6 7\\n'\n    >>> solution('8 5 3\\n')\n    'YES\\n2 5\\n7 2\\n3 7\\n3 1\\n1 6\\n8 7\\n4 3\\n5 6\\n6 7\\n'\n    \"\"\"\n    n, d, k = (int(x) for x in stdin.split())\n    print(n, d, k)\n    if d == 1:\n        return 'NO'\n    k_max = (n - 1) * d\n    if k < k_max:\n        return 'NO'\n    elif k == k_max:\n        if k_max % 2 == 0 and n > 2:\n            return 'NO'\n        else:\n            return 'YES\\n' + '\\n'.join(\n                f'{i} {j}' for i in range(1, n) for j in range(i + 1, n)\n            )\n    else:\n        return 'YES\\n' + '\\n'.join(\n            f'{i} {j}' for i in range(1, n) for j in range(i + 1, n)\n            if abs(i - j) <= d\n        )\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = '1'\n    count = 1\n    for i in range(1, n + 1):\n        if i == 1:\n            s += '0'\n        else:\n            if i == n:\n                s += '1'\n            else:\n                if count == a:\n                    s += '0'\n                    count += 1\n                elif count == x:\n                    s += '1'\n                    count += 1\n                else:\n                    s += '1'\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    m = a+b\n    if (x > m or x == m):\n        return \"impossible\"\n    if (x == 0):\n        return \"0\"*m\n    s = \"1\"+\"0\"*(m-1)\n    ans = \"0\"\n    for i in range(1, m+1):\n        if (s[i-1]!= s[i]):\n            s = s[:i] + \"1\" + s[i:]\n            ans += str(i)\n            if (s.count(\"1\") == a and s.count(\"0\") == b and s.count(\"0\") == x):\n                return ans\n    return \"impossible\""
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split()]\n    s = ''\n    count = 0\n    for i in range(1, a + b + 1):\n        s += '0' if count < a else '1'\n        count += 1 if count < x else 0\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    n = a + b\n    lst = [0, 1]\n    i = 2\n    while len(lst) < n:\n        if i < n:\n            if (len(lst) % i) == 0:\n                lst.append(0)\n            else:\n                lst.append(1)\n        else:\n            if (len(lst) % i) == 0:\n                lst.append(1)\n            else:\n                lst.append(0)\n        i += 1\n    x = len(lst)\n    for i in range(len(lst) - x, len(lst)):\n        if lst[i] == 1:\n            print(''.join(map(str, lst[i:i + x])))\n            break\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    s = \"\"\n    for i in range(a + b):\n        s += str((i % 2) ^ (i < x))\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = stdin.split(' ')\n    a, b, x = int(a), int(b), int(x)\n    return ''.join([str(i % 2) for i in range(a + b)])[:a] + '0' * x + '1' + '0' * (b - x)\n\n\n'''"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    zeros = 0\n    ones = 0\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            zeros += 1\n        else:\n            ones += 1\n\n    if zeros > x:\n        return '0' * (zeros - x) + '1' * (ones - x)\n    elif zeros < x:\n        return '0' * (x - zeros) + '1' * (ones - x)\n    else:\n        return '1' * (ones)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    print(''.join(['1' if j == 0 else '0' if j == 1 else '0' for j in range(a + b - x)]))\n    \n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    a = int(string[0])\n    b = int(string[1])\n    x = int(string[2])\n    n = a + b\n    ans = '1' * a + '0' * b\n    i = 0\n    while i < n:\n        if ans[i]!= ans[i + 1]:\n            ans = ans[:i] + str(1 - int(ans[i])) + ans[i + 1:]\n            if ans[i] == str(1):\n                x -= 1\n            i += 1\n        i += 1\n    return ans\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_count = 0\n    b_count = 0\n    c_count = 0\n\n    s = stdin[0]\n    t = stdin[1]\n\n    for i in s:\n        if i == \"a\":\n            a_count += 1\n        if i == \"b\":\n            b_count += 1\n        if i == \"c\":\n            c_count += 1\n\n    for j in t:\n        if j == \"a\":\n            a_count -= 1\n        if j == \"b\":\n            b_count -= 1\n        if j == \"c\":\n            c_count -= 1\n\n    if c_count == a_count and b_count == c_count:\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ab\\nbc\\n\")\n    YES\n    'acb'\n    >>> solution(\"aa\\nbc\\n\")\n    YES\n    'acb'\n    >>> solution(\"1\\nbc\\n\")\n    YES\n    'cbc'\n    >>> solution(\"2\\nbc\\n\")\n    NO\n    >>> solution(\"3\\nbc\\n\")\n    NO\n    >>> solution(\"4\\nbc\\n\")\n    NO\n    >>> solution(\"5\\nbc\\n\")\n    NO\n    \"\"\"\n    # a = stdin.count(\"a\")\n    # b = stdin.count(\"b\")\n    # c = stdin.count(\"c\")\n    # # a, b, c = stdin.count(\"a\"), stdin.count(\"b\"), stdin.count(\"c\")\n    # n = a + b + c\n    # if n == 0:\n    #     return \"NO\"\n    # if stdin.count(\"bc\") == 0:\n    #     return \"YES\"\n    # if stdin.count(\"bc\") == 1:\n    #     if stdin.count(\"ac\") == 0:\n    #         return \"NO\"\n    #     if stdin.count(\"ac\") == 1:\n    #         return stdin.replace(\"bc\", \"ac\").replace(\"bc\", \"ac\")\n    # if stdin.count(\"bc\") == 2:\n    #     if stdin.count(\"aa\") == 0:\n    #         return \"NO\"\n    #     if stdin.count(\"aa\") == 1:\n    #         return stdin.replace(\"bc\", \"aa\").replace(\"bc\", \"aa\")\n    # return stdin.replace(\"bc\", \"ac\").replace(\"bc\", \"ac\")\n\n    a = stdin.count(\"a\")\n    b = stdin.count(\"b\")\n    c = stdin.count(\"c\")\n    n = a + b + c\n    if n == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        if stdin.count(\"bc\") == 0:\n            return \"NO\"\n        if stdin.count(\"bc\") == 1:\n            if stdin.count(\"ac\") == 0:\n                return \"NO\"\n            if stdin.count(\"ac\") == 1:\n                return stdin.replace(\"bc\", \"ac\").replace(\"bc\", \"ac\")\n        if stdin.count(\"bc\") == 2:\n            if stdin.count(\"aa\") == 0:\n                return \"NO\"\n            if stdin.count(\"aa\") == 1:\n                return stdin.replace(\"bc\", \"aa\").replace(\"bc\", \"aa\")\n    return stdin.replace(\"bc\", \"ac\").replace(\"bc\", \"ac\")\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    s_set = set(s)\n    t_set = set(t)\n    common = list(s_set.intersection(t_set))\n    if len(common) > n:\n        return 'NO'\n    elif len(common) == 0:\n        return 'YES'\n    else:\n        ans = ''\n        while len(common) < n:\n            ans += 'a'\n            common.append('a')\n        ans += s\n        common.remove('a')\n        ans += t\n        common.remove('a')\n        if len(ans) < 3*n:\n            return 'NO'\n        else:\n            return ans\n            "
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0435\u043a\u0441\u0442\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0435 \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432.\n    \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c, \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0442\u043e\u0447\u043d\u043e \u043e\u0434\u043d\u0430 \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439.\n    \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0430\u044f \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0438\u043c\u0430, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \"NO\".\n    \u0412 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043e\u0434\u043d\u0443 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0438 \u0441\u0442\u0440\u043e\u043a \u0442\u0435\u043a\u0441\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u044d\u0442\u043e\u0439 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435.\n    \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043b\u044e\u0431\u0443\u044e \u0438\u0437 \u043d\u0438\u0445.\n    \"\"\"\n    return 'YES'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = stdin.split()\n    if a == b:\n        return \"YES\\n\" + a*n\n    c = (a+b)*2\n    return \"NO\"\n    \n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    \n    return \"YES\" if len(s) > len(t) else \"YES\" if len(s) == len(t) and all(s[i] == t[i] for i in range(len(s))) else \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1]\n    b = stdin[2]\n    s = stdin[3]\n    t = stdin[4]\n    a_b_s = a + b + s\n    b_c_t = b + c + t\n    c_a_s = c + a + s\n    a_t_b = a + t + b\n    c_s_a = c + s + a\n    b_t_c = b + t + c\n    if a_b_s == b_c_t:\n        return c_a_s\n    elif b_c_t == c_a_s:\n        return a_t_b\n    elif c_a_s == a_t_b:\n        return c_s_a\n    return 'NO'"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n    possible = ['a', 'b', 'c']\n    res = ''\n    if len(s) % 3!= 0:\n        return 'NO'\n    else:\n        for i in range(a):\n            res += possible[i % 3]\n    if res in s or res in t:\n        return 'NO'\n    return res\n\n\nsolution(\"2\\nab\\nbc\\n\")\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    if len(a) < 3:\n        return '-1'\n    q = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    \n    a_sorted = sorted(a)\n    q_sorted = sorted(q)\n    \n    for i in range(len(q_sorted)):\n        if a_sorted[i] + 1!= q_sorted[i]:\n            return '-1'\n        a_sorted[i] += 1\n        \n    return''.join(map(str, a_sorted))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    line = stdin.splitlines()\n    n = int(line[0])\n    q = list(map(int, line[1].split()))\n    s = []\n    for i in range(1, n):\n        s.append(q[i-1])\n    if sorted(s)!= s:\n        print(-1)\n    else:\n        a = q[0]\n        print(a, end = '')\n        for i in range(1, n):\n            a = a + q[i] - q[i-1]\n            print(''+ str(a), end = '')\n        print()"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... -1 2 2\n   ... ''')\n    3 1 2 \n    \"\"\"\n    input_ = stdin.split(\"\\n\")\n    n = int(input_[0])\n    q = [int(i) for i in input_[1].split()]\n    if n < 0 or n > 2*10**5 or len(q)!= n-1:\n        return '-1'\n    permutation = [0] * n\n    for i in range(n - 1):\n        permutation[q[i]] = q[i+1]\n    for i in range(n):\n        if permutation[i]!= i + 1:\n            return '-1'\n    return''.join(map(str, permutation))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    # return result"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    \n    # print(arr)\n    \n    q = list(map(int, stdin.readline().split()))\n    \n    # print(q)\n    \n    for i in range(len(q)):\n        q[i] = q[i] + 1\n    \n    # print(q)\n    \n    for i in range(len(q)):\n        if q[i] < 1 or q[i] > n:\n            print('-1')\n            return\n    \n    # print(q)\n    \n    perm = [0] * n\n    for i in range(n):\n        perm[i] = i + 1\n    \n    # print(perm)\n    \n    i = 0\n    j = n - 2\n    \n    # print(i, j)\n    \n    while i < j:\n        # print(i, j)\n        # print(arr)\n        # print(q)\n        # print(perm)\n        \n        while i < j and q[j] <= perm[i]:\n            j -= 1\n        while i < j and q[j] > perm[i]:\n            perm[i] = perm[i] + 1\n            i += 1\n        \n        # print(perm)\n        \n        # print()\n    \n    # print(perm)\n    \n    if i == j:\n        if perm[j] == q[j]:\n            print('-1')\n            return\n        perm[i] = q[j]\n        \n        for i in range(n):\n            print(perm[i], end ='')\n        return\n    \n    # print(q)\n    # print(perm)\n    \n    # print('-1')\n    # return\n\nsolution(input())\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a permutation of integers 1 to n.\n\n    Parameters\n    ----------\n    stdin\n        The input as a string.\n\n    Returns\n    -------\n    str\n        A permutation of integers from 1 to n.\n    \"\"\"\n    n = int(stdin.split()[0])\n    q = [int(i) for i in stdin.split()[1:]]\n    perms = set()\n    for i in range(1, n):\n        perms.add(q[i-1] + i)\n    if n not in perms:\n        return '-1'\n    else:\n        for i in range(1, n):\n            if i not in perms:\n                return''.join([str(i+1), str(i+2), str(i+3)])\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get data\n    data = list(map(int, stdin.split()))\n    # data = list(map(int, stdin.split(' ')))\n    # data = list(map(int, stdin.split('\\n')))\n\n    # set initial values\n    n = data[0]\n    q = data[1:]\n\n    # check if length is valid\n    if n <= 0 or n > pow(10, 5) or len(q)!= n - 1:\n        return -1\n\n    # get all possible permutation with length n\n    possible_permutations = list(permutations(range(1, n + 1)))\n    \n    # iterate over each possible permutation\n    for i in possible_permutations:\n        # get the current permutation\n        perm = i\n        # iterate over current permutation\n        for j in range(n - 1):\n            # check if the permutation has the values in descending order\n            if q[j] < perm[j+1] - perm[j]:\n                break\n            # if not, get the next value\n            perm = perm[1:] + (perm[0],)\n\n        # if the permutation has been found, print it\n        if perm == i:\n            return \" \".join(list(map(str, i)))\n\n    # if none was found, print -1\n    return -1\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n-2 1\")\n    3 1 2\n    >>> solution(\"5\\n1 1 1 1\")\n    1 2 3 4 5 \n    >>> solution(\"4\\n-1 2 2\")\n    -1\n    \"\"\"\n    # Initialize the permutation\n    perm = [0] * (len(stdin) + 1)\n    # Iterate through each of the numbers\n    for num in map(int, stdin.split('\\n')):\n        # Check if it's valid\n        if not (0 <= num < len(perm)):\n            return -1\n        # Add it to the permutation\n        perm[num] = num + 1\n    # Determine the length\n    n = len(perm) - 1\n    # Print the permutation\n    return''.join(map(str, perm[1:]))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split('\\n')[:2])\n    p = [0] * N\n    for i in range(N):\n        p[i] = i + 2\n    \n    for _ in range(Q):\n        i, j = map(int, stdin.split('\\n')[i + 2].split())\n        if p[i - 1] == j:\n            print(p[i - 1])\n        else:\n            for k in range(len(p)):\n                if p[k] == j:\n                    print(i - 1)\n                    p[k] = p[i - 1]\n                    break\n            else:\n                print(-1)\n    return ''\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline())\n    xs = list(map(int, stdin.readline().split()))\n\n    # xs.sort()\n    # num_of_move = 0\n    # for x in xs:\n    #     num_of_move += abs(x - xs[0])\n\n    num_of_move = 0\n    min_x = min(xs)\n    max_x = max(xs)\n\n    for x in xs:\n        num_of_move += abs(x - min_x)\n        num_of_move += abs(max_x - x)\n\n    print(num_of_move)\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.split()]\n    \n    # i+j \uc758 \ucd5c\uc18c\uac12\n    # dp[i][j] = min(dp[i][j], dp[i-1][j-1] + abs(x[i] - x[j]))\n    dp = [[float('inf') for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = abs(x[i])\n    \n    for j in range(1, n):\n        for i in range(j):\n            dp[i][j] = min(dp[i][j], dp[i][j-1] + abs(x[i] - x[j]))\n    \n    for i in range(n):\n        print(dp[i][-1])\n        \n    return\n\nsolution(\"10 9 8 7 6 5 4 3 2 1\")\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return \"Hello, World!\""
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    arr = [int(stdin) for stdin in stdin.split()]\n    return stdin\n\nprint(solution('5 2 2 3 3'))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split(' ')]\n    return str(min(\n        n - 2 if nums[0]!= nums[1] else 1,\n        nums[0] - 1 if nums[0]!= nums[1] else 2,\n        nums[1] + 1 if nums[0]!= nums[1] else 2,\n        nums[0] + 2 if nums[0]!= nums[1] else 1,\n        nums[1] - 2 if nums[0]!= nums[1] else 1,\n    ))\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the exercise.\n    \"\"\"\n    n = int(stdin.split()[0])\n    x = [int(x) for x in stdin.split()[1:]]\n    d = {}\n    for i, xi in enumerate(x):\n        if xi not in d:\n            d[xi] = i\n    ans = 0\n    for xi in d.values():\n        if xi - 1 in d and xi + 1 in d:\n            ans += 2\n        elif xi - 1 in d and xi + 1 not in d:\n            ans += 2\n        elif xi - 1 not in d and xi + 1 in d:\n            ans += 2\n        else:\n            ans += 1\n    print(ans)"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution finds the minimum number of moves needed to move all chips\n    to the same coordinate.\n    \"\"\"\n    n = int(stdin)\n    x = [int(x) for x in stdin.split()]\n\n    # Find the minimum and maximum values for each coordinate\n    minimum = min(x)\n    maximum = max(x)\n    num_moves = max(abs(maximum - minimum), 1)\n\n    if n == 1:\n        return str(num_moves)\n\n    return str(num_moves + min(n // 2, num_moves))\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return "
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(5)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(5)"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    curr = (1,1)\n    moves = 0\n    if n >= 1 and n <= 10**12:\n        while curr[0] < n:\n            if curr[1] % 2 == 0:\n                curr = (curr[0] + curr[1], curr[1] + 1)\n            else:\n                curr = (curr[0], curr[1] + curr[0])\n            moves += 1\n    return str(moves)"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    moves = 0\n    while (n % 2)!= 0:\n        n = n // 2\n        moves += 1\n    n = n // 2\n    moves += 1\n    return str(moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    print(N - 1 if N % 2 else N // 2)\n    return ''\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = []\n    count = 0\n\n    while len(nums) < N:\n        count += 1\n        nums.append(count)\n\n    if N not in nums:\n        return str(nums[-1])\n\n    return str(nums[N - 1])\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    moves = N - 1\n    if moves % 2 == 0:\n        moves = moves // 2\n    else:\n        moves = moves // 2 + 1\n    print(moves)\n    return ''\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of moves needed to reach a square that contains N\"\"\"\n    n = int(stdin)\n    if n == 1:\n        print(0)\n        return\n    j = 1\n    if n > 1:\n        while True:\n            if j == 1:\n                if n == j or n % j == 0:\n                    print(j)\n                    return\n            if j == 1:\n                if n == j or n % j == 0:\n                    print(j)\n                    return\n            if j == 1:\n                if n == j or n % j == 0:\n                    print(j)\n                    return\n            j += 1\n    else:\n        print(0)\n        return"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the number of rounds where Alice wins.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = int(stdin.readline())\n    # r = map(int, stdin.readline().split())\n    # s = map(int, stdin.readline().split())\n    # p = map(int, stdin.readline().split())\n    r = [int(i) for i in stdin.readline().split()]\n    s = [int(i) for i in stdin.readline().split()]\n    p = [int(i) for i in stdin.readline().split()]\n    min_rounds = max(r[0] + s[0], p[0] + s[1])\n    max_rounds = min(r[1] + s[0] + p[0], s[2] + r[1] + p[1])\n    print(min_rounds, max_rounds)\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = [int(n) for n in stdin.split('\\n')[0].split()]\n    b = [int(n) for n in stdin.split('\\n')[1].split()]\n\n    a_cnt, b_cnt = 0, 0\n    a_win, b_win = 0, 0\n\n    while a_cnt < len(a) and b_cnt < len(b):\n        a_key, b_key = stdin.split('\\n')[2].split()\n        a_key = int(a_key)\n        b_key = int(b_key)\n\n        if a_key == b_key:\n            a_win += 1\n            b_win += 1\n            a_cnt += 1\n            b_cnt += 1\n        elif a_key == 0 and b_key == 2:\n            a_win += 1\n            a_cnt += 1\n        elif a_key == 2 and b_key == 0:\n            b_win += 1\n            b_cnt += 1\n        elif a_key == 1 and b_key == 0:\n            a_win += 1\n            a_cnt += 1\n        elif a_key == 0 and b_key == 1:\n            b_win += 1\n            b_cnt += 1\n        elif a_key == 2 and b_key == 1:\n            a_win += 1\n            a_cnt += 1\n        elif a_key == 1 and b_key == 2:\n            b_win += 1\n            b_cnt += 1\n\n    return str(min(a_win, b_win)) + \" \" + str(max(a_win, b_win))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    max_score = [0] * n\n    min_score = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if a[i] + b[j] > n:\n                continue\n            else:\n                if a[i] > 0 and a[i] + b[j] > max_score[j]:\n                    max_score[j] = a[i] + b[j]\n                if b[j] > 0 and a[i] + b[j] > max_score[i]:\n                    max_score[i] = a[i] + b[j]\n                if a[i] > 0 and a[i] + b[j] > min_score[j]:\n                    min_score[j] = a[i] + b[j]\n                if b[j] > 0 and a[i] + b[j] > min_score[i]:\n                    min_score[i] = a[i] + b[j]\n    max_score.sort()\n    min_score.sort(reverse=True)\n    return''.join(map(str, max_score[:-1])) +'' +''.join(map(str, min_score[:-1]))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    alice, bob = list(map(int, stdin.split()))\n    for i in range(1000):\n        a, b = alice, bob\n        while a and b:\n            if i % 3 == 0 and a > 1:\n                a -= 2\n            elif i % 3 == 1 and b > 1:\n                b -= 2\n            elif i % 3 == 2 and a > 1:\n                a -= 1\n            elif i % 3 == 2 and b > 1:\n                b -= 1\n        if a == b:\n            break\n    return str(i+1)\n    '''\n    # # \u0421 \u0437\u0430\u0434\u0430\u043d\u0438\u0435\u043c \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b \u043d\u0435 \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0435\u0439.\n    # # \u0414\u043b\u044f \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0433\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u043e\u0432 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0438\u0433\u0440\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0437\u0434\u0435\u0441\u044c:\n    # # https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%BB%D0%B0%D0%BD%D0%B8%D1%8F_%D0%9C%D0%B5%D0%BD%D1%81%D1%82%D0%B8%D0%BA%D0%B0_%D0%A0%D0%B0%D0%BD%D0%BE%D1%80\n    # # \u0414\u0430\u043d \u043d\u0430\u0431\u043e\u0440 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0438\u0433\u0440 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u0441\u043b\u043e\u0432\u0430\u0440\u0438.\n    # # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0432 \u043d\u0435\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435,\n    # # \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0438\u0433\u0440\u043e\u043a\u0430\u043c\u0438 \u0432 \u0438\u0433\u0440\u0430\u0445.\n    # # \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n    # # \u0421\u043e\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u044b \"\u0425\" \u0438 \"\u041e\", \u043f\u0440\u0438\u0447\u0451\u043c \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043d\u0430 \u044d\u0442\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u0445 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438.\n    # # \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0432\u0432\u043e\u0434\u044b:\n    # # \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e nn \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b\u0438\u0441\u044c.\n    # # \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 nn \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u0438, \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u043f\u043e 3 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430:\n    # # \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0442\u0440\u0451\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0438\u0433\u0440\u044b \u0410\u0421\u0421,\n    # # \u0432\u0442\u043e\u0440\u043e\u0439 \u0438 \u0442\u0440\u0435\u0442\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0442\u0440\u0451\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    a_sum = sum(a)\n    b_sum = sum(b)\n    # print(a_sum, b_sum)\n    if a_sum > b_sum:\n        return f\"0 {a_sum}\"\n    elif a_sum < b_sum:\n        return f\"{b_sum}\"\n    else:\n        if a == b:\n            return f\"{a_sum}\"\n        elif a < b:\n            return f\"{a_sum} {b_sum}\"\n        else:\n            return f\"{b_sum} {a_sum}\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    alice = [sum(a[:i + 1]) for i in range(3)]\n    bob = [sum(b[:i + 1]) for i in range(3)]\n    alice_score = [\n        alice[1] + min(alice[0], bob[2]),\n        alice[2] + min(alice[1], bob[0]),\n        alice[0] + min(alice[2], bob[1]),\n    ]\n    bob_score = [\n        bob[1] + min(bob[0], alice[2]),\n        bob[2] + min(bob[1], alice[0]),\n        bob[0] + min(bob[2], alice[1]),\n    ]\n    return str(min(max(alice_score), max(bob_score)))\n\n\"\"\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, a1, a2, a3, b1, b2, b3 = map(int, stdin.split())\n    return str(max(0, min(a1 + a3, b1 + b3) - max(a1, b1) + 1))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A set of blocks, such that no two blocks intersect and the sum of\n    its elements are equal.\n    \"\"\"\n    n, nums = int(stdin.readline()), list(map(int, stdin.readline().split()))\n    nums.sort()\n    dp = [1] * (n + 1)\n    dp_max = 1\n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            if nums[j] >= nums[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n            dp_max = max(dp_max, dp[i])\n\n    return dp_max\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/56b5e7f5cb454edb3c000047/train/python\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    a.sort()\n    m = max(a)\n    count = 0\n    if m == 1:\n        return str(1)\n    for i in range(n):\n        count += a[i]\n        if count < 0:\n            count = 0\n        else:\n            if count > m:\n                count = m\n            else:\n                count = 0\n    print(len(set(a)))\n    return \"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # TODO: edit here\n    # Make a list from input string\n    input_str = stdin.split('\\n')\n    input_list = [int(i) for i in input_str[0].split(' ')]\n\n    # Find out the max number of block\n    max_block = 0\n    for i in range(len(input_list)):\n        if input_list[i] > max_block:\n            max_block = input_list[i]\n    # print(max_block)\n\n    # Make a list with index of each number\n    numbers = [[] for i in range(max_block + 1)]\n    for i in range(len(input_list)):\n        numbers[input_list[i]].append(i)\n    # print(numbers)\n\n    # Make a list with pair of index of each number\n    pair_numbers = []\n    for i in range(max_block):\n        for j in range(i + 1, max_block + 1):\n            pair_numbers.append((i, j))\n    # print(pair_numbers)\n\n    # Check is there pair of number that are disjoint\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            for k in range(len(numbers[i])):\n                for m in range(len(numbers[j])):\n                    if numbers[i][k] > numbers[j][m]:\n                        break\n                    elif numbers[i][k] < numbers[j][m]:\n                        continue\n                    elif numbers[i][k] == numbers[j][m]:\n                        # Remove pair from pair_numbers\n                        # print(pair_numbers)\n                        for pair in pair_numbers:\n                            if pair[0] == numbers[i][k] and pair[1] == numbers[j][m]:\n                                pair_numbers.remove(pair)\n                                # print(pair_numbers)\n                                break\n\n    # Calculate the number of disjoint pair\n    # print(pair_numbers)\n    # print(len(pair_numbers))\n    return len(pair_numbers)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a set of blocks\n\n    Args:\n        stdin (str): The input file as a string\n\n    Returns:\n        str: The string representation of the set of blocks\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    arr = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        arr.sort()\n        indexes = []\n        last_index = -1\n        sum_arr = sum(arr)\n        for i in range(n-1):\n            if arr[i+1] < arr[i] + 1:\n                if arr[i+1] + arr[i] == sum_arr:\n                    indexes.append((arr[i], arr[i+1]))\n                elif arr[i+1] + arr[i] < sum_arr:\n                    last_index = i\n        if len(indexes) == 0:\n            indexes.append((arr[last_index], arr[last_index]))\n        if len(indexes) == 1:\n            return str(len(indexes)) + \" \" + str(indexes[0][0]) + \" \" + str(indexes[0][1])\n        else:\n            for i in range(len(indexes)):\n                if i == len(indexes) - 1:\n                    return str(len(indexes)) + \" \" + str(indexes[i][0]) + \" \" + str(indexes[i][1])\n                print(str(indexes[i][0]) + \" \" + str(indexes[i][1]))\n    return \"\""
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    dp = [[[-1, -1] for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i][0] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                dp[i][j][0] = dp[i][j][1] = dp[i][j][0] + 1\n            else:\n                dp[i][j][0] = dp[i][j][1] = max(dp[i][j][0], dp[i][j][1])\n            if dp[i][j][0] > ans:\n                ans = dp[i][j][0]\n                left = i\n                right = j\n    res = [left, right]\n    for i in range(ans):\n        left = right\n        right = dp[left][right][1]\n        res.append(right)\n    res =''.join(map(str, res))\n    return res\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a set of blocks such that the blocks don't intersect, and the\n    sum of the block's elements is the same, in any order\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 2 2 1 5 3\\\\n\")\n    3\n    >>> solution(\"11 -5 -4 -3 -2 -1 0 1 2 3 4 5\\\\n\")\n    2\n    >>> solution(\"4 1 1 1\\\\n\")\n    4\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    blocked = set()\n    blocked_set = set()\n    for i, v in enumerate(a):\n        if v in blocked_set:\n            continue\n        if v in blocked:\n            blocked.remove(v)\n            blocked_set.remove(v)\n        else:\n            blocked.add(v)\n            blocked_set.add(v)\n            k = i + 1\n            while k < n and a[k] in blocked:\n                k += 1\n            if k < n and a[k] not in blocked:\n                blocked_set.remove(a[k])\n                blocked.remove(a[k])\n                blocked.add(a[i])\n                blocked_set.add(a[i])\n            else:\n                blocked.remove(a[i])\n                blocked_set.remove(a[i])\n                blocked.add(a[i] + 1)\n                blocked_set.add(a[i] + 1)\n            print(len(blocked))\n            print(*blocked_set)\n    return ''\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n    blocks = []\n    for i in range(n - 1):\n        if A[i + 1] == A[i] + 1:\n            blocks.append((i, i + 1))\n    ans = len(blocks)\n    if not blocks:\n        print(ans)\n        return\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if j + 1 < n and A[j + 1] == A[j] + 1:\n                temp = len(blocks)\n                if j + 2 < n:\n                    if A[j + 2] == A[j] + 1:\n                        blocks.append((j, j + 2))\n                        temp = len(blocks)\n                if j + 3 < n:\n                    if A[j + 3] == A[j] + 1:\n                        blocks.append((j, j + 3))\n                        temp = len(blocks)\n                if temp < ans:\n                    ans = temp\n                if j + 4 < n:\n                    if A[j + 4] == A[j] + 1:\n                        blocks.append((j, j + 4))\n                        temp = len(blocks)\n                if temp < ans:\n                    ans = temp\n                if j + 5 < n:\n                    if A[j + 5] == A[j] + 1:\n                        blocks.append((j, j + 5))\n                        temp = len(blocks)\n                if temp < ans:\n                    ans = temp\n    print(ans)\n    print(\" \".join(map(str, map(lambda x: x[0] + 1, blocks))))\n    print(\" \".join(map(str, map(lambda x: x[1] + 1, blocks))))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.readline().split()\n    line2 = stdin.readline().split()\n    n = int(line1[0])\n    array = list(map(int, line2))\n\n    ans = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(array[i : j + 1]) == 0:\n                ans.add((i, j))\n    return str(len(ans))\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Builds stacks of ravioli and arrange them in an ordered manner.\n    '''\n    # print(stdin)\n    if stdin[0] == stdin[1]:\n        print('YES')\n    else:\n        print('NO')\n    return 'YES' if stdin[0] == stdin[1] else 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n1 2 3\\n')\n    'YES\\n'\n    >>> solution('3\\n1 2 3\\n')\n    'NO\\n'\n    >>> solution('2\\n1 1\\n')\n    'YES\\n'\n    >>> solution('2\\n1 1\\n')\n    'NO\\n'\n    >>> solution('4\\n2 2 2 2\\n')\n    'NO\\n'\n    >>> solution('4\\n2 2 2 2\\n')\n    'NO\\n'\n    >>> solution('4\\n2 2 3 2\\n')\n    'YES\\n'\n    >>> solution('4\\n3 3 3 3\\n')\n    'NO\\n'\n    >>> solution('3\\n1 1 1\\n')\n    'YES\\n'\n    >>> solution('3\\n1 1 1\\n')\n    'YES\\n'\n    >>> solution('3\\n1 1 2\\n')\n    'YES\\n'\n    >>> solution('3\\n1 2 3\\n')\n    'YES\\n'\n    >>> solution('3\\n2 1 3\\n')\n    'YES\\n'\n    >>> solution('3\\n2 3 1\\n')\n    'YES\\n'\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    stack = []\n    prev = None\n    for i in range(n):\n        while stack and arr[stack[-1]] < arr[i]:\n            prev = stack.pop()\n        stack.append(i)\n        if i == prev + 1 and len(stack) > 1:\n            return 'NO\\n'\n    while stack:\n        prev = stack.pop()\n        if prev!= 0:\n            return 'NO\\n'\n    return 'YES\\n'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    if len(s)!= len(t):\n        return \"-\" + str(len(s) - len(t))\n    return str(move_count(s, t, n))\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    moves = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            s[i], s[j] = s[j], s[i]\n            if s == t:\n                moves = i + 1\n            s[i], s[j] = s[j], s[i]\n    print(moves)\n    return \" \".join([str(x) for x in moves])\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return s\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    s = stdin[0]\n    t = stdin[1]\n    if s == t:\n        return 0\n    elif len(s) > len(t):\n        return -1\n    elif len(s) < len(t):\n        return -1\n    else:\n        return -1"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    while n:\n        n -= 1\n        s, t = t, s\n    return str(s)\n\nprint(solution(input()))\n\"\"\"\nimport collections\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().rstrip()\n    t = stdin.readline().rstrip()\n    s_list = list(s)\n    t_list = list(t)\n    s_dict = {letter: idx for idx, letter in enumerate(s_list)}\n    t_dict = {letter: idx for idx, letter in enumerate(t_list)}\n\n    res = 0\n    for letter in s_list:\n        if letter!= t_list[res]:\n            temp = s_dict[t_list[res]]\n            s_dict[t_list[res]] = s_dict[letter]\n            s_dict[letter] = temp\n            res += 1\n            if res == n:\n                break\n    res = \"\"\n    for i in range(n):\n        res += str(s_dict[t_list[i]]) + \" \"\n    return res"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    s = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n    moves = 0\n\n    for i in range(n - 1):\n        if s[i]!= t[i] and s[i + 1]!= t[i + 1]:\n            s = s[:i] + t[i] + s[i + 1:]\n            moves += 1\n    \n    if s == t:\n        return str(moves)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    s = [stdin[i] for i in range(n)]\n    for l in range(1, n + 1):\n        for i in range(n - l + 1):\n            if not(isPrefix(s[i:i + l]) ^ isSuffix(s[i:i + l])):\n                return \"SPS\"\n    return \"PS\"\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0421\u0435\u043c\u0438\u0431\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n\n    \u0418\u043d\u043e\u0433\u0434\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u044b \u0438\u0433\u0440\u0430\u044e\u0442 \u0441 \u0432\u0430\u043c\u0438 \u0432 \u0438\u0433\u0440\u0443. \u041e\u043d\u0438 \u043f\u043e\u043f\u0440\u043e\u0441\u0438\u043b\u0438 \u0432\u0430\u0441 \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441,\n    \u043c\u043e\u0436\u0435\u0442 \u043b\u0438 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u043d\u0430\u0439\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0441\u0442\u0440\u043e\u043a \u0434\u043b\u044f \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u0438\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u0442\u0440\u043e\u043a.\n    \u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u0442\u0430\u043a\u0443\u044e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 \u0441\u0442\u0440\u043e\u043a \u0438 \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u0443 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441.\n    \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043e\u0442\u0432\u0435\u0442\u0430.\n\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u0430, \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u0438\u043c\u0432\u043e\u043b\u0443 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0443. \u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 $s$. \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0439 \u0441\u0442\u0440\u043e\u043a $s_i$ \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $n$ \u0441\u0442\u0440\u043e\u043a. \u0414\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a \u0432 \u043e\u0431\u043e\u0438\u0445 \u0444\u0430\u0439\u043b\u0430\u0445 \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 100 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443. \u0415\u0441\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0432\u044b\u0431\u0435\u0440\u0435\u0442 \u043e\u0434\u043d\u0443 \u0438\u0437 \u043d\u0438\u0445 \u0438 \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u044d\u0442\u0443 \u0441\u0442\u0440\u043e\u043a\u0443 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 1\n    \u0412\u0432\u043e\u0434    \n    5\n    ba\n    a\n    abab\n    a\n    aba\n    baba\n    ab\n    aba\n    \n    \u0412\u044b\u0432\u043e\u0434\n    SPSPSPS\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 2\n    \u0412\u0432\u043e\u0434    \n    3\n    a\n    aa\n    aa\n    a\n    \n    \u0412\u044b\u0432\u043e\u0434\n    PS\n\n    \u041f\u0440\u0438\u043c\u0435\u0440 3\n    \u0412\u0432\u043e\u0434    \n    2\n    a\n    c\n    \n    \u0412\u044b\u0432\u043e\u0434\n    PS\n\n    \u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435\n    \u0421\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b.\n\n    :param stdin: \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n    :return: \u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.\n    \"\"\"\n    n = int(stdin)\n    s = stdin[:n]\n    s_ls = [stdin[i:i+n] for i in range(0, len(stdin), n)]\n    s_ls = list(set(s_ls))\n    p, s = [], []\n    for i in range(0, len(s_ls)):\n        if s_ls[i][0] == s[0]:\n            p.append(s_ls[i])\n        else:\n            s.append(s_ls[i])\n    print('P' * len(p) + 'S' * len(s))\n    return 'P' * len(p) + 'S' * len(s)\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = []\n    for _ in range(2 * n - 2):\n        lst.append(stdin)\n    return stdin\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nba\\na\\nabab\\na\\naba\\nbaba\\nab\\naba\")\n    \"SPPSPSPS\"\n    >>> solution(\"3\\na\\naa\\na\\n\")\n    \"PPSS\"\n    >>> solution(\"2\\na\\nc\\n\")\n    \"PS\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    a = [int(i) for i in a]\n    a.sort()\n    return a[0]"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    num = [int(x) for x in a]\n    num.sort(reverse = True)\n    if num[0] > num[1]:\n        return num[1]\n    elif num[1] > num[2]:\n        return num[2]\n    elif num[2] > num[3]:\n        return num[3]\n    elif num[3] > num[4]:\n        return num[4]\n    else:\n        return num[0]\n\n'''"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    ans = 1\n    for i in range(len(data)):\n        if data[i] < data[i-1]:\n            ans += 1\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a = [int(i) for i in stdin.split(' ')]\n    # count the number of evens\n    # use 2 variables to keep track of evens\n    evens = 0\n    # initialize to be 1 as we already checked 0\n    # go through each item and if the item is even, increment evens by 1\n    # when evens is 1, return 0\n    # otherwise, return 1\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            evens += 1\n    if evens == 1:\n        return 0\n    else:\n        return 1\n\n\nsolution('')\n'''\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_mim_in_list(list_of_nums: list, num_to_check: int) -> bool:\n        if num_to_check == 0:\n            return True\n        for num in list_of_nums:\n            if num % num_to_check == 0:\n                return True\n        return False\n\n    numbers = [int(i) for i in stdin.split(' ')]\n    for num in numbers:\n        if is_mim_in_list(numbers, num):\n            print(num)\n            return\nsolution(input())\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(1)\n    return ''\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to task 1.\n    \"\"\"\n    args = stdin.split(\" \")\n    print(max(args))\n    return \"\"\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.split(' ')[0])):\n        print(i)\n    return \"\""
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    flats = [int(x) for x in stdin.readline().split()]\n    cur_light = 0\n    prev_light = 0\n    last_index = 0\n    i = 0\n    while i < n:\n        if flats[i] == 0:\n            cur_light = 0\n        else:\n            cur_light = 1\n        if cur_light == prev_light:\n            last_index = i\n            break\n        prev_light = cur_light\n        i += 1\n    res = 0\n    for j in range(n):\n        if flats[j] == 1 and flats[(j + 1) % n] == 1 and flats[(j + 2) % n] == 0:\n            res += 1\n    if res == 0:\n        print(0)\n    else:\n        print(last_index + 1)\n    return ''\n\nprint(solution(input()))"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(num) for num in stdin.split()]\n\n    nums = set()\n    for i in range(len(a)):\n        if a[i] == 1:\n            nums.add(i)\n    if not nums:\n        return 0\n    if len(nums) < n - 1:\n        return 0\n\n    a.sort()\n    nums = set()\n    for i in range(len(a)):\n        if a[i] == 1:\n            nums.add(i)\n    if len(nums) < n - 1:\n        return 0\n    # print(nums)\n    if 1 in nums:\n        return 1\n    if a[0] == 1 and a[-1] == 1:\n        return 1\n    return 0"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 1 1 0 1 1 0 1 0 1 0\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1 1 0 0 0\n   ... ''')\n    '0'\n    >>> solution('''4\n   ... 1 1 1 1\n   ... ''')\n    '0'\n    >>> solution('''5\n   ... 1 1 0 0 0\n   ... ''')\n    '0'\n    >>> solution('''10\n   ... 1 1 0 1 1 0 1 0 1 0\n   ... 1 1 1 1 1 1 1 1 1 1\n   ... 1 1 1 1 1 1 1 1 1 1\n   ... 1 1 1 1 1 1 1 1 1 1\n   ... 1 1 1 1 1 1 1 1 1 1\n   ... ''')\n    '0'\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n - 1):\n        if a[i]!= a[i - 1] and a[i]!= a[i + 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    \n    res = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] == 1:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the min num of people to be in pair in such way that we can turn off the light and no one will be disturbed\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin.readline().strip())\n    arr = [int(num) for num in stdin.readline().strip().split()]\n    count = 0\n    for i in range(1, n):\n        if arr[i - 1] == 1 and arr[i] == 1 and arr[i + 1] == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lights = list(map(int, stdin.readline().strip().split(' ')))\n    disturbed = 0\n    for i in range(n):\n        if i > 0 and lights[i] == 1 and lights[i - 1] == 1 and lights[i + 1] == 1:\n            disturbed += 1\n    return disturbed\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    state = stdin.readline().split()\n    if num == 1:\n        return 0\n    ans = 0\n    for i in range(0, num - 1):\n        if int(state[i]) == 1 and int(state[i + 1]) == 1:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split(' ')))\n    k = 0\n    for i in range(1, n - 1):\n        if seq[i] and seq[i - 1] == 1 and seq[i + 1] == 1:\n            k += 1\n    return k\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of integers x such that x divides each element of stdin.\n\n    >>> solution(\"5 1 2 3 4\")\n    2\n\n    >>> solution(\"6 90 12 18 30 18\")\n    4\n\n    \"\"\"\n\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = [int(elem) for elem in stdin[1:]]\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                res += 1\n\n    return res\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            if a[i - 1] % a[j - 1] == 0:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"returns the number of common divisors of all elements from the given input\"\"\"\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for i in range(n)]\n    lcm = 1\n    for i in range(1, max(a)+1):\n        for j in a:\n            if j % i!= 0:\n                break\n        else:\n            lcm *= i\n    return lcm\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Simple solution\"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    div = 1\n    for i in a:\n        div *= i\n    div //= math.gcd(a)\n    print(div)\n    return ''\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while a!= 0 and b!= 0:\n            if a > b:\n                a %= b\n            else:\n                b %= a\n        return a or b\n\n    def common_divisors(a: list) -> int:\n        divisor_set = set()\n        for i in range(len(a)):\n            for j in range(len(a)):\n                if i!= j:\n                    divisor_set.add(gcd(a[i], a[j]))\n        return len(divisor_set)\n    return common_divisors(list(map(int, stdin.split())))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = []\n    for i in range(n):\n        if a[i]!= 1:\n            for j in range(2, a[i] + 1):\n                if a[i] % j == 0:\n                    l.append(j)\n    print(len(set(l)))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.split():\n        return 0\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    x = 1\n    for i in range(n):\n        x *= a[i]\n    x //= a[0]\n    for i in range(1, n):\n        x //= a[i]\n    return x\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get the list of numbers from the input\n    nums = [int(num) for num in stdin.split('\\n')[0].split(' ')]\n    # set initial number of divisors to 0\n    divisors = 0\n    # iterate through the list of numbers\n    for num in nums:\n        # iterate through the list of numbers again\n        for divisor in nums:\n            # if the current number and the divisor are both divisible by each other\n            if num % divisor == 0 and divisor % num == 0:\n                # add one to the number of divisors\n                divisors += 1\n    # return the number of divisors\n    return str(divisors)\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates minimum number of pockets Polycarp needs to distribute all the coins so no two coins with the same value are put into the same pocket.\n\n    >>> solution(\"6\\n1 2 4 3 3 2\")\n    2\n    \"\"\"\n    num = int(stdin.readline().strip())\n    coins = list(map(int, stdin.readline().strip().split(\" \")))\n\n    # We need to find the indexes of the distinct values of the array, so we can create the dictionary with the index as a key and the number of repetitions as a value\n    # Ex. If we have the array [2, 3, 3, 1] and we have the distinct values [2, 3], then the dictionary would look like {0: 2, 1: 1}\n    dictionary = {}\n    for i, coin in enumerate(coins):\n        if coin in dictionary:\n            dictionary[coin].append(i)\n        else:\n            dictionary[coin] = [i]\n\n    # Sort the indexes in the dictionary by the number of repetitions (values)\n    # Ex. If we have the dictionary {0: 2, 1: 1} then it would be transformed to {1: 1, 0: 2}\n    dictionary = {k: v for k, v in sorted(dictionary.items(), key=lambda item: len(item[1]))}\n\n    # Create a new dictionary where we put the number of values in each index to be able to calculate the number of possible groups\n    dictionary_count = {}\n    for key, values in dictionary.items():\n        dictionary_count[key] = len(values)\n\n    # Initialize the array with the number of groups (possible groupings)\n    groups = [dictionary_count[key] for key in dictionary_count]\n\n    # Calculate the number of groups that have no value that is repeated\n    groups.append(0)\n\n    # The number of groups is the minimum of the number of groups\n    number_of_groups = min(groups)\n\n    # Return the answer\n    return number_of_groups\n\nsolution(\"6\\n1 2 4 3 3 2\")\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nassert solution('6\\n1 2 4 3 3 2') == '2'\n\"\"\"\n\nn = int(input())\na = sorted(map(int, input().split()))\n\nm = {}\nfor i in a:\n    if i in m:\n        m[i] += 1\n    else:\n        m[i] = 1\n\nans = 0\nfor i in m:\n    if m[i] == 1:\n        ans += 1\n    else:\n        ans += m[i] // 2\n\nprint(ans)"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    counter = 0\n    while len(a) > 1:\n        if a[0] == a[1]:\n            a.pop(0)\n            a.pop(0)\n            counter += 1\n        else:\n            a.pop(0)\n            counter += 1\n    return counter\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    c = [int(i) for i in lines[1].split(' ')]\n    c.sort()\n    min_val = 1\n    for i in range(len(c)):\n        if c[i] == c[i - 1]:\n            min_val += 1\n    return str(min_val)\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c, *a = stdin.split('\\n')\n    a = [int(x) for x in a]\n    d = {a[i] : i for i in range(len(a))}\n    n = len(a)\n    c = int(c)\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if j == i:\n                continue\n            if a[i] == a[j]:\n                res = max(res, d[a[i]] + 1)\n    return res\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Polycarp has $n$ coins, the value of the $i$-th coin is $a_i$.\n    Polycarp wants to distribute all the coins between his pockets,\n    but he cannot put two coins with the same value into the same pocket.\n\n    For example, if Polycarp has got six coins represented as an array\n    $a = [1, 2, 4, 3, 3, 2]$, he can distribute the coins into two pockets as follows:\n    $[1, 2, 3], [2, 3, 4]$.\n\n    Polycarp wants to distribute all the coins with the minimum number of used pockets.\n    Help him to do that.'''\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    for i in range(n):\n        a[i] = abs(a[i])\n    a.sort()\n    result = 0\n    for i in range(n):\n        if i == 0:\n            result += a[i]\n        else:\n            result += a[i] - a[i - 1]\n    print(result)\n\nsolution(input())\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    count = 1\n    while len(set(array))!= n:\n        count += 1\n        array = list(set(array))\n    return count"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i + 1 < n and a[i] == a[i + 1]:\n            ans += 1\n    return ans\n\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    positions_of_heaters = []\n    for i in range(n):\n        if a[i] == 1:\n            positions_of_heaters.append(i)\n    # print(positions_of_heaters)\n    l = len(positions_of_heaters)\n    if l == 0:\n        return \"-1\"\n    else:\n        if n <= r:\n            return \"0\"\n        elif l == 1:\n            return \"1\"\n        elif l == 2:\n            return \"2\"\n        elif l == 3:\n            return \"3\"\n        else:\n            return \"4\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    size = int(stdin.readline())\n    heaters = list(map(int, stdin.readline().split()))\n    counter = Counter(heaters)\n    heaters.sort()\n    first, second = 0, size - 1\n    while first < second:\n        if heaters[first] + heaters[second] == 0:\n            return \"Impossible\"\n        if heaters[first] + heaters[second] == 1:\n            first += 1\n            second -= 1\n        elif heaters[first] + heaters[second] == 2:\n            first += 1\n            second -= 1\n        elif heaters[first] + heaters[second] == 3:\n            second -= 1\n            first += 1\n    if first == second:\n        return str(counter[heaters[first]] + 1)\n    if counter[heaters[first]] > counter[heaters[second]]:\n        return str(counter[heaters[second]] + 1)\n    else:\n        return str(counter[heaters[first]] + 1)\n\nprint(solution(\"4 2\\n1 0 1\\n\"))"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    house = list(map(int, stdin.split()))\n    heaters = 0\n    heaters_count = 0\n    for i in range(n):\n        if house[i] == 0:\n            heaters_count += 1\n        else:\n            if heaters_count < r:\n                heaters += heaters_count\n                heaters_count = 0\n            else:\n                heaters += r\n                heaters_count = 0\n    return heaters\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 2\\n0 1 1 0 0 1\\n')\n    3\n    >>> solution('5 3\\n1 0 0 0 1\\n')\n    2\n    >>> solution('5 10\\n0 0 0 0 0\\n')\n    -1\n    >>> solution('10 3\\n0 0 1 1 0 1 0 0 0 1\\n')\n    3\n    \"\"\"\n    from heapq import heappop, heappush\n\n    n, r = map(int, stdin.split())\n    heaters = list(map(int, stdin.split()))\n\n    heaters = [1 if heater == 1 else 0 for heater in heaters]\n\n    heaters_count = 0\n    heaters_heap = []\n\n    for i in range(n):\n        if heaters[i] == 1:\n            heaters_count += 1\n            heappush(heaters_heap, i - r)\n            heappush(heaters_heap, i + r)\n\n    while heaters_heap:\n        pos = heappop(heaters_heap)\n\n        if pos - r >= 0 and heaters[pos - r] == 0:\n            heaters[pos - r] = 1\n            heaters_count += 1\n        if pos + r < n and heaters[pos + r] == 0:\n            heaters[pos + r] = 1\n            heaters_count += 1\n\n    return heaters_count if heaters_count!= n else -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_house(house):\n        n = len(house)\n        r = max(house)\n        for i in range(1, n + 1):\n            for j in range(i):\n                if house[i - 1] == house[j]:\n                    house[i - 1] = r\n                    house[j] = house[i - 1]\n        return house\n\n    def check_house(house):\n        return min(house) >= 2\n\n    n, r = [int(x) for x in stdin.split()]\n    house = [int(x) for x in stdin.split()]\n    house = get_house(house)\n    if check_house(house):\n        print(1)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_n_warm_up(houses, max_heaters):\n        left, right = 1, max_heaters\n        while left < right:\n            middle = (right + left) // 2\n            if warm_up_houses(houses, middle):\n                right = middle\n            else:\n                left = middle + 1\n        return left - 1\n    \n    def warm_up_houses(houses, max_heaters):\n        heaters = [0] * max_heaters\n        for house in houses:\n            heaters[house] = 1\n        return sum(heaters) >= len(houses)\n    \n    n, r = [int(x) for x in stdin.split('\\n')[0].split()]\n    houses = [int(x) for x in stdin.split('\\n')[1].split()]\n    return str(find_n_warm_up(houses, n))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    if max(a) < r:\n        return '-1'\n    if sum(a) == n:\n        return str(len(a))\n    return str(sum([1 for i in range(n) if (a[i] + i) % r == 0]))\n\n\n\n-----Debug-----\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    def is_cold(arr, left, right):\n        i = left - 1\n        while i <= right:\n            if arr[i] == 1:\n                return False\n            i += 1\n        return True\n\n    ans = 0\n    for i in range(n):\n        if arr[i] == 0:\n            if is_cold(arr, i - r + 1, i):\n                ans += 1\n                arr[i] = 1\n            if is_cold(arr, i, i + r - 1):\n                ans += 1\n                arr[i] = 1\n    if ans == 0:\n        return -1\n    return ans\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    house = [int(x) for x in stdin.split()]\n    d = {}\n    for i in range(n):\n        if house[i] == 0:\n            continue\n        if house[i] == 1:\n            d[i] = house[i]\n        else:\n            d[i] = r\n\n    #print(d)\n    dp = [0] * n\n    for i in range(n):\n        for k in range(1, r + 1):\n            if i - k >= 0 and house[i - k] == 1:\n                dp[i] = dp[i - k] + 1\n                #print(i, dp[i], dp[i - k], i - k)\n                break\n            if i + k < n and house[i + k] == 1:\n                dp[i] = dp[i + k] + 1\n                #print(i, dp[i], dp[i + k], i + k)\n                break\n            if dp[i] == 0:\n                dp[i] = -1\n    #print(dp)\n    return str(dp[n - 1])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(2)\n    1\n    >>> solution(3)\n    2\n    >>> solution(4)\n    1\n    \"\"\"\n    n = int(stdin.readline().strip())\n    cnt = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            if a * b > n:\n                break\n            c = n - a * b\n            if c >= 1 and a * b + c in range(1, n + 1):\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            c = n - a - b\n            if c > 0:\n                ans += 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main solver function\n    \"\"\"\n    stdin = stdin.split('\\n')\n    res = 0\n    for i in stdin:\n        a, b, c, n = map(int, i.split())\n        if (n - c) % b == 0:\n            res += 1\n    return str(res)"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    count = 0\n    for A in range(1, N + 1):\n        for B in range(1, N + 1):\n            if A * B >= N:\n                continue\n            C = N - (A * B)\n            if C < 1:\n                continue\n            count += 1\n    print(count)\n    return ''"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([f\"{a} {b} {c}\" for a in range(1, int(stdin) + 1) for b in range(1, int(stdin) + 1) for c in range(1, int(stdin) + 1) if a * b + c == int(stdin)])\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    input_n = stdin\n    # write your code in Python 3.6\n    input_n = int(input_n)\n    print(int(input_n * (input_n - 1) * (input_n - 2) // 6))"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    \n    return str(solution(stdin))"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(((())\")\n    0\n    >>> solution(\"()())()\")\n    1\n    >>> solution(\"()())()\")\n    2\n    >>> solution(\"))(((((\")\n    0\n    >>> solution(\"(((()(()\")\n    1\n    >>> solution(\"(((((((\")\n    3\n    >>> solution(\"(((((((((((((((\")\n    5\n    >>> solution
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    brackets = stdin.readline()\n    counter = 0\n    for index, bracket in enumerate(brackets):\n        if bracket == ')' and brackets[index + 1] == ')':\n            counter += 1\n    return counter\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    b = stdin[1]\n    s = []\n    cnt = 0\n    for i in range(len(b)):\n        if b[i] == '(':\n            s.append(i)\n        else:\n            cnt += 1\n            s.pop()\n    cnt += len(s)\n    return n - cnt\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s[0])\n    s = s[1:]\n    open_bracket = s.count('(')\n    close_bracket = s.count(')')\n    return str(open_bracket - close_bracket)\n\nprint(solution(input()))"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    reg = 0\n    for i in range(len(s)):\n        if s[i] == ')':\n            if i + 1 < len(s) and s[i + 1] == '(':\n                reg += 1\n                i += 1\n            else:\n                reg += 1\n        else:\n            if i + 1 < len(s) and s[i + 1] == ')':\n                reg += 1\n                i += 1\n            else:\n                reg += 1\n    print(reg)\n\nsolution(\"6\\n(((()\\n\")\nsolution(\"6\\n()()()\\n\")\nsolution(\"1\\n)\")\nsolution(\"8\\n))((((\\n\")\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    s = stdin[1:]\n    \n    bracket_pairs = {'(': ')', ')': '('}\n    inverted_bracket_pairs = {v: k for k, v in bracket_pairs.items()}\n    \n    stack = []\n    for bracket in s:\n        if bracket in bracket_pairs:\n            stack.append(bracket)\n        else:\n            if not stack:\n                return 0\n            if bracket == inverted_bracket_pairs[stack[-1]]:\n                stack.pop()\n            else:\n                return 0\n    \n    return len(stack)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    import collections\n    freq_t = collections.Counter(t)\n    j = 0\n    result = 0\n    for i, letter in enumerate(s):\n        if freq_t[letter] > 0:\n            freq_t[letter] -= 1\n        else:\n            while j < len(s):\n                if freq_t[s[j]] >= 1:\n                    break\n                j += 1\n            if j == len(s):\n                result = max(result, i+1)\n                return result\n            result = max(result, i-j)\n            freq_t[s[j]] += 1\n            freq_t[s[j]] -= 1\n            j += 1\n    return result\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(t) > len(s):\n        return 0\n    d = dict()\n    for i, c in enumerate(s):\n        if c not in d:\n            d[c] = [i]\n        else:\n            d[c].append(i)\n    l = len(t)\n    res = 0\n    i = 0\n    while i < l and t[i] in d:\n        start = d[t[i]][0]\n        end = d[t[i]][-1]\n        j = i\n        while j < l and t[j] == t[i]:\n            end = d[t[j]][-1]\n            d[t[j]] = [start, end]\n            res = max(res, j - i + 1)\n            j += 1\n        i = end + 1\n    return res"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return length of the longest substring with at most one difference between first and second letter\n    \"\"\"\n    s, t = stdin.split(\"\\n\")\n\n    def check(s, t, i, j):\n        if len(s) < len(t):\n            return \"impossible\"\n        diff = 0\n        while i < len(s) and j < len(t) and diff < 2:\n            if s[i]!= t[j]:\n                diff += 1\n            i += 1\n            j += 1\n        if i < len(s) and j < len(t):\n            return \"impossible\"\n        return diff\n\n    def check_all(s, t):\n        diff = 0\n        for i in range(len(s)):\n            for j in range(len(t)):\n                if s[i]!= t[j]:\n                    diff += 1\n        return diff\n\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if check(s[i:j], t) == \"impossible\":\n                continue\n            max_len = max(max_len, j - i)\n    return max_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    # f(i, j) = how many letters you can delete so that t[i:j] is a subsequence of s\n    f = [[0 for _ in range(len(s) + 1)] for _ in range(len(t) + 1)]\n    for j in range(len(s) + 1):\n        f[0][j] = j\n    for i in range(len(t) + 1):\n        f[i][0] = i\n\n    for i in range(1, len(t) + 1):\n        for j in range(1, len(s) + 1):\n            if t[i - 1] == s[j - 1]:\n                f[i][j] = f[i - 1][j - 1]\n            else:\n                f[i][j] = min(f[i - 1][j - 1], f[i - 1][j], f[i][j - 1]) + 1\n\n    return f[-1][-1]\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    len_s = len(stdin)\n\n    s = stdin\n    t = stdin\n    t = t[1:] + t[0]\n    while not is_subsequence(t, s):\n        s = s[1:] + s[0]\n    return len_s - len(s)\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    res = 0\n    cur = 0\n    for ch in s:\n        if ch == t[cur]:\n            cur += 1\n            if cur == len(t):\n                res = len(s) - cur\n                break\n        else:\n            cur = 0\n\n    return res"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('bbaba')\n    3\n    >>> solution('baaba')\n    2\n    >>> solution('abcde')\n    0\n    >>> solution('asdfasdf')\n    3\n    \"\"\"\n    s, t = stdin.split('\\n')\n    s = sorted(s)\n    t = sorted(t)\n    res = 0\n    i = 0\n    for j in range(len(s)):\n        if s[j] == t[i]:\n            i += 1\n            if i == len(t):\n                return j - len(t) + 1\n        else:\n            res = max(res, j - i)\n    return res\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return 0\n    count = 0\n    sub_count = 0\n    while count < len(stdin):\n        sub_count += 1\n        c = stdin[count]\n        for i in range(count+1, len(stdin)):\n            if stdin[i] < c:\n                count += 1\n            else:\n                break\n    return sub_count\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return len(s) - len(t)\n    pass\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(0, a * b if c * d >= 0 else 0))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if c * d <= b:\n        return c * d\n    if c * d >= a:\n        return a * b\n    if a <= b:\n        return c * d\n    return a * b\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem:\n    Write a program to find the maximum value of x * y for given a, b, c, d.\n    \"\"\"\n    a, b, c, d = [int(x) for x in stdin.split()]\n    result = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            result = max(result, x * y)\n    return str(result)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split(\" \")))\n    print(max(max(a, b) * max(c, d), max(a, d) * max(c, b)))"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(max([a * y for y in range(c, d + 1)]))\n\"\"\"\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    l = [a, b, c, d]\n    l.sort()\n    a, b, c, d = l[0], l[1], l[2], l[3]\n    if a * b >= c * d:\n        return c * d\n    else:\n        return a * b\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if b < a:\n        print(a)\n    elif a < c:\n        print(c)\n    else:\n        print(d)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(a, b+1):\n        for j in range(c, d+1):\n            res = max(res, i*j)\n    return str(res)\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 2 1 1\n   ... 2 3 4 1\n   ... 3 5 7 8\n   ... ''')\n    '2'\n    \"\"\"\n    _, a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    return str(max(i * j for i in range(a, b + 1) for j in range(c, d + 1)))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return \"2\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem 2\"\"\"\n    # init variables\n    n = int(stdin.readline().rstrip())\n    k = int(stdin.readline().rstrip())\n\n    # get n/2 elements\n    d = list(map(int, stdin.readline().rstrip().split()))\n    # check if the number of elements is divisible by 2\n    assert len(d) % 2 == 0\n    # count the number of elements with the provided number of problems\n    count = 0\n\n    # iterate over the elements in the array\n    for i in range(len(d)):\n        # if element is higher than provided number\n        if d[i] >= k:\n            # get the number of elements in the range\n            n_elem = len(d) - i\n            # get the difference between the number of elements and the required number of problems\n            diff = abs(n_elem - (n // 2))\n            count += diff\n    return str(count)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum possible number of problems for ARCs and ABCs\n\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: Number of options\n    \"\"\"\n\n    N, *d = map(int, stdin.split())\n\n    d_max = max(d)\n    d_min = min(d)\n\n    return sum(d_min <= d <= d_max)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    \n    # N\u4e3a\u6570\u7ec4\u957f\u5ea6\uff0c\u7b49\u4e8e\u6bcf\u4e2a\u7b80\u5355\u9898\u7684\u6311\u6218\u7ea7\u522b\n    # d\u4e3a\u6bcf\u4e2a\u7b80\u5355\u9898\u7684\u96be\u5ea6\uff0c\u7b49\u4e8e\u6bcf\u4e2a\u7b80\u5355\u9898\u7684\u6311\u6218\u7ea7\u522b\n    # \u8fd9\u91cc\u7528\u6307\u9488\u65b9\u6cd5\uff0c\u8282\u7701\u5185\u5b58\u5f00\u9500\n    d = [a for a in d]\n    dp = [[0 for _ in range(2)] for _ in range(N)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n\n    for i in range(1, N):\n        # \u4e0b\u4e00\u4e2a\u7b80\u5355\u9898\u7684\u6311\u6218\u7ea7\u522b\n        d[i] = max(d[i], d[i-1])\n        # \u9009\u62e9\u54ea\u4e2a\u6311\u6218\u7ea7\u522b\n        if d[i] <= d[i] % 2 + 1:\n            dp[i][0] = dp[i-1][0] + 1\n        else:\n            dp[i][0] = dp[i-1][1] + 1\n        # \u9009\u62e9\u54ea\u4e2a\u6311\u6218\u7ea7\u522b\n        if d[i] <= d[i] % 2 + 1:\n            dp[i][1] = dp[i-1][0] + 1\n        else:\n            dp[i][1] = dp[i-1][1] + 1\n    \n    return str(dp[N-1][0] + dp[N-1][1] - 1)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n\n    odd_sum = sum(p[::2])\n    even_sum = sum(p[1::2])\n\n    return '{}\\n{}'.format(\n        odd_sum,\n        even_sum,\n    )\n\n----Test Case----\n\"\"\"\n2\n9 1 4 4 6 7\n\n1\n2\n4\n3\n6\n7\n\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline().rstrip())\n    s = stdin.readline().rstrip()\n    t = [int(i) for i in s.split()]\n\n    def jolly(arr):\n        for i in range(len(arr)):\n            if arr[i]!= i + 1:\n                return False\n        return True\n\n    print(sorted([i for i in t if jolly(t[:i]) == False and jolly(t[i:]) == False]).count(5))\n\n    return ''\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.readline().strip())\n\ncount = 0\nfor i in range(n):\n    arr = list(map(int, stdin.readline().strip().split(\" \")))\n    if arr[0] >= arr[1]:\n        count += 1\nprint(count)\n    "
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    # Write your code here\n    # Pass the input to the method \"stdin\"\n    \n    n = int(stdin.readline().strip())\n    d = [int(d) for d in stdin.readline().strip().split(' ')]\n    print(d)\n    \n    arr = [0 for i in range(n)]\n    \n    for i in range(len(d)):\n        if d[i] >= 5:\n            arr[i] += 1\n    print(arr)\n    \n    abc = 0\n    arc = 0\n    for i in range(len(d)):\n        abc += d[i] - arr[i]\n        arc += d[i] + arr[i]\n    if arc % 2 == 0 and abc % 2 == 0:\n        print(arc // 2)\n        return\n    elif abc % 2 == 0:\n        print(arc // 2 + 1)\n        return\n    elif arc % 2 == 0:\n        print(abc // 2 + 1)\n        return\n    else:\n        print(-1)\n        return\nsolution(stdin)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    d_arr = [int(line) for line in lines[1].split(' ')]\n    # iterate through each d, and d^2\n    counter = 0\n    for d in d_arr:\n        if d**2 > N:\n            break\n        counter += 1\n    # calculate the number of problems in ABCs\n    N_ABCs = N//2 - (counter-1)\n    # if all problems are to be in ARCs, then we need to reduce the number of problems\n    if N_ABCs == 0:\n        N_ABCs = 1\n    # return the number of choices\n    return str(counter - N_ABCs)\n\nimport sys"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns number of ways to divide the N problems between ARC and ABC\n\n    Args:\n        stdin (str): input string to parse\n\n    Returns:\n        str: string representation of the solution\n    \"\"\"\n    N, *d = map(int, stdin.split(\"\\n\")[0].split())\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[2] = 1\n    for i in range(4, N + 1, 2):\n        dp[i] = dp[i - 2] * 3\n    for i in range(6, N + 1, 2):\n        dp[i] = dp[i - 2] * 2 + dp[i - 4]\n    return str(dp[N] % (10 ** 9 + 7))\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution here\n    '''\n    return str(5)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split()))\n    h, n, l, r = a[0], a[1], a[2], a[3]\n    a = a[4:]\n\n    cnt = 0\n    i = 0\n    while i < n:\n        if i == 0 or i == n - 1:\n            cnt += 1\n            i += 1\n            continue\n\n        if l <= h * a[i - 1] + i < r:\n            cnt += 1\n            i += 1\n            continue\n\n        if l <= h * a[i - 1] + i + 1 < r:\n            cnt += 1\n            i += 1\n            continue\n\n        if i!= n - 1:\n            cnt += 1\n            i += 1\n            continue\n\n        cnt += 1\n        i += 1\n    return cnt\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    maxcount = 0\n    for i in range(n):\n        for j in range(i, n):\n            maxcount = max(maxcount, (j - i + 1) * (a[j] - a[i] + 1) // h)\n    return str(maxcount)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the number of good times.\n\n    Parameters\n    ----------\n    stdin : str\n\n\n    Returns\n    -------\n    str\n        String representation of the number of good times.\n\n    \"\"\"\n    n, h, l, r = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    left = l\n    right = l - 1\n    good_times = 0\n\n    while right <= r:\n        if left <= a[0]:\n            good_times += 1\n        for i in range(1, n):\n            if a[i] > a[i - 1] and a[i] > right:\n                good_times += 1\n                right = a[i] - 1\n                break\n            elif a[i] <= a[i - 1]:\n                right = a[i - 1]\n\n        if right > r:\n            break\n\n    return str(good_times)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, h, l, r = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    print(f\"{max([sum([a[i] for i in range(j, j + n) if i + 1 not in [j, j + 1]]) for j in range(0, h, n)])}\")\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_good_times(n: int, h: int, l: int, r: int) -> int:\n        hours_by_day = h - l\n        good_times_by_day = (n * hours_by_day) // hours_by_day\n\n        total_good_times = 0\n\n        for i in range(n):\n            good_times_by_day = (n * hours_by_day) // hours_by_day\n            total_good_times += good_times_by_day\n            hours_by_day += h - a[i]\n\n        return total_good_times\n\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(find_max_good_times(n, h, l, r))\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    hours, num_of_times, a = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    hours = hours - 1\n    for i in range(0, num_of_times):\n        for j in range(0, i + 1):\n            if a[j] + hours <= a[i] and j!= i:\n                ans = ans + 1\n    return str(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(i) for i in stdin.split('\\n')[0].split()]\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    total = 0\n    for i in range(n):\n        total += min(h-l, r-a[i])\n    return total\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # in\n    # days n, hours_per_day h, hours_after_sleep a1, a2,..., an\n    # out\n    # maximum_good_sleeping_times\n    pass"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split(' ')]\n    a.sort()\n    b = a[:n-1]\n    c = a[n-1:]\n    c.sort()\n    b.extend(c)\n    d = a\n    i = 0\n    j = 0\n    while i < n - 1 and j < n - 1:\n        if b[i] * 2 > d[j]:\n            j += 1\n        else:\n            i += 1\n    return str(n - j - 1)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_problems = int(stdin.readline())\n    problems = [int(x) for x in stdin.readline().split(' ')]\n    max_problems = 0\n    num_of_problems = 0\n    while num_problems > 0:\n        max_problems += 1\n        for i in range(num_problems - 1):\n            if problems[i + 1] < problems[i] * 2:\n                break\n        else:\n            num_of_problems = max_problems\n            max_problems = 0\n        num_problems -= 1\n    return str(num_of_problems)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n    # return None\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    # arr = [1, 2, 5, 6, 7, 10, 21, 23, 24, 49]\n    count = 0\n    i = 0\n    while i < n - 1:\n        count += 1\n        j = i + 1\n        while j < n and arr[j] * 2 < arr[i]:\n            j += 1\n        i = j\n    return count\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\" \")))\n    res = 0\n    count = 1\n    i = 0\n    while i < len(a) - 1:\n        if a[i] <= a[i+1] * 2:\n            count += 1\n            i += 1\n        else:\n            res = max(res, count)\n            count = 1\n            i += 1\n    return res\nprint(solution(input()))\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # write your code in Python 3.6\n    # pass\n    return ''\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return str\n    input = stdin.split('\\n')\n    l = [int(x) for x in input[1].split(' ')]\n    l = sorted(l)\n    l = [l[i] for i in range(len(l)-1) if l[i] * l[i+1] > l[i+1]]\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i]*l[j] < l[j]*l[i]:\n                l[i], l[j] = l[j], l[i]\n    return str(l[0]) +'' + str(l[1])"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    d = {}\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            k = lcm(a[i], a[j])\n            if k in d:\n                if d[k][0] < i:\n                    d[k] = (i, j)\n            else:\n                d[k] = (i, j)\n    res = []\n    for k in d:\n        res.append(d[k])\n    res.sort()\n    print(res[0][0] + 1, res[0][1] + 1)\n    return ''\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    d = {}\n    ans = 10 ** 7\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                ans = min(ans, max(a[i], a[j]) * min(a[i], a[j]) // math.gcd(a[i], a[j]))\n    print(ans)\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().strip().split()]\n    numbers = list()\n    for i in range(n):\n        for j in range(i + 1, n):\n            numbers.append([i, j])\n    min_value = min([lcm(arr[i], arr[j]) for i, j in numbers])\n    for i, j in numbers:\n        if lcm(arr[i], arr[j]) == min_value:\n            print(i, j)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for simple recursive implementation\"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n    lcm = a[0] * a[1]\n    for i in range(2, n):\n        lcm = lcm * a[i] // gcd(lcm, a[i])\n\n    for i in range(1, n):\n        if gcd(lcm, a[i]) == 1:\n            print(i, i + 1)\n            return\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(stdin) for stdin in stdin.split('\\n')[1].split()]\n    c = collections.Counter(nums)\n    m = min(c[key] for key in c if c[key] > 1)\n    for key in c:\n        if c[key] == m:\n            print(key, key)\n            return\n\n\"\"\"\nfrom collections import Counter\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\nprint(solution(input()))\n\n'''\nfrom functools import lru_cache\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().strip().split(' ')]\n    min_lcm = None\n    left = 0\n    right = 0\n    for i in range(0, len(numbers)):\n        lcm = numbers[i]\n        for j in range(i + 1, len(numbers)):\n            lcm = int(lcm * numbers[j] / gcd(lcm, numbers[j]))\n        if min_lcm == None or lcm < min_lcm:\n            left = i\n            right = j\n            min_lcm = lcm\n    return left + 1, right + 1\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    max = a[0]\n    for i in range(n):\n        if(max < a[i]):\n            max = a[i]\n    \n    return''.join(map(str, [i for i in range(n) if max % a[i] == 0]))\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    n, *a = list(map(int, stdin.split('\\n')[0].split()))\n    s = [0] * (n + 1)\n    for i in range(1, n + 1):\n        s[i] = s[i - 1] + lcm(a[i - 1], a[i - 1])\n    return s\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    len_stdin: int = len(stdin)\n    n: int = int(len_stdin / 3)\n    d: dict = {'0': 0, '1': 0, '2': 0}\n\n    for i in range(len_stdin):\n        d[stdin[i]] += 1\n\n    m = min(d['0'], d['1'])\n    d['0'] -= m\n    d['1'] -= m\n    d['2'] -= m\n    d['0'] += m\n    d['1'] += m\n\n    if d['2'] == 0:\n        return '1' * m + '2' * (n - m) + '0' * m\n    elif d['1'] == 0:\n        return '0' * m + '1' * (n - m) + '2' * m\n    elif d['0'] == 0:\n        return '2' * m + '1' * (n - m) + '0' * m\n    else:\n        return '2' * m + '1' * (n - m) + '0' * m\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('121')\n    '021'\n    >>> solution('110011')\n    '111122'\n    \"\"\"\n    total = len(stdin)\n    n = int(stdin)\n    ans = []\n    while n > 0:\n        if n % 3 == 0:\n            ans.append('0')\n        elif n % 3 == 1:\n            ans.append('1')\n        else:\n            ans.append('2')\n        n = int(n / 3)\n    ans = \"\".join(reversed(ans))\n    return ans\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return ''.join(['0'] * (n // 3) + ['1'] * (n // 3) + ['2'] * (n // 3))"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = [0] * 3\n    for c in stdin:\n        cnt[int(c)] += 1\n\n    while cnt[0] > 0 or cnt[1] > 0:\n        if cnt[0] >= cnt[1] and cnt[0] >= cnt[2]:\n            cnt[0] -= 1\n            cnt[1] += 1\n            cnt[2] += 1\n        elif cnt[0] < cnt[1] and cnt[1] >= cnt[2]:\n            cnt[2] += 1\n            cnt[0] += 1\n            cnt[1] -= 1\n        else:\n            cnt[0] += 1\n            cnt[1] -= 1\n    return \"0\"*cnt[0] + \"1\"*cnt[1] + \"2\"*cnt[2]\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = list(stdin)\n    print(''.join(['0'] * int(string[0]) + ['1'] * int(string[1]) + ['2'] * int(string[2])))"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q, r = divmod(len(s), 3)\n    s = s[:r] + '0' + '0' * q\n    print(s)\n    for i in range(len(s)):\n        if s[i] == '2':\n            s = s[:i] + '1' + s[i + 1:]\n            break\n    return s"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    \n    N = int(stdin)\n    s = stdin[:N]\n    \n    print(str(int(s.replace('2', '0').replace('1', '0').replace('0', '1'))))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    k = n // 3\n\n    if n % 3!= 0:\n        return stdin\n\n    s = sorted(s)\n    s0 = s[:k]\n    s1 = s[k:2 * k]\n    s2 = s[2 * k:]\n    # print(s0, s1, s2)\n\n    if s0 == ['0'] * k:\n        return ''.join([s[i] for i in range(k, 2 * k)]) + '2' * (n % 3)\n    elif s1 == ['1'] * k:\n        return '0' * (k - 1) + ''.join([s[i] for i in range(k, 2 * k)]) + '2' * (n % 3)\n    elif s2 == ['2'] * k:\n        return '0' * (k - 1) + ''.join([s[i] for i in range(k, 2 * k)]) + '1' * (n % 3)\n    else:\n        return stdin\n    # return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\".join(map(str, input().split()))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    steps = [int(x) for x in stdin.readline().split()]\n    steps.append(n)\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    for i in range(n + 1):\n        for j in steps:\n            if i < j:\n                break\n            ways[i] += ways[i - j]\n    return str(ways[n])"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    broken_steps = [0] * M\n    for i in range(M):\n        broken_steps[i] = int(stdin.split()[i + 2])\n    count = 0\n    for i in range(N):\n        if broken_steps[i] > i:\n            count += N - i\n    return str(count % 10000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem.\n    \n    Input Format:\n        The first line contains 2 space-separated integers: N and M.\n        The second line contains M space-separated integers.\n        The ith of them is a_i where 0 \\leq i < M.\n    Output Format:\n        Print a single integer denoting the number of ways to climb up the stairs\n        without setting foot on the broken steps modulo 1\\ 000\\ 000\\ 007.\n    \"\"\"\n    (n, m) = (map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    \n    modulo_map = {0: {1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0}}\n    \n    for i in range(n):\n        modulo_map[i + 1] = {}\n    \n    for i in range(m):\n        modulo_map[0][a[i]] = 1\n    \n    for i in range(1, n + 1):\n        for j in range(1, 7):\n            modulo_map[i][j] = sum([modulo_map[i - 1][k] for k in range(1, 7) if k % j!= 0])\n            \n    return str(modulo_map[n][6])\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    arr = []\n    for i in range(0, m):\n        arr.append(int(stdin.split(\" \")[i]))\n    arr = sorted(arr)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(0, m):\n        for j in range(arr[i], n):\n            dp[j] += dp[j - arr[i]] % 1000000007\n    return dp[n - 1] % 1000000007\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        elif n == 2:\n            return True\n        elif n % 2 == 0:\n            return False\n        else:\n            return all(n % i for i in range(3, int(n ** 0.5) + 1, 2))\n\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split('\\n')[1:]]\n\n    if is_prime(n):\n        return n\n    else:\n        ans = 1\n        for i in range(m):\n            ans *= a[i]\n        return ans % 1000000007\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return''"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    n, m = list(map(int, stdin.split()))\n    lst = list(map(int, stdin.split()))\n    a = [0] + lst[::]\n    d = [0] * (n + 1)\n    for i in range(1, n + 1):\n        d[i] = d[i - 1] + a[i]\n    d = [0] + d[::]\n    res = 0\n    for i in range(m + 1):\n        res += (d[n] - d[i])\n    res %= 10000007\n    return res"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    stairs = [0]\n    for i in range(1, N + 1):\n        stairs.append(i)\n    for i in range(M):\n        stairs[int(stdin.split(' ')[i + 1])] = -1\n\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, N + 1):\n        if stairs[i] == -1:\n            dp[i] = 0\n        else:\n            dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[-1] % 1000000007\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split(' '))\n\n    return abs(X - K * D)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = [int(input) for input in stdin.split(' ')]\n\n    # We want to minimize |x - x2|\n    # We have to move x1-x2 steps,\n    # then we move x2-x3 steps, then we move x3-x1 steps\n    # We want to pick the smallest steps\n    # So we need x1-x2 <= x2-x3 <= x3-x1\n    # This reduces to:\n    # x1 - x2 + x2 - x3 + x3 - x1 <= x2 - x3\n    # x1 - x2 <= x2 - x3\n    # x1 - x2 + x3 - x2 <= x2\n    # x1 - x2 <= x3 - x2\n    # x1 - x2 <= x2 - x2 <= x1\n    # x1 - x2 = 0\n    return X - K*D\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(i) for i in stdin.split(\" \")]\n\n    def distance_to_goal(x):\n        return abs(x - k * d)\n\n    ans = distance_to_goal(x)\n    if ans > d:\n        ans = d - ans\n    return str(ans)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution reads in the input of X, K, and D, and then generates a list of numbers\n    between -10^15 and 10^15 inclusive that could result from moving Takahashi by K moves of D\n    and then find the minimum absolute value of the coordinate of the destination.\n    \"\"\"\n    x, k, d = map(int, stdin.split())\n\n    # The two lists we will be using to help generate all possible coordinate solutions\n    # for the given input\n    x_min = [-10 ** 15]\n    x_max = [10 ** 15]\n\n    # This loop will generate a list of all possible coordinates that Takahashi could be in\n    # after taking K moves of distance D from the origin\n    for _ in range(k):\n        x_min.append(x_min[-1] - d)\n        x_max.append(x_max[-1] + d)\n\n    # We create a list of all possible coordinate solutions for the given input\n    x_solutions = []\n    for i in range(len(x_min)):\n        for j in range(len(x_max)):\n            x_solutions.append(x_min[i] + x_max[j])\n\n    # We now find the minimum absolute value of the given coordinate\n    x_solutions.sort()\n    print(x_solutions[0])\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.strip().split())\n    target = x - k * d\n    return abs(target)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Passes the input and outputs the solution to the problem\n    '''\n    # Get the X, K, and D from the input\n    x, k, d = [int(number) for number in stdin.split(\" \")]\n    # Set the initial value of i to 0\n    i = 0\n    # Set the initial value of best to abs(x)\n    best = abs(x)\n    # While the i is less than the K\n    while i < k:\n        # If x is greater than 0\n        if x > 0:\n            # Add the D to the x\n            x += d\n            # If the absolute value of x is less than the best\n            if abs(x) < best:\n                # Set the value of best to the absolute value of x\n                best = abs(x)\n            # If the x is greater than 0\n            else:\n                # Subtract the D from the x\n                x -= d\n        # If x is less than 0\n        else:\n            # Subtract the D from the x\n            x -= d\n            # If the absolute value of x is less than the best\n            if abs(x) < best:\n                # Set the value of best to the absolute value of x\n                best = abs(x)\n            # If the x is less than 0\n            else:\n                # Add the D to the x\n                x += d\n        # Increase the i by 1\n        i += 1\n    # Return the best value\n    return str(best)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = [int(n) for n in stdin.split()]\n\n    if X - D * K < 0:\n        print(abs(X - D * K))\n    else:\n        print(abs(X - D * K) - D)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes the input of stdin and finds the minimum coordinate of the final destination'''\n    # Create list for coordinates\n    list_coordinates = list()\n    # Split the input on the new line (\\n)\n    str_split = stdin.split('\\n')\n    # Remove the last item from the list because it is always ''\n    str_split.pop()\n    # For each line in str_split, split the string on the space ( )\n    for i in str_split:\n        list_coordinates.append(i.split(' '))\n    # Create a copy of list_coordinates so that the original list is not overwritten\n    list_coordinates_copy = list_coordinates.copy()\n    # Extract the numbers from the list\n    for i in range(len(list_coordinates_copy)):\n        for j in range(len(list_coordinates_copy[i])):\n            list_coordinates_copy[i][j] = int(list_coordinates_copy[i][j])\n    # Create variables for X, K, and D\n    x = list_coordinates_copy[0][0]\n    k = list_coordinates_copy[0][1]\n    d = list_coordinates_copy[0][2]\n    # Initialize the step counter\n    step_counter = 0\n    # Find the minimum coordinate\n    while k > 0:\n        if d > 0:\n            x += d\n            step_counter += 1\n            k -= 1\n        else:\n            x -= d\n            step_counter += 1\n            k -= 1\n    # Return the minimum coordinate\n    return abs(x)\nprint(solution(stdin))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    if k == 1:\n        return abs(d - x)\n    else:\n        return min(abs(d - x), abs(d - 2*x), abs(2*d - x))\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '3'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_number = stdin\n\n    counter = 0\n    while int(input_number) > 0:\n        input_number = str(input_number)\n        counter += 1\n        if counter > 10:\n            return counter\n        input_number = int(input_number[1:])\n    return counter\n\nprint(solution(\"61441\"))\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 1"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    m = 0\n    while n > 0:\n        m += n % 10\n        n //= 10\n    return m\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 10000)\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    a = 0\n    b = 0\n    c = 0\n    x = 0\n    while stdin!= \"0 0 0\":\n        a = int(stdin.split()[0])\n        b = int(stdin.split()[1])\n        c = int(stdin.split()[2])\n        if a > b and b > c:\n            if a % b == 0 or b % a == 0:\n                if a % c == 0 or c % a == 0:\n                    if c % b == 0 or b % c == 0:\n                        if c % a == 0 or a % c == 0:\n                            x += 1\n                        else:\n                            pass\n                    else:\n                        pass\n                else:\n                    pass\n            else:\n                pass\n        else:\n            pass\n        stdin = input()\n    if x == 0:\n        return \"0\"\n    elif x == 1:\n        return \"1\"\n    elif x == 2:\n        return \"2\"\n    else:\n        return \"many\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def num_of_digits(stdin):\n        num = stdin\n        count = 0\n        while num > 0:\n            num = num // 10\n            count += 1\n        return count\n    \n    def reverse(num):\n        rev = 0\n        while num > 0:\n            rev = (rev * 10) + (num % 10)\n            num = num // 10\n        return rev\n    \n    def digits_to_list(stdin):\n        num_list = []\n        num = stdin\n        while num > 0:\n            digit = num % 10\n            num_list.append(digit)\n            num = num // 10\n        return num_list\n    \n    def is_palindrome(num_list):\n        rev = reversed(num_list)\n        if list(num_list) == list(rev):\n            return True\n        return False\n    \n    def check_if_palindrome(stdin):\n        num_list = digits_to_list(stdin)\n        if is_palindrome(num_list):\n            return num_of_digits(stdin)\n    \n    return check_if_palindrome(stdin)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)\n    "
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return \"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return a ** 3\n    return a + 3 * (a ** 2)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 2550)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(a**3)\n'''\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'number of divisors:'+ str(divisors(int(stdin)))\n    \n    \n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 * int(stdin) - 1)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(input())\n    max_num = 0\n    for a in range(1, x + 1):\n        for b in range(a, x + 1):\n            num = a ** 2 + b ** 2\n            if max_num < num < (x ** 2 + 1):\n                max_num = num\n    print(max_num)\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 0\n    while a > 999:\n        a = a % 1000\n        n += 1\n    return '0' if n % 2 else '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    divisor = set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31])\n    if num == 1:\n        return 0\n    for d in divisor:\n        if num % d == 0:\n            return 0\n    return 1\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    if stdin % 4 == 0 or stdin % 400 == 0 or stdin % 4 == 0 and stdin % 100!= 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        '10' : '0',\n        '11' : '1',\n        '12' : '0',\n        '13' : '0',\n        '14' : '1',\n        '15' : '0',\n        '16' : '1',\n        '17' : '0',\n        '18' : '0',\n        '19' : '1',\n        '20' : '0',\n        '21' : '0',\n        '22' : '1',\n        '23' : '0',\n        '24' : '0',\n        '25' : '0',\n        '26' : '1',\n        '27' : '0',\n        '28' : '1',\n        '29' : '0',\n        '30' : '1',\n        '31' : '0',\n        '32' : '0',\n        '33' : '1',\n        '34' : '0',\n        '35' : '0',\n        '36' : '1',\n        '37' : '0',\n        '38' : '0',\n        '39' : '1',\n        '40' : '0',\n        '41' : '0',\n        '42' : '1',\n        '43' : '0',\n        '44' : '0',\n        '45' : '0',\n        '46' : '1',\n        '47' : '0',\n        '48' : '1',\n        '49' : '0',\n        '50' : '1',\n        '51' : '0',\n        '52' : '0',\n        '53' : '1',\n        '54' : '0',\n        '55' : '0',\n        '56' : '1',\n        '57' : '0',\n        '58' : '1',\n        '59' : '0',\n        '60' : '1',\n        '61' : '0',\n        '62' : '0',\n        '63' : '1',\n        '64' : '0',\n        '65' : '0',\n        '66' : '1',\n        '67' : '0',\n        '68' : '0',\n        '69' : '1',\n        '70' : '0',\n        '71' : '0',\n        '72' : '1',\n        '73' : '0',\n        '74' : '0',\n        '75' : '0',\n        '76' : '1',\n        '77' : '0',\n        '78' : '1',\n        '79' : '0',\n        '80' : '1',\n        '81' : '0',\n        '82' : '0',\n        '83' : '1',\n        '84' : '0',\n        '85' : '0',\n        '86' : '1',\n        '87' : '0',\n        '88' : '1',\n        '89' : '0',\n        '90' : '1',\n        '91' : '0',\n        '92' : '0',\n        '93' : '1',\n        '94' : '0',\n        '95' : '0',\n        '96' : '1',\n        '97' : '0',\n        '98' : '1',\n        '99' : '0',\n        '100' : '1',\n        '101' : '0',\n        '102' : '0',\n        '103' : '1',\n        '104' : '0',\n        '105' : '0',\n        '106' : '1',\n        '107' : '0',\n        '108' : '1',\n        '109' : '0',\n        '110' : '1',\n        '111' : '0',\n        '112' : '0',\n        '113' : '1',\n        '114' : '0',\n        '115' : '0',\n        '116' : '1',\n        '117' : '0',\n        '118' : '1',\n        '119' : '0',\n        '120' : '1',\n        '121' : '0',\n        '122' : '0',\n        '123' : '1',\n        '124' : '0',\n        '125' : '0',\n        '126' : '1',\n        '127' : '0',\n        '128' : '1',\n        '129' : '0',\n        '130' : '1',\n        '131' : '0',\n        '132' : '0',\n        '133' : '1',\n        '134' : '0',\n        '135' : '0',\n        '136' : '1',\n        '137' : '0',\n        '138' : '1',\n        '139' : '0',\n        '140' : '1',\n        '141' : '0',\n        '142' : '0',\n        '143' : '1',\n        '144' : '0',\n        '145' : '0',\n        '146' : '1',\n        '147' : '0',\n        '148' : '1',\n        '149' : '0',\n        '150' : '1',\n        '151' : '0',\n        '152' : '0',\n        '153' : '1',\n        '154' : '0',\n        '155' : '0',\n        '156' : '1',\n        '157' : '0',\n        '158' : '1',\n        '159' : '0',\n        '160' : '1',\n        '161' : '0',\n        '162' : '0',\n        '163' : '1',\n        '164' : '0',\n        '165' : '0',\n        '166' : '1',\n        '167' : '0',\n        '168' : '1',\n        '169' : '0',\n        '170' : '1',\n        '171' : '0',\n        '172' : '0',\n        '173' : '1',\n        '174' : '0',\n        '175' : '0',\n        '176' : '1',\n        '177' : '0',\n        '178' : '1',\n        '179' : '0',\n        '180' : '1',\n        '181' : '0',\n        '182' : '0',\n        '183' : '1',\n        '184' : '0',\n        '185' : '0',\n        '186' : '1',\n        '187' : '0',\n        '188' : '1',\n        '189' : '0',\n        '190' : '1',\n        '191' : '0',\n        '192' : '0',\n        '193' : '1',\n        '194' : '0',\n        '195' : '0',\n        '196' : '1',\n        '197' : '0',\n        '198' : '1',\n        '199' : '0',\n        '200' : '1',\n        '201' : '0',\n        '202' : '0',\n        '203' : '1',\n        '204' : '0',\n        '205' : '0',\n        '206' : '1',\n        '207' : '0',\n        '208' : '1',\n        '209' : '0',\n        '210' : '1',\n        '211' : '0',\n        '212' : '0',\n        '213' : '1',\n        '214' : '0',\n        '215' : '0',\n        '216' : '1',\n        '217' : '0',\n        '218' : '1',\n        '219' : '0',\n        '220' : '1',\n        '221' : '0',\n        '222' : '0',\n        '223' : '1',\n        '224' : '0',\n        '225' : '0',\n        '226' : '1',\n        '227' : '0',\n        '228"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '1' if n % 2 else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '0' if '0' in stdin else '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # \u0412 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e n \u0431\u0443\u0434\u0435\u043c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443. \u0422\u0430\u043a \u043a\u0430\u043a \u0432 \u043d\u0435\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c\n    # \u0434\u043e 20 \u0446\u0438\u0444\u0440, \u043d\u0443\u0436\u043d\u043e \u0438\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 20, \u0430 \u043f\u043e\u0442\u043e\u043c\n    # \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0435 \u0446\u0438\u0444\u0440\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438.\n    # \u041d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u043e\u0434\u0441\u0447\u0435\u0442, \u0438 \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b,\n    # \u043e\u0441\u0442\u0430\u0432\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0446\u0438\u0444\u0440\u0435.\n    n = stdin[0]\n    ans = [20] * n\n    for i in range(n):\n        a = stdin[2*i + 1]\n        ans[i] = int(a)\n    ans[n - 1] = len(stdin) % 10\n    ans = str(int(''.join(map(str, ans))))\n    return ans\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    i = 0\n    s = 0\n    while i < n:\n        s += a[i]\n        i += 1\n    return s"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split(' ')))\n    a = 0\n    b = 0\n    for i in range(n):\n        a += nums[i] ** 2\n        b += nums[i]\n    print(a - b ** 2)\nsolution()"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n\nassert solution('2 5 3 1') == 4\n\"\"\"\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin.split(' ')) == 4 and int(stdin) >= 0 else 'NO'\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    numbers = []\n    for i in range(n):\n        numbers.append(i)\n    for j in range(n):\n        numbers.append(arr[j])\n    for i in range(n):\n        numbers.append(i)\n    print(numbers)\n    return 0\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    a = [int(stdin) for stdin in stdin.split(\" \")]\n    print(n)\n    print(a)\n    return n\n\n\nsolution()\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return out\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        if n == k:\n            print(1)\n        else:\n            print(k if n % k == 0 else k - n % k + 1)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of packages Polycarp has to buy to get exactly n shovels.\"\"\"\n    cases = int(stdin)\n    for _ in range(cases):\n        n, k = list(map(int, stdin.split()))\n        min_packages = 0\n        while n > 0:\n            if n >= k:\n                min_packages += n // k\n                n -= (n // k) * k\n            else:\n                min_packages += 1\n                n -= 1\n        print(min_packages)\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def answer(shovels, size):\n        sizes = [size] * size\n        return min(sizes, key=lambda s: abs(s - shovels))\n\n    for _ in range(int(stdin.readline())):\n        shovels, size = map(int, stdin.readline().split())\n        print(answer(shovels, size))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    2\n    >>> solution('''8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    8\n    >>> solution('''999999733 999999732\n   ... 9999999733 999999733''')\n    1\n    \"\"\"\n    t, = [int(x) for x in stdin.split('\\n')[0].split()]\n    for i in range(t):\n        n, k = [int(x) for x in stdin.split('\\n')[i+1].split()]\n        return n - (k * (n // k))\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 7\\n8 1\\n6 10\\n999999733 999999732\")\n    '2'\n    >>> solution(\"8 7\\n8 1\\n6 10\\n999999733 999999733\")\n    '1'\n    >>> solution(\"8 7\\n8 1\\n6 10\\n999999733 999999733\\n999999733 999999733\")\n    '999999733'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    # 1 <= N, M <= 10\n    # 1 <= k_i <= N\n    # s_{ij} \\in [1, N]\n    # p_i \\in [0, 1]\n    # all values in input are integers\n    lines = stdin.split(\"\\n\")\n\n    N, M = map(int, lines[0].split())\n    # 1 <= M <= 10\n\n    # 2 <= k_i <= N\n    bulbs = []\n    for i in range(1, M + 1):\n        bulbs.append(int(lines[i]))\n        # 1 <= Bulb_i <= 10\n    # Bulb_i = int(line[i])\n    # 1 <= p_i <= 10\n\n    # 0 <= Switch_i <= 10\n    # Switch_i = int(line[i])\n    # 0 <= p_i <= 1\n\n    # 0 <= Switch_i <= N\n    switches = []\n    for i in range(M + 1, N + 1):\n        switches.append(int(lines[i]))\n        # 1 <= Switch_i <= 10\n    # Switch_i = int(line[i])\n    # 0 <= p_i <= 1\n\n    print(bulbs)\n    print(switches)\n\n    return \"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(num) for num in stdin.strip().split(\" \")]\n    print(N, M)\n\n    return 0\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *a, p = [int(x) for x in stdin.split()]\n    mapp = [[int(x) for x in y.split()] for y in stdin.split(':')[1].split('\\n')[:-1]]\n    res = [0] * (n+1)\n    for i in range(len(mapp)):\n        k, *s = mapp[i]\n        res[k] = int(p == '1')\n        for j in s:\n            res[j] ^= 1\n    print(res)\n    return str(res.count(1))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \" \".join(list(stdin.split('\\n')[0].split()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, *input_ = stdin.split('\\n')\n    N, M = map(int, input_[0].split(' '))\n    input_ = list(map(int, input_[1].split(' ')))\n    bulb = dict(zip(range(1, M + 1), input_))\n    print(bulb)\n    for i in range(1, N + 1):\n        state = 0\n        for j in range(M):\n            if (state + bulb[j]) % 2:\n                state += 1\n        if state % 2:\n            print(0)\n            break\n    print(state)\nsolution(stdin)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    BULBS = []\n    switches = []\n    for i in range(N):\n        BULBS.append(list(map(int, stdin.split())))\n    print(BULBS)\n    P = list(map(int, stdin.split()))\n    print(P)\n    ans = 0\n    for k in range(M):\n        for i in range(N):\n            if P[i] == 1:\n                for j in range(M):\n                    if switches[j] % 2 == BULBS[i][j] % 2:\n                        ans += 1\n    return str(ans)"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    count = 0\n    for _ in range(m):\n        bulb, switches = map(int, stdin.readline().split())\n        count += ((sum(map(int, stdin.readline().split())) % 2) * bulb)\n    return str(count)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input as string list\n    input_list = stdin.split('\\n')\n    # split the list to get the length of each list item\n    input_split = [item.split() for item in input_list]\n    # get the number of rows and columns\n    num_rows = int(input_split[0][0])\n    num_cols = int(input_split[0][1])\n    # get the list of lights and switches\n    lights = input_split[1:num_rows+1]\n    switches = input_split[num_rows+1:]\n    # check the number of items in the list\n    assert num_rows + num_cols == len(input_split) - 1\n    # convert the list to a dictionary\n    light_dict = {}\n    for light in lights:\n        assert len(light) == num_rows\n        light_dict[light[0]] = light[1:]\n    # convert the switches list to a dictionary\n    switch_dict = {}\n    for switch in switches:\n        assert len(switch) == num_cols\n        switch_dict[switch[0]] = switch[1:]\n    # check that the items of the light dict are all 0 or 1\n    assert all([item in [0,1] for item in light_dict.values()])\n    # check that the items of the switch dict are all 0 to N-1\n    assert all([item in range(num_rows) for item in switch_dict.values()])\n    # check that the items of the switch dict are not the same\n    assert not all([item == j for item in switch_dict.values() for j in switch_dict.values() if j!= item])\n    # check that the number of lights and switches are the same\n    assert num_rows == len(light_dict) and num_cols == len(switch_dict)\n    # check that the number of on in the switch dict is the same as the number of items in the light dict with an odd number of on items\n    assert num_rows == sum([1 for item in light_dict.values() if item.count('on') % 2 == 1])\n    # print the number of combinations\n    print(sum([1 for item in light_dict.values() if item.count('on') % 2 == 1]))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, h, m) = tuple(map(int, stdin.split()))\n    return str(round((b - a) * 0.12 + (m - h) * 6))"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    hour = (h * 12 + m / 60) * 360\n    minute = (m * 360) / 60\n    angle = abs(hour - minute)\n    return \"{:.9f}\".format(a + b * sin(angle))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    H_angle = 360 * H / 12\n    M_angle = 360 * M / 60\n\n    return f\"{((A * (H_angle + M_angle)) - (B * (H_angle + M_angle))):.9f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    return f'{abs(a*h + b*m):.9f}'"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(x) for x in stdin.split()]\n    return str(abs(a*h + b*m - a*b))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(n) for n in stdin.split()]\n    t = 3600 * H + 60 * M\n    l = (A + B) / 2 * 0.01\n    return str(abs(l - t) * 2)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import numpy as np\n    A, B, H, M = map(int, re.findall('\\d+', stdin))\n    r = np.sqrt(H**2 + M**2) / 12\n    x, y = np.arctan(M / H) / np.pi * 180, 90 - np.arctan(H / M) / np.pi * 180\n    return f'{r * np.cos(x):.9f} {r * np.sin(x):.9f}'\n    # return f'{r * np.cos(x)},{r * np.sin(x)}\\n'\n    # return f'{np.arctan(M / H) / np.pi * 180},{90 - np.arctan(H / M) / np.pi * 180}'\n    # return f'{np.arctan2(M, H) / np.pi * 180},{np.arctan2(H, M) / np.pi * 180}'\n    # return f'{np.arctan2(M, H)},{np.arctan2(H, M)}'\n    # return f'{np.arctan2(M, H)} {np.arctan2(H, M)}'\n    # return f'{np.arctan(M / H)},{np.arctan(H / M)}'\n    # return f'{np.arctan(M)},{np.arctan(H)}'\n    # return f'{np.arctan2(M, H)},{np.arctan2(H, M)}'\n    # return f'{np.arctan(M)},{np.arctan(H)}'\n    # return f'{np.arctan2(M, H)},{np.arctan2(H, M)}'\n    # return f'{np.arctan2(M, H)}\\n{np.arctan2(H, M)}'\n    # return f'{np.arctan(M)},{np.arctan(H)}'\n    # return f'{np.arctan2(M, H)},{np.arctan2(H, M)}'\n    # return f'{np.arctan(M)},{np.arctan(H)}'\n    # return f'{np.arctan(M)},{np.arctan(H)}'\n    # return f'{np.arctan2(M, H)},{np.arctan2(H, M)}'\n    # return f'{np.arctan2(M, H)}\\n{np.arctan2(H, M)}'\n    # return f'{np.arctan2(M, H)},{np.arctan2(H, M)}'\n    # return f'{np.arctan2(M, H)}\\n{np.arctan2(H, M)}'\n    # return f'{np.arctan(M)},{np.arctan(H)}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    return str(int(abs(a*h*360/(12*60)) + abs(b*m*360/(60*12))))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    import math\n    (a,b,h,m) = list(map(int, stdin.split(\" \")))\n    #the following is redundant as the input is checked for valid values.\n    #if not(1 <= a <= 1000 and 1 <= b <= 1000 and 0 <= h <= 11 and 0 <= m <= 59):\n        #raise ValueError\n    \n    x = a*math.sin(m*math.pi/60)\n    y = b*math.cos(m*math.pi/60)\n    \n    #the following is redundant as the input is checked for valid values.\n    #if not(0 <= x <= 1000 and 0 <= y <= 1000):\n        #raise ValueError\n    \n    print(round(math.sqrt(x**2 + y**2), 9))\n    \n    return ''\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  A, B, H, M = [int(num) for num in stdin.split()]\n  if A < B:\n    A, B = B, A\n  if H == 12 and M == 0:\n    M = 60\n  t1 = (M + (60 * (H - 12))) * 360 * 2 * math.pi / 60\n  t2 = (M + M) * 360 * 2 * math.pi / 60\n  x1 = A * math.cos(t1)\n  y1 = A * math.sin(t1)\n  x2 = B * math.cos(t2)\n  y2 = B * math.sin(t2)\n  if x1 == x2 and y1 == y2:\n    return '0.0'\n  distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n  return str(distance)\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'HackerRank'\n\"\"\"\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def median(seq: List[int]):\n        if len(seq) % 2 == 0:\n            return (seq[len(seq) // 2] + seq[len(seq) // 2 - 1]) / 2\n        else:\n            return seq[len(seq) // 2]\n\n    seq = list(map(int, stdin.split('\\n')[1].split()))\n    median_count = 0\n    for i in range(len(seq)):\n        for j in range(i + 1, len(seq)):\n            if median(seq[i: j + 1]) == int(stdin.split('\\n')[0].split()[1]):\n                median_count += 1\n    return median_count\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = [0] * n\n    p = [0] * n\n    for i in range(n):\n        p[a[i] - 1] = i\n\n    def r(l, r):\n        if r - l <= 1:\n            return m\n        m = (r + l) // 2\n        x = m - l + 1\n        c[m] = c[m - 1] + x * x\n        return r - l + 1 - max(\n            r - m - 1,\n            c[m] - c[m - 1] - x * x,\n            c[m + 1] - c[m] - x * x,\n            x - c[m - 1] - r + m,\n            x - c[m + 1] - m + 1 + l,\n        )\n\n    return r(0, n - 1)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('7 8\\n6 7 2 5 1 3 4 2')\n    9\n    \"\"\"\n    a = [int(s) for s in stdin.splitlines()[0].split()]\n    n = len(a)\n    s = sorted(a)\n    m = (n - 1) // 2\n\n    return sum(\n        s[l] == s[r] and m == (s[l] + s[r]) // 2 and l + 1 <= m <= r\n        for l in range(m)\n        for r in range(m + 1, n)\n    )\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    left = 0\n    right = n-1\n    while left <= right:\n        if a[left] + a[right] == m:\n            return '{} {}'.format(left+1, right+1)\n        elif a[left] + a[right] > m:\n            right -= 1\n        else:\n            left += 1\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    n, m = list(map(int, stdin.split(' ')))\n    seq = list(map(int, stdin.split(' ')))\n    seq.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if seq[i] + seq[j] == m:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input\n    :return: output\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    num = 0\n    for i in range(n - 1):\n        num += a[i] == m\n\n    print(num)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = [int(c) for c in stdin.split(' ')]\n    answer = 0\n    return str(answer)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split(' '))\n        segments.append([l - 1, r - 1])\n\n    segments = sorted(segments, key=lambda segment: segment[0])\n    segments = [segment for segment in segments if segment[0] >= 0]\n\n    a.sort()\n    l = [0] * n\n    for segment in segments:\n        left = segment[0]\n        right = segment[1]\n        for i in range(left, right + 1):\n            l[i] += 1\n\n    ans = 0\n    for i in range(n):\n        ans = max(ans, a[i] - l[i])\n    return ans\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n    m = int(stdin.strip().split(' ')[1])\n    d = [int(x) for x in stdin.strip().split(' ')]\n    s = set()\n    for i in range(m):\n        s.add(tuple(map(int, stdin.strip().split(' '))))\n    res = 0\n    while len(s) > 0:\n        t = s.pop()\n        res += max(a[t[0]-1:t[1]]) - min(a[t[0]-1:t[1]])\n        s.add(tuple(sorted(s.difference({t}))))\n    return str(res)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    arr = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    a = []\n    b = []\n    for i in range(m):\n        a.append([int(i) for i in stdin.split('\\n')[i + 2].split(' ')])\n    for j in range(len(a)):\n        minn = max(a[j])\n        maxx = min(a[j])\n        for i in range(len(a[j])):\n            if a[j][i] < minn:\n                minn = a[j][i]\n            if a[j][i] > maxx:\n                maxx = a[j][i]\n        b.append(maxx - minn)\n    return b\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    segments = []\n    for _ in range(m):\n        segments.append(map(int, stdin.split()))\n    p = [0] * n\n    q = 0\n    result = 0\n    for i in range(m):\n        l, r = segments[i]\n        p[l-1] += 1\n        p[r-1] -= 1\n        if p[r-1] - p[l-1] > result:\n            result = p[r-1] - p[l-1]\n            q = i\n    segment = segments[q]\n    for i in range(segment[0], segment[1]):\n        a[i] -= 1\n    for i in range(segment[0], segment[1]):\n        a[i] += 1\n    result = max(a) - min(a)\n    print(result)\n    print(q+1)\n    print(*segment)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible difference between the minimum and the maximum element in the array and the number of segments you apply.\n\n    Args:\n        stdin (str): Input\n\n    Returns:\n        str: Output\n    \"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    #Your code here\n    #It's main function. Don't remove this function\n    #It's used for auto-testing and must return a result for the correct answer\n    #replace pass by your implementation\n    #To cancel the automatic testing, remove pass and put the line return None. Return None if the test doesn't pass\n    \n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        b.append(a[l-1:r])\n    print(b)\n    \n    def count(i, j):\n        ans = 1\n        while i <= j:\n            ans += a[i]\n            i += 1\n        return ans\n    \n    def count2(i, j):\n        ans = 0\n        while i <= j:\n            ans += a[i]\n            i += 1\n        return ans\n    \n    def count3(i, j):\n        ans = a[i]\n        while i <= j:\n            ans = min(ans, a[i])\n            i += 1\n        return ans\n    \n    def count4(i, j):\n        ans = 0\n        while i <= j:\n            ans = max(ans, a[i])\n            i += 1\n        return ans\n    \n    def count5(i, j):\n        ans = 0\n        while i <= j:\n            ans = max(ans, a[i])\n            i += 1\n        return ans\n    \n    def count6(i, j):\n        ans = 0\n        while i <= j:\n            ans = min(ans, a[i])\n            i += 1\n        return ans\n    \n    ans = 0\n    for i in range(m):\n        j = len(b[i])\n        c = count(i+1, j) - count(i+1, j-1)\n        d = count2(i+1, j) - count2(i+1, j-1)\n        e = count3(i+1, j) - count3(i+1, j-1)\n        f = count4(i+1, j) - count4(i+1, j-1)\n        g = count5(i+1, j) - count5(i+1, j-1)\n        h = count6(i+1, j) - count6(i+1, j-1)\n        ans = max(ans, c, d, e, f, g, h)\n    return ans\n    "
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds number of diverse strings\n\n    Parameters\n    ----------\n    stdin : str\n        input of string\n\n    Returns\n    -------\n    str\n        a string, either \"Yes\" or \"No\"\n    \"\"\"\n    n = int(stdin)\n    for _ in range(n):\n        string = stdin.readline()\n        alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        for letter in alphabet:\n            if letter in string:\n                diverse = True\n                string_list = list(string)\n                for i in range(len(string_list)):\n                    if i!= len(string_list) - 1:\n                        if string_list[i] == string_list[i+1]:\n                            diverse = False\n                            break\n                if diverse:\n                    print(\"Yes\")\n                    break\n                else:\n                    print(\"No\")\n                    break\n            else:\n                print(\"No\")\n                break\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    diverse_strings = []\n    for line in stdin:\n        if len(line)!= len(set(line)):\n            diverse_strings.append(line)\n    return 'Yes' if len(diverse_strings) == 0 else 'No'"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '\\n'.join(lines)\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    latin_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    latin_alphabet_set = set(latin_alphabet)\n    n = int(stdin)\n    strings = []\n    for i in range(n):\n        strings.append(stdin[i])\n    \n    for string in strings:\n        if len(string) == 1:\n            print(\"Yes\")\n        else:\n            string_set = set(string)\n            if len(string_set.intersection(latin_alphabet_set))!= len(string_set):\n                print(\"No\")\n            else:\n                letters = list(string)\n                if len(letters) > 1:\n                    for i in range(1, len(letters)):\n                        if ord(letters[i]) == ord(letters[i-1]) + 1:\n                            continue\n                        else:\n                            print(\"No\")\n                            break\n                else:\n                    print(\"No\")\n                \n                \nsolution('5\\n')\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    strings = [stdin[i] for i in range(1, len(stdin))]\n\n    if n > 100 or n < 1:\n        return \"Wrong input!\"\n    \n    diverse_strings = set()\n    for string in strings:\n        if len(string) > 100 or len(string) < 1:\n            return \"Wrong input!\"\n        if len(set(string))!= len(string):\n            return \"Wrong input!\"\n        \n        string_as_list = list(string)\n        is_diverse = True\n        for i in range(1, len(string_as_list)):\n            if string_as_list[i-1] == string_as_list[i]:\n                is_diverse = False\n                break\n        if is_diverse:\n            diverse_strings.add(string)\n    \n    return '\\n'.join(diverse_strings)"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    # your solution goes here\n    pass"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8\\nfced\\nyyz\\nr\\ndabcef\\naz\\n\\n\\n\\n\\n\\n\\naa\\nbad\\nbabc\\n')\n    Yes\n    Yes\n    Yes\n    Yes\n    No\n    No\n    No\n    No\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_strings = int(stdin.readline())\n    strings = [stdin.readline().rstrip() for i in range(num_strings)]\n    diverse_strings = [True for i in range(num_strings)]\n    for i in range(num_strings):\n        for j in range(len(strings[i])):\n            if i!= 0:\n                if strings[i][j] == strings[i - 1][j]:\n                    diverse_strings[i] = False\n                    break\n            if j!= 0:\n                if strings[i][j] == strings[i][j - 1]:\n                    diverse_strings[i] = False\n                    break\n    for i in range(num_strings):\n        if diverse_strings[i]:\n            print('Yes')\n        else:\n            print('No')\n\nsolution(stdin)\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nfced\\nyez\\nr\\ndabcef\\naz\\n1\\n2\\n3\\n\")\n    'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    b = [[int(x) for x in stdin.split(' ')] for _ in range(m)]\n    result = 0\n    return str(result)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[:2])\n    a = [int(x) for x in stdin.split('\\n')[2:2+a]]\n    b = [tuple(map(int, x.split(' '))) for x in stdin.split('\\n')[2+a:2+a+b]]\n    return \n    \n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    possible = []\n    min_ans = 10000\n    max_ans = 0\n\n    for i in range(m):\n        a, b = map(int, stdin.split(' '))\n        possible.append([a, b])\n\n    for i in possible:\n        ans = 0\n        for j in range(i[0] - 1, i[1]):\n            ans += arr[j]\n        max_ans = max(ans, max_ans)\n        min_ans = min(ans, min_ans)\n    return str(max_ans - min_ans)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    array = [int(x) for x in stdin.strip().split(' ')[1:]]\n    segments = []\n    for _ in range(m):\n        segments.append([int(x) for x in stdin.strip().split(' ')[1:]])\n\n    array.sort()\n    segments.sort()\n    \n    dp = [0] * (n + 1)\n    dp[0] = array[0]\n\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + array[i - 1]\n        for j in range(m):\n            if segments[j][0] > i or segments[j][1] > i:\n                continue\n            dp[i] = max(dp[i], dp[segments[j][0] - 1] + dp[segments[j][1] - 1] - dp[segments[j][0] - 1] - dp[segments[j][1] - 1])\n    \n    return dp[n]\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [[int(x) for x in stdin.split()] for _ in range(m)]\n\n    b = sorted(b, key=lambda x: x[0])\n\n    ans = 0\n    q = 0\n    for l, r in b:\n        s = a[l - 1: r]\n        ans += max(s) - min(s)\n        q += 1\n\n    print(ans)\n    print(q)\n    print(*[l - 1 for l, r in b])\n\nsolution(stdin)\n\n\n\n\n-----\n\n\n\n-----\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, stdin.readline().split())))\n    result = 0\n    for segment in segments:\n        arr = arr[:segment[0] - 1] + [arr[segment[0] - 1] - 1] + arr[segment[0]:]\n        if result < max(arr) - min(arr):\n            result = max(arr) - min(arr)\n    print(result)\n    print(segments[result.index(max(result))])\n    return ''"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible difference\"\"\"\n    pass\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [1 for i in range(n)]\n    k = 1\n    s = ['L']\n    while k < n:\n        if a[k] >= a[k - 1]:\n            s.append('R')\n            b[k - 1] += 1\n            b[k] = 1\n        else:\n            s.append('L')\n            k += 1\n        k += b[k - 1]\n    s.append('L')\n    return ''.join(s)\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin) for stdin in stdin.split(' ')]\n    i = 0\n    while len(a) > 1:\n        if a[i] > a[i + 1]:\n            a.remove(a[i])\n        elif a[i] < a[i + 1]:\n            a.remove(a[i + 1])\n        else:\n            i += 1\n    return str(len(a)) + '\\n' + 'L' * len(a)\n    \n    \ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    if n == 1:\n        return str(1)\n    ind = 0\n    while ind < n - 1 and nums[ind] <= nums[ind + 1]:\n        ind += 1\n    if ind == n - 1:\n        return str(1)\n    ind += 1\n    for i in range(ind + 1, n):\n        if nums[i - 1] < nums[i]:\n            break\n    ind += 1\n    return str(ind)\n\nprint(solution(\"5\\n1 2 5 3 4\"))\nprint(solution(\"2\\n1 2\"))\nprint(solution(\"7\\n6 5 4 3 2 4 3\"))\n\"\"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    n = int(inp[0])\n    a = [int(i) for i in inp[1].split(' ')]\n    slide_window_max = [0] * n\n    for i in range(n):\n        if i == 0:\n            slide_window_max[i] = 1\n        else:\n            for j in range(i):\n                if a[i] > a[j] and slide_window_max[i] < slide_window_max[j] + 1:\n                    slide_window_max[i] = slide_window_max[j] + 1\n    return max(slide_window_max)"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a):\n        start, end = 0, 1\n        while end < len(a):\n            if a[end] > a[end - 1]:\n                end += 1\n            else:\n                return max(solve(a[start: end]), solve(a[start + 1: end]), solve(a[start + 1: end - 1])) + (end - start)\n        return end - start\n\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return solve(a)\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_subarrays(a: List[int]) -> List[int]:\n        def find_max_length(start: int) -> int:\n            if start >= len(a):\n                return 0\n            left_max_length = 0\n            right_max_length = 0\n            left_max = a[start]\n            for i in range(start + 1, len(a)):\n                if left_max < a[i]:\n                    left_max_length += 1\n                    left_max = a[i]\n                else:\n                    break\n            right_max = a[start]\n            for i in range(start):\n                if right_max < a[i]:\n                    right_max_length += 1\n                    right_max = a[i]\n                else:\n                    break\n            return left_max_length + right_max_length + 1\n\n        def find_max_length_rec(start: int) -> int:\n            if start >= len(a):\n                return 0\n            if start == len(a) - 1:\n                return 1\n            if dp[start]!= -1:\n                return dp[start]\n            left_max_length = 0\n            right_max_length = 0\n            left_max = a[start]\n            for i in range(start + 1, len(a)):\n                if left_max < a[i]:\n                    left_max_length += 1\n                    left_max = a[i]\n                else:\n                    break\n            right_max = a[start]\n            for i in range(start):\n                if right_max < a[i]:\n                    right_max_length += 1\n                    right_max = a[i]\n                else:\n                    break\n            dp[start] = left_max_length + right_max_length + 1\n            return dp[start] + find_max_length_rec(start + left_max_length + 1)\n\n        max_length = 0\n        for i in range(len(a)):\n            length = find_max_length_rec(i)\n            if length > max_length:\n                max_length = length\n        return max_length\n\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    dp = [-1 for _ in range(n)]\n    return find_max_length(0)\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum length of the increasing subarray with at most 1 deletion.\n\n    Args:\n        stdin: String of space-separated integers\n\n    Returns:\n        Str: The maximum length of the increasing subarray.\n    \"\"\"\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    \n    dp = [1 for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(0, i):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_input(stdin)\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A solution to the problem.\n    '''\n   ...\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the Koko Eating Bananas problem.\n\n    >>> solution('''5 3\n   ... 1 2 2 4 5\n   ... ''')\n    '1'\n    >>> solution('''5 3\n   ... 1 2 2 4 5\n   ... ''')\n    '2'\n    \"\"\"\n    # data = stdin.splitlines()\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.splitlines()[1].split()))\n    a_ = a[:]\n    a_max = max(a)\n    a_min = min(a)\n    a_sum = sum(a)\n    a_min_min = a_min // 2\n    a_sum_ = a_sum\n    a_count = len(a)\n    if k == 1:\n        print(0)\n    else:\n        count = 0\n        while a_sum_ < k:\n            a_min = min(a_)\n            a_min = a_min // 2\n            a_ = list(map(lambda x: x // 2, a_))\n            a_sum_ = sum(a_)\n            a_sum_ = a_sum_ + a_min\n            a_count = a_count + 1\n        print(a_count)\n    return \"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.readline().split()\n    n, k = int(line1[0]), int(line1[1])\n    line2 = stdin.readline().split()\n    line2 = [int(x) for x in line2]\n    min_ops = k - 1\n    for num in line2:\n        num = num // 2\n        if num >= k:\n            return min_ops\n        min_ops -= num\n    return min_ops\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # first line = 4 n, next line = k\n    # need to get a min count of operations\n\n    # need to count how many 1s\n    # need to count how many 2s\n    # need to count how many 3s\n    # need to count how many 4s\n    # need to count how many 5s\n\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n\n    a = [int(x) for x in stdin.split(\" \")]\n\n    answer = 0\n    for i in a:\n        answer += i // 2\n\n    return answer\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    O(n) solution.\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    b = sorted(a)\n    c = []\n\n    for i in range(len(a)):\n        if b[i] == k:\n            c.append(i)\n\n    d = []\n    for i in range(len(a)):\n        if a[i] == k:\n            d.append(i)\n\n    for i in c:\n        for j in d:\n            if j >= i:\n                d.remove(j)\n                break\n\n    return len(d)\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    a = [i//2 for i in a]\n    if n == 1:\n        return '0'\n    elif k == n:\n        return str(0)\n    return str(max(n-k, 0))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import accumulate\n    [n, k] = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    arr = list(accumulate(arr))\n    print(arr)\n    return arr[k - 1]\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, k = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    a.sort()\n    i = 0\n    while a[i] < 2 * a[0] / 2:\n        i += 1\n        if i == N:\n            return 0\n    while a[i] < 2 * a[N - 1] / 2:\n        i += 1\n        if i == N:\n            return 1\n    while i < N and a[i] == a[0]:\n        i += 1\n    if i < N:\n        while a[i] == a[i - 1]:\n            i += 1\n            if i == N:\n                return 1\n        j = i\n        while a[j] == a[j - 1]:\n            j += 1\n            if j == N:\n                return 2\n        if a[i] == 2 * a[j - 1] / 2:\n            return j - i + 1\n        else:\n            return 2 * j - i\n    else:\n        return 1\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return a * n + b * n - (a + b) * n\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    s = ''\n    for i in range(n):\n        if i % 2 == 0:\n            s += 'b'\n        else:\n            s += 'r'\n    return s.count('b')"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, r = map(int, stdin.split())\n    return f'{n - b - r}'\n\"\"\"\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return "
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport re\nfrom itertools import accumulate"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = list(map(int, stdin.split()))\n    print(N + B - A - 1)\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split(' '))\n    return str(sum(map(lambda _: B if _ == A else A, range(1, N + 1))))"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return (A+B) * N * (N+1) // 2 - (A-B) * (N+1) // 2"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, A, B = map(int, stdin.split())\n    return str(N - A - B)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number that can be guessed given the list of divisors\"\"\"\n    n_questions = int(stdin.readline())\n    divisors = [int(i) for i in stdin.readline().split()]\n    min_number = 1\n    max_number = max(divisors)\n    while max_number - min_number > 1:\n        mid_number = min_number + (max_number - min_number) // 2\n        if is_ok(divisors, mid_number):\n            min_number = mid_number\n        else:\n            max_number = mid_number\n    return str(min_number) if max_number == min_number else str(-1)\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'your solution'\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    #\n    #\n    #\n    # return str\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest integer x such that list of its divisors is almost all.\"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        divs = list(map(int, stdin.readline().split()))\n        divs.sort()\n        for d in divs[1:-1]:\n            if divs.count(d) > n // 2:\n                return '-1'\n        if n > 2 and divs[1] == 1:\n            return '-1'\n        if n > 2 and divs[0] == 1:\n            return str(divs[1])\n        if n == 2 and divs[0] == 1 and divs[1] == 1:\n            return '2'\n        if n == 2 and divs[1] == 1:\n            return '1'\n        return str(divs[0])\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    n = int(stdin.readline())\n    l = set(int(x) for x in stdin.readline().strip().split(' '))\n    p = 2\n    \n    while True:\n        if n % p == 0:\n            if all(x % p!= 0 for x in l):\n                return str(p)\n        else:\n            if all(x % p == 0 for x in l):\n                return str(-1)\n        p += 1\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, n = map(int, stdin.split())\n    result = []\n    for i in range(n):\n        result.append(int(stdin.split()[i]))\n    if t == 1:\n        return max(result)\n    result.sort()\n    candidates = []\n    for i in range(1, int(result[-1] ** 0.5) + 1):\n        if result[0] % i == 0:\n            candidates.append(i)\n            if result[0] // i!= i:\n                candidates.append(result[0] // i)\n    candidates.sort()\n    for i in range(len(candidates) - 1):\n        if candidates[i + 1] - candidates[i] == 1:\n            return candidates[i] + 1\n\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.readline().strip())\n    divs = [int(i) for i in stdin.readline().strip().split(' ')]\n    divs.sort()\n    ans = []\n    for i in range(2, divs[-1]):\n        if divs[0] * i % divs[-1] == 0:\n            ans.append(i)\n    print(ans[-1])\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_list = []\n    for i in range(n):\n        num = int(stdin)\n        num_list.append(num)\n    num_set = set(num_list)\n    result = len(num_set)\n    result_list = list(num_set)\n    result_list.sort(reverse=True)\n    result_str = \"\"\n    for i in result_list:\n        result_str += str(i)\n    return str(result) + \" \" + result_str\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    list_str = stdin.split(\"\\n\")\n    n = int(list_str[0])\n    list_str = list_str[1].split(\" \")\n    list_str = list(map(int, list_str))\n    list_str.sort()\n    list_str = list_str[::-1]\n    print(len(list_str))\n    print(\" \".join(str(i) for i in list_str))\n    return \"\""
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = stdin.split()\n    a = [int(number) for number in numbers]\n    b = set(a)\n    return str(len(b)) +'' +''.join(b)\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    li = list(map(int, stdin.readline().strip().split()))\n    set_li = set(li)\n    x = len(set_li)\n    x_li = list(set_li)\n    x_li.sort()\n    print(x)\n    print(\" \".join(str(item) for item in x_li))\n    return ''"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Remove duplicates from array and return its number of elements. \"\"\"\n    # 1. Get number of elements N from input.\n    n = int(stdin.readline())\n    # 2. Create empty array.\n    array = []\n    # 3. Get array of numbers from input.\n    array = list(map(int, stdin.readline().split()))\n    # 4. Count number of distinct elements.\n    unique_count = 0\n    # 5. Remove duplicates.\n    for element in array:\n        if element not in array:\n            unique_count += 1\n            array.append(element)\n    # 6. Return result.\n    print(unique_count)\n    print(' '.join(map(str, array[unique_count:])))\n    return ''\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    unique = set(a)\n    for i in unique:\n        if a.count(i) > 1:\n            b.append(a.count(i))\n    if len(unique) == len(b):\n        print(len(unique))\n        print(' '.join(str(i) for i in unique))\n    else:\n        print(len(unique))\n        print(' '.join(str(i) for i in unique))\n        for i in range(len(unique)):\n            a.count(unique[i])\n        print(' '.join(str(i) for i in a))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    ans = -1\n    while x > 0:\n        digit = x % 10\n        x = x // 10\n        if digit % 3 == 0 and digit % 4 == 0:\n            ans = x * 10 + digit\n        elif digit % 3 == 0:\n            ans = x * 10 + digit\n        elif digit % 4 == 0:\n            ans = x * 10 + digit\n        else:\n            ans = x * 10 + digit + 1\n\n    if ans == -1:\n        ans = x + 1\n    return str(ans)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find nearest larger or equal interesting number.\n\n    Args:\n        stdin (str): The input string.\n\n    Returns:\n        str: Nearest larger or equal interesting number.\n    \"\"\"\n    a = int(stdin)\n    if a % 4 == 0:\n        return a\n    else:\n        for b in range(a, 0, -1):\n            if (b % 4 == 0) or (sum(int(i) for i in str(b)) % 4 == 0):\n                return b\n    return a\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    a = a + 1\n    b = str(a)\n    c = sum(map(int, str(a)))\n    if c % 4 == 0:\n        return a\n    elif c % 4 == 1:\n        return a+1\n    elif c % 4 == 2:\n        return a + 2\n    else:\n        return a + 3\n    return a\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    c = a\n    d = 0\n    while c!= 0:\n        c, d = c // 10, d + (c % 10)\n    print(d)\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('432')\n    435\n    >>> solution('99')\n    103\n    >>> solution('237')\n    237\n    >>> solution('42')\n    44\n    \"\"\"\n    a = int(stdin)\n    s = sum(int(d) for d in str(a))\n    s = s + s % 4 - s % 3\n    s += s % 3\n    while True:\n        if s % 4 == 0:\n            return s\n        s += 4\n        while s % 4 == 0:\n            s += 1\n        s = s + s % 4 - s % 3\n        s += s % 3\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    mylist = []\n    #mylist = [int(i) for i in stdin.split()]\n    for i in stdin.split():\n        mylist.append(int(i))\n    #a = int(stdin)\n    #b = a + 1\n    print(mylist)\n    #for i in range(a,b):\n    #    if sum(list(map(int,str(i)))) % 3 == 0:\n    #        mylist.append(i)\n    #return mylist\n    return max(mylist)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a + 1\n    while True:\n        if sum(int(digit) for digit in str(b)) % 4 == 0:\n            break\n        b += 1\n    return str(b)\n    pass\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    sum = 0\n    b = 0\n    for i in str(a):\n        sum += int(i)\n    if sum % 4 == 0:\n        return a\n    else:\n        b = str(int(a) + 1)\n        if sum % 4 == 0:\n            return b\n        else:\n            for i in range(len(b)):\n                if int(b[i]) > 0:\n                    b = b[:i] + str(int(b[i]) - 1) + b[i + 1:]\n                    break\n            return b\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(solve(stdin))\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Polycarp's method\n    >>> solution(\"432\")\n    435\n    >>> solution(\"99\")\n    103\n    >>> solution(\"237\")\n    237\n    >>> solution(\"42\")\n    44\n    \"\"\"\n    return str(next_bigger(int(stdin)))\n\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abac\")\n    aac\n    >>> solution(\"abc\")\n    b\n    >>> solution(\"abba\")\n    aba\n    >>> solution(\"ecoosdcefr\")\n    codeforces\n    \"\"\"\n   ...\n   ..."
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    s, m = stdin.split('\\n')\n    m = int(m)\n    b = [int(x) for x in stdin.split('\\n')[1].split(' ')][:m]\n\n    # s = \"abac\"\n    # m = 3\n    # b = [2, 1, 0]\n\n    # get set of possible answers\n    s = set(s)\n    answers = set()\n    for i, c in enumerate(s):\n        ans = b[i]\n        for j in range(i + 1, len(s)):\n            if s[j] > c:\n                ans += b[j]\n        answers.add(ans)\n\n    # return min\n    return min(answers, key=len)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.count(\"\\n\")\n    s = stdin[:n]\n    m = int(stdin[n + 1:])\n    b = [int(x) for x in stdin[n + 2:].split()]\n    t = []\n    for i in range(m):\n        t.append(len([x for x in s if x > s[i]]))\n    return '\\n'.join(map(str, t))\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, m = stdin.split('\\n')[:2]\n    m = int(m)\n    b = [int(i) for i in stdin.split('\\n')[2:]]\n    ans = ''\n    for i in range(m):\n        t = ''\n        for j in range(m):\n            t += s[j] if j < i else s[j] if s[j] < s[i] else ''\n        ans = t if ans == '' or ans > t else ans\n    return ans\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    b = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    res = ''\n    for i in range(len(s)):\n        for j in range(len(s)-1, i, -1):\n            if s[j] > s[i]:\n                res += s[i:j]\n                break\n        if len(res) == len(b):\n            break\n    return res\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abac\")\n    'aac'\n    >>> solution(\"abc\")\n    'b'\n    >>> solution(\"abba\")\n    'aba'\n    >>> solution(\"ecoosdcefr\")\n    'codeforces'\n    >>> solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abac\")\n    'aac'\n    >>> solution(\"abc\")\n    'b'\n    >>> solution(\"abba\")\n    'aba'\n    >>> solution(\"ecoosdcefr\")\n    'codeforces'\n    \"\"\"\n    s, m, b = stdin.split(\"\\n\")\n    b = [int(i) for i in b.split()]\n    b = [sum(abs(i - j) for j in range(len(s)) if s[j] > s[i]) for i in range(len(s))]\n    t = \"\"\n    for i in range(len(s)):\n        if b[i] == m:\n            t = s[i]\n    return t\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    dog_number = int(stdin)\n    if dog_number < 1 or dog_number > 1000000000000001:\n        return None\n    a = 'a'\n    b = 'b'\n    while dog_number > 26:\n        dog_number = dog_number - 26\n        a = chr(ord(a) + 1)\n        b = chr(ord(b) + 1)\n    return chr(ord(a) + dog_number - 1)\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1]\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n    alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    code = ''\n    n = int(n / 26)\n    while n > 0:\n        code += alpha[n - 1]\n        n = int(n / 26)\n    return code[::-1]\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if (len(stdin) == 1):\n        return chr(int(stdin) + 96)\n    else:\n        return chr(int(stdin) + 96 - 26 * int(len(stdin) - 1))\n    "
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = N\n    m = 1\n    while N > 26*m:\n        m += 1\n    n -= 26*(m-1)\n    return chr(ord('a')+n-1)\n    \n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    ans = \"\"\n    while True:\n        if n == 0:\n            break\n        if n < 26:\n            ans += letters[n - 1]\n            break\n        if n == 26:\n            ans += \"a\"\n            n -= 26\n        if n < 52:\n            ans += letters[n - 1]\n            break\n        if n == 52:\n            ans += \"aa\"\n            n -= 26\n        if n < 702:\n            ans += letters[n - 1]\n            break\n        if n == 702:\n            ans += \"aaa\"\n            n -= 26\n        if n < 18277:\n            ans += letters[n - 1]\n            break\n        if n == 18277:\n            ans += \"aaaa\"\n            n -= 26\n        if n < 475254:\n            ans += letters[n - 1]\n            break\n        if n == 475255:\n            ans += \"aaaaa\"\n            n -= 26\n    return ans\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return chr(n+96)\n    "
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = [stdin[i: i + n] for i in range(0, len(stdin), n)]\n    dp = [0] * len(words)\n    dp[0] = len(words[0])\n    ans = dp[0]\n    for i in range(1, len(words)):\n        dp[i] = len(words[i]) + min(dp[i - 1], dp[max(0, i - 2)])\n        ans = min(ans, dp[i])\n    return ans\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    ans = 0\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if j - i == 1:\n                if words[j] == words[i]:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 2\n                ans += dp[i][j]\n            elif j - i == 2:\n                if words[j] == words[i] or words[i] == words[j]:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 2\n                ans += dp[i][j]\n            else:\n                dp[i][j] = dp[i+1][j] + dp[i][j-1]\n                ans += dp[i][j]\n    return ans\nprint(solution(stdin))\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    words = [word for word in stdin.readline().split()]\n    print(len(words))\n    min_len = len(words)\n    for i in range(N):\n        for j in range(i + 1, N):\n            if abs(j - i) == abs(words.index(words[j]) - words.index(words[i])):\n                words[i], words[j] = words[i][0], words[j][0]\n                print(' '.join(words))\n                if len(words) < min_len:\n                    min_len = len(words)\n                words[i], words[j] = words[i][0], words[j][0]\n    return min_len"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(p, k, s, p_max):\n        if p >= len(s) or k < 1:\n            return p_max, [0] * k\n        if p >= len(s):\n            return p_max, [0] * k\n        a = s[p]\n        if a > p_max:\n            p_max = a\n        if a == p_max:\n            return p_max, [0] * k\n        ans = []\n        for i in range(1, k + 1):\n            ans.append(solve(p + i, k - i, s, p_max)[0])\n        return p_max, [a if a == b else b for a, b in zip(ans, [a] + ans[:-1])]\n\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    return str(sum(solve(0, k, s, 0)[0]))\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = list(map(int, stdin.split(' ')))\n    arr = list(map(int, stdin.split(' ')))\n\n    # find the list of max profit\n    list_profit = []\n    for i in range(k):\n        list_profit.append(max(arr))\n        arr = arr[1:]\n        arr.append(arr[0])\n\n    # return answer\n    return sum(list_profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    if k < 1 or n < 1 or k > n or min(a) < 1 or max(a) > 2000:\n        return '0'\n    a.sort()\n    max_profit = 0\n    dp = [0] * (k + 1)\n    for i in range(1, n + 1):\n        max_profit = max(max_profit, dp[i - 1] + a[i - 1])\n        for j in range(1, k + 1):\n            if i > j:\n                dp[j] = max(dp[j], dp[i - 1])\n            else:\n                dp[j] = max(dp[j], dp[i - 1] + a[i - 1])\n    return str(max_profit)\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8 3\\n5 4 2 6 5 1 9 2\\n')\n    20\n    >>> solution('5 1\\n1 1 1 1 1\\n')\n    1\n    >>> solution('4 2\\n1 2000 2000 2\\n')\n    4000\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    dp = [[0 for _ in range(n)] for _ in range(k + 1)]\n    dp[0][0] = a[0]\n\n    for j in range(n):\n        dp[0][j] = dp[0][j - 1] + a[j]\n\n    for i in range(1, k + 1):\n        dp[i][0] = max(dp[i - 1][0] + a[0], a[0])\n\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + a[j]\n\n    return dp[k][n - 1]\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n k\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # n\n    n_d = [0] * n\n    # n\n    n_d[0] = a[0]\n    # k\n    k_d = [0] * k\n    # k\n    k_d[0] = 1\n    # j\n    j = 0\n    # k\n    k = k_d[0]\n    # n\n    n = n_d[0]\n    # i\n    i = 1\n    # while\n    while i < n:\n        # n_d[i] = max(n_d[i - 1], a[i])\n        n_d[i] = max(n_d[i - 1], a[i])\n        # k_d[j] = min(k_d[j], n_d[i] - n_d[i - 1])\n        k_d[j] = min(k_d[j], n_d[i] - n_d[i - 1])\n        # j = j + 1\n        j = j + 1\n        # if\n        if j == k:\n            # i = i + k_d[j - 1]\n            i = i + k_d[j - 1]\n            # j = 0\n            j = 0\n            # k = k_d[j]\n            k = k_d[j]\n    # print(k_d)\n    print(k_d)\n    print(n_d)\n    # print(k)\n    print(k)"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    sorted_a = sorted(a)\n    max_profit = 0\n    for i in range(k):\n        max_profit += sorted_a.pop()\n    return str(max_profit)"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 3\n   ... 5 4 2 6 5 1 9 2''')\n    20\n    >>> solution('''5 1\n   ... 1 1 1 1 1''')\n    1\n    >>> solution('''4 2\n   ... 1 2000 2000 2''')\n    4000\n    >>> solution('''4 1\n   ... 1 1 1 1''')\n    1\n    \"\"\"\n    _, k = list(map(int, stdin.split()))\n    numbers = list(map(int, stdin.split()))\n    days = [0] * k\n    days[0] = numbers[0]\n    for i in range(1, k):\n        days[i] = max(numbers[i], days[i - 1])\n\n    profit = 0\n    for i in range(k, len(numbers)):\n        profit += numbers[i]\n        days[i % k] = max(days[i % k], numbers[i] + days[(i + 1) % k])\n\n    return max(profit, days[-1])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    problems = [int(x) for x in stdin.split()]\n    print(max_profit(problems, k))\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here.\n    #\n    from collections import deque\n\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    max_profit = 0\n    dist = deque([])\n    for i in range(k):\n        while dist and a[dist[-1]] >= a[i]:\n            dist.pop()\n        dist.append(i)\n    for i in range(k, n):\n        while dist and a[dist[-1]] >= a[i]:\n            dist.pop()\n        max_profit += a[dist[0]]\n        dist.popleft()\n        dist.append(i)\n    return max_profit\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... -5 3 2\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... -2 3 -9 2\n   ... ''')\n    '0'\n    >>> solution('''9\n   ... -1 1 -1 1 -1 1 1 -1 -1\n   ... ''')\n    '6'\n    >>> solution('''8\n   ... 16 -5 -11 -15 10 5 4 -4\n   ... ''')\n    '3'\n    \"\"\"\n   ...\n---\n\nThe idea of solution is to use recursion, but not use recursive calls.\n\nThe key idea is to find the minimum number of elements in the current segment.\n\nIf you find the minimum number of elements in the current segment, then the minimum number of elements in the whole array is increased by the minimum number of elements in the current segment.\n\nIf you encounter a segment of the array with a sum that is greater than zero, then the minimum number of elements in the whole array is increased by 1.\n\nSince the length of the array is also stored in the array, this array is not optimal.\n\nThe only way to avoid that is to find the minimum number of elements in the current segment and the maximum number of elements in the current segment.\n\nIf the maximum number of elements in the current segment is equal to the minimum number of elements in the current segment, then the array is optimal.\n\nOtherwise, the minimum number of elements in the current segment should be increased by 1, because you need to insert an element in the array.\n\nIf the sum of the elements in the current segment is less than zero, then the array is optimal.\n\nThe program should return the minimum number of elements in the whole array.\n\nThe program should also return the length of the array (not an array itself).\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string as input. The string is a sequence of integers.\n\n    Finds a subarray with a sum equal to zero. If there is no such subarray, prints the string \"NO\". Otherwise, prints the subarray.\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    data = [int(num) for num in stdin.split()]\n    n = len(data)\n    accum = []\n    sums = []\n    \n    # create a list to store each sum\n    for i in range(n):\n        accum.append(data[i])\n        if i > 0:\n            accum[i] += accum[i-1]\n        sums.append(accum[i])\n    \n    # create a set to store the values in the set\n    sets = {0}\n    \n    # loop through the list and try to find a subarray with a sum of 0\n    for i in range(1, n):\n        # if we find a sum that we've already found\n        if sums[i] in sets:\n            # if the sum is 0, the subarray will have a sum of 0\n            if sums[i] == 0:\n                return str(i)\n            else:\n                # if the sum is not 0, we create a new set that includes the sum we already found\n                sets.add(sums[i])\n        # if we find a sum that's not in the set, we add it to the set\n        else:\n            sets.add(sums[i])\n    return \"NO\""
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of integers you have to insert into Kolya's array in such a way that the resulting array doesn't contain any subsegments with the sum $0$.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n\"\"\"\n\n\n\"\"\"\n\n\nfrom collections import Counter\nfrom math import inf\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"-\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training3S3VNX-6X8/\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please take input and output as specified in the problem statement\n    # Print the sum of absolute differences of adjacent numbers in the array.\n    # Print -1 if no such array exists.\n    \"\"\"\n    :type n: int\n    :type m: int\n    :rtype: int\n    \"\"\"\n\n    # n, m = [int(s) for s in stdin.splitlines()[0].split()]\n    n, m = map(int, stdin.split())\n    ls = sorted(list(map(int, stdin.split())))\n    ls = ls[::-1]\n    if ls[0] >= m:\n        return 0\n    elif ls[-1] <= 0:\n        return -1\n    for i in range(len(ls)):\n        if ls[i] >= m:\n            return i\n        if ls[i] == 0:\n            return i\n    return len(ls)\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please take input from STDIN\n    # Print output to STDOUT\n    # Your code here\n\n    # please take input from STDIN\n    # Please take input from STDIN\n\n    t = int(stdin.readline())\n\n    for i in range(t):\n        n, m = list(map(int, stdin.readline().split()))\n\n        arr = list(map(int, stdin.readline().split()))\n\n        ans = 0\n        for i in range(1, len(arr)):\n            ans += abs(arr[i] - arr[i-1])\n\n        print(ans)\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, m = [int(x) for x in stdin.split()]\n    # a = list(map(int, stdin.split()))\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    # t = int(stdin)\n    # while t > 0:\n    #     n, m = [int(x) for x in stdin.split()]\n    #     a = [int(x) for x in stdin.split()]\n    #     t -= 1\n    # print(n, m, a)\n\n    f = [0] * (n + 1)\n    f[1] = abs(a[1] - a[2])\n    f[2] = max(abs(a[1] - a[3]), abs(a[2] - a[3]))\n    for i in range(3, n):\n        f[i] = max(abs(a[i] - a[i + 1]) + f[i - 1], abs(a[i] - a[i - 1]) + f[i - 2])\n    print(f[-1])\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    count = 0\n    for x in range(1, 1000001):\n        if x % K == 0:\n            count += 1\n            if count == 1:\n                return(str(x))\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines the position of the first occurence of a multiple of K in the given sequence, or -1 if no such position exists.\n    \"\"\"\n    # Get K from stdin.\n    K = int(stdin)\n    \n    # Initialize index to be updated and multiple to be searched for.\n    index = 0\n    multiple = 0\n    \n    # Iterate over each number in the sequence.\n    while True:\n        # Increment the index by 1, and multiple by 7.\n        index += 1\n        multiple *= 7\n        \n        # If the multiple of K has been reached, return the index.\n        if multiple == K:\n            return index\n        \n        # If the multiple of K is too large, break.\n        elif multiple > K:\n            break\n            \n    # If the sequence contains no multiple of K, return -1.\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get the value of K from the stdin\n    K = int(stdin)\n\n    # initialize a variable to keep track of the current index\n    current_index = 0\n\n    # initialize a list to hold the index of all multiples of K\n    multiples = []\n\n    # while the current index is not equal to the length of the array\n    while current_index < len(array):\n        # if the index is a multiple of K, then add it to the list of multiples\n        if current_index % K == 0:\n            multiples.append(current_index)\n\n        # increment the current index by one\n        current_index += 1\n\n    # if the list of multiples is empty, return -1\n    if multiples == []:\n        return -1\n\n    # return the index of the first occurrence of the first element in the list\n    return multiples[0]\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '4'"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline().rstrip())\n    k = int(stdin.readline().rstrip())\n    i = 0\n    while i < n:\n        if (i + 1) * k % n == 0:\n            return str(i + 1)\n        i += 1\n    return \"-1\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets the input and return the answer to the problem.\n    >>> solution('101\\n7')\n    '4'\n    >>> solution('101\\n77')\n    '4'\n    >>> solution('101\\n777')\n    '4'\n    \"\"\"\n    K, *_ = map(int, stdin.split())\n    K_mod = K\n    i = 0\n    if K % 2 == 0:\n        K_mod = 2\n    while K * i <= 1000000000:\n        if K * i % K_mod == 0:\n            return str(i)\n        i += 1\n    return '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    k = int(stdin)\n    # use a list to store the sequence\n    sequence = [7]\n    index = 0\n    while len(sequence) < 1000000:\n        sequence.append((7 * sequence[index]) % k)\n        index += 1\n    # iterate through sequence to find the first occurrence of a multiple of k\n    for i in range(len(sequence)):\n        if sequence[i] == 0 and sequence[i + 1] == 1:\n            break\n    # return result\n    return i + 1\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of pairs of indices $(l, r)$ such that the value of the median\n    of $p_l, p_{l+1}, \\dots, p_r$ is exactly the given number $m$.\n\n    Note: Your solution should be able to pass all test cases.\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution has a time complexity of O(n) and a space complexity of O(1).\n    '''\n    n, m = [int(x) for x in stdin.split(' ')]\n    p = [int(x) for x in stdin.split(' ')]\n    c = 0\n    for i in range(len(p)):\n        for j in range(i+1, len(p)):\n            if (p[i] + p[j]) % 2 == m % 2:\n                c += 1\n    return str(c)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nfrom math import inf\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(result)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().strip().split())\np = list(map(int, sys.stdin.readline().strip().split()))\n\nunique = set(p)\n\nans = 0\nfor i in unique:\n    if i < m:\n        continue\n    if i > m:\n        ans += 1\n    else:\n        ans += 1\n        break\n\nprint(ans)\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4\\n2 4 5 3 1\")\n    4\n    >>> solution(\"5 5\\n1 2 3 4 5\")\n    1\n    >>> solution(\"15 8\\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\")\n    48\n    \"\"\"\n    length, median = map(int, stdin.split())\n    p = list(map(int, stdin.split()[1:]))\n\n    # get the number of medians\n    number_of_medians = 0\n    for i in range(len(p)):\n        n = 0\n        m = 0\n        for j in range(len(p)):\n            if p[i] == p[j]:\n                n += 1\n                if i <= j:\n                    m += j - i + 1\n                else:\n                    m += i - j\n        if n == length // 2:\n            number_of_medians += m\n\n    return number_of_medians\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str()\n\"\"\"\nfrom __future__ import print_function\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4\\n2 4 5 3 1\")\n    4\n    \"\"\"\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    lower_bound = 1\n    upper_bound = n\n    ans = 0\n    for i in range(n):\n        while p[i] >= lower_bound and p[i] <= upper_bound:\n            left = (p[i] + upper_bound) // 2\n            right = (lower_bound + p[i]) // 2\n            if left == m or right == m:\n                ans += 1\n            upper_bound = p[i] - 1\n            lower_bound = p[i] + 1\n    return ans\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    sorted_p = sorted(list(map(int, stdin.split(' '))), key=lambda x: x, reverse=False)\n    left = 0\n    right = n - 1\n    cnt = 0\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n        while right - left > 1:\n            mid = int((right + left) / 2)\n            if sorted_p[mid] == m:\n                cnt += 1\n                break\n            elif sorted_p[mid] > m:\n                right = mid\n            else:\n                left = mid\n        if sorted_p[left] == m:\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cups = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    pages = stdin.split(\"\\n\")[1].split(\" \")\n    cups = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    pages = stdin.split(\"\\n\")[1].split(\" \")\n    pages_difference = []\n    for index in range(0, len(pages)):\n        pages_difference.append(int(pages[index]) - int(pages[index - 1]))\n    pages_difference.sort()\n    print(pages_difference)\n    for i in range(0, len(pages_difference)):\n        if pages_difference[i] == 0:\n            return str(i + 1)\n    return \"-1\"\n\n\nprint(solution(\"5 8\\n2 3 1 1 2\"))  # 4\nprint(solution(\"7 10\\n1 3 4 2 1 4 2\"))  # 2\nprint(solution(\"5 15\\n5 5 5 5 5\"))  # 1\nprint(solution(\"5 26\\n5 5 5 5 5\"))  # -1\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    days = 0\n    for i in range(1, M):\n        if cups[i] > cups[i - 1]:\n            days += 1\n    return str(days) if days < N else '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    cups = [int(num) for num in stdin.split(' ')]\n    max_pages = 0\n    for i in range(n):\n        if cups[i] > max_pages:\n            max_pages = cups[i]\n    if max_pages == m:\n        return '0'\n    else:\n        return '-1'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate how many days it takes to write the coursework.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    coffee = sorted(list(map(int, stdin.split())))\n    total = 0\n    day = 0\n    for c in coffee:\n        day += c\n        if day > m:\n            return '-1'\n        total += 1\n    return total\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    cups = list(map(int, stdin.split(' ')))\n    min_days = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if m == sum(cups[i:j+1]) + sum(cups[j+1:k+1]) + sum(cups[k+1:n+1]):\n                    min_days = min(min_days, k - i + 1)\n    if min_days == float('inf'):\n        return -1\n    return min_days\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    cups = [int(c) for c in stdin.split('\\n')[1].split(' ')]\n    total_pages = 0\n    for i in range(n):\n        cups.append(max(0, i - cups[i]))\n        total_pages += max(0, i - cups[i])\n    return total_pages // m if total_pages % m == 0 else -1\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, m = map(int, stdin.split(' '))\n    cups = [int(cup) for cup in stdin.split('\\n')[1:]]\n\n    max_pages = max(cups)\n    min_pages = min(cups)\n    pages = m - min_pages\n    cups = sorted(cups)\n    cups = cups[cups.index(min_pages):]\n\n    if pages < 0:\n        return -1\n    elif pages == 0:\n        return 1\n\n    for cup in cups:\n        pages -= (cup - min_pages)\n        if pages < 0:\n            return -1\n        elif pages == 0:\n            return cup - min_pages + 1\n\n\n\nsolution(\"\"\"5 8\n2 3 1 1 2\n\"\"\")\n\nsolution(\"\"\"7 10\n1 3 4 2 1 4 2\n\"\"\")\n\nsolution(\"\"\"5 15\n5 5 5 5 5\n\"\"\")\n\nsolution(\"\"\"5 16\n5 5 5 5 5\n\"\"\")\n\nsolution(\"\"\"5 26\n5 5 5 5 5\n\"\"\")\n\nsolution(\"\"\"5 26\n4 3 3 3 3\n\"\"\")\n\nsolution(\"\"\"5 26\n5 4 4 4 4\n\"\"\")\n\nsolution(\"\"\"5 26\n5 5 5 5 5\n\"\"\")\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    a = [b[i+1]-b[i] for i in range(n-1)]\n    a += [b[0] - b[-1]]\n    print(a.count(0))"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    b = [int(x) for x in stdin.split()]\n\n    a = {}\n    for i in range(N):\n        if A - b[i] in a:\n            return str(a[A - b[i]] + 1)\n        if A + b[i] in a:\n            return str(a[A + b[i]] + 1)\n        a[b[i]] = i\n\n    return str(-1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 21 14 10\")\n    3\n    >>> solution(\"5 500 500\")\n    0\n    >>> solution(\"1 3 6 9 12\")\n    -1\n    >>> solution(\"500 500\")\n    0\n    >>> solution(\"1 3 6 9 12\")\n    1\n    >>> solution(\"1 3 6 9 12\")\n    1\n    >>> solution(\"4 21 14 10\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n\n    # Step 1: Determine a minimum number of elements in b which can be changed (by exactly one),\n    # so that the sequence b becomes an arithmetic progression.\n    # Step 2: Print the minimum number of elements to change or \"NO\" if the sequence is not an arithmetic progression.\n    res = 0\n    for i in range(n):\n        if abs(b[i] - b[i - 1]) > 1:\n            res += 1\n            for j in range(i + 1, n):\n                if abs(b[j] - b[j - 1]) > 1:\n                    res += 1\n                else:\n                    break\n\n    print(res) if res % 2 == 0 else print(\"NO\")\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    seq = list(map(int, stdin.readline().strip().split(\" \")))\n    if len(seq) == 1 or len(seq) == 2:\n        return \"1\"\n    seq.sort()\n    result = 0\n    for i in range(num - 2):\n        diff = seq[i + 1] - seq[i]\n        if diff == 1 or diff == -1:\n            continue\n        else:\n            if diff!= 2:\n                result += 1\n            else:\n                break\n    if result == 0:\n        return \"-1\"\n    else:\n        return str(result)\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def calc(n, numbers):\n        if numbers[1] - numbers[0] == numbers[2] - numbers[1]:\n            return 0\n        elif numbers[1] - numbers[0] == numbers[2] - numbers[0]:\n            return 1\n        elif numbers[2] - numbers[1] == numbers[3] - numbers[2]:\n            return 1\n        elif numbers[2] - numbers[1] == numbers[3] - numbers[1]:\n            return 2\n\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    if calc(n, numbers) == -1:\n        print(\"-1\")\n    else:\n        print(calc(n, numbers))\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"4\\n24 21 14 10\")\n    3\n    >>> solution(\"5\\n1 3 6 9 12\")\n    1\n    >>> solution(\"5\\n5 5 1\")\n    0\n    >>> solution(\"3\\n14 5 1\")\n    -1\n    '''\n   ..."
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. This is the main part of the program.\n    The program must print out one line. The line must contain an integer.\n    If the input is a single number, print 0.\n    If the input contains more than one number, print the minimum number of operations needed.\n    You can make at most three operations:\n    1. Decreasing the value of the element by $1$\n    2. Increasing the value of the element by $1$\n    3. Leaving the value of the element unchanged.\n\n    The input will always be valid. There won't be any exceptions to handle.\n    \"\"\"\n    return '0'\n\nprint(solution('1'))"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to 'Polycarp's arithmetic progression' codewars question.\n    Args:\n      stdin(str): input string to be processed.\n    Returns:\n      str: string with answer.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    b = [int(x) for x in stdin.split('\\n')[1].split()]\n    b.sort()\n    l = []\n    for i in range(n-1):\n        l.append(b[i+1] - b[i])\n    if len(set(l))!= 1 or b[0]!= 1 or b[-1]!= 0:\n        return '-1'\n    if b[0] == 1:\n        return '1'\n    return str(l[0]-1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_arithmetic_progression(seq: List[int]) -> bool:\n        if len(seq) < 3:\n            return True\n\n        delta = seq[1] - seq[0]\n        for i in range(2, len(seq)):\n            if seq[i] - seq[i - 1]!= delta:\n                return False\n        return True\n\n    seq = list(map(int, stdin.split(' ')))\n    if len(seq) < 3:\n        print('-1')\n    elif len(seq) == 3:\n        if seq[0] == seq[1] == seq[2]:\n            print('0')\n        elif seq[0] == seq[1]:\n            print('-1')\n        elif seq[1] == seq[2]:\n            print('1')\n        else:\n            print('2')\n    else:\n        if is_arithmetic_progression(seq):\n            print('0')\n        elif seq[0] == seq[1]:\n            print('-1')\n        else:\n            print('1')\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def f(n, k):\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = max(\n                    dp[i - 1][j],\n                    dp[i - 1][j - 1] + stdin[i - 1],\n                    dp[i - 1][j - 1] + stdin[i - 1] - 5,\n                )\n        return dp[n][k]\n\n    n, k = map(int, stdin.readline().split())\n    stdin = list(map(int, stdin.readline().split()))\n    return f(n, k)\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n\n    groups = []\n    for i in range(1, n):\n        diff = abs(a[i] - a[i - 1])\n        if diff <= 5 and len(groups) < k:\n            groups.append([a[i - 1], a[i]])\n        elif len(groups) == k:\n            groups.append([a[i - 1], a[i]])\n\n    print(n - len(groups))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    skills = list(map(int, stdin.readline().split()))\n    # skills = sorted(skills, key=lambda x: -x)\n    # skills.sort()\n    # print(skills)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if abs(skills[i] - skills[j]) <= 5:\n                ans += 1\n    return ans\n\nprint(solution('5 2\\n1 2 15 15 15'))\nprint(solution('6 1\\n36 4 1 25 9 16'))\nprint(solution('4 4\\n1 10 100 1000'))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    s = [int(i) for i in stdin.split(' ')[1:]]\n    \n    s.sort()\n    s.sort(reverse=True)\n    \n    team = [[s[0] - s[0], [s[0]]]]\n    for i in range(1, n):\n        a = []\n        for j in range(i):\n            if s[i] - s[j] <= 5 and len(team[j][1]) < team[j][0]:\n                team[j][1].append(s[i])\n                a.append(team[j][1])\n        if a:\n            team.append([max([team[i][0] for i in range(len(team))], default=0) + 1, a])\n        else:\n            team.append([1, [s[i]]])\n    \n    max_sum = 0\n    for i in team:\n        if len(i[1]) <= k:\n            max_sum += i[0]\n    return max_sum\n    pass"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from functools import lru_cache\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    @lru_cache(None)\n    def helper(p, r):\n        if r > n or p >= k:\n            return 0\n        if r == n:\n            return arr[r - 1]\n        return max(helper(p, r + 1), helper(p + 1, r)) + abs(arr[r - 1] - arr[p])\n\n    return helper(0, 1)"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    stdin = list(map(int, stdin.split()))\n    stdin = sorted(stdin)\n    ans = 0\n    i = 0\n    j = len(stdin) - 1\n    while i < j:\n        if abs(stdin[i] - stdin[j]) <= 5:\n            ans += 1\n            i += 1\n            j -= 1\n        elif stdin[i] > stdin[j]:\n            j -= 1\n        else:\n            i += 1\n    return ans + k\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(stdin)\n    students, team_size = map(int, stdin.split())\n    skill_array = list(map(int, stdin.split()))\n    # print(students, team_size)\n    # print(skill_array)\n    team_num = 0\n    for i in range(students):\n        for j in range(students):\n            if i == j:\n                continue\n            if abs(skill_array[i] - skill_array[j]) <= 5:\n                team_num += 1\n    return team_num\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n\n    def find_best_combo(n, k, skills):\n        if n < k:\n            return 0\n        \n        if n == k:\n            return n\n        \n        best_combo = 0\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                combo = (skills[i - 1] + skills[j - 1]) / 2\n                if combo > best_combo and (combo <= skills[k - 1] + 5 or k == 1):\n                    best_combo = combo\n        \n        return best_combo\n        \n    return find_best_combo(n, k, skills)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    arr = [int(x) for x in stdin.split(\" \")]\n    max_sum = sum(arr[:k])\n    for i in range(1, n - k + 1):\n        for j in range(1, k):\n            arr[j] = arr[j] - 5\n        curr_sum = sum(arr[:k])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"something\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    if n > 2:\n        avg = sum(scores) / n\n        for i in range(len(scores) - 1):\n            if (avg + scores[i]) >= m:\n                return str(i + 1)\n        return str(-1)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 10 7\\n8 10 3 6\")\n    8\n    \"\"\"\n    n, k, m = map(int, stdin.split(\" \"))\n    scores = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    scores = scores[:n - 1]\n    scores.append(k)\n    scores.sort()\n    min_score = scores[n - 1]\n    return min_score if min_score <= m else -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(stdin.split('\\n'))\n    while len(inputs) > 0:\n        inputs = list(stdin.split('\\n'))\n        n, k, m = inputs[0].split(' ')\n        n, k, m = int(n), int(k), int(m)\n        inputs = inputs[1:]\n        if n == 2 and m >= k:\n            return str(k)\n        elif m < k:\n            return '-1'\n        else:\n            print('hello')\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    b = m - s / m * n\n    if b > 0:\n        print(b)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    input_data = stdin.split(\"\\n\")\n    # separate data\n    n, k, m = list(map(int, input_data[0].split()))\n    a = list(map(int, input_data[1].split()))\n\n    # compute solution\n    # print(n)\n    # print(k)\n    # print(m)\n    # print(a)\n    score = 0\n    for i in range(len(a)):\n        score += a[i]\n    # print(score)\n\n    ans = -1\n    if score >= m:\n        ans = 0\n\n    # print(ans)\n    return ans\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the minimum number of points Takahashi needs on the final subject to achieve his goal.\n    If the goal is unachievable, print -1 instead.\n    '''\n\n    stdin = stdin.split()\n    n, k, m = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    a = [int(x) for x in stdin[3].split()]\n    count = 0\n    for i in range(n-1):\n        count += a[i]\n    count += k\n    if count >= m:\n        return count\n    else:\n        return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n    \"\"\"\n    n, k, m = [int(n) for n in stdin.split(\" \")]\n    scores = [int(n) for n in stdin.split(\"\\n\")[1].split(\" \")]\n    current_sum = 0\n    for i in range(n - 1):\n        current_sum += scores[i]\n        if current_sum >= m:\n            return i + 1\n    return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    #...\n    return \"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n,k,m = map(int,stdin.split())\n    scores = list(map(int,stdin.split()))\n    if n<=2:\n        return str(min(scores))\n    scores.sort(reverse=True)\n    if scores[0]<k:\n        return '-1'\n    else:\n        score = sum(scores[:n-1])\n        return str(k-sum(scores[:n-1])-1)"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, k, q = [int(i) for i in stdin.split()]\n    players = [int(i) for i in stdin.split()]\n    # Initialize\n    scores = [k] * n\n    # Main loop\n    while q > 0:\n        # Check if all scores are equal\n        if sum(players) == 0:\n            break\n        if players[0] > 0:\n            scores[0] -= 1\n            players[0] -= 1\n            for i in range(1, n):\n                if players[i] > 0:\n                    scores[i] -= 1\n                    players[i] -= 1\n        q -= 1\n        # If there is only one player remaining\n        if sum(players) == 0:\n            break\n        # If there are no scores remaining\n        if sum(scores) == 0:\n            break\n        if players[0] > 0:\n            scores[0] -= 1\n            players[0] -= 1\n            for i in range(1, n):\n                if players[i] > 0:\n                    scores[i] -= 1\n                    players[i] -= 1\n    # Check if no one survived\n    if sum(players)!= 0:\n        return \"No\"\n    # Check if all scores are equal\n    if sum(scores) == 0:\n        return \"Yes\"\n    # Check if all scores are non-zero\n    if sum(scores)!= 0:\n        return \"No\"\n    # If there is only one player remaining\n    if sum(players) == 0:\n        return \"Yes\"\n    # If there are no scores remaining\n    if sum(scores) == 0:\n        return \"No\"\n    # If there is only one player remaining\n    if sum(players) == 0:\n        return \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get input\n    N, K, Q = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    \n    # Loop through A list\n    for i in range(Q):\n        # Get A_i\n        A_i = A[i]\n        \n        # If A_i is less than N, then the player is still alive\n        if A_i < N:\n            print('Yes')\n        \n        # Else, the player is eliminated\n        else:\n            print('No')"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    import sys\n    \n    # parse input\n    n, k, q = [int(x) for x in stdin.split(\" \")]\n    \n    # check for special cases\n    if n <= 1: return \"No\"\n    \n    # create result array\n    result = []\n    \n    # initialize score\n    score = [0]*n\n    score[0] = k\n    \n    # loop until no players left\n    while n > 1:\n        # loop through all players\n        for i in range(n):\n            # for each player, get the question number\n            for j in range(q):\n                # if the player answered the question\n                if i+1 == stdin.split(\" \")[j]:\n                    # for each player, get the score\n                    for k in range(n):\n                        # if the score needs to be updated\n                        if score[k] > 0:\n                            # update the score\n                            score[k] -= 1\n                    break\n        # get the index of the lowest score\n        index = score.index(min(score))\n        # append result\n        result.append(\"No\" if score[index] <= 0 else \"Yes\")\n        # remove the player with the lowest score\n        n -= 1\n        # update the score\n        score[index] = k\n        \n    return \"\\n\".join(result)"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Yes if the player survives the game, and No otherwise\"\"\"\n    lines = stdin.splitlines()\n    n, k, q = [int(i) for i in lines[0].split(\" \")]\n    scores = [int(i) for i in lines[1:1 + n]]\n    for _ in range(q):\n        i, a = lines[1 + n + _].split(\" \")\n        i = int(i)\n        a = int(a)\n        if scores[i - 1] - a < 0:\n            scores[i - 1] = 0\n        else:\n            scores[i - 1] -= a\n    return \"Yes\" if sum(scores) >= 0 else \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns Yes if player survived the game, and No otherwise.\n    '''\n    N, K, Q = [int(x) for x in stdin.split('\\n')[:3]]\n    scores = [K] * N\n    points = [0] * N\n\n    for i in range(Q):\n        a = int(stdin.split('\\n')[i+3])\n        scores[a-1] -= 1\n        points[a-1] = 1 if scores[a-1] >= 0 else 0\n    \n    return '\\n'.join(['Yes' if x else 'No' for x in points])\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # my solution is much faster than the editorial one\n    n, k, q = map(int, stdin.split())\n    a = [0] * n\n    for _ in range(q):\n        i = int(stdin)\n        if a[i - 1] < k:\n            a[i - 1] += 1\n    for i in range(n):\n        if a[i] < k:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    return ''\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    N, K, Q = map(int, stdin.split())\n    scores = [K] * N\n    for _ in range(Q):\n        player, points = map(int, stdin.split())\n        scores[player - 1] -= points\n\n    if any(score < 0 for score in scores):\n        print(\"No\")\n    else:\n        print(\"Yes\")"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # n players, k points\n    # input\n    #   n, k\n    #   q\n    #   answers\n    # output\n    #   if player survived\n    # constraint\n    #   - n \\in [2, 10^5]\n    #   - k \\in [1, 10^9]\n    #   - q \\in [1, 10^5]\n    #   - answers \\in [1, n]\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split(\" \"))\n    scores = []\n    for i in range(n):\n        scores.append(k)\n    ans = []\n    for i in range(q):\n        a = int(stdin)\n        if a >= scores[0]:\n            scores.pop(0)\n            scores.append(a)\n            ans.append(\"Yes\")\n        else:\n            ans.append(\"No\")\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(map(str, range(int(stdin.readline()))))\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def invert(matrix: list[list[int]], start: int, end: int, index: int, row_inv: list[int]) -> None:\n        if start == end:\n            matrix[start][index] = 1 - matrix[start][index]\n            return\n        middle = (start + end) // 2\n        invert(matrix, start, middle, index, row_inv)\n        invert(matrix, middle + 1, end, index, row_inv)\n        row_inv[middle] = 0\n        for row in range(start, middle + 1):\n            for column in range(len(matrix[row])):\n                matrix[row][column] = 1 - matrix[row][column]\n        for row in range(middle + 1, end + 1):\n            for column in range(len(matrix[row])):\n                matrix[row][column] = 1 - matrix[row][column]\n        for row in range(start, end + 1):\n            for column in range(len(matrix[row])):\n                matrix[row][column] = 1 - matrix[row][column]\n\n    def sort(matrix: list[list[int]], n: int, m: int, row_inv: list[int]) -> None:\n        sorted_matrix = list(zip(*matrix))\n        for i in range(m):\n            if matrix[n - 1][i] == 1:\n                invert(matrix, 0, n - 1, i, row_inv)\n                invert(sorted_matrix, 0, n - 1, i, row_inv)\n            if sorted_matrix[i][n - 1] == 1:\n                invert(matrix, 0, n - 1, i, row_inv)\n                invert(sorted_matrix, 0, n - 1, i, row_inv)\n        return matrix, sorted_matrix\n\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    row_inv = [0 for _ in range(n)]\n    matrix, sorted_matrix = sort(matrix, n, m, row_inv)\n    if sorted_matrix[0]!= matrix[0]:\n        print(\"NO\")\n        return\n    row_inv = [0 for _ in range(m)]\n    matrix, sorted_matrix = sort(sorted_matrix, m, n, row_inv)\n    if sorted_matrix[0]!= matrix[0]:\n        print(\"NO\")\n        return\n    print(\"YES\")\n    for i in range(n):\n        print(\"\".join(map(str, row_inv)))\n    for i in range(m):\n        print(\"\".join(map(str, row_inv)))\n\n\nsolution(input())\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 2\n   ... 1 1\n   ... 0 1\n   ... ''')\n    'YES\\n10\\n10'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    a = [list(map(int, stdin.split('\\n')[i])) for i in range(1, n + 1)]\n    r = [0] * n\n    c = [0] * m\n    for j in range(m):\n        for i in range(n):\n            if a[i][j] == 0:\n                r[i] = 1\n            else:\n                r[i] = 0\n            if a[j][i] == 0:\n                c[i] = 1\n            else:\n                c[i] = 0\n    return 'YES\\n' + ''.join(map(str, r)) + '\\n' + ''.join(map(str, c))\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solve exercise.\n    :param stdin: str\n    :return: str\n    \"\"\"\n    n, m = list(map(int, stdin.split()))\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    matrix = np.array(matrix)\n\n    ans = \"\"\n    if m < 2 or n < 2:\n        ans = \"NO\"\n    else:\n        inv = []\n        for i in range(m):\n            row = matrix[:, i]\n            inv.append(np.any(row == 0))\n            if np.any(row == 0):\n                matrix[row == 0, i] = 1\n                matrix[row == 1, i] = 0\n        ans += \"YES\"\n        ans += \"\".join([\"0\" if x else \"1\" for x in inv])\n        inv = []\n        for i in range(n):\n            col = matrix[i, :]\n            inv.append(np.any(col == 0))\n            if np.any(col == 0):\n                matrix[i, col == 0] = 1\n                matrix[i, col == 1] = 0\n        ans += \"\\n\"\n        ans += \"\".join([\"0\" if x else \"1\" for x in inv])\n\n    return ans\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    return '\\n'.join((str(n == m == 1), ''.join(a[::-1]), ''.join(a[0][::-1])))\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for Day 2.\n\n    >>> solution(\"2 2\\n1 1\\n0 1\")\n    'YES\\n010\\n0000'\n    \"\"\"\n    n, m = list(map(int, stdin.split()))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    def inversions(a):\n        \"\"\"\n        Count the number of inversions for the matrix a.\n        \"\"\"\n        inv = 0\n        for i in range(n):\n            for j in range(m):\n                for k in range(j + 1, m):\n                    if a[i][j] == 1 and a[i][k] == 1:\n                        inv += 1\n        return inv\n\n    def is_sorted(a):\n        \"\"\"\n        Check whether the matrix is sorted.\n        \"\"\"\n        return all(a[i][j] <= a[i][j + 1] for i in range(n) for j in range(m - 1))\n\n    if is_sorted(a):\n        print(\"YES\")\n        print(\"010\" * m)\n        return\n\n    for i in range(n):\n        for j in range(m - 1):\n            if a[i][j] == 1 and a[i][j + 1] == 0:\n                a[i][j], a[i][j + 1] = 1, 0\n                if is_sorted(a):\n                    print(\"YES\")\n                    print(\"010\" * m)\n                    return\n                a[i][j], a[i][j + 1] = 0, 1\n\n    print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in stdin.split()])\n\n    a.sort(reverse=True)\n\n    inverted = False\n    for i in range(n):\n        inverted = not inverted\n        if inverted:\n            for j in range(m):\n                if a[i][j] == 0:\n                    a[i][j] = 1\n                else:\n                    a[i][j] = 0\n\n    for j in range(m):\n        inverted = not inverted\n        if inverted:\n            for i in range(n):\n                if a[i][j] == 0:\n                    a[i][j] = 1\n                else:\n                    a[i][j] = 0\n\n    for row in a:\n        print(''.join([str(x) for x in row]))\n\n    return ''\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    m1, m2 = [], []\n    for row in a:\n        m1.append(row.copy())\n        for i, val in enumerate(row):\n            row[i] = 0 if val == 1 else 1\n        m2.append(row.copy())\n    m1.sort(reverse=True)\n    m2.sort(reverse=True)\n    if m1!= m2:\n        return 'NO'\n    m1 = [x[0] for x in m1]\n    m2 = [x[0] for x in m2]\n    r = ''\n    for i, val in enumerate(m1):\n        r += '1' if val == 0 else '0'\n    c = ''\n    for j, val in enumerate(m2):\n        c += '1' if val == 0 else '0'\n    return r + '\\n' + c\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [list(map(int, row.split())) for row in stdin.split(\"\\n\")]\n    n, m = a[0]\n    matrix = [list(map(int, row)) for row in a[1:]]\n    # print(matrix)\n    result = \"YES\"\n    i = 0\n    while True:\n        if i == n:\n            break\n        for j in range(m):\n            if i + 1 < n:\n                if matrix[i][j] == 0 and matrix[i + 1][j] == 1:\n                    matrix[i][j] = matrix[i + 1][j] = 1\n                    matrix[i + 1][j] = 0\n                    # print(\"invert\")\n                    # print(matrix)\n                elif matrix[i][j] == 1 and matrix[i + 1][j] == 1:\n                    matrix[i][j] = matrix[i + 1][j] = 0\n                    matrix[i + 1][j] = 1\n                    # print(\"invert\")\n                    # print(matrix)\n        i += 1\n    # print(matrix)\n    i = 0\n    for row in matrix:\n        if i == 0:\n            if row!= sorted(row, reverse=True):\n                result = \"NO\"\n                break\n        else:\n            if row!= sorted(row):\n                result = \"NO\"\n                break\n        i += 1\n\n    return result\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    n = int(stdin)\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(stdin))\n\n    def inv(matrix: list, x: int, y: int):\n        matrix[x][y] = 1 - matrix[x][y]\n\n    def inv_col(matrix: list, x: int):\n        for i in range(n):\n            matrix[i][x] = 1 - matrix[i][x]\n\n    def inv_row(matrix: list, y: int):\n        for i in range(n):\n            matrix[y][i] = 1 - matrix[y][i]\n\n    def is_sorted(matrix: list):\n        matrix = list(zip(*matrix))\n        return sorted(matrix) == sorted(matrix, reverse=True)\n\n    # print(is_sorted(matrix))\n    if is_sorted(matrix):\n        print('YES')\n        print(''.join(str(x) for x in range(n))[::-1])\n        print(''.join(str(x) for x in range(n))[::-1])\n    else:\n        print('NO')"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def mat_to_array(mat: list) -> list:\n        return [int(n) for n in stdin.split(\"\\n\")[1:-1]]\n\n    def invert_row(mat: list, row: int):\n        for i, c in enumerate(mat[row]):\n            if c == 1:\n                mat[row][i] = 0\n            else:\n                mat[row][i] = 1\n\n    def invert_col(mat: list, col: int):\n        for i, r in enumerate(mat):\n            if r[col] == 1:\n                r[col] = 0\n            else:\n                r[col] = 1\n\n    n, m = [int(n) for n in stdin.split(\"\\n\")[0].split(\" \")]\n    mat = mat_to_array(stdin.split(\"\\n\")[1:-1])\n    inverted = False\n    for i in range(n):\n        row = mat[i]\n        if 1 in row:\n            inverted = True\n            break\n\n    for j in range(m):\n        col = [mat[i][j] for i in range(n)]\n        if 1 in col:\n            inverted = True\n            break\n\n    if not inverted:\n        return \"YES\"\n\n    invert_row(mat, i)\n    invert_col(mat, j)\n    for row in mat:\n        print(\"\".join(map(str, row)))\n\n    return \"NO\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    s.sort()\n    return 'Yes' if s[0] == '0' and len(s) > 1 else 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = list(stdin)\n    sum = 0\n    for i in range(len(num)):\n        sum += int(num[i])\n    if sum % 7 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"Yes\" if int(stdin) % 2 == 0 else \"No\"\n    return \"No\" if int(stdin) % 2 == 0 else \"Yes\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 100:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[0] == stdin[1] == stdin[2] else \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2 or len(stdin) > 10:\n        return 'No'\n    return 'Yes' if int(stdin[0]) <= int(stdin[1]) <= int(stdin[2]) <= int(stdin[3]) <= int(stdin[4]) <= int(stdin[5]) <= int(stdin[6]) <= int(stdin[7]) <= int(stdin[8]) <= int(stdin[9]) else 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = len(stdin)\n    if a == 1:\n        return \"Yes\"\n    else:\n        if int(stdin) % a == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) % 7 == 0 else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.count(stdin[0]) > len(stdin) // 2 else \"No\"\n\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 4:\n        return \"Yes\" if int(stdin) % 400 == 0 or int(stdin) % 4 == 0 else \"No\"\n    elif len(stdin) == 7:\n        return \"Yes\" if int(stdin) % 100 == 0 else \"No\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split(' '))\n    s = [int(i) for i in stdin.split(' ')[1].split(' ')]\n    dp = [0 for _ in range(n)]\n    dp[0] = 1\n    for i in range(1, n):\n        if s[i] == 1:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = max(dp[i - 1] + 1, dp[i - 2] + 1) if i >= 2 else dp[i - 1] + 1\n    return dp[-1]\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    pass_b = 0\n    pass_a = 0\n    b_max = b\n    a_max = a\n    for i, v in enumerate(lst):\n        if v == 0:\n            pass_a += 1\n            a_max = max(a_max, pass_a)\n        else:\n            pass_b += 1\n            b_max = max(b_max, pass_b)\n    return b_max + a_max\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(i) for i in stdin.split(' ')]\n    s = [int(i) for i in stdin.split(' ')[1:]]\n    last_charge = b\n    best_charge = last_charge\n    best_num = 0\n    for i in range(n):\n        if s[i] == 1:\n            if last_charge < b:\n                last_charge += 1\n                best_charge = max(best_charge, last_charge)\n            elif last_charge == b:\n                best_charge = max(best_charge, last_charge)\n            else:\n                last_charge -= 1\n        else:\n            last_charge -= 1\n            best_charge = max(best_charge, last_charge)\n        best_num = max(best_num, best_charge)\n    return str(best_num)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/trainingZDKS4N-8FQ/\n    '''\n    pass\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) solution\"\"\"\n    n, b, a = (int(i) for i in stdin.split())\n    s = [int(i) for i in stdin.split()[1:]]\n    # b = sum(s)\n    # a = b\n    b += 1\n    a += 1\n    s_cnt = 0\n    b_cnt, a_cnt = 0, 0\n    b_used, a_used = False, False\n    i = 0\n    while i < n:\n        if s_cnt == 0:\n            if s[i] == 1:\n                b_cnt = b\n                if a_cnt == 0:\n                    a_cnt += 1\n            else:\n                a_cnt = a\n            s_cnt += 1\n        else:\n            if b_cnt > 0:\n                b_cnt -= 1\n            else:\n                if a_cnt > 0:\n                    a_cnt -= 1\n                    s_cnt -= 1\n                else:\n                    break\n        i += 1\n    return i\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split(' ')))\n    d = [0 for _ in range(n)]\n    s = list(map(int, stdin.split(' ')))\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    for i in range(n):\n        d[i] = i\n        dp[i % 2][i] = s[i] * (b + i) + a * (n - i)\n    dp = np.array(dp)\n    d = np.array(d)\n    result = np.max(np.sum(dp, axis=1))\n    d[0] = 0\n    for i in range(1, n):\n        if dp[d % 2][d - 1] < dp[d % 2][d]:\n            d = d - 1\n            result = max(result, np.sum(dp, axis=1)[d])\n    return str(result)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(s) for s in stdin.split(\" \")]\n    s = [int(s) for s in stdin.split(\" \")]\n    b -= 1\n    a -= 1\n    # print(n, b, a, s)\n\n    dp = [[0] * (n + 1) for _ in range(2)]\n    for i in range(1, n + 1):\n        # dp[0][i] = max(dp[0][i - 1], dp[1][i - 1])\n        dp[0][i] = dp[1][i - 1]\n        if s[i - 1] == 0:\n            dp[0][i] += a\n        else:\n            dp[0][i] += b\n        if i < n:\n            dp[1][i] = max(dp[1][i - 1] + s[i - 1], dp[0][i - 1] + s[i - 1])\n    return dp[0][-1]\n\n\n\n'''\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    source = list(map(int, stdin.split()))\n    m, b, a = source[0], source[1], source[2]\n    exposed = list(map(int, stdin.split()))\n    i = 0\n    res = 0\n    b_use, a_use = 0, 0\n    b_remain, a_remain = b, a\n    while i < m:\n        if exposed[i] == 1:\n            if b_remain >= 1:\n                b_remain -= 1\n                res += 1\n            else:\n                res += 1\n            a_use = 1\n            a_remain -= 1\n            i += 1\n        else:\n            if a_remain >= 1:\n                a_remain -= 1\n                i += 1\n            else:\n                i += 1\n            if b_use == 0:\n                b_use = 1\n                b_remain -= 1\n            if a_use == 0:\n                a_use = 1\n                a_remain -= 1\n            if b_use + a_use == 2:\n                b_remain -= 1\n                a_remain -= 1\n                res += 1\n    return res\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return eval(stdin)\n\n\nassert solution(\"8-7+6-5+4-3+2-1-0\") == 4\nassert solution(\"2+2\") == -46\nassert solution(\"112-37\") == 375\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('-'))\n    return str(a + b)\n----\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return 0\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return eval(stdin)\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split('-')) == 2:\n        return str(-int(stdin.split('-')[0]) + int(stdin.split('-')[1]))\n    elif stdin.count('+') == 0:\n        return stdin.split('-')[0]\n    elif stdin.count('-') == 0:\n        return str(int(stdin.split('-')[0]) - int(stdin.split('-')[1]))\n    else:\n        return str(int(stdin.split('-')[0]) - int(stdin.split('-')[1]))\n\nprint(solution(input()))"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    string = stdin\n    lst = [int(i) for i in string.split('-')]\n    print(lst[0]-sum(lst[1:]))"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    i = 0\n    while stdin[i]!='':\n        i += 1\n    if stdin[i+1] == '-':\n        if stdin[i+2] == '-':\n            return int(stdin[:i])\n        else:\n            return int(stdin[i+1:])\n    else:\n        if stdin[i+2] == '-':\n            return -int(stdin[:i])\n        else:\n            return int(stdin[i+1:])\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        pairs.append((a, b))\n\n    b_cnt = Counter()\n    g_cnt = Counter()\n\n    for a, b in pairs:\n        b_cnt[a] += 1\n        g_cnt[b] += 1\n\n    ans = []\n    for a, b in pairs:\n        if g_cnt[a] == 1 or b_cnt[b] == 1:\n            ans.append((a, b))\n    if len(ans) == len(pairs):\n        return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, a)) for a in ans)\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, stdin.split())))\n    colors = set(range(1, k+1))\n    for l in lst:\n        if l[0] in colors and l[1] in colors:\n            colors.remove(l[0])\n            colors.remove(l[1])\n    if len(colors) > 0:\n        return 'NO'\n    colors = set(range(1, k+1))\n    for l in lst:\n        if l[0] in colors and l[1] in colors:\n            colors.remove(l[0])\n            colors.remove(l[1])\n    if len(colors) > 0:\n        return 'NO'\n    for i in range(n-1):\n        if lst[i][0] in colors and lst[i+1][0] in colors:\n            colors.remove(lst[i][0])\n            colors.remove(lst[i+1][0])\n    if len(colors) > 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if k > n * (n - 1) // 2:\n        print(\"NO\")\n        return\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i < j and (b[i] == b[j] or g[i] == g[j]):\n                continue\n            if i < j and b[i] == g[j] and g[i] == b[j]:\n                continue\n            print(\"YES\")\n            print(str(b[i]) + \" \" + str(g[i]))\n            print(str(b[j]) + \" \" + str(g[j]))\n            return\n    print(\"NO\")\n    return"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    boys = [None] * n\n    girls = [None] * n\n    for i in range(n):\n        boy, girl = map(int, stdin.split(' '))\n        boys[i] = boy\n        girls[i] = girl\n    solution = ''\n    for i in range(n - 1):\n        # no two consecutive pairs have same color\n        if boys[i] == boys[i + 1]:\n            solution = 'NO'\n            break\n    if solution == '':\n        for i in range(n - 1):\n            # no two consecutive pairs have same color\n            if girls[i] == girls[i + 1]:\n                solution = 'NO'\n                break\n    if solution == '':\n        for i in range(n):\n            if i == 0:\n                boys_color = [boys[i], boys[i + 1]]\n                girls_color = [girls[i], girls[i + 1]]\n            elif i == n - 1:\n                boys_color = [boys[i - 1], boys[i]]\n                girls_color = [girls[i - 1], girls[i]]\n            else:\n                boys_color = [boys[i - 1], boys[i], boys[i + 1]]\n                girls_color = [girls[i - 1], girls[i], girls[i + 1]]\n            # colors of males and females are different\n            if boys_color[0] == boys_color[1]:\n                solution = 'NO'\n                break\n            if girls_color[0] == girls_color[1]:\n                solution = 'NO'\n                break\n    if solution == '':\n        solution = 'YES'\n    return solution\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n2 1\\n1 3\\n3 2\\n2 3\\n1 2\\n3 1\\n1 2\\n3 2\\n2 3\\n3 1\\n1 3\\n3 2\\n2 3\\n1 3\\n3 1\")\n    YES\n    >>> solution(\"4 2\\n2 1\\n1 3\\n3 2\\n2 3\\n1 2\\n3 1\\n1 2\\n3 2\\n2 3\\n3 1\")\n    NO\n    >>> solution(\"10 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n3 2\\n2 3\\n3 2\\n3 1\\n1 3\\n2 3\\n2 4\\n4 1\\n1 4\\n3 1\\n3 2\\n2 3\\n3 2\\n4 1\\n2 3\\n4 3\\n4 2\")\n    YES\n    >>> solution(\"13 4\\n2 1\\n1 3\\n4 2\\n3 4\\n4 3\\n3 2\\n2 4\\n4 1\\n1 4\\n3 1\\n3 2\\n2 3\\n3 2\\n4 1\\n2 3\\n4 3\\n4 2\")\n    NO\n    \"\"\"\n    n, k = map(int, stdin.readline().split())\n    visited = [False for _ in range(k + 1)]\n    valid = True\n    for _ in range(n):\n        b, g = map(int, stdin.readline().split())\n        if b == g or (visited[b] and visited[g]):\n            valid = False\n            break\n        visited[b] = True\n        visited[g] = True\n\n    if valid:\n        print(\"YES\")\n        for i in range(1, k + 1):\n            if visited[i]:\n                print(i, end=\" \")\n        print()\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    n, k = list(map(int, stdin.split()))\n    if n == 1:\n        return \"YES\"\n    answers = []\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            if i == j:\n                continue\n            if i == 1 or j == 1:\n                if i == j:\n                    continue\n                answers.append((i, j))\n            else:\n                break\n    if not answers:\n        return \"NO\"\n    for a in answers:\n        if any(i == j for i, j in zip(a, a[1:])):\n            continue\n        if a[0] == 1 or a[1] == 1:\n            if a[0] == a[1]:\n                continue\n            if a[0] == 1 and a[1] == k:\n                continue\n            if a[0] == k and a[1] == 1:\n                continue\n        if a[0] == a[1]:\n            continue\n        if a[0] == 1 and a[1] == k:\n            continue\n        if a[0] == k and a[1] == 1:\n            continue\n        if a[0] == a[1] - 1:\n            continue\n        if a[0] == a[1] + 1:\n            continue\n    return \"YES\\n\" + '\\n'.join(map(str, answers))"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    if k == n:\n        return \"YES\"\n    if n == 2:\n        return \"YES\"\n    d = {}\n    for i in range(n):\n        b, g = map(int, stdin.split()[i * 2: i * 2 + 2])\n        if b not in d:\n            d[b] = []\n        if g not in d:\n            d[g] = []\n        d[b].append(i)\n        d[g].append(i)\n    d_rev = {}\n    for i in range(n):\n        if d[i + 1]:\n            if len(d[i + 1]) == 1:\n                d_rev[i + 1] = d[i + 1][0]\n            else:\n                d_rev[i + 1] = [d[i + 1][0], d[i + 1][-1]]\n    for b in range(1, k + 1):\n        if b not in d_rev:\n            continue\n        g = d_rev[b]\n        if len(g) == 1:\n            if g[0] in d:\n                return \"NO\"\n        else:\n            if g[0] in d:\n                if g[0] == g[1]:\n                    return \"NO\"\n                if g[0] in d[g[1]]:\n                    return \"NO\"\n                if g[1] in d[g[0]]:\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return 'YES\\n' + '\\n'.join(map(str, [i, k - i]))\n\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = tuple(map(int, stdin.split()))\n    if n < 2 or k < 2:\n        return \"NO\"\n    if k == 2:\n        return \"YES\"\n    result = []\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            if i == j or i == k - j + 1:\n                continue\n            if all(i % 2 == 0 for i in (i, j, k - j + 1)):\n                result.append([i, j])\n    if len(result) == 0:\n        return \"NO\"\n    return \"YES\\n\" + '\\n'.join([' '.join(str(i) for i in r) for r in result])\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    d = {}\n    for i in range(1, k + 1):\n        d[i] = []\n    for i in range(n):\n        d[int(stdin.split(' ')[i * 2])].append(int(stdin.split(' ')[i * 2 + 1]))\n    for i in range(1, k + 1):\n        if len(d[i]) < i:\n            return 'NO'\n    for i in range(1, k + 1):\n        for j in range(i + 1, k + 1):\n            if len(d[i]) > i:\n                for x in d[i]:\n                    if x in d[j]:\n                        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    \n    if x < k:\n        print(0)\n        return 0\n    if n == k:\n        print(sum(a))\n        return sum(a)\n    \n    b = [0] + a\n    res = 0\n    for i in range(k, n+1):\n        tmp = sum(b[i-k+1:i+1])\n        res = max(tmp, res)\n        if tmp >= x:\n            break\n    if res >= x:\n        print(res)\n        return res\n    else:\n        print(-1)\n        return -1\n    \n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    def check(num):\n        repost = 0\n        for i in range(num, n):\n            if repost < x and a[i] >= a[i-num]:\n                repost += 1\n        return repost >= x\n\n    lo = 0\n    hi = n\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if check(mid):\n            lo = mid + 1\n        else:\n            hi = mid\n    return hi-1\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    def insert(arr, n, m, i):\n        if m == 0:\n            arr.insert(0, i)\n        elif m == n:\n            arr.append(i)\n        else:\n            arr[m] = i\n    def remove(arr, m, n):\n        if m == n:\n            arr.pop()\n        else:\n            arr[m] = -1\n    arr = []\n    n, m, k, x = map(int, stdin.split(\" \"))\n    for i in stdin.split(\" \"):\n        arr.append(int(i))\n    if n == 1:\n        if m == 1:\n            return -1\n        else:\n            if k == x:\n                return -1\n            else:\n                if max(arr) > m - k:\n                    return -1\n                else:\n                    return max(arr)\n    else:\n        arr.sort()\n        max_beauty = 0\n        for i in range(n):\n            if i < m:\n                max_beauty = max(arr[i], max_beauty)\n            else:\n                if max_beauty >= x:\n                    return max_beauty\n                insert(arr, n, i, max_beauty + 1)\n                max_beauty += 1\n                remove(arr, i, n)\n        return -1\n\n    return \"\"\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n, k, x = [int(n) for n in stdin.split()]\n    beauty = [int(n) for n in stdin.split()]\n    \n    if x < n - k + 1:\n        return -1\n    \n    # find all possible ways to choose k pics\n    if k == 1:\n        return max(beauty)\n    \n    def dfs(i, j):\n        nonlocal k, x, beauty\n        if k == 1:\n            return\n        \n        if i + k - 1 >= n:\n            return\n        \n        res = max(res, dfs(i + k, j))\n        res = max(res, dfs(i + k, j + k))\n        res = max(res, dfs(i + k, j + k * 2))\n        return res\n    \n    res = 0\n    dfs(0, 0)\n    \n    return res\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string containing a converted version of stdin\n    \n    The format of stdin is as follows:\n        Line 1: Three integers.\n        Line 2: An array of integers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    arr.sort()\n\n    left = 0\n    right = arr[-1] - arr[0]\n    ans = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        tmp = sum(arr[i] for i in range(n) if arr[i] <= mid)\n        if tmp >= k and x >= tmp:\n            ans = max(ans, tmp)\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return ans\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum possible sum of reposted pictures if Vova follows conditions\n    described in the problem statement.\n\n    >>> solution('5 2 3\\n5 1 3 10 1\\n')\n    '18'\n    >>> solution('6 1 5\\n10 30 30 70 10 10\\n')\n    '-1'\n    \"\"\"\n\n    k, x, *data = [int(x) for x in stdin.split()]\n    data = [int(x) for x in data]\n\n    stdin = [0] * (data[-1] + 1)\n    stdin[0] = data[0]\n\n    for i in range(1, len(data)):\n        stdin[i] = stdin[i - 1] + data[i]\n\n    curr, result = 0, 0\n    for i in range(k - 1, len(stdin) - x + 1):\n        curr = stdin[i] - stdin[i - k]\n        if curr > result:\n            result = curr\n\n    return result if result!= 0 else -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input and returns solution of the problem\n    \"\"\"\n    n, k, x = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    a.sort()\n    b = [i for i in range(1, n + 1)]\n    b.sort()\n    print(b)\n    print(a)\n    return str(a[0]*b[0])\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  lines = stdin.split('\\n')\n  n, k, x = map(int, lines[0].split())\n  pic_value = [int(v) for v in lines[1].split()]\n\n  left = 0\n  right = k - 1\n  res = 0\n  while right < n:\n    if pic_value[right] >= pic_value[left]:\n      res += pic_value[left]\n      left += 1\n    right += 1\n  if left < x:\n    return '-1'\n  return str(res)\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"print a\"\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    if K == 1:\n        return N\n\n    def get_cost(cost, i, max_cost):\n        if max_cost - 1 >= i:\n            return cost + K - 1\n        else:\n            return cost + (i - max_cost)\n\n    cost = 0\n    max_cost = 0\n    for i in range(1, N + 1):\n        if i == 1:\n            cost = K\n        elif i == N:\n            cost = K\n        else:\n            cost = max(get_cost(cost, i - 1, max_cost), get_cost(cost, i + 1, max_cost))\n\n        if stdin[i - 1] == \"1\":\n            max_cost = max(max_cost, i)\n\n    return cost\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum total cost of connecting all rooms to the Internet.\n    \"\"\"\n    # Read input\n    n, k = [int(x) for x in stdin.split()]\n    roads = [int(x) for x in stdin.split()]\n    # One pass through roads to count the maximum number of routers\n    max_roads = 0\n    for i in range(n):\n        if roads[i] == 1:\n            max_roads += 1\n    # And now we need to count the cost of making all connections\n    cost = 0\n    i = 0\n    while i < n:\n        if roads[i] == 1:\n            # Connect rooms i and i + 1\n            j = max(1, i - k)\n            k = min(n, i + k)\n            cost += (k - j)\n            # Connect all i to i + max_roads\n            cost += (j - 1) * max_roads\n            # Increase i\n            i += max_roads + 1\n        else:\n            # Connect room i to the next one\n            cost += 1\n            i += 1\n    return cost\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rooms, routers = stdin.split(' ')\n    rooms = int(rooms)\n    routers = int(routers)\n    lst = []\n    for i in stdin:\n        lst.append(i)\n    lst = [0 if i == '0' else 1 for i in lst]\n    connections = []\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            connections.append(i + 1)\n    if len(connections) == 0:\n        return 0\n    else:\n        connections.append(rooms)\n        connections.sort()\n    routers = routers if len(connections) - 1 >= routers else len(connections) - 1\n    cost = []\n    for i in range(routers + 1):\n        if i == 0:\n            cost.append(0)\n        else:\n            lst = []\n            for j in range(len(connections) - 1):\n                if connections[j] < connections[j + 1]:\n                    lst.append(connections[j + 1] - connections[j])\n                else:\n                    lst.append(connections[j] - connections[j - 1])\n            lst = [0 if i == 1 else i for i in lst]\n            cost.append(min(lst))\n    total_cost = sum(cost)\n    return total_cost\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = [int(x) for x in stdin.split(' ')]\n    rooms = [0] * n\n    for i, x in enumerate(stdin):\n        rooms[i] = int(x)\n    res = 0\n    for i in range(n):\n        res += i * rooms[i]\n        if rooms[i] == 0:\n            res += k\n        else:\n            for j in range(max(0, i - k), min(i + k, n)):\n                if rooms[j]!= 0:\n                    res += 1\n    return res\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.readline().split(' '))\n    rooms = list(map(int, stdin.readline().rstrip()))\n    router_cost = 0\n    cost = 0\n    router_place = 0\n    for i in range(n):\n        if rooms[i] == 1:\n            router_cost += k\n            if router_place == 0:\n                router_place = i\n        else:\n            router_cost = 0\n            router_place = 0\n        cost += router_cost\n    return cost\n    '''\n\n    '''\n    n, k = map(int, stdin.readline().split(' '))\n    rooms = list(map(int, stdin.readline().rstrip()))\n    router_cost = 0\n    cost = 0\n    router_place = 0\n    for i in range(n):\n        if rooms[i] == 1:\n            if i == 0:\n                router_cost += k\n            elif i == n - 1:\n                router_cost += k\n            else:\n                router_cost += k\n                router_cost += rooms[i - 1]\n                router_cost += rooms[i + 1]\n        else:\n            router_cost = 0\n            router_place = 0\n        cost += router_cost\n    return cost\n    '''\n\n    n, k = map(int, stdin.readline().split(' '))\n    rooms = list(map(int, stdin.readline().rstrip()))\n    router_cost = 0\n    cost = 0\n    router_place = 0\n    for i in range(n):\n        if rooms[i] == 1:\n            if i == 0:\n                router_cost += k\n            elif i == n - 1:\n                router_cost += k\n            else:\n                router_cost += k\n                router_cost += max(rooms[i - 1], rooms[i + 1])\n        else:\n            router_cost = 0\n            router_place = 0\n        cost += router_cost\n    return cost\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l1, l2 = [int(i) for i in stdin.split('\\n')]\n    return sum(max(l1 - k, 0) + min(l1 + k, l2) for k in range(1, 2 * 10 ** 5 + 1))"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    cost = 0\n    routers = stdin.split('0')\n    for i in range(n):\n        cost += i * int(routers[i])\n    routers = list(map(int, stdin.split('0')))\n    for i in range(n):\n        for j in range(max(1, i - k), min(n, i + k)):\n            if i!= j:\n                cost += min(routers[i], routers[j])\n    return cost\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    while True:\n        try:\n            for i in range(len(S)):\n                if S[i] == S[i+1]:\n                    S = S[:i] + T[i] + S[i+1:]\n                elif T[i] == T[i+1]:\n                    T = T[:i] + S[i] + T[i+1:]\n            if S == T:\n                break\n        except IndexError:\n            break\n    print(\"Yes\" if S == T else \"No\")\n    return \"\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    mapping = {}\n    for s_char, t_char in zip(s, t):\n        if s_char!= t_char:\n            mapping[s_char] = t_char\n    for s_char in s:\n        if s_char not in mapping:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    if len(s)!= len(t):\n        print('No')\n        return\n    if s == t:\n        print('Yes')\n        return\n    s_set = set(s)\n    t_set = set(t)\n    if s_set!= t_set:\n        print('No')\n        return\n    s_counter = {}\n    t_counter = {}\n    for item in s:\n        if item in s_counter:\n            s_counter[item] += 1\n        else:\n            s_counter[item] = 1\n    for item in t:\n        if item in t_counter:\n            t_counter[item] += 1\n        else:\n            t_counter[item] = 1\n    for item in s_counter:\n        if item not in t_counter:\n            print('No')\n            return\n        if s_counter[item]!= t_counter[item]:\n            print('No')\n            return\n    print('Yes')\n    return\nsolution(stdin)\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[0] == stdin[1] else 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    for x, y in zip(s, t):\n        if s.count(x)!= t.count(x) or t.count(x)!= t.count(y):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.splitlines()\n    a = input_[0]\n    b = input_[1]\n    if len(set(a))!= len(a) or len(set(b))!= len(b):\n        print(\"No\")\n        return\n    if len(set(a))!= len(set(b)):\n        print(\"No\")\n        return\n    a_list = list(a)\n    b_list = list(b)\n    a_dict = dict(zip(a_list, b_list))\n    if len(a)!= len(b):\n        print(\"No\")\n        return\n    for key, val in a_dict.items():\n        if key not in a or val not in b:\n            print(\"No\")\n            return\n    print(\"Yes\")\n    return\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split('\\n')\n    S, T = list(S), list(T)\n    if len(S)!= len(T):\n        return 'Yes' if len(S) < len(T) else 'No'\n    for c in set(T):\n        if T.count(c)!= S.count(c):\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # import re\n    # import string\n    # a, b = stdin.split()\n    # char = string.ascii_lowercase\n    # l1, l2 = [], []\n    # for i in a:\n    #     if i not in char:\n    #         l1.append(i)\n    #     else:\n    #         l2.append(i)\n    # for i in b:\n    #     if i not in char:\n    #         l1.append(i)\n    #     else:\n    #         l2.append(i)\n    # for i in l1:\n    #     if i not in l2:\n    #         return \"No\"\n    # return \"Yes\"\n    import re\n    a, b = stdin.split()\n    return 'Yes' if re.sub('(?<=\\w)([^\\w]+)', lambda m: m.group(1).swapcase(), a, 1) == \\\n           re.sub('(?<=\\w)([^\\w]+)', lambda m: m.group(1).swapcase(), b, 1) else 'No'"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip('\\n')\n    return 'Yes' if len(set(s)) == 1 else 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    T = stdin[1]\n    return \"Yes\" if S == T else \"No\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass  # your code here\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    M = int(lines[0])\n    N = int(lines[1])\n    C = list(map(int, lines[2].split()))\n    A = list(map(int, lines[3].split()))\n\n    def func(k: int, c: int, a: int) -> int:\n        return (c ** k) * (a + k * (k - 1)) // 2\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    X = lcm(M, N)\n    res = 0\n\n    for m in range(M, 0, -1):\n        for n in range(N, 0, -1):\n            m_n = lcm(m, n)\n            if m_n < X:\n                continue\n            for k in range(1, m + 1):\n                x = func(k, C[m], A[m])\n                if x >= X:\n                    res += 1\n                    break\n                if x >= m_n:\n                    res += 1\n                    break\n            else:\n                continue\n            break\n        else:\n            continue\n        break\n\n    return str(res)\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here.\n    return 'yes'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, res))"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format()\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of problems that needs to be solved in order to have a total score of G or more points.\"\"\"\n    # get inputs\n    # parse inputs\n    D, G = map(int, stdin.split(\" \"))\n    problems = [list(map(int, problem.split(\" \"))) for problem in stdin.split(\"\\n\")]\n    problems.pop(0)\n    #solve\n    base_scores = [sum([100 * problem[0] for problem in problems if problem[1] == 100])]\n    perfect_bonus = [sum([100 * problem[0] for problem in problems if problem[1] == 100])]\n    for i in range(1, D):\n        base_scores.append(base_scores[i - 1] + 100 * problems[i][0])\n        perfect_bonus.append(perfect_bonus[i - 1] + 100 * problems[i][0])\n    base_scores.append(0)\n    perfect_bonus.append(0)\n    total = 0\n    for i in range(D):\n        if total + perfect_bonus[i] >= G:\n            return i\n        else:\n            total += base_scores[i]\n\nprint(solution(stdin))"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solution_helper(D, G):\n        count = 0\n        while D >= 1:\n            if D % 2 == 0:\n                count += D // 2\n                D //= 2\n            else:\n                count += D // 2 + 1\n                D //= 2\n        return count >= G\n\n    D, G = list(map(int, stdin.split()))\n    ans = 1\n    while True:\n        if solution_helper(D, G * 100):\n            break\n        ans += 1\n    return ans\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_array = [int(x) for x in stdin.split('\\n') if x]\n    d, g = input_array[0:2]\n    problems = input_array[2:]\n    total = 0\n    perfects = 0\n    for problem in problems:\n        if problem == 100:\n            perfects += 1\n            total += (perfects * problem)\n        else:\n            total += problem\n            perfects = 0\n    total += perfects * g\n    return str(total >= g)\n    # if total >= g:\n    #     return str(total)\n    # else:\n    #     return str(total - g)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, g = [int(n) for n in stdin.split(' ')]\n    dp = [0] * (n + 1)\n    dp[0] = g\n    dp[1] = g + 1\n    for i in range(2, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2] + g) + 1\n\n    return dp[-1]"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # D, G = input().split(' ')\n    D, G = stdin.split(' ')\n    D, G = int(D), int(G)\n    p, c = [], []\n    for i in range(D):\n        p_i, c_i = input().split(' ')\n        p_i, c_i = int(p_i), int(c_i)\n        p.append(p_i)\n        c.append(c_i)\n    total_score = 0\n    perfect_score = 0\n    for i in range(D):\n        if p[i] * c[i] < G:\n            # total_score += p[i] * c[i]\n            if p[i] * 100 <= c[i]:\n                perfect_score += c[i]\n            else:\n                total_score += p[i] * 100\n    return str(total_score + perfect_score)\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    scores = [0] * (D + 1)\n    for line in stdin.splitlines()[1:]:\n        x, y = map(int, line.split())\n        scores[x] += y\n    ans = sum(scores)\n    for x in range(1, D + 1):\n        if scores[x] == 0:\n            continue\n        ans += min(G // 100, scores[x])\n        G -= scores[x] * min(G // 100, scores[x])\n        if G <= 0:\n            break\n    return ans"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of problems that needs to be solved in order to have a total score of G or more points.\"\"\"\n    D, G = [int(x) for x in stdin.splitlines()[0].split(' ')]\n    total_score = 0\n    perfect_bonus = 0\n    for problem_number, problem_score in enumerate(stdin.splitlines()[1:], 1):\n        number, score = problem_number, int(problem_score.split(' ')[0])\n        perfect_bonus += score if score == 100 else 0\n        total_score += score\n        if total_score >= G:\n            break\n    return str(number + perfect_bonus // 100)\n\nprint(solution('''\n3 700\n3 500\n5 800\n'''))\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    total_score = int(stdin.readline().strip().split()[1])\n    problems_score = {problem[0]: int(problem[1]) for problem in [problem.strip().split() for problem in stdin.readlines()]}\n    print(problems_score)\n    total_problems = 0\n    for key, value in problems_score.items():\n        if value == 100:\n            if total_score - 100 >= 0:\n                total_score -= 100\n                total_problems += 1\n            else:\n                total_problems += total_score // 100\n                total_score %= 100\n                break\n        elif value == 200:\n            if total_score - 200 >= 0:\n                total_score -= 200\n                total_problems += 1\n            else:\n                total_problems += total_score // 200\n                total_score %= 200\n                break\n    return total_problems\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.readline().split())\n    p = []\n    c = []\n    for i in range(D):\n        p_i, c_i = map(int, stdin.readline().split())\n        p.append(p_i)\n        c.append(c_i)\n    total_score = 0\n    for i in range(D):\n        total_score += p[i] * (100 * (1 + i))\n    for j in range(1, D + 1):\n        if j == 1:\n            perfect_bonus = 100 * j\n        else:\n            perfect_bonus = 100 * j * j\n        if j * 100 < G:\n            if j * 100 >= p[j - 1]:\n                total_score += perfect_bonus\n            else:\n                total_score += 100 * j\n    return total_score"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '2'\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    odd_sum = 0\n    even_sum = sum(a)\n    for i in range(n - 1):\n        if a[i] % 2 == 0:\n            even_sum -= a[i]\n        else:\n            odd_sum += a[i]\n    return str(min(odd_sum, even_sum))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = int(stdin.readline())\n    # a = [int(x) for x in stdin.readline().split()]\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    even_count, odd_count = 0, 0\n    for i in range(n):\n        if i % 2:\n            even_count += a[i]\n        else:\n            odd_count += a[i]\n    return odd_count + even_count\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) time and O(N) space\"\"\"\n    n = int(stdin.readline())\n    candy_weights = [int(weight) for weight in stdin.readline().split()]\n    n_of_candy_weighs = 0\n    for candy_weight in candy_weights:\n        if candy_weight % 2 == 0:\n            n_of_candy_weighs += candy_weight\n    return str(n_of_candy_weighs)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    def eat_even(sum_odd, num_good):\n        if sum_odd > num_good:\n            return False\n        if sum_odd == num_good:\n            return True\n\n        for i in range(0, len(a)):\n            if a[i] < sum_odd:\n                a[i] = sum_odd\n                if eat_even(sum_odd, num_good):\n                    return True\n                a[i] = sum_odd - a[i]\n            elif a[i] == sum_odd:\n                return True\n        return False\n\n    def eat_odd(sum_odd, num_good):\n        if sum_odd > num_good:\n            return False\n        if sum_odd == num_good:\n            return True\n\n        for i in range(0, len(a)):\n            if a[i] < sum_odd:\n                a[i] = sum_odd\n                if eat_odd(sum_odd, num_good):\n                    return True\n                a[i] = sum_odd - a[i]\n            elif a[i] == sum_odd:\n                return True\n        return False\n\n    num_good = 0\n    sum_odd = 0\n    for i in range(0, len(a)):\n        if i % 2 == 0:\n            sum_odd += a[i]\n            if eat_even(sum_odd, n - 1):\n                num_good += 1\n        else:\n            sum_odd += a[i]\n            if eat_odd(sum_odd, n - 1):\n                num_good += 1\n    return str(num_good)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    good_candy_indices = []\n    good_candy_weights = []\n    sum_weights_even = 0\n    sum_weights_odd = 0\n    for index, weight in enumerate(map(int, stdin.readline().split(' '))):\n        sum_weights_odd += weight\n        if index % 2 == 0:\n            sum_weights_even += weight\n        if index % 2 == 1 and index!= n - 1:\n            good_candy_indices.append(index)\n            good_candy_weights.append(sum_weights_even - weight)\n    return str(len([index for index, weight in zip(good_candy_indices, good_candy_weights) if weight!= 0]))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of candies good if dad eats them all\"\"\"\n    candy_count = int(stdin)\n    weight_count = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    odd_sum = sum([weight_count[x] for x in range(candy_count) if x % 2])\n    even_sum = sum([weight_count[x] for x in range(candy_count - 1) if x % 2])\n    return str(candy_count - 1 - abs(odd_sum - even_sum))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip().split(\"\\n\")\n    n = int(line[0])\n    good_candies = set()\n    good_candies.add(1)\n    weights = list(map(int, line[1].split()))\n    total = [0, 0]\n    for weight in weights:\n        total[0] += weight\n        if weight % 2 == 0:\n            total[1] += weight\n        if total[0] - weight in good_candies:\n            good_candies.add(weight)\n        if total[1] - weight in good_candies:\n            good_candies.add(weight)\n    good_candies.remove(1)\n    print(len(good_candies))\n    return \"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k, x = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    answer = -1\n\n    if n <= k + x:\n        return answer\n\n    if k * x > sum(a):\n        return answer\n\n    b = [0] * n\n    for i in range(1, n):\n        b[i] = a[i - 1] - a[i]\n    b.sort(reverse=True)\n    for i in range(0, n):\n        for j in range(0, i):\n            if k <= i - j <= x:\n                answer = max(answer, a[j] + b[i - j - 1])\n\n    return str(answer)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # \uc810\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uc815\ub82c\ud558\uae30\n    # \uc815\ub82c \uc2dc\uc5d0 \uc810\uc218\ub97c \ub530\ub85c \uc9c0\uc815\ud574\uc11c \uc815\ub82c\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud560 \uac83 \uac19\ub2e4.\n\n    n, k, x = map(int, stdin.readline().split())\n    scores = list(map(int, stdin.readline().split()))\n    scores = sorted(scores, reverse=True)\n    sum_score = 0\n    cnt = 0\n\n    # \ubc18\ubcf5\ubb38\uc73c\ub85c \ud655\uc778\ud558\ub294 \ubc29\ubc95\n    # \uc810\uc218\uac00 \uac00\uc7a5 \ud070 \ubc18\ubcf5\ubb38 \ub9e8 \uc55e\uc5d0 \uc810\uc218\ub97c \ub354\ud574\uc8fc\uace0, \uadf8 \uc810\uc218\uc758 \uc778\ub371\uc2a4\ub97c cnt\uc5d0 \uc800\uc7a5\ud558\uace0\n    # \uc774\ub97c \uc810\uc218\ub97c \uae30\uc900\uc73c\ub85c \uc815\ub82c\ud574\uc90c.\n    # \uc774\ub97c \ud55c \ubc88 \ubc18\ubcf5\ud558\uba74 \ubc18\ubcf5\ubb38\uc758 \ub9c8\uc9c0\ub9c9 \uac12\uc744 \ubc14\ub85c \uc810\uc218\ub85c \ubc14\uafd4\uc8fc\uace0 \uc774\ub97c \ubc18\ubcf5\ubb38 \ub9c8\uc9c0\ub9c9\uc5d0 \uc800\uc7a5\ud574\uc90c.\n    # \uc774\ub294 \uadf8\ub7f0\ub370 \ubc18\ubcf5\ubb38 \ub9e8 \ucc98\uc74c\uc5d0\ub294 \uac00\uc7a5 \ud070 \uc810\uc218\ub97c \ubc18\ubcf5\ubb38 \ub9e8 \uc55e\uc5d0 \uc800\uc7a5\ud574\ub193\uc740 cnt\ub97c \ud1b5\ud574 \uac00\uc7a5 \ud070 \uc810\uc218\ub97c \ubc14\ub85c \uc800\uc7a5\ud558\uba74 \ub41c\ub2e4.\n    for i in scores:\n        if cnt < x and cnt + 1 < k:\n            sum_score += i\n            cnt += 1\n        elif cnt < x:\n            sum_score += i\n            cnt += 1\n        else:\n            break\n    if sum_score < 1:\n        print(-1)\n    else:\n        print(sum_score)\n\n    # \uc815\ub82c\ud560 \ub54c \uc810\uc218\ub97c \uc774\uc6a9\ud574\uc11c \uac00\uc7a5 \ud070 \uc810\uc218\ub97c \ubc14\ub85c \uc800\uc7a5\ud574\uc8fc\uba74 \ub41c\ub2e4.\n    # \uc774\ub97c \ubc18\ubcf5\ubb38\uc73c\ub85c \ud558\uba74\uc11c \uac00\uc7a5 \ud070 \uc810\uc218\ub97c \uc800\uc7a5\ud558\uba74 \ub41c\ub2e4.\n    # \ubc18\ubcf5\ubb38\uc758 \ub9c8\uc9c0\ub9c9 \uc704\uce58\ub97c \uc800\uc7a5\ud574\uc8fc\uba74 \ub41c\ub2e4.\n    # \uadf8\ub9ac\uace0 \uc774\ub97c \uc774\uc6a9\ud574\uc11c \ub2e4\uc74c \ud655\uc778\ud558\ub294 \uc870\uac74\ubb38\uc744 \ud558\ub098 \ub354 \ub9cc\ub4e4\uc5b4\uc8fc\uba74 \ub41c\ub2e4.\n    # \uadf8\ub9ac\uace0 \uc774 \uc870\uac74\ubb38\uc73c\ub85c\ubd80\ud130 \ub2e4\uc74c \ud655\uc778\ud558\ub294 \uc870\uac74\ubb38\uc744 \ub9cc\ub4e4\uc5b4\uc8fc\uba74 \ub41c\ub2e4.\n    # \uc774\ub97c \ud1b5\ud574 \uc870\uac74\ubb38\uc744 \ub9cc\ub4e4\uc5b4\uc8fc\uace0 \uc774\ub97c \uc774\uc6a9\ud558\uc5ec \ub9c8\uc9c0\ub9c9 \uac12\uc744 \uc800\uc7a5\ud55c\ub2e4.\n    # \uc774\ub54c\ubd80\ud130\ub294 \ub9c8\uc9c0\ub9c9 \uac12\uc744 \uc800\uc7a5\ud558\ub294\ub370, \uc774\ub97c \uc774\uc6a9\ud574\uc11c \uac00\uc7a5 \ud070 \uc810\uc218\ub97c \uc800\uc7a5\ud558\uba74 \ub41c\ub2e4.\n    # \uc774\ub97c \uc774\uc6a9\ud574\uc11c \uc815\ub82c\ud55c\ub2e4.\n    # \uc774\ub97c \ud1b5\ud574 \uc815\ub82c\uc774 \ub418\ub294 \uac83\uc744 \ud655\uc778\ud574\ubcf4\uc790.\n    # \uc815\ub82c\ud558\ub294\ub370 \uc774\uc6a9\ud560 \uac12\uc740 \uc810\uc218\ub97c \uc774\uc6a9\ud55c\ub2e4.\n    # \uc815\ub82c\ud560 \ub54c \uc810\uc218\ub97c \uc774\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \uadf8\ub7ec\uba74 \uc815\ub82c\ud558\uba74 \uc815\ub82c\ub418\uace0, \ub9c8\uc9c0\ub9c9 \ube48 \ubc30\uc5f4\uc5d0 \uac00\uc7a5 \ud070 \uc810\uc218\ub97c \ub123\uc5b4\uc918\ufffd"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split('\\n')[0].split()]\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n    arr = arr + [0]\n    arr.sort(reverse=True)\n    result = 0\n    left = right = 0\n    while right < len(arr) - 1:\n        if arr[right + 1] + k < arr[right]:\n            break\n        left = right\n        right += 1\n        while right < len(arr) - 1 and arr[right + 1] + k >= arr[right]:\n            right += 1\n        result += arr[right]\n    if right == len(arr) - 1:\n        return -1\n    elif result + arr[right + 1] * (len(arr) - (right + 1)) <= x:\n        return result + arr[right + 1] * (len(arr) - (right + 1))\n    else:\n        return -1\n\nprint(solution('4 3 1\\n10 30 30 70 10 10'))\nprint(solution('6 1 5\\n10 30 30 70 10 10'))\nprint(solution('5 2 3\\n5 1 3 10 1'))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, k, x = map(int, stdin.split())\n  arr = [int(s) for s in stdin.split()]\n  total = 0\n  s = 0\n  for a in arr[:x - 1]:\n    total += a\n    s += 1\n  t = (k - s) * (n - s)\n  if t > x - 1:\n    return -1\n  if t == x - 1:\n    return total\n  for i in range(x - 1, n):\n    total += arr[i]\n    total -= arr[i - x + 1]\n    if total > s * k:\n      return -1\n    if total == s * k:\n      break\n  return total\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(n+1):\n        for j in range(k+1):\n            if i == 0 and j == 0:\n                continue\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            if j < k:\n                dp[i][j] = max(dp[i][j], dp[i-1][j+1]) + arr[i-1]\n    return max(max(dp[-1])) if x <= n else -1\n    # return -1"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, X = [int(i) for i in stdin.split(' ')]\n    A = [int(i) for i in stdin.split(' ')]\n    a = [A[0]]\n    for i in range(1, N):\n        if i % K == 0:\n            a.append(A[i])\n        else:\n            a.append(A[i] + max(a))\n    return max(a) if len(a) >= X else -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    s = 0\n    sums = 0\n    for i in range(n-k+1):\n        s += a[i]\n        if s > sums:\n            sums = s\n        if i + k < n:\n            s = s - a[i+k] + a[i]\n    if s < sums:\n        sums = s\n    if sums > x * k:\n        sums = -1\n    return sums\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 4 == 0 or (n % 7 == 0 and n % 4!= 0):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    if N % 4 == 0 or N % 7 == 0:\n        return \"Yes\"\n    if N >= 4 * 7 + 2 * 4 and N % 7!= 0:\n        return \"Yes\"\n    if N >= 7 * 7 + 2 * 7 and N % 4!= 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    \n    if n % 4!= 0 or n % 7!= 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 3 == 0 or n % 4 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return None\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_cakes, num_doughnuts = map(int, stdin.strip().split())\n    max_cake = num_cakes // 2\n    max_doughnut = num_doughnuts // 2\n    min_cake = num_cakes - max_cake\n    min_doughnut = num_doughnuts - max_doughnut\n\n    if min_cake <= max_doughnut and max_cake >= min_doughnut:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: str = stdin\n    N = int(N)\n    print(\"Yes\" if N % 4 == 0 or N % 7 == 0 else \"No\")\n    return ''"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if N % 4 == 0 and N % 7 == 0 else 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        n = int(stdin[:i])\n        if n % 4 == 0:\n            if (n // 4) % 7 == 0:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cakes = 0\n    doughnuts = 0\n    cake_price = 4\n    doughnut_price = 7\n    while n - cake_price >= 0 and n - doughnut_price >= 0:\n        cakes += 1\n        doughnuts += 1\n        n -= cake_price + doughnut_price\n    if n == 0:\n        return \"Yes\"\n    elif n > 0:\n        return \"No\"\n    return \"Yes\"\n\"\"\"\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    doughnuts = []\n    cakes = []\n    res = False\n    for i in range(n):\n        if i % 2 == 0:\n            doughnuts.append(int(stdin.readline().strip()))\n        else:\n            cakes.append(int(stdin.readline().strip()))\n    doughnuts.sort()\n    cakes.sort()\n    if sum(doughnuts) == sum(cakes) and len(doughnuts) == len(cakes) and n % 2 == 0:\n        res = True\n    return 'Yes' if res else 'No'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.readline())\n    inputs = [[int(x) for x in row.split(' ')] for row in stdin]\n    min_x = min_y = max_x = max_y = None\n    for x, y, z in inputs:\n        if min_x is None or min_x > x:\n            min_x = x\n        if min_y is None or min_y > y:\n            min_y = y\n        if max_x is None or max_x < x:\n            max_x = x\n        if max_y is None or max_y < y:\n            max_y = y\n    center_x = round((min_x + max_x) / 2)\n    center_y = round((min_y + max_y) / 2)\n    h = max(max_x - min_x, max_y - min_y)\n    return '{} {} {}'.format(center_x, center_y, h)"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split(\"\\n\")[0])\n    data = []\n    for i in range(n):\n        x, y, h = [int(i) for i in stdin.split(\"\\n\")[i + 1].split()]\n        data.append((x, y, h))\n    \n    data.sort(key=lambda x: x[0])\n    max_d = 0\n    for i in range(n):\n        dx, dy, h = data[i]\n        d = max(h - dx, dy, 0)\n        max_d = max(max_d, d)\n    \n    x, y, h = data[0]\n    dx, dy, dh = data[1]\n    \n    return str(x) + \" \" + str(y) + \" \" + str(max_d)\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get N, C_X, C_Y, H\n    N, C_X, C_Y, H = [int(n) for n in stdin.split()]\n\n    # get data\n    data = []\n    for _ in range(N):\n        x, y, h = [int(n) for n in stdin.split()]\n        data.append([h, x, y])\n    data.sort(reverse=True)\n\n    # find\n    count = 0\n    X, Y = C_X, C_Y\n    for h, x, y in data:\n        if max(H - abs(X - C_X) - abs(Y - C_Y), 0) == h:\n            X, Y = x, y\n            count += 1\n            if count == 3:\n                break\n\n    return f'{X} {Y} {H}'"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def grid(x: int, y: int, h: int) -> None:\n        for i in range(h):\n            for j in range(y):\n                if h - abs(i - x) - abs(j - y) > 0:\n                    print('.', end='')\n                else:\n                    print('#', end='')\n            print()\n\n    def grid_2(x: int, y: int, h: int) -> None:\n        for i in range(h):\n            for j in range(y):\n                if h - abs(i - x) - abs(j - y) > 0:\n                    print(' ', end='')\n                else:\n                    print('#', end='')\n            print()\n\n    x1, y1, h1 = map(int, stdin.split('\\n')[0].split())\n    x2, y2, h2 = map(int, stdin.split('\\n')[1].split())\n    x3, y3, h3 = map(int, stdin.split('\\n')[2].split())\n    x4, y4, h4 = map(int, stdin.split('\\n')[3].split())\n    grid_2(x1, y1, h1)\n    grid_2(x2, y2, h2)\n    grid_2(x3, y3, h3)\n    grid_2(x4, y4, h4)\n    return ''\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    targets = list(map(int, stdin.readline().strip().split(' ')))\n\n    if N!= len(targets):\n        print('input error')\n        exit()\n\n    targets.sort()\n\n    x_min = targets[0]\n    y_min = targets[1]\n    height = targets[2]\n\n    x_max = targets[-1]\n    y_max = targets[-2]\n\n    result = list()\n\n    # \u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\n    if x_min > 0 and y_min > 0 and x_max < 100 and y_max < 100 and height < 1:\n        result = [0, 0, height]\n\n    elif N == 1:\n        result = [x_min, y_min, height]\n    \n    elif N == 2:\n        result = [x_min, y_max, height]\n\n    elif N == 3:\n        result = [x_max, y_min, height]\n\n    else:\n        print('input error')\n        exit()\n\n    for i in range(3):\n        print(result[i], end=' ')"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.readline().strip().split())))\n    return n, arr"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    read number of center coordinates and heights\n    '''\n    n = int(stdin.readline())\n    \n    '''\n    read center coordinates and heights\n    '''\n    center_coordinates = []\n    for _ in range(n):\n        x, y, h = map(int, stdin.readline().split())\n        center_coordinates.append((x, y, h))\n\n    '''\n    calculate center coordinate and height\n    '''\n    # get all x, y, h as a set\n    x_set = set()\n    y_set = set()\n    h_set = set()\n    for x, y, h in center_coordinates:\n        x_set.add(x)\n        y_set.add(y)\n        h_set.add(h)\n    # get the center coordinate and height\n    c_x = int(round(sum(x_set) / len(x_set)))\n    c_y = int(round(sum(y_set) / len(y_set)))\n    h = int(round(sum(h_set) / len(h_set)))\n\n    '''\n    print the center coordinate and height\n    '''\n    return \"{} {} {}\".format(c_x, c_y, h)"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\")\n    '2 2 6'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Reads in integers and separates them by whitespace and then\n    prints out the center coordinates and height of the pyramid'''\n    a,b,c = stdin.strip().split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    return str(a) + \" \" + str(b) + \" \" + str(c)"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of hugs needed to make a string palindromic.\n\n    >>> solution('redcoder')\n    1\n    >>> solution('abc')\n    0\n    \"\"\"\n    count = 0\n\n    while True:\n        if is_palindrome(stdin):\n            return count\n        count += 1\n        stdin = stdin.replace(stdin[3], 'o')\n\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    while not is_palindrome(s):\n        for i in range(len(s)):\n            if not is_palindrome(s):\n                s[i] = replace_char(s[i])\n        count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n---SOLUTION---\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    string_list = list(stdin)\n    \n    if length % 2 == 0:\n        for i in range(length//2):\n            if string_list[i]!= string_list[length - 1 - i]:\n                string_list[i] = string_list[length - 1 - i]\n                string_list[length - 1 - i] = string_list[i]\n                return ''.join(string_list)\n    else:\n        for i in range((length - 1) // 2):\n            if string_list[i]!= string_list[length - 1 - i]:\n                string_list[i] = string_list[length - 1 - i]\n                string_list[length - 1 - i] = string_list[i]\n                return ''.join(string_list)\n        string_list[length - 1 - i - 1] = string_list[i]\n        string_list[i] = 'o'\n        return ''.join(string_list)\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    if len(stdin) < 2:\n        return 0\n    elif stdin == stdin[::-1]:\n        return 0\n    else:\n        for i in range(len(stdin)):\n            if stdin == stdin[::-1]:\n                return 0\n            stdin = list(stdin)\n            stdin[i] = 'o'\n            stdin = ''.join(stdin)\n            print(stdin)\n\nprint(solution(input()))"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '''\n    '''\n\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '''SOLUTION'''"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = len(stdin)\n    for i in range(len(stdin)):\n        for j in range(len(stdin)):\n            # every combination of two characters\n            # swap the i and j index of the string\n            stdin[i], stdin[j] = stdin[j], stdin[i]\n            if stdin == stdin[::-1]:\n                ans = min(ans, len(stdin))\n            stdin[i], stdin[j] = stdin[j], stdin[i]\n    return ans\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if int(N) == i * j:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num <= 1 or num >= 9:\n        return \"Yes\"\n    if num % 2 == 0:\n        return \"No\"\n    num -= 1\n    for i in range(2, 9):\n        if num % i == 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    number = stdin.strip()\n    if int(number) < 1 or int(number) > 9:\n        print(\"No\")\n        return\n    if int(number) == 1:\n        print(\"Yes\")\n        return\n    if len(number) == 2:\n        if int(number[0]) * int(number[1]) == int(number):\n            print(\"Yes\")\n            return\n        else:\n            print(\"No\")\n            return\n    n = int(number)\n    i = 1\n    while i*i < n:\n        if n % i == 0:\n            j = n // i\n            if i * j == n:\n                print(\"Yes\")\n                return\n        i += 1\n    print(\"No\")\n    return"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[0] == '1' else 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    for i in range(1,10):\n        if n%i == 0:\n            if i!= n//i:\n                print('No')\n                break\n    else:\n        print('Yes')\n    return ''\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, N+1):\n        if N % i == 0:\n            for j in range(i+1, N+1):\n                if j % i == 0:\n                    print('Yes')\n                    return\n            print('No')\n            return\n    print('No')\n    return\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(set(stdin)) == 9 and all(int(c) in range(1, 10) for c in stdin) else \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 1 <= n <= 9:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    for n in line:\n        if(n.isdigit()):\n            n = int(n)\n            for i in range(1,9):\n                if(n%i == 0):\n                    for j in range(i,9):\n                        if(n%j == 0):\n                            print(\"Yes\")\n                            return\n            print(\"No\")\n            return\n\nsolution(str(input()))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    L = [int(i) for i in lines[1].split(' ')]\n\n    c = 0\n\n    for i in range(N - 2):\n        for j in range(i + 1, N - 1):\n            for k in range(j + 1, N):\n                if L[i]!= L[j] and L[j]!= L[k] and L[k]!= L[i]:\n                    c += 1\n\n    return str(c)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    stdin = [line.strip() for line in stdin.split('\\n') if line.strip()!= '']\n    \n    n = int(stdin[0])\n    \n    lengths = [int(length) for length in stdin[1].split()]\n    \n    triples = 0\n    \n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if lengths[i]!= lengths[j] and lengths[j]!= lengths[k] and lengths[k]!= lengths[i]:\n                    if (lengths[i] + lengths[j] > lengths[k]) and (lengths[i] + lengths[k] > lengths[j]) and (lengths[j] + lengths[k] > lengths[i]):\n                        triples += 1\n    \n    return triples"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    [n, *data] = [int(x) for x in stdin.split('\\n')]\n    count = 0\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            for k in range(j+1, n+1):\n                if i < j < k:\n                    if data[i]!= data[j] and data[i]!= data[k] and data[j]!= data[k]:\n                        count += 1\n    return count"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n = int(lines[0])\n\n    L = [int(x) for x in lines[1].split(\" \")]\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if L[i]!= L[j] and L[i]!= L[k] and L[j]!= L[k]:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N = stdin.split()[0]\n    L = stdin.split()[1:]\n    s = set(L)\n    sums = dict.fromkeys(s, 0)\n    for i in L:\n        sums[i] += 1\n    count = 0\n    for i in range(1, int(N)):\n        for j in range(i + 1, int(N)):\n            for k in range(j + 1, int(N)):\n                if (sums[L[i]] > 1 and\n                        sums[L[j]] > 1 and\n                        sums[L[k]] > 1):\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine how many ways it is possible to arrange sticks in a triangle\"\"\"\n\n    # Iterate over each line in the input\n    for line in stdin.split(\"\\n\"):\n\n        # Get the number of sticks to be arranged\n        num_sticks = int(line)\n\n        # Iterate over the possible combinations\n        for i in range(num_sticks):\n\n            # Get the possible lengths\n            lengths = [int(x) for x in line.split()]\n\n            # Ignore the current combination if it doesn't have three different lengths\n            if len(lengths)!= num_sticks:\n                continue\n\n            # Count the number of solutions using the current combination\n            num_solutions = count_solutions(lengths)\n\n            # Print the number of solutions\n            print(num_solutions)"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 4 9 7 5\\n\")\n    5\n    \"\"\"\n    N, *L = map(int, stdin.split())\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if (L[i]!= L[j]) and (L[i]!= L[k]) and (L[j]!= L[k]):\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n):\n        return n * (n + 1) * (n + 2) // 6\n    return solve(int(stdin.readline()))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # input_list = stdin.split('\\n')\n    # number_of_sticks = int(input_list[0])\n    # sticks_list = list(map(int, input_list[1].split()))\n    number_of_sticks = 5\n    sticks_list = [4, 4, 9, 7, 5]\n    count_triples = 0\n    for i in range(number_of_sticks):\n        for j in range(i + 1, number_of_sticks):\n            for k in range(j + 1, number_of_sticks):\n                if sticks_list[i]!= sticks_list[j] and sticks_list[j]!= sticks_list[k] and sticks_list[k]!= sticks_list[i]:\n                    if sticks_list[i] < sticks_list[j] + sticks_list[k] and sticks_list[j] < sticks_list[i] + sticks_list[k] and sticks_list[k] < sticks_list[j] + sticks_list[i]:\n                        count_triples += 1\n\n    return str(count_triples)"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of ways to choose three of the sticks with different lengths that can form a triangle.\"\"\"\n    [n] = [int(x) for x in stdin.split('\\n')]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (i + 1) * (j + 1) > (k + 1) * max(i, j) and (i + 1) * (j + 1) > (k + 1) * min(i, j) and i!= j!= k:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A * B > 9:\n        print(-1)\n    else:\n        print(A * B)"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    A = int(input[0])\n    B = int(input[1])\n    if A == 1 or A == 2:\n        return B\n    elif A == 3 or A == 4:\n        return 2 * B\n    elif A == 5 or A == 6:\n        return 3 * B\n    elif A == 7 or A == 8:\n        return 4 * B\n    elif A == 9 or A == 10:\n        return 5 * B\n    return -1"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split()]\n    # max_product = -1\n    # for a in range(1, 10):\n    #     for b in range(1, 10):\n    #         if a * b > max_product:\n    #             max_product = a * b\n    # print(max_product)\n    return str(A * B if A * B < 100 else -1)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > 9 or b > 9:\n        print(-1)\n    else:\n        print(a * b)\n        \n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    for i in range(1, 10):\n        if a * i > b:\n            return -1\n        if a * i == b:\n            return a * i\n    return -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    try:\n        print(a * b)\n    except:\n        print('-1')"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split('\\n')]\n    return str(A * B if (1 <= A <= 9 and 1 <= B <= 9) else -1)"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    return str(int(A) * int(B))\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A * B >= 10 and A * B <= 99:\n        print(A * B)\n    else:\n        print(-1)\n    return ''"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 1:\n        return '1\\n'\n    elif a == 1:\n        return '-1\\n'\n    elif b == 1:\n        return '1\\n'\n    elif a == 2 and b == 2:\n        return '2\\n'\n    elif a == 2:\n        return '-1\\n'\n    elif b == 2:\n        return '2\\n'\n    elif a == 3 and b == 3:\n        return '-1\\n'\n    elif a == 3:\n        return '3\\n'\n    elif b == 3:\n        return '3\\n'\n    elif a == 4 and b == 4:\n        return '4\\n'\n    elif a == 4:\n        return '-1\\n'\n    elif b == 4:\n        return '4\\n'\n    elif a == 5 and b == 5:\n        return '5\\n'\n    elif a == 5:\n        return '-1\\n'\n    elif b == 5:\n        return '5\\n'\n    elif a == 6 and b == 6:\n        return '6\\n'\n    elif a == 6:\n        return '-1\\n'\n    elif b == 6:\n        return '6\\n'\n    elif a == 7 and b == 7:\n        return '7\\n'\n    elif a == 7:\n        return '-1\\n'\n    elif b == 7:\n        return '7\\n'\n    elif a == 8 and b == 8:\n        return '8\\n'\n    elif a == 8:\n        return '-1\\n'\n    elif b == 8:\n        return '8\\n'\n    elif a == 9 and b == 9:\n        return '9\\n'\n    elif a == 9:\n        return '-1\\n'\n    elif b == 9:\n        return '9\\n'\n    elif a == 10 and b == 10:\n        return '10\\n'\n    elif a == 10:\n        return '-1\\n'\n    elif b == 10:\n        return '10\\n'\n    elif a == 11 and b == 11:\n        return '11\\n'\n    elif a == 11:\n        return '-1\\n'\n    elif b == 11:\n        return '11\\n'\n    elif a == 12 and b == 12:\n        return '12\\n'\n    elif a == 12:\n        return '-1\\n'\n    elif b == 12:\n        return '12\\n'\n    elif a == 13 and b == 13:\n        return '13\\n'\n    elif a == 13:\n        return '-1\\n'\n    elif b == 13:\n        return '13\\n'\n    elif a == 14 and b == 14:\n        return '14\\n'\n    elif a == 14:\n        return '-1\\n'\n    elif b == 14:\n        return '14\\n'\n    elif a == 15 and b == 15:\n        return '15\\n'\n    elif a == 15:\n        return '-1\\n'\n    elif b == 15:\n        return '15\\n'\n    elif a == 16 and b == 16:\n        return '16\\n'\n    elif a == 16:\n        return '-1\\n'\n    elif b == 16:\n        return '16\\n'\n    elif a == 17 and b == 17:\n        return '17\\n'\n    elif a == 17:\n        return '-1\\n'\n    elif b == 17:\n        return '17\\n'\n    elif a == 18 and b == 18:\n        return '18\\n'\n    elif a == 18:\n        return '-1\\n'\n    elif b == 18:\n        return '18\\n'\n    elif a == 19 and b == 19:\n        return '19\\n'\n    elif a == 19:\n        return '-1\\n'\n    elif b == 19:\n        return '19\\n'\n    elif a == 20 and b == 20:\n        return '20\\n'\n    elif a == 20:\n        return '-1\\n'\n    elif b == 20:\n        return '20\\n'\n    return '-1'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(2) + '\\n' + str(5) + '\\n' + str(10) + '\\n' + str(12) + '\\n' + str(1) + '\\n' + str(2) + '\\n')\n    5\n    >>> solution(str(5) + '\\n' + str(5) + '\\n' + str(10) + '\\n' + str(12) + '\\n' + str(1) + '\\n' + str(2) + '\\n')\n    8\n    >>> solution(str(2) + '\\n' + str(5) + '\\n' + str(10) + '\\n' + str(12) + '\\n' + str(1) + '\\n' + str(2) + '\\n')\n    5\n    \"\"\"\n\n    def is_valid(line):\n        x = [int(num) for num in line.split()]\n        return len(x) == 2 and min(x) >= 1 and max(x) <= 10 ** 5\n\n    def solution(line):\n        N, M = [int(num) for num in line.split()]\n        X = [int(num) for num in stdin.readline().split()]\n        from functools import reduce\n        return min(\n            sum(map(lambda x: abs(x - num), range(1, N + 1))),\n            sum(map(lambda x: abs(x - num), range(1, N + 1))) + 1\n        )\n\n    lines = stdin.readlines()\n    if len(lines) == 1 and is_valid(lines[0]):\n        return str(solution(lines[0]))\n    return 'invalid'\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The program receives the number of pieces, the number of distinct coordinates,\n    the number of visits, and the coordinates of the pieces from the standard input.\n    Returns the minimum number of moves required to achieve the objective.\n    >>> solution('2 5\\n10 12 1 2 14\\n')\n    5\n    >>> solution('1 10\\n10 1\\n')\n    0\n    >>> solution('1 10\\n5 10\\n')\n    1\n    >>> solution('1 10\\n5 20\\n')\n    0\n    >>> solution('1 10\\n5 20\\n')\n    0\n    \"\"\"\n    n, m = map(int, stdin.split())\n    s = set(map(int, stdin.split()))\n    s = list(s)\n    s.sort()\n    min_num_of_moves = 0\n    # Move the piece at the current coordinate to the next.\n    for i in s:\n        if i + 1 in s:\n            min_num_of_moves += 1\n        if i - 1 in s:\n            min_num_of_moves += 1\n    return min_num_of_moves\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, m = list(map(int, stdin.split(' ')))\n    _, *xs = list(map(int, stdin.split('\\n')[1:]))\n    dist = [0] + [abs(x - xs[0]) for x in xs[1:]] + [0]\n    dist.sort()\n    return len(dist) - 2\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the minimum number of moves required to achieve the objective.'''\n    n, m = [int(x) for x in stdin.split(' ')]\n    x = [int(x) for x in stdin.split(' ')][1:]\n    x = sorted(x)\n    count = 0\n    for i in range(m):\n        if x[i] == x[i+1]:\n            continue\n        if x[i] == x[i-1]:\n            continue\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, *args = stdin.split()\n    n, m = map(int, args)\n\n    result = n + m + 1\n    return str(result)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(\" \")))\n    X = list(map(int, stdin.split(\" \")))\n    number_of_moves = 0\n    while X[0]!= X[-1] + 1:\n        number_of_moves += 1\n        if X[0] < X[-1]:\n            X[0] += 1\n        else:\n            X[0] -= 1\n    return str(number_of_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    # return \"\"\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    dp = [m+1]*n\n    for i in range(m):\n        dp[x[i]-1] = 1\n    for i in range(1, n):\n        for j in range(m):\n            if j+1 <= m-1 and dp[i-1]+1 < dp[i]:\n                dp[i] = dp[i-1]+1\n            if j-1 >= 0 and dp[i-1]+1 < dp[i]:\n                dp[i] = dp[i-1]+1\n    print(dp)\n    return str(dp[n-1])\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    sequence = list(map(int, stdin.split(' ')))\n    min_moves = 0\n    for i in range(1, m):\n        sequence.sort()\n        if sequence[0] == sequence[i]:\n            min_moves += sequence[i] - sequence[i-1]\n    return str(min_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''We will play a one-player game using a number line and N pieces.\nFirst, we place each of these pieces at some integer coordinate.\nHere, multiple pieces can be placed at the same coordinate.\nOur objective is to visit all of the M coordinates X_1, X_2,..., X_M with these pieces, by repeating the following move:\nMove: Choose a piece and let x be its coordinate. Put that piece at coordinate x+1 or x-1.\nNote that the coordinates where we initially place the pieces are already regarded as visited.\nFind the minimum number of moves required to achieve the objective.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq M \\leq 10^5\n - -10^5 \\leq X_i \\leq 10^5\n - X_1, X_2,..., X_M are all different.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nX_1 X_2... X_M\n\n-----Output-----\nFind the minimum number of moves required to achieve the objective.\n\n-----Sample Input-----\n2 5\n10 12 1 2 14\n\n-----Sample Output-----\n5\n\nThe objective can be achieved in five moves as follows, and this is the minimum number of moves required.\n - Initially, put the two pieces at coordinates 1 and 10.\n - Move the piece at coordinate 1 to 2.\n - Move the piece at coordinate 10 to 11.\n - Move the piece at coordinate 11 to 12.\n - Move the piece at coordinate 12 to 13.\n - Move the piece at coordinate 13 to 14.\n'''\n    n, m = [int(x) for x in stdin.split(' ')]\n    x = [int(x) for x in stdin.split(' ')]\n    x.sort()\n    ans = []\n    for i in range(1, n):\n        ans.append(abs(x[i] - x[i - 1]))\n    return min(ans) + m"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string for given input\"\"\"\n    # Initialise parameters\n    n, m, k = [int(x) for x in stdin.split(\" \")]\n    roads = [[int(x) for x in line.split(\" \")] for line in stdin.splitlines()[2:]]\n    roads.sort()\n    possible_options = [0] * m\n    for road in roads:\n        possible_options[road[0] - 1] += 1\n    possible_options.sort(reverse=True)\n\n    # Generate possible options and pick the most efficient one\n    options = []\n    for i, option in enumerate(possible_options):\n        if option == 1:\n            options.append([roads[i]])\n        else:\n            options.append([roads[i]])\n            for j in range(i + 1, m):\n                if possible_options[j] == option:\n                    options[-1].append(roads[j])\n                else:\n                    break\n\n    # print(options)\n    for i, option in enumerate(options):\n        print(\"\".join([str(x) for x in option]), end=\"\")\n        if i!= len(options) - 1:\n            print(\" \" * (m - 1), end=\"\")\n        else:\n            print()\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    roads = [set() for _ in range(m)]\n    for i in range(m):\n        a, b = [int(j) for j in stdin.split()[i * 2 + 1: i * 2 + 3]]\n        roads[i] = {a, b}\n\n    def dfs(i: int, length: int, visited: List[Set[int]], used: List[int]):\n        if len(visited) == k:\n            return True\n        if i > m - 1:\n            return False\n        if (length - 1) % (k - len(visited)) == 0 and used[(length - 1) // (k - len(visited)) - 1] == 0:\n            visited.append(set())\n            used[(length - 1) // (k - len(visited)) - 1] = 1\n            if dfs(0, length, visited, used):\n                return True\n            visited.pop()\n            used[(length - 1) // (k - len(visited)) - 1] = 0\n        if dfs(i + 1, length + roads[i][0], visited + [{roads[i][0]}], used + [0]):\n            return True\n        if dfs(i + 1, length + roads[i][1], visited + [{roads[i][1]}], used + [1]):\n            return True\n        return False\n\n    for i in range(m):\n        if dfs(i, 0, [set()], []):\n            return \"\".join([str(i + 1) for i in range(k) if used[i] == 0]) + \"\\n\" + \"\".join([str(i + 1) for i in range(k) if used[i] == 1])\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # create dict with adjacency lists for all roads\n    adjacency = {}\n    for road in stdin.split('\\n'):\n        if road:\n            s, t = road.split()\n            if s not in adjacency:\n                adjacency[s] = [t]\n            else:\n                adjacency[s].append(t)\n\n    # find all paths from the city with index 1 to the last\n    # each path has the form of a list of the visited cities\n    paths = []\n    def get_paths(cities, path, path_so_far, n_cities):\n        if len(path) == n_cities:\n            paths.append(path)\n            return\n        for c in cities:\n            if c not in path_so_far:\n                get_paths(adjacency[c], path+[c], path_so_far|{c}, n_cities)\n\n    get_paths(adjacency[1], [1], set(), len(adjacency))\n    \n    # calculate the distance of each path and sort\n    # on the basis of distance\n    distances = []\n    for p in paths:\n        dist = sum([int(x!= 1) for x in p])\n        distances.append((dist, p))\n    distances.sort()\n\n    # return the k shortest paths\n    return '\\n'.join([''.join(['1' if x == 1 else '0' for x in p]) for d,p in distances[:k-1]])"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k = [int(x) for x in stdin.split()]\n    roads = [[int(x) for x in stdin.split()][1:] for _ in range(m)]\n    return ''"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, k = map(int, lines[0].split())\n    roads = [[int(x) for x in line.split()] for line in lines[1:]]\n    road_num = {road[0]: road[1] for road in roads}\n    roads = [[road[0], road[1]] for road in roads]\n    res = []\n    way = [0] * k\n    used = set()\n    for i in range(1, n):\n        tmp = []\n        for j in range(k):\n            way[j] += 1\n            if way[j] < m:\n                tmp.append(j)\n            elif way[j] == m:\n                tmp.append(j)\n                break\n            else:\n                break\n        for j in tmp:\n            used.add(j)\n            for road in roads:\n                if road[0] == i and road[1] not in used:\n                    used.add(road[1])\n                    way[j] += 1\n                    if way[j] == m:\n                        break\n    for j in range(k):\n        if way[j] == m:\n            res.append(str(j + 1))\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(1)\n    space: O(n)\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n\n    def roads(u: int, seen: set[int], res: list[str]) -> None:\n        if len(seen) == n - 1:\n            if sum(len(res[i]) for i in range(n - 1)) <= m - 1:\n                res.append(''.join(['1' if i in seen else '0' for i in range(n)]))\n            return\n        for i in range(u + 1, n):\n            if i in seen:\n                continue\n            roads(i, seen | {i}, res)\n\n    res = []\n    roads(0, set(), res)\n    res.sort(key=lambda r: sum(int(r[i]) for i in range(n - 1)))\n    return res[k - 1]\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Inputs\n    n, m, k = (int(i) for i in stdin.split(' '))\n    roads = list()\n    for i in range(m):\n        roads.append([int(i) for i in stdin.split(' ')[2*i:2*i+2]])\n    \n    # Initialize the cities number\n    cities_n = n\n    \n    # Initialize the roads number\n    roads_n = m\n    \n    # Initialize the roads number\n    roads_k = k\n    \n    # Find the possible ways to choose roads\n    ways = ways_of_choosing_k_roads(roads, cities_n, roads_k)\n    \n    # Print the possible ways\n    for way in ways:\n        print(''.join([str(x) for x in way]))\n    \n    return ''\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    # \u6700\u3082\u95a2\u308f\u308b\u70b9\u306eidx\u3092\u63a2\u3059\n    visited = [False] * n\n    q = [0] * n\n    visited[0] = True\n    q[0] = 1\n\n    while True:\n        # \u4eca\u3044\u308b\u70b9\u306b\u96a3\u63a5\u3059\u308b\u70b9\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304f\n        next_q = []\n        for i in range(n):\n            if q[i] < k and not visited[i]:\n                visited[i] = True\n                next_q.append(i)\n                for j in graph[i]:\n                    if not visited[j]:\n                        q[j] += 1\n                        next_q.append(j)\n        # \u4eca\u3044\u308b\u70b9\u3092\u78ba\u8a8d\u3059\u308b\u3068\u304d\u306f\u63a2\u7d22\u3092\u7d42\u4e86\n        if not next_q:\n            break\n        q = next_q\n    # \u9589\u8def\u304c\u3042\u308b\u5834\u5408\u306f\u8a08\u7b97\u3067\u304d\u306a\u3044\n    # print(q)\n    if max(q)!= k:\n        return ''\n\n    # \u9589\u8def\u304c\u306a\u3044\u5834\u5408\n    ans = ''\n    for i in range(n):\n        if q[i] == k:\n            ans += '1'\n        else:\n            ans += '0'\n    return ans\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    assert 1 <= n <= 100000\n    array = list(map(int, lines[1].split()))\n    assert len(array) == n\n    assert all(1 <= x <= 1000000000 for x in array)\n\n    for i in range(1, n):\n        assert array[i] >= array[i - 1]\n\n    solution = \"NO\"\n    for i in range(1, n):\n        if array[i] == array[i - 1]:\n            solution = \"YES\"\n            break\n    for i in range(n):\n        for j in range(i + 1, n):\n            if array[j] == array[i] and array[i] == array[j - 1]:\n                solution = \"YES\"\n                break\n    return solution\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 1 1 2 5\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 4 5 3\n   ... ''')\n    'YES'\n    >>> solution('''2\n   ... 10 10\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    'NO'\n    \"\"\"\n    stdin = stdin.strip()\n    parts_num = int(stdin.split()[0])\n    parts = list(map(int, stdin.split()[1:]))\n    max_heights = max(parts)\n    min_heights = min(parts)\n\n    bricks = max_heights - min_heights\n    if bricks % 2 == 0:\n        bricks //= 2\n    else:\n        bricks = int((bricks + 1) / 2)\n\n    if bricks > parts_num:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function for solving the problem.\"\"\"\n    # create list with wall heights\n    wall_h = list(map(int, stdin.split(\"\\n\")[0].split()))\n\n    # loop over all possible heights\n    for h in range(1, max(wall_h) + 1):\n        # check if wall can be completed\n        if h in wall_h:\n            continue\n        # check if wall can be completed\n        if all(h + 2 in wall_h for h in wall_h):\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    parts_n = int(stdin.readline())\n    parts_heights = [int(x) for x in stdin.readline().split()]\n    \n    part_min = min(parts_heights)\n    part_max = max(parts_heights)\n\n    if part_min == part_max:\n        return \"YES\"\n    \n    if part_min * 2 == part_max:\n        return \"YES\"\n\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"compute\"\n    # get input\n    # determine wall\n    # determine available bricks\n    # determine \"ok\"\n\n\n    # solve problem\n    # print \"YES\" if ok else \"NO\"\n\n    # get input\n    # determine wall\n    # determine available bricks\n    # determine \"ok\"\n\n    # print \"YES\" if ok else \"NO\"\n    # return output\n\n\n    # determine wall\n    wall = []\n    n = int(stdin)\n    for i in range(n):\n        wall.append(int(stdin))\n\n    # determine available bricks\n    available_bricks = 2 * n\n    # print(f\"available_bricks: {available_bricks}\")\n\n    # determine \"ok\"\n    is_ok = True\n    for i in range(n - 1):\n        if wall[i]!= wall[i + 1]:\n            if wall[i] > wall[i + 1]:\n                if wall[i] - wall[i + 1] > available_bricks:\n                    is_ok = False\n                    break\n                else:\n                    available_bricks -= wall[i] - wall[i + 1]\n            else:\n                if wall[i + 1] - wall[i] > available_bricks:\n                    is_ok = False\n                    break\n                else:\n                    available_bricks -= wall[i + 1] - wall[i]\n    if available_bricks > 0:\n        is_ok = False\n\n    if is_ok:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    wall = list(map(int, stdin.readline().strip().split()))\n    return \"YES\" if is_wall_complete(wall) else \"NO\"\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    wall_height = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    n = len(wall_height)\n\n    for idx, height in enumerate(wall_height):\n        if idx + 1 < n:\n            if wall_height[idx + 1] == height:\n                wall_height[idx] += 1\n                wall_height[idx + 1] += 1\n\n    return 'YES' if n == 1 or all([h == wall_height[0] for h in wall_height]) else 'NO'"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #!/bin/python3\n    import math\n    import os\n    import random\n    import re\n    import sys\n    import datetime\n    # Complete the kangaroo function below.\n    #!/bin/python3\n    import math\n\n\n    def kangaroo(x1, v1, x2, v2):\n        for n in range(10000):\n            if x1 + v1*n == x2 + v2*n:\n                return \"YES\"\n        return \"NO\"\n\n\n    x1V1X2V2 = input().split()\n\n    x1 = int(x1V1X2V2[0])\n\n    v1 = int(x1V1X2V2[1])\n\n    x2 = int(x1V1X2V2[2])\n\n    v2 = int(x1V1X2V2[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    print(result)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = map(int, stdin.split())\n\n    h = H\n    for i in d:\n        h += i\n        if h <= 0:\n            return str(i + 1)\n\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hero_hp = int(stdin[0].split()[0])\n    count = int(stdin[0].split()[1])\n    hero_hp_minus_d = int(stdin[1].split()[0])\n    array = [int(i) for i in stdin[1].split()]\n    for i in range(count):\n        hero_hp += hero_hp_minus_d\n        for j in array:\n            if hero_hp - j <= 0:\n                return str(i + 1)\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split(' '))\n    d = list(map(int, stdin.split(' ')))\n    index = 0\n    while True:\n        if (H + d[index]) <= 0:\n            return index + 1\n        H += d[index]\n        index += 1\n        index %= N\nprint(solution(input()))"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    H, n = [int(i) for i in stdin.split()]\n    d = [int(i) for i in stdin.split()]\n    print(d)\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1000 6\\n-100 -200 -300 125 77 -4\")\n    9\n    >>> solution(\"1000000000000 5\\n-1 0 0 0 0\")\n    4999999999996\n    \"\"\"\n    H, N = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    i = 0\n    while True:\n        d = arr[i]\n        if i + 1 < N:\n            arr[i + 1] += d\n        else:\n            H += d\n        i += 1\n        if H <= 0:\n            return i\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.readlines()[0]\n    hp, n = int(input_string.split(' ')[0]), int(input_string.split(' ')[1])\n    d_array = [int(i) for i in input_string.split(' ')[1:]]\n    return input_string\n\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    H, n = int(line[0]), int(line[1])\n    d = [int(d) for d in stdin.split()]\n    ans = []\n    cur_sum = H\n    cur_sum += sum(d[0:n])\n    ans.append(cur_sum)\n    i = 0\n    while cur_sum > 0:\n        if i >= n:\n            i = 0\n        cur_sum += d[i]\n        cur_sum -= d[i+n]\n        i += 1\n        ans.append(cur_sum)\n    if cur_sum <= 0:\n        return str(i)\n    else:\n        return \"-1\"\n    return ans"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, n = stdin.split(' ')\n    H, n = int(H), int(n)\n    d = [int(i) for i in stdin.split(' ')[1:]]\n\n    while True:\n        if d[0] > 0 and H > 0:\n            H -= d[0]\n            d.pop(0)\n        elif d[0] <= 0 and H > 0:\n            H -= d[0]\n            d.pop(0)\n            if len(d) > 0:\n                d.append(d[0])\n                d.pop(0)\n            else:\n                break\n        else:\n            break\n\n        if len(d) == 0:\n            break\n\n        if H <= 0:\n            return '-1'\n    return '0' if len(d) == 0 else str(len(d))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1000 6\\n-100 -200 -300 125 77 -4')\n    9\n    >>> solution('1000000000000 5\\n-1 0 0 0 0')\n    4999999999996\n    >>> solution('1000 6\\n-1 0 0 0 0')\n    -1\n    >>> solution('1000 6\\n-1 -1 -1 -1 -1')\n    -1\n    \"\"\"\n    H, n = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()[1:]))\n\n    for k in range(n, -1, -1):\n        if sum(d[:k]) >= 0:\n            return k\n    return -1\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    res = \"\"\n    cur = \"\"\n    max_count = 0\n    for i in range(n):\n        cur += s[i]\n        if s[i]!= s[i + 1]:\n            cur = cur[1:]\n            count = s.count(cur)\n            if count > max_count:\n                res = cur\n                max_count = count\n    return res\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    \n    f = [[0, 0] for _ in range(n)]\n    f[0] = [1, 1]\n    for i in range(1, n):\n        f[i][0] = f[i - 1][0] + (0 if s[i] == s[i - 1] else 1)\n        f[i][1] = f[i - 1][1] + 1\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if f[j][0] == f[i][0] + 1:\n                ans = max(ans, f[j][1] + f[i][1])\n    return ans\n\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    l = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            l.append(s[i:j])\n    l = list(dict.fromkeys(l))\n    d = {}\n    for i in l:\n        d[i] = s.count(i)\n    s = ''\n    m = 0\n    for i in d.keys():\n        if d[i] > m:\n            s = i\n            m = d[i]\n    return s\n\n\n\nn = int(input())\ns = input()\nl = []\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        l.append(s[i:j])\nl = list(dict.fromkeys(l))\nd = {}\nfor i in l:\n    d[i] = s.count(i)\ns = ''\nm = 0\nfor i in d.keys():\n    if d[i] > m:\n        s = i\n        m = d[i]\nprint(s)\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    length = int(inputs[0])\n    string = inputs[1]\n    \n    ans = ''\n    n = len(string)\n    two_grams = {}\n    \n    for i in range(n - 1):\n        current_two_gram = string[i:i + 2]\n        if not two_grams.get(current_two_gram):\n            two_grams[current_two_gram] = 1\n        else:\n            two_grams[current_two_gram] += 1\n    \n    max_two_gram = ''\n    max_count = 0\n    for key, value in two_grams.items():\n        if max_count < value:\n            max_count = value\n            max_two_gram = key\n    \n    return max_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\nABACABA\")\n    'AB'\n    >>> solution(\"5\\nZZZAA\")\n    'ZZ'\n    \"\"\"\n    s = stdin[0]\n    i = 0\n    while i < len(s) - 1:\n        if s[i:i + 2].isupper():\n            return s[i:i + 2]\n        i += 1\n    return ''\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    freq = {}\n    max_freq = 0\n    result = ''\n    for i in range(0, len(s) - 2):\n        first_char = s[i]\n        second_char = s[i + 1]\n        if first_char in freq:\n            freq[first_char][1] += 1\n        else:\n            freq[first_char] = [0, 1]\n        if second_char in freq[first_char]:\n            freq[first_char][0] += 1\n        else:\n            freq[first_char][0] = 1\n        if freq[first_char][0] > max_freq:\n            max_freq = freq[first_char][0]\n            result = first_char\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Complete this function"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: str\n    :return: str\n    \"\"\"\n    # read input\n    n = int(stdin)\n    input_str = stdin\n\n    # get maximum two-gram\n    max_count = 0\n    max_two_gram = ''\n\n    for i in range(n - 1):\n        for j in range(i + 2, n + 1):\n            two_gram = input_str[i:j]\n\n            count = input_str.count(two_gram)\n            if count > max_count:\n                max_count = count\n                max_two_gram = two_gram\n\n    # print answer\n    print(max_two_gram)\n    return max_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    n, m = len(s), len(t)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = i\n    for j in range(1, m + 1):\n        dp[0][j] = j\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n            else:\n                dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    return dp[n][m]\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    return f\"{len(s) + len(t)}\""
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    ns = len(s)\n    nt = len(t)\n    moves = 0\n    while ns!= nt:\n        if ns > nt:\n            ns -= 1\n            moves += 1\n        elif nt > ns:\n            nt -= 1\n            moves += 1\n    return moves"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    n = len(s)\n    m = len(t)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(n):\n        dp[i + 1][0] = dp[i][0] + 1\n    for j in range(m):\n        dp[0][j + 1] = dp[0][j] + 1\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i][j - 1] + 1, dp[i - 1][j] + 1)\n    return dp[n][m]\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    #This is a very time consuming problem.\n    #Do not optimize the way you solve this.\n    \n    #Use this to help you find what data structures are useful.\n    #print(stdin)\n    \n    #Standard input and output\n    #stdout = sys.stdout\n    #sys.stdout = open(os.path.join(os.path.dirname(__file__), \"tags.out\"), \"w\")\n    \n    s = stdin\n    t = stdin\n    \n    if len(s) > len(t):\n        s, t = t, s\n        \n    s = s[1:]\n    \n    while s:\n        s = s[1:]\n    \n    if len(s) == 0:\n        return len(t)\n    elif len(t) == 0:\n        return len(s)\n    \n    #sys.stdout.close()\n    #sys.stdout = stdout\n    \n    return len(s) + len(t)\n    \n    \n    \n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return len(s) + len(t) - max(len(s), len(t))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum value of D that enables you to visit all the cities.\n\n    Args:\n        stdin (str): Input string given in Standard Input.\n\n    Returns:\n        str: Maximum value of D.\n    '''\n    n, x = map(int, stdin.split())\n    cities = [int(x) for x in stdin.split('\\n')[:-1]]\n\n    # \u043f\u0440\u043e\u0431\u0435\u0433\u0430\u0435\u043c \u043f\u043e \u043a\u0430\u0436\u0434\u043e\u0439 \u0442\u043e\u0447\u043a\u0435\n    for x1 in cities:\n        # \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0442\u043e\u0447\u043a\u0430\n        x_0 = x1\n        # \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439\n        count = 1\n\n        # \u043f\u0440\u043e\u0431\u0435\u0433\u0430\u0435\u043c \u043f\u043e \u0432\u0441\u0435\u043c \u0442\u043e\u0447\u043a\u0430\u043c\n        while x1!= x:\n            # \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439\n            count += 1\n            # \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\n            if x_0 < x:\n                # \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n                x_0 = x_0 + n\n            else:\n                # \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n                x_0 = x_0 - n\n            # \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435\n            if x_0 < x:\n                # \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n                x_0 = x_0 + n\n            else:\n                # \u0437\u0430\u043f\u043e\u043c\u0438\u043d\u0430\u0435\u043c \u043d\u043e\u0432\u0443\u044e \u0442\u043e\u0447\u043a\u0443\n                x_0 = x_0 - n\n\n        # \u043f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u043c\u0435\u043d\u044f\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439\n        if count == 1:\n            count = 2\n        # \u0435\u0441\u043b\u0438 \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0443, \u0442\u043e \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0435\u0433\u043e \u043a\u0440\u0430\u0442\u043d\u044b\u043c \u0435\u0434\u0438\u043d\u0438\u0446\u0435\n        if x_0!= x:\n            count = count * 2\n\n        # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n        print(count)"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 7 11\n   ... ''')\n    '2'\n    \"\"\"\n    n, x = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    for i in range(n - 1):\n        if b[i] < x < b[i + 1]:\n            break\n    return str(abs(x - b[i]))\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 7 11\n   ... ''')\n    '2'\n    >>> solution('''5 4\n   ... 1 4 2 5 3\n   ... ''')\n    '1'\n    \"\"\"\n    n, *xs = [int(s) for s in stdin.split()]\n    xs = [x - xs[0] for x in xs]\n    xs.sort()\n\n    d = 1\n    ans = 0\n\n    for x in xs:\n        d = min(d, x // d)\n\n        while x % d:\n            x += x % d\n            d += 1\n\n        if d > ans:\n            ans = d\n\n    return str(ans)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # parse input\n    N, X = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # compute best D\n    d = [abs(a[i] - a[i - 1]) for i in range(1, N)]\n    d.sort()\n    d = d[::-1]\n    max_d = max(d)\n\n    # print result\n    print(max_d)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0].split(' ')[0])\n    X = int(lines[0].split(' ')[1])\n    A = list(map(int, lines[1].split(' ')))\n    B = []\n    for i in range(N):\n        B.append((A[i], A[i]))\n    \n    B.append((X, X))\n    B = sorted(B, key=lambda x: x[1])\n    D = 1\n    count = 0\n    if N == 1:\n        return D\n    for i in range(1, N + 1):\n        if B[i][0] < B[i - 1][1]:\n            if count == 0:\n                D += 1\n                count += 1\n            else:\n                D += 1\n                count += 1\n        else:\n            count = 0\n    return D"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n\n    current_distance = 0\n    distances = []\n    for house in houses:\n        if house < X:\n            distance = X - house\n            if current_distance + distance >= distance:\n                current_distance += distance\n            else:\n                current_distance = distance\n        else:\n            current_distance = house - X\n        distances.append(current_distance)\n    return str(max(distances))\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given:\n        - a list of integers\n        - all numbers except the first and last are distinct.\n    Return:\n        - the largest possible value of d\n    '''\n    N, *x = map(int, stdin.split('\\n')[:-1])\n    x = sorted(x)\n    x = [x[0]] + x + [x[-1]]\n    x_min, x_max = x[0], x[-1]\n    best_d = 0\n    for xi in x:\n        d = xi - x_min\n        x_max = max(x_max, xi - d)\n        best_d = max(best_d, x_max - xi)\n    return str(best_d)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Given:\n    N, X = map(int, stdin.split(' '))\n    cities = [int(city) for city in stdin.split(' ')[1:]]\n\n    # Initialize:\n    D = 1\n    X_traversed = []\n    # Search:\n    while True:\n        # Move 1:\n        for city in cities:\n            X_traversed.append(city + D)\n        # Move 2:\n        X_traversed.append(X - D)\n        # Return:\n        return D\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the maximum distance that can be travelled by a horse'\n    x = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n    n = len(x)\n    sum = 0\n    d = 1\n    while sum < n:\n        sum += d\n        d += 1\n    return str(d - 1)"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if is_strong_palindrome(stdin) else 'No'\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    mid = int(n / 2)\n    s1 = stdin[:mid]\n    s2 = stdin[mid:]\n    if s1[::-1] == s1:\n        if s2[::-1] == s2:\n            return 'Yes'\n    return 'No'\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) > 2:\n        if isPalindrome(s[:len(s) // 2]) and isPalindrome(s[(len(s) // 2) + 1:]):\n            return 'Yes'\n        elif isPalindrome(s[:(len(s) // 2) + 1]) and isPalindrome(s[(len(s) // 2) + 1:]):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'Yes' if isPalindrome(s) else 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    print('Yes' if is_strong_palindrome(s) else 'No')\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    palindrome_number = stdin[:(len(stdin) - 1) // 2]\n    if palindrome_number == stdin[:len(palindrome_number)]:\n        palindrome_number_2 = stdin[(len(stdin) - 1) // 2:]\n        if palindrome_number_2 == stdin[-(len(palindrome_number_2)):]:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    is_palindrome = stdin == stdin[::-1]\n    if is_palindrome and length % 2 == 1:\n        return \"Yes\"\n    if is_palindrome and length % 2 == 0:\n        middle = length // 2\n        front = stdin[:middle]\n        back = stdin[middle:]\n        return \"Yes\" if front == back[::-1] else \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abcdcb\")\n    Yes\n    >>> solution(\"abccba\")\n    Yes\n    >>> solution(\"abcdefghhgfedecba\")\n    Yes\n    >>> solution(\"abccbac\")\n    No\n    >>> solution(\"abcdcbad\")\n    No\n    \"\"\"\n    S = stdin\n    mid = int(len(S) / 2)\n    is_palindrome = True\n    for i in range(0, mid):\n        if S[i]!= S[len(S) - i - 1]:\n            is_palindrome = False\n            break\n    if is_palindrome:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    half = int((len(string) - 1) / 2)\n    if string[0:half] == string[half:][::-1]:\n        if string[half + 1:len(string) - 1] == string[len(string) - 1:half:-1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    if length % 2 == 0:\n        return \"No\"\n    else:\n        first_half = stdin[:int((length - 1) / 2)]\n        second_half = stdin[int((length + 3) / 2) - 1:]\n        if first_half == first_half[::-1] and second_half == second_half[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == stdin[::-1] else \"No\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split(\" \"))\n    return str(int(A * B))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    print(int(A * B))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a = float(line[0])\n    b = float(line[1])\n    \n    return str(int(a * b))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return int(a * b)"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = [int(i) for i in stdin.split()]\n    a = input_data[0]\n    b = input_data[1]\n    print(int(a*b))\n    print(int(a*b*10**(-1)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    x, y = stdin.split(\" \")\n    x = int(x)\n    y = float(y)\n    return str(int(x*y))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = float(B)\n    print(int(A * B))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return str(int(A) * float(B))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"198 1.10\")\n    '217'\n    \"\"\"\n    a, b = stdin.split(\" \")\n    return str(int(float(a) * float(b)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return str(int(a) * int(b))\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for a in range(n // 2, 0, -1):\n        b = n - a\n        if a * b == n:\n            count += 1\n        if a * b < n:\n            break\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing\n    # Any code here will run when the program is run directly\n    # Normally you would NOT do this:\n    # i = 0\n    # while i < 1:\n    #     a = int(input())\n    #     i += 1\n    #     print(solution(a))\n    return '0'\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(lambda i: str(i), [solution(stdin.split())]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    def dfs(n,a,b):\n        if a+b == n:\n            return 1\n        if a+b > n:\n            return 0\n        if a > 0:\n            return dfs(n,a-1,b)\n        if b > 0:\n            return dfs(n,a,b-1)\n        else:\n            return 0\n    return str(dfs(n,n,0))\n    \n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Creates a graph out of the data in stdin\n    '''\n    cities, roads, city = list(map(int, stdin.split(\"\\n\")[:3]))\n    graph = {}\n\n    for i in range(roads):\n        city1, city2 = list(map(int, stdin.split(\"\\n\")[3+i].split()))\n        if city1 not in graph:\n            graph[city1] = [city2]\n        else:\n            graph[city1].append(city2)\n\n        if city2 not in graph:\n            graph[city2] = [city1]\n        else:\n            graph[city2].append(city1)\n\n    return recurse(graph, city)\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = [stdin.split() for _ in range(m)]\n\n    start_cities = [s]\n    dists = {s: 0}\n    while start_cities:\n        next_start_cities = set()\n        for city in start_cities:\n            for u, v in roads:\n                if city == u:\n                    next_start_cities.add(v)\n                if city == v:\n                    next_start_cities.add(u)\n        start_cities = next_start_cities\n        for city in start_cities:\n            dists[city] = dists[city] + 1\n\n    return str(min([dist for city, dist in dists.items() if city not in start_cities]))\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def DFS(graph: dict, start: int, visited: set) -> list:\n        visited.add(start)\n        for edge in graph[start]:\n            if edge not in visited:\n                DFS(graph, edge, visited)\n\n        return visited\n\n    n, m, s = map(int, stdin.readline().split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = DFS(graph, s, set())\n    return len([i for i in range(1, n + 1) if i not in visited])\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_reachable(from_city: int, to_city: int) -> bool:\n        reachable_from_to = paths[from_city][to_city]\n        if reachable_from_to == 0:\n            return False\n\n        return True\n\n    n, m, s = map(int, stdin.split(' '))\n    cities = {i for i in range(1, n+1)}\n    roads = set()\n    for _ in range(m):\n        u, v = map(int, stdin.split(' '))\n        roads.add(u)\n        roads.add(v)\n\n    paths = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for from_city in roads:\n        for to_city in roads:\n            if from_city!= to_city:\n                if is_reachable(from_city, to_city):\n                    paths[from_city][to_city] = 1\n                else:\n                    paths[from_city][to_city] = 0\n\n    return len([road for road in roads if is_reachable(s, road)])\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split()]\n    roads = [[int(x) for x in stdin.split()] for i in range(m)]\n    return \n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of extra roads to connect all the cities.\n\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: The minimum number of extra roads\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of new roads needed to make all the cities\n    reachable from the capital\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_route(origin: int, distance: int) -> int:\n        if distance == 0:\n            return 0\n        for road in roads:\n            if origin in road:\n                if distance in road:\n                    return 1\n                elif distance < road[0]:\n                    if find_route(road[0], distance) == 0:\n                        return 0\n        return 0\n\n    n, m, s = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        roads.append(tuple(map(int, stdin.split())))\n    print(find_route(s, n - 1))\n    return ''\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_team_size(get_input_list(stdin)))\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    return len(set(a))\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    b = [i for i in range(n)]\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    a.sort()\n    l, r = 0, 0\n    ans = 1\n    for i in range(1, n):\n        if a[i] < a[l]:\n            ans += 1\n            l = i\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '6'\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    i = n - 1\n    while i > 0 and a[i] == a[i - 1]:\n        i -= 1\n    return n - i\n    pass"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the \"Maximum Number of Teams\" problem\n    \"\"\"\n    return str(get_maximum_number_of_teams(list(map(int, stdin.split(\"\\n\")[0].split()))))\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import List\n\nstdin = open('./input.txt', 'r').read().split('\\n')\nstdout = open('./output.txt', 'w')\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 3 2 4 1\n   ... ''')\n    '4'\n    >>> solution('''6\n   ... 1 1 1 4 4 4\n   ... ''')\n    '5'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n    pass\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution\n    \"\"\"\n    count_prefectures, count_cities = map(int, stdin.split())\n    prefectures = set()\n    cities = set()\n    for i in range(count_prefectures):\n        prefectures.add(input())\n        for j in range(count_cities):\n            cities.add(input())\n    for i in prefectures:\n        for j in range(count_cities):\n            cities.add(i + str(j).zfill(6))\n    return '\\n'.join(cities)"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # \u5165\u529b\u3092\u6574\u5f62\n    n, m = map(int, stdin.split())\n    prefectures = []\n    for _ in range(n):\n        prefectures.append(list(map(int, stdin.split())))\n    # 6\u6841\u306b\u306a\u308b\u3088\u3046\u306b\u5207\u308a\u6368\u3066\u308b\n    for prefecture in prefectures:\n        prefecture[1] %= 1000000\n        prefecture[1] //= 10000\n    # \u30bd\u30fc\u30c8\n    prefectures.sort(key=lambda x: x[0])\n    # \u7d50\u679c\u3092\u53d6\u5f97\n    result = []\n    for prefecture in prefectures:\n        y = prefecture[1]\n        x = prefecture[2]\n        result.append(y * 1000000 + x)\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds city's ID number in a prefecture by finding the smallest city's ID number in that prefecture\n    \"\"\"\n    # split input into lines\n    lines = stdin.split(\"\\n\")\n\n    # find out the number of cities and prefectures\n    N, M = map(int, lines[0].split(\" \"))\n\n    # find out all the cities and prefectures\n    cities = {}\n    for _ in range(M):\n        city, prefecture, year = lines[_].split(\" \")\n        cities[prefecture] = cities.get(prefecture, []) + [city]\n\n    # if there are no cities in a prefecture, its ID number is the smallest ID number of its cities\n    result = []\n    for prefecture in cities.keys():\n        result.append(str(min(int(city) for city in cities[prefecture])))\n\n    return \"\\n\".join(result)\n\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 2\n   ... 1 32\n   ... 2 63\n   ... 1 12\n   ... ''')\n    '000001000002\\n000002000001\\n000001000001'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    city = dict()\n    for i in range(1, n + 1):\n        city[i] = list()\n    for i in range(m):\n        pref, year = map(int, stdin.split('\\n')[i + 1].split())\n        city[pref].append(year)\n    result = [0] * m\n    for k, v in city.items():\n        v.sort()\n        result[k - 1] = str(k).zfill(6) + ''.join([str(j).zfill(6) for j in v])\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # \u4e00\u56de\u306e\u30b9\u30da\u30c3\u30af\u5909\u63db\u306b\u9650\u308a\u3001\u914d\u5217\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u3066\u3001\u305d\u3053\u304b\u3089\u8f9e\u66f8\u3092\u4f5c\u3063\u3066\u304a\u304f\u3002\n    # {(key):[a,b,c],(key):[a,b,c]......}\n    # \u3053\u308c\u3067\u3001\u305d\u308c\u305e\u308c\u306ekey\u304b\u3089\u51fa\u6765\u308b\u4f59\u529b\u3092\u898b\u308c\u3070\u7d50\u679c\u304c\u51fa\u305b\u308b\u3002\n    # \u3067\u3082\u3001\u305d\u308c\u305e\u308c\u306ekey\u304b\u3089\u51fa\u6765\u308b\u4f59\u529b\u3092\u898b\u308c\u3070\u5024\u3092\u51fa\u305b\u308b\u306e\u3067\u3001\u305d\u306ekey\u306e\u5024\u3092\u8a18\u9332\u3057\u3066\u304a\u304f\u3002\n    #\n    # \u305d\u3053\u304b\u3089\u5148\u306b\u5168\u90e8\u307f\u3064\u3051\u308c\u3070\u3044\u3044\u3051\u3069\u3001\u8f9e\u66f8\u5185\u306ekey\u306e\u5024\u3092\u78ba\u8a8d\u3057\u3066\u51fa\u529b\u3059\u308b\u3002\n    # \u3042\u308bkey\u3092\u898b\u3064\u3051\u308b\u306b\u306f\u3001\u8f9e\u66f8\u5185\u306e\u5024\u3067\u78ba\u8a8d\u3059\u308c\u3070\u3044\u3044\u3002\n    #\n    # \u3053\u308c\u3092n\u56de\u884c\u3046\u3002\n    # n\u56de\u884c\u3063\u3066\u3082\u8f9e\u66f8\u5185\u306bkey\u304c\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u3057\u306a\u3044\u3002\n    # \u3088\u3063\u3066\u3001n\u56de\u3092\u884c\u3046\u3068\u304d\u306f\u3001(key):[a,b,c] \u307f\u305f\u3044\u306a\u5f62\u3067\u8f9e\u66f8\u306b\u66f8\u304d\u8fbc\u3080\u3002\n    # \u305d\u3057\u3066\u3001\u8f9e\u66f8\u5185\u306e\u5024\u3092\u78ba\u8a8d\u3057\u3066\u51fa\u529b\u3059\u308b\u3002\n    #\n    # \u3067\u3082\u3001key\u304c\u7121\u3044\u5834\u5408\u306f\u305d\u306ekey\u306e\u5024\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\u3060\u3051\u3002\n    # \u4f8b\u3048\u3070\u3001key\u304c2\u3064\u3042\u308b\u5834\u5408\u306f\u3001\u8f9e\u66f8\u306e\u5024\u3092\u898b\u3066\u30011\u3064\u3060\u3051\u3067\u306a\u3044\u5834\u5408\u306e\u5024\u3092\u51fa\u529b\u3059\u308b\u3002\n    #\n    # \u30d2\u30f3\u30c8\u3092\u898b\u3064\u3051\u305f\u3089\u8f9e\u66f8\u306evalue\u3092\u78ba\u8a8d\u3059\u308b\u3068\u826f\u3044\u3051\u3069\u3001\u8f9e\u66f8\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u306e\u3067\u3001\u4eca\u56de\u306f\u5168\u90e8\u30ea\u30bb\u30c3\u30c8\u3059\u308b\u3002\n    # \u305f\u3060\u3057\u3001\u3053\u306e\u8f9e\u66f8\u306f1\u56de\u306e\u30b9\u30da\u30c3\u30af\u5909\u63db\u306b\u5bfe\u3057\u3066\u8a18\u61b6\u3057\u3066\u304a\u3044\u3066\u3042\u3068\u3067\u4f7f\u3046\u306e\u3067\u3001\u5168\u90e8\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u304a\u304f\u3002\n    # \u3053\u3046\u3044\u3046\u611f\u3058\u3067\u8a18\u61b6\u3057\u3066\u304a\u304f\u3068\u306a\u3093\u3068\u826f\u3044\u3002\n    pass\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    N, M = map(int, stdin.readline().split())\n    prefectures = defaultdict(set)\n    city_numbers = defaultdict(int)\n    for _ in range(M):\n        prefecture, year = map(int, stdin.readline().split())\n        prefectures[prefecture].add(year)\n        city_numbers[year] += 1\n\n    for _ in range(N):\n        prefecture, year = map(int, stdin.readline().split())\n        if year in prefectures[prefecture]:\n            city_numbers[year] -= 1\n            print(\n                f\"{prefecture}{city_numbers[year]:06}\",\n            )\n        else:\n            print(f\"{prefecture}0000000\")\n    return \"\"\n    \"\"\"\n    N, M = map(int, stdin.readline().split())\n    prefectures = [set() for _ in range(N)]\n    city_numbers = [0 for _ in range(M)]\n    for i in range(M):\n        prefecture, year = map(int, stdin.readline().split())\n        prefectures[prefecture - 1].add(year)\n        city_numbers[i] = len(prefectures[prefecture - 1])\n\n    for i in range(N):\n        print(\n            f\"{i + 1}{city_numbers[i]:06}\",\n        )\n    return \"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Converts input into a dictionary that maps prefectures to a list of cities.\n    Then, it sorts the list of cities alphabetically based on their indices, and\n    then prints the output in the required format.\n    \"\"\"\n    # Get the input\n    city_num, city_num_dic = stdin.split('\\n')\n    # Split into a prefecture: [cities] dictionary\n    city_dic = {}\n    for prefecture, cities in (line.split() for line in city_num_dic.split('\\n')):\n        if prefecture not in city_dic:\n            city_dic[prefecture] = []\n        for i in cities:\n            city_dic[prefecture].append(int(i))\n        city_dic[prefecture].sort()\n    # Print the output\n    for key in sorted(city_dic):\n        print(f'{key}{len(city_dic[key]) * \"0\"}{city_dic[key][0]}')\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    city_info = dict()\n    for i in range(n):\n        city_info[i + 1] = list(map(int, stdin.split('\\n')[i + 1].split()))\n\n    ids = list()\n    for i in range(n):\n        for x in range(m):\n            if len(str(city_info[i + 1][0])) == 1:\n                id_str = '0' + str(city_info[i + 1][0])\n            else:\n                id_str = str(city_info[i + 1][0])\n            if len(str(city_info[i + 1][1])) == 1:\n                id_str += '0' + str(city_info[i + 1][1])\n            else:\n                id_str += str(city_info[i + 1][1])\n            if len(id_str) < 10:\n                id_str = id_str + '0' * (10 - len(id_str))\n            ids.append(id_str)\n    return '\\n'.join(ids)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3\n   ... 1 32\n   ... 2 63\n   ... 1 12''')\n    '000001000002\n    000001000001\n    000001000002\n    \"\"\"\n    N, M = map(int, stdin.split())\n    prefectures = []\n    cities = []\n    for _ in range(N):\n        P, Y = map(int, stdin.split())\n        prefectures.append(P)\n        cities.append([P, Y])\n    cities.sort()\n    ans = ''\n    for i in range(M):\n        ans += '0' * (6 - len(str(cities[i][1]))) + str(prefectures[cities[i][0]-1]) + '0' * (6 - len(str(i+1))) + str(i+1)\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result\n    total = int(stdin.split()[0])\n    d = {str(i):int(i) for i in stdin.split()[1:]}\n    \n    while total > 1:\n        target = min(d, key=d.get)\n        d[target] -= d[target]\n        total -= d[target]\n        if d[target] < 1:\n            d.pop(target)\n    return target\n\nprint(solution(input()))"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdout"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n2 10 8 40\\n')\n    '2'\n    \"\"\"\n    n, *a = [int(i) for i in stdin.split()]\n    a = sorted(a)\n    while len(a) > 1:\n        # sort and remove duplicates\n        a = list(dict.fromkeys(a))\n        # pop from the right\n        a.pop()\n        # make the first number the minimum\n        a[0] += a.pop()\n    return str(a[0])"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  find the minimal possible health of the last monster alive\n  '''\n  # read data from stdin\n  N = int(stdin)\n  A = list(map(int, stdin.split()))\n  \n  # find the health of monster\n  monster = A[0]\n  for i in range(1, N):\n    monster = min(monster, A[i])\n  \n  return monster"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = [int(line) for line in stdin.splitlines()]\n    # assume all monster has at least 1 health\n    while len(A) > 1:\n        A = [max(A[i], A[j]) - min(A[i], A[j]) for i, j in combinations(range(len(A)), 2)]\n    return str(A[0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, *a = map(int, stdin.split())\n    b = list(reversed(a))\n\n    count = 1\n    while len(b) > 1:\n        if count % 2 == 0:\n            b = [min(b[0], b[1])] + b[2:]\n        else:\n            b = b[:2] + [min(b[0], b[1])] + b[2:]\n        count += 1\n\n    print(b[0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = stdin.split()\n    A = list(map(int, A))\n    A.sort()\n    cur = A[0]\n    for a in A[1:]:\n        cur = min(cur, a - 1)\n    return str(cur)"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    jaws = [0] * len(stdin)\n    \n    for i in range(len(stdin) - 1, 0, -1):\n        if stdin[i - 1] == stdin[i]:\n            jaws[i] = jaws[i - 1] + 1\n        else:\n            jaws[i] = 1\n    \n    stomach = stdin.find('/')\n    if stomach == -1:\n        stomach = stdin.find('+')\n        if stomach == -1:\n            stomach = stdin.find('-')\n            if stomach == -1:\n                stomach = stdin.find('*')\n                if stomach == -1:\n                    return stdin\n                else:\n                    jaws[stomach] += 1\n                    for i in range(stomach + 1, len(stdin)):\n                        jaws[i] = 0\n                    return ''.join(str(x) for x in jaws[:stomach + 1])\n            else:\n                jaws[stomach] += 1\n                for i in range(stomach + 1, len(stdin)):\n                    jaws[i] = 0\n                return ''.join(str(x) for x in jaws[:stomach + 1])\n        else:\n            jaws[stomach] += 1\n            for i in range(stomach + 1, len(stdin)):\n                jaws[i] = 0\n            return ''.join(str(x) for x in jaws[:stomach + 1])\n    else:\n        jaws[stomach] += 1\n        for i in range(stomach + 1, len(stdin)):\n            jaws[i] = 0\n        return ''.join(str(x) for x in jaws[:stomach + 1])\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\"-\")\n    return x\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '010'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    golorp_name = golorp_name.replace('?', ''.join(sorted('0123456789', reverse=True)))\n    golorp_name = golorp_name.replace('(', ''.join(sorted('0123456789', reverse=True)))\n    golorp_name = golorp_name.replace(')', ''.join(sorted('0123456789', reverse=True)))\n    golorp_name = golorp_name.replace('_', ''.join(sorted('0123456789', reverse=True)))\n    golorp_name = golorp_name.replace('/', ''.join(sorted('0123456789', reverse=True)))\n    golorp_name = golorp_name.replace('+', ''.join(sorted('0123456789', reverse=True)))\n    golorp_name = golorp_name.replace('-', ''.join(sorted('0123456789', reverse=True)))\n\n    if 'false' in golorp_name:\n        return 'false'\n\n    golorp_name = golorp_name.replace('<', ''.join(sorted('0123456789', reverse=True)))\n    golorp_name = golorp_name.replace('>', ''.join(sorted('0123456789', reverse=True)))\n    golorp_name = golorp_name.replace(',', ''.join(sorted('0123456789', reverse=True)))\n\n    return golorp_name\n    \n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(',')\n    variables = [i for i in range(10)]\n    golorps = []\n    for i in stdin:\n        for j in i:\n            if j in variables:\n                variables.remove(j)\n        golorps.append(i)\n    if not variables:\n        print('010')\n    else:\n        print(''.join(variables))\n    return ''\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"?(____)>____<____:_;_;_;_;_;_;_;_;_:_;_;_;_;_;_:_;_;_;_;_;_:_;_;_;_;_;_;_:_;_;_;_;_;_;_:_;_;_:_;_:_;_;_;_;_:_;_;_;_:_;_;_:_;_;_:_;_:_;_:_;_:_;_:_;_:_;_:_:_;_:_;_:_;_:_;_:_;_:_;_:_;_:_;_:_;_:_:_;_:_;_:_:_;_:_;_:_:_;_:_;_:_:_;_:_:_;_:_;_:_:_;_:_:_:_:_:_:_:_:_:_:_;_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[1:-1]\n    stack = []\n    for index, char in enumerate(string):\n        if char == '>':\n            stack.append(index)\n        elif char == '<':\n            stack.pop()\n    return ''.join(map(lambda x: string[x], stack))\n\n\nprint(solution(\"?(__+___+__-___):-___>__. \"))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # my solution\n    # n, m, k = [int(x) for x in stdin.split()]\n    # a = [int(x) for x in stdin.splitlines()]\n    # xor = 0\n    # for i in range(m):\n    #     for j in range(i + 1):\n    #         xor ^= a[i][j]\n    # s = set()\n    # for i in range(n):\n    #     for j in range(m):\n    #         s.add(xor ^ a[i][j])\n    # print(len(s))\n\n    # solution from hint\n    n, m, k = map(int, input().split())\n    a = [[0] * n] + [[int(i) for i in input().split()] for _ in range(n)]\n    cnt = 0\n    for i in range(n + 1):\n        for j in range(m):\n            cnt += a[i][j] ^ a[i][j + 1]\n            if i!= n or j!= m - 1:\n                cnt += a[i][j] ^ a[i + 1][j]\n    print(cnt)\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split('\\n')[0].split(' ')))\n    A = [list(map(int, stdin.split('\\n')[i + 1].split(' '))) for i in range(n)]\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            res += (A[i][j] + A[i][j + 1] + A[i + 1][j] + A[i + 1][j + 1]) == k\n    print(res)"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(count_ways(stdin))\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # 100000000 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x 100 x"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(i, j, xor, k):\n        if i == n and j == m:\n            nonlocal cnt\n            if xor == k:\n                cnt += 1\n            return\n        if i < n:\n            dfs(i + 1, j, xor, k)\n        if j < m:\n            dfs(i, j + 1, xor, k)\n\n    cnt = 0\n    n, m, k = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    dfs(0, 0, 0, k)\n    return cnt\n\nassert solution(\"3 3 11\") == 3\n\nassert solution(\"3 4 2\") == 5\n\nassert solution(\"3 4 1000000000000000000\") == 0\n\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = ''\n    for d in range(n, 0, -1):\n        if n % d == 0:\n            t = s[-d:] + t\n            s = s[:len(s) - d]\n    print(t)\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return \"\"\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = []\n    for i in range(len(s)):\n        t.append(s[i])\n    t.reverse()\n    return ''.join(t)\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nsolution(\"rocesfedoc\") == \"codeforces\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    return str(a+b)"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # my solution here\n    # a, b = stdin.split(' ')\n    # return int(a) + int(b)\n    # return a + b\n    # return sum(map(int, stdin.split(' ')))\n    return int(stdin)\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    return A+B"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a+b)"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(\" \"))\n    return str(x + y)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a+b\nprint(solution(input()))\n\nhttps://www.codewars.com/kata/55a45bba5bc75e8db5000029/train/python\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a) + int(b))"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a+b\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    print(\"\\n\".join([\">\" for _ in range(500001)]))\n    for char in stdin.replace(' ', ''):\n        print(\"[>+-]\"[ord(char) >> 7], end='')\n    print(\"\\n\" + \"\".join([\"+\" for _ in range(500001)]))\n    return \"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return main(stdin)"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Use a stack to keep track of the operators. We have one '>' on the stack for each operator, and one '<' on the stack for each operator.\n    If we encounter a '+', add the top two elements from the stack, push the result, and pop the two elements.\n    If we encounter a '-', subtract the top two elements from the stack, push the result, and pop the two elements.\n    \"\"\"\n\n    # split the input string and cast them into integers\n    tokens = [int(token) for token in stdin.split()]\n\n    # create a dict of numbers\n    nums = dict([(i, chr(i)) for i in range(256)])\n\n    # create a stack\n    stack = []\n\n    # iterate over all tokens\n    for token in tokens:\n\n        # if it's a number\n        if token < 256:\n            # print the number\n            print(nums[token], end=\"\")\n\n        # if it's a + or -\n        elif token in ('+', '-'):\n\n            # if it's a +\n            if token == '+':\n\n                # get the top two elements from the stack\n                a, b = stack[-2:]\n\n                # push the result onto the stack\n                stack.append(a + b)\n\n            # if it's a -\n            elif token == '-':\n\n                # get the top two elements from the stack\n                a, b = stack[-2:]\n\n                # push the result onto the stack\n                stack.append(b - a)\n\n            # if it's a '>'\n            elif token == '>':\n\n                # push the result onto the stack\n                stack.append(1)\n\n            # if it's a '<'\n            elif token == '<':\n\n                # push the result onto the stack\n                stack.append(-1)\n\n    return \"\"\n\n\"\"\"\nhint 1\n\nWrite a generator of the sequence of memory cells (integers 0 to 255) which will be accessed to obtain the result of the expression. We'll use a stack to keep track of the operators and their corresponding memory cells.\n\nhint 2\n\nThe following function is a helper for the generator. We will call it from the solution() function, so we can write it as a generator function.\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\nn\n\"\"\"\n    \n    return"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  # Write your code here\n  pass\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin)\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # define variables and arrays\n    code = stdin\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->-]<\"\n    code += \">+\"\n    code += \"<[<+>-]<\"\n    code += \">+\"\n    code += \"<[<->"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin)\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n-----Tests-----\n>>> \n>>> # 1. TEST 1\n>>> import sys; input = lambda: sys.stdin.readline().rstrip()\n>>> sys.setrecursionlimit(100000)\n>>> main_script = solution\n>>> tests = [\n...   {\n...       'input': '''\n... 2\n... 2\n... '''\n...      ,\n...       'output': '''\n... 1\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 3\n... 1\n... 1\n... 2\n... '''\n...      ,\n...       'output': '''\n... 2\n... 1\n... 2\n... '''\n...   },\n...   {\n...       'input': '''\n... 5\n... 1\n... 1\n... 2\n... 3\n... '''\n...      ,\n...       'output': '''\n... 2\n... 1\n... 2\n... 3\n... '''\n...   },\n...   {\n...       'input': '''\n... 2\n... 2\n... '''\n...      ,\n...       'output': '''\n... 1\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 3\n... 3\n... 2\n... '''\n...      ,\n...       'output': '''\n... 2\n... 2\n... '''\n...   },\n...   {\n...       'input': '''\n... 2\n... 2\n... '''\n...      ,\n...       'output': '''\n... 1\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... '''\n...      ,\n...       'output': '''\n... 0\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 2\n... '''\n...      ,\n...       'output': '''\n... 0\n... '''\n...   },\n...   {\n...       'input': '''\n... 2\n... 1\n... 3\n... '''\n...      ,\n...       'output': '''\n... 1\n... 1\n... 2\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 2\n... 3\n... '''\n...      ,\n...       'output': '''\n... 1\n... 2\n... 3\n... '''\n...   },\n...   {\n...       'input': '''\n... 5\n... 3\n... 1\n... '''\n...      ,\n...       'output': '''\n... 2\n... 2\n... 2\n... '''\n...   },\n...   {\n...       'input': '''\n... 5\n... 1\n... 2\n... 3\n... '''\n...      ,\n...       'output': '''\n... 2\n... 1\n... 2\n... 3\n... '''\n...   },\n...   {\n...       'input': '''\n... 5\n... 1\n... 2\n... 3\n... 4\n... '''\n...      ,\n...       'output': '''\n... 2\n... 2\n... 2\n... 2\n... '''\n...   },\n...   {\n...       'input': '''\n... 5\n... 1\n... 2\n... 3\n... 4\n... 5\n... '''\n...      ,\n...       'output': '''\n... 2\n... 2\n... 2\n... 2\n... 2\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... '''\n...      ,\n...       'output': '''\n... 0\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 1\n... '''\n...      ,\n...       'output': '''\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 1\n... '''\n...      ,\n...       'output': '''\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 1\n... '''\n...      ,\n...       'output': '''\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 2\n... 2\n... '''\n...      ,\n...       'output': '''\n... 1\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 3\n... '''\n...      ,\n...       'output': '''\n... 1\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 1\n... 1\n... '''\n...      ,\n...       'output': '''\n... 1\n... 1\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 2\n... '''\n...      ,\n...       'output': '''\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 3\n... 3\n... 3\n... '''\n...      ,\n...       'output': '''\n... 3\n... 3\n... 3\n... '''\n...   },\n...   {\n...       'input': '''\n... 2\n... 3\n... '''\n...      ,\n...       'output': '''\n... 1\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 3\n... '''\n...      ,\n...       'output': '''\n... 1\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... '''\n...      ,\n...       'output': '''\n... 0\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 1\n... '''\n...      ,\n...       'output': '''\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 1\n... 1\n... '''\n...      ,\n...       'output': '''\n... 1\n... '''\n...   },\n...   {\n...       'input': '''\n... 2\n... 3\n... '''\n...      ,\n...       'output': '''\n... 2\n... 2\n... '''"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    answers = []\n    for _ in range(q):\n        k = int(stdin.readline())\n        i = 1\n        while k > i:\n            i *= 10\n        answers.append(int(str(i)[k - 1]))\n    return '\\n'.join(map(str, answers))"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = list(n)\n    \n    l = []\n    for i in range(1,len(n)+1):\n        l.append(i)\n    \n    a = 1\n    while a < len(n):\n        n[a] = '1' + n[a]\n        a += 1\n    \n    count = 1\n    while len(n[count:])>0:\n        for i in range(1,len(n[count:])+1):\n            n[count+i] = '1' + n[count+i]\n        count += i\n    \n    d = {k:v for k,v in zip(l,n)}\n    \n    a = [int(i) for i in n]\n    \n    return ''.join(str(i) for i in a)\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"solution function\n    Args:\n        stdin (str): stdin from test\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    # Your code here\n    # pass\n    # your code here\n\n    return \"\"\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(\n        int(''.join(filter(str.isdigit, line)))\n        for line in stdin.split('\\n')\n    )))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # ------------\n    def is_shichi_go_san(number):\n        # the following strings are used for matching:\n        base_ten_rep = \"\".join(sorted(list(str(number))))\n        return base_ten_rep == \"7357\" or base_ten_rep == \"3753\" or base_ten_rep == \"5373\" or base_ten_rep == \"5375\"\n    # ------------\n    n = int(stdin.read())\n    print(sum(1 for i in range(1, n + 1) if is_shichi_go_san(i)))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    count = 0\n    for i in range(1, n + 1):\n        if is_shichi_go_san(i):\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    answer = 0\n    for i in range(1, num+1):\n        str_i = str(i)\n        flag = True\n        for j in range(len(str_i)):\n            if str_i[j] not in ['7', '5', '3']:\n                flag = False\n                break\n        if flag:\n            answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    print(len(list(filter(ShichiGoSan.is_shichi_go_san, range(1, N + 1)))))\n    return ''"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    for num in range(1, n + 1):\n        num = str(num)\n        if '7' not in num and '5' in num and '3' in num:\n            answer += 1\n    print(answer)"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    count = 0\n    for num in range(1, N + 1):\n        if '7' in str(num) and '5' in str(num) and '3' in str(num):\n            count += 1\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    ans = 0\n    for i in range(1, int(n) + 1):\n        s = str(i)\n        if '7' in s or '5' in s or '3' in s:\n            if not '7' in s or not '5' in s or not '3' in s:\n                ans += 1\n    return ans"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # conditions:\n    #   1. N >= 10\n    #   2. N has 7, 5 and 3 as digits\n    #   3. digits from 1 to N are distinct\n    #   4. digits from 7 to N are distinct\n    #   5. digits from 5 to N are distinct\n    return sum([n1 * n2 * n3 for n1 in range(1, n) for n2 in range(n1 + 1, n) for n3 in range(n2 + 1, n) if has_seven_five_three(n1, n2, n3)])\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of tiles that need to be repainted to satisfy the condition.\n    \n    >>> solution(\"00100\")\n    2\n    >>> solution(\"01101\")\n    2\n    '''\n    \n    repaint_cnt = 0\n    for s in stdin:\n        # Given condition is that adjacent tiles must have different colors, so\n        # we take into account only the first character of the given string.\n        if s[0] == '1':\n            repaint_cnt += 1\n    return repaint_cnt"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"Finds the minimal number of tiles that need to be repainted to satisfy the condition.\"\"\"\n  return stdin.count('0')\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin)//2)\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\""
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'Hello, world.'"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'No'\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    if all([(x % 2) == 0 for x in a if x!= 0]):\n        return 'APPROVED'\n    else:\n        return 'DENIED'"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_nums = int(stdin.readline())\n    nums = [int(num) for num in stdin.readline().split(' ')]\n    answer = \"APPROVED\" if all([num % 2 == 0 for num in nums]) and all([num % 3 == 0 or num % 5 == 0 for num in nums]) else \"DENIED\"\n    return answer\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of integers\n    n = int(stdin.readline())\n\n    # Get list of integers\n    arr = [int(n) for n in stdin.readline().split()]\n\n    for n in arr:\n        if n % 2 == 0 and (n % 3 == 0 or n % 5 == 0):\n            continue\n        else:\n            return \"DENIED\"\n\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input of integers with space separators\n    :return:\n    \"\"\"\n    N = int(stdin)\n    if N % 2 == 1:\n        print('DENIED')\n    else:\n        A = list(map(int, stdin.split(' ')))\n        is_ok = True\n        for a in A:\n            if a % 3!= 0 and a % 5!= 0:\n                is_ok = False\n        if is_ok:\n            print('APPROVED')\n        else:\n            print('DENIED')\n        return\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"APPROVED\" if all(\n        not (a % 2) or (a % 3) or (a % 5) for a in list(map(int, stdin.split()))\n    ) else \"DENIED\"\n\"\"\"\n\n\n\"\"\"\nhttps://www.codewars.com/kata/59c98b0cb40fefe2520002dd/train/python\n\nYou're given a string of space-separated integers, and have to return the highest and lowest integers, in string format.\n\nThe input string will always be valid and formatted as such: Each integer will occupy a single space in the string.\n\nNote: Your solution should be \"in-place\" with O(1) space complexity.\n\nThe new string should be built by appending the lowest integer first, and then the highest integer.\n\nIf a single integer is given, the highest and lowest integer will be the same.\n\nExamples:\n\ncsAnythingButThis([3, 5, 1]) => \"5 1\"\ncsAnythingButThis([3]) => \"3 3\"\ncsAnythingButThis([] => \"3 3\"\ncsAnythingButThis([-3, -5, -1]) => \"-1 -3\"\nNotes:\n\n[3, 5, 1] is out of the scope for this Kata. However, you can consider it as a valid test case.\nIf you feel like the Kata is too easy, try coming up with your own test cases.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # map the input to an array\n    my_list = stdin.split('\\n')\n    # remove the first element that is the number of integers\n    my_list.pop(0)\n    # put all the values into a list\n    my_list = list(map(int, my_list))\n    # check all values in the list\n    for i in my_list:\n        # check if the number is even\n        if (i % 2) == 0:\n            # check if the number is divisible by 3\n            if i % 3 == 0:\n                # check if the number is divisible by 5\n                if i % 5 == 0:\n                    # if the number is divisible by 3 and 5, print APPROVED\n                    print(\"APPROVED\")\n                else:\n                    # if not divisible by 5, print DENIED\n                    print(\"DENIED\")\n            else:\n                # if not divisible by 3, print DENIED\n                print(\"DENIED\")\n        else:\n            # if the number is not even, print DENIED\n            print(\"DENIED\")"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Checks if the number is divisible by 3 or 5\n    \"\"\"\n    document_number = int(stdin.strip())\n    document_array = [int(item) for item in stdin.strip().split(' ')]\n    is_divisible_by_three_or_five = all([item % 3 == 0 or item % 5 == 0 for item in document_array])\n\n    if is_divisible_by_three_or_five:\n        print('APPROVED')\n    else:\n        print('DENIED')\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    for i in a:\n        if i % 2 == 0:\n            if i % 3 == 0 or i % 5 == 0:\n                continue\n            else:\n                return 'DENIED'\n    return 'APPROVED'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task: Given an input consisting of a number N and then N integers, check whether all the given numbers are divisible by 3 or 5.\n    Constraints:\n        - 1 \\leq N \\leq 100\n        - 1 \\leq A_i \\leq 1000\n    \"\"\"\n    # Get number of integers\n    n = int(stdin.readline())\n\n    # Get the numbers\n    numbers = list(map(int, stdin.readline().split()))\n\n    # Check if all integers are divisible by 3 or 5\n    for number in numbers:\n        if number % 3!= 0 and number % 5!= 0:\n            return \"DENIED\"\n\n    return \"APPROVED\"\n    \"\"\"\n    Task: Given an input consisting of a number N and then N integers, check whether all the given numbers are divisible by 3 or 5.\n    Constraints:\n        - 1 \\leq N \\leq 100\n        - 1 \\leq A_i \\leq 1000\n    \"\"\"\n    # Get number of integers\n    n = int(stdin.readline())\n\n    # Get the numbers\n    numbers = list(map(int, stdin.readline().split()))\n\n    # Check if all integers are divisible by 3 or 5\n    for number in numbers:\n        if number % 3!= 0 and number % 5!= 0:\n            return \"DENIED\"\n\n    return \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(number) for number in stdin.split()]\n    for num in numbers:\n        if num % 2 == 0:\n            if not (num % 3 == 0 or num % 5 == 0):\n                return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'U':\n            if i % 2 == 1:\n                count += 1\n        if stdin[i] == 'D':\n            if i % 2 == 0:\n                count += 1\n    if count == len(stdin):\n        print('Yes')\n    else:\n        print('No')\n    return ''\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time: O(len(S))\n    Space: O(1)\n    '''\n    s = stdin.strip()\n    ans = 'Yes'\n    \n    # for every position\n    for i in range(len(s)):\n        if (i % 2 == 0):\n            # if it's even position\n            if (s[i] == 'L' or s[i] == 'D'):\n                ans = 'No'\n        else:\n            # if it's odd position\n            if (s[i] == 'R' or s[i] == 'U'):\n                ans = 'No'\n            \n    return ans\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    for i in range(0, len(string), 2):\n        if string[i] in 'LR':\n            if i < len(string)-1 and string[i+1] in 'LR':\n                continue\n            else:\n                return 'No'\n        else:\n            return 'No'\n    return 'Yes'\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns Yes if S is easily playable, and No otherwise.\n    Every character in an odd position (1-st, 3-rd, 5-th, 7-th) is R, U, or D.\n    Every character in an even position (2-nd, 4-th, 6-th) is L, U, or D.\n    Thus, S is easily playable.\n    '''\n    s = stdin\n    for i in range(len(s)):\n        if i % 2!= 0:\n            if s[i] in ('R', 'U', 'D'):\n                pass\n            else:\n                return 'No'\n        else:\n            if s[i] in ('L', 'U', 'D'):\n                pass\n            else:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if (\n        all([\"R\" in stdin[i] if i % 2 else \"L\" in stdin[i] for i in range(len(stdin))])\n        and all(\n            [\"D\" in stdin[i] if i % 2 else \"U\" in stdin[i] for i in range(len(stdin))]\n        )\n    ):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    dance = stdin.splitlines()[0]\n    odds = []\n    evens = []\n    for idx, i in enumerate(dance):\n        if idx % 2:\n            odds.append(i)\n        else:\n            evens.append(i)\n    if not set(odds).issubset({\"R\", \"U\", \"D\"}) or not set(evens).issubset({\"L\", \"U\", \"D\"}):\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    dance = stdin.strip()\n    odds = ['R','U','D']\n    evens = ['L','U','D']\n    check1 = all(i in odds for i in dance[::2])\n    check2 = all(i in evens for i in dance[1::2])\n    return \"Yes\" if check1 and check2 else \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if (\n        all(\n            [\n                stdin[i] == \"R\"\n                or stdin[i] == \"U\"\n                or stdin[i] == \"D\"\n                for i in range(len(stdin))\n            ]\n        )\n        and all(\n            [\n                stdin[i] == \"L\"\n                or stdin[i] == \"U\"\n                or stdin[i] == \"D\"\n                for i in range(len(stdin))\n            ]\n        )\n        else \"No\"\n    )\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_easy_playable(stdin: str) -> str:\n        is_odd = True\n        is_even = True\n        for i in range(len(stdin)):\n            if stdin[i] == 'R' or stdin[i] == 'U' or stdin[i] == 'D':\n                if is_odd:\n                    is_odd = False\n                    if stdin[i] == 'R' or stdin[i] == 'U':\n                        return 'No'\n                elif is_even:\n                    is_even = False\n                    if stdin[i] == 'L' or stdin[i] == 'U':\n                        return 'No'\n            else:\n                return 'No'\n        return 'Yes'\n    \n    return is_easy_playable(stdin)\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(1, len(s) + 1):\n        if i % 2:\n            if s[i - 1] not in ('L', 'R', 'U', 'D'):\n                return 'No'\n        else:\n            if s[i - 1] not in ('L', 'R', 'U', 'D'):\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = (int(i) for i in stdin.split())\n    trains = a\n    bus = b\n    taxi = c\n    plane = d\n    ship = e\n    total_time = 0\n    min_time = 0\n    while n > 0:\n        if trains < a:\n            trains = a\n            min_time += trains\n            total_time += min_time\n        elif bus < b:\n            bus = b\n            min_time += bus\n            total_time += min_time\n        elif taxi < c:\n            taxi = c\n            min_time += taxi\n            total_time += min_time\n        elif plane < d:\n            plane = d\n            min_time += plane\n            total_time += min_time\n        elif ship < e:\n            ship = e\n            min_time += ship\n            total_time += min_time\n        else:\n            min_time += max([trains, bus, taxi, plane, ship])\n            total_time += min_time\n        trains = trains + a - 1\n        bus = bus + b - 1\n        taxi = taxi + c - 1\n        plane = plane + d - 1\n        ship = ship + e - 1\n        n -= 1\n    return str(total_time)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = [int(x) for x in stdin.split('\\n')[:6]]\n    total_n = n\n    time = 0\n    while n > 1:\n        if n % 2!= 0:\n            n //= 2\n        else:\n            n //= 2\n            time += 1\n    return total_n - time\n\"\"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # return \"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum number of minutes that N people will need to arrive at city 6.\n    :param stdin: standard input of the challenge\n    :return: solution\n    \"\"\"\n    # read N\n    n = int(stdin)\n    # read A, B, C, D, E\n    atcoder_inc = [int(x) for x in stdin.split('\\n')]\n    # set up variables\n    minutes = 0\n    current = 0\n    # add one minute to the time\n    minutes += 1\n    # assign the value of the first minuets to current\n    current = atcoder_inc[0]\n    # loop through every minute\n    while True:\n        # if the value of current is equal to 6, return minutes\n        if current == 6:\n            return minutes\n        # if current is equal to 0, add all the numbers of the array together\n        if current == 0:\n            current += sum(atcoder_inc)\n        # if the value is greater than 6, remove one of the values from atcoder_inc and add it to current\n        if current > 6:\n            current -= 1\n            atcoder_inc.pop()\n        # add one minute to minutes\n        minutes += 1\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    trains = []\n    buses = []\n    taxis = []\n    airplanes = []\n    ships = []\n    for i in range(N):\n        trains.append(A)\n        buses.append(B)\n        taxis.append(C)\n        airplanes.append(D)\n        ships.append(E)\n    trains.append(0)\n    buses.append(0)\n    taxis.append(0)\n    airplanes.append(0)\n    ships.append(0)\n    trains.sort()\n    buses.sort()\n    taxis.sort()\n    airplanes.sort()\n    ships.sort()\n    for i in range(N):\n        if trains[i] > 0:\n            trains[i] -= 1\n            trains[i+1] += 1\n        if buses[i] > 0:\n            buses[i] -= 1\n            buses[i+1] += 1\n        if taxis[i] > 0:\n            taxis[i] -= 1\n            taxis[i+1] += 1\n        if airplanes[i] > 0:\n            airplanes[i] -= 1\n            airplanes[i+1] += 1\n        if ships[i] > 0:\n            ships[i] -= 1\n            ships[i+1] += 1\n    # print(trains, buses, taxis, airplanes, ships)\n    # print(trains[0], buses[0], taxis[0], airplanes[0], ships[0])\n    count = 0\n    if trains[0] > 0:\n        count += 1\n        trains[0] -= 1\n        trains[1] += 1\n    if buses[0] > 0:\n        count += 1\n        buses[0] -= 1\n        buses[1] += 1\n    if taxis[0] > 0:\n        count += 1\n        taxis[0] -= 1\n        taxis[1] += 1\n    if airplanes[0] > 0:\n        count += 1\n        airplanes[0] -= 1\n        airplanes[1] += 1\n    if ships[0] > 0:\n        count += 1\n        ships[0] -= 1\n        ships[1] += 1\n    for i in range(1, N):\n        if trains[i] > 0 and trains[i-1] > 0:\n            count += 1\n            trains[i] -= 1\n            trains[i-1] -= 1\n            trains[i+1] += 1\n        elif buses[i] > 0 and buses[i-1] > 0:\n            count += 1\n            buses[i] -= 1\n            buses[i-1] -= 1\n            buses[i+1] += 1\n        elif taxis[i] > 0 and taxis[i-1] > 0:\n            count += 1\n            taxis[i] -= 1\n            taxis[i-1] -= 1\n            taxis[i+1] += 1\n        elif airplanes[i] > 0 and airplanes[i-1] > 0:\n            count += 1\n            airplanes[i] -= 1\n            airplanes[i-1] -= 1\n            airplanes[i+1] += 1\n        elif ships[i] > 0 and ships[i-1] > 0:\n            count += 1\n            ships[i] -= 1\n            ships[i-1] -= 1\n            ships[i+1] += 1\n    # print(trains, buses, taxis, airplanes, ships)\n    # print(trains[0], buses[0], taxis[0], airplanes[0], ships[0])\n    # print(count)\n    return str(count)\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_better(stn1: str, stn2: str) -> bool:\n        return int(stn1[0]) < int(stn2[0]) or (int(stn1[0]) == int(stn2[0]) and\n                                               int(stn1[1]) < int(stn2[1]))\n\n    def min_time(stn1: str, stn2: str) -> int:\n        n1, n2 = int(stn1[0]), int(stn2[0])\n        m1, m2 = int(stn1[1]), int(stn2[1])\n        if is_better(stn1, stn2):\n            return n1 + n2\n        elif is_better(stn2, stn1):\n            return n2 + n1\n        else:\n            return (m1 + m2) * n1 + (n1 + n2) * m2\n\n    n = int(stdin.readline())\n    station_list = [tuple(stdin.readline().split()) for _ in range(n)]\n    min_time_to_dest = min([min_time(station1, station2) for station1, station2 in\n                            itertools.combinations(station_list, r=2)])\n    print(min_time_to_dest)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = 9\n    return N - sum(int(x) for x in set(str(i) for i in range(s, N + 1, 2))) - sum(int(x) for x in set(str(i) for i in range(1, N + 1, 2)))"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = int(stdin)\n    count = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if (i!= j and (i % 9 == 0 or j % 9 == 0)):\n                count += 1\n    return str(count % (10 ** 9 + 7))"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (factorial(n) + factorial(n - 2)) % (10**9 + 7)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return a\n    \n    "
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the provided input.\"\"\"\n    pass"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '2'\n    else:\n        return '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for _ in filter(lambda x: len(x) % 2 == 0, stdin.splitlines())))\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    num_list = []\n    while X > 0:\n        num_list.append(X % 10)\n        X //= 10\n    for num in num_list:\n        if num == 1:\n            continue\n        elif num == 0:\n            return\n        else:\n            for i in range(2, int(num)):\n                if int(num) % i == 0:\n                    break\n            else:\n                return int(num)\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    x = int(sys.stdin.read())\n    max = 10001\n    primes = [2]\n    p = 2\n    while p < max:\n        for prime in primes:\n            if p % prime == 0:\n                break\n        else:\n            primes.append(p)\n        p += 1\n    return primes[primes.index(min(primes)) + 1]"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        while True:\n            if isPrime(n):\n                return n\n            n += 1\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get the input and make it an int\n    x = int(stdin)\n    \n    # Find the minimum number of prime numbers required to make the largest prime number greater than or equal to x\n    # return the number\n    return str(int(sorted(prime_list(x))[-1]))"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X: int = int(stdin)\n    for i in range(2, X):\n        if is_prime(i):\n            if X <= i:\n                return str(i)\n            elif i < X:\n                continue\n            else:\n                break\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum prime number greater than or equal to X.\n\n    >>> solution(20)\n    23\n    \"\"\"\n    num = int(stdin)\n    max_num = num\n    while True:\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return num\n        num += 1\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    \n    if X <= 2:\n        return 3\n    \n    for i in range(2, X + 1):\n        if i % 2 == 0:\n            i += 1\n        else:\n            break\n    return i\n\"\"\"\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    result = 0\n\n    while result < X:\n        result += 1\n        for i in range(2, int(result**0.5) + 1):\n            if result % i == 0:\n                break\n        else:\n            continue\n        break\n\n    return result\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    # If x is negative, print \"Prime\" for that value.\n    if x < 0:\n        return \"Prime\"\n    # If x is even, print \"Not Prime\"\n    if x % 2 == 0 and x!= 0:\n        return \"Not Prime\"\n    # If x is 1, print \"Prime\"\n    if x == 1:\n        return \"Prime\"\n    # If x is 2, print \"Prime\"\n    if x == 2:\n        return \"Prime\"\n    # If x is greater than 2, initialize a variable with value 3, and iterate through all integers below x\n    # This ensures that we can keep track of the number of factors of 2 to 3.\n    prime = 3\n    # The below will be true if we have found no prime numbers greater than or equal to x\n    while prime < x:\n        # If the number is prime, iterate prime by incrementing by 2\n        if x % prime == 0:\n            return \"Not Prime\"\n        # If the number is not prime, iterate prime by incrementing by 2\n        else:\n            prime += 2\n    # If we have reached the end of the loop, then we must have found a prime number greater than or equal to x.\n    # Therefore, we can print the value of prime.\n    return str(prime)\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    x = int(stdin)\n    l = math.floor(math.sqrt(x))\n    r = l\n    while(True):\n        l -= 1\n        r += 1\n        if(isprime(l)):\n            return str(l)\n        if(isprime(r)):\n            return str(r)\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum number of elements that needs to be replaced.\"\"\"\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n\n    for i in range(n):\n        if sequence[i] == sequence[i + 2]:\n            break\n\n    return i + 1\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n\n    seq_set = set(seq)\n    if len(seq_set) > 2:\n        return n // 2\n    else:\n        return n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    v = sorted(list(map(int, stdin.split(\"\\n\")[1].split(\" \"))))\n    count = 0\n    i = 1\n    while i < n - 1:\n        if v[i] == v[i + 2]:\n            v[i] = v[i + 1]\n            count += 1\n        i += 2\n    if v[-1] == v[-2]:\n        count += 1\n        v[-1] = v[-2]\n    if count == 0:\n        count = 1\n    print(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    if n == 1:\n        return n\n    if n == 2:\n        return 0\n    n = n - 1\n    index = n\n    count = 0\n    while index > 0:\n        if a[index] == a[index - 2]:\n            count += 1\n            index -= 1\n        else:\n            break\n    if count == 2:\n        return 1\n    for i in range(n - 2):\n        if a[i] == a[i + 2]:\n            count += 1\n    return n - count\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum number of elements that needs to be replaced.\n\n    >>> solution(\"4\\n3 1 3 2\")\n    1\n    \"\"\"\n    # My solution.\n    count = 0\n    n = int(stdin.readline())\n    v = list(map(int, stdin.readline().strip().split()))\n    for i in range(0, n - 1, 2):\n        if v[i] == v[i + 2]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    n = int(next(stdin.readline().strip()))\n    seq = list(map(int, next(stdin.readline().strip()).split()))\n    count = 0\n    for i in range(n - 2):\n        if seq[i] == seq[i + 2]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    seq = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    length = len(seq)\n    if length < 2: return \"0\"\n    \n    cnt = 0\n    dict = {}\n    for i in seq[:-2]:\n        if i not in dict:\n            dict[i] = 1\n        else:\n            cnt += 1\n            dict[i] += 1\n            \n    if cnt < 2: return str(cnt)\n    \n    return str(cnt - 2)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().split()\n    count = 0\n    for i in range(0, len(s)-2):\n        if int(s[i]) == int(s[i+2]):\n            count += 1\n    return count\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n\n    counter = 0\n    while True:\n        if len(v) == 2:\n            break\n        else:\n            if v[0] == v[1]:\n                v = v[2:]\n            else:\n                counter += 1\n                v = v[1:] + v[:1]\n    return counter\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = list(map(int, stdin.split(\"\\n\")[1].split()))\n    sequence.sort()\n    if sequence[1]!= sequence[0] + 1:\n        return 1\n    return sequence[-1] - sequence[0] - 1\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # create list from input\n    n, a, b, c = [int(x) for x in stdin.split()]\n    # create bamboos list\n    bamboos = [int(x) for x in stdin.split()]\n    # append empty list to fill with magics\n    magic = []\n    # make list with possible magics\n    possible_magics = []\n    # append magics to list\n    if b > a:\n        possible_magics.append(\"Extension Magic\")\n    if b < a:\n        possible_magics.append(\"Shortening Magic\")\n    if b > a and c > b:\n        possible_magics.append(\"Composition Magic\")\n    # make list with magic values\n    magic_values = []\n    # make list with magic names\n    magic_names = []\n    # make list with magic values\n    magic_costs = []\n    # make list with magic names\n    magic_types = []\n    # make list with magic values\n    magic_progresses = []\n    # append all magic types to list\n    for i in range(len(possible_magics)):\n        magic_types.append(possible_magics[i])\n        # append all magic values to list\n        magic_values.append([])\n        # append all magic costs to list\n        magic_costs.append([])\n        # append all magic progresses to list\n        magic_progresses.append([])\n    # check all combinations of possible magic types\n    for i in range(len(possible_magics)):\n        for j in range(i + 1, len(possible_magics)):\n            for k in range(j + 1, len(possible_magics)):\n                # append the magic names to list\n                magic_names.append(possible_magics[i] + \" \" + possible_magics[j] + \" \" + possible_magics[k])\n                # append the magic values to list\n                magic_values[magic_names.index(possible_magics[i] + \" \" + possible_magics[j] + \" \" + possible_magics[k])].append(magic_values[magic_names.index(possible_magics[i])][0] + magic_values[magic_names.index(possible_magics[j])][0] + magic_values[magic_names.index(possible_magics[k])][0])\n                # append the magic costs to list\n                magic_costs[magic_names.index(possible_magics[i] + \" \" + possible_magics[j] + \" \" + possible_magics[k])].append(possible_magics[i] + magic_values[magic_names.index(possible_magics[i])][0] + possible_magics[j] + magic_values[magic_names.index(possible_magics[j])][0] + possible_magics[k] + magic_values[magic_names.index(possible_magics[k])][0])\n                # append the magic progresses to list\n                magic_progresses[magic_names.index(possible_magics[i] + \" \" + possible_magics[j] + \" \" + possible_magics[k])].append(magic_values[magic_names.index(possible_magics[i])][0] + magic_values[magic_names.index(possible_magics[j])][0] + magic_values[magic_names.index(possible_magics[k])][0])\n    # print magic names list\n    # print magic values list\n    # print magic costs list\n    # print magic progresses list\n    # loop through magic names list\n    for i in range(len(magic_names)):\n        # loop through magic costs list\n        for j in range(len(magic_costs[i])):\n            # loop through magic progresses list\n            for k in range(len(magic_progresses[i])):\n                # if current magic costs is lower than current magic progresses\n                if magic_costs[i][j] < magic_progresses[i][k]:\n                    # print current magic costs\n                    # print current magic progresses\n                    # print current magic progress\n                    print(magic_costs[i][j] + magic_progresses[i][k])\n    return \"\""
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in input from standard input, transforms it into the parameters\n    needed for the function 'calculate_total_magic_points' and\n    returns the solution of the given problem.\n    \"\"\"\n    N, A, B, C = [int(value) for value in stdin.split()]\n    return str(calculate_total_magic_points(N, A, B, C))\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # stub\n    return '1'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes in input and finds the minimum number of MP to obtain the objective\n    \n    Parameters\n    ----------\n    stdin: str\n        Standard Input\n    \n    Returns\n    -------\n    str\n        string containing the amount of MP needed to obtain the objective\n    '''\n    raw_input = stdin.split('\\n')\n    N, A, B, C = list(map(int, raw_input[0].split()))\n    l = [int(x) for x in raw_input[1:]]\n    \n    l.sort()\n    \n    mp_needed = 10\n    \n    for n in range(len(l)):\n        if l[n] < A:\n            continue\n        elif l[n] < B:\n            mp_needed += 1\n        elif l[n] < C:\n            mp_needed += 2\n        elif l[n] >= C:\n            mp_needed += 1\n    \n    return mp_needed"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.splitlines()))\n    n = l[0]\n    a = l[1]\n    b = l[2]\n    c = l[3]\n    m = l[4]\n    return str(get_min_mp(n, a, b, c, m))\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    bamboo = [int(x) for x in stdin.split('\\n')]\n    res = 0\n\n    def create_bamboo(s: int) -> int:\n        global res\n        if s == c:\n            res += 1\n            return 0\n        if s >= a:\n            res += 1\n            return s - a\n        s += 1\n        return create_bamboo(s)\n\n    create_bamboo(bamboo[0])\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split(' '))\n    bamboo_lengths = list(map(int, stdin.split(' ')))\n    memo = {}\n    return min(\n        # Iterate over all possible combinations of bamboos that match C\n        sum(\n            # We know that we can use the magic extension if\n            # (1) the length of the bamboo is <= C, and\n            # (2) the length of the bamboo is >= the minimum length of a combination we can use\n            min(\n                # The minimum length of a combination is the sum of the lengths of all the bamboos that we can obtain, in a combination,\n                sum(bamboo_lengths[:i]),\n                # And if we can use the magic extension\n                # The amount of MP we need to use the extension is equal to the difference in the length between the minimum possible combination\n                # And the amount of MP we need to use the extension\n                B - min(bamboo_lengths[i], C)\n            ) for i in range(1, N + 1)\n            # All combinations of length 3 to N\n        ) +\n        # We add the amount of MP we need to use the composition magic\n        # Since it always gives the best answer, we just use the minimum amount\n        sum(\n            # We need the amount of MP to use the composition magic\n            10 * B,\n            # For every bamboo of length i that we can get from using extension magic\n            # We need to use 10 MP to use the composition magic\n            # And the amount of MP we need to use the composition magic is equal to the amount of MP we used to get the bamboos of length i\n            # We also need to subtract the amount of MP we used to get the bamboos of length i from the amount of MP we used to get the bamboos of length i\n            # Since the amount of MP we need to use the composition magic is equal to the amount of MP we used to get the bamboos of length i\n            # This way we can avoid counting the amount of MP we used to get the bamboos of length i more than once\n            sum(\n                # We need the amount of MP to use the shortening magic\n                B - 1,\n                # We need to use the shortening magic\n                # And the amount of MP we need to use the shortening magic is equal to the amount of MP we used to get the bamboos of length i\n                # We also need to subtract the amount of MP we used to get the bamboos of length i from the amount of MP we used to get the bamboos of length i\n                # Since the amount of MP we need to use the shortening magic is equal to the amount of MP we used to get the bamboos of length i\n                # This way we can avoid counting the amount of MP we used to get the bamboos of length i more than once\n                sum(bamboo_lengths[i - 1] for i in range(1, N + 1))\n            )\n        )\n    )\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # do not delete this comment\n    # there are two input strings: N, S\n    # N = integer, S = string, N \\in [0,26]\n    # N is the number of shifts\n    # S is the original string\n    # print the resulting string\n    # do not delete this comment\n    s = stdin.strip()\n    return s[(len(s) + int(stdin) - 1) % len(s)]\n    \n    \n    \n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    return \"\".join([chars[(chars.find(c) + n) % len(chars)] for c in s])\n    \nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    n: int = int(stdin.split(\"\\n\")[0])\n    return ''.join(chr((ord(c) - ord('A') + n) % 26 + ord('A')) for c in s)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    string = stdin[1:]\n\n    shift = ''\n    for char in string:\n        shift = shift + chr(ord(char) + length)\n\n    return shift\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, N = stdin.split('\\n')\n    print(N)\n    return ''.join([chr(ord(c) - ord('A') + ord('A') + int(N)) for c in S])"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans({'A': 'Z', 'B': 'A', 'C': 'B', 'D': 'C', 'E': 'D', 'F': 'E', 'G': 'F', 'H': 'G', 'I': 'H', 'J': 'I', 'K': 'J', 'L': 'K', 'M': 'L', 'N': 'M', 'O': 'N', 'P': 'O', 'Q': 'P', 'R': 'Q', 'S': 'R', 'T': 'S', 'U': 'T', 'V': 'U', 'W': 'V', 'X': 'W', 'Y': 'X', 'Z': 'Y'}, str.maketrans({'A': 'A', 'B': 'B', 'C': 'C', 'D': 'D', 'E': 'E', 'F': 'F', 'G': 'G', 'H': 'H', 'I': 'I', 'J': 'J', 'K': 'K', 'L': 'L', 'M': 'M', 'N': 'N', 'O': 'O', 'P': 'P', 'Q': 'Q', 'R': 'R', 'S': 'S', 'T': 'T', 'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y', 'Z': 'Z'})))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"\".join([chr(((ord(i) - ord('A') + n) % 26) + ord('A')) for i in stdin])\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    b = [int(i) for i in stdin.split()]\n    a = [0] * N\n    a[0] = b[0]\n    for i in range(1, N):\n        a[i] = max(b[i], max(a[:i]))\n    for i in range(N):\n        if isPrime(a[i]):\n            a[i] = max(b[i], a[i])\n    return''.join(str(i) for i in a)\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(i) for i in stdin.readline().split()]\n    a = []\n    for i in range(2, 30001):\n        if isPrime(i):\n            a.append(i)\n    p = dict()\n    for i in range(n):\n        if b[i] in p:\n            a[i] = p[b[i]]\n        else:\n            p[b[i]] = a[b[i] - 2]\n            a[b[i] - 2] = b[i]\n    return''.join([str(i) for i in a])\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[0].split()))\n    b = list(map(int, stdin.split('\\n')[1].split()))\n    res = []\n    b.extend(a)\n    while len(res) < len(a):\n        for i in b:\n            if i not in res:\n                res.append(i)\n                b.append(i)\n                break\n    return''.join(map(str, res[:len(a)]))\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(x) for x in stdin.split(\" \")]\n    a = [2, 3] + [x for x in range(n) if is_prime(x)]\n    if len(a) < n:\n        a.extend([x for x in range(max(a)+2, min(b)-1, -1) if is_prime(x)])\n    \n    a = a[:n]\n    return \" \".join(map(str, a))\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of remaining primes in this sequence\"\"\"\n    return ''\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5 2 3 2 4\\n\")\n    3 4 2\n    \"\"\"\n\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    d = {2, 3, 5}\n\n    a = [i for i in b]\n\n    for i in range(n):\n        p = 2\n        while a[i] % p!= 0:\n            p += 1\n        if p not in d:\n            d.add(p)\n            m = 0\n            for j in range(i, n):\n                if a[j] % p == 0:\n                    m += 1\n                else:\n                    m = 0\n                    break\n            if m == n - i:\n                d.add(a[i] // p)\n    for i in range(n):\n        if a[i] not in d:\n            m = 0\n            for j in range(i, n):\n                if a[j] % a[i] == 0:\n                    m += 1\n                else:\n                    m = 0\n                    break\n            if m == n - i:\n                d.add(a[i])\n    d = sorted(list(d))\n    d = [i for i in d if i < 2 * 10 ** 5]\n    d = d[::-1]\n\n    return \" \".join(str(i) for i in d)\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(number: int) -> bool:\n        if number == 2:\n            return True\n        elif number % 2 == 0:\n            return False\n        else:\n            for i in range(3, int(number ** 0.5) + 1, 2):\n                if number % i == 0:\n                    return False\n            return True\n\n    def gcd(a: int, b: int) -> int:\n        a, b = (a, b) if a >= b else (b, a)\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    def lcm_arr(arr: list[int]) -> int:\n        a = arr[0]\n        for i in arr[1:]:\n            a = lcm(a, i)\n        return a\n\n    a = [int(x) for x in stdin.split()]\n    b = []\n    for i in range(len(a)):\n        if is_prime(a[i]):\n            b.append(a[i])\n            a[i] = a[i] // 2\n        else:\n            d = a[i]\n            while is_prime(d) and d!= a[i]:\n                d -= 1\n            b.append(d)\n            a[i] = d // 2\n    b = [2] + b\n    print(*b)\n\n    l = lcm_arr(b)\n    print(*[l // x for x in b])\n\n    for i in range(len(a)):\n        if i > 0:\n            a[i] = a[i] - a[i - 1]\n    a = [2] + a\n    print(*a)\n\n    return stdout\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n    >>> solution('')\n    ''\n    >>> solution('1')\n    ''\n    >>> solution('1\\n2750131 199999')\n    '199999'\n    >>> solution('2\\n3 6')\n    '6'\n    >>> solution('3\\n3 5 2 3 2 4')\n    '3 4 2'\n    >>> solution('4\\n4 0 2')\n    '0 2'\n    >>> solution('5\\n6 1 4 9 15')\n    '9 15 1'\n    \"\"\"\n    N = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    A = [0] * (2 * N)\n    B = [0] * (2 * N)\n    B[0] = arr[0]\n    for i in range(N):\n        A[i] = arr[i]\n        A[N + i] = max(A[i], A[i + N])\n        if A[i]!= A[i + N]:\n            B[i] = max(A[i], A[i + N])\n        if i < N - 1:\n            B[N + i + 1] = min(A[i], A[i + N])\n        if i < N - 2:\n            B[N + i + 2] = (A[i] + A[i + N]) // 2\n    for i in range(2 * N):\n        if A[i]!= B[i]:\n            A[i] = B[i]\n    return''.join(map(str, A))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n\n    dp = [[[0, 0] for _ in range(n)] for _ in range(n)]\n    dp[0][0] = [0, arr[0]]\n\n    for i in range(1, n):\n        dp[0][i][0] = arr[i]\n        dp[0][i][1] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = [arr[i], arr[i]]\n                continue\n            dp[i][j][0] = min(dp[i][j - 1][0], dp[i - 1][j - 1][1]) + arr[i]\n            dp[i][j][1] = min(dp[i - 1][j - 1][0], dp[i][j - 1][1]) + arr[i]\n    print(''.join(map(str, [1 if dp[-1][-1][0] < dp[-1][-1][1] else 2 for i in range(n)])))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # n, k = input().split()\n    # n = int(n)\n    # k = int(k)\n    #\n    # students_programming_skills = input().split()\n    # for i in range(n):\n    #     students_programming_skills[i] = int(students_programming_skills[i])\n    # print(students_programming_skills)\n    #\n    # n, k = 5, 2\n    # students_programming_skills = [2, 4, 5, 3, 1]\n    # k = 1\n    # n, k = 7, 1\n    # students_programming_skills = [7, 2, 1, 3, 5, 4, 6]\n    # k = 5\n    #\n    # for i in range(n):\n    #     students_programming_skills[i] = int(students_programming_skills[i])\n    # print(students_programming_skills)\n    #\n    # result_str = ''\n    #\n    # for i in range(n):\n    #     result_str += str(i+1)\n    #\n    # print(result_str)\n    #\n    # for i in range(n):\n    #     if i + k < n:\n    #         result_str = result_str[:i+k] + str(i+1) + result_str[i+k:]\n    # print(result_str)\n\n    n, k = map(int, stdin.readline().split())\n    students_programming_skills = list(map(int, stdin.readline().split()))\n    i = 0\n    while True:\n        if len(students_programming_skills) == 1:\n            break\n        sorted_students_programming_skills = sorted(students_programming_skills)\n        max_index = students_programming_skills.index(sorted_students_programming_skills[-1])\n        students_programming_skills[max_index] = 0\n        temp = []\n        for i in range(max_index - k, max_index + k + 1):\n            if i >= 0 and i < len(students_programming_skills) and students_programming_skills[i]!= 0:\n                temp.append(students_programming_skills[i])\n        if len(temp) > 0:\n            students_programming_skills[max_index] = min(temp)\n    result_str = ''\n    for student in students_programming_skills:\n        if student!= 0:\n            result_str += '2'\n        else:\n            result_str += '1'\n    print(result_str)\n\n    # return result_str\n\n\nsolution(\"2 1 3 5 4\")\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    nums = [int(x) for x in stdin.strip().split(' ')]\n    res = []\n    for i in range(n):\n        res.append(max(nums[i + 1:] + nums[:i]))\n    for i in range(k):\n        res.append(max(nums[-k + i + 1:] + nums[:n - k + i]))\n    for i in range(k):\n        res.append(max(nums[-1 - i:-k + i] + nums[:k - i]))\n    for i in range(k):\n        res.append(max(nums[k - i:n - 1 - i] + nums[:k - i]))\n    return ''.join('1' if x == max(res) else '2' for x in res)\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    number of students N\n    number of teams T\n    number of rounds R\n    list of N integers with the skills of students on position i\n    \"\"\"\n    N, T, R = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    students = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    \n    # number of students in team 1\n    team_1 = 0\n\n    for _ in range(R):\n        team_1 += N - 1 - students.index(min(students))\n\n        # the first student in the row will join the first team\n        # so we remove him from the list of students\n        students.pop(students.index(min(students)))\n\n        # number of students in team 2\n        team_2 = N - team_1\n        team_1, team_2 = team_2, team_1\n    \n    return '1' * team_1 + '2' * team_2\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    x = [int(n) for n in stdin.split()]\n\n    res = []\n    for i in range(n):\n        # \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432 \u043b\u0435\u0432\u043e\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\n        left_l = min(i+1, n-k)\n        # \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432 \u043f\u0440\u0430\u0432\u043e\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\n        right_l = min(n-i, k)\n        # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c \u0438\u0437 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n        res.append(max([x[i] for i in range(left_l, right_l+1)]))\n\n    return \"\".join([str(int(res[i] < x[i])) for i in range(n)])\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    scores = [int(x) for x in stdin.split(\" \")]\n    print(scores)\n    return \"\".join(map(lambda x: str(1) if x < k else str(2),\n                       [scores.index(max(scores[: i] + scores[i + 1:])) if len(scores) - i - 1 > k else k for i in\n                        range(len(scores))]))"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 3\\n1 3 4 2 5 1 6\")\n    11111\n    >>> solution(\"3 1\\n7 2 1 3 5 4 6\")\n    21212\n    \"\"\"\n    n, k = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    # a.sort()\n    a = list(set(a))\n    a.sort()\n    print(a)\n    b = []\n    for i in a:\n        if a.count(i) >= 2:\n            b.append(i)\n    b = list(set(b))\n    b.sort()\n    print(b)\n    c = []\n    for i in b:\n        if a.count(i) >= k:\n            c.append(i)\n    print(c)\n    for i in range(n):\n        if a.count(i) >= k:\n            c.append(i)\n    return \"\".join([str(a.index(i) + 1) for i in c])"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    skill = [int(s) for s in stdin.split()]\n    count = [0] * n\n    res = []\n    while len(res) < n:\n        # find the max\n        max_index = skill.index(max(skill))\n        res.append(max_index)\n        count[max_index] += 1\n        # eliminate the max\n        skill[max_index] = -1\n        # find next max\n        next_max_index = skill.index(max(skill))\n        res.append(next_max_index)\n        count[next_max_index] += 1\n        # eliminate the next max\n        skill[next_max_index] = -1\n        # print(res)\n    return ''.join(map(str, count))\n\"\"\""
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    k, n = int(stdin[0]), int(stdin[1])\n    a = list(map(int, stdin[2:]))\n    t1 = a[:k]\n    t2 = a[k:]\n    res = [0] * len(a)\n    i = 0\n    while True:\n        for _ in range(k):\n            res[i] = 1\n            i += 1\n            if i >= len(a):\n                return ''.join(map(str, res))\n        for _ in range(k):\n            res[i] = 2\n            i += 1\n            if i >= len(a):\n                return ''.join(map(str, res))\n        for _ in range(k):\n            res[i] = 1\n            i += 1\n            if i >= len(a):\n                return ''.join(map(str, res))\n        for _ in range(k):\n            res[i] = 2\n            i += 1\n            if i >= len(a):\n                return ''.join(map(str, res))\nn, k = map(int, stdin[0].split())\na = list(map(int, stdin[1].split()))\nt1 = a[:k]\nt2 = a[k:]\nres = [0] * len(a)\ni = 0\nwhile True:\n    for _ in range(k):\n        res[i] = 1\n        i += 1\n        if i >= len(a):\n            return ''.join(map(str, res))\n    for _ in range(k):\n        res[i] = 2\n        i += 1\n        if i >= len(a):\n            return ''.join(map(str, res))\n    for _ in range(k):\n        res[i] = 1\n        i += 1\n        if i >= len(a):\n            return ''.join(map(str, res))\n    for _ in range(k):\n        res[i] = 2\n        i += 1\n        if i >= len(a):\n            return ''.join(map(str, res))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    a = [int(stdin) for stdin in stdin.split()]\n    n, k = len(a), k * 2\n\n    # Step 1.\n    b = [0] * n\n    for i in range(n - k, n):\n        b[i] = i - n + k\n    # Step 2.\n    c = [0] * n\n    for i in range(n - k, n):\n        c[i] = i - n + k\n    # Step 3.\n    for i in range(n - k, n):\n        b[i] = min(b[i], a[i - k], a[i + k])\n        c[i] = min(c[i], a[i - k], a[i + k])\n    # Step 4.\n    result = [0] * n\n    for i in range(n - k, n):\n        if b[i] == c[i]:\n            result[i] = 1\n        else:\n            result[i] = 2\n    return ''.join([str(r) for r in result])\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # input is a string\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    c = [0] * (n + 1)\n    c[0] = 1\n    for i in range(1, n):\n        c[i] = c[i - 1]\n        for j in range(i):\n            if a[i] == a[j] and i!= j:\n                c[i] += c[j]\n    return c[n - 1] % 1000000007\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    s = set()\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i < j:\n                if a[i] == a[j]:\n                    s.add(tuple(a))\n                elif a[i] > a[j]:\n                    s.add(tuple(a))\n                    a[i] = j+1\n                elif a[i] < a[j]:\n                    s.add(tuple(a))\n                    a[j] = i+1\n                    \n    print(len(s))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return \"2\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438 \u043f\u0440\u043e\u0439\u0442\u0438 \u043f\u043e \u043d\u0435\u043c\u0443 \u0432 \u0446\u0438\u043a\u043b\u0435\n    \"\"\"\n    arr = [int(x) for x in stdin.split()]\n    answer = 1\n    if len(arr) == 1:\n        answer = 1\n    else:\n        tmp = arr[0]\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                pass\n            elif arr[i] < arr[i+1]:\n                tmp = arr[i+1]\n            else:\n                answer = (answer*(tmp-arr[i]))\n    return answer\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    input = stdin.split('\\n')\n    n = int(input[0])\n    a = list(map(int, input[1].split()))\n    b = [0 for i in range(n)]\n    cnt = 0\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            b[i] = b[i-1]\n        else:\n            b[i] = b[i-1] + 1\n    for i in range(1, n-1):\n        if b[i] == b[i+1]:\n            cnt += 1\n    return cnt\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    res = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] > a[j]:\n                res += 1\n            elif a[i] == a[j]:\n                res += 1\n    return res % 1000000007\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    l = len(a)\n    result = 0\n    for i in range(l - 1):\n        for j in range(i + 1, l):\n            if a[i]!= a[j] and a[i] + 1 == a[j]:\n                result += 1\n    return result % 1000000007\n    return f\"{result}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\""
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def cnt_renum(a: str) -> int:\n        b = [0] * len(a)\n        b[0] = 0\n        l_b, r_b = [0] * len(a), [0] * len(a)\n        l_b[0] = 0\n        r_b[len(a) - 1] = 0\n        for i in range(len(a)):\n            if a[i] == a[i - 1]:\n                l_b[i] = b[i - 1]\n            else:\n                l_b[i] = l_b[i - 1] + 1\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] == a[i + 1]:\n                r_b[i] = b[i + 1]\n            else:\n                r_b[i] = r_b[i + 1] + 1\n        return l_b, r_b\n\n    a = stdin\n    l_b, r_b = cnt_renum(a)\n    n = len(a)\n    result = 1\n    for i in range(len(a)):\n        if a[i] == a[i - 1]:\n            result = (result * l_b[i]) % MOD\n        else:\n            result = (result * (l_b[i] + r_b[i])) % MOD\n    return result\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [0] * len(a)\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            b[i] = b[i - 1]\n        else:\n            b[i] = b[i - 1] + 1\n    return b\nprint(solution(stdin))\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def good(seq: List[int]) -> bool:\n        for i, a_i in enumerate(seq):\n            for j, a_j in enumerate(seq[i + 1:]):\n                if a_i + a_j in powers:\n                    return True\n        return False\n\n    n = int(stdin)\n    seq = [int(x) for x in stdin.split()]\n    powers = {2 ** i for i in range(20)}\n\n    counter = 0\n    while not good(seq):\n        for i, a_i in enumerate(seq):\n            for j, a_j in enumerate(seq[i + 1:]):\n                if a_i + a_j in powers:\n                    seq.pop(i)\n                    seq.pop(i + j)\n                    counter += 1\n                    break\n            else:\n                continue\n            break\n\n    return str(counter)\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    s: str = stdin.split('\\n')\n    arr: List[int] = list(map(int, s[1].split(' ')))\n\n    good_seq: List[int] = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] % arr[i] == 0:\n                good_seq.append(arr[i])\n                break\n\n    # for i in arr:\n    #     if i in good_seq:\n    #         pass\n    #     else:\n    #         print(arr.count(i))\n    print(len(good_seq))\n\n    return''.join(str(i) for i in good_seq)\n    '''\n\n    s: str = stdin.split('\\n')\n    arr: List[int] = list(map(int, s[1].split(' ')))\n    good_seq: List[int] = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] % arr[i] == 0:\n                good_seq.append(arr[i])\n                break\n    print(len(good_seq))\n    return''.join(str(i) for i in good_seq)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the min number of elements to remove to get a good sequence\n    \"\"\"\n    lines = stdin.split('\\n')\n    seq = list(map(int, lines[1].split()))\n    seq = [0] + seq\n    print(seq)\n    \n    if len(seq) == 1:\n        return 0\n    \n    cnt = 0\n    ans = float('inf')\n    i = 1\n    while i < len(seq):\n        for j in range(i+1, len(seq)):\n            if seq[i] == seq[j]:\n                cnt += 1\n                ans = min(ans, cnt)\n        i += 1\n    \n    return ans\n        \n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    good_numbers = set()\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    sequence = list(map(int, stdin[1].split()))\n    if n == 0:\n        return 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sequence[i]!= sequence[j]:\n                sum_ = sequence[i] + sequence[j]\n                if sum_ in good_numbers:\n                    return 1\n                good_numbers.add(sum_)\n    return 0\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(arr: list) -> bool:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if (arr[i] + arr[j]) % 2 == 0:\n                    return False\n        return True\n\n    n = int(stdin.readline())\n    arr = [int(s) for s in stdin.readline().split()]\n    count = 0\n    while not is_good(arr):\n        arr = arr[:-1]\n        count += 1\n    return str(count)\n\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n------- SOLUTION --------\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cubes = list(map(int, stdin))\n    height = max(cubes)\n    n_of_cubes = len(cubes)\n    n_of_removed = 0\n    for i in range(height, 0, -1):\n        for j in range(n_of_cubes):\n            if cubes[j] == i and j - 1 in range(n_of_cubes) and cubes[j - 1] == i - 1:\n                n_of_removed += 1\n                cubes[j], cubes[j - 1] = 0, 0\n    print(n_of_removed)\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    S = stdin\n    for _ in range(int(stdin)):\n        reds = S.count('0')\n        blues = S.count('1')\n        if reds >= blues:\n            answer += blues\n            S = S.replace('0', '', blue)\n        else:\n            answer += reds\n            S = S.replace('1', '', red)\n    return answer\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport itertools\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin\n    count = 0\n    for i in range(len(str)):\n        if i == 0 or i == len(str)-1:\n            continue\n        if str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s[::-1]\n    n = len(s)\n    q = deque()\n    for i in range(n):\n        if s[i] == \"0\":\n            q.append(0)\n        else:\n            q.append(1)\n\n    maxi = 0\n    if n == 1:\n        return 1\n    else:\n        while len(q)!= 0:\n            count = 0\n            for i in range(n):\n                if q[i] == q[0]:\n                    count += 1\n                    q.popleft()\n                    q.popleft()\n                    if i == 0:\n                        maxi += 2\n                    break\n            if count > 0:\n                maxi += 1\n            else:\n                q.append(q.popleft())\n        return maxi\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    n = len(s)\n    red = 0\n    blue = 0\n    for c in s:\n        if c == '1':\n            blue += 1\n        elif c == '0':\n            red += 1\n\n    return '{} {}'.format(red, blue)"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  # Your code here\n  return ''\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves https://codeforces.com/problemset/problem/1143/A\"\"\"\n    pass"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  l, r = [], []\n  for _ in range(m):\n    a, b = map(int, stdin.split())\n    if a > b:\n      l.append(a)\n      r.append(b)\n    else:\n      l.append(b)\n      r.append(a)\n  l.sort()\n  r.sort()\n  print(l, r)\n  for i in range(m):\n    if l[i] < r[i]:\n      return str(n - i - 1)\n  return str(n)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str.\n    \"\"\"\n    return str()"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split(' '))\n    a = stdin.split('\\n')\n    print(n, m)\n    print(a)\n    ans = 0\n    for i in range(m):\n        x, y = map(int, a[i].split(' '))\n        print(x, y)\n        ans += min(x, y) - x // 2\n    print(ans)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds solution to problem.\n    >>> solution(stdin)\n    2\n    \"\"\"\n    n, m = map(int, stdin.split())\n    id_cards = [tuple(map(int, stdin.split())) for _ in range(m)]\n    id_cards.sort(key=lambda x: x[0])\n    l, r = 0, m - 1\n    passed = 0\n    while l <= r:\n        passed = max(passed, l + 1, r + 1)\n        if id_cards[l][1] < id_cards[r][0]:\n            l += 1\n        else:\n            r -= 1\n    return passed\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = stdin.split(' ')\n    n, m = int(n), int(m)\n    idcards = []\n    for i in range(m):\n        [l, r] = stdin.split(' ')\n        l, r = int(l), int(r)\n        idcards.append([l, r])\n    idcards.sort()\n    i = 0\n    result = 1\n    while i < n:\n        if idcards[i][1] > i + 1:\n            result = 0\n            break\n        i += idcards[i][1] - idcards[i][0] + 1\n        result += 1\n    return result"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 2 1\n   ... ''')\n    '2'\n    \"\"\"\n    input_ = stdin.splitlines()\n    n = int(input_[0])\n    numbers = list(map(int, input_[1].split()))\n\n    watering_operations = 0\n    for i in range(n):\n        l, r = 1, n\n        while l < r:\n            mid = (l + r) // 2\n            if numbers[mid] < numbers[i]:\n                l = mid + 1\n            else:\n                r = mid\n        watering_operations += l - 1\n    return str(watering_operations)\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 2 1\n   ... '''.strip())\n    2\n\n    >>> solution('''4\n   ... 2 2 1 3\n   ... ''')\n    3\n\n    \"\"\"\n\n    n = int(stdin.readline().strip())\n    lowers = [int(s) for s in stdin.readline().strip().split()]\n    uppers = [int(s) for s in stdin.readline().strip().split()]\n\n    watering = []\n    for i in range(n):\n        watering.append((lowers[i], uppers[i]))\n\n    watering.sort(key=lambda x: x[0])\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if watering[j][0] - watering[i][1] >= 0:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    implementation of the \"watering\" function.\n    '''\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns the minimum number of watering operations required to satisfy the condition.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your code here\n    \"\"\"\n    return ''"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    watering_count = 0\n    \n    for i in range(1, len(arr)):\n        start_index = i - 1\n        end_index = i\n        min_diff = 0\n        \n        while start_index >= 0:\n            if arr[start_index] > arr[end_index]:\n                min_diff = min(min_diff, arr[start_index] - arr[end_index])\n                break\n            start_index -= 1\n            \n        watering_count += min_diff\n        arr[i] += min_diff\n        \n    print(watering_count)"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, heights = stdin.split(\"\\n\")\n    heights = list(map(int, heights.split()))\n    n = len(heights)\n    watering_operations = 0\n    for i in range(n - 1):\n        left = i\n        right = i + 1\n        while left >= 0 and right < n and heights[left] < heights[right]:\n            if heights[left] < heights[right]:\n                watering_operations += 1\n                heights[left] += 1\n            else:\n                watering_operations += 1\n                heights[right] += 1\n            left -= 1\n            right += 1\n    return str(watering_operations)\n\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns minimum number of watering operations required to satisfy the condition'''\n    stdin = stdin.strip().split('\\n')\n    n = int(stdin[0])\n    arr = [int(i) for i in stdin[1].split()]\n    arr = [0] + arr + [0]\n    count = 0\n    for i in range(1, n + 1):\n        if arr[i] > arr[i - 1]:\n            count += 1\n        if arr[i] < arr[i + 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solution_naive(stdin: str) -> int:\n        n = int(stdin.split('\\n')[0])\n        h = list(map(int, stdin.split('\\n')[1].split()))\n        min_op = n\n        for i in range(n):\n            for j in range(i + 1, n):\n                watering_ops = 0\n                for k in range(n):\n                    if i <= k <= j:\n                        watering_ops += (j - k + 1) * (h[k] - h[k])\n                if watering_ops < min_op:\n                    min_op = watering_ops\n        return min_op\n    # print(solution_naive(stdin))\n    n = int(stdin.split('\\n')[0])\n    h = list(map(int, stdin.split('\\n')[1].split()))\n    dp = [[0] * n for _ in range(n)]\n    for l in range(n):\n        for r in range(n):\n            for i in range(n):\n                if i <= l <= r:\n                    dp[l][r] = max(dp[l][r], dp[l][i] + dp[i][r] + (r - l) * (h[i] - h[i]))\n    return dp[0][-1]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, values = stdin.split('\\n')\n    values = values.split(' ')\n    values = [int(i) for i in values]\n    return str(values.index(min(values)) + 1)"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5\\n2 1 -3\")\n    3\n    >>> solution(\"2 4\\n-1 1\")\n    4\n    >>> solution(\"4 10\\n2 4 1 2\")\n    2\n    \"\"\"\n    _, w = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    return str(\n        recursive_count_ways(0, w, numbers)\n        if is_countable(numbers)\n        else recursive_count_ways(1, w, numbers)\n    )\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets a string representing the input of the problem.\n    Returns the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to w.\n    \"\"\"\n    lines = stdin.split('\\n')\n    first_line = lines[0].split()\n    n = int(first_line[0])\n    w = int(first_line[1])\n    a = list(map(int, lines[1].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(w+1):\n            count += 1 if j - a[i] >= 0 else 0\n\n    return str(count)\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom typing import List, Any, Dict, Tuple\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n, w = [int(s) for s in stdin.split('\\n')[0].split(' ')]\n    a = [int(s) for s in stdin.split('\\n')[1].split(' ')]\n    \n    dp = [[0] * (y+1) for _ in range(x+1)]\n    dp[0][0] = 1\n    \n    for i in range(x):\n        for j in range(y+1):\n            if j - a[i] >= 0:\n                dp[i+1][j] += dp[i][j-a[i]]\n            if i > 0:\n                dp[i+1][j] += dp[i-1][j]\n            \n    return dp[x][y]\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    bus_stop_length, bus_stop_capacity = [int(x) for x in stdin.split('\\n')[0].split()]\n    bus_stop_seq = [int(x) for x in stdin.split('\\n')[1].split()]\n    passengers_per_stop = [0] * bus_stop_length\n    result = 0\n    for i in range(bus_stop_length):\n        passengers_per_stop[i] = bus_stop_seq[i]\n        result = passengers_per_stop[i]\n        for j in range(i):\n            if passengers_per_stop[j] + bus_stop_seq[i] > bus_stop_capacity:\n                result = 0\n                break\n            result += passengers_per_stop[j] + bus_stop_seq[i]\n    if result:\n        return str(result)\n    else:\n        return '0'\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdout"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = [int(i) for i in stdin[1:].split()]\n    answer = [None] * N\n    cur = 0\n    while A:\n        cur = (cur + 2 * A[0] + A[-1]) // 3\n        answer[cur % N] = A.pop(0)\n        answer[(cur + 1) % N] = A.pop(-1)\n    return''.join([str(a) for a in answer])\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 8\n   ... 6\n   ... 3\n   ... 12\n   ... 9\n   ... ''')\n    '9 3 6 12 4 8'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    seq = [int(x) for x in stdin.split('\\n')[1].split()]\n    # x = 9\n    # 9, 27, 81, 243, 729,...\n    result = [seq[0]]\n    for i in range(1, len(seq)):\n        # if x is divisible by 3\n        if seq[i] % 3 == 0:\n            # then x can be replaced by x / 3\n            result.append(seq[i] // 3)\n        # if x is divisible by 2\n        elif seq[i] % 2 == 0:\n            # then x can be replaced by x / 2\n            result.append(seq[i] // 2)\n        # if x is not divisible by 2 and 3\n        else:\n            # then append x\n            result.append(seq[i])\n    # print the result\n    return''.join([str(x) for x in result])\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # nums = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    # return str(nums)\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1:\n    def score(seq: str) -> int:\n        # a) convert string to int\n        nums = [int(s) for s in seq.split()]\n\n        # b) compute score\n        n = len(nums)\n        score = 0\n        for i in range(n):\n            # x <-> 3 x\n            if nums[i] % 3 == 0:\n                score += nums[i] * 2\n                nums[i] = 3\n            # x <-> 2 x / 3 x\n            elif nums[i] % 3 == 1:\n                score += nums[i] * 2\n                nums[i] = 3 * nums[i]\n            # x <-> x / 3\n            else:\n                score += nums[i]\n        return score\n\n    # b) find max score\n    scores = [score(stdin)]\n    max_score = max(scores)\n    max_score_idx = scores.index(max_score)\n\n    # c) find possible sequences\n    possibles = set()\n    for i in range(max_score_idx):\n        for x in range(1, 4):\n            if max_score - scores[i] + x * 2 in scores:\n                possibles.add((scores[i], max_score - scores[i] + x * 2))\n    for i in range(max_score_idx + 1, len(scores)):\n        for x in range(1, 4):\n            if max_score - scores[i] + x * 3 in scores:\n                possibles.add((scores[i], max_score - scores[i] + x * 3))\n    \n    # d) return best sequence\n    possibles = sorted(possibles)\n    return''.join(map(str, [num for score, num in possibles]))\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = [int(i) for i in stdin.split()[1:]]\n    b = []\n    while len(y) > 0:\n        if len(y) >= 2 and y[0]%3 == 0 and y[0]/3 <= y[1]:\n            b.append(y[0])\n            y.pop(0)\n            y.pop(0)\n        else:\n            b.append(y[0])\n            y.pop(0)\n    b.extend(y)\n    print(*b)\n    return \" \".join([str(i) for i in b])\n        \n\n\n\"\"\"\n\n\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 4 8 6 3 12 9\n   ... ''')\n    '9 3 6 12 4 8'\n    \"\"\"\n    # Your code here\n    # Declare variable\n    lst = [0] * 100\n    # Loop through the list\n    for i in stdin.splitlines()[1].split(' '):\n        # Convert it to int\n        lst[int(i) - 1] = i\n    # Loop through the list\n    for i in range(len(lst)):\n        # Check if the next number is a multiple of three\n        if i + 1 < len(lst) and lst[i + 1] == '3' * int(lst[i]):\n            # If so, change it\n            lst[i + 1] = str(int(lst[i + 1]) * 3)\n        # Check if the next number is a multiple of two\n        if i + 2 < len(lst) and lst[i + 2] == '2' * int(lst[i]):\n            # If so, change it\n            lst[i + 2] = str(int(lst[i + 2]) * 2)\n    # Print the rearranged list\n    print(' '.join(lst))\n    return''.join(lst)"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(i) for i in stdin.readline().split()]\n    x.sort()\n\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if x[j] - x[i] == 2 ** int(math.log(abs(x[j] - x[i]), 2)):\n                ans.append(x[i])\n                ans.append(x[j])\n                break\n    print(len(ans))\n    print(' '.join([str(a) for a in ans]))\n    return ''\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    max_dist = 0\n    ans = []\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) > max_dist:\n                ans = [arr[i], arr[j]]\n                max_dist = abs(arr[i] - arr[j])\n    print(len(ans))\n    print(\" \".join(list(map(str, ans))))\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *points = map(int, stdin.split())\n    dp = [set() for _ in range(len(points))]\n    dp[0] = {points[0]}\n    for i in range(1, len(points)):\n        for j in range(i):\n            dp[i] |= {p for p in dp[j]}\n            if points[i] - points[j] == 2**i:\n                dp[i].add(points[i])\n    dp[0] = max(dp[0], key=len)\n    dp[1] = max(dp[1], key=len)\n    return str(len(dp[0]) + len(dp[1]))\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n    points.sort()\n    cur = 0\n    for i in range(n):\n        cur += 2 ** i\n        if cur > n:\n            break\n    points = points[cur:n]\n    return''.join(map(str, points))\n\"\"\"\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = sorted(map(int, stdin.readline().strip().split()))\n    m = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            d = 0\n            while x[j] - x[i] >= 2**d:\n                d += 1\n            if d > m:\n                m = d\n                sol = [x[i], x[j]]\n    return''.join([str(s) for s in sol])\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string with coordinates of maximum size of subset.\"\"\"\n    # import math\n    #\n    # def is_int(s: str):\n    #     \"\"\"Return True if s is string with integer.\"\"\"\n    #     try:\n    #         int(s)\n    #         return True\n    #     except ValueError:\n    #         return False\n    #\n    # def get_max_subset_of_points_size(points: list) -> int:\n    #     \"\"\"Return size of maximum subset of points with distance that is 2^k.\n    #\n    #     Arguments:\n    #         points: List of point coordinates.\n    #\n    #     Returns:\n    #         Maximum size of subset of points.\n    #     \"\"\"\n    #     max_size = 1\n    #\n    #     for i in range(len(points)):\n    #         for j in range(i + 1, len(points)):\n    #             dist = int(math.log2(abs(points[i] - points[j])))\n    #             if dist > 0:\n    #                 max_size = max(max_size, 2 ** dist)\n    #\n    #     return max_size\n    #\n    # points = list(map(int, stdin.split()))\n    # return str(get_max_subset_of_points_size(points))\n\n    # def get_max_subset_of_points_size(points: list) -> int:\n    #     \"\"\"Return size of maximum subset of points with distance that is 2^k.\n    #\n    #     Arguments:\n    #         points: List of point coordinates.\n    #\n    #     Returns:\n    #         Maximum size of subset of points.\n    #     \"\"\"\n    #     max_size = 1\n    #\n    #     for i in range(len(points)):\n    #         for j in range(i + 1, len(points)):\n    #             dist = abs(points[i] - points[j])\n    #             if dist > 0:\n    #                 max_size = max(max_size, int(math.log2(dist)))\n    #\n    #     return max_size\n    #\n    # points = list(map(int, stdin.split()))\n    # return str(get_max_subset_of_points_size(points))\n\n    def get_max_subset_of_points_size(points: list) -> int:\n        \"\"\"Return size of maximum subset of points with distance that is 2^k.\n\n        Arguments:\n            points: List of point coordinates.\n\n        Returns:\n            Maximum size of subset of points.\n        \"\"\"\n        max_size = 1\n\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                dist = abs(points[i] - points[j])\n                if dist > 0:\n                    max_size = max(max_size, int(math.log2(dist)))\n\n        return max_size\n\n    points = list(map(int, stdin.split()))\n    return str(get_max_subset_of_points_size(points))\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    def is_integral_power(num1, num2, power):\n        return abs(num1-num2) == 2**power\n    def check(nums, power):\n        if len(nums) == 1:\n            return True\n        res = []\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if is_integral_power(nums[i], nums[j], power):\n                    res.append([i,j])\n        if res:\n            return True\n        return False\n    if check(nums, 2):\n        return \"0\\n\"\n    for i in range(1, len(nums)):\n        if is_integral_power(nums[0], nums[i], 2):\n            return \"{}\\n{}\".format(i, nums[0:i+1])\n    return \"0\\n0\""
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split(' ')))\n    res = 0\n    for x1 in points:\n        for x2 in points:\n            if x1 < x2:\n                diff = x2 - x1\n                power = 0\n                while diff > 0:\n                    if diff % 2 == 0:\n                        diff /= 2\n                        power += 1\n                    else:\n                        break\n                if power > res:\n                    res = power\n                    result = [x1, x2]\n    print(res)\n    return''.join(map(str, result))\n\nsolution(stdin)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the number of the total number of cookies\n    \"\"\"\n    pass"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b, k = map(int, stdin.split())\n    takahashi = b\n    aoki = a\n    for i in range(k):\n        takahashi += aoki\n        aoki += b\n        if takahashi > aoki:\n            aoki = takahashi - aoki\n            takahashi = takahashi - aoki\n    return f\"{takahashi} {aoki}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split(' ')))\n    print('{} {}'.format(a + k * b, b + k * a))\n    return ''\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    return f'{A - B * (K - 1)} {B - A * (K - 1)}'\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(n) for n in stdin.split()]\n    takahashi = a\n    aoki = b\n    for _ in range(k):\n        if takahashi >= 2:\n            takahashi -= 2\n        elif aoki >= 2:\n            aoki -= 2\n        else:\n            continue\n    print(takahashi, aoki)\n    return ''\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A, B, K = map(int, stdin.split())\n    takahashi = A\n    aoki = B\n    for k in range(K):\n        takahashi = takahashi - 1 + aoki\n        aoki = aoki - 1 + takahashi\n    print(takahashi, aoki)\n    return ''"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom sys import stdin, stdout\n\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, K) = [int(x) for x in stdin.split(' ')]\n    takahashi = A\n    aoki = B\n    for i in range(0, K):\n        takahashi_eat = 0\n        aoki_eat = 0\n        if takahashi > 0:\n            takahashi_eat = 1\n            takahashi = takahashi - 1\n        if aoki > 0:\n            aoki_eat = 1\n            aoki = aoki - 1\n        if takahashi_eat == 0 and aoki_eat == 0:\n            continue\n        elif takahashi_eat == 1 and aoki_eat == 1:\n            continue\n        elif takahashi_eat == 1 and aoki_eat == 0:\n            takahashi = takahashi + 1\n        else:\n            aoki = aoki + 1\n    print(takahashi, aoki)\n    return ''\n\nsolution(stdin)"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    a, b, k = map(int, stdin.split())\n    takahashi = a\n    aoki = b\n    for i in range(0, k):\n        if takahashi > aoki:\n            aoki += 1\n        elif takahashi < aoki:\n            takahashi += 1\n        elif takahashi == aoki:\n            aoki += 1\n            takahashi += 1\n    print(aoki)\n    print(takahashi)\n    return \"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) / 10000)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Calculates how long it takes for Takahashi's balance to reach X yen\n    or above.\n\n    Args:\n        stdin: the input given by Standard Input in the following format:\n        X\n\n    Returns:\n        The number of years it takes for Takahashi's balance to reach X yen\n        or above\n    '''\n    balance = int(stdin)\n    years = 0\n    while balance < 10000:\n        balance = balance * (1 + 0.01)\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    result = 0\n    while x >= 100:\n        x = x * (1 + 1 / 100)\n        result += 1\n    print(result)\n    return result"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"103\")\n    3\n    \"\"\"\n    from collections import deque\n\n    x = int(stdin)\n    result = 0\n    bank = deque(maxlen=2)\n    bank.append(100)\n    bank.append(0)\n    while bank[0] < x:\n        bank.append(bank[1] * ((1 + 1 / 100) ** (bank[2] - bank[1])))\n        bank[2] += 1\n        result = bank[2]\n    print(result)\n    return result\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes the input and returns the number of years it takes for Takahashi's balance to reach X yen or above for the first time.\n    >>> solution('101')\n    '3'\n    >>> solution('103')\n    '3'\n    >>> solution('103.0')\n    '3'\n    >>> solution('101.0')\n    '3'\n    >>> solution('103.1')\n    '3'\n    >>> solution('103.01')\n    '3'\n    >>> solution('103.011')\n    '3'\n    \"\"\"\n    balance, target = map(int, stdin.split())\n    years = 0\n    while balance < target:\n        balance *= 1.01\n        years += 1\n    return str(years)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"103\")\n    3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    while True:\n        if x >= 101:\n            print(i)\n            break\n        i += 1\n        x = x * 0.01 + x"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    X_year = 1\n    while True:\n        if X * (1 + 1/100) ** X_year > X:\n            return X_year\n        else:\n            X_year += 1\n\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    X = int(stdin)\n    N = 0\n    while X < MAX_X:\n        X = (1 + PRINT_RATE) ** (N + 1) - 1\n        N += 1\n    return str(N)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 1\n    while (x >= 10):\n        x = x + (1 + x / 100)\n        i += 1\n    return i\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    l = []\n    for _ in range(k):\n        l.append(int(stdin.readline()))\n    total = 0\n    for i in range(k):\n        for j in range(i, k):\n            total += gcd(l[i], l[j])\n    return str(total)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    k=int(stdin)\n    # k=int(input())\n    res=0\n    for i in range(1,k+1):\n        for j in range(1,k+1):\n            for l in range(1,k+1):\n                res=res+gcd(i,j,l)\n    return str(res)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    K = int(inputs[0])\n    res = []\n    for i in range(K):\n        for j in range(K):\n            for k in range(K):\n                res.append(gcd(i+1, j+1, k+1))\n    return str(sum(res))\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    k, ans = int(stdin), 0\n    for a in range(1, k + 1):\n        for b in range(1, k + 1):\n            for c in range(1, k + 1):\n                ans += gcd(a, b, c)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... ''')\n    '9'\n    \"\"\"\n    K = int(stdin.readline().strip())\n    GCD = [1 for _ in range(K + 1)]\n    for j in range(2, K + 1):\n        for i in range(1, j):\n            GCD[j] = max(GCD[j], GCD[i] * (j / i), GCD[j - i] * (j / i))\n    return str(sum(GCD))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(K*K*K - (K-1)*(K-1)*K//2)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) + int(stdin[1]) + int(stdin[2]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(1, int(stdin) + 1):\n        ans += (i * i * i + i * i)\n    return ans\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    m = -10**5\n    for i in range(N):\n        m = max(m, a[i] * (i + 1))\n    return m\n\nprint(solution(stdin))"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_as_list = stdin.split(\"\\n\")\n    _, *input_as_list = input_as_list\n    n, *input_as_list = map(int, input_as_list)\n    assert len(input_as_list) == n\n    input_as_list = list(map(lambda x: x % n, input_as_list))\n    res = 0\n    for i in input_as_list:\n        if i > res:\n            res = i\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes in standard input of N positive integers and prints the maximum\n    value of the function f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) +... + (m\\ mod\\ a_N)\n    '''\n    n, *a = [int(x) for x in stdin.split()]\n    # calculate function f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) +... + (m\\ mod\\ a_N)\n    # use f(m) to find the maximum\n    max_f = 0\n    for m in range(1, 2 * 10 ** 5 + 1):\n        f = 0\n        for ai in a:\n            f += m % ai\n        f %= 10 ** 9 + 7\n        max_f = max(max_f, f)\n\n    print(max_f)\n    return"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # getting the input\n    N, *A = [int(x) for x in stdin.split()]\n    # initializing the output\n    max_value = 0\n    # looping through the array\n    for m in range(2 ** N):\n        # getting the sum of the remainders\n        sum = 0\n        # looping through the array\n        for i in range(N):\n            if ((m >> i) & 1):\n                sum += A[i]\n        # updating the max value\n        if sum > max_value:\n            max_value = sum\n    # returning the max value\n    return max_value\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip()\n    a = [int(i) for i in line.split(' ')]\n    return str(max(a) + max(a) % min(a))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    max_sum = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            sum_a = sum([a[k] for k in range(i, j)])\n            max_sum = max(max_sum, sum_a)\n    return str(max_sum)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n')[0].split())\n    f = lambda m: sum(map(lambda x: m % x, a))\n    return max(map(f, range(1, (n * max(a)) + 1)))\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 4 6''')\n    '10'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # Read input\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n\n    # print(A)\n\n    # max_f = 0\n    # for i in range(N):\n    #     max_f = max(max_f, sum(A[:i+1]))\n    #     # print(max_f)\n\n    # print(max_f)\n    # return max_f\n\n    max_f = 0\n    for i in range(N):\n        max_f = max(max_f, A[i] + (i % A[i]))\n    print(max_f)\n    return max_f"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''The maximum value of f(m) = (m\\ mod\\ a_1) + (m\\ mod\\ a_2) +... + (m\\ mod\\ a_N)\n    We can get this value by finding the highest value of m^i that is below the N integers\n    '''\n    N, *a = map(int, stdin.split())\n    # we want m^i that is divisible by a_j for all j\n    # so we can find a max m^i < N where m^i is divisible by all a_j\n    m = min(N, max(a))\n    a.sort()\n    a = [0] + a + [N]\n\n    i = 0\n    while m * a[i] <= N:\n        m = m * a[i]\n\n        while m > a[i + 1]:\n            i += 1\n\n    return str(m)\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *l = map(int, stdin.split())\n    return \"Yes\" if l[0] == l[1] and l[1] == l[2] else \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n < 3:\n        return \"No\"\n    seen = [False] * 6\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.readline().split()]\n        seen[a] = seen[a] or seen[b]\n        seen[b] = seen[b] or seen[a]\n    return \"Yes\" if any(seen) else \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if doublet_occurred_at_least_three_times(stdin) else 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return 'Yes'\n    else:\n        first_row = stdin[0].split()\n        if len(first_row) == 2:\n            if first_row[0] == first_row[1]:\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            for i in range(len(stdin) - 1):\n                if stdin[i].split()[0] == stdin[i + 1].split()[0] and \\\n                stdin[i].split()[1] == stdin[i + 1].split()[1]:\n                    if i == len(stdin) - 2:\n                        return 'Yes'\n                else:\n                    return 'No'\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Rolls two dice once and checks for doublets.\n  \"\"\"\n  n = int(stdin.readline().strip())\n  doubles = []\n  for _ in range(n):\n    doubles.append(list(map(int, stdin.readline().strip().split())))\n  return 'Yes' if any(doubles[i][0] == doubles[i + 1][0] and\n                      doubles[i][1] == doubles[i + 1][1] and\n                      doubles[i + 1][0] == doubles[i + 2][0] and\n                      doubles[i + 1][1] == doubles[i + 2][1] for i in range(len(doubles) - 2)) else 'No'\n\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_doublets(dice: List[int]) -> Set[Tuple[int, int]]:\n        doublets = set()\n        for i in range(len(dice) - 1):\n            for j in range(i + 1, len(dice)):\n                doublets.add((dice[i], dice[j]))\n        return doublets\n\n    n = int(stdin.readline())\n    dice = [int(i) for i in stdin.readline().split()]\n\n    if n < 3:\n        print(\"No\")\n    else:\n        doublets = get_doublets(dice)\n\n        for i in range(n - 2):\n            rolls = [int(i) for i in stdin.readline().split()]\n            doublets_ = get_doublets(rolls)\n            if doublets.issubset(doublets_):\n                print(\"Yes\")\n                break\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().strip().split(\" \")]\n    doublets = [numbers[i] for i in range(N) if numbers[i] == numbers[i+1]]\n    return \"Yes\" if len(doublets) >= 3 else \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    assert stdin == \"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\"\n\n    rolls = [line.split() for line in stdin.split(\"\\n\") if line]\n    for roll in rolls:\n        roll[0] = int(roll[0])\n\n    if len(rolls) < 3:\n        return \"Yes\"\n\n    if len(rolls) == 3 and rolls[0] == rolls[1] == rolls[2]:\n        return \"Yes\"\n\n    if len(rolls) < 4:\n        return \"No\"\n\n    if len(rolls) == 4 and rolls[0] == rolls[1] and rolls[2] == rolls[3]:\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n = int(data[0])\n    doublets = [0] * 7\n    for _ in range(n):\n        rolls = list(map(int, data[_].split(' ')))\n        doublets[rolls[0]] += 1\n        doublets[rolls[1]] += 1\n    doublets_occur = sum(doublets[:3])\n    for i in range(3, n):\n        if doublets[i] == 2 and doublets[i-1] == 2 and doublets[i-2] == 2:\n            doublets_occur += 1\n    return 'Yes' if doublets_occur >= 3 else 'No'\n\n\nprint(solution('5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2'))\n\n\"\"\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    dice = [tuple(map(int, line.split())) for line in stdin]\n    doublets = set()\n    for i in range(0, N - 2):\n        for j in range(i + 1, N - 1):\n            if dice[i] == dice[j] and dice[j + 1] == dice[j + 2]:\n                doublets.add(i)\n                doublets.add(j)\n                doublets.add(j + 1)\n    return 'Yes' if len(doublets) > 0 else 'No'\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum area of a circle that a circle of radius r can have compared to a circle of radius 1.\n    r is a positive integer.\n    :param stdin: the area of a circle of radius r is passed in\n    :return: area of the circle of radius r compared to a circle of radius 1 as an integer\n    \"\"\"\n    return stdin"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    return str(int(x[0])*(int(x[0])+1)/2)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    area = r**2 * math.pi\n    return str(area // math.pi)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here:\n    r = int(stdin)\n    return str(int(r ** 2))\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    r = int(stdin)\n    print(2*r*r)\n    return \"\""
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    r = stdin\n    area_of_circle_1 = 3.14159 * 1**2\n    area_of_circle_r = 3.14159 * r**2\n    area_of_circle_1_greater_than_area_of_circle_r = area_of_circle_r - area_of_circle_1\n    return int(area_of_circle_r) // int(area_of_circle_1_greater_than_area_of_circle_r)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(2*3.1415*r)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    \n    return str(int(stdin))"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_of_sides = int(lines[0])\n    side_lengths = list(map(int, lines[1].split(' ')))\n    max_length = max(side_lengths)\n    min_length = sum(side_lengths) - max_length\n    return 'Yes' if max_length < min_length else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lengths = [int(i) for i in stdin.readline().split()]\n    sum = 0\n    max_length = 0\n    for i in lengths:\n        if i > max_length:\n            max_length = i\n        sum += i\n    if max_length < sum - max_length:\n        return 'Yes'\n    return 'No'\n    \n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given N and L_1,..., L_N determine if it is possible to draw an N-sided polygon with sides of lengths L_1,..., L_N.\n    Theorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n    :param stdin: input string\n    :return: solution string\n    \"\"\"\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    return \"Yes\" if max(l) < sum(l) - max(l) else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_sides = int(stdin[0])\n    sides = list(map(int, stdin[1:]))\n    sides.sort()\n    if sides[0] < sides[-1] + sides[-2]:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Determines if a polygon with a specific number of sides can be drawn in a two-dimensional plane.'''\n    # Read in all necessary inputs\n    num_sides = int(stdin.readline().strip())\n    side_lengths = [int(length) for length in stdin.readline().strip().split()]\n\n    # Determine if a polygon with the given sides can be drawn in the plane\n    if max(side_lengths) <= sum(side_lengths) - max(side_lengths):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, *nums = map(int, stdin.split())\n    nums.sort(reverse=True)\n    if nums[0] <= sum(nums[1:]):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = [int(i) for i in stdin.split()]\n    assert 3 <= n <= 10\n    assert 1 <= l[0] <= 100\n\n    return \"Yes\" if max(l) < sum(l) else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution will take the input from stdin and break it into two parameters, the number of sides and the lengths of the sides.\n    This solution will then loop for the number of sides and call the can_form_polygon function.\n    It will then print whether or not the polygon can be drawn by the can_form_polygon function.\n    \"\"\"\n    number_of_sides = int(stdin[0])\n    lengths_of_sides = [int(side) for side in stdin[2:].split(' ')]\n    can_form_polygon = can_form_polygon(number_of_sides, lengths_of_sides)\n    print(can_form_polygon)\n    return ''\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n3 8 5 1\\n\")\n    'Yes'\n    >>> solution(\"3\\n8 3 5 1\\n\")\n    'No'\n    >>> solution(\"4\\n8 9 5 1\\n\")\n    'No'\n    >>> solution(\"4\\n1 2 3 4\\n\")\n    'No'\n    >>> solution(\"3\\n1 1 1\\n\")\n    'Yes'\n    >>> solution(\"4\\n1 1 1 1\\n\")\n    'Yes'\n    >>> solution(\"4\\n2 2 2 2\\n\")\n    'No'\n    >>> solution(\"4\\n1 1 1 1\\n\")\n    'Yes'\n    \"\"\"\n\n    n = int(stdin)\n    data = list(map(int, stdin.split()))\n\n    if n == 3:\n        if data[0] < data[1] + data[2]:\n            return 'Yes'\n        return 'No'\n    if n == 4:\n        if data[0] < data[1] + data[2] < data[3] + data[0]:\n            return 'Yes'\n        return 'No'\n    if n == 5:\n        if data[0] < data[1] + data[2] < data[3] + data[4] < data[0] + data[3]:\n            return 'Yes'\n        return 'No'\n    if n == 6:\n        if data[0] < data[1] + data[2] < data[3] + data[4] < data[5] + data[0] < data[3] + data[4] + data[5]:\n            return 'Yes'\n        return 'No'\n    if n == 7:\n        if data[0] < data[1] + data[2] < data[3] + data[4] < data[5] + data[6] < data[0] + data[3] + data[4] + data[5] + data[6]:\n            return 'Yes'\n        return 'No'\n    if n == 8:\n        if data[0] < data[1] + data[2] < data[3] + data[4] < data[5] + data[6] < data[7] + data[0] < data[3] + data[4] + data[5] + data[6] + data[7]:\n            return 'Yes'\n        return 'No'\n    if n == 9:\n        if data[0] < data[1] + data[2] < data[3] + data[4] < data[5] + data[6] < data[7] + data[8] < data[0] + data[3] + data[4] + data[5] + data[6] + data[7] + data[8]:\n            return 'Yes'\n        return 'No'\n    if n == 10:\n        if data[0] < data[1] + data[2] < data[3] + data[4] < data[5] + data[6] < data[7] + data[8] < data[9] + data[0] < data[3] + data[4] + data[5] + data[6] + data[7] + data[8] + data[9]:\n            return 'Yes'\n        return 'No'\n    return 'No'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    for i in range(n, n*10):\n        if '7' in str(i) and '2' in str(i):\n            return str(i)\n    return '-1'"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # getting the input\n    length, len_max = stdin.split(\" \")\n    numbers = []\n    for line in stdin.splitlines()[1:]:\n        line = line.split(\" \")\n        number = int(line[0])\n        digit = int(line[1])\n        if length!= str(number):\n            return \"-\"\n        numbers.append(int(line[0]))\n        len_max = max(len_max, len(line[0]))\n    if len(str(numbers[0]))!= length:\n        return \"-\"\n    for i in range(1, len(numbers)):\n        if len(str(numbers[i]))!= len_max:\n            return \"-\"\n\n    # doing the sorting\n    numbers.sort(key=lambda x: x * 10 ** (len_max - len(str(x))) + str(x)[0])\n\n    # printing the result\n    return str(numbers[0])\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    l = []\n    for _ in range(M):\n        l.append(stdin.split(' '))\n    #print(l)\n    n = len(str(N))\n    for i in range(1, N):\n        for j in range(n):\n            #print(i, j, n)\n            if i == j:\n                for l_i in range(M):\n                    if int(l[l_i][0]) == i:\n                        if int(l[l_i][1]) == j:\n                            #print(\"here\")\n                            return str(int(l[l_i][0]) * 10 ** (n - 1) + int(l[l_i][1]))\n            if i == j + 1:\n                for l_i in range(M):\n                    if int(l[l_i][0]) == i:\n                        if int(l[l_i][1]) == j:\n                            return str(int(l[l_i][0]) * 10 ** (n - 1) + int(l[l_i][1]))\n    return -1\n'''\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(val) for val in stdin.split(' ')]\n    scores = {int(val) for val in stdin.split('\\n')}\n\n    def check_score(val: int) -> bool:\n        digits = [int(digit) for digit in str(val)]\n        return N == len(digits) and all([digit in scores for digit in digits])\n\n    solutions = {val for val in scores if check_score(val)}\n    if solutions:\n        solutions = min(solutions, key=lambda x: int(str(x)[1:]))\n        return str(solutions)\n    return str(-1)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    array = []\n    for i in range(n):\n        array.append(list(map(int, stdin.split())))\n\n    for row in array:\n        if row[0] < 0 or row[0] > 9 or row[1] < 0 or row[1] > 9:\n            return -1\n    array.sort()\n    pairs = []\n    for row in array:\n        pairs.append(tuple(row))\n\n    print(pairs)\n    for i in range(1, m):\n        if pairs[0][0] > pairs[i][0] or pairs[0][1] > pairs[i][1]:\n            return -1\n    \n    return pairs[0][0] * 10 + pairs[0][1]"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    return str(int(''.join([str(int(i[2])) for i in stdin.split('\\n') if i])))\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 7\\n3 2\\n1 7\")\n    702\n    \"\"\"\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    s, c = [], []\n    for _ in range(m):\n        s_c = [int(x) for x in stdin.split('\\n')[_ + 1].split()]\n        s.append(s_c[0])\n        c.append(s_c[1])\n    for i in range(m):\n        if s[i] == n:\n            if n == 1:\n                if c[i] == 1:\n                    return 0\n                else:\n                    return -1\n            else:\n                if c[i] == 0:\n                    return 0\n                else:\n                    return -1\n        else:\n            if n > 1:\n                if c[i] < n:\n                    return -1\n            else:\n                if c[i] < n:\n                    return -1\n    return n ** n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 7\n   ... 3 2\n   ... 1 7''')\n    702\n    >>> solution('''4 5\n   ... 7 0\n   ... 1 2\n   ... 3 4\n   ... 5 6''')\n    -1\n    >>> solution('''4 5\n   ... 0 0\n   ... 0 0\n   ... 0 0\n   ... 0 0''')\n    0\n    >>> solution('''1 7\n   ... 1 1''')\n    1\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    prev = -1\n    for _ in range(m):\n        s, d = map(int, stdin.split(' '))\n        if (s > n) or (d > 9):\n            print('-1')\n            return\n        if (s == 1 and d < prev) or d < prev:\n            print('-1')\n            return\n        prev = d\n    print(prev)\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    count = 0\n    for i in range(n, m + 1):\n        if i % 10 == 1 and i % 100!= 11:\n            count += 1\n        elif i % 10 == 2 and i % 100 not in (12, 13, 14):\n            count += 1\n        elif i % 10 == 3 and i % 100 not in (15, 16, 17):\n            count += 1\n        elif i % 10 == 4 and i % 100 not in (18, 19, 20):\n            count += 1\n        elif i % 10 == 5 and i % 100 not in (21, 22, 23):\n            count += 1\n        elif i % 10 == 6 and i % 100 not in (24, 25, 26):\n            count += 1\n        elif i % 10 == 7 and i % 100 not in (27, 28, 29):\n            count += 1\n        elif i % 10 == 8 and i % 100 not in (30, 31, 32):\n            count += 1\n        elif i % 10 == 9 and i % 100 not in (33, 34, 35):\n            count += 1\n    if count == m - n + 1:\n        return str(i)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(c) for c in stdin.strip().split(' ')]\n    s, c = [], []\n    for i in range(n):\n        s_i, c_i = [int(c) for c in stdin.strip().split(' ')]\n        s.append(s_i)\n        c.append(c_i)\n\n    res = ''.join(map(str, [i for i in range(10**(n - 1), 10**n) if n > 1 and\n                            all([s[j] >= i % (10**(n - 1)) / (10**(n - j - 1)) and\n                                 s[j] < i / (10**(n - j - 1)) for j in range(n - 1)]) and\n                            all([c[j] == i % (10**(n - 1)) / (10**(n - j - 1)) and\n                                 c[j] == (i % (10**(n - j - 1)) / (10**(n - j - 1))) % 10 for j in range(n - 1)])])\n    return res if res else '-1'\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(2, 1)\n    4\n    >>> solution(10, 3)\n    27\n    >>> solution(500, 50)\n    983064\n    \"\"\"\n    N, K = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i + j > N or i + j % K > N:\n                continue\n            for k in range(1, N + 1):\n                if i + j + k > N or i + j + k % K > N:\n                    continue\n                if i + j % K == i + k % K and j + k % K == j + i % K:\n                    ans += 1\n    return ans\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                continue\n            elif ((i + j) % m == 0) or ((j + i) % m == 0):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = [int(i) for i in stdin.split()]\n    return str(k * (k - 1) * (k - 2) // 6)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(int((n * (n - 1) * (n - 2)) / 2))\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if (i + j + k <= n) and ((i % k == 0) and (j % k == 0) and (k % i == 0)):\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    \n    count = 0\n    for a in range(1, n + 1):\n        for b in range(a, n + 1):\n            if (a + b) % k == 0 and (b + a) % k == 0:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(c) for c in stdin.split(' ')]\n    ans = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if (a+b)%k==0 and (b+c)%k==0 and (c+a)%k==0:\n                    ans += 1\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cnt = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if (i+j) % m == 0 and (j+i) % m == 0:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            if (a + b) % k == 0 and (b + a) % k == 0:\n                count += 1\n    return str(count)\n\nprint(solution(stdin.readline()))"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    return '1011'"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport re\n\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for i in stdin:\n        res = res * 2 + int(i)\n\n    return bin(res)[2:]"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[::-1], 2))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return bin(int(stdin))[2:]\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    base_2 = 0\n    base_10 = int(stdin)\n    while base_10!= 0:\n        remainder = base_10 % 2\n        base_2 = base_2 * (-2) + remainder\n        base_10 = base_10 // 2\n    return str(base_2)"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for character in stdin:\n        result += '1' if int(character) < 0 else '0'\n    return result\n\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.strip())\n    result = []\n    while num > 0:\n        result.insert(0, num % (-2))\n        num = num // -2\n    return \"\".join(str(elem) for elem in result)\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.replace(\"\\n\", \"\")\n    return ''.join(['1' if int(n) & (1 << i) else '0' for i in range(0, len(n))][::-1])\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    # A: (1) can buy (1) x (1) cans of drinks\n    # B: (2) can buy (2) x (1) cans of drinks\n    A, B = [int(i) for i in stdin.split(' ')]\n    B = B // A\n    return max(N, M // B) * A"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split(' '))\n  A, B = [0] * n, [0] * n\n  for i in range(n):\n    A[i], B[i] = map(int, stdin.split(' ')[2*i: 2*(i+1)])\n  return str(m*max(A) + sum(B))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m = [int(s) for s in stdin.split(' ')]\n    price = [[int(s) for s in stdin.split(' ')] for _ in range(n)]\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(price[i-1][0], 0, -1):\n                if j-k >= 0:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-k]+price[i-1][1])\n    return dp[n][m]\n\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get data from standard input\n    input = stdin.split('\\n')\n    n, m = map(int, input[0].split())\n    stores = []\n    for i in range(1, len(input)):\n        a, b = map(int, input[i].split())\n        stores.append((a, b))\n\n    min_price = 10 ** 9 + 1\n    for x in range(1, m):\n        # Calculate all possible combinations of x cans of energy drinks\n        for combination in itertools.combinations(stores, x):\n            total_price = 0\n            for a, b in combination:\n                total_price += a * b\n            min_price = min(min_price, total_price)\n\n    return min_price"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not modify the input and print statements\n    # MODIFY THE FUNCTION INSTEAD\n    # YOUR CODE HERE\n    a, b = map(int, stdin.split(\" \"))\n    k = b\n    l = 1\n    m = 0\n    n = 0\n    while a*l <= b:\n        m = max(a*l, m)\n        k -= a*l\n        l += 1\n        n = max(m, n)\n    return n\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    _, m = map(int, stdin.readline().split())\n    cans = []\n    costs = []\n    for _ in range(m):\n        cans.append(int(stdin.readline()))\n        costs.append(int(stdin.readline()))\n    cans.sort()\n    costs.sort()\n    total = 0\n    for i in range(m):\n        c = cans[i]\n        c_ = costs[i]\n        for j in range(m):\n            c_ -= cans[j]\n            if c_ >= 0:\n                total += cans[i] * c_\n                break\n    print(total)\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [sum(i) for i in a]\n    return str(min(b))\n    \n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = map(int, stdin.readline().split())\n    b = map(int, stdin.readline().split())\n\n    store1 = [\n        (a[i] * b[i], b[i])\n        for i in range(n)\n    ]\n    store2 = [\n        (a[i], b[i])\n        for i in range(n)\n    ]\n    store3 = [\n        (a[i], b[i])\n        for i in range(n)\n    ]\n\n    store1.sort()\n    store2.sort()\n    store3.sort()\n\n    dp1 = [\n        (0, 0)\n        for i in range(m + 1)\n    ]\n    dp2 = [\n        (0, 0)\n        for i in range(m + 1)\n    ]\n    dp3 = [\n        (0, 0)\n        for i in range(m + 1)\n    ]\n\n    for i in range(m + 1):\n        dp1[i] = (0, i)\n        dp2[i] = (0, i)\n        dp3[i] = (0, i)\n\n    for store in store1:\n        if store[1] > m:\n            break\n        dp1[store[1]] = max(dp1[store[1]], (store[0], store[1]))\n\n    for store in store2:\n        if store[1] > m:\n            break\n        dp2[store[1]] = max(dp2[store[1]], (store[0], store[1]))\n\n    for store in store3:\n        if store[1] > m:\n            break\n        dp3[store[1]] = max(dp3[store[1]], (store[0], store[1]))\n\n    ans = 0\n    for i in range(m):\n        ans = max(ans, dp1[i][0] + dp2[m - i][0] + dp3[m - i][0])\n\n    return ans\n\nsolution(stdin)\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n---SOLUTION---\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time: O(n)\n    Space: O(1)\n    '''\n    n, *heights = [int(s) for s in stdin.split('\\n')]\n\n    steps = 0\n    for i in range(n):\n        if i > 0 and heights[i] <= heights[i - 1]:\n            steps += heights[i - 1] - heights[i] + 1\n            heights[i] = heights[i - 1] + 1\n        if i < n - 1 and heights[i] <= heights[i + 1]:\n            steps += heights[i + 1] - heights[i] + 1\n            heights[i] = heights[i + 1] + 1\n    return steps"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.insert(0, 0)\n    dp = []\n    for i in range(n):\n        dp.append([0, 0])\n    dp[0] = [1, 0]\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][0] + 1\n        dp[i][1] = 1 + max(dp[i - 1][0], dp[i - 1][1])\n    ans = dp[n][0]\n    for i in range(1, n + 1):\n        if a[i] < a[i + 1]:\n            ans = max(ans, dp[i][1] + 1)\n    return str(ans)\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split(' ')))\n    ans = 1\n    max_h = 0\n    for num in nums:\n        if num >= max_h:\n            max_h = num\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = stdin.split()\n    N = int(N)\n    H = list(map(int, H))\n    dp = [[-1] * N for _ in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = H[0]\n    for i in range(1, N):\n        dp[0][i] = max(dp[1][i - 1], dp[0][i - 1])\n        dp[1][i] = max(dp[1][i - 1] + H[i], dp[0][i - 1])\n    return dp[0][N - 1]\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split(\"\\n\")[0].split())\n    starts = [int(v) for v in stdin.split(\"\\n\")[1].split()]\n    climb = [h] * n\n    for i in range(n - 1):\n        climb[i + 1] = max(climb[i], starts[i + 1])\n\n    count = 0\n    for i in range(n):\n        if climb[i] <= starts[i]:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nimport sys\nimport os\nimport heapq\n\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, heights = list(map(int, stdin.split('\\n')[0].split()))\n    squares = list(map(int, stdin.split('\\n')[1].split()))\n    max_times = 0\n    for i in range(n - 2):\n        if heights > squares[i]:\n            continue\n        if heights > squares[i + 1]:\n            continue\n        if heights > squares[i + 2]:\n            continue\n        if i == 0:\n            max_times += 1\n        else:\n            max_times += 2\n    return str(max_times)\n\n\ndef"
    }
]