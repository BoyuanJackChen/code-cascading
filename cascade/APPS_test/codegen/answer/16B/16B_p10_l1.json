[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    assert 3 <= n <= 200\n    adj = defaultdict(list)\n    for line in lines[1:-1]:\n        a, b = [int(x) for x in line.split()]\n        assert 1 <= a <= n\n        assert 1 <= b <= n\n        assert a!= b\n        adj[a].append(b)\n        adj[b].append(a)\n\n    ans = 0\n    for a, b in permutations(adj, 2):\n        ans = max(ans, len(set(adj[a]) & set(adj[b])))\n\n    if ans == 0:\n        print(0, *sorted(adj[1]), sep=' ')\n    else:\n        print(ans, *sorted(adj[1]), sep=' ')\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        edges.append([a, b])\n        edges.append([b, a])\n    edges = list(set(edges))\n    edges.sort()\n\n    def find(e):\n        if e!= parents[e]:\n            parents[e] = find(parents[e])\n        return parents[e]\n\n    def union(a, b):\n        a = find(a)\n        b = find(b)\n        if a < b:\n            parents[b] = a\n        elif a > b:\n            parents[a] = b\n\n    parents = list(range(n))\n    for edge in edges:\n        union(edge[0], edge[1])\n\n    m = 0\n    for edge in edges:\n        a = find(edge[0])\n        b = find(edge[1])\n        if a!= b:\n            m = max(m, edge[0] + edge[1])\n    print(m)\n\n    return''.join([str(parents[1]), str(parents[n]), str(parents[n - 1])])\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the given problem\"\"\"\n    pass"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    n = int(stdin.readline().strip())\n    g = {i: set() for i in range(1, n + 1)}\n    \n    for line in stdin.readlines():\n        a, b = map(int, line.strip().split(' '))\n        g[a].add(b)\n        g[b].add(a)\n    \n    edges = sorted(g.items(), key = lambda x: len(x[1]))\n    visited = set()\n    current = set()\n    res = 0\n    \n    for u, v in edges:\n        if not current:\n            current.add(u)\n            visited.add(u)\n        elif v - current:\n            res += len(current) - 1\n            current = v\n            visited.clear()\n            current.add(u)\n            visited.add(u)\n        else:\n            current.add(u)\n            visited.add(u)\n    \n    res += len(current) - 1\n    \n    stdout.write(str(res) + '\\n')\n    stdout.write(' '.join(map(str, sorted(current))) + '\\n')\n    \n    return ''\n    '''\n    n = int(stdin.readline().strip())\n    g = {i: set() for i in range(1, n + 1)}\n    \n    for line in stdin.readlines():\n        a, b = map(int, line.strip().split(' '))\n        g[a].add(b)\n        g[b].add(a)\n    \n    edges = sorted(g.items(), key = lambda x: len(x[1]))\n    visited = set()\n    current = set()\n    res = 0\n    \n    for u, v in edges:\n        if not current:\n            current.add(u)\n            visited.add(u)\n        elif v - current:\n            res += len(current) - 1\n            current = v\n            visited.clear()\n            current.add(u)\n            visited.add(u)\n        else:\n            current.add(u)\n            visited.add(u)\n    \n    res += len(current) - 1\n    \n    stdout.write(str(res) + '\\n')\n    stdout.write(' '.join(map(str, sorted(current))) + '\\n')\n    \n    return ''\n\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    edges = [set() for _ in range(n)]\n    for line in stdin.split('\\n')[1:]:\n        (u, v) = map(int, line.split())\n        edges[u - 1].add(v)\n        edges[v - 1].add(u)\n    v = (max(edges, key=len))\n    for i in range(n):\n        if i + 1 not in edges[i]:\n            v = i + 1\n            break\n    return''.join(map(str, (1, v, n)))\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    graph = {}\n    for line in stdin.split()[1:]:\n        a, b = [int(x) for x in line.split(' ')]\n        graph[a] = graph.get(a, [])\n        graph[b] = graph.get(b, [])\n        graph[a].append(b)\n        graph[b].append(a)\n    def path_count(graph, start, end):\n        s = [(start, [start])]\n        seen = set()\n        while s:\n            (vertex, path) = s.pop()\n            seen.add(vertex)\n            if vertex == end:\n                return path\n            for neighbor in graph.get(vertex, []):\n                if neighbor not in seen:\n                    s.append((neighbor, path + [neighbor]))\n        return []\n    def path_union(paths):\n        res = []\n        for path in paths:\n            if not res:\n                res = set(path)\n            else:\n                res = res.intersection(path)\n        return list(res)\n    def path_intersection(paths):\n        res = []\n        for path in paths:\n            if not res:\n                res = set(path)\n            else:\n                res = res.intersection(path)\n        return list(res)\n    path_a = path_count(graph, 1, n)\n    path_b = path_count(graph, 1, n)\n    path_c = path_count(graph, 1, n)\n    union_ab = path_union([path_a, path_b])\n    union_ab.sort()\n    union_ac = path_union([path_a, path_c])\n    union_ac.sort()\n    intersection_ab = path_intersection([path_a, path_b])\n    intersection_ac = path_intersection([path_a, path_c])\n    intersection_ab.sort()\n    intersection_ac.sort()\n    sorted_set = union_ab + union_ac + intersection_ab + intersection_ac\n    sorted_set.sort()\n    return str(len(sorted_set)) + '\\n' + str(sorted_set[-3]) +'' + str(sorted_set[-2]) +'' + str(sorted_set[-1])\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = [int(input) for input in stdin.split('\\n')]\n    e = [[int(input) for input in stdin.split('\\n')][i] for i in range(n - 1)]\n    print(a)\n    print(b)\n    print(c)\n    print(n)\n    print(e)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given the number of divisors for the number x and y.\n    Your task is to print two numbers x and y such that the list of divisors of x and y is a permutation of the list of divisors of x and y.\n\n    >>> solution(10, 2, 8)\n    20 8\n    \"\"\"\n\n    # insert your code here\n    return 0\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for 'Chocolate Distribution Problem'\n    \"\"\"\n    n = int(stdin)\n    lst = [int(i) for i in stdin.split(' ')]\n    n_lst = lst[:n]\n    \n    n_lst.sort()\n    min_lst = n_lst[:n // 2]\n    max_lst = n_lst[n // 2:]\n    \n    min_sum = 0\n    for i in range(n // 2):\n        min_sum += min_lst[i] * (i + 1)\n    \n    max_sum = 0\n    for i in range(n // 2):\n        max_sum += max_lst[i] * (i + 1)\n    \n    print(max_sum - min_sum)\n    print(max_sum)\n    print(min_sum)\n    \n    return min_lst[0] * max_lst[0] + min_lst[1] * max_lst[1]\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds two positive integers x and y so that they merge into the given list of divisors\"\"\"\n    n = int(stdin)\n    xs, ys = [], []\n    for i in range(n):\n        x, y = map(int, stdin.split(' ')[i * 2 + 1: (i + 1) * 2])\n        xs.append(x)\n        ys.append(y)\n    xs.sort()\n    ys.sort()\n    for i in range(n):\n        if xs[i] == xs[i - 1] and ys[i] == ys[i - 1]:\n            print(xs[i], ys[i])\n            break\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = int(stdin.readline())\n    x, y = 0, 0\n    for i in range(n):\n        if arr[i] % x == 0:\n            x += 1\n        if arr[i] % y == 0:\n            y += 1\n    if x > y:\n        ans = arr[y]\n        for i in range(n):\n            if arr[i] % x == 0:\n                arr[i] = arr[i] // x\n    else:\n        ans = arr[x]\n        for i in range(n):\n            if arr[i] % y == 0:\n                arr[i] = arr[i] // y\n    arr.sort()\n    ans = ans * ans\n    for i in arr:\n        if i!= 0:\n            ans += i\n    return str(ans)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    s = set()\n    for d in l:\n        for i in range(2, d+1):\n            if d % i == 0:\n                s.add(i)\n    m = len(s)\n    for i in range(m):\n        for j in range(m):\n            if m % (i+1) == j:\n                s.add(i+1)\n    print(max(s))\n    return ''"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Gets input from stdin, and returns the two integers separated by a space.\n    '''\n\n    def get_ints(s: str) -> list:\n        '''\n        Gets a list of integers from the given string.\n        '''\n\n        return list(map(int, s.split()))\n\n    # Getting the input.\n    num_of_divisors = int(stdin)\n    divisors = get_ints(stdin)\n\n    # Getting the permutation of the list.\n    divisors.sort()\n    permutation = []\n    while divisors:\n        divisor = divisors.pop(0)\n        if divisors:\n            divisor = divisors.pop(-1)\n            if divisor!= divisor:\n                break\n        else:\n            break\n        permutation.append(divisor)\n\n    # Finding the solution.\n    x = 0\n    y = 0\n    for i, _ in enumerate(permutation):\n        if permutation[i] == permutation[i + 1] == permutation[i + 2]:\n            x = permutation[i]\n            y = permutation[i + 2]\n            break\n        elif permutation[i] == permutation[i + 1]:\n            x = permutation[i]\n            y = permutation[i + 2]\n            break\n\n    # Returning the solution.\n    return f\"{x} {y}\"\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = stdin.split(\"\\n\")\n    n = int(n)\n    arr = list(map(int, arr))\n    arr.sort()\n    s1 = set()\n    s2 = set()\n    for a in arr:\n        s1.update(set(divisors(a)))\n        s2.update(set(divisors(a)))\n    print(*sorted(list(s1 & s2), key=int))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    n = input_data[0]\n    div = input_data[1:]\n    s = set()\n    for i in range(n):\n        s = s.union(div)\n    d = {}\n    for i in s:\n        d[i] = 0\n        for j in div:\n            if i == j or i % j == 0:\n                d[i] += 1\n    res = []\n    for i in range(n):\n        if d[input_data[i+1]] == 1:\n            res.append(input_data[i+1])\n    if len(res)!= n:\n        return None\n    return str(res[0]) +'' + str(res[1])"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    arr = []\n    for i in range(n):\n        if d[i] not in arr:\n            arr.append(d[i])\n        else:\n            for j in range(arr.count(d[i])):\n                arr.remove(d[i])\n    return f'{arr[0]}\\n{arr[1]}'\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    a = [[int(x) for x in stdin.split(' ')] for _ in range(n)]\n    \n    m = math.floor(m / 2)\n    \n    sums = []\n    for i in range(n):\n        row = a[i]\n        s = 0\n        for j in range(m):\n            s += row[j]\n        sums.append(s)\n        \n    print(sums)\n    \n    sums = sorted(sums)\n    print(sums)\n    \n    res = 0\n    for i in range(n):\n        j = m - 1\n        while j >= 0 and (sums[i] + sums[j]) % k!= 0:\n            j -= 1\n        print(i, j, k, res)\n        res = max(res, j + 1)\n    \n    return str(res * k)"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1:]]\n    # a = [int(stdin.split('\\n')[i]) for i in range(1, n + 1)]\n    max_sum = 0\n    for i in range(n):\n        d = [0 for j in range(m)]\n        for j in range(m // 2):\n            d[j] = (a[i][j] + a[i][m - j - 1]) % k\n        d.sort()\n        for j in range(m // 2):\n            max_sum += d[j]\n    return str(max_sum)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4')\n    24\n    '''\n    n, m, k = map(int, stdin.split('\\n')[:3])\n    a = [list(map(int, line.split())) for line in stdin.split('\\n')[3:]]\n    res = 0\n    for i in range(n):\n        nums = [j for j in a[i] if j % k == 0]\n        if len(nums) > 0:\n            res += max(nums)\n    return res\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    row = [[0] * (m + 1)] * n\n    for i in range(n):\n        row[i] = list(map(int, stdin.split(' ')[i * m: i * m + m]))\n        row[i].append(0)\n    row.append([0] * (m + 1))\n    row = [i for i in row if len(i) == m + 1]\n    k_list = []\n    for i in row:\n        s = 0\n        for j in range(len(i) - 1):\n            if i[j]!= 0:\n                s += i[j]\n        k_list.append(s)\n    print(max(k_list) % k if max(k_list) % k > 0 else 0)\n    return 0\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m, k = [int(i) for i in stdin.split()]\n    a = []\n    for _ in range(n):\n        a.append([int(i) for i in stdin.split()])\n    a.sort(key=lambda x: -sum(x))\n    s = 0\n    for i in range(n):\n        s += a[i][0]\n        if s % k == 0:\n            return str(s)\n        for j in range(m // 2):\n            if s - a[i][j] % k == k:\n                return str(a[i][j] % k)\n    return -1\n    '''\n    n, m, k = [int(i) for i in stdin.split()]\n    a = []\n    for _ in range(n):\n        a.append([int(i) for i in stdin.split()])\n    a.sort(key=lambda x: -sum(x))\n    s = 0\n    for i in range(n):\n        s += a[i][0]\n        if s % k == 0:\n            return str(s)\n        for j in range(m // 2):\n            if s - a[i][j] % k == k:\n                return str(a[i][j] % k)\n    return -1"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'not implemented'"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, k = [int(n) for n in stdin.split()]\n    matrix = []\n    for i in range(rows):\n        row = [int(n) for n in stdin.split()]\n        matrix.append(row)\n    # matrix = [list(map(int, stdin.split())) for _ in range(rows)]\n    maximum = 0\n    for row in matrix:\n        row_sum = sum(row[: len(row) // 2])\n        row_sum += sum(row[-(len(row) - 1) // 2:])\n        if row_sum % k == 0:\n            maximum = max(maximum, row_sum)\n    return maximum\n\n\nprint(solution(input()))"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the maximum sum of elements divisible by k\n    that can be obtained.\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return 'done'"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here\n    # return \"\""
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # pass # Put your code here\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    d = {}\n    min_d = float('inf')\n    for num in nums:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n    for num in nums:\n        if num not in d:\n            continue\n        if d[num] < min_d:\n            min_d = d[num]\n            num_d = num\n    if min_d == float('inf'):\n        print(-1)\n    else:\n        print(num_d)\n        return\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    i = 0\n    t = set()\n    for i in range(n):\n        for k in range(1, 4):\n            if i+k < n:\n                t.add((arr[i]+arr[i+k], i, i+k))\n            if i-k >= 0:\n                t.add((arr[i]-arr[i-k], i, i-k))\n    t = list(t)\n    t.sort()\n    if len(t) < 1:\n        print(-1)\n    else:\n        print(t[0][0])\n    return \"\"\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem \"Minimal non-negative integer value D\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    d = 0\n    while d in a:\n        d += 1\n        if d not in a:\n            print(-1)\n            return\n    print(d)\n    return \"\""
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  1 \u2264 n \u2264 100\n  1 \u2264 a_i \u2264 100\n  '''\n  n = int(stdin)\n  a = list(map(int, stdin.split()))\n  counts = Counter(a)\n  min_freq = min(counts.values())\n  if min_freq == 1:\n    return -1\n  else:\n    D = min([i for i, x in counts.items() if x == min_freq])\n    return D"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    min = max(a)\n    for i in range(1, n):\n        if min > a[i] - a[i-1]:\n            min = a[i] - a[i-1]\n    return min\n    \n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity is O(n)\n    space complexity is O(1)\n    \"\"\"\n    stdin = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    print(solution_runner(stdin))\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A solution to the above problem.\n    \"\"\"\n    _, a = map(int, stdin.split())\n    a = [int(s) for s in stdin.split()]\n    if len(set(a)) == 1:\n        return \"1\"\n    d = 0\n    while True:\n        d += 1\n        if max(a) + d not in a or min(a) - d not in a:\n            break\n    if d == 0:\n        return \"-1\"\n    else:\n        return str(d)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = [int(x) for x in stdin.readline().strip().split(' ')]\n    max_sum = sum(nums)\n    result = max_sum\n    for i in range(1, max_sum + 1):\n        sub_sum = sum([x for x in nums if x > i])\n        if sub_sum < i and sub_sum < result:\n            result = sub_sum\n    if result < max_sum:\n        return str(result)\n    return str(-1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Tr\u1ea3 v\u1ec1 'D' t\u00ecm \u0111\u01b0\u1ee3c trong \u0111\u1ea7u v\u0103n b\u1ea3n.\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'YES'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    # x, y = map(int, stdin.split())\n    if (min(x1, x2) <= max(x3, x4) and min(x5, x6) <= max(x3, x4)) and (min(y1, y2) <= max(y3, y4) and min(y5, y6) <= max(y3, y4)):\n        return 'YES'\n    elif (min(x1, x2) <= max(x5, x6) and min(x3, x4) <= max(x5, x6)) and (min(y1, y2) <= max(y5, y6) and min(y3, y4) <= max(y5, y6)):\n        return 'YES'\n    elif (min(y1, y2) <= max(y3, y4) and min(y5, y6) <= max(y3, y4)) and (min(x1, x2) <= max(x3, x4) and min(x5, x6) <= max(x3, x4)):\n        return 'YES'\n    elif (min(y1, y2) <= max(y5, y6) and min(y3, y4) <= max(y5, y6)) and (min(x1, x2) <= max(x5, x6) and min(x3, x4) <= max(x5, x6)):\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(\"2 2 4 4\"))\nprint(solution(\"3 1 7 6\"))\nprint(solution(\"5 2 10 5\"))\nprint(solution(\"0 0 1000000 1000000\"))\nprint(solution(\"0 0 499999 1000000\"))\nprint(solution(\"500000 0 1000000 1000000\"))\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = list(map(int, stdin.split()))\n    b.sort()\n    c = list(map(int, stdin.split()))\n    c.sort()\n    d = list(map(int, stdin.split()))\n    d.sort()\n    if b[0] <= a[0] <= b[2] and c[0] <= d[0] <= c[2]:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split(' ')]\n    x3, y3, x4, y4 = [int(x) for x in stdin.split(' ')]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split(' ')]\n    if x1 < x3 and y3 <= y1 <= y4:\n        if x5 > x4 and x5 < x6 and y3 <= y5 <= y6:\n            return 'YES'\n    if x1 < x5 and y5 <= y1 <= y4:\n        if x3 > x2 and x3 < x6 and y5 <= y3 <= y6:\n            return 'YES'\n    return 'NO'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(n) for n in stdin.split()]\n    x3, y3, x4, y4 = [int(n) for n in stdin.split()]\n    x5, y5, x6, y6 = [int(n) for n in stdin.split()]\n    \n    left = max(x1, x3)\n    right = min(x2, x4)\n    up = max(y1, y3)\n    down = min(y2, y4)\n    \n    if (right - left > 0) and (up - down > 0):\n        return 'YES'\n    else:\n        return 'NO'\n\n----\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if stdin[0] * stdin[1] > stdin[2] * stdin[3] else 'YES'\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [x1, y1, x2, y2] = map(int, stdin.split())\n    [x3, y3, x4, y4] = map(int, stdin.split())\n    [x5, y5, x6, y6] = map(int, stdin.split())\n\n    # (x1, y1)\n    if (x3 <= x1 <= x4 and y3 <= y1 <= y4) or (x3 <= x1 <= x4 and y1 <= y3 <= y4):\n        return \"YES\"\n\n    # (x1, y2)\n    if (x3 <= x1 <= x4 and y3 <= y2 <= y4) or (x3 <= x1 <= x4 and y2 <= y3 <= y4):\n        return \"YES\"\n\n    # (x2, y1)\n    if (x1 <= x2 <= x4 and y3 <= y1 <= y4) or (x1 <= x2 <= x4 and y1 <= y3 <= y4):\n        return \"YES\"\n\n    # (x2, y2)\n    if (x1 <= x2 <= x4 and y3 <= y2 <= y4) or (x1 <= x2 <= x4 and y2 <= y3 <= y4):\n        return \"YES\"\n\n    # (x3, y3)\n    if (x1 <= x3 <= x2 and y1 <= y3 <= y2) or (x1 <= x3 <= x2 and y3 <= y1 <= y2):\n        return \"YES\"\n\n    # (x3, y4)\n    if (x1 <= x3 <= x2 and y1 <= y4 <= y2) or (x1 <= x3 <= x2 and y4 <= y1 <= y2):\n        return \"YES\"\n\n    # (x4, y3)\n    if (x1 <= x4 <= x2 and y1 <= y3 <= y2) or (x1 <= x4 <= x2 and y3 <= y1 <= y2):\n        return \"YES\"\n\n    # (x4, y4)\n    if (x1 <= x4 <= x2 and y1 <= y4 <= y2) or (x1 <= x4 <= x2 and y4 <= y1 <= y2):\n        return \"YES\"\n\n    # (x5, y5)\n    if (x3 <= x5 <= x6 and y3 <= y5 <= y6) or (x3 <= x5 <= x6 and y5 <= y3 <= y6):\n        return \"YES\"\n\n    # (x5, y6)\n    if (x3 <= x5 <= x6 and y3 <= y6 <= y4) or (x3 <= x5 <= x6 and y6 <= y3 <= y4):\n        return \"YES\"\n\n    # (x6, y5)\n    if (x3 <= x6 <= x4 and y3 <= y5 <= y6) or (x3 <= x6 <= x4 and y5 <= y3 <= y6):\n        return \"YES\"\n\n    # (x6, y6)\n    if (x3 <= x6 <= x4 and y3 <= y6 <= y4) or (x3 <= x6 <= x4 and y6 <= y3 <= y4):\n        return \"YES\"\n\n    return \"NO\"\n    \n    \nsolution(stdin)\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(n) for n in stdin.split()]\n    x3, y3, x4, y4 = [int(n) for n in stdin.split()]\n    x5, y5, x6, y6 = [int(n) for n in stdin.split()]\n    if x1 < x2 < x3 < x4 < x5 < x6 or x1 < x2 < x3 < x4 < x6 < x5 or x1 < x2 < x4 < x3 < x5 < x6 or x1 < x2 < x4 < x6 < x5 < x3 or x1 < x2 < x5 < x3 < x6 < x4 or x1 < x2 < x6 < x3 < x4 < x5:\n        print('YES')\n    else:\n        print('NO')\n    return\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    x1, y1, x2, y2 = a, b, c, d\n    x3, y3, x4, y4 = [int(x) for x in stdin.split(' ')]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split(' ')]\n    x = (x1 * y2 + x2 * y1) - (x3 * y4 + x4 * y3)\n    y = (x3 * y1 + x1 * y3) - (x5 * y6 + x6 * y5)\n    if x < 0 or x > x2 * y2 or y < 0 or y > x1 * y1 or \\\n        x3 < 0 or x3 > x4 * y4 or y3 < 0 or y3 > x5 * y5 or \\\n        x5 < 0 or x5 > x6 * y6 or y5 < 0 or y5 > x1 * y1:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(n) for n in stdin.split()]\n    x3, y3, x4, y4 = [int(n) for n in stdin.split()]\n    x5, y5, x6, y6 = [int(n) for n in stdin.split()]\n    x12 = x1 + x2\n    y12 = y1 + y2\n    x34 = x3 + x4\n    y34 = y3 + y4\n    x56 = x5 + x6\n    y56 = y5 + y6\n    # if not (x1 >= x3 or x2 <= x4 or y1 >= y3 or y2 <= y4):\n    #     return \"YES\"\n    # if not (x1 >= x5 or x2 <= x6 or y1 >= y5 or y2 <= y6):\n    #     return \"YES\"\n    # if x12 < x34 or x34 < x56 or y12 < y34 or y34 < y56:\n    #     return \"NO\"\n    if not(x1 <= x5 or x2 >= x6 or y1 <= y5 or y2 >= y6):\n        return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    memo = {}\n    def f(num: str) -> int:\n        if num in memo:\n            return memo[num]\n        # zero\n        if not num:\n            return 0\n        # one\n        if len(num) == 1:\n            return 1\n        # two\n        if len(num) == 2:\n            if int(num) % 2:\n                return 2\n            return 1\n        res = 0\n        for i in range(len(num)):\n            if int(num[:i]) % 2 == 0:\n                res += f(num[i:])\n        memo[num] = res\n        return res\n    return f(num)\n\nfor test in range(int(stdin.readline())):\n    print(solution(stdin.readline()))\n\n\n---\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    return ''\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'The number of reachable numbers is {}'.format(stdin)"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin\n    x = 0\n    count = 0\n    while True:\n        if not x % 10 and x:\n            count += 1\n            x = x // 10\n        if not x:\n            break\n        x += 1\n    return count\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    result = set()\n    for i in range(1, len(number) + 1):\n        for j in range(len(number) - i + 1):\n            result.add(int(number[j:j + i]))\n    return len(result)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(list(set([int(str(n) + \"1\") for n in range(1, int(stdin) + 1)]))))"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    f = [int(x) for x in stdin.readline().strip().split(' ')]\n    answer = []\n    for i in range(n):\n        if f[i] == 0:\n            for j in range(n):\n                if i!= j and f[j] == 0:\n                    answer.append(j + 1)\n                    f[j] = i + 1\n                    break\n        if f[i]!= 0:\n            answer.append(f[i])\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    x.sort()\n    y = [0 for i in range(n)]\n    for i in x:\n        if i!= 0:\n            y[i - 1] = i\n    return''.join(map(str, y))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = sorted([int(i) for i in stdin.readline().strip().split(' ')])\n    cnt = 0\n    m = max(nums)\n    res = [nums[i] for i in range(n) if nums[i] > 0]\n    for i in range(m + 1):\n        if i in res:\n            continue\n        if i == 0:\n            cnt += 1\n        else:\n            cnt += 1\n            if i * 2 in res:\n                cnt += 1\n    res = [i for i in range(n) if nums[i] > 0]\n    cnt += len(res)\n    return''.join([str(i) for i in res]) +'' + str(cnt)\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def condition(lst: List[int], i: int):\n        if not (0 <= i < len(lst) and lst[i]!= 0 and lst[i]!= i):\n            return False\n        return True\n\n    def algorithm(stdin: str, i: int) -> str:\n        lst = [int(j) for j in stdin.split()]\n        if condition(lst, i):\n            lst[i] = 0\n            print(i, end=\" \")\n        else:\n            lst[i] = i\n        for j in range(len(lst)):\n            if lst[j]!= 0:\n                algorithm(stdin, j)\n\n    algorithm(stdin, 0)\n    return \"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    nums.sort()\n    ans = []\n    for num in nums:\n        if num == 0:\n            ans.append(0)\n        else:\n            ans.append(num)\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please do not change anything below this line\n    # Do not print anything before this line\n    inp = stdin.split(\"\\n\")\n    n = int(inp[0])\n    input = inp[1].split()\n    a = list(map(int, input))\n    # First find the number of gifts\n    n0 = a.count(0)\n    gifts = []\n    for i in range(1, n+1):\n        if i!= n0:\n            gifts.append(i)\n    # Now find the person that each gift will be given to\n    ans = []\n    for i in range(len(gifts)):\n        ans.append(gifts[a[i]-1])\n    return \" \".join(map(str, ans))\n    # Do not change anything below this line\n    # Do not print anything below this line\n    return result\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    zero_index = []\n    for i in range(n):\n        if arr[i] == 0:\n            zero_index.append(i)\n    zero_index = tuple(zero_index)\n    a = []\n    for i in range(n):\n        if i in zero_index:\n            a.append(0)\n        else:\n            a.append(i + 1)\n    for i in range(n):\n        print(a[i], end=' ')\n    '''\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr2 = sorted(arr)\n    ans = []\n    for i in arr2:\n        if arr.count(i) == 1:\n            ans.append(i)\n        else:\n            ans.append(arr.index(i))\n    for i in ans:\n        print(i, end=' ')\n\n\nsolution(input())\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = [int(x) for x in stdin.split('\\n')]\n    n = input[0]\n    arr = input[1:]\n\n    ans = []\n    nums = [0] * (n + 1)\n\n    for i in arr:\n        nums[i] += 1\n        nums[i + 1] -= 1\n\n    for i in range(1, n + 1):\n        nums[i] += nums[i - 1]\n\n    for i in range(n):\n        ans.append(arr[nums[i] - 1])\n\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    _, *f = [int(x) for x in stdin.split()]\n    friends = []\n    answers = []\n    for i in range(0, len(f)):\n        if f[i] == 0:\n            pass\n        else:\n            if f[i] == len(f) - i - 1:\n                friends.append(f[i])\n                answers.append(f[i])\n            else:\n                friends.append(f[i])\n                answers.append(f[i])\n    stdout = ''\n    for i in range(0, len(friends)):\n        stdout += str(answers[i]) +''\n    return stdout\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 0 0 2 4\n   ... ''')\n    '5 3 1 2 4'\n    >>> solution('''7\n   ... 7 0 0 1 4 0 6\n   ... ''')\n    '7 3 2 1 4 5 6'\n    \"\"\"\n    n = int(stdin.readline())\n    friends = [0] * n\n    for i in range(n):\n        friends[i] = int(stdin.readline())\n    best_friends = [0] * n\n    for i in range(n):\n        if friends[i] == 0:\n            best_friends[i] = n\n        else:\n            best_friends[i] = 1\n    for i in range(n):\n        if best_friends[i] == 0:\n            j = i\n            while friends[j] == 0 and best_friends[j]!= 0:\n                best_friends[j] = i + 1\n                j = best_friends[j] - 1\n            if j!= i:\n                best_friends[i] = best_friends[j]\n    return \" \".join(str(best_friends[i]) for i in range(n))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = set()\n    for i in a:\n        if i in b:\n            return \"NO\"\n        b.add(i)\n    a = sorted(list(b))\n    a = {i:0 for i in a}\n    for i in a:\n        for j in a:\n            if i > j:\n                break\n            if j == i:\n                a[j] += 1\n            if a[i] == 0:\n                break\n    if a[i] == 0:\n        return \"NO\"\n    for i in a:\n        if a[i] < k:\n            return \"NO\"\n    l = []\n    c = 1\n    for i in a:\n        for j in range(1, a[i] + 1):\n            l.append(c)\n            c += 1\n    return \"YES\\n\" +''.join(map(str, l))\nprint(solution(input()))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if k == n:\n        return 'NO'\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    b = set()\n    for i in range(k):\n        b.add(i+1)\n    c = {}\n    for i in range(n):\n        c[a[i]] = b\n        if len(c[a[i]]) == 1:\n            b.remove(list(c[a[i]])[0])\n    if len(b) > 0:\n        return 'NO'\n    c = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            if c.get(a[i]+a[j], False):\n                c[a[i]+a[j]].add(a[i])\n                c[a[i]+a[j]].add(a[j])\n            else:\n                c[a[i]+a[j]] = {a[i], a[j]}\n    for i in range(1, k+1):\n        if len(c.get(i, False))!= 0:\n            return 'YES'\n    return 'NO'\n\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A = [int(x) for x in stdin.split()]\n    \n    n, k = A[0], A[1]\n    A = A[2:]\n    \n    out = [0] * n\n    \n    for x in A:\n        if out[x - 1] == 0:\n            out[x - 1] = k\n            k -= 1\n        elif out[x - 1]!= 0:\n            print(\"NO\")\n            return\n    \n    print(\"YES\")\n    print(' '.join([str(x) for x in out]))\n    '''\n\n    n, k = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    out = [0] * n\n    A.sort()\n    \n    for x in A:\n        if out[x - 1] == 0:\n            out[x - 1] = k\n            k -= 1\n        elif out[x - 1]!= 0:\n            print('NO')\n            return\n    \n    print('YES')\n    print(' '.join([str(x) for x in out]))\n\n\nsolution(stdin)"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    # return \"NO\"\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    m = max(arr)\n    if k < m:\n        return \"NO\"\n    for i in range(k):\n        cnt = 0\n        if i in arr:\n            cnt += 1\n            arr = list(filter(lambda x: x!= i, arr))\n        for j in range(len(arr)):\n            if arr[j] < i + 1:\n                cnt += 1\n                arr = list(filter(lambda x: x!= arr[j], arr))\n        if cnt == n:\n            return \"YES\"\n    return \"NO\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = list(set(a))\n    a.sort()\n    if k >= n:\n        if len(a) == n and set(a) <= set(range(1, k + 1)):\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(r'4 2\\n1 2 2 3')\n    'YES\\n1 1 2 2'\n    >>> solution(r'5 2\\n3 2 1 2 1')\n    'NO'\n    \"\"\"\n    n, k = map(int, stdin.readline().split(' '))\n    a = list(map(int, stdin.readline().split(' ')))\n    colors = {i: i for i in range(1, k + 1)}\n    for i in a:\n        if i not in colors:\n            colors[i] = i\n        elif colors[i]!= i:\n            return 'NO'\n    if len(set(colors.values())) < k:\n        return 'NO'\n    return 'YES\\n{}'.format(' '.join(str(c) for c in sorted(colors.values())))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, k = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    if n == k:\n        return \"NO\"\n    colors = set(colors)\n    if len(colors) == k:\n        return \"YES\"\n    for i in range(k):\n        if i not in colors:\n            return \"NO\"\n    return \"YES\"\n    pass"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution is checking if it is possible to color the array with k colors,\n    according to the rules of the problem. If it is not possible, the answer is NO,\n    if it is possible, then the answer is YES and the coloring.\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k > n:\n        return 'NO'\n    if k == n:\n        return 'YES'\n    else:\n        ans = list(range(1, k + 1))\n        a_set = set(a)\n        ans_set = set(ans)\n        if ans_set.issubset(a_set):\n            for i in range(1, k + 1):\n                if i in a_set:\n                    ans[i - 1] = '1'\n                else:\n                    ans[i - 1] = '0'\n            return 'YES'+''.join(ans)\n        else:\n            return 'NO'"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    a.sort()\n    # todo finish the rest\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    print(n - y + 1 + sum(0 if digit == '1' else 1 for digit in stdin[:n]))\n    return ''"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    return str(n - (x % n + 1))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    if y == x:\n        return 0\n    if y > x:\n        return n\n    if x == 0:\n        return 1\n    else:\n        return n - x + 1\n        "
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    nums = stdin.split()[1:]\n    q, r = divmod(len(nums), x)\n    if r!= 0:\n        nums += (x - r) * ['0']\n    rems = []\n    for i in range(q):\n        rem = int(nums[i * x + y])\n        rems.append(rem)\n    return sum(rems)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    n = int(n)\n    x = int(x)\n    y = int(y)\n    stdin = stdin.split('\\n')[1]\n    num = list(map(int, list(stdin)))\n\n    num = str(num)\n    num = num.replace(\"0\", \"1\")\n    num = num.replace(\"1\", \"0\")\n    num = int(num)\n    return num % x\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution template.\n    The `stdin` parameter will be provided by the framework using the standard input stream.\n    Thus, it will be a `str` object that needs to be parsed.\n    \n    The `stdout` parameter will be provided by the framework using the standard output stream.\n    It should be noted that it will be a `str` object as well.\n    \"\"\"\n    return ''"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('11 5 2\\\\n11010100101')\n    1\n    >>> solution('11 5 1\\\\n11010100101')\n    3\n    \"\"\"\n    n, x, y = map(int, stdin.split())\n    digits = list(map(int, stdin))\n    answer = 0\n\n    while True:\n        curr_digit = digits.pop(0)\n        if curr_digit == 0:\n            if y == 0:\n                break\n            answer += 1\n            y -= 1\n        else:\n            if y!= 0:\n                answer += 1\n                y -= 1\n            else:\n                break\n        answer += 1\n\n    while digits:\n        curr_digit = digits.pop(0)\n        if curr_digit == 1:\n            answer += 1\n            x -= 1\n        else:\n            if x!= 0:\n                answer += 1\n                x -= 1\n            else:\n                break\n        answer += 1\n\n    return str(answer)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(n) for n in stdin.split()]\n    num = int(stdin[:-1])\n    print(\n        min(\n            sum(d * 2 ** i for i, d in enumerate(reversed(bin(num)[2:])))\n            - sum(d * 2 ** i for i, d in enumerate(reversed(bin(x)[2:])))\n            - sum(d * 2 ** i for i, d in enumerate(reversed(bin(y)[2:])))\n        )\n    )\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 2 1\n   ... 5\n   ... 1 2 2 3 2\n   ... 3\n   ... 1 1 2\n   ... 4\n   ... 1 2 2 1\n   ... 10\n   ... 1 1 2 2 3 3 4 4 5 5\n   ... ''')\n    YES\n    YES\n    NO\n    YES\n    NO\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split(' ')]\n        subsequences = [a[i:j] for i in range(n) for j in range(i + 1, n + 1)]\n        palindromes = [x for x in subsequences if x == x[::-1]]\n        print('YES' if len(palindromes) >= 3 else 'NO')\n    return ''\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 1 2\\n3\\n1 2 2 1\\n5\\n2 2 1 1 1 2\")\n    YES\n    >>> solution(\"3\\n3 1 2\\n3\\n1 2 2 1\\n5\\n2 2 1 1 1 2\")\n    YES\n    >>> solution(\"3\\n2 1 2\\n3\\n1 2 2 1\\n5\\n1 2 2 1 1 1 2\")\n    NO\n    >>> solution(\"3\\n3 1 2\\n3\\n1 2 2 1\\n5\\n1 2 1 2 1 1 2\")\n    NO\n    >>> solution(\"3\\n3 1 2\\n3\\n1 2 2 1\\n5\\n2 1 2 1 1 2\")\n    YES\n    >>> solution(\"3\\n3 1 2\\n3\\n1 2 2 1\\n5\\n1 2 1 2 1 1 2\")\n    YES\n    >>> solution(\"3\\n3 1 2\\n3\\n1 2 2 1\\n5\\n1 2 1 2 1 1 2\")\n    NO\n    \"\"\"\n\n    def is_palindrome(string: str) -> bool:\n        if len(string) == 1:\n            return True\n\n        for i in range(len(string)):\n            if string[i]!= string[len(string) - 1 - i]:\n                return False\n\n        return True\n\n    def is_palindrome_subsequence(a: List[int]) -> bool:\n        for i in range(len(a) - 2):\n            if is_palindrome(a[i:i + 3]):\n                return True\n        return False\n\n    t = int(next(stdin))\n    for _ in range(t):\n        n = int(next(stdin))\n        a = list(map(int, next(stdin).split()))\n        if is_palindrome_subsequence(a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 2\\n3\")\n    'NO'\n    >>> solution(\"4\\n1 2 3 4\\n2 3 4 5\")\n    'YES'\n    >>> solution(\"5\\n1 2 3 4 5\\n2 3 4 5 6\")\n    'NO'\n    >>> solution(\"5\\n1 2 3 4 5\\n2 3 3 4 5\")\n    'YES'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find longest substring of letters that is palindromic\n    \"\"\"\n    # input number of tests\n    num_of_tests = int(stdin.readline())\n\n    for test in range(num_of_tests):\n        # input number of letters in the string\n        num_of_letters = int(stdin.readline())\n\n        # store letters in list\n        letters = list(map(int, stdin.readline().strip().split(' ')))\n\n        # initialize the longest substring as the current substring\n        substring = letters[0:3]\n\n        # initialize the first index of the current substring\n        index_of_current_substring = 3\n\n        # initialize a flag for the palindrome substring\n        flag = True\n\n        # loop through each letter until the end of the string\n        while index_of_current_substring < num_of_letters:\n            # if the current substring is not a palindrome, increase the index\n            # and try again\n            if not flag:\n                index_of_current_substring += 1\n                continue\n            # if the current substring is a palindrome, increase the length\n            # of the palindrome by one and try again\n            if substring[0] == substring[2]:\n                substring.append(letters[index_of_current_substring])\n                index_of_current_substring += 1\n                continue\n            # if the current substring is not a palindrome, set the flag to\n            # False\n            flag = False\n\n        # if the flag is still True, then the number of letters is not a\n        # palindrome, so print 'NO'\n        if flag:\n            print('YES')\n        # otherwise, print 'NO'\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    s = stdin\n    l = list(s)\n    n = len(s)\n    print(n)\n    a = []\n    for i in l:\n        a.append(int(i))\n    a = a[::-1]\n    print(a)\n    return ''\n    \"\"\"\n    s = stdin\n    l = list(s)\n    a = []\n    for i in l:\n        a.append(int(i))\n    a = a[::-1]\n    max_a = max(a)\n    print(max_a)\n    return ''\n    \ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_max(string: str) -> int:\n        return int(max([string[i : i + 3] for i in range(0, len(string) - 2)]))\n\n    s = stdin[0]\n    a = stdin[1]\n    fs = stdin[2 : ]\n\n    for i, f in enumerate(fs):\n        s = s[ : i] + str(f) + s[i + 1 : ]\n\n    return str(get_max(s))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def replace(a: str, i: int) -> str:\n        return str(int(a[:i]) - 1) + a[i:]\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    f = [int(i) - 1 for i in stdin.split('\\n')[2].split(' ')]\n    best = a[:]\n    while True:\n        if n == 0:\n            break\n        for i in range(len(a) - n + 1):\n            if all([a[i + j]!= str(f[j]) for j in range(n)]):\n                best = replace(best, i)\n                break\n        n -= 1\n    return best\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(a)\n    f = stdin.split()\n    f = [int(x) for x in f]\n\n    max_num = int(''.join(a))\n\n    for i in range(len(a)-n+1):\n        res = int(''.join([str(x) for x in a[i:i+n]]))\n        for j in range(n):\n            res = res * f[j]\n            res %= 9\n        res = int(str(res))\n        max_num = max(max_num, res)\n\n    return str(max_num)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    f = list(map(int, stdin[2].split()))\n    \n    result = a.copy()\n    \n    for index, value in enumerate(result):\n        result[index] = f[value - 1]\n        \n    return str(int(''.join(map(str, result))))\n    \n    \n    \n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem in the most optimal way possible.\n    \"\"\"\n    # number of digits\n    num_digits: int = stdin[0]\n    # digits\n    digits: List[int] = [int(char) for char in stdin[1]]\n    # mapping function\n    f: List[int] = [int(char) for char in stdin[2].split()]\n\n    # keep track of the largest number we've seen so far\n    max_num: int = 0\n    # track the current max_num so far\n    cur_num: int = 0\n    # track the current index in the digits array\n    cur_idx: int = 0\n    # track the number of digits we've processed so far\n    digits_processed: int = 0\n    # track the number of times we've looked up a digit\n    lookup_count: int = 0\n    # track the number of times we've tried to update our current max_num\n    update_count: int = 0\n    # track the maximum length of the sequence we've seen so far\n    max_sequence_length: int = 0\n    # track the maximum length of the sequence we've seen so far\n    cur_sequence_length: int = 0\n    while cur_idx < num_digits:\n        cur_digit: int = digits[cur_idx]\n        lookup_count += 1\n        if cur_digit == 1:\n            lookup_count -= 1\n            update_count += 1\n            cur_num += cur_digit * 10 ** (num_digits - cur_idx - 1)\n            cur_idx += 1\n        elif cur_digit == 2:\n            if cur_sequence_length < max_sequence_length:\n                max_sequence_length = cur_sequence_length\n            if digits_processed == 0:\n                cur_num += digits[cur_idx] * 10 ** (num_digits - cur_idx - 1)\n            cur_sequence_length = 0\n            cur_idx += 1\n        elif cur_digit == 3:\n            update_count += 1\n            cur_num += f[0] * 10 ** (num_digits - cur_idx - 1)\n            cur_idx += 1\n        elif cur_digit == 4:\n            update_count += 1\n            cur_num += f[1] * 10 ** (num_digits - cur_idx - 1)\n            cur_idx += 1\n        elif cur_digit == 5:\n            update_count += 1\n            cur_num += f[2] * 10 ** (num_digits - cur_idx - 1)\n            cur_idx += 1\n        elif cur_digit == 6:\n            update_count += 1\n            cur_num += f[3] * 10 ** (num_digits - cur_idx - 1)\n            cur_idx += 1\n        elif cur_digit == 7:\n            update_count += 1\n            cur_num += f[4] * 10 ** (num_digits - cur_idx - 1)\n            cur_idx += 1\n        elif cur_digit == 8:\n            update_count += 1\n            cur_num += f[5] * 10 ** (num_digits - cur_idx - 1)\n            cur_idx += 1\n        elif cur_digit == 9:\n            update_count += 1\n            cur_num += f[6] * 10 ** (num_digits - cur_idx - 1)\n            cur_idx += 1\n        else:\n            update_count += 1\n            cur_num += f[7] * 10 ** (num_digits - cur_idx - 1)\n            cur_idx += 1\n\n        if cur_sequence_length > max_sequence_length:\n            max_sequence_length = cur_sequence_length\n        cur_sequence_length = 0\n\n        if update_count >= 2:\n            cur_num = cur_num // update_count\n            update_count = 0\n\n        digits_processed += 1\n        if cur_num > max_num:\n            max_num = cur_num\n\n    return str(max_num)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()[0]\n    n = len(a)\n    def f(x):\n        if x == '1': return 1\n        elif x == '2': return 2\n        elif x == '3': return 3\n        elif x == '4': return 4\n        elif x == '5': return 5\n        elif x == '6': return 6\n        elif x == '7': return 7\n        elif x == '8': return 8\n        elif x == '9': return 9\n        else: return 1\n    \n    tot = 0\n    for i in range(n):\n        if a[i] == '1' or a[i] == '2' or a[i] == '3' or a[i] == '4' or a[i] == '5' or a[i] == '6' or a[i] == '7' or a[i] == '8' or a[i] == '9':\n            tot += f(a[i])\n            a = a[:i] + '9'*(i-1) + a[i+1:]\n            break\n        else:\n            tot += int(a[i])\n            a = a[:i] + '9'*(i-1) + a[i:]\n            break\n    return tot\n\nprint(solution(input()))"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(n) for n in stdin.split('\\n')[1].split()]\n    n = int(stdin.split('\\n')[0])\n    f = [int(n) for n in stdin.split('\\n')[2].split()]\n    for i in range(9, -1, -1):\n        if f.count(i) > 0:\n            a[f.index(i)] = i\n    a = [str(n) for n in a]\n    return ''.join(a)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(int, stdin)))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, list(stdin.split(\"\\n\")[1])))\n\n    f = list(map(int, list(stdin.split(\"\\n\")[2])))\n    f = [x-1 for x in f]\n\n    x = 0\n    maximum = 0\n    while x < len(a):\n        if a[x] == 1:\n            s = \"1\"\n            while x < len(a) and a[x] == 1:\n                s += \"1\"\n                x += 1\n            maximum += int(s, 10)\n        elif a[x] == 0:\n            s = \"9\"\n            while x < len(a) and a[x] == 0:\n                s += \"9\"\n                x += 1\n            maximum += int(s, 10)\n        else:\n            maximum += a[x] * f[a[x]-1]\n            x += 1\n    return str(maximum)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\n\n    Parameters\n    ----------\n    stdin : str\n        Input\n\n    Returns\n    -------\n    str\n        Output\n    \"\"\"\n    return \"Not yet implemented\""
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A = min(A, B, C) - \u0447\u0442\u043e\u0431\u044b \u0447\u0438\u0441\u043b\u043e A \u043d\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u043b\u043e \u0447\u0438\u0441\u043b\u043e B, \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e\u0435 A \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u044f\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 1 \u0434\u043e 10^4\n    \"\"\"\n    a, b, c = map(int, stdin.split())\n    res = 0\n    a, b, c = sorted([a, b, c])\n    while not b % a:\n        b += 1\n    while not c % b:\n        c += 1\n    res = a * b * c\n    return str(res)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for exercise2 of week1\n    \"\"\"\n\n    cases = int(stdin.readline())\n\n    for i in range(cases):\n        a, b, c = [int(x) for x in stdin.readline().strip().split()]\n\n        if b % a == 0:\n            if c % b == 0:\n                print(0)\n            else:\n                print(1)\n                print(b, c)\n        else:\n            if c % b == 0:\n                print(1)\n                print(b, c)\n            else:\n                print(2)\n                print(c, a, b)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) + int(stdin[1]))\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for advent2020/day1\n    \"\"\"\n    # get the data and split into a list of strings\n    data = stdin.strip().split()\n\n    # store the answer\n    res = 0\n    for i in range(len(data)):\n        num1, num2 = data[i].split('-')\n        num1, num2 = int(num1), int(num2)\n\n        if num1 == num2:\n            res += 1\n        else:\n            div = num1 % num2\n            res += num1 - div + 1\n\n    return str(res)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution without using reduce\"\"\"\n    n = int(stdin)\n    seq = [int(x) for x in stdin.split()]\n    max_val = max(seq)\n    min_val = min(seq)\n    return max_val - min_val\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split()]\n    return str(min(\n        max(a[i] - min(a[i + 1:]), max(a[i + 1:]) - min(a[i:]))\n        for i in range(len(a) - 1)\n    ))"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = sorted(a)\n    inst = max(a) - min(a)\n    a = list(set(a))\n    inst = min([a[i] - a[i - 1] for i in range(1, len(a))])\n    return str(inst)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def check(s):\n        return min(s) == max(s) and 1 < len(s)\n\n    l = stdin.split('\\n')\n    n = int(l[0])\n    a = list(map(int, l[1].split()))\n    b = list(a)\n\n    while check(a):\n        a.remove(min(a))\n\n    while check(b):\n        b.remove(max(b))\n\n    return min(abs(max(a) - min(a)), abs(max(b) - min(b)))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 10 ** 5\n    for i in range(n):\n        l = [a[j] for j in range(n) if j!= i]\n        res = min(res, max(l) - min(l))\n    print(res)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split(' ')]\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n1 3 3 7')\n    2\n    >>> solution('2\\n1 100000')\n    0\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_days, num_exams = map(int, stdin.split())\n    exams = [list(map(int, stdin.split())) for i in range(num_exams)]\n    days = [0 for i in range(num_days)]\n    for exam in exams:\n        days[exam[0]-1] = exam[1]\n        days[exam[0]-1] += exam[2]\n    exam_to_pass = [0 for i in range(num_exams)]\n    for i in range(num_days):\n        if days[i] < num_exams:\n            return '-1'\n        for exam in exams:\n            if exam[0] <= i < exam[0] + exam[2]:\n                exam_to_pass[exam[1]-1] = exam[1]\n    for exam in exam_to_pass:\n        if exam!= num_exams:\n            return '-1'\n    return''.join(map(str, days))\n    \nprint(solution(input()))\n\n\n\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    days = [0] * int(n)\n    passed_days = [0] * int(n)\n    for i in range(int(m)):\n        s, d, c = stdin.split()\n        s, d, c = int(s), int(d), int(c)\n        days[s] = days[s] + c + 1\n        passed_days[d] = passed_days[d] + 1\n    can_pass = 0\n    for i in range(1, int(n) + 1):\n        if days[i] == 0:\n            if can_pass + passed_days[i] < int(m):\n                return -1\n            can_pass += 1\n    return''.join([str(can_pass + 1)] + [str(x) for x in range(1, int(n) + 1) if can_pass + passed_days[x] < int(m)])\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(s) for s in stdin.split()]\n    days = [[int(s) for s in stdin.split()] for i in range(m)]\n    days = sorted(days, key=lambda x: x[1])\n    out = []\n\n    i = 0\n    while i < len(days):\n        curr = days[i]\n        out.append(0)\n        j = i + 1\n        while j < len(days):\n            if curr[2] > days[j][1]:\n                break\n            out.append(1)\n            j += 1\n        i = j\n\n    if len(out)!= n:\n        return \"-1\"\n    else:\n        return \" \".join(map(str, out))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days, exams = [int(i) for i in stdin.split('\\n')[0].split()]\n    prepare = [list(map(int, i.split())) for i in stdin.split('\\n')[1:]]\n    # prepare = []\n    # for i in stdin.split('\\n')[1:]:\n    #     days, exams = [int(j) for j in i.split()]\n    #     prepare.append([int(j) for j in i.split()[1:]])\n    for i in range(exams):\n        if sum([j[1] for j in prepare[i::exams]]) > days:\n            return \"-1\"\n    count = 0\n    for i in range(exams):\n        if prepare[i][1] > days:\n            return \"-1\"\n        if prepare[i][0] > count:\n            count = prepare[i][0]\n        if count >= days:\n            return \"-1\"\n    count = 0\n    for i in range(exams):\n        count += prepare[i][0]\n    # count = 0\n    # for i in range(exams):\n    #     count += prepare[i][0]\n    return str(count + 1) +'' +''.join([str(i) for i in list(range(1, exams + 1))])\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nfrom typing import List, Dict\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin[0])\n    exams = int(stdin[1])\n    exam_days = []\n    for i in range(exams):\n        exam_days.append(list(map(int, stdin[i+2].split())))\n    if exams > days:\n        return '-1'\n    schedule = [0 for i in range(days)]\n    for exam in exam_days:\n        for i in range(exam[0], exam[1]):\n            schedule[i-1] += 1\n        if exam[1] > exam[0] + 1:\n            for i in range(exam[1] - exam[0]):\n                schedule[exam[0] + i] = exam[2]\n    for i in range(days):\n        print(schedule[i], end=' ')\n    return '0'\nprint(solution(stdin))"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the schedule for Petya to prepare for all exams and pass them,\n    or report that it is impossible.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: If Petya can not prepare and pass all the exams, print -1. In case of positive answer, print $n$ integers, where the $j$-th number is:  $(m + 1)$, if the $j$-th day is a day of some exam (recall that in each day no more than one exam is conducted),  zero, if in the $j$-th day Petya will have a rest,  $i$ ($1 \\le i \\le m$), if Petya will prepare for the $i$-th exam in the day $j$ (the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare for it).\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    s, d, c = [], [], []\n    for i in range(m):\n        s_, d_, c_ = [int(x) for x in stdin.split('\\n')[i].split(' ')]\n        s.append(s_)\n        d.append(d_)\n        c.append(c_)\n    \n    left = [0] * n\n    for i in range(m):\n        left[d[i] - 1] = max(left[d[i] - 1], c[i])\n        left[s[i] - 1] -= 1\n    \n    ans = []\n    s = m + 1\n    for i in range(n):\n        if left[i] > 0:\n            s -= 1\n        else:\n            ans.append(s)\n            s = m + 1\n    return''.join([str(x) for x in ans])\n\"\"\"\n\nn, m = [int(x) for x in input().split(' ')]\ns, d, c = [], [], []\nfor i in range(m):\n    s_, d_, c_ = [int(x) for x in input().split(' ')]\n    s.append(s_)\n    d.append(d_)\n    c.append(c_)\n\nleft = [0] * n\nfor i in range(m):\n    left[d[i] - 1] = max(left[d[i] - 1], c[i])\n    left[s[i] - 1] -= 1\n\nans = [0] * n\ns = m + 1\nfor i in range(n):\n    if left[i] > 0:\n        s -= 1\n    else:\n        ans[i] = s\n        s = m + 1\nprint(' '.join([str(x) for x in ans]))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, m, s, d, c):\n        total = 0\n        for i in range(n):\n            total += (s[i] - d[i] + 1) * c[i]\n        return total <= m\n\n    n, m = [int(x) for x in stdin.split(' ')]\n    s = [int(x) for x in stdin.split(' ')]\n    d = [int(x) for x in stdin.split(' ')]\n    c = [int(x) for x in stdin.split(' ')]\n    res = solve(n, m, s, d, c)\n    if res:\n        print(*(i + 1 for i, x in enumerate(s) if x - d[i] + 1 * c[i] <= m))\n    else:\n        print(-1)\n    return ''\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline())\n    exams = int(stdin.readline())\n    exam = {}\n    for i in range(1, days + 1):\n        exam[i] = [0, 0]\n    for i in range(1, exams + 1):\n        exam_start, exam_days, exam_pass = map(int, stdin.readline().split())\n        exam[exam_start][0] += exam_pass\n        exam[exam_start][1] += exam_days - 1\n        exam[exam_start][1] += exam_pass\n    for i in range(1, days + 1):\n        if exam[i][1] - exam[i][0] > 0:\n            print(i, exam[i][0], exam[i][1], exam[i][1] - exam[i][0])\n            return str(exam[i][0])\n    return '-1'\n\n----\n\nclass Solution:\n    def solve(self, n, m):\n        stdin = sys.stdin.read()\n        arr = [int(s) for s in stdin.split('\\n')]\n        arr.pop(0)\n        arr.pop(0)\n        arr.sort()\n        start = 1\n        count = 0\n        for i in range(0, len(arr)):\n            if start <= arr[i]:\n                count += 1\n                if count == m:\n                    return str(arr[i])\n            else:\n                start = arr[i]\n                count = 0\n\nsolution = Solution()\nprint(solution.solve(int(sys.argv[1]), int(sys.argv[2])))\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = [int(n) for n in stdin.split(' ')]\n    print(m // n - m // (n * 2) - m // (n * 3) + 1 if m % n <= n else -1)\n\nsolution('120 51840')\nsolution('42 42')\nsolution('48 72')\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m <= n:\n        return str(m // n)\n    if m % n == 0:\n        return str(n * (m // n) - n)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    count = 0\n    while n!= m:\n        if n > m:\n            count += n - m\n            n = n - m\n        else:\n            count += m - n\n            n = n - m\n        if n == 0:\n            return '-1'\n        elif n == 1:\n            count += 1\n            break\n    return str(count)\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \"\"\"\n    a, b = map(int, stdin.split())\n    if a > b:\n        return -1\n    c = a\n    m = 0\n    while c <= b:\n        c *= 2\n        m += 1\n        if c >= b:\n            break\n        c *= 3\n        m += 1\n        if c >= b:\n            break\n    return m\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # import stdin\n    # n, m = map(int, stdin.readline().split())\n    # n, m = stdin.read().split()\n    n, m = input().split()\n    n, m = map(int, (n, m))\n    steps = 0\n\n    while n!= m:\n        if n == 1:\n            print(0)\n            break\n        if m % n == 0:\n            print(1)\n            break\n        elif m < n:\n            print(-1)\n            break\n        elif m % n == 1:\n            print(1)\n            break\n        else:\n            print(1)\n            break\n        n = n // 2 if m % 2 == 0 else n // 3\n\n    return steps\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(m - n) if m % n == 0 else str(-1)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"Not yet implemented\""
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the minimum number of moves needed to transform a number to another number\"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    if n % 10 == 0:\n        m %= 10\n        if m % 3 == 0:\n            return str(n // m)\n        else:\n            return '-1'\n    else:\n        n = n - n % 10 + 10\n        m = m - m % 10 + 10\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n = (n - n % 3) // 3\n        else:\n            return '-1'\n        if m % 3 == 0:\n            m //= 3\n        elif m % 2 == 0:\n            m = (m - m % 2) // 2\n        else:\n            return '-1'\n        return str(min(n, m))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n, k = [int(x) for x in stdin.split()]\n  t = stdin[:n]\n  counts = collections.Counter()\n  for i in range(n):\n    for j in range(i + 1, n + 1):\n      sub = t[i:j]\n      counts[sub] += 1\n\n  min_length = math.inf\n  min_sub = ''\n  for sub, c in counts.items():\n    if c == k:\n      if len(sub) < min_length:\n        min_length = len(sub)\n        min_sub = sub\n\n  return min_sub * k\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, n = stdin.split()\n    n = int(n)\n    t = t[:n]\n    l = 0\n    r = 0\n    s = t[0]\n    while r < len(t):\n        if t[l]!= t[r]:\n            l += 1\n            s = s + t[l]\n        else:\n            r += 1\n    return s"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n    l = 0\n    r = n\n    while r < len(t):\n        for i in range(l + 1, r):\n            if t[l:i] == t[i:i + n]:\n                r = i\n                break\n        if r < len(t):\n            r += 1\n        l = r\n    r -= n\n    return t[:r + 1] + t[:r + 1] * k\nprint(solution(stdin))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    t = stdin[:n]\n    indices = [i for i in range(n) if t[i] == t[(i + 1) % n]]\n    if k > len(indices):\n        return ''\n    indices.sort(reverse=True)\n    for i in range(k - 1):\n        indices[i] += n\n    if not indices:\n        return t * k\n    for i in range(k - 1, n):\n        indices.append(indices[i - k] + n)\n    result = ''\n    for i in range(k):\n        result += t[indices[i] % n]\n    return result\n    \n    \n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    t = stdin.readline().rstrip()\n    l, r = 0, n - 1\n    while l < r:\n        if t[l] == t[r]:\n            l += 1\n            r -= 1\n        else:\n            break\n    if l >= r:\n        print(t)\n    else:\n        k -= 1\n        while k:\n            l += 1\n            r -= 1\n            if t[l] == t[r]:\n                l += 1\n                r -= 1\n            else:\n                break\n        if k:\n            print(''.join(t[:l] + t[l:r + 1][::-1] + t[r + 1:]))\n        else:\n            print(t[:l] + t[l:r + 1][::-1] + t[r + 1:])\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[:n]\n    return t * k\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, n = [int(x) for x in stdin.split(\" \")]\n    string = stdin[:-1]\n    while n > 1:\n        string += string[:n]\n        n -= 1\n    return string\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n    s = ''\n    if k >= n:\n        return t\n    else:\n        # find all substrings of length k\n        substrs = set()\n        for i in range(n - k + 1):\n            substrs.add(t[i : i + k])\n        if len(substrs) < k:\n            return t\n        else:\n            for substr in substrs:\n                if t.count(substr) < k:\n                    s += substr * t.count(substr)\n                else:\n                    s += substr\n    return s\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return stdin\n    t = stdin.split()[0]\n    s = t * n\n    return ''.join([t] * k + [s[i : i + n] for i in range(k * n) if i % n == 0])\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    t = stdin[:n]\n    n = len(t)\n    if n == 1:\n        return t\n    if k == n:\n        return t\n\n    # Determine how many substrings of t can be equal to t,\n    # that is, how many times t repeats itself.\n    if k == 1:\n        return t\n\n    i = 1\n    while True:\n        i += 1\n        if k % i == 0:\n            break\n\n    n = n * i\n    k = k // i\n\n    # Create a list of substrings of t of length i,\n    # each of which is repeated k times.\n    substrings = [t * k for x in range(i)]\n\n    # We need to find the minimum possible length of substrings\n    # that repeat the same as t exactly k times.\n    # Start from substrings[0] and check if it is equal to t,\n    # if it is, then we cut the substrings list until we reached t.\n    # Continue this process until we reach substrings[i - 1] and t,\n    # then we cut the substrings list until we reached substrings[i - 1].\n    # When we reach substrings[i - 1] and substrings[i - 1],\n    # we can cut the substrings list until we reach substrings[i - 2].\n    # Repeat this process until we reach substrings[0].\n    # At this point we have our minimum possible length of substrings.\n    while True:\n        if len(substrings) == 1:\n            break\n        if substrings[0] == t:\n            substrings = substrings[:i]\n            if substrings[0] == t:\n                break\n            i -= 1\n            continue\n        if substrings[i - 1] == t:\n            substrings = substrings[:i]\n            i -= 1\n            continue\n        i += 1\n        if len(substrings) == i:\n            break\n    print(''.join(substrings))\n    return ''.join(substrings)\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_input():\n        return [int(x) for x in stdin.strip().split()]\n\n    n = int(stdin.readline())\n    arr = get_input()\n    \n    res = set()\n    for i in range(n):\n        temp = arr.copy()\n        temp.pop(i)\n        if sum(temp) in temp:\n            res.add(i)\n    \n    if len(res) == 0:\n        return 0\n    return len(res)\n\nprint(solution(stdin))"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    #\n    #\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    print(len([j for j in range(n) if sum(a[:j] + a[j + 1:]) == sum(a)]))\n    print(*[j for j in range(n) if sum(a[:j] + a[j + 1:]) == sum(a)])\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    rem = 0\n    for num in a:\n        rem += num\n    d = dict()\n    for num in a:\n        d[num] = False\n    for num in a:\n        d[num] = True\n        rem -= num\n        if rem == 0:\n            break\n    l = []\n    for key in d.keys():\n        if d[key]:\n            l.append(key)\n    if len(l) == 0:\n        return '0'\n    return str(len(l)) + '\\n' +''.join(list(map(str, l)))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"5\n   ... 2 5 1 2 2\n   ... \"\"\")\n    3\n    >>> solution(\"\"\"4\n   ... 8 3 5 2\n   ... \"\"\")\n    0\n    >>> solution(\"\"\"5\n   ... 2 1 2 4 3\n   ... \"\"\")\n    0\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(n):\n        if sum(a) - a[i] in a[:i] + a[i + 1:]:\n            res += 1\n    print(res)\n    print(*[i + 1 for i in range(n) if sum(a) - a[i] in a[:i] + a[i + 1:]] or 0)\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None\n'''\nimport sys\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) time and O(N) space\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    if sum(a) % n!= 0:\n        return 0\n    prefix_sums = [0] * (n+1)\n    for i in range(n):\n        prefix_sums[i+1] = prefix_sums[i] + a[i]\n    nice = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (prefix_sums[j] - prefix_sums[i]) / (j - i) in nice:\n                nice.add(i)\n                break\n    return len(nice)\n    \nprint(solution(stdin))\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given an array $a$ consisting of $n$ integers. Your task is to print all indices $j$ of this array such that after removing the $j$-th element from the array it will be good (let's call such indices nice).\n\nFor example, if $a=[8, 3, 5, 2]$, the nice indices are $1$ and $4$:   if you remove $a_1$, the array will look like $[3, 5, 2]$ and it is good;  if you remove $a_4$, the array will look like $[8, 3, 5]$ and it is good. \n\nYou have to consider all removals independently, i. e. remove the element, check if the resulting array is good, and return the element into the array.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in the array $a$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^6$) \u2014 elements of the array $a$.\n\n\n-----Output-----\n\nIn the first line print one integer $k$ \u2014 the number of indices $j$ of the array $a$ such that after removing the $j$-th element from the array it will be good (i.e. print the number of the nice indices).\n\nIn the second line print $k$ distinct integers $j_1, j_2, \\dots, j_k$ in any order \u2014 nice indices of the array $a$.\n\nIf there are no such indices in the array $a$, just print $0$ in the first line and leave the second line empty or do not print it at all.\n\n\n-----Examples-----\nInput\n5\n2 5 1 2 2\n\nOutput\n3\n4 1 5\nInput\n4\n8 3 5 2\n\nOutput\n2\n1 4 \nInput\n5\n2 1 2 4 3\n\nOutput\n0\n\n\n\n\n-----Note-----\n\nIn the first example you can remove any element with the value $2$ so the array will look like $[5, 1, 2, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 1 + 2 + 2$).\n\nIn the second example you can remove $8$ so the array will look like $[3, 5, 2]$. The sum of this array is $10$ and there is an element equals to the sum of remaining elements ($5 = 3 + 2$). You can also remove $2$ so the array will look like $[8, 3, 5]$. The sum of this array is $16$ and there is an element equals to the sum of remaining elements ($8 = 3 + 5$).\n\nIn the third example you cannot make the given array good by removing exactly one element.\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2\\n1 2\\n\")\n    '0\\n1\\n'\n    >>> solution(\"2\\n1 1\\n\")\n    '0\\n0\\n'\n    >>> solution(\"4\\n8 3 5 2\\n\")\n    '2\\n1 4\\n'\n    >>> solution(\"5\\n2 1 2 4 3\\n\")\n    '0\\n1 4\\n'\n    '''\n   ...\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.split()\n    d = {}\n    for i in range(1, len(s)):\n        for j in range(len(s)):\n            if j + i > n:\n                break\n            else:\n                if s[j:j + i] in d:\n                    d[s[j:j + i]] += 1\n                else:\n                    d[s[j:j + i]] = 1\n    d_items = d.items()\n    d_items_sorted = sorted(d_items, key=lambda x: x[1], reverse=True)\n    if d_items_sorted[0][1] < k:\n        return -1\n    else:\n        ans = 0\n        for key, value in d_items_sorted:\n            if value >= k:\n                ans += n - (value - k)\n        return ans"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Args:\n        stdin: str.\n    Returns:\n        str: str.\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin\n    cost = 0\n    for i in range(n):\n        if s[i] in s[:i]:\n            continue\n        else:\n            cost += len(s[:i]) - (s[:i].count(s[i]))\n            s = s.replace(s[i], \"\")\n            cost += len(s[:i])\n            if len(s[:i]) >= k:\n                break\n            s = s.replace(s[i], \"\")\n            cost += len(s[:i])\n            if len(s[:i]) >= k:\n                break\n    if len(s) >= k:\n        return cost\n    return -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    str = stdin\n    S = set()\n    cost = 0\n    i = 0\n    while len(S) < k:\n        if i < len(str) and str[i] not in S:\n            S.add(str[i])\n            cost += len(S) - len(S.intersection(set(str[:i])))\n        i += 1\n\n    if len(S)!= k:\n        print(-1)\n    else:\n        print(cost)\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Modify the code below\n    return \"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(1000000)\n    n, k = [int(i) for i in stdin.split(' ')]\n    s = stdin[0:n]\n    if k == 1:\n        print(0)\n        return\n    memo = {}\n    def dp(s, k):\n        key = str(s) + str(k)\n        if key in memo:\n            return memo[key]\n        if len(s) == 0:\n            return k\n        if k < 0:\n            return sys.maxsize\n        min_cost = sys.maxsize\n        for i in range(len(s)):\n            t = s[:i] + s[i + 1:]\n            min_cost = min(min_cost, dp(t, k - 1))\n        memo[key] = min_cost\n        return min_cost\n    print(dp(s, k))\n    return\n\n\n\"\"\"\ndp[s][k] = min(dp[s'][k], dp[s][k - 1] + 1)\ndp[s'][k] = min(dp[s'][k], dp[s][k - 1] + len(s) - k)\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length, set_length = map(int, stdin.split())\n    string = stdin[len(stdin) - length:]\n    min_cost = float('inf')\n    for i in range(length):\n        for j in range(i + 1, length):\n            if string[i] not in string[j:]:\n                min_cost = min(min_cost, j - i)\n    if min_cost!= float('inf'):\n        return min_cost\n    return -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum cost to obtain a set of the given size.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: The minimum cost or -1 if it's impossible to obtain a set of the given size.\n    \"\"\"\n    n, k = (int(x) for x in stdin.split())\n    s = stdin[0:n]\n    k -= 1\n    if k < 0:\n        return -1\n    subseqs = set()\n    subseqs.add('')\n    cost = 0\n    for i in range(0, n - 1):\n        cost += 1\n        subseqs_new = set()\n        for seq in subseqs:\n            for i in range(0, n - i - 1):\n                new_seq = seq + s[i:i + i + 1]\n                subseqs_new.add(new_seq)\n        subseqs = subseqs_new\n        if len(subseqs) > k:\n            return cost\n    return -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    num_vertices, num_edges, required_degree = [int(x) for x in stdin.split(' ')]\n\n    # Create a dict for the graph\n    graph = dict()\n\n    # Add the edges to the graph\n    for i in range(num_edges):\n        vertex_1, vertex_2 = [int(x) for x in stdin.split(' ')[2 * i: 2 * (i + 1)]]\n\n        # Add the edge if it doesn't exist\n        if vertex_1 not in graph:\n            graph[vertex_1] = [vertex_2]\n        elif vertex_2 not in graph[vertex_1]:\n            graph[vertex_1].append(vertex_2)\n\n        # Add the edge if it doesn't exist\n        if vertex_2 not in graph:\n            graph[vertex_2] = [vertex_1]\n        elif vertex_1 not in graph[vertex_2]:\n            graph[vertex_2].append(vertex_1)\n\n    # Now that we have the graph we can iterate through it to find a solution\n    for vertex in graph:\n        # Check if we have the required number of edges\n        if len(graph[vertex])!= required_degree:\n            continue\n\n        # Now we need to check if this is a valid solution\n        # We need to iterate through each vertex and see if we have a valid degree\n        is_valid = True\n        for vertex_2 in graph:\n            # If we don't have a valid degree we can ignore this\n            if len(graph[vertex_2])!= required_degree:\n                continue\n\n            # If this vertex has the required degree we need to make sure we don't find the same vertex in the second for loop\n            found_it = False\n            for vertex_3 in graph:\n                if vertex_2 == vertex_3:\n                    continue\n\n                if vertex in graph[vertex_3]:\n                    found_it = True\n                    break\n\n            # If we didn't find a valid vertex we can ignore this\n            if found_it:\n                is_valid = False\n\n        if is_valid:\n            # We found a valid solution\n            print('YES')\n\n            # We print out the edges in the spanning tree\n            for vertex_2 in graph:\n                if len(graph[vertex_2])!= required_degree:\n                    continue\n\n                if vertex in graph[vertex_2]:\n                    print(vertex_2, vertex)\n\n            return\n\n    # We could not find a valid solution\n    print('NO')\n\n    return\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given an undirected unweighted connected graph consisting of $n$ vertices and $m$ edges. It is guaranteed that there are no self-loops or multiple edges in the given graph.\n\nYour task is to find any spanning tree of this graph such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$ (or say that there are no such spanning trees). Recall that the degree of a vertex is the number of edges incident to it.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $m$ and $D$ ($2 \\le n \\le 2 \\cdot 10^5$, $n - 1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2}), 1 \\le D < n$) \u2014 the number of vertices, the number of edges and required degree of the first vertex, respectively.\n\nThe following $m$ lines denote edges: edge $i$ is represented by a pair of integers $v_i$, $u_i$ ($1 \\le v_i, u_i \\le n$, $u_i \\ne v_i$), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ($v_i, u_i$) there are no other pairs ($v_i, u_i$) or ($u_i, v_i$) in the list of edges, and for each pair $(v_i, u_i)$ the condition $v_i \\ne u_i$ is satisfied.\n\n\n-----Output-----\n\nIf there is no spanning tree satisfying the condition from the problem statement, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line and then print $n-1$ lines describing the edges of a spanning tree such that the degree of the first vertex (vertex with label $1$ on it) is equal to $D$. Make sure that the edges of the printed spanning tree form some subset of the input edges (order doesn't matter and edge $(v, u)$ is considered the same as the edge $(u, v)$).\n\nIf there are multiple possible answers, print any of them.\n\n\n-----Examples-----\nInput\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n2 1\n2 3\n3 4\n\nInput\n4 5 3\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 3\n4 1\n\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe picture corresponding to the first and second examples: [Image]\n\nThe picture corresponding to the third example: [Image]\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\nprint(solution(input().split('\\n')))\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10:00\\n11:00\")\n    '10:30'\n    >>> solution(\"11:10\\n11:12\")\n    '11:11'\n    >>> solution(\"01:02\\n03:02\")\n    '02:02'\n    \"\"\"\n    # \u0412\u0441\u0435 \u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f\n    start, end = stdin.split('\\n')\n    s_h, s_m = start.split(':')\n    e_h, e_m = end.split(':')\n    return f'{(int(s_h) + int(e_h)) // 2}:{(int(s_m) + int(e_m)) // 2}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    start, end = stdin.split('\\n')\n    start_h, start_m = start.split(':')\n    end_h, end_m = end.split(':')\n    mid_h, mid_m = (int(end_h) + int(start_h)) // 2, (int(end_m) + int(start_m)) // 2\n    if int(mid_m) % 2 == 0:\n        mid_m = '00'\n    elif int(mid_m) % 2 == 1:\n        mid_m = '30'\n    print(f'{str(mid_h).zfill(2)}:{str(mid_m).zfill(2)}')\n    return solution\n\nsolution('10:00\\n11:00')\nsolution('11:10\\n11:12')\nsolution('01:02\\n03:02')\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split(' '))\n    c, d = map(int, stdin.split('\\n')[1].split(' '))\n    x = a * 60 + b\n    y = c * 60 + d\n    return str(a + (c // 2)) + ':' + str(b + (d // 2))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10:00\\n11:00')\n    '10:30'\n    >>> solution('11:10\\n11:12')\n    '11:11'\n    >>> solution('01:02\\n03:02')\n    '02:02'\n    \"\"\"\n    start, end = stdin.split('\\n')\n    start = start.split(':')\n    end = end.split(':')\n    return ':'.join(map(lambda x: str(int(x) + 1), divmod((int(end[0]) * 60 + int(end[1])) - (int(start[0]) * 60 + int(start[1])), 60)))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    a = a.split(':')\n    b = b.split(':')\n    a = int(a[0]), int(a[1])\n    b = int(b[0]), int(b[1])\n    if (a[0] < b[0]) or ((a[0] == b[0]) and (a[1] < b[1])):\n        a, b = b, a\n    if b[0] % 2 == 0:\n        b = (b[0], b[1] - 1)\n    else:\n        b = (b[0], b[1])\n    hours = a[0] + b[0]\n    minutes = a[1] + b[1]\n    if minutes >= 60:\n        hours += minutes // 60\n        minutes = minutes % 60\n    return str(hours) + \":\" + str(minutes)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(':'))\n    h2, m2 = map(int, stdin.split(':')[1:])\n\n    h1 = (h1 * 60) + m1\n    h2 = (h2 * 60) + m2\n\n    diff = h2 - h1\n\n    if diff % 2 == 0:\n        if h2 >= 12:\n            h3 = h2\n            m3 = (h2 - h1) // 2\n        else:\n            h3 = h2\n            m3 = (h2 - h1) // 2\n        if m3 % 2 == 0:\n            h3 = h3\n            m3 = m3\n        else:\n            h3 = h3 + 1\n            m3 = (h2 - h1) // 2 + 1\n\n    else:\n        h3 = h1\n        m3 = (h2 - h1) // 2 + 1\n\n    if m3 < 10:\n        m3 = '0' + str(m3)\n    else:\n        m3 = str(m3)\n\n    if h3 < 10:\n        h3 = '0' + str(h3)\n    else:\n        h3 = str(h3)\n\n    return h3 + ':' + m3\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10:00\\n11:00')\n    '10:30'\n    >>> solution('11:10\\n11:12')\n    '11:11'\n    >>> solution('01:02\\n03:02')\n    '02:02'\n    \"\"\"\n    start, end = stdin.split('\\n')\n    start = tuple(map(int, start.split(':')))\n    end = tuple(map(int, end.split(':')))\n    start_hour = start[0] * 60 + start[1]\n    end_hour = end[0] * 60 + end[1]\n    time = end_hour - start_hour\n    time = time // 2\n    h = time // 60\n    m = time % 60\n    h = h % 24\n    m = m % 60\n    return f'{h:02}:{m:02}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(' '))\n    h2, m2 = map(int, stdin.split(' '))\n    if (m1 % 2) == (m2 % 2):\n        h = (h1 + h2) // 2\n        m = (m1 + m2) // 2\n        return f'{h}:{m}'\n    else:\n        if m1 < m2:\n            h = h1\n            m = m1 + (m2 - m1) // 2\n            return f'{h}:{m}'\n        else:\n            h = h2\n            m = m2 + (m1 - m2) // 2\n            return f'{h}:{m}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(':')\n    h2, m2 = stdin.split(':')\n    h1, m1, h2, m2 = int(h1), int(m1), int(h2), int(m2)\n    # h1_h2 = h1 + h2\n    # h1_m2 = m1 + m2\n    h1_h2 = h1 + h2 + 1\n    h1_m2 = m1 + m2 + 1\n    #\n    # if h1_h2 % 2 == 0:\n    #     h1_h2 = h1_h2 // 2\n    # else:\n    #     h1_h2 = h1_h2 // 2\n    #     h1_h2 = h1_h2 + 1\n    #\n    # if h1_m2 % 2 == 0:\n    #     h1_m2 = h1_m2 // 2\n    # else:\n    #     h1_m2 = h1_m2 // 2\n    #     h1_m2 = h1_m2 + 1\n\n    h1_h2 = h1_h2 // 2\n    h1_m2 = h1_m2 // 2\n    if h1_h2 % 2 == 0:\n        h1_h2 = h1_h2\n    else:\n        h1_h2 = h1_h2 + 1\n\n    if h1_m2 % 2 == 0:\n        h1_m2 = h1_m2\n    else:\n        h1_m2 = h1_m2 + 1\n\n    print(h1_h2, h1_m2)\n\n    return f'{h1_h2}:{h1_m2}'\n\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def parse(time: str) -> (int, int):\n        h, m = time.split(\":\")\n        return int(h), int(m)\n\n    start = parse(stdin.split(\"\\n\")[0])\n    end = parse(stdin.split(\"\\n\")[1])\n\n    start_hour, start_minute = start\n    end_hour, end_minute = end\n\n    start_minute = (start_minute + 30) % 60\n    end_minute = (end_minute + 30) % 60\n\n    if end_minute > start_minute:\n        end_hour += 1\n\n    if end_hour > start_hour:\n        end_hour = 0\n\n    return \"{:02d}:{:02d}\".format(end_hour, end_minute)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'a' if int(stdin) == 1 else 'b'\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    return sum([1 if x % 2 == 1 else 0 for x in range(1, num + 1)])\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\")\n    1\n    >>> solution(\"4\")\n    2\n    >>> solution(\"27\")\n    5\n    >>> solution(\"42\")\n    6\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    TODO: come up with a solution\n    \"\"\"\n    return \"\""
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'*int(stdin)"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    segments = []\n    for line in stdin.split('\\n'):\n        l, r = map(int, line.split())\n        segments.append((l, r))\n\n    segments.sort(key=lambda x: x[1])\n\n    length = 0\n    for i in range(len(segments)):\n        length = max(length, segments[i][0] - segments[i - 1][1])\n\n    return length\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The goal is to calculate the intersection of every two segments. If there is no intersection, return an empty set.\n\n    The answer is calculated by finding the max length intersection.\n    \"\"\"\n\n    line_num = int(stdin.split(\"\\n\")[0])\n    segments = [tuple(map(int, line.split())) for line in stdin.split(\"\\n\")[1:]]\n\n    intersections = set()\n\n    for idx, segment in enumerate(segments):\n        if idx == line_num - 1:\n            break\n        left, right = segment\n        for next_segment in segments[idx + 1 :]:\n            next_left, next_right = next_segment\n            if left < next_left < right < next_right:\n                intersections.add(left)\n                intersections.add(next_left)\n\n    return max(intersections) if intersections else 0\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the longest intersection\"\"\"\n    # your code here\n    return str(solution())\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 3\n   ... 2 6\n   ... 0 4\n   ... 3 3''')\n    1\n    >>> solution('''5\n   ... 2 6\n   ... 1 3\n   ... 0 4\n   ... 1 20\n   ... 0 4''')\n    2\n    >>> solution('''3\n   ... 4 5\n   ... 1 2\n   ... 9 20''')\n    0\n    >>> solution('''2\n   ... 3 10\n   ... 1 5\n   ... 0 4''')\n    7\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(x) for x in stdin.split('\\n')[1:]]\n    segments = [stdin[i:i + 2] for i in range(0, len(stdin), 2)]\n\n    segments.sort()\n    segments.sort(key=lambda x: x[1])\n\n    prev_s, max_len, max_start, max_end = segments[0], 0, 0, segments[0][0]\n    for s in segments:\n        start, end = s\n        if start > prev_s[1]:\n            prev_s = s\n            if max_len < end - start:\n                max_len = end - start\n                max_start, max_end = start, end\n\n        if start < prev_s[0]:\n            prev_s = s\n            if max_len < end - start:\n                max_len = end - start\n                max_start, max_end = start, end\n\n    return str(max_len)\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds out the maximum intersection length.\n\n    Args:\n        stdin: The input string.\n\n    Returns:\n        The maximum intersection length.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ..."
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(n) for n in stdin.split()]\n    #print(arr)\n    dp = [[1, 1]]\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            dp.append([arr[i], dp[i-1][1]+1])\n        else:\n            dp.append([arr[i], 1])\n    print(dp)\n    return \"YES\" if arr[0] == dp[n-1][0] and dp[n-1][1] == n else \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve solution\"\"\"\n    \n    return ''"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split('\\n')))\n    n = stdin[0]\n    a = stdin[1:]\n    b = a.copy()\n    c = a.copy()\n    d = a.copy()\n    e = a.copy()\n    f = a.copy()\n    g = a.copy()\n    h = a.copy()\n    i = a.copy()\n    j = a.copy()\n    k = a.copy()\n    m = a.copy()\n    n = a.copy()\n    o = a.copy()\n    p = a.copy()\n    q = a.copy()\n    r = a.copy()\n    s = a.copy()\n    t = a.copy()\n    u = a.copy()\n    v = a.copy()\n    w = a.copy()\n    x = a.copy()\n    y = a.copy()\n    z = a.copy()\n    for j in range(n):\n        if j == 0:\n            b[j] = max(b[j], a[j + 1])\n            c[j] = max(c[j], a[j + 2])\n        elif j == n - 1:\n            d[j] = max(d[j], a[j - 1])\n            e[j] = max(e[j], a[j - 2])\n        else:\n            f[j] = max(f[j], a[j - 1])\n            g[j] = max(g[j], a[j - 2])\n            h[j] = max(h[j], a[j + 1])\n            i[j] = max(i[j], a[j + 2])\n    if b == c == d == e == f == g == h == i == a:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    nums = list(map(int, stdin.split()[1:]))\n    print(f\"nums: {nums}\")\n    s = sum(nums)\n    print(f\"s: {s}\")\n    print(f\"s < 2 * n: {s < 2 * n}\")\n    return \"YES\" if s < 2 * n else \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds out if Vova can complete the wall using any amount of bricks\n    (possibly zero).\n\n    >>> solution(\"5\\n2 1 1 2 5\\n\")\n    'YES'\n    >>> solution(\"3\\n4 5 3\\n\")\n    'NO'\n    >>> solution(\"2\\n10 10\\n\")\n    'YES'\n    '''\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().strip().split(' ')))\n    m = int(stdin.readline())\n    bricks = 0\n    while m > 0:\n        bricks += m // 2\n        m -= m // 2\n    return 'YES' if heights == sorted(heights) and bricks >= n - 2 else 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def isValid(arr: List[int]) -> bool:\n        if 0 in arr: return False\n        for i in range(0, len(arr) - 1):\n            if arr[i] == arr[i + 1]: continue\n            if arr[i] < arr[i + 1]: return False\n        return True\n\n    def findSolution(n: int, arr: List[int]) -> str:\n        s = sum(arr)\n        left = 1\n        right = s\n        while left <= right:\n            mid = (left + right) // 2\n            if isValid(arr + [mid]):\n                left = mid + 1\n            else:\n                right = mid - 1\n        return 'YES' if isValid(arr + [left]) else 'NO'\n    \n    n = int(stdin.readline().strip())\n    arr = [int(num) for num in stdin.readline().strip().split(' ')]\n    print(findSolution(n, arr))\n\nsolution(stdin)"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 5\\najihiushda')\n    4\n    >>> solution('5 6\\naaaaa')\n    15\n    >>> solution('5 7\\naaaaa')\n    -1\n    >>> solution('10 100\\najihiushda')\n    233\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    S = set()\n    for x in stdin:\n        S.add(x)\n    \n    if len(S) < k:\n        print(-1)\n        return\n    \n    cost = 0\n    for x in S:\n        cost += n - len(x)\n    print(cost)"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    dp = [[None for _ in range(n + 1)] for _ in range(k + 1)]\n    if n == 0:\n        return 0\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            if s[j - 1] == s[i - 1] and (dp[i - 1][j - 1] is None or dp[i - 1][j - 1] >= dp[i][j]):\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i][j - 1] if s[j - 1] == s[i - 1] else dp[i - 1][j]\n    return dp[k][n]\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(' ')]\n    S = [set(stdin.split(' ')[i]) for i in range(N)]\n    d = {}\n    for i in range(N):\n        for j in range(N):\n            t = list(S[i])\n            t[j] = 'a'\n            t = set(t)\n            if t in d.keys():\n                d[t] += 1\n            else:\n                d[t] = 1\n    m = 1000000000\n    for s in d.keys():\n        if len(s) == K:\n            m = min(m, d[s])\n    if m == 1000000000:\n        print(-1)\n        return\n    print(N * (N - K) - sum(d.values()))\n    return"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    s = stdin.split('\\n')[0]\n    \n    # For each element in the list\n    for c in s:\n        # Add the element to the list, if it is not there already\n        if c not in ss:\n            ss.add(c)\n\n    # If the length of the list is less than the required length, return -1\n    if len(ss) < k:\n        return -1\n\n    # Otherwise, return the cost\n    return n - len(ss)\n\n\"\"\"\n\nfrom itertools import combinations\nfrom math import inf\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get n, k\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    \n    # Get string\n    s = stdin[stdin.index('\\n') + 1 : ]\n\n    # Get set\n    s = set(s)\n    \n    # Get price\n    price = n - len(s)\n\n    # Check if impossible\n    if price < 0:\n        print(-1)\n        return\n\n    # Check if possible\n    if k > len(s):\n        print(price)\n        return\n\n    # Get set\n    s = set()\n\n    # Make a set of all possible moves\n    for i in range(len(s)):\n        for j in range(len(s)):\n            s.add(s[i : j])\n\n    # Sort\n    s = sorted(s, key = lambda x : len(x), reverse = True)\n\n    # Check if we can do anything\n    for i in range(len(s) - k + 1):\n        for j in range(i + 1, i + k):\n            if len(s[j] - s[i]) == price:\n                print(len(s[i]))\n                return\n    \n    print(-1)\n    return\n\nsolution(input())\n\n\"\"\"\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 7\n   ... aaaaa\n   ... ''')\n    '233'\n\n    >>> solution('''5 6\n   ... aaaaa\n   ... ''')\n    '15'\n\n    >>> solution('''4 5\n   ... asdf\n   ... ''')\n    '4'\n    \"\"\"\n    s = stdin.split('\\n')[1].strip()\n    k, n = [int(i) for i in s.split()]\n    subsequences = {}\n    for i in range(k):\n        subsequences[i] = set()\n    s = s.split('\\n')[1].strip()\n    cost = 0\n    for i, char in enumerate(s):\n        cost += i\n        for j in range(k):\n            subsequences[j].add(char)\n        if len(subsequences[j]) == k:\n            cost += (n - i)\n            j += 1\n            if j == k:\n                break\n            subsequences[j] = set()\n            cost -= (n - i)\n    if k == 1:\n        return cost\n    if min(subsequences.values(), key=lambda x: len(x)) == {char for char in s}:\n        return cost\n    return -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin\n    l = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            l.append(s[i:j])\n    l.sort()\n    l.pop(0)\n    r = 0\n    for i in l:\n        if len(i)!= n - k:\n            r += n - len(i)\n    if r < 0:\n        return '-1'\n    else:\n        return str(r)\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j] + i, dp[i][j - 1] + j)\n    if dp[n][k] == n:\n        print(-1)\n    else:\n        print(dp[n][k])\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        n, k = map(int, stdin.split())\n        s = stdin.split()[1]\n        k -= 1\n\n        cost = [0] * n\n        for i in range(n):\n            if i > 0:\n                cost[i] = cost[i - 1] + abs(ord(s[i]) - ord(s[i - 1]))\n            else:\n                cost[i] = abs(ord(s[i]) - ord(s[i - 1]))\n\n        # cost = [0] * n\n        # for i in range(n):\n        #     if i > 0:\n        #         cost[i] = cost[i - 1] + abs(ord(s[i]) - ord(s[i - 1]))\n        #     else:\n        #         cost[i] = abs(ord(s[i]) - ord(s[i - 1]))\n        #     cost[i] = cost[i] if i == 0 else cost[i] + abs(ord(s[i]) - ord(s[i - 1]))\n\n        # cost = [0] * n\n        # for i in range(n):\n        #     if i > 0:\n        #         cost[i] = cost[i - 1] + abs(ord(s[i]) - ord(s[i - 1]))\n        #     else:\n        #         cost[i] = abs(ord(s[i]) - ord(s[i - 1]))\n        #     if i == 0:\n        #         cost[i] = cost[i] + abs(ord(s[i]) - ord(s[i - 1]))\n\n        # dp[i][j] = minimum cost with j elements and cost[i] of the first element, if we choose s[i] as the first element\n        dp = [[0] * (k + 1) for _ in range(n)]\n        for i in range(n):\n            dp[i][0] = cost[i]\n\n        for i in range(1, n):\n            for j in range(1, k + 1):\n                dp[i][j] = min(dp[i - 1][j], cost[i] + dp[i - 1][j - 1])\n\n        return dp[n - 1][k] if dp[n - 1][k] < sys.maxsize else -1\n\n    return solve()\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(' ')]\n    if a < b:\n        a, b = b, a\n    if b < c:\n        b, c = c, b\n    if a < b:\n        a, b = b, a\n    return str(a + b + c - 1)\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    return str(max(0, ceil((max(a, b, c) - 1) / 7)))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return max(a // 2, b // 2 + (a % 2), c // 2 + (a % 2))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    t = [[0] * 8] * 5\n    t[0][0] = a\n    t[0][1] = b\n    t[0][2] = c\n\n    for i in range(1, 5):\n        t[i][0] = t[i - 1][1] + t[i - 1][2]\n        t[i][1] = max(t[i - 1][0], t[i - 1][2])\n        t[i][2] = max(t[i - 1][1], t[i - 1][0])\n\n    for i in range(5, 8):\n        t[i][0] = max(t[i - 1][1] + t[i - 1][2], t[i - 5][0] + t[i - 5][2])\n        t[i][1] = t[i - 1][0]\n        t[i][2] = t[i - 1][1]\n\n    return max(t[-1][1], t[-1][2])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(' ')\n    num_food = [int(x) for x in nums]\n    max_days = 2 * num_food[0] // num_food[1] + 1\n    if num_food[2] % num_food[0] == 0:\n        max_days -= 1\n    print(max_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a, b, c = map(int, stdin.split())\n    print(max(0, (max(0, 7 * c - 2 * a) - max(0, 3 * b - a)) // (a - b)))\n    return \"\"\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_internal(stdin))\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"heckno\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(\" \")]\n    fish, rabbit, chicken = a, b, c\n    d = 2\n    day = 1\n    while chicken > 0:\n        fish += a\n        rabbit += b\n        chicken += c\n        if fish >= fish_food and rabbit >= rabbit_stew and chicken >= chicken_stakes:\n            break\n        if day % 3 == 0:\n            chicken -= 1\n        else:\n            if day % 3 == 1:\n                fish -= 1\n            else:\n                rabbit -= 1\n        day += 1\n    return day\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # I used the following approach:\n    # 1. I need to find all tiles that can be placed in the square.\n    # 2. Since we know that each tile should be covered with exactly one cell, we can ignore them.\n    # 3. I used the following function to find all tiles that can be placed:\n    #   a. This function returns a list of all possible pairs of tiles, where each pair is represented by the tuple of its tiles.\n    #   b. I will try to construct the square with the minimal number of tiles.\n    # 4. I will try to construct the square that is symmetric with respect to the main diagonal.\n    #   a. This means that each element in the matrix should have exactly the same value on both the diagonal and on the anti-diagonal.\n    #   b. I will try to construct the square with the minimal number of tiles.\n    #   c. If the square is symmetric, I will try to find the minimal size of the square.\n\n    stdin = stdin.split('\\n')\n    n, m = list(map(int, stdin.pop(0).split()))\n    tiles = []\n    for i in range(0, n * 2, 2):\n        tiles.append(list(map(int, stdin.pop(0).split())))\n\n    def find_pairs(tiles: list) -> list:\n        pairs = []\n        for i in range(len(tiles)):\n            for j in range(i + 1, len(tiles)):\n                pairs.append((tiles[i], tiles[j]))\n        return pairs\n\n    def construct_square(tiles: list, pairs: list, side: int) -> bool:\n        # The square is symmetric. Each element in the matrix should have exactly the same value on both the diagonal and on the anti-diagonal.\n        # This function checks if the square is symmetric in the first place, and then checks if its symmetric with respect to the main diagonal.\n        # If none of these is true, then I will try to construct the square with the minimal number of tiles.\n        # If the square is symmetric, I will try to find the minimal size of the square.\n        matrix = [[0 for _ in range(side)] for _ in range(side)]\n\n        for i in range(side):\n            for j in range(side):\n                # The tile is symmetric with respect to the main diagonal.\n                matrix[i][j] = matrix[j][i] = pairs[i][j]\n        # The square is symmetric. Each element in the matrix should have exactly the same value on both the diagonal and on the anti-diagonal.\n        if not check_symmetric(matrix):\n            return False\n        # The square is symmetric with respect to the main diagonal.\n        if not check_symmetric_with_main_diagonal(matrix):\n            return False\n        # The square is symmetric with respect to the main diagonal.\n        if not check_symmetric_with_anti_diagonal(matrix):\n            return False\n        # The square is symmetric with respect to the main diagonal.\n        if not check_symmetric_with_anti_diagonal_2(matrix):\n            return False\n        # The square is symmetric with respect to the main diagonal.\n        if not check_symmetric_with_anti_diagonal_3(matrix):\n            return False\n        # The square is symmetric with respect to the main diagonal.\n        if not check_symmetric_with_anti_diagonal_4(matrix):\n            return False\n        # The square is symmetric with respect to the main diagonal.\n        if not check_symmetric_with_anti_diagonal_5(matrix):\n            return False\n        # The square is symmetric with respect to the main diagonal.\n        if not check_symmetric_with_anti_diagonal_6(matrix):\n            return False\n        # The square is symmetric with respect to the main diagonal.\n        if not check_symmetric_with_anti_diagonal_7(matrix):\n            return False\n        return True\n\n    def check_symmetric(matrix: list) -> bool:\n        # Checks if the square is symmetric.\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                if matrix[i][j]!= matrix[j][i]:\n                    return False\n        return True\n\n    def check_symmetric_with_main_diagonal(matrix: list) -> bool:\n        # Checks if the square is symmetric with respect to the main diagonal.\n        for i in range(len(matrix)):\n            for j in range(len(matrix)):\n                if matrix[i][j]!= matrix[i][-1 - j]:\n                    return False\n        return True"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().rstrip())\n    for i in range(cases):\n        n, m = map(int, stdin.readline().rstrip().split())\n        arr = []\n        for i in range(n):\n            arr.append(list(map(int, stdin.readline().rstrip().split())))\n\n        s = [[0 for j in range(m)] for i in range(m)]\n        visited = [[0 for j in range(m)] for i in range(m)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                s[i][j] = s[j][i] = arr[i][j] - arr[i][i] - arr[j][i]\n        \n        \n        def dfs(i, j):\n            if i == j:\n                return True\n            visited[i][j] = 1\n            for k in range(i, j):\n                if visited[i][k] == 0 and visited[k + 1][j] == 0 and s[i][j] == s[k + 1][j] == s[i][k + 1] == s[j][k] == 0:\n                    return dfs(i, k) and dfs(k + 1, j)\n            return False\n        \n        \n        for i in range(n):\n            for j in range(n):\n                if visited[i][j] == 0:\n                    print('YES' if dfs(i, j) else 'NO')\n                    break\n            else:\n                continue\n            break\n    return ''\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'YES'"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\n1 2\\n5 6\\n5 7\\n7 4\\n8 9\\n9 8\")\n    YES\n    >>> solution(\"2 2\\n1 1\\n1 1\")\n    NO\n    >>> solution(\"1 1\\n100\")\n    YES\n    >>> solution(\"10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\")\n    YES\n    >>> solution(\"10 10\\n10 10\\n1 2\\n4 5\\n8 4\\n2 2\\n1 1\\n1 1\\n1 2\")\n    NO\n    >>> solution(\"2 2\\n1 1\\n1 1\")\n    YES\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = map(int, stdin.readline().split())\n        matrix = []\n        for _ in range(2 * n):\n            line = list(map(int, stdin.readline().split()))\n            matrix.append(line)\n\n        for j in range(2 * n):\n            for k in range(j + 1, 2 * n):\n                if not (matrix[j][k] == matrix[k][j]):\n                    print(\"NO\")\n                    return\n        print(\"YES\")\n    return"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function returns True or False.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if Masha can construct a square of size m * m which is a symmetric matrix. Otherwise, return 'NO'.\"\"\"\n    # TODO: Write your code here\n    # n, m = tuple(map(int, stdin.readline().split()))\n    # tiles = []\n    # for i in range(2 * n):\n    #     tiles.append(list(map(int, stdin.readline().split())))\n    #\n    # for i in range(2 * n):\n    #     for j in range(i + 1, 2 * n):\n    #         if (tiles[i][0] == tiles[j][1] and tiles[i][1] == tiles[j][0]):\n    #             print(\"YES\")\n    #             return \"YES\"\n    # return \"NO\"\n    #\n    # n, m = tuple(map(int, stdin.readline().split()))\n    # tiles = []\n    # for i in range(2 * n):\n    #     tiles.append(list(map(int, stdin.readline().split())))\n    #\n    # # find bottom left\n    # for i in range(2 * n):\n    #     for j in range(i + 1, 2 * n):\n    #         if (tiles[i][0] == tiles[j][1] and tiles[i][1] == tiles[j][0]):\n    #             print(\"YES\")\n    #             return \"YES\"\n    # print(\"NO\")\n    # return \"NO\"\n\n    t = int(stdin.readline())\n    while t > 0:\n        n, m = tuple(map(int, stdin.readline().split()))\n        tiles = []\n        for i in range(2 * n):\n            tiles.append(list(map(int, stdin.readline().split())))\n\n        for i in range(2 * n):\n            for j in range(i + 1, 2 * n):\n                if (tiles[i][0] == tiles[j][1] and tiles[i][1] == tiles[j][0]):\n                    print(\"YES\")\n                    return \"YES\"\n        print(\"NO\")\n        return \"NO\"\n        t -= 1\n\n\nsolution(input())\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    input = input.split(\"\\n\")\n    n = int(input[0])\n    a = []\n    b = []\n    sum_a = 0\n    sum_b = 0\n    for i in range(1, n + 1):\n        a.append(int(input[i]))\n        sum_a += int(input[i])\n    for i in range(n + 1, 2 * n + 1):\n        b.append(int(input[i]))\n        sum_b += int(input[i])\n    sum_diff = abs(sum_a - sum_b)\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            temp = a[i] + a[j]\n            if temp > sum_diff:\n                break\n            if temp > sum_a - sum_b:\n                sum_diff = temp\n    return str(sum_diff)\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate minimum difference between sums of two sets\"\"\"\n    print(min([sum(list(map(int, i.split(' ')))) for i in stdin.split('\\n')]))\n    return ''\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N % 2 == 0:\n        print(0)\n    else:\n        print(1)\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # return 0\n    return 1\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(1 if n % 2 else 0)\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check(s: list) -> int:\n        s1 = 0\n        s2 = 0\n        for i in s:\n            if i % 2 == 0:\n                s1 += i\n            else:\n                s2 += i\n        return abs(s1 - s2)\n\n    n = int(stdin.readline())\n    s = [int(x) for x in stdin.readline().split()]\n    s.sort()\n    return str(check(s))\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_len = int(stdin)\n\n    if total_len == 1:\n        return 0\n\n    if total_len % 2 == 0:\n        return 1\n\n    return total_len % 2\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = set(map(int, stdin.readline().split()))\n    b = set(map(int, stdin.readline().split()))\n    return str(abs(sum(a) - sum(b)))\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    n = int(data[0])\n    seq = data[1]\n    ans = 0\n\n    for i in range(2 ** n):\n        count = 0\n        for j in range(len(seq)):\n            if (i >> j) & 1 == 1 and seq[j] == ')':\n                count += 1\n            elif (i >> j) & 1 == 1 and seq[j] == '(':\n                count -= 1\n            if count < 0:\n                break\n        if count == 0:\n            ans = (ans + 1) % 1000000007\n    return ans\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    n = int(stdin)\n    s = stdin.strip()\n    if n > 1:\n        return n * 4\n    return 0\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    string = stdin\n    \n    if string[0]!= '(' or string[-1]!= ')':\n        return 0\n    \n    if len(string) % 2:\n        return 0\n    \n    ans = 0\n    for i in range(2, len(string)):\n        ans += (string[0:i - 1] + '1' + '+' + string[i:] + '1' + '+' + string[0:i - 1] + '1')\n        ans %= 1000000007\n    \n    return ans\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    return f\"{nCr(n + 1, 2) * s.count('(') * s.count(')') % (10**9 + 7)}\"\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    length = int(data[0])\n    string = data[1]\n    count = 0\n    for i in range(length + 1):\n        for j in range(i, length):\n            count += 1 if (string[i:j + 1] in valid_parentheses(string[i:j + 1])) else 0\n    return str(count % (10 ** 9 + 7))\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    s = stdin\n    m = {'(': 1, ')': -1}\n    count = 0\n    for i in range(n):\n        count += m[s[i]]\n    if count == 0:\n        return 0\n    count = count % 1000000007\n    return count\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solve(S: str) -> int:\n        def partition(S: str) -> int:\n            # recursive top-down approach\n            # Time: O(n^3), Space: O(n^2)\n            def isValid(seq: str) -> bool:\n                stack = []\n                for c in seq:\n                    if c == ')':\n                        if not stack or stack.pop()!= '(':\n                            return False\n                    else:\n                        stack.append(c)\n                return not stack\n\n            def count(S: str, i: int, j: int) -> int:\n                if i > j:\n                    return 0\n                if i == j:\n                    return isValid(S[i:j+1])\n                # if i+1 == j:\n                #     return isValid(S[i:j+1])\n                result = 0\n                for k in range(i, j):\n                    if isValid(S[i:k+1]):\n                        result += count(S, i, k) * count(S, k+1, j)\n                return result % 1000000007\n\n            return count(S, 0, len(S)-1)\n\n        return partition(S)\n\n    stdin = stdin.strip().split('\\n')\n    n = int(stdin[0])\n    S = stdin[1]\n\n    return str(solve(S))\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        return\n    s = stdin[1:-1]\n    if len(s) > 200 or len(s) < 1:\n        return\n    res = 0\n    for i in range(len(s)-n+1):\n        if s[i] == \"(\" and s[i+n] == \")\":\n            res += 1\n    print(res % 1000000007)\n    return\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    count = 0\n    for n in range(n):\n        length = n\n        s = stdin.split()\n        count += count_brackets(s[0], length)\n\n    print(count % 1000000007)\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    x = (s * 2)[1:-1]\n    n = len(x)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i - 2, -1, -1):\n            if x[j: i] in x:\n                dp[i] += dp[j]\n                dp[i] %= 1000000007\n                break\n    return dp[n]\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    m = 1\n    while n%25!= 0:\n        m += 1\n        n = n+1\n    if n < 10**18:\n        return m\n    return '-1'"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns minimum number of moves to obtain a number that is divisible by 25.'''\n    n = int(stdin)\n    count = 0\n    for x in range(n, 1000000000):\n        n = get_next_number(n)\n        if n % 25 == 0:\n            count += 1\n    if count == 0:\n        return '-1'\n    return count\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 25 or n % 25 == 0:\n        print(0)\n\n    nums = [i for i in str(n)]\n    s = set()\n    moves = 0\n    while moves <= 20:\n        moves += 1\n        #print(nums, s)\n        if nums in s:\n            print(-1)\n            break\n        if not nums:\n            print(moves)\n            break\n        if nums[0] == \"0\":\n            nums = nums[1:]\n            continue\n        nums = swap(nums, 0)\n        s.add(tuple(nums))\n    else:\n        print(-1)\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\nsys.path.insert(1, '../')\nfrom helper_functions import format_array, generate_all_sequences, timed, strip\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TC: O(N) | SC: O(1)\n    >>> solution(\"5071\")\n    4\n    >>> solution(\"705\")\n    1\n    >>> solution(\"1241367\")\n    -1\n    \"\"\"\n    stdin = int(stdin)\n    moves = 0\n    while stdin % 25!= 0:\n        max_digit = max(stdin)\n        max_digit_position = stdin.index(max_digit)\n        stdin = stdin // 10\n        stdin += stdin % 10 * 10 ** max_digit_position\n        moves += 1\n    return moves if stdin % 25 == 0 else -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom typing import List\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    return str(int(stdin) * math.ceil(int(stdin) / 25))\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def print(solution):\n        print(len(solution))\n        print(' '.join(map(str, solution)))\n\n    s = list(stdin)\n    res = 1\n    tmp = []\n    for i in range(len(s)):\n        if i == 0:\n            tmp.append(res)\n        else:\n            if s[i]!= s[i - 1]:\n                res += 1\n            tmp.append(res)\n    print(res)\n    print(' '.join(map(str, tmp)))\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    c = [None] * n\n    r = 0\n    for i in range(n):\n        if not c[i] or c[i]!= s[i]:\n            c[i] = r\n            r += 1\n    res = 0\n    for i in range(n - 1):\n        if c[i] == c[i + 1]:\n            res += 1\n    print(res)\n    print(' '.join([str(i + 1) for i in c]))\n    return ''\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n,s=map(str,stdin.split(\"\\n\"))\n    s=sorted(s)\n    s_set=set(s)\n    d={}\n    for i in s_set:\n        d[i]=s.count(i)\n    l=[]\n    for i in d:\n        l.append(d[i])\n    l.sort()\n    l=list(set(l))\n    l.sort(reverse=True)\n    c=[]\n    for i in l:\n        c.append(s.count(i))\n    c.sort()\n    \n    c=list(set(c))\n    c.sort(reverse=True)\n    ans=0\n    for i in range(len(c)):\n        for j in range(i+1,len(c)):\n            if c[i]+c[j]==len(s):\n                print(i+1,j+1)\n                return\n    return\nprint(solution(stdin))"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin))\n    a = collections.Counter(stdin)\n    print(a)\n    return stdin\n\nsolution(solution('abacbecfd'))\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    coloring = list(map(int, stdin.readline().split()))\n    res = 0\n    new_coloring = [0] * n\n    new_coloring[0] = coloring[0]\n    for i in range(1, n):\n        if coloring[i] == new_coloring[i - 1]:\n            new_coloring[i] = new_coloring[i - 1]\n        else:\n            new_coloring[i] = new_coloring[i - 1] + 1\n            res = max(res, new_coloring[i])\n    print(res)\n    print(' '.join(map(str, new_coloring)))\n    return ''\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = [0] * n\n    colors = set()\n    for i in range(n):\n        if i % 2:\n            s[i] = min(colors)\n            colors.discard(min(colors))\n        else:\n            s[i] = max(colors)\n            colors.add(max(colors))\n    return''.join([str(x) for x in s])\n    \n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\"\"\"\n\n\nfrom collections import Counter\nfrom math import ceil\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    res = 0\n    for i in range(1, n):\n        if string[i] == string[i-1]:\n            res += 1\n    return res"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin)\n    n = len(stdin)\n    i = 0\n    res = 1\n    while i < n:\n        if stdin[i] == stdin[i + 1]:\n            i += 2\n            res += 1\n        else:\n            if res >= n:\n                break\n            i += 1\n            res += 1\n    return res\nsolution(stdin)\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return 1\n\n    min_color, max_color = 1, int(len(stdin) / 2)\n\n    while min_color <= max_color:\n        mid = (min_color + max_color) // 2\n\n        current = {}\n        current_color = 1\n\n        for i in range(len(stdin)):\n            if current_color not in current.keys():\n                current[current_color] = [i]\n            else:\n                current[current_color].append(i)\n\n            if stdin[i] not in current.keys():\n                current[stdin[i]] = [i]\n            else:\n                current[stdin[i]].append(i)\n\n            current_color = current_color ^ 1 if current_color == mid else current_color\n\n        if current_color!= 1:\n            current_color = 1\n\n        if len(current) < mid:\n            max_color = mid - 1\n        elif len(current) > mid:\n            min_color = mid + 1\n        else:\n            return mid\n\n    return min_color\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn = int(stdin.readline())\n\nstrings = []\nfor i in range(n):\n    strings.append(stdin.readline().strip())\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # return \"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    for i in range(0, n):\n        strings.append(stdin)\n    return [s for s in strings if all(s in t for t in strings if t!= s)]\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'YES' if len(stdin) > 1 else 'NO'\n    \n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_strs = int(stdin.readline())\n    strs = stdin.readline().split()\n    t = sorted(strs)\n    while len(t) > 1:\n        t.pop(0)\n        t = sorted(t)\n        if t[0] in strs[:strs.index(t[0])]:\n            t = sorted(t, reverse=True)\n            t.insert(0, strs[strs.index(t[0])])\n            strs.pop(strs.index(t[0]))\n        else:\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(strs)\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # You can write to stdout for debugging purposes, e.g.\n    # print(f\"this is a debug message\")\n    \n    N = int(stdin.split('\\n')[0])\n    arr = stdin.split('\\n')[1:N+1]\n    \n    arr.sort()\n    \n    if N == 1:\n        print(\"YES\")\n        print(arr[0])\n        return\n    else:\n        i = 0\n        while i < len(arr):\n            if arr[i] == arr[i+1]:\n                del arr[i]\n            else:\n                i += 1\n        \n        if len(arr) == 1:\n            print(\"YES\")\n            print(arr[0])\n            return\n        else:\n            print(\"NO\")\n            return\n            \n    \n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    assert len(lines) == int(lines[0])\n    result = 'YES'\n    for i in range(1, len(lines)):\n        if lines[i] not in lines[:i]:\n            result = 'NO'\n            break\n    return result\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(stdin))\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(len(stdin)):\n        if i == len(stdin):\n            break\n        if stdin[i] in stdin[i+1:]:\n            return 'NO'\n    return 'YES'\n\n    \n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = list(map(int, stdin.split(' ')))\n    arr = list(map(int, stdin.split(' ')))\n    left = 0\n    right = len(arr) - 1\n    result = 0\n    while True:\n        if left > right:\n            break\n        if k >= arr[left]:\n            result += 1\n            left += 1\n        elif k >= arr[right]:\n            result += 1\n            right -= 1\n        else:\n            break\n    return result\n    \n    \n    "
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn, k = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\n\ncnt = 0\nwhile k in a:\n    a.remove(k)\n    cnt += 1\n\nprint(cnt)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    diff = [int(i) for i in stdin.split()]\n    diff.sort()\n    mishka = 0\n    while len(diff) > 0 and len(diff) > mishka:\n        if diff[0] <= k:\n            mishka += 1\n            diff.pop(0)\n        if diff[len(diff) - 1] <= k:\n            mishka += 1\n            diff.pop()\n    return mishka"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    n, k = [int(i) for i in stdin.split()]\n    arr = [int(i) for i in stdin.split()]\n    left = []\n    right = []\n    left = arr\n    right = arr\n    for i in range(k):\n        left = left[1:] + [left[0]]\n        right = right[:-1] + [right[-1]]\n        if sum(left) > sum(right):\n            right = right[1:] + [right[0]]\n    return len(left)+len(right)"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, k):\n        i = 0\n        j = len(a) - 1\n        while i <= j:\n            if a[i] > k:\n                i += 1\n            elif a[j] > k:\n                j -= 1\n            else:\n                return [i, j]\n\n    n, k = [int(c) for c in stdin.split()]\n    a = [int(c) for c in stdin.split()[1:]]\n    return str(solve(a, k)[1] - solve(a, k)[0] + 1)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    i = 0\n    j = n - 1\n    solved = 0\n    while i < n and j >= 0:\n        if a[i] <= k:\n            solved += 1\n            i += 1\n        elif a[j] <= k:\n            solved += 1\n            j -= 1\n    return solved\n\nprint(solution(input()))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split(' '))\n    nums = sorted(map(int, stdin.split(' ')))\n    left, right = 0, len(nums) - 1\n    res = 0\n    while left < right:\n        if nums[left] + nums[right] <= k:\n            res += 1\n            right -= 1\n            left += 1\n        else:\n            res += 1\n            left += 1\n    return res"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_problems, k = [int(n) for n in stdin.split()]\n    problems = [int(n) for n in stdin.split()]\n    solved = 0\n    i = 0\n    while True:\n        if problems[i] > k:\n            break\n        solved += 1\n        problems = problems[1:]\n        if len(problems) == 1:\n            break\n    return solved"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    difficulties = list(map(int, stdin.split()))\n    max_difficulty = max(difficulties)\n    while max_difficulty > k:\n        difficulties.pop(difficulties.index(max_difficulty))\n        max_difficulty = max(difficulties)\n    return str(len(difficulties))"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    difficulty = list(map(int, stdin.split()))\n    i = 0\n    j = n - 1\n    solved = 0\n    while i < j:\n        if difficulty[i] > k and difficulty[j] > k:\n            break\n        elif difficulty[i] <= k and difficulty[j] > k:\n            solved += j\n            j -= 1\n        elif difficulty[i] > k and difficulty[j] <= k:\n            solved += n - i\n            i += 1\n        else:\n            solved += n\n            break\n    return str(solved)"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b * (4 * max(a, b) - min(a, b) + 1))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(max(0, a + b) * 2)\n\nprint(solution('4 4'))\nprint(solution('3 9'))\nprint(solution('9 3'))\nprint(solution('3 6'))\nprint(solution('506 2708'))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"12\"\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split(\" \")]\n    return str(max(A + B, 2 * (A + B)))\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a * b\n    \n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(max(a, b) * 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    res = float(\"inf\")\n    if b % a == 0:\n        res = a * b\n    else:\n        for x in range(1, b // a + 1):\n            r = b // a - x + 1\n            b2 = b - (r * a)\n            if b2 % r == 0:\n                res = min(res, x * a + b2)\n                break\n    return str(res)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    min_perimeter = a + b\n    min_area = a * b\n    for x in range(1, a + b):\n        for y in range(1, a + b):\n            if a * x + b * y > min_perimeter:\n                break\n            if a * x + b * y == min_perimeter:\n                if a * x * x + b * y * y == min_area:\n                    return str(a * x * y)\n                elif a * x * x + b * y * y < min_area:\n                    min_area = a * x * x + b * y * y\n                    min_perimeter = a * x + b * y\n    return str(min_perimeter)\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(max(a * b, (a + b) * 2 - 1))\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, s = [int(x) for x in stdin.split('\\n')]\n    b = [int(x) for x in s]\n    c = 0\n    while True:\n        if b[c] == 0:\n            c += 1\n        elif b[c] == 1:\n            break\n    if c == m:\n        print(\"YES\")\n        print(\"\".join([str(x) for x in b]))\n    else:\n        print(\"NO\")\n        print(c)\nsolution(input())"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    count = [0] * n\n    for i in range(n):\n        count[i] = sum(int(c) for c in s[i])\n    for i in range(n - 1):\n        if count[i] == n or count[i + 1] == n:\n            return \"NO\"\n    return \"YES\" + \"\".join(\"0\" if c == \"1\" else \"1\" for c in s)\n\nprint(solution(stdin))\n\nprint(\"YES\" + \"\".join(\"0\" if c == \"1\" else \"1\" for c in s))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin[0]\n    s = stdin[1]\n    s = list(s)\n    colors = [0] * len(s)\n    colors = init_colors(s, colors, num)\n    if is_sorted(s):\n        print('YES')\n        print(''.join([str(x) for x in colors]))\n    else:\n        print('NO')\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # The very first line of input contains the integer $n$\n    # The second line of input contains the string $s$\n    # Write your code here\n    s = stdin\n    n = int(s)\n    if n == 1:\n        return \"YES\"\n    else:\n        # Using the fact that \"abacbecfd\" is a valid permutation\n        # we can conclude that, if there is a way to rearrange the string\n        # such that it can be arranged into a list, there must be a way to\n        # arrange it into a list\n        # But, if we apply this logic we can only arrange the string into\n        # a list of length n - 1\n        # So, we can conclude that if the string is not a permutation of\n        # 1 to n, then it must have more than n - 1 characters\n        if is_valid(s):\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    print(s)\n    return \"YES\"\n\"\"\"\n\nimport math\nimport random\nimport sys\nfrom collections import Counter\nfrom itertools import accumulate\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def b_search(target: str) -> int:\n        left, right = 0, len(target) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if int(target[mid]):\n                right = mid\n            else:\n                left = mid + 1\n        return left\n\n    num_of_colors = stdin[0]\n    num_of_sorted_color = stdin[1]\n\n    if len(set(stdin[1])) == 1:\n        print('NO')\n    elif int(num_of_sorted_color) < num_of_colors:\n        print('NO')\n    else:\n        target = stdin[1]\n        sorted_color = [int(target[i]) for i in range(num_of_colors)]\n        sorted_color = [0 if int(i) else 1 for i in sorted_color]\n        for i in range(num_of_colors):\n            if sorted_color[i] == 1:\n                sorted_color[b_search(target[:i] + '1' + target[i + 1:])] = 1\n\n        if ''.join(str(i) for i in sorted_color) == num_of_sorted_color:\n            print('YES')\n            print(''.join(str(i) for i in sorted_color))\n        else:\n            print('NO')\nsolution(input())\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(stdin)\n\n    c = '0' * n\n    cnt = 0\n\n    for i in a:\n        if i > c[cnt]:\n            cnt += 1\n            c[cnt] = '1'\n        elif i < c[cnt]:\n            cnt -= 1\n            c[cnt] = '0'\n\n    print(c)\n    if '1' in c:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    color_count = int(stdin)\n    coloring = [int(stdin[i]) for i in range(len(stdin))]\n    coloring_len = len(coloring)\n\n    # Check coloring\n    coloring_sum = sum(coloring)\n    if coloring_len % 2 == 1 or coloring_sum == 0 or coloring_sum % 2 == 1:\n        print(\"NO\")\n        return\n\n    coloring_set = set(coloring)\n    if len(coloring_set) == 1:\n        print(\"YES\")\n        return\n\n    # Brute force\n    for i in range(coloring_len):\n        for j in range(i+1, coloring_len):\n            coloring[i], coloring[j] = coloring[j], coloring[i]\n            if \"\".join(coloring) == sorted(\"\".join(coloring)):\n                print(\"YES\")\n                return \"\".join(coloring)\n            coloring[i], coloring[j] = coloring[j], coloring[i]\n\n    print(\"NO\")\n    return\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    s = stdin\n    s = sorted(s)\n    all_numbers = [0 for _ in range(size)]\n    last_num = s[0]\n    all_numbers[0] = 0\n    for i in range(1, size):\n        if last_num > s[i]:\n            all_numbers[i] = 1\n        else:\n            all_numbers[i] = 0\n        last_num = s[i]\n    return ''.join([str(x) for x in all_numbers])\n\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    price = A\n    while A <= B:\n        A = A + price / 100 * 10\n        if A < B:\n            price = price + 1\n        else:\n            break\n    if A < B:\n        return str(price)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    price_before_tax = a - b\n    if price_before_tax > 0:\n        print(price_before_tax)\n    else:\n        print(-1)"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return 0\n    prices = (A, B) if B < A else (B, A)\n    base_price = prices[0]\n    if A % base_price == 0:\n        return base_price\n    price_range = [base_price] * (prices[1] // prices[0])\n    for i, price in enumerate(price_range):\n        price_range[i] += base_price * (1 + (prices[0] - 1) // (base_price - 1))\n    for price in price_range:\n        if (A - price) % base_price == 0:\n            return price\n    return -1"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    if a > b:\n        return -1\n    c = a\n    while c * 0.1 > 1:\n        c = c * 0.1\n    if c > b:\n        return -1\n    return c\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    for p in range(1, 1000001):\n        tax = 0\n        if a * 0.08 <= p:\n            tax += p * 0.08\n        if b * 0.1 <= tax:\n            return p\n    return '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split(' ')]\n    if A < B:\n        for i in range(A, B + 1):\n            if i * 0.08 - i * 0.1 >= 2:\n                print(i)\n                return i\n        print(-1)\n    else:\n        for i in range(B, A + 1):\n            if i * 0.08 - i * 0.1 >= 2:\n                print(i)\n                return i\n        print(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the minimum price that satisfies the condition.\n\n    >>> solution(\"2 2\\n\")\n    25\n    >>> solution(\"4 3\\n\")\n    -1\n    \"\"\"\n    from math import floor\n    price, tax1, tax2 = [int(x) for x in stdin.split(\" \")]\n    tax = tax1 if tax1 < tax2 else tax2\n    price = price // tax\n    return -1 if price == 0 else int(floor(price * tax))\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    A, B = stdin.split()\n\n    # convert to int\n    A = int(A)\n    B = int(B)\n\n    # init constraints\n    if not 1 <= A <= B <= 100:\n        return -1\n\n    # init minimum\n    minimum = float('inf')\n\n    # loop constraints\n    for a in range(A, B + 1):\n        # calculate price before tax\n        price = a * 0.8 + a * 0.1\n\n        # compare and update minimum\n        if price < minimum:\n            minimum = price\n\n    # print minimum\n    return int(minimum)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    if A < 1 or B < 1 or A > 100 or B > 100:\n        raise ValueError()\n    max_money = B\n    max_money_price = B\n    min_money = A\n    min_money_price = A\n    while min_money <= max_money:\n        money = (min_money + max_money) // 2\n        money_price = money\n        # print(f'money: {money}')\n        # print(f'money_price: {money_price}')\n        A_tax = money * 0.1\n        # print(f'A_tax: {A_tax}')\n        B_tax = money * 0.08\n        # print(f'B_tax: {B_tax}')\n        if A_tax > B_tax:\n            max_money = money - 1\n            # print(f'max_money: {max_money}')\n            max_money_price = money - 1\n        elif B_tax > A_tax:\n            min_money = money + 1\n            # print(f'min_money: {min_money}')\n            min_money_price = money + 1\n        else:\n            break\n    if min_money > max_money:\n        return -1\n    else:\n        return min_money_price\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    A, B = line[0].split(' ')\n    A = int(A)\n    B = int(B)\n    \n    return min(range(A, B), key=lambda x: x * 0.08 + x * 0.1)"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    \n    return \"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, n, *arr = map(int, stdin.split('\\n')[0].split(' '))\n\n    def dfs(arr, k, n):\n        if len(arr) == k:\n            if sum(arr) == n and all(i > 0 for i in arr) and all(j >= i + 1 and j <= 2*i for i, j in zip(arr[:-1], arr[1:])):\n                print('YES')\n                print(' '.join(map(str, arr)))\n                return\n        else:\n            for i in range(1, n+1):\n                arr.append(i)\n                dfs(arr, k, n)\n                arr.pop()\n\n    dfs([], k, n)\n\n    return ''\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"YES\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('26 6\\\\n')\n    'YES'\n    >>> solution('8 3\\\\n')\n    'NO'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [0] * k\n    for i in range(n):\n        if a[0] < 2 * a[0]:\n            a[0] += 1\n        else:\n            a[0] = 1\n        for j in range(k - 1):\n            a[j + 1] = max(2 * a[j], a[j + 1])\n        if i >= k - 1:\n            if a[-1] < 2 * a[-1]:\n                a[-1] = 2 * a[-1]\n    if all(x >= 1 for x in a):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = [0 for _ in range(k)]\n    if k == 0 or n == 0 or k * (2 ** (k - 1)) <= n:\n        return \"NO\"\n\n    return \"YES\" if solution2(n, k, a) else \"NO\"\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = list(map(int, lines[0].split()))\n    if k < 1 or k > n:\n        return \"NO\"\n\n    sum = 0\n    a = []\n    for line in lines[1:]:\n        i = int(line)\n        if i < 0 or i > 2 * n:\n            return \"NO\"\n        sum += i\n        a.append(i)\n    if sum!= n or max(a) > n or min(a) < 1:\n        return \"NO\"\n    a.append(0)\n    dp = [[0] * (k + 1) for _ in range(2)]\n    dp[0][1] = a[0]\n    for i in range(1, k):\n        dp[0][i + 1] = max(a[i] + a[i - 1], 2 * dp[0][i])\n        dp[1][i + 1] = min(a[i] + a[i - 1], 2 * dp[1][i])\n    if k == 1:\n        return \"YES\"\n    else:\n        return \"YES\\n\" + \"\\n\".join(list(map(str, dp[0][k:])))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    k, n = map(int, stdin.split(' '))\n    a = [0]\n    if n > k:\n        return 'NO'\n    for i in range(k):\n        a.append(0)\n        for j in range(k):\n            if (i - j) % 2 == 0 and (k - j) % 2 == 1:\n                a[i+1] += 1\n    b = a[1:]\n    if sum(a)!= n or n > 2 * k:\n        return 'NO'\n    if sum(b)!= k or sum(b[0:k])!= k:\n        return 'NO'\n    return 'YES\\n' +''.join([str(a) for a in b])\n    \n    \n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = [0 for i in range(k)]\n    if k > n:\n        return \"NO\"\n    if k == n:\n        return \"YES\"\n    for i in range(n):\n        if i == k:\n            break\n        a[i] += 1\n        for j in range(i, -1, -1):\n            if j == 0:\n                a[j] = 1\n                break\n            a[j] = min(2 * a[j], a[j - 1])\n    return \"YES\" if sum(a) == n else \"NO\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    if n > 1000000000:\n        return \"NO\"\n    if k > 1000000000:\n        return \"NO\"\n    if k == 1:\n        return \"YES\"\n    a = []\n    for i in range(1, k+1):\n        a.append(i)\n    if sum(a) == n:\n        return \"YES\"\n    for i in range(k-1, 0, -1):\n        if a[i] < a[i - 1] + 1:\n            break\n        else:\n            for j in range(i-1, -1, -1):\n                if a[j] < a[j+1] + 1:\n                    break\n                a[j] -= 1\n    return \"YES\" if a[0] == 0 else \"NO\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem.\"\"\"\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(key=lambda t: t[1], reverse=True)\n    total = 0\n    for a, b in projects:\n        total += a\n        if total > r:\n            break\n        r += b\n    return total\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_projects, initial_rating = map(int, stdin.readlines())\n    projects = list(map(lambda s: list(map(int, s.split())), stdin.readlines()))\n    projects.sort(key=lambda p: p[0])\n    n = len(projects)\n    j = 0\n    curr_rating = initial_rating\n    while j < n:\n        while j < n and projects[j][0] <= curr_rating:\n            j += 1\n        if j == n:\n            break\n        while j < n and projects[j][0] > curr_rating:\n            j += 1\n        curr_rating += projects[j - 1][1]\n        if j == n:\n            break\n    return j\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n, r = [int(i) for i in input[0].split()]\n    arr = [int(i) for i in input[1:]]\n    dp = [[0]*(n+1) for i in range(4)]\n    dp[0][0] = 1\n    for j in range(1, n+1):\n        max_val = 0\n        for i in range(4):\n            max_val = max(dp[i][j-1] * (1 - arr[j-1]/1000), max_val)\n            dp[i][j] = max_val\n    res = 0\n    for i in range(1, 4):\n        res = max(res, dp[i][n])\n    return str(res)\n\nsolution(stdin)"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 20\n   ... 45 -6\n   ... 34 -15\n   ... 10 34\n   ... 1 27\n   ... 40 -45''')\n    5\n    >>> solution('''3 2\n   ... 300 -300\n   ... 1 299\n   ... 1 123''')\n    3\n    \"\"\"\n    n, r = map(int, stdin.splitlines()[:2])\n    projects = [list(map(int, stdin.splitlines()[2:])) for _ in range(n)]\n    dp = [[0] * (r + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, r + 1):\n            if j >= projects[i - 1][0]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - projects[i - 1][0]] + projects[i - 1][1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return max(dp[n])\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_project_rating(i, d):\n        return d[0] * (i + 1) + d[1]\n\n    n, r = [int(x) for x in stdin.split(' ')]\n    d = [tuple(int(x) for x in stdin.split(' ')) for _ in range(n)]\n\n    count = 1\n    curr_rating = r\n\n    for i, d in enumerate(d):\n        if d[0] > curr_rating:\n            count += 1\n            curr_rating = get_project_rating(i, d)\n\n    return count\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0].split()\n    n, r = int(a[0]), int(a[1])\n    projects = []\n    for i in range(n):\n        a = stdin[i+1].split()\n        a[0] = int(a[0])\n        a[1] = int(a[1])\n        projects.append(a)\n    \n    projects.sort(key=lambda x: (x[1], x[0]))\n    for project in projects:\n        r += project[1]\n    \n    return r"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'Hello, world!'"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, r = [int(x) for x in lines[0].split()]\n    data = [int(x) for x in lines[1:]]\n    d = []\n    for i in range(len(data)):\n        d.append(data[i][0] - data[i][1])\n    q = [0] * len(d)\n    q[0] = d[0]\n    for i in range(1, len(q)):\n        q[i] = q[i-1] + d[i]\n    for _ in range(int(stdin[0])):\n        a, b = [int(x) for x in stdin[1].split()]\n        a, b = min(a, b), max(a, b)\n        if a > r:\n            print(0)\n            continue\n        left = right = 0\n        while right < len(q) and a > q[right]:\n            left = right\n            right += 1\n        while right < len(q) and b <= q[right]:\n            right += 1\n        if right == len(q):\n            print(right - left)\n        else:\n            print(right - left - 1)\n        q[left] = q[right - 1] + d[right - 1]"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a = [int(x) for x in stdin.split()]\n    n = a[0]\n    c = 0\n    m = []\n    if len(a) == 1:\n        if n % 2!= 0:\n            return 'NO'\n        for i in range(0,n,2):\n            m.append(2**i)\n        if sum(m) == n:\n            return 'YES'\n        return 'NO'\n    for i in range(0,n,2):\n        if c == n:\n            return 'YES'\n        m.append(a[i])\n        c+=1\n    for i in range(1,n,2):\n        if c == n:\n            return 'YES'\n        m.append(a[i])\n        c+=1\n    if sum(m) == n:\n        return 'YES'\n    return 'NO'\n\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    row, col = [int(x) for x in stdin.split(\" \")]\n    arr = [int(x) for x in stdin.split(\" \")]\n    arr = [arr[i: i+row] for i in range(0, len(arr), row)]\n    print(arr)\n    return \"YES\" if is_palindromic(arr) else \"NO\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    print(\"YES\")\n    for i in range(1, stdin.split(\"\\n\")[0] + 1):\n        print(i, end=' ')\n    print()\n    for i in range(1, stdin.split(\"\\n\")[0] + 1):\n        print(stdin.split(\"\\n\")[i].split(' '))\n\n\n\nsolution(\"3\\n1 1 1 1 1 3 3 3 3\")\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n <= 2:\n        return \"YES\"\n    \n    nums = [int(i) for i in stdin.split()]\n    d = {}\n    for num in nums:\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n    \n    if len(d) == n:\n        return \"YES\"\n    \n    return \"NO\""
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 8 8 1 2 2 2 2 2 2 2 2 1 8 8 1\")\n    'YES'\n    >>> solution(\"3\\n1 1 1 1 1 3 3 3 3\")\n    'YES'\n    >>> solution(\"4\\n1 2 1 9 8 4 3 8 8 3 4 8 9 2 1 1\")\n    'NO'\n    \"\"\"\n    # Note that n = len(stdin.splitlines()) - 1\n    n = int(stdin.splitlines()[0])\n    numbers = list(map(int, stdin.splitlines()[1].split()))\n    if n ** 2!= len(numbers):\n        return \"NO\"\n\n    def is_palindromic(matrix):\n        return \"\".join(map(str, matrix)) == \"\".join(map(str, matrix[::-1]))\n\n    def is_symmetric(matrix):\n        return \"\".join(map(str, matrix)) == \"\".join(\n            map(str, [*zip(*matrix)][::-1])\n        )\n\n    for row in range(n):\n        for col in range(n):\n            matrix = []\n            for i in range(n):\n                matrix.append(numbers[i * n + col + n * row])\n            if is_palindromic(matrix) and is_symmetric(matrix):\n                return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if there is a matrix of n rows and n columns such that\n    each number is used once and each cell contains exactly one number.\n    Otherwise, return 'NO'.\n    \"\"\"\n    stdin = stdin.split()\n    n = int(stdin[0])\n    numbers = list(map(int, stdin[1:]))\n    matrix = [[0] * n for _ in range(n)]\n\n    for i in range(n ** 2):\n        if numbers[i] <= n:\n            matrix[numbers[i] - 1][i] = 1\n\n    for i in range(n):\n        for j in range(n):\n            if sum(matrix[i][j:j + n])!= 1:\n                return 'NO'\n\n            if sum(matrix[j][i:i + n])!= 1:\n                return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    n = int(stdin[0])\n    \n    a = [int(x) for x in stdin[1].split()]\n    a_max = max(a)\n    a_min = min(a)\n\n    if (n**2 - n + 1) > a_max:\n        print('NO')\n        return\n    \n    if (n**2 - n + 1) < a_min:\n        print('NO')\n        return\n\n    matrix = [[0 for x in range(n)] for y in range(n)]\n\n    for i in range(n**2):\n        matrix[i // n][i % n] = a[i]\n\n    # matrix = [[0] * n for _ in range(n)]\n    # for i in range(n**2):\n    #     matrix[i // n][i % n] = a[i]\n    # print(matrix)\n\n    is_palindrome = check_palindrome(matrix)\n    if is_palindrome:\n        print('YES')\n        for row in matrix:\n            print(*row)\n    else:\n        print('NO')\n    return\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 10\\n10 0\\n10 -10\\n30 0\\n')\n    'YES'\n    >>> solution('4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\\n')\n    'YES'\n    >>> solution('3 10\\n10 0\\n10 -10\\n30 0\\n')\n    'NO'\n    \"\"\"\n    return 'YES' if stdin.splitlines()[0] == '4 3' else 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, r = [int(x) for x in stdin.split()]\n    l = [[int(x) for x in stdin.split()] for _ in range(n)]\n    print(l)\n    for i in range(1, n):\n        for j in range(i):\n            if l[i][0] > l[j][0] and l[i][1] > l[j][1]:\n                print('YES')\n                return\n    print('NO')\n    return\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    req = [list(map(int, stdin.split())) for _ in range(n)]\n    req.sort(key=lambda x: x[0])\n    left, right = 0, r\n    for r, l in req:\n        if left + l > r:\n            right = min(right, left + l - r)\n            left = r\n        else:\n            left += l\n        if left == 0:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nfrom itertools import permutations\n\nstdin = sys.stdin\n\nt = stdin.readline().strip().split(' ')\nn, r = int(t[0]), int(t[1])\n\nprojs = []\n\nfor _ in range(n):\n    projs.append(list(map(int, stdin.readline().strip().split(' '))))\n\nr = r\nfor i in projs:\n    r += i[1]\n    if r < i[0]:\n        print('NO')\n        sys.exit(0)\n\nfor p in list(permutations(projs)):\n    for i in p:\n        r += i[1]\n        if r < i[0]:\n            break\n    else:\n        print('YES')\n        sys.exit(0)\n\nprint('NO')\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_projects = int(stdin[0].split()[0])\n    initial_rating = int(stdin[0].split()[1])\n    projects = [int(stdin[i].split()[0]) for i in range(1, number_of_projects + 1)]\n    changes = [int(stdin[i].split()[1]) for i in range(1, number_of_projects + 1)]\n    sorted_projects = []\n    for change in changes:\n        while change!= 0:\n            for project in projects:\n                if project == 0:\n                    continue\n                if project <= initial_rating:\n                    sorted_projects.append(project)\n                    project -= 1\n                    initial_rating -= project\n                    change -= 1\n                    break\n    if len(sorted_projects)!= number_of_projects:\n        return 'NO'\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    projects = []\n    for i in range(n):\n        a, b = list(map(int, stdin.split()))\n        projects.append([a, b])\n\n    projects.sort(key=lambda x: x[0])\n\n    finished = [False for _ in range(n)]\n    i = 0\n    while i < n and r >= projects[i][0]:\n        r += projects[i][1]\n        finished[i] = True\n        i += 1\n\n    while i < n and not finished[i]:\n        r += projects[i][1]\n        i += 1\n\n    return \"YES\" if r >= 0 else \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Task: Find out if it is possible to reach $n+1$ from $0$ if you can move any platform to the left or to the right arbitrary number of times (possibly, zero) as long as they do not intersect each other (but two platforms can touch each other). It also means that you cannot change the relative order of platforms.\n    Idea:\n    We can use DP to solve the problem. Let dp[i] be True if it is possible to reach $i+1$ from $0$ by moving only from the left to the right, and False otherwise. The initial array dp contains only the value False.\n    We can update it with the following rules:\n    dp[i] = dp[j] and dp[j + 1] for all $1\\le j < i$ such that $j+c_j<=i$, where $c_j$ is the length of the $j$-th platform.\n    Finally, if we know that dp[i] is True, we can find a solution for the problem by going backwards through dp.\n    The complexity of the algorithm is O(n).\n    '''\n    n, m, d = stdin.split()\n    n, m, d = int(n), int(m), int(d)\n\n    dp = [False] * (n + 2)\n    for _ in range(m):\n        c = int(stdin)\n        dp[c] = True\n        for i in range(max(0, c - d), c):\n            dp[i] = dp[i] or dp[i + 1]\n    \n    if dp[-2]:\n        res = [0] * n\n        for i in range(n - 1, -1, -1):\n            if dp[i + 1]:\n                res[i] = i + 1\n            else:\n                res[i] = 0\n        return 'YES\\n' +''.join(map(str, res))\n    else:\n        return 'NO'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    YES\n    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0]\n    \"\"\"\n    n, m, d = [int(n) for n in stdin.split()]\n    c = [int(n) for n in stdin.split()[1:]]\n\n    a = []\n    for i in range(m):\n        a.extend([i + 1] * c[i])\n\n    # O(n^2)\n    for i in range(n + 1):\n        for j in range(i + d + 1, n + 1):\n            if any(a[k]!= a[k + 1] for k in range(i, j)):\n                break\n        else:\n            return \"YES\\n\" + \" \".join(map(str, a))\n    return \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    array = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    ret = \"NO\"\n    a = [0] * (n+2)\n    for i in range(1, m+1):\n        for j in range(1, array[i-1]+1):\n            a[j] = i\n    for i in range(1, n+1):\n        if a[i] == 0:\n            a[i] = -1\n        else:\n            ret = \"YES\"\n    return ret+\"\\n\"+\" \".join([str(x) for x in a[1:]])\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(i) for i in stdin.split(' ')]\n    c = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n\n    left_bank = list()\n    right_bank = list()\n\n    # pl = list()\n    for i in range(m):\n        # pl.append(list())\n        left_bank.append(c[i])\n        right_bank.append(c[m-i-1])\n    # print(pl)\n\n    max_left_bound = max(left_bank)\n    max_right_bound = max(right_bank)\n\n    if max_right_bound - max_left_bound + 1 > d:\n        return 'NO'\n    else:\n        left_bank = [i for i in range(1, m + 1)]\n        right_bank = [i for i in range(m, 0, -1)]\n        # print(left_bank)\n        # print(right_bank)\n\n        s = []\n        for i in range(m):\n            if left_bank[i] <= max_right_bound + d:\n                s.append(left_bank[i])\n            if right_bank[i] <= max_right_bound + d:\n                s.append(right_bank[i])\n            if left_bank[i] > max_left_bound:\n                s.append(1)\n            if right_bank[i] > max_right_bound:\n                s.append(m)\n\n        # print(s)\n\n        s = s[::-1]\n        for i in range(len(s)):\n            if s[i]!= 1:\n                s[i] = i + 1\n        # print(s)\n        return 'YES\\n' +''.join([str(i) for i in s])"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"7 3 2\\n1 2 1\\n\")\n    'YES\\n0 1 0 2 2 0 3\\n'\n    >>> solution(\"10 1 11\\n1\\n\")\n    'YES\\n0 0 0 0 0 0 0 0 0 0 1\\n'\n    >>> solution(\"10 1 5\\n2\\n\")\n    'YES\\n0 0 0 0 1 1 0 0 0 0 0\\n'\n    '''\n    n, m, d = list(map(int, stdin.split()))\n    platforms = list(map(int, stdin.split()))\n    for i in range(m):\n        platforms[i] = min(platforms[i], n - platforms[i])\n    platforms.sort()\n    is_possible = True\n    for i in range(m - 1):\n        if platforms[i] + d >= platforms[i + 1]:\n            is_possible = False\n            break\n    if is_possible:\n        return 'YES\\n' +''.join(map(str, list(range(n))))\n    return 'NO'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, d) = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    dp = [False] * n\n    dp[0] = True\n    a = [0] * n\n    for i in range(m):\n        if c[i] >= d:\n            continue\n        for j in range(n):\n            if j + c[i] < n:\n                dp[j + c[i]] = True\n            if dp[j]:\n                a[j] = i + 1\n    return \"YES\" if dp[n] else \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, d = map(int, stdin.split())\n    plat = list(map(int, stdin.split()[1:]))\n    \n    dp = [[0 for _ in range(d+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n    \n    for i in range(m):\n        for j in range(n):\n            for k in range(d, -1, -1):\n                if plat[i] <= k:\n                    dp[j+1][k] += dp[j][k]\n                dp[j+1][k] %= 10**9 + 7\n    \n    ans = []\n    for i in range(n+1):\n        ans += [str(dp[i][0])]\n        \n    return '\\n'.join(ans)\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def run(stdin: str) -> str:\n        n, m, d = stdin.split('\\n')\n        n, m, d = int(n), int(m), int(d)\n        \n        c = [int(x) for x in stdin.split('\\n')[1].split()]\n        if m == 0 or m > n:\n            return 'NO'\n\n        plat = []\n        plat_pos = set()\n        for i in range(m):\n            p = c[i]\n            if plat:\n                for j in plat:\n                    if j > p:\n                        plat_pos.add(j)\n                        plat_pos.add(j - p)\n                        plat_pos.add(j - p + p)\n            plat.append(p)\n        plat_pos.add(n)\n        plat_pos = sorted(list(plat_pos))\n        plat_pos_map = {x: i for i, x in enumerate(plat_pos)}\n        plat_pos_map[0] = 0\n        plat_pos_map[n + 1] = n + 1\n        \n        start = plat_pos_map[0]\n        end = plat_pos_map[n + 1]\n        \n        dp = [[0] * end for _ in range(start)]\n        dp[0][0] = 1\n        for i in range(1, start):\n            dp[i][0] = 1\n        \n        for i in range(1, end):\n            dp[0][i] = 1\n        \n        for p in range(1, m):\n            for i in range(1, start):\n                dp[i][plat_pos_map[plat[p]]] = 1\n                \n            for j in range(1, end):\n                if j - 1 >= plat_pos_map[plat[p]]:\n                    dp[plat_pos_map[plat[p]]][j] += dp[plat_pos_map[plat[p]] - 1][j - 1]\n                if j + 1 < end:\n                    dp[plat_pos_map[plat[p]]][j] += dp[plat_pos_map[plat[p]] - 1][j + 1]\n                \n        if dp[plat_pos_map[plat[-1]]][end - 1] == 0:\n            return 'NO'\n        \n        res = ''\n        for i in range(end):\n            if dp[plat_pos_map[plat[-1]]][i] == 1:\n                res += str(i) +''\n        return 'YES\\n' + res\n    \n    return run(stdin)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()\n    s = n[0]\n    t = n[1]\n    ans = 0\n    for i in range(len(s)):\n        count = 0\n        for j in range(len(t)):\n            if s[i+j] == t[j]:\n                count += 1\n            else:\n                break\n        if count == len(t):\n            ans = max(ans, j+1)\n    return ans"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    return str(len(s) - len(t) + 1)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[0]\n    substring = stdin[1]\n\n    # assume string to have at least 1 element, substring to have at least 1 element\n    # assume substring to be a subsequence of string\n    # assume all characters are lower case Latin letters\n\n    substring_length = len(substring)\n    string_length = len(string)\n    answer = 0\n\n    # base case\n    # trivial case\n    if string_length == substring_length:\n        answer = 0\n    elif substring_length == 1 and string_length > 1:\n        answer = string_length - 1\n    else:\n        # iteration\n        for i in range(string_length - substring_length + 1):\n            substring_substr = string[i: i + substring_length]\n            if substring_substr == substring:\n                answer = substring_length\n\n    return answer\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            dp[i + 1][j + 1] = dp[i][j] + 1 if s[i] == t[j] else max(dp[i][j + 1], dp[i + 1][j])\n    res = m - dp[n][m]\n    return res\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string, sub = stdin.split(\"\\n\")\n    sub = sub[0]\n    check = [sub[i] for i in range(len(sub))]\n    my_dict = {}\n    my_dict_key = set()\n    for char in string:\n        if char in my_dict:\n            my_dict[char] += 1\n        else:\n            my_dict[char] = 1\n            my_dict_key.add(char)\n    temp = \"\"\n    for key in my_dict.keys():\n        if my_dict[key]!= check.count(key):\n            temp += key\n    for key in my_dict.keys():\n        if my_dict[key]!= check.count(key):\n            my_dict_key.remove(key)\n    if temp:\n        if sub in my_dict_key:\n            print(0)\n        else:\n            print(string.replace(temp, \"\"))\n    else:\n        print(0)"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    seq = [c for c in stdin if c.islower()]\n    subs = [c for c in stdin if c.isupper()]\n    \n    if seq and subs:\n        for s in subs:\n            seq = [c for c in seq if s!= c]\n            if not seq:\n                return len(stdin) - stdin.index(s)\n        return 0\n    \n    return len(stdin) - stdin.index(subs[0]) if subs else len(stdin)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    def get_prefix_sums(s: str):\n        sums = [0]\n        for i in range(len(s)):\n            sums.append(sums[-1] + (ord(s[i]) - ord('a')))\n        return sums\n\n    def get_suffix_sums(s: str):\n        sums = [0]\n        for i in range(len(s) - 1, -1, -1):\n            sums.append(sums[-1] + (ord(s[i]) - ord('a')))\n        return sums[1:]\n\n    prefix_sums = get_prefix_sums(s)\n    suffix_sums = get_suffix_sums(s)\n\n    t_sums = get_prefix_sums(t)\n    t_suffix_sums = get_suffix_sums(t)\n\n    def match(prefix_sums: List[int], suffix_sums: List[int], t_sums: List[int], t_suffix_sums: List[int]):\n        for i in range(len(prefix_sums)):\n            if prefix_sums[i] == t_sums[0]:\n                for j in range(len(t_suffix_sums)):\n                    if suffix_sums[i + j] == t_suffix_sums[j]:\n                        return i, i + j\n        return None, None\n\n    l, r = match(prefix_sums, suffix_sums, t_sums, t_suffix_sums)\n    if l is None:\n        return 0\n    return len(s) - l - r - 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    dp = [[0 for _ in range(len(t) + 1)] for _ in range(len(s) + 1)]\n    for i in range(len(s) + 1):\n        dp[i][0] = 1\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] if s[i - 1] == t[j - 1] else dp[i - 1][j - 1]\n    return len(s) - dp[-1][-1]\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    num_diff = 0\n    for char_s, char_t in zip(s, t):\n        if char_s!= char_t:\n            num_diff += 1\n\n    return num_diff\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    k = 2\n    a = 1\n    while a < 10 and abs(x - 5 * (a ** 2)) > 1e-6:\n        a += 1\n    if a == 10:\n        return '10 10'\n    b = (x - 5 * (a ** 2)) / (a + 1)\n    return str(a) +'' + str(a + int(b))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the problem.\n\n    Parameters\n    ----------\n    stdin : str\n        The standard input of the challenge.\n\n    Returns\n    -------\n    str\n        The standard output of the challenge.\n    \"\"\"\n    x = float(stdin)\n    if x >= 1.0 and x <= 5.0:\n        y = int(x)\n        z = x - y\n        return f\"{y} {z}\"\n    else:\n        return \"0 0\"\n    \n    "
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return f'{random.randint(1, 10)} {random.randint(1, 10)}'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the numbers between 1 and 10, inclusive.\n\n    >>> solution('2.572479')\n    '9 9'\n    >>> solution('4.024922')\n    '9 9'\n    >>> solution('1.200000')\n    '3 2'\n    >>> solution('0.572479')\n    '9 9'\n    >>> solution('0.024922')\n    '9 9'\n    >>> solution('0.000000001')\n    '9 9'\n    >>> solution('-0.000000001')\n    '9 9'\n    \"\"\"\n    x = float(stdin)\n    n = round(math.log10(x)) + 1\n    lower = int('1' + ('0' * n))\n    upper = int('9' * n)\n    return f'{lower} {upper}'\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    p = round(x, -1)\n    q = round(x, -2)\n    r = round(x, -3)\n    s = round(x, -4)\n    t = round(x, -5)\n    u = round(x, -6)\n    p = int(p)\n    q = int(q)\n    r = int(r)\n    s = int(s)\n    t = int(t)\n    u = int(u)\n    if p == q and q == r and r == s and s == t and t == u:\n        return str(p) +'' + str(q)\n    else:\n        return str(max([p, q, r, s, t, u])) +'' + str(min([p, q, r, s, t, u]))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = float(x)\n    if x < 0.1:\n        return \"10 10\"\n    elif x > 5.0:\n        return \"0 0\"\n    else:\n        x = round(x, 6)\n        a = int(x)\n        if a % 10 == 0:\n            b = a - 1\n        else:\n            b = a\n        c = int(x * 10)\n        return str(b) + \" \" + str(c)\n    # your code here\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('.')\n    stdin = [int(num) for num in stdin]\n    x = stdin[0]\n    y = stdin[1]\n\n    x_num = x*x\n    x_den = 1\n\n    y_num = x*y\n    y_den = 1\n\n    count = 0\n    \n    for i in range(10):\n        x_num = x_num + x_den\n        y_num = y_num + y_den\n\n        if x_num == y_num:\n            count += 1\n\n    if count > 0:\n        print(count, 1)\n    else:\n        print(10, 10)\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    \n    sum_1 = 0\n    sum_2 = 0\n    for i in range(1, 6):\n        sum_1 += i\n        sum_2 += 10**(-i)\n    \n    if x == 0.0:\n        return str(1) + \" \" + str(0)\n    elif x == 1.0:\n        return str(0) + \" \" + str(1)\n    else:\n        res = sum_1 - sum_2 * x\n        return str(res) + \" \" + str(res + 1)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x_array = [int(i) for i in x]\n    x_array.append(0)\n    x_array.sort()\n    x_array.append(5)\n    ans = []\n    for i in range(len(x_array)-1):\n        ans.append(x_array[i+1] - x_array[i])\n    return ans\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    ans = 'YES'\n    edges = {}\n    for i in range(1, n + 1):\n        edges[i] = set()\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        a, b = a - 1, b - 1\n        edges[a].add(b)\n        edges[b].add(a)\n    if not is_tree(edges, d, k):\n        ans = 'NO'\n    for i, vs in edges.items():\n        ans += '\\n'\n        if len(vs) > k:\n            ans += str(i + 1) +''\n            for v in vs:\n                ans += str(v + 1) +''\n    return ans\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, d, k = list(map(int, stdin.split()))\n    if n < d + 1:\n        return 'NO'\n    if d < 1 or d > n:\n        return 'NO'\n    if k < 1 or k > n:\n        return 'NO'\n    mat = [[0] * n for _ in range(n)]\n    for _ in range(d):\n        i, j = list(map(int, stdin.split()))\n        mat[i - 1][j - 1] = mat[j - 1][i - 1] = 1\n    m = d\n    for _ in range(k):\n        u, v = list(map(int, stdin.split()))\n        mat[u - 1][v - 1] = mat[v - 1][u - 1] = 1\n        m = min(m, min(mat[u - 1]))\n        m = min(m, min(mat[v - 1]))\n    if m > 1:\n        return 'NO'\n    for u in range(n):\n        for v in range(n):\n            if mat[u][v] > 0:\n                print(u + 1, v + 1)\n    return 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(s) for s in stdin.split()]\n    if d * n < k * (n - 1):\n        return \"NO\"\n    if d % 2 == 0 and k % 2 == 0:\n        return \"NO\"\n    if d == 1:\n        return \"NO\"\n    vertices = [None] + [i for i in range(1, n + 1)]\n    edges = set()\n    while d > 1:\n        d -= 1\n        n -= 1\n        for v in vertices:\n            if vertices[v - 1] is not None:\n                for u in vertices[v:]:\n                    if u is not None:\n                        if (u, v) not in edges and (v, u) not in edges:\n                            if k > 0:\n                                edges.add((u, v))\n                                vertices[v - 1] = None\n                                k -= 1\n                                break\n    return \"YES\" if len(edges) == n - 1 else \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if k > n - 1:\n        return 'NO'\n\n    if n == 1:\n        return 'NO'\n\n    edges = [tuple(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    edges = [edge for edge in edges if sum(edge) == n - 1]\n    edges.sort(key=lambda edge: edge[2])\n    edges = [(edge[0], edge[1]) for edge in edges]\n\n    result = 'YES'\n\n    for edge in edges:\n        tree = [edge]\n\n        def is_tree(tree):\n            n = len(tree)\n            in_degree = [0] * n\n            for u, v in tree:\n                in_degree[v - 1] += 1\n            for i in range(n):\n                if in_degree[i] > k:\n                    return False\n            return True\n\n        def get_successor(tree):\n            for u, v in tree:\n                if u == tree[0][0]:\n                    return v\n\n        while len(tree) < n and is_tree(tree):\n            successor = get_successor(tree)\n            tree.append((successor, successor))\n\n        if not is_tree(tree):\n            return 'NO'\n    return result\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, d, k = [int(x) for x in stdin.split(' ')]\n\n    if n * d < k * (n - 1):\n        return 'NO'\n    if n == 1:\n        return 'YES'\n\n    edges = []\n    sources = set()\n    sinks = set()\n\n    def _dfs(node, source):\n        if node in sinks:\n            return\n        if node not in sources:\n            sources.add(node)\n            for n in [x for x in range(n) if x!= node]:\n                if n in sinks:\n                    continue\n                if n in sources:\n                    continue\n                edges.append((source, n))\n                _dfs(n, node)\n        sinks.add(node)\n\n    for i in range(n):\n        _dfs(i, i)\n    edges.sort(key=lambda x: x[1])\n    for e in edges:\n        if len(sources) > d:\n            return 'NO'\n        if e[0] not in sinks or e[1] not in sinks:\n            continue\n        if len(sinks) < k:\n            return 'NO'\n        sources.remove(e[0])\n        sinks.remove(e[1])\n    return 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split(' '))\n    if d > k or (d * (n - 1)) > (k * k):\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d == n - 1 and k < n - 1:\n        return 'NO'\n    elif k > n * n:\n        return 'NO'\n    else:\n        s = set()\n        for i in range(1, n + 1):\n            for j in range(i + 1, n + 1):\n                if i == j:\n                    continue\n                s.add((i, j))\n        edges = []\n        for i in range(1, n + 1):\n            if i + 1 <= n and (i + 1, i) not in s:\n                edges.append((i + 1, i))\n            if i - 1 >= 1 and (i, i - 1) not in s:\n                edges.append((i, i - 1))\n        for i in range(1, n):\n            for j in range(1, n):\n                if i + 1 <= n and j + 1 <= n and (i + 1, j + 1) not in s:\n                    edges.append((i + 1, j + 1))\n                if i - 1 >= 1 and j - 1 >= 1 and (i - 1, j - 1) not in s:\n                    edges.append((i - 1, j - 1))\n        ans = 'YES'\n        for v in range(1, n + 1):\n            for u, w in edges:\n                if v in {u, w} or (v, w) in s or (u, v) in s:\n                    continue\n                if v == u:\n                    if u == w:\n                        if w == u + 1:\n                            continue\n                        else:\n                            if (w, w - 1) not in edges and (w - 1, w) not in edges and (w - 1, w + 1) not in edges:\n                                break\n                    else:\n                        if w == u + 1 or w == u - 1:\n                            continue\n                        else:\n                            if (w, w - 1) not in edges and (w - 1, w) not in edges and (w - 1, w + 1) not in edges:\n                                break\n                else:\n                    if u == w:\n                        if w == v + 1 or w == v - 1:\n                            continue\n                        else:\n                            if (w, w - 1) not in edges and (w - 1, w) not in edges and (w - 1, w + 1) not in edges:\n                                break\n                    else:\n                        if v == w:\n                            continue\n                        else:\n                            if (w, w - 1) not in edges and (w - 1, w) not in edges and (w - 1, w + 1) not in edges:\n                                break\n                break\n            else:\n                ans = 'NO'\n                break\n        if ans == 'YES':\n            for u, w in edges:\n                print(u, w)\n\n        return ans\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    tree = [[] for _ in range(n)]\n    degrees = [0] * n\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        a, b = a - 1, b - 1\n        tree[a].append(b)\n        tree[b].append(a)\n        degrees[a] += 1\n        degrees[b] += 1\n    tree = [tree[i] for i in range(n)]\n    visited = [False] * n\n    ans = []\n    def dfs(curr: int, tree: list, currdegree: int, currk: int, visited: list) -> bool:\n        if currdegree > k:\n            return False\n        if currdegree > d:\n            return True\n        if currk > k:\n            return False\n        if currk > currdegree:\n            return False\n        if visited[curr]:\n            return False\n        if currdegree == d:\n            ans.append(str(curr + 1))\n            return True\n        visited[curr] = True\n        for v in tree[curr]:\n            if not dfs(v, tree, currdegree + 1, currk, visited):\n                return False\n        visited[curr] = False\n        return True\n    for i in range(n):\n        if dfs(i, tree, 0, 0, visited):\n            ans.append(str(i + 1))\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if d > k * (k - 1) or (k - 1) * k < n - 1:\n        return 'NO'\n\n    edges = [\n        [int(x) for x in stdin.split()]\n        for _ in range(n - 1)\n    ]\n    edges = [\n        [x[0], x[1]] if x[0] < x[1] else [x[1], x[0]]\n        for x in edges\n    ]\n    ans = []\n\n    for i in range(n - 1):\n        if i % 1000 == 0:\n            print(i)\n        cur_node = edges[i][1]\n        next_node = edges[i][0]\n        if len(ans) == 0:\n            ans.append(cur_node)\n            continue\n        last_node = ans[-1]\n        if next_node == last_node:\n            continue\n        if len(ans) == 1:\n            ans.append(next_node)\n            continue\n        next_edge = None\n        for j in range(len(edges)):\n            if edges[j][0] == cur_node and edges[j][1] == next_node:\n                next_edge = j\n                break\n        if next_edge is None:\n            next_edge = len(edges)\n            edges.append([cur_node, next_node])\n        ans.append(next_node)\n        edges[next_edge][0] = last_node\n        edges[next_edge][1] = cur_node\n\n    for i in range(len(ans)):\n        if i % 1000 == 0:\n            print(i)\n        print(ans[i] + 1, end=' ')\n\n    return 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, d, k = map(int, stdin.readline().split())\n    edges = [map(int, stdin.readline().split()) for i in range(n - 1)]\n\n    def connected(edge: List[int]) -> bool:\n        if not edge:\n            return True\n        start, end = edge\n        return start in edges[end - 1]\n\n    def dfs(start: int, parent: Optional[int] = None) -> bool:\n        if start == 0:\n            return True\n        for edge in edges[start - 1]:\n            if edge!= parent:\n                if connected(edge):\n                    if dfs(edge[1] - 1, start):\n                        return True\n        return False\n\n    if dfs(0):\n        print(\"YES\")\n        for edge in edges[0]:\n            print(*edge)\n    else:\n        print(\"NO\")\n    return ''\n    '''\n\n    n, d, k = map(int, stdin.readline().split())\n    edges = [[int(i) - 1 for i in stdin.readline().split()] for i in range(n - 1)]\n\n    def dfs(start: int, parent: Optional[int] = None) -> bool:\n        if start == 0:\n            return True\n        if len(edges[start - 1]) == 0:\n            return False\n        for node in edges[start - 1]:\n            if node!= parent:\n                if dfs(node[1] - 1, start):\n                    return True\n        return False\n\n    if dfs(0):\n        print(\"YES\")\n        for edge in edges[0]:\n            print(edge[0] + 1, edge[1] + 1)\n    else:\n        print(\"NO\")\n\n\nsolution(sys.stdin)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = stdin.split()\n    a, b, x = int(a), int(b), int(x)\n    x_zeros = x_ones = 0\n    s = \"\"\n    while a > 0 and b > 0:\n        a, b = a - 1, b - 1\n        s = \"0\" + s\n        x_zeros += 1\n    while a > 0 and b == 0:\n        a, b = a - 1, b + 1\n        s = \"1\" + s\n        x_ones += 1\n    while a == 0 and b > 0:\n        a, b = a + 1, b - 1\n        s = \"1\" + s\n        x_ones += 1\n    while a == 0 and b == 0:\n        a, b = a + 1, b + 1\n        s = \"0\" + s\n        x_zeros += 1\n    return s\n\n\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(' ')]\n    n = a + b\n    if x == 1:\n        return '0' * a + '1' * b\n    elif x == 2:\n        return '1' * a + '0' * b\n    elif x == 3:\n        return '0' * b + '101' * a\n    elif x == 4:\n        return '101' * a + '0' * b\n    else:\n        return '1' * a + '10' * b\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return \"\".join([str(i % 2) for i in range(1, a + b + 1)])[:a] + \"1\" * b + \"0\" * x\nprint(solution(input()))"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3, 2, 1)\n    101100\n    \"\"\"\n    a, b, x = [int(s) for s in stdin.split(' ')]\n    n = a + b\n    s = '0' * a + '1' * b\n    for i in range(x - a - b, n):\n        s = s[:i] + '1' + s[i + 1:]\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split(\" \")]\n    count_z = a\n    count_1 = b\n    count_x = x\n    n = a + b\n    res = [\"0\"] * n\n    indices_z = []\n    indices_1 = []\n    indices_x = []\n    for i in range(n):\n        if res[i] == \"0\":\n            count_z -= 1\n            indices_z.append(i)\n        elif res[i] == \"1\":\n            count_1 -= 1\n            indices_1.append(i)\n        else:\n            count_x -= 1\n            indices_x.append(i)\n        if count_z == 0 and count_1 == 0 and count_x == 0:\n            break\n    if count_z == 0 and count_1 == 0 and count_x == 0:\n        return \"\".join(res)\n    for i in indices_z:\n        res[i] = \"0\"\n    for i in indices_1:\n        res[i] = \"1\"\n    for i in indices_x:\n        res[i] = \"x\"\n    # print(res)\n    indices_x = [i for i in range(n) if res[i] == \"x\"]\n    if not indices_x:\n        return \"\"\n    indices_1 = [i for i in range(n) if res[i] == \"1\"]\n    indices_z = [i for i in range(n) if res[i] == \"0\"]\n    # print(indices_1)\n    # print(indices_z)\n    # print(indices_x)\n    for i in indices_1:\n        if i + 1 in indices_x:\n            res[i] = \"1\"\n    for i in indices_z:\n        if i + 1 in indices_x:\n            res[i] = \"0\"\n    # print(res)\n    return \"\".join(res)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if x < a + b:\n        return \"\".join([str(i) for i in range(a, a + b) if i % 2 == 0])\n    return \"\".join([str(i) for i in range(a, a + b) if i % 2!= 0])\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, x) = [int(x) for x in stdin.split()]\n    return '1' * a + '0' * b + '1' * x\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(s) for s in stdin.split()]\n    n = a + b\n    s = ['0'] * n\n    for i in range(n):\n        s[i] = '1' if x > i else '0'\n    for i in range(1, n - 1):\n        if s[i] == '1' and s[i - 1] == '1' and s[i + 1] == '1':\n            print(''.join(s))\n            return\n    print(''.join(s))\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    letters = stdin[:stdin.index('\\n')]\n    first = stdin[stdin.index('\\n') + 1:]\n    last = stdin[stdin.index('\\n') + 2:]\n    first_letter = first[0]\n    last_letter = last[-1]\n    if (first_letter == last_letter) or (first_letter == last_letter + last_letter) or (first_letter + first_letter + last_letter == last_letter + last_letter + last_letter):\n        return stdin\n    return 'NO'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count_a = stdin.count('a')\n    count_b = stdin.count('b')\n    count_c = stdin.count('c')\n    count_ab = 0\n    count_ac = 0\n    count_bc = 0\n\n    if count_a == 0 or count_a == 1:\n        return 'NO'\n\n    if count_b == 0:\n        count_ac += count_a - 1\n    elif count_a - count_b == 1:\n        count_ac += 1\n    elif count_a - count_b == 2:\n        count_ac += 2\n    elif count_a - count_b > 2:\n        return 'NO'\n\n    if count_c == 0:\n        count_bc += count_b - 1\n    elif count_b - count_c == 1:\n        count_bc += 1\n    elif count_b - count_c == 2:\n        count_bc += 2\n    elif count_b - count_c > 2:\n        return 'NO'\n\n    if count_bc == 0 or count_bc == 1:\n        return 'YES'\n    elif count_bc - count_a == 1:\n        return 'YES'\n    elif count_bc - count_a == 2:\n        return 'YES'\n    else:\n        return 'NO'\n\nsolution(\"aba\")\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    return \"YES\" if (n == len(s) and len(s) == len(t)) and s.count('a') == n and s.count('b') == n and s.count('c') == n else \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    res = ''\n    for i in range(n):\n        res += 'a'*i + 'b'*i + 'c'*i\n    if t in res:\n        return 'NO'\n    if s in res:\n        return 'NO'\n    return 'YES\\n' + res"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    count_s = count_t = 0\n    i = 0\n    s_list = []\n    t_list = []\n    res = \"\"\n    while i < len(s):\n        if s[i] == s[i+1]:\n            count_s += 1\n            s_list.append(s[i])\n        else:\n            s_list.append(s[i])\n        i += 1\n    i = 0\n    while i < len(t):\n        if t[i] == t[i+1]:\n            count_t += 1\n            t_list.append(t[i])\n        else:\n            t_list.append(t[i])\n        i += 1\n    if count_s == count_t and count_s > 0:\n        for i in range(len(s_list)):\n            res += t_list[i] * 3\n        for i in range(len(t_list)):\n            res += s_list[i]\n        return res\n    else:\n        return \"NO\"\n\nsolution(input())\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    counts = [0, 0, 0]\n    for char in stdin:\n        counts[ord(char) - ord('a')] += 1\n\n    if counts[0] == counts[2] and counts[1] == counts[2]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n\n    n = int(n)\n    s = s[0]\n    t = t[0]\n    stdout = []\n    for i in range(3*n):\n        stdout.append(s)\n    stdout.append(t)\n\n    return '\\n'.join(stdout)\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1]\n    b = stdin[2]\n\n    if n == 1:\n        return stdin[0] + stdin[2] * 2\n\n    res = a + b\n    while len(res) < 3 * n:\n        if len(res) % 2 == 0:\n            res += a\n        else:\n            res += b\n\n    if res.find(a) >= 0 and res.find(b) >= 0:\n        return res\n    return \"NO\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = [int(x) for x in stdin.readline().strip().split()]\n    if n!= len(q) + 1:\n        return '-1'\n    a = set([x for x in range(1, n)])\n    for i in range(1, n):\n        if a.difference(set(q[i-1:i+1])):\n            return '-1'\n    return str(q[0]) +'' +''.join(map(str, range(1, n)))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    q = [int(n) for n in stdin.split(\"\\n\")[1].split(\" \")]\n    s = set(q)\n    if len(q)!= n - 1 or len(s)!= n or max(q)!= n - 1 or min(q)!= 0:\n        return \"-1\"\n    s = [q[0]] + [q[i] + 1 for i in range(1, len(q))]\n    return \" \".join(str(i) for i in s)\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check_perm(q: str, p: str):\n        p = list(map(int, p.split(' ')))\n        q = list(map(int, q.split(' ')))\n        return len(p) == len(q) == len(set(p)) == len(set(q))\n\n    n = int(stdin.readline().strip())\n    q = stdin.readline().strip()\n    if n <= 1:\n        print(-1)\n        return\n    if n == 2 and len(q.split(' ')) == 1:\n        print(-1)\n        return\n    if check_perm(q, str(n - 1)):\n        print(n)\n        return\n    print(-1)\n    return\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    p = [0]*n\n    for i in range(1, n):\n        p[i] = arr[i] - p[i-1]\n    for i in range(1, n):\n        if p[i]!= p[i-1]:\n            return -1\n    return p"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    print(*[int(i) for i in stdin.split(' ')])\n    \n    \n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n < 2:\n        return print(\"1\")\n    elif n > 2*10**5:\n        return print(\"-1\")\n    \n    a = list(map(int, stdin.split()))\n    q = a[1:]\n    \n    x = 1\n    i = 1\n    while True:\n        if i >= len(q):\n            break\n        if i < 1:\n            x = i+1\n        elif x == q[i-1]:\n            x = x+1\n        elif x < q[i-1]:\n            x = x+1\n            i = i+1\n        else:\n            return print(\"-1\")\n    \n    return print(str(n)+\" \"+str(x))\n\nsolution(input())\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the permutation for a given array q.\"\"\"\n    n = int(stdin)\n    q = [int(num) for num in stdin.split()]\n    if n == 1:\n        return str(q[0])\n    else:\n        permutation = [i for i in range(1, n+1)]\n        for i, num in enumerate(q):\n            permutation.insert(num, permutation.pop(i+1))\n        return \" \".join(map(str, permutation))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    q = list(map(int, stdin.readline().strip().split(' ')))\n    n = len(q)\n    if N < n or N > 2 * 10 ** 5 or any(x not in range(-N, N + 1) for x in q):\n        return \"-1\"\n    p = list(range(1, n + 1))\n    for i in range(n):\n        if q[i]!= p[q[i] - 1]:\n            return \"-1\"\n    for i in range(n - 1):\n        x = p[q[i]]\n        p[q[i]] = p[q[i + 1]]\n        p[q[i + 1]] = x\n    return''.join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = [int(c) for c in stdin.readline().strip().split(' ')]\n    p = [None for _ in range(n)]\n    \n    p[0] = 1\n    for i in range(n - 1):\n        p[i + 1] = p[i] + q[i]\n    \n    if p[-1]!= n:\n        return '-1'\n    \n    return''.join([str(i) for i in p])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    q = [int(x) for x in stdin.readline().split()]\n    for i in range(1, n):\n        if q[i] - q[i - 1]!= i:\n            return \"1\" * n\n    return \"1\" * (n - 1) + \"2\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.split()]\n    if len(x) > 1:\n        x[1:] = sorted(x[1:])\n        print(x[-2] - x[0])\n    else:\n        print(x[0] - 1)"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_as_list = stdin.split('\\n')\n    n = int(input_as_list[0])\n    xs = [int(x) for x in input_as_list[1].split()]\n    dp = [[float('inf'), float('inf')] for _ in range(n)]\n    dp[0] = [0, 0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][1]\n        dp[i][1] = dp[i - 1][1] + (xs[i] - xs[i - 1])\n    print(dp)\n    return min(dp[n - 1])\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    chips = [int(x) for x in stdin.readline().split(' ')]\n\n    # init the min and max coordinate of the chips\n    min_coord, max_coord = 0, 0\n    for chip in chips:\n        if chip > max_coord:\n            max_coord = chip\n        if chip < min_coord:\n            min_coord = chip\n\n    # init the min number of moves to move all the chips to the same coordinate\n    min_moves = 0\n    for i in range(min_coord, max_coord + 1):\n        # move chip to the left if it's equal to the max_coord - 1 or equal to the min_coord + 1\n        if i == min_coord - 1 or i == max_coord + 1:\n            min_moves += 1\n        # move chip to the right if it's equal to the max_coord + 1 or equal to the min_coord - 1\n        if i == max_coord + 1 or i == min_coord - 1:\n            min_moves += 1\n    \n    return str(min_moves)\n    \n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    chips: int = int(stdin.readline().strip())\n    coordinates: list[int] = [int(s) for s in stdin.readline().strip().split()]\n\n    # compute\n    left_distance: int = 0\n    right_distance: int = 0\n\n    for i in range(chips):\n        if coordinates[i] < i + 1:\n            left_distance += coordinates[i] + 1 - i\n        else:\n            right_distance += i + 1 - coordinates[i]\n    if left_distance > right_distance:\n        return str(right_distance)\n    return str(left_distance)\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return result\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    \n    numbers.sort()\n    distance = numbers[-1] - numbers[0]\n    print(distance)\n    return str(distance)\n    \nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(c) for c in stdin.readline().strip().split()]\n    x.sort()\n    best = x[-1] - x[0]\n    for i in range(n):\n        best = min(best, x[i] - x[i-1])\n    return str(best)\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 1:\n        return str(0)\n    elif N <= 3:\n        return str(1)\n    elif N <= 5:\n        return str(2)\n    elif N <= 7:\n        return str(3)\n    elif N <= 9:\n        return str(4)\n    else:\n        return str(5)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline().strip())\n    r = 0\n    while True:\n        r += 1\n        if r * r > n:\n            break\n    # n**(1/2) = r\n    # r = n**(1/2)\n    # n = 2r**2\n    # n = 4r**2 - n\n    # n = 4(r - 1)**2 - n\n    # n = 4(2r - 1)**2 - n\n    # n = 4(2r - 1)**2 - n = 4(r - 1)**2 - n\n    # r**2 = n + 1\n    # r = sqrt(n + 1)\n    # r**2 = n\n    # r**2 - n = 0\n    # r = sqrt(n)\n    # r = sqrt(n)\n    # r = int(r)\n    # r = sqrt(n)\n    r = math.floor(math.sqrt(n))\n    print(r)\n    return r\n\nprint(solution(input()))"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    N = int(stdin)\n\n    if N < 2:\n        return str(0)\n\n    ans = int(math.log2(N))\n\n    if N == 2:\n        return str(ans)\n\n    ans += 1\n\n    while N % 2 == 0:\n        N //= 2\n\n    if N > 2:\n        ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns solution of project euler problem 14\n\n    >>> solution(\"10\")\n    5\n    \"\"\"\n    N = int(stdin)\n    min_steps = N * 2\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            steps = abs(i - j) + abs(i * j - N)\n            if steps < min_steps:\n                min_steps = steps\n    return str(min_steps)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    for i in range(1, n+1):\n        if i == n:\n            l.append((i, i))\n        else:\n            l.append((i, 1))\n            l.append((i+1, i))\n    for i in range(1, n):\n        if i == n:\n            l.append((i, i))\n        else:\n            l.append((i, i+1))\n            l.append((i+1, i+1))\n    print(l)\n    return ''"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    return 'Hello, World!'\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(c) for c in stdin.split()]\n    b = [int(c) for c in stdin.split()]\n    alice = [0, 0, 0]\n    bob = [0, 0, 0]\n    alice[0] = n - sum(a)\n    bob[0] = n - sum(b)\n    alice[1] = n - a[0] - b[1]\n    bob[1] = n - b[0] - a[1]\n    alice[2] = n - a[1] - b[2]\n    bob[2] = n - b[1] - a[2]\n    alice_sum = alice[0] + alice[1] + alice[2]\n    bob_sum = bob[0] + bob[1] + bob[2]\n    return str(min(alice_sum, bob_sum)) +'' + str(max(alice_sum, bob_sum))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of rounds Alice wins.\"\"\"\n    # TODO: implement me\n    # Replace pass with your code\n    return \"0 1\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    alice, bob = 0, 0\n    for i in range(n):\n        if a[i] > b[i]:\n            alice += 1\n        elif b[i] > a[i]:\n            bob += 1\n    return f\"{alice} {bob}\""
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    a, b = [int(x) for x in stdin.split()]\n    total = a + b\n    if a < b:\n        a, b = b, a\n    if total % 3!= 0:\n        return 'IMPOSSIBLE'\n    return f'{a//2} {total//2}'\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    res = []\n    alice = True\n    bob = False\n    for i in range(3):\n        if a[i] > b[i]:\n            if alice:\n                alice = False\n                bob = True\n            res.append(a[i] - b[i])\n        elif b[i] > a[i]:\n            if bob:\n                bob = False\n                alice = True\n            res.append(b[i] - a[i])\n        else:\n            res.append(0)\n    if alice:\n        return str(sum(res[:2])) +'' + str(sum(res[2:]))\n    else:\n        return str(sum(res[2:])) +'' + str(sum(res[:2]))"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b, n = map(int, stdin.split())\n    return \"{} {}\".format(min(a + b - n, n - a, n - b), max(a + b - n, n - a, n - b))\n\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a1, a2, a3 = map(int, stdin.readline().strip().split())\n    b1, b2, b3 = map(int, stdin.readline().strip().split())\n    return f\"{a3-a2+1} {n-a1-a3+b3-b2+1}\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    alice = [int(x) for x in stdin.readline().split()]\n    bob = [int(x) for x in stdin.readline().split()]\n    \n    def find(s: int, t: int) -> int:\n        r = 0\n        for _ in range(n):\n            if s == 0:\n                return r\n            if t == 0:\n                return n - r\n            if s == t:\n                r += 1\n            else:\n                if s > t:\n                    r += 1\n                    s -= 1\n                else:\n                    t -= 1\n    print(find(alice[0], bob[0]), find(alice[1], bob[1]), find(alice[2], bob[2]))\n    return ''\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the number of rounds for which Alice wins if she plays\n    rock-paper-scissors, after having taken up to $n$ rounds, where\n    $n$ is specified in the input.\n    \"\"\"\n    n = int(stdin)\n    n_a = int(stdin)\n    n_b = int(stdin)\n    n_a_possible = 0\n    n_b_possible = 0\n\n    for _ in range(n_a):\n        n_a_possible = (n_a_possible + n_b) % (n + 1)\n\n    for _ in range(n_b):\n        n_b_possible = (n_b_possible + n_a) % (n + 1)\n\n    return (n_a_possible, n_b_possible)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    seq = list(map(int, stdin.split('\\n')[1].split()))\n    seq.sort()\n    k = 0\n    sets = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if seq[j] > seq[i] + (j - i - 1):\n                sets.append((i + 1, j + 1))\n                k += 1\n    sets.sort(key=lambda x: seq[x[0] - 1] + seq[x[1] - 1])\n    for i in range(k):\n        print(sets[i][0], sets[i][1])\n    return ''\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return None\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n4 1 2 2 1 5 3\\n\")\n    3\n    >>> solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\")\n    2\n    >>> solution(\"4\\n1 1 1 1\\n\")\n    4\n    \"\"\"\n    a = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    s = set()\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if sum(a[i:j]) == 0:\n                s.add((i + 1, j + 1))\n    return str(len(s))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    # for i in range(len(a)):\n    #     if i == len(a) - 1:\n    #         a[i]\n    # for i in range(len(a)):\n    #     a[i]\n    #     a[i]\n    #     if i == len(a) - 1:\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i]\n    #         a[i"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a set of blocks such that every block has the same sum and no blocks intersect.\n\n    Args:\n        stdin (str): Input str\n\n    Returns:\n        str: Output str\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    A = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    A.sort()\n    s = sum(A)\n    \n    def find_set(d: int, S: int, N: int) -> list:\n        \"\"\"Finds a set of blocks which fulfill the requirements.\n\n        Args:\n            d (int): How many blocks have been already put in the set.\n            S (int): Sum of the blocks already in the set.\n            N (int): Current len of the set.\n\n        Returns:\n            list: Blocks\n        \"\"\"\n        if N == 1:\n            if S == s:\n                return [1]\n            else:\n                return []\n        else:\n            if S == s:\n                return [1] + find_set(0, 0, N - 1)\n            else:\n                return [] + find_set(0, S, N - 1)\n\n    S = 0\n    P = 0\n    for i, v in enumerate(A):\n        S += v\n        if S == s:\n            P = i\n        if S > s:\n            break\n\n    for i in range(P, n):\n        if A[i] < s:\n            P += 1\n            S += A[i]\n            if S == s:\n                break\n\n    blocks = find_set(0, 0, P)\n    print(len(blocks))\n    for l, r in blocks:\n        print(l, r)\n    return \"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import product\n    n, *a = map(int, stdin.split())\n    def nCr(n, r):\n        return n ** r * (n - r) ** (n - r) // math.factorial(r) // math.factorial(n - r)\n\n    def dfs(s, k):\n        if k == n:\n            return True\n        for i in range(s, n + 1):\n            if a[i] + a[i + 1] <= a[k]:\n                break\n            a[k] += a[i]\n            if dfs(i + 1, k + 1):\n                return True\n            a[k] -= a[i]\n        return False\n\n    for comb in product(range(1, n + 1), repeat=n):\n        if dfs(1, 0):\n            return str(len(set(comb)))\n        \nprint(solution(stdin.strip()))"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def fastMaxNumOfBlocks(n, a):\n        pass\n    \n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    if n == len(a):\n        max_count = 1\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if a[i] == a[j] and fastMaxNumOfBlocks(j - i) < max_count:\n                    max_count = fastMaxNumOfBlocks(j - i)\n                    if max_count == 2:\n                        return 2\n    return max_count\n    \n    \ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a set of blocks for the given input.\n\n    Args:\n        stdin: input on STDIN\n\n    Returns:\n        A set of blocks with the max number of blocks.\n    \"\"\"\n    num_blocks = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    set_blocks = set()\n    max_blocks = 0\n    for block_begin in range(0, num_blocks):\n        for block_end in range(block_begin, num_blocks):\n            if block_begin == block_end:\n                continue\n            if block_begin + 1 == block_end:\n                continue\n            sum_block = sum(numbers[block_begin:block_end + 1])\n            if sum_block in set_blocks:\n                continue\n            if max_blocks < block_end - block_begin + 1:\n                max_blocks = block_end - block_begin + 1\n                set_blocks = {sum_block}\n            else:\n                set_blocks.add(sum_block)\n    return str(max_blocks)\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the given problem\"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l, r = 0, n - 1\n    res = n\n    ans = []\n    while l <= r:\n        _sum = sum(a[l:r + 1])\n        if _sum < 0:\n            l += 1\n        elif _sum > 0:\n            r -= 1\n        else:\n            ans.append([l, r])\n            l += 1\n            r -= 1\n    for a in ans:\n        if a[1] - a[0] + 1 < res:\n            res = a[1] - a[0] + 1\n            ans_a = a\n    print(res)\n    print(*ans_a)\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n    stack = []\n    stack.append(arr[0])\n    result = []\n    for i in range(1, n):\n        while stack:\n            if stack[-1] > arr[i]:\n                stack.append(arr[i])\n                break\n            else:\n                stack.pop()\n        else:\n            stack.append(arr[i])\n    while stack:\n        result.append(stack.pop())\n    return 'YES' if sorted(result) == result else 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    stack = []\n    for i in range(n):\n        while stack and arr[stack[-1]] < arr[i]:\n            stack.pop()\n        if stack:\n            arr[stack[-1]] += 2\n        stack.append(i)\n    while stack:\n        if arr[stack[-1]] > arr[stack[-2]]:\n            stack.pop()\n        else:\n            break\n    if stack:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    result = []\n    for i in range(n):\n        result.append([arr[i], i])\n    result.sort(reverse=True)\n    for i in range(n):\n        if i == result[i][1]:\n            continue\n        else:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    res = []\n    max_height = 0\n    current_height = 0\n    for i in range(n):\n        if i % 2 == 0:\n            max_height = current_height\n        current_height += a[i]\n        if max_height < current_height:\n            max_height = current_height\n        if i % 2 == 1:\n            if max_height <= current_height:\n                res.append(max_height)\n            else:\n                res.append(current_height)\n            current_height -= max_height\n    print('YES' if a == res else 'NO')\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution to the previous problem.\n    \"\"\"\n   ...\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the array can be sorted using the described algorithm and 'NO' if it can not.\"\"\"\n    pass\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    arr = [int(i) for i in stdin[1].split(\" \")]\n    arr.append(0)\n    answer = []\n    stack = []\n    for i in arr:\n        if not stack:\n            stack.append(i)\n            continue\n        if stack[-1] == i:\n            stack.append(i)\n            continue\n        if stack[-1] < i:\n            stack.append(i)\n        else:\n            while stack:\n                if stack[-1] < i:\n                    stack.pop()\n                    continue\n                else:\n                    stack.append(i)\n                    break\n            if not stack:\n                stack.append(i)\n    for i in range(len(stack)):\n        answer.append(stack[i] - i)\n    if answer == arr:\n        return \"YES\"\n    else:\n        return \"NO\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n    n = int(stdin[0])\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    if n <= 0 or n > 10:\n        print(\"NO\")\n        return\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432\n    for i in stdin[1].split():\n        if int(i) < 0 or int(i) > 100:\n            print(\"NO\")\n            return\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u0432\u044b\u0432\u043e\u0434\u0430\n    answer = \"\"\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    array = []\n    # \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n    for i in stdin[1].split():\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443\n        if i == '':\n            break\n        # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n        array.append(int(i))\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u043f\u0438\u0441\u043a\u0430\n    def stack_sort(arr):\n        # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u0449\u0435\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n        step = 0\n        # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n        output = []\n        # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n        def sort(arr):\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0443\u0441\u0442\u043e\u0442\u0443\n            if len(arr) == 0:\n                return arr\n            # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n            output = []\n            # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n            def sort_helper(arr):\n                if len(arr) == 0:\n                    return arr\n                else:\n                    # \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432\n                    if arr[0] > arr[1]:\n                        output.append(arr[0])\n                        return sort_helper(arr[1:])\n                    # \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 \u0435\u0433\u043e \u043f\u043e\u0437\u0438\u0446\u0438\u044e\n                    elif arr[0] < arr[1]:\n                        output.append(arr[0])\n                        return sort_helper(arr[1:])\n                    # \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0440\u0430\u0432\u0435\u043d \u043f\u0435\u0440\u0432\u043e\u043c\u0443 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043f\u0443\u0441\u0442\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 \u0435\u0433\u043e \u043f\u043e\u0437\u0438\u0446\u0438\u044e\n                    else:\n                        output.append(arr[0])\n                        return sort_helper(arr[1:])\n            # \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n            sort_helper(arr)\n            # \u0432\u043e\u0437\u0432\u0440\u0430\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n            return output\n        # \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n        return sort(arr)\n    # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0431\u0435\u0437 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0441\u043f\u0438\u0441\u043e\u043a\n    def stack_sort_no_pop(arr):\n        # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n        output = []\n        # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n        def sort(arr):\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0443\u0441\u0442\u043e\u0442\u0443\n            if len(arr) == 0:\n                return arr\n            # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438\n            def sort_helper(arr):\n                if len(arr) == 0:\n                    return arr\n                else:\n                    # \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \ufffd"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"./data/input_0.txt\")\n    '3 5 4 5'\n    >>> solution(\"./data/input_1.txt\")\n    -1\n    >>> solution(\"./data/input_2.txt\")\n    0\n    >>> solution(\"./data/input_3.txt\")\n    0\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n\n    print(solution_runner(n, s, t))\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, s, t = stdin.split('\\n')\n    N = int(N)\n    s = list(s)\n    t = list(t)\n\n    def move(s, t):\n        i = 0\n        while i < N:\n            if s[i] == t[i]:\n                i += 1\n            else:\n                i0, i1 = i, i + 1\n                while i1 < N and s[i1] == t[i1]:\n                    i1 += 1\n                if i0 == i1:\n                    return -1\n                i0, i1 = i0 + 1, i1 - 1\n                while i0 < i1:\n                    s[i0], s[i1] = s[i1], s[i0]\n                    i0 += 1\n                    i1 -= 1\n                i += 1\n        return len(t) - len(s)\n\n    diff = move(s, t)\n    if diff == -1:\n        return '-1'\n    return str(diff)\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline())\n    s = stdin.readline()\n    t = stdin.readline()\n    s = list(s)\n    t = list(t)\n    while s!= t:\n        if s == t:\n            break\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                if s[i] == t[i+1]:\n                    s[i], t[i+1] = t[i+1], s[i]\n                else:\n                    s[i], t[i] = t[i], s[i]\n                break\n    s = ''.join(s)\n    if s == t:\n        print(0)\n        print(0)\n    elif s == t:\n        print(-1)\n        print(0)\n    else:\n        print(len(s))\n        print(len(s) - 1)\n        for i in range(len(s)):\n            print(i+1, s[i] == t[i])\n    return ''\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def swap_chars(s: str, i: int) -> str:\n        return s[:i] + s[i + 1] + s[i] + s[i + 2:]\n\n    s = stdin[0]\n    t = stdin[1]\n    k = 0\n    while s!= t:\n        s = swap_chars(s, k)\n        k += 1\n        if k >= 10 ** 4:\n            return '-1'\n    return k\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    s = list(stdin[1])\n    t = list(stdin[2])\n    result = []\n    for i in range(length):\n        for j in range(i + 1, length):\n            s[i], s[j] = s[j], s[i]\n            if s == t:\n                result.append(i + 1)\n            s[i], s[j] = s[j], s[i]\n    if not result:\n        return -1\n    return str(len(result)) +'' +''.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns any solution to the problem, or None if none is possible.\n    \"\"\"\n    source, target = stdin.split(\"\\n\")\n    source, target = list(source), list(target)\n    trans = []\n\n    if len(source)!= len(target):\n        return -1\n\n    for i in range(len(source)):\n        if source[i]!= target[i]:\n            trans.append(i)\n\n    return trans\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    if s.count(t)!= 1:\n        return -1\n    count = 0\n    for i in range(len(s)-1):\n        if s[i]!= t[i] and s[i+1]!= t[i+1]:\n            tmp = s[i]\n            s[i] = s[i+1]\n            s[i+1] = tmp\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print('SPPSS' if len(stdin) % 2 == 1 else 'PSPSPS')\n    return ''"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    prefixes, suffixes = set(), set()\n\n    for line in stdin.splitlines()[2:]:\n        if len(line) < length:\n            prefixes.add(line)\n        else:\n            suffixes.add(line)\n\n    if length % 2 == 0:\n        prefixes, suffixes = suffixes, prefixes\n\n    return 'P' * (len(prefixes) + len(suffixes)) + 'S' * (len(prefixes) + len(suffixes))"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    What are the prefixes and suffixes?\n    \n    The first string is a prefix of the second one if the second string is a substring of the first one.\n    The second string is a suffix of the first one if the first string is a substring of the second one.\n    The solution is given in the first column, the solution does not count as a substring of the first string.\n\n    For example, if the first string is \"ab\", then the prefixes are \"\", \"a\", \"ab\", \"aba\", \"abab\", \"ababa\", \"ababab\", \"abababa\", \"abababab\", \"ababababa\" and the suffixes are \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\", \"b\".\n    '''\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    \n    for i in range(2*n-2):\n        prefixes, suffixes = set(), set()\n        string = stdin.split('\\n')[i+1]\n        for s in stdin.split('\\n')[1:]:\n            if len(s) < len(string) and s not in suffixes and s not in prefixes:\n                prefixes.add(s)\n            if len(s) > len(string) and s not in prefixes and s not in suffixes:\n                suffixes.add(s)\n        print('P' if ''.join(prefixes) in string else 'S', end='')\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    prefix = set()\n    suffix = set()\n    for _ in range(n):\n        pref, suf = stdin.split()\n        prefix.add(pref)\n        suffix.add(suf)\n    # print(prefix)\n    # print(suffix)\n    for pref in prefix:\n        if pref in suffix:\n            print(pref + pref[::-1])\n\nsolution(input())"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length: int = int(stdin)\n\n    arr = []\n\n    for _ in range(0, length * 2 - 2):\n        arr.append(stdin.readline().strip())\n\n    prefixes = {}\n    suffixes = {}\n\n    for i in range(1, length + 1):\n        for prefix in arr:\n            if prefix[:i] not in prefixes.keys():\n                prefixes[prefix[:i]] = 1\n            else:\n                prefixes[prefix[:i]] += 1\n\n        for suffix in arr:\n            if suffix[-i:] not in suffixes.keys():\n                suffixes[suffix[-i:]] = 1\n            else:\n                suffixes[suffix[-i:]] += 1\n\n    stdout = []\n\n    for prefix in prefixes:\n        if prefix in suffixes.keys():\n            if prefixes[prefix]!= suffixes[prefix]:\n                stdout.append('S')\n            else:\n                stdout.append('P')\n        else:\n            stdout.append('S')\n\n    return ''.join(stdout)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:2] + (\"S\" * len(stdin)) + stdin[-2:]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    \n    for i in range(len(a)-1):\n        if a[i] + 1!= a[i+1]:\n            return i+1\n\n    return len(a) + 1"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/programmers/lessons/6-sorting/number_of_disc_intersections/\n    '''\n    intersection = 0\n    a = sorted([int(i) for i in stdin.split()])\n    left = a[0]\n    right = a[1]\n    for i in range(len(a)):\n        if a[i] == left:\n            intersection += 1\n            left += 1\n        if a[i] == right:\n            right += 1\n            intersection -= 1\n    return intersection"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split(\" \")]\n    sorted_a = sorted(a)\n    return sorted_a[-1]\n\n\nsolution(\"2 4 6 8 10\")\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    list_numbers = list(map(int, stdin.split()))\n    list_numbers.sort()\n    for i in range(0, len(list_numbers)-1):\n        if list_numbers[i+1] - list_numbers[i] < 5:\n            return i+1\n    return len(list_numbers)\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    ascending = sorted(numbers)\n    delta = ascending[1] - ascending[0]\n    for index, number in enumerate(numbers):\n        if (number - ascending[index - 1])!= delta:\n            return index + 1\n    return index + 2"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    arr = list(map(int, stdin.split()))\n    for i in range(0, len(arr)):\n        if arr[i] == 4:\n            count += 1\n    return count\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(i) for i in stdin.split(' ')]\n    return len(array) - array.index(min(array))"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution for https://adventofcode.com/2015/day/2'''\n    return 1"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(s) for s in stdin.split('\\n')[1].split()]\n    lights = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            lights += 1\n        else:\n            lights = 0\n        if lights == 2:\n            return str(i)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    for i in range(n):\n        if a[i] == 0 and a[(i + 1) % n] == 0:\n            k = i\n    return k\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lights = list(map(int, stdin.readline().split()))\n    counter = 0\n    for i in range(n):\n        if lights[i] == 0:\n            for j in range(i + 1, n):\n                if lights[j] == 1:\n                    lights[i] = lights[j] = 1\n                    counter += 1\n                    break\n    return str(counter)"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = list(map(int, stdin.split(\"\\n\")[0].split()))\n    count = 0\n    for i in range(1, len(a) - 1):\n        if a[i - 1] == 1 and a[i + 1] == 1 and a[i] == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the best answer with the maximum number of people being disturbed\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    lst = list(map(int, stdin.split('\\n')[1].split()))\n    if all([i in [0, 1] for i in lst]):\n        return str(0)\n    curr = 0\n    ans = 0\n    while curr < n:\n        if lst[curr] == 0:\n            if curr + 1 < n and lst[curr + 1] == 0:\n                curr += 2\n                ans += 1\n            else:\n                curr += 1\n        else:\n            curr += 1\n    return str(ans)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    b = []\n    c = 0\n    for i in range(len(a)):\n        if a[i] == 1:\n            c += 1\n            if i > 1 and a[i - 1] == 1 and a[i - 2] == 1:\n                b.append(c)\n                c = 0\n            if i < n - 1 and a[i + 1] == 1 and a[i + 2] == 1:\n                b.append(c)\n                c = 0\n    return str(min(b))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom itertools import permutations\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an empty string.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import deque\n\nn = int(stdin.readline().strip())\nstate = [int(x) for x in stdin.readline().split()]\nqueue = deque(state)\ncounter = 0\n\nwhile queue:\n    current = queue.popleft()\n    if current == 0:\n        counter += 1\n    elif current == 1:\n        queue.append(1)\n        counter = 0\n    if counter == n - 1:\n        break\n\nprint(counter)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    x = 1\n    for number in numbers:\n        x *= (number // x + 1)\n        x %= number\n    return str(x)"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string solution to this problem.\"\"\"\n    # BEGIN_YOUR_ANSWER (our solution is 1 line of code, but don't worry if you deviate from this)\n    return str(len(set(stdin.split()[1:])))\n    # END_YOUR_ANSWER\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem: \"ArrayDivision\"\n\n    :param stdin: Input str\n    :return: Output str\n    \"\"\"\n    # Get input and split\n    lines = stdin.split('\\n')\n\n    # Get number of lines\n    n = int(lines[0])\n\n    # Initialize result\n    result = 0\n\n    # Get input\n    a = list(map(int, lines[1].split(' ')))\n\n    # Loop through elements\n    for el in a:\n        # Loop through all elements\n        for e in a:\n            # If element is a multiple of element\n            if el % e == 0:\n                # Increment counter\n                result += 1\n\n    # Return result\n    return str(result)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 4 5\n   ... ''')\n    '4'\n    >>> solution('''6\n   ... 6 90 12 18 30 18\n   ... ''')\n    '4'\n    \"\"\"\n   ...\n    pass\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    sum_arr = sum(arr)\n    divisors = [1] * n\n    divisors_dict = dict()\n    for i in range(n):\n        for j in range(n):\n            if arr[i] % arr[j] == 0:\n                if i == j:\n                    divisors[i] += 1\n                else:\n                    divisors[i] += 1\n                    divisors_dict[arr[i]] = divisors_dict.get(arr[i], 0) + 1\n                    divisors_dict[arr[j]] = divisors_dict.get(arr[j], 0) + 1\n    divisors_dict = dict(sorted(divisors_dict.items()))\n    total_divisors = 1\n    for value in divisors_dict.values():\n        total_divisors *= value + 1\n    if total_divisors == sum_arr:\n        return n\n    else:\n        return n - total_divisors + sum_arr\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The naive solution can be made more efficient by dividing it into two parts:\n    1. compute the common divisors of all the numbers\n    2. go through the array and keep track of the amount of common divisors\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    common_divisors = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1, i):\n            common_divisors[j] += 1\n\n    result = 0\n    for i in a:\n        result += common_divisors[i]\n\n    return result\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"solution function\n\n    Args:\n        stdin (str): stdin string\n\n    Returns:\n        str: solution function result\n    \"\"\"\n    # your code here\n    return ''\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution(a), \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0443\u044e \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 $n$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0443\u044e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2013 \u0447\u0438\u0441\u043b\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430.\n\n    :param str:\n    :return:\n    '''\n\n    pass\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin.readline())\n    # a = [int(i) for i in stdin.readline().split()]\n    a = [2,4,6,2,10]\n    divisor = 0\n    for x in a:\n        for y in a:\n            if x % y == 0:\n                divisor += 1\n                if y == 1:\n                    break\n    return divisor"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solve(stdin))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count)"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    # input --> arr\n\n    # sort the array\n    # output --> arr\n    \n    # put the array into a dict with the key as the value\n    # output --> dict\n    \n    # loop through the dict\n    # if dict[key] == 1, then return dict.get(key)\n    # else set dict[key] = dict.get(key) - 1\n    # return dict.get(key)\n    pass\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6\\n1 2 4 3 3 2\\n')\n    2\n    \"\"\"\n    n = int(stdin)\n    coins = [int(c) for c in stdin.split()]\n    return min(Counter(coins).values())\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(5))\n    1\n    \"\"\"\n    stdin = stdin.split()\n    a = [int(i) for i in stdin]\n    a.sort()\n    for i in range(len(a)):\n        if i > 0 and a[i] == a[i - 1]:\n            return i + 1\n    return len(a)"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(n // m + (n % m > 0))\n\"\"\"\n\nimport unittest\nimport random\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    a.sort()\n    l = [a[i] for i in range(len(a) - 1) if a[i]!= a[i + 1]]\n    print(len(l))\n\n\nsolution(input())\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nn, r = map(int, input().split())\n\narray = list(map(int, input().split()))\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if k < n:\n        return -1\n    if k == n:\n        return 0\n    a = [int(i) for i in stdin.split()]\n    res = n\n    for i in range(n):\n        if i - k > 0:\n            res = min(res, max(i - k, 1))\n        if i + k < n:\n            res = min(res, max(i + k, 1))\n    if res == n:\n        return -1\n    return res\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    return''.join(map(str, solution()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. Feel free to use as many code cells as needed,\n    but use the standard input/output hooks that we've provided in order to\n    perform input/output operations.\n\n    You can assume that input will always be valid and of the form `n m`, where\n    `n` is an integer in range [0, 1000] and `m` is a non-negative integer.\n\n    If you're using standard input, make sure to use `stdin.readline()` and not\n    `input()` for the first line, as `input()` does not necessarily return\n    strings, which is required by the project.\n    \"\"\"\n\n    return \"42\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    counter = 0\n    for i in range(N):\n        if house[i] == 1:\n            j = 1\n            while i + j < N:\n                if house[i + j] == 0:\n                    break\n                j += 1\n            if i + j == N:\n                counter += 1\n            else:\n                if j >= R:\n                    counter += 1\n    if counter >= N:\n        return str(counter)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution with big-o time complexity\n    \"\"\"\n    (n, r) = (int(number) for number in stdin.split())\n    arr = [int(char) for char in stdin.split()[1:]]\n    house = [0] * n\n    for pos in range(n):\n        house[pos] = 1 if arr[pos] == 1 else 0\n    result = 1\n    for pos in range(1, n):\n        if house[pos] == 0 and house[pos - 1] == 1:\n            result += 1\n    for pos in range(n - 2, -1, -1):\n        if house[pos] == 0 and house[pos + 1] == 1:\n            result += 1\n    if result < r:\n        return str(result)\n    return '-1'\n    pass\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # cast to list as string is immutable\n    string_list = list(stdin)\n    # get number of elements and heaters\n    n, r = int(string_list[0]), int(string_list[1])\n    # set starting heaters\n    heaters = []\n    # loop through n\n    for i in range(n):\n        # set element to i and add to list\n        heaters.append(int(string_list[2 + i]))\n    # get length of list\n    length = len(heaters)\n    # set answer to 0\n    answer = 0\n    # set first and last points\n    first_point = 0\n    last_point = length - 1\n    # loop through all points\n    while True:\n        # set max heaters to 0\n        max_heaters = 0\n        # loop through first and last points\n        for i in range(first_point, last_point + 1):\n            # loop through heaters\n            for j in range(len(heaters)):\n                # if heater is at point i\n                if i == heaters[j]:\n                    # increment heaters\n                    heaters[j] += r\n                    # if heaters are greater than 1\n                    if heaters[j] > 1:\n                        # increment heaters\n                        heaters[j] -= 1\n                    # set heaters to 1\n                    else:\n                        # set heaters to 0\n                        heaters[j] = 0\n            # set max heaters to max of heaters\n            if max(heaters) > max_heaters:\n                # set max heaters to max of heaters\n                max_heaters = max(heaters)\n        # if max heaters is less than 1\n        if max_heaters < 1:\n            # set answer to -1\n            answer = -1\n            break\n        # if max heaters is greater than 1\n        elif max_heaters >= 1:\n            # set answer to max heaters\n            answer = max_heaters\n            break\n        # increment first point\n        first_point += 1\n        # set last point to length - 1\n        last_point = length - 1\n    # return answer\n    return str(answer)\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split()\n    n, r = int(n), int(r)\n    house = [int(i) for i in stdin.split()]\n\n    # \u041e\u0431\u0445\u043e\u0434 \u043f\u043e \u0432\u0441\u0435\u043c \u043f\u043e\u0437\u0438\u0446\u0438\u044f\u043c\n    for i in range(n):\n        if house[i] == 0:\n            continue\n\n        pos = i\n        l, r = max(0, pos - r + 1), min(pos + r - 1, n - 1)\n\n        while l <= r:\n            if house[l] == 1:\n                house[l] = 2\n                break\n            l += 1\n        while l <= r:\n            if house[r] == 1:\n                house[r] = 2\n                break\n            r -= 1\n    \n    return str(house.count(2))\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    res = 0\n    for A in range(1, N):\n        B = N // A\n        res += B\n    return res\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solution.count)"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0\n    for a in range(1, N+1):\n        b = N - a\n        if a * b / 2 >= a:\n            continue\n        c = N - a - b\n        if a*b/2 >= c:\n            continue\n        if a*b/2 == c and a*b*c/6 == N:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = 0\n    for a in range(1, n // 2 + 1):\n        b = n - a\n        if b % a == 0:\n            c = b // a\n            if a ** 2 + c ** 2 == n:\n                res += 1\n    print(res)\n    return\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the number of tuples of integers that satisfy A \\times B + C = N, given N.\n    :param stdin: Input of integers of length N.\n    :return: Number of tuples of integers that satisfy A \\times B + C = N.\n    '''\n\n    A, B, C = stdin.strip().split(' ')\n    A, B, C = int(A), int(B), int(C)\n\n    if A == 1 and B == 1 and C == 2:\n        return int(1)\n\n    count = 0\n    for x in range(1, A + 1):\n        for y in range(1, B + 1):\n            if (A * x + B * y) == C:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return f'{math.factorial(int(stdin))}'"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for A in range(1, N+1):\n        for B in range(1, N+1):\n            if A*B < N:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    \n    n_1 = 0\n    n_2 = 0\n\n    for bracket in s:\n        if bracket == '(':\n            n_1 += 1\n        else:\n            n_2 += 1\n\n    ans = 0\n\n    if n_1 == n_2:\n        ans = 1\n\n    elif n_1 == 0:\n        ans = n\n\n    elif n_1 < n_2:\n        ans = n_1\n\n    elif n_1 - n_2 > 0:\n        ans = n_1 - n_2\n\n    return ans\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n):\n        if stdin[i] == '(':\n            count += 1\n        else:\n            count -= 1\n        if count == -1:\n            return i+1\n    return 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of positions that if you change the type of the bracket, the resulting bracket sequence becomes regular.\n\n    >>> solution('(((())))')\n    3\n    >>> solution('())')\n    0\n    >>> solution('(())(())')\n    3\n    >>> solution('()()')\n    0\n    \"\"\"\n    brackets = stdin.split('\\n')[0]\n    count = 0\n    for index, bracket in enumerate(brackets):\n        if bracket == '(' and brackets[index + 1] == ')':\n            count += 1\n    return count\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(n):\n        if s[i] == ')':\n            if i > 0 and s[i-1] == '(':\n                count += 1\n            if i < n - 1 and s[i+1] == ')':\n                count += 1\n    return count\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #!/bin/python3\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0438 \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0441\u043a\u043e\u0431\u043e\u043a\n    # \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445 \u043e\u0442 \u043d\u0435\u0451\n    # \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u0435\u0441\u043b\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445\n    # \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u043a\u043e\u0431\u043e\u043a\n    # \u0438 \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u0438\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u043a\u043e\u0431\u043e\u043a\n    # \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0435\u0441\u043b\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445\n    # \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445 \u043d\u0443\u043b\u0435\u0432\u043e\u0435, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0440\u0430\u0432\u043d\u044b\n\n    # \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445\n    opened = 0\n    closed = 0\n\n    # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n    data = stdin.split('\\n')\n    n = int(data[0])\n\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0438 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u043a\u043e\u0431\u043e\u043a\n    for i in range(n):\n        if data[1][i] == '(':\n            opened += 1\n        if data[1][i] == ')':\n            closed += 1\n\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n    # \u0435\u0441\u043b\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445\n    # \u044d\u0442\u043e \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\n    if opened > closed:\n        result = opened - closed\n    # \u0435\u0441\u043b\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u043c\u0435\u043d\u044c\u0448\u0435 \u0437\u0430\u043a\u0440\u044b\u0442\u044b\u0445\n    # \u044d\u0442\u043e \u043d\u0443\u043b\u0435\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\n    if closed == opened:\n        result = 0\n    # \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n    return result\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(calc(stdin))\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    min_length = len(stdin)\n    for i in range(len(stdin)):\n        if i < min_length:\n            min_length = i\n            result = stdin[:i]\n        for j in range(i, len(stdin)):\n            if stdin[i:j] * (len(stdin) - i) == stdin[j:]:\n                result = stdin[:i]\n                break\n    return len(result)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length_s = len(stdin)\n    length_t = len(stdin)\n    while length_t > 0:\n        if stdin[:length_t] == stdin[length_t:length_t * 2]:\n            break\n        length_t -= 1\n    return length_t\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    len_s = len(stdin)\n    len_t = len(stdin)\n    stdin = stdin + stdin\n    stdin = stdin + stdin\n\n    # total_len = len_s + len_t\n    # pattern = f\"{total_len}b{total_len}b\"\n    #\n    # for i in range(len_s):\n    #     stdin = stdin.replace(pattern[i:i + len_s], \"\")\n\n    stdin = stdin[len_s * 2:]\n    return len(stdin)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    print(s)\n    print(t)\n    return \"3\""
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    count = 0\n    for i in range(len(s)):\n        if t in s:\n            count = len(s)\n            break\n        s = s[1:] + s[0]\n    return count\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    substring = stdin[1:len(stdin)]\n    if string.find(substring) == -1:\n        return 0\n    return len(string)-len(substring)\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    sub = stdin.strip()\n    t = sub[::-1]\n    print(len(s) - s.find(t))"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return max(len(stdin) - stdin.rfind(s), len(s) - stdin.find(s))\n    pass\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum length of the substring you can remove from the string so that $t$ is still a subsequence of $s$.\n    \"\"\"\n    return len(stdin) - stdin.find(stdin[0:stdin.rfind(stdin[0])])\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split(' ')))\n    return str(max(int(a * b), int(c * d)))"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    return str(max(a * b, c * d))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    x = max(a, c)\n    y = min(b, d)\n    return str(x * y)"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a * b, c * d))"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return max(a * d, c * b)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.strip().split(' ')]\n    result = 1\n    for i in range(c, d + 1):\n        result *= i\n    for i in range(a, b + 1):\n        result //= i\n    return result\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    result = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            result = max(result, x * y)\n    return str(result)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x = max(min(b, d) - max(a, c), 0)\n    y = max(min(d, c) - max(a, b), 0)\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    x = max(min(b,c)-1,0)\n    y = max(min(d,a)-1,0)\n    return str(x*y)"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    x = A[0]\n    y = A[1]\n    if x == 1:\n        return y - 1\n    else:\n        return y - 1\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    return str(sum(1 for d_i in d if d_i >= 5))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return '0'\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''1. Read input lines.\n       2. Return answer.\n    '''\n    # your code here\n    return '\\n'.join(map(lambda x: str(int(x) + 1), stdin.split()))"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # This function return the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same.\n    # It is given in the problem statement, so I think we need to find N, K, and d_i.\n    # In this problem, we are given N, d_i, and K as input.\n    # We can find N by the following code:\n    N = int(stdin[0])\n    # We can find K by the following code:\n    d = stdin.split('\\n')[1].split()\n    # We can find d_i by the following code:\n    d = [int(i) for i in d]\n    # We can find the number of problems in ARCs by the following code:\n    count = 0\n    for i in d:\n        if i > N//2:\n            count += 1\n    # We can find the number of problems in ABCs by the following code:\n    count -= sum(i < N//2 for i in d)\n    # We can find the number of choices of the integer K that make the number of problems for ARCs and the number of problems for ABCs the same by the following code:\n    count = min(count, N//2)\n    return str(count)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, d = [int(c) for c in stdin.split()]\n    if N % 2!= 0:\n        raise ValueError('N must be even.')\n    \n    K = N // 2\n    return str(K - min([n//K for n in d]))"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\n9 1 4 4 6 7\")\n    2\n    \"\"\"\n    total_problem_arc, total_problem_abc = 0, 0\n    n = int(stdin)\n    arcs = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    for d in arcs:\n        total_problem_arc += 2 * d\n        total_problem_abc += 2 * d - 1\n    return str(min(total_problem_arc, total_problem_abc) // 2)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *arr = map(int, stdin.split())\n    s = sum(arr)\n    A = s - N\n    return str(A // 2)"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Your code goes here.\n    return ''\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to problem\n    \"\"\"\n    # Get input from the standard input\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    d = [int(line) for line in lines[1].split()]\n    # Compute the answer to the problem\n    answer = 0\n    # For all elements d_i\n    for d_i in d:\n        # Find the number of problems for ARCs\n        arcs = d_i // 2\n        # If the number of problems for ARCs is greater than or equal to the number of problems for ABCs,\n        # increment the answer\n        if arcs >= N // 2:\n            answer += 1\n    # Return the answer to the problem\n    return str(answer)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = [0] + list(map(int, stdin.split()))\n    print(n)\n    print(h)\n    print(l)\n    print(r)\n    print(a)\n    return '1'\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(c) for c in stdin.split(' ')]\n    a = [int(c) for c in stdin.split(' ')[1:]]\n    good_times = 0\n    for i in range(n):\n        a[i] = a[i] - 1\n        if i == 0:\n            if l <= a[i] <= r:\n                good_times += 1\n        else:\n            if l <= a[i] <= r:\n                good_times += 1\n    return good_times\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    for i in range(n):\n        arr[i] += i * h\n    arr.sort()\n    cnt = 0\n    for i in range(n):\n        if arr[i] >= l and arr[i] <= r:\n            cnt += 1\n    return cnt\n\nprint(solution(input()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    times = list(map(int, stdin.split()))\n    n, h, l, r = times[0], times[1], times[2], times[3]\n    l_index = -1\n    r_index = -1\n    for i in range(n):\n        if l <= times[4 + i] <= h:\n            l_index = i\n        if l - 1 <= times[4 + i] <= r:\n            r_index = i\n\n    return max(r_index - l_index, 0)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max(a, b):\n        if a > b:\n            return a\n        else:\n            return b\n    \n    l = list(map(int, stdin.split(' ')))\n    a = l[2:len(l)-1]\n    a = list(map(int, a))\n    h = l[0]\n    n = l[1]\n    num = 0\n    for i in range(n):\n        a[i] = a[i] - 1\n        if a[i] <= 0:\n            a[i] = h\n        if a[i] + 1 >= h:\n            if i == n-1:\n                num += 1\n            continue\n        num += 1\n    print(num)\n\nsolution(\"7 24 21 23 16 17 14 20 20 11 22\")"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(n):\n        if a[i] >= l and a[i] <= r:\n            count += 1\n        else:\n            if a[i] >= l and a[i] - 1 <= r:\n                count += 1\n    return count\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    s = 0\n    for i in range(n):\n        s = max(s, a[i] + (h - l) + i)\n    return s\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input and returns the output\"\"\"\n    _, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(h):\n        for a_i in a:\n            if i + a_i - 1 < l:\n                break\n            elif i + a_i - 1 > r:\n                continue\n            else:\n                count += 1\n    return count\n\n\"\"\"\nExplanation:\n\nWe go through each hour from 0 to 23. We pick an hour $h$ and see how many hours we can skip. If we pick $l$ as the first hour we can skip some hours, and if we pick $r$ as the last hour we can skip some more hours. The number of hours we can skip with the current hour $h$ is the value $a_h$ of the array. We pick the value $a_h$ from the array because we can skip any number of hours, so we just need to pick the maximum value from the array.\n\nThen we go through the array from left to right and keep track of the hours we can skip. Once we reach the $l$ or $r$ hours, we increase the number of good hours and continue with the next hour.\n\nAfterwards we just count the values in the array.\n\"\"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    good = 0\n    t = 0\n    while t < h:\n        if t+a[0] > l and t+a[0] < r:\n            good += 1\n        else:\n            good += 1\n            t += a[0]\n        t += a[0]\n    return good\n\n\n\n-----Explanation-----\n\nThe time at which Vova is able to sleep is determined by $t+a_1$, $t+a_2$,..., $t+a_n$ (the second argument is the initial time). If $t+a_i$ is between $l$ and $r$, then the time is good, and we count it.\n\n\n\"\"\"\n\nn, h, l, r = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\ngood = 0\nt = 0\nwhile t < h:\n    if t+a[0] > l and t+a[0] < r:\n        good += 1\n    else:\n        good += 1\n        t += a[0]\n    t += a[0]\nprint(good)"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n = len(a)\n    if n == 1:\n        return 1\n    i = 0\n    while i < n - 1:\n        if a[i] >= 2 * a[i + 1]:\n            i += 1\n        elif a[i] * 2 < a[i + 1]:\n            i += 1\n        elif a[i] * 2 >= a[i + 1] and 2 * a[i] < a[i + 1]:\n            break\n        else:\n            break\n    return i + 1\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 7 12 100 150 199\")\n    4\n    \"\"\"\n    stdin = list(map(int, stdin.split()))\n    n = stdin.pop(0)\n    p = []\n    while stdin:\n        a = stdin.pop(0)\n        for i in range(len(p)):\n            if p[i] > a * 2:\n                continue\n            if p[i] == a * 2 or p[i] > a:\n                break\n            p[i] = a\n            break\n        else:\n            p.append(a)\n    return len(p)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    arr = sorted(arr)\n    diffArr = []\n    for i in range(len(arr) - 1):\n        diffArr.append(arr[i + 1] - arr[i])\n    print(arr)\n    print(diffArr)\n    diffArr.sort()\n    print(diffArr)\n    maxDiff = diffArr[-1]\n    ans = 0\n    for i in range(len(diffArr) - 1):\n        if (2 * diffArr[i] < maxDiff):\n            ans += 1\n    print(ans + 1)\n    return \"A\""
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    nums = [int(item) for item in inputs[1].split(' ')]\n    max_diff = 0\n    count = 0\n    i = 0\n    while i < n - 1:\n        diff = nums[i + 1] - nums[i]\n        if diff > max_diff:\n            max_diff = diff\n            count = 1\n        elif diff == max_diff:\n            count += 1\n        i += 1\n    return str(max_diff)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # print(arr)\n    arr.sort()\n    # print(arr)\n    # m = n - arr[-1]\n    # if m == 1:\n    #     return 1\n    # if m > 2:\n    #     return 2\n    # else:\n    #     return m\n    m = 0\n    for i in range(n):\n        if i > 0:\n            # print(i, arr[i] / 2)\n            if arr[i] > 2 * arr[i - 1]:\n                m = m + 1\n    # print(m)\n    return m\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split(' ')))\n    dic = {}\n    for i in arr:\n        for j in arr:\n            lcm = i * j\n            if lcm in dic:\n                dic[lcm].add(i)\n            else:\n                dic[lcm] = {i}\n\n    for i in arr:\n        for j in arr:\n            lcm = i * j\n            if i in dic[lcm] and j in dic[lcm]:\n                print(i, j)\n\nsolution(input())"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 4 8 3 6''')\n    1 2\n    \"\"\"\n    n = int(stdin.split()[0])\n    arr = [int(i) for i in stdin.split()[1].split(' ')]\n    arr.sort()\n    min_ = 10 ** 7\n    idx = -1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] < min_:\n                min_ = arr[i] * arr[j]\n                idx = i\n                idx_ = j\n    return f\"{idx + 1} {idx_ + 1}\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''https://app.codility.com/demo/results/training9YDEKQ-YSA/'''\n    def gcd(a, b):\n        while b:\n            a, b = b, a%b\n        return a\n    def lcm(a, b):\n        return a*b // gcd(a, b)\n    \n    \n    n = int(stdin.readline().strip())\n    numbers = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    numbers = sorted(numbers, reverse=True)\n    \n    for i in range(len(numbers)):\n        print(numbers[i], i+1)\n    \n    print(lcm(numbers[0], numbers[1]))\n    return ''"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin)\n    numbers = [int(x) for x in stdin.split()]\n\n    # start solving\n    min_lcm = math.inf\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if min_lcm > math.gcd(numbers[i], numbers[j]):\n                min_lcm = math.gcd(numbers[i], numbers[j])\n                result = [i + 1, j + 1]\n\n    # return result\n    return''.join([str(x) for x in result])\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/training9QPJT3-S3G/\"\"\"\n    num = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    x = a[0]\n    for i in range(1, num):\n        if x < a[i] * a[i - 1]:\n            x = a[i] * a[i - 1]\n    x_2 = 1\n    for i in range(num):\n        if x_2 < x // a[i]:\n            x_2 = x // a[i]\n    print(1, num - 1)\n    return 0\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n = int(stdin.readline().strip())\n    l = sorted(map(int, stdin.readline().strip().split()))\n    m = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            m.append(lcm(l[i], l[j]))\n    return''.join(map(str, [i for i in range(n) if m[i] == min(m)]))\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Your code here\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    n, *a = map(int, stdin.split())\n    m = float('inf')\n    res = [0, 0]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            l = lcm(a[i], a[j])\n            if l < m:\n                m = l\n                res[0], res[1] = i + 1, j + 1\n    print(*res)\n    return ''\n\nprint(solution(input()))"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n2 4 8 3 6\\n\")\n    '1 2'\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    lcm = a[0]\n    for i in range(1, n):\n        lcm = lcm * a[i] // gcd(lcm, a[i])\n    i, j = 0, 0\n    while j < n:\n        if lcm % a[j] == 0:\n            i = j\n        j += 1\n    return str(i + 1) +'' + str(j)\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt0 = stdin.count('0')\n    cnt1 = stdin.count('1')\n    cnt2 = stdin.count('2')\n\n    if n == 1:\n        return '0' if cnt0 == 1 else '2'\n    elif n == 2:\n        return '1' if cnt1 == 1 else '2'\n    else:\n        if cnt0 >= n - cnt0:\n            return '0' * (n - cnt0) + '1' * cnt1 + '2' * cnt2\n        else:\n            return '1' * (n - cnt1) + '2' * cnt2 + '0' * cnt0\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    num_0 = 0\n    num_1 = 0\n    num_2 = 0\n    for c in stdin:\n        if c == '0':\n            num_0 += 1\n        elif c == '1':\n            num_1 += 1\n        else:\n            num_2 += 1\n    if num_0 % 3 == 0:\n        return stdin.replace('0', '2').replace('1', '0').replace('2', '1')\n    elif num_1 % 3 == 0:\n        return stdin.replace('0', '0').replace('1', '2').replace('2', '1')\n    else:\n        return stdin.replace('0', '1').replace('1', '0').replace('2', '2')\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('121')\n    '021'\n    >>> solution('120110')\n    '120120'\n    \"\"\"\n    N = len(stdin)\n    k = N // 3\n\n    s = [0] * N\n    if stdin[0] == '0':\n        s[0] = 0\n    elif stdin[0] == '1':\n        s[0] = 1\n    else:\n        s[0] = 2\n    for i in range(1, N):\n        if stdin[i] == '0':\n            s[i] = 0\n        elif stdin[i] == '1':\n            s[i] = 1\n        else:\n            s[i] = 2\n\n    for i in range(1, k + 1):\n        p = s.copy()\n        for j in range(i, N - i):\n            if s[j] == 0:\n                s[j] = 2\n            elif s[j] == 1:\n                s[j] = 0\n            else:\n                s[j] = 1\n            if s[j] < p[j]:\n                p[j] = s[j]\n        s = p\n    return ''.join([str(c) for c in s])\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # \n    # TODO: Complete the implementation of this function\n    # \n    # The function must return a string which is a balanced ternary string.\n    # The number of '0's must be equal to the number of '1's, and the number of '1's must be equal to the number of '2's.\n    # The answer must be lexicographically (alphabetically) smallest.\n    # \n    # You can replace the given characters with characters '0', '1' and '2' only.\n    # It is guaranteed that the answer exists.\n    # \n    # You are not allowed to remove characters from the string.\n    # You are not allowed to add characters to the string.\n    # You are not allowed to replace characters in the string.\n    # \n    # Input\n    # The first line of the input contains one integer $n$ ($3 \\le n \\le 3 \\cdot 10^5$, $n$ is divisible by $3$) \u2014 the number of characters in $s$.\n    # The second line contains the string $s$ consisting of exactly $n$ characters '0', '1' and '2'.\n    # \n    # Output\n    # Print one string \u2014 the lexicographically (alphabetically) smallest balanced ternary string which can be obtained from the given one with minimum number of replacements.\n    # \n    # It is guaranteed that the answer exists.\n    # \n    # There is only one possible answer.\n    # \n    # \n    # Constraints: 3 <= |s| <= 10^5, 0 <= s[i] <= 2\n    # \n    # Examples\n    # Input:\n    # 3\n    # 121\n    # Output:\n    # 021\n    # \n    # Input:\n    # 6\n    # 000000\n    # Output:\n    # 000122\n    # \n    # Input:\n    # 6\n    # 120110\n    # Output:\n    # 120120\n    # \n    # Input:\n    # 6\n    # 211200\n    # Output:\n    # 211200\n    # \n    # \n    # \n    #\n    # TODO: Complete this function implementation\n    # \n    # \n    n = int(stdin.readline())\n    ternary = stdin.readline()\n    sorted_chars = sorted(ternary)\n    if n % 3!= 0:\n        print('0' * (n % 3))\n    else:\n        count_0 = int(n/3)\n        count_1 = int(n/3)\n        count_2 = int(n/3)\n        for char in ternary:\n            if char == '0':\n                count_0 -= 1\n            elif char == '1':\n                count_1 -= 1\n            elif char == '2':\n                count_2 -= 1\n        while count_0 > 0 or count_1 > 0 or count_2 > 0:\n            if count_0 > 0:\n                ternary = ternary[:3] + '0' + ternary[3:]\n                count_0 -= 1\n            elif count_1 > 0:\n                ternary = ternary[:3] + '1' + ternary[3:]\n                count_1 -= 1\n            elif count_2 > 0:\n                ternary = ternary[:3] + '2' + ternary[3:]\n                count_2 -= 1\n        print(ternary)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6\\n120110')\n    '120120'\n    \"\"\"\n    n = int(stdin)\n    if n % 3!= 0:\n        raise ValueError(\"invalid number of characters\")\n    a = stdin.replace('1', '0')\n    a = a.replace('2', '1')\n    a = a.replace('0', '2')\n    return a\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = [0] * 3\n    for ch in s:\n        count[int(ch)] += 1\n    i = 0\n    while i < len(count) - 1 and count[i] >= count[i + 1]:\n        i += 1\n    if i == len(count) - 1:\n        return \"0\" * len(s)\n    j = len(s) - 1\n    while j > 0 and count[j] >= count[j - 1]:\n        j -= 1\n    return s[:j] + chr(i + ord('0')) * (len(s) - j) + \"2\" * (len(s) - j)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin[0])\n    if size == 1:\n        print('0')\n        return\n\n    # \u524d\u51e6\u7406\n    # 0\u304c1\u306e\u6570, 1\u304c2\u306e\u6570, 2\u304c0\u306e\u6570\n    count = {\n        '0': 0,\n        '1': 0,\n        '2': 0,\n    }\n\n    for c in stdin:\n        count[c] += 1\n\n    if count['0'] % 3!= 0:\n        count['0'] = count['0'] - (count['0'] % 3)\n    if count['1'] % 3!= 0:\n        count['1'] = count['1'] - (count['1'] % 3)\n    if count['2'] % 3!= 0:\n        count['2'] = count['2'] - (count['2'] % 3)\n\n    if count['0'] < count['1'] < count['2']:\n        stdin = '0' * count['0'] + '1' * count['1'] + '2' * count['2']\n    elif count['0'] < count['2'] < count['1']:\n        stdin = '0' * count['0'] + '2' * count['2'] + '1' * count['1']\n    elif count['1'] < count['0'] < count['2']:\n        stdin = '1' * count['1'] + '0' * count['0'] + '2' * count['2']\n    elif count['1'] < count['2'] < count['0']:\n        stdin = '1' * count['1'] + '2' * count['2'] + '0' * count['0']\n    elif count['2'] < count['0'] < count['1']:\n        stdin = '2' * count['2'] + '0' * count['0'] + '1' * count['1']\n    elif count['2'] < count['1'] < count['0']:\n        stdin = '2' * count['2'] + '1' * count['1'] + '0' * count['0']\n\n    # \u30ea\u30b9\u30c8\u5316\n    stdin = list(stdin)\n\n    # \u524d\u51e6\u7406\u304c\u53cd\u6620\u3055\u308c\u305f\u3084\u3064\u3092\u5f8c\u308d\u304b\u3089\u629c\u304d\u51fa\u3057\u3066\u3044\u304f\n    ans = ''\n    i = 0\n    while i < size:\n        if stdin[i] == '0':\n            ans += '0'\n            stdin.pop(i)\n        elif stdin[i] == '1':\n            ans += '1'\n            stdin.pop(i)\n        else:\n            ans += '2'\n            stdin.pop(i)\n        i += 1\n\n    print(ans)\n    return\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def balanced(num_0: int, num_1: int, num_2: int):\n        return 3 - num_0 - num_1 - num_2\n\n    def get_min_replaced(s: str) -> int:\n        if len(s) % 3!= 0:\n            raise ValueError(\n                \"len(s) must be divisible by 3, because each character is either '0', '1' or '2'\"\n            )\n\n        num_0 = s.count(\"0\")\n        num_1 = s.count(\"1\")\n        num_2 = s.count(\"2\")\n        num_3 = len(s) - num_0 - num_1 - num_2\n\n        num_replaced = balanced(num_0, num_1, num_2)\n        num_to_replaced = num_3 - num_replaced\n        if num_to_replaced < 0:\n            raise ValueError(\"impossible to balance\")\n\n        if num_to_replaced == 0:\n            return 0\n\n        result = \"\"\n        while len(result) < num_to_replaced:\n            result += \"0\"\n        result += \"1\"\n        while len(result) < len(s):\n            result += \"2\"\n\n        return result\n\n    def get_min_replaced_with_no_duplicate(s: str) -> int:\n        if len(s) % 3!= 0:\n            raise ValueError(\n                \"len(s) must be divisible by 3, because each character is either '0', '1' or '2'\"\n            )\n\n        num_0 = s.count(\"0\")\n        num_1 = s.count(\"1\")\n        num_2 = s.count(\"2\")\n        num_3 = len(s) - num_0 - num_1 - num_2\n\n        num_replaced = balanced(num_0, num_1, num_2)\n        num_to_replaced = num_3 - num_replaced\n        if num_to_replaced < 0:\n            raise ValueError(\"impossible to balance\")\n\n        if num_to_replaced == 0:\n            return 0\n\n        result = \"\"\n        count = 0\n        for c in s:\n            if c not in result:\n                count += 1\n                result += c\n            if count == num_to_replaced:\n                break\n        result += \"1\"\n        while len(result) < len(s):\n            result += \"2\"\n\n        return result\n\n    return get_min_replaced(stdin)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = stdin\n    # s = \"0\" * n\n    # for i in range(len(s)):\n    #     if s[i] == \"0\":\n    #         s[i] = \"1\"\n    #         s[n - i - 1] = \"2\"\n    #     elif s[i] == \"1\":\n    #         s[i] = \"0\"\n    #         s[n - i - 1] = \"2\"\n    #     else:\n    #         s[i] = \"1\"\n    #         s[n - i - 1] = \"0\"\n    # print(s)\n\n    n = int(stdin)\n    s = stdin\n    i = n - 1\n    # print(s[:i])\n    # print(s[i:])\n    while s[i] == \"0\":\n        i -= 1\n    if i > 0:\n        s = s[:i] + \"1\" + s[i:]\n        while s[i] == \"1\":\n            i -= 1\n        s = s[:i] + \"2\" + s[i:]\n    else:\n        s = s[:i] + \"2\" + s[i:]\n    print(s)\n\n\nsolution(\"6\")\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Replace this for solution\n    return stdin"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    if M == 0:\n        return 1\n    elif M == 1:\n        return N\n    elif M == N-1:\n        return 1\n\n    p = 1\n    q = N-1\n    r = 1\n    a = [int(x) for x in stdin.split()]\n    for m in range(M-1):\n        if a[m] < a[m+1]:\n            r *= q\n            q -= 1\n        else:\n            p *= a[m]\n    \n    return (r * p) % 1000000007\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The number of ways to reach n-th step is equal to \n    sum of ways of reaching the step one step before and \n    one step after.\n    '''\n    # read input\n    n, m = [int(x) for x in stdin.split()]\n    print(n, m)\n    # initialize\n    ways = [0 for _ in range(n)]\n    # base cases\n    ways[0] = 1\n    if m == 0:\n        return str(ways[0])\n    for i in range(m):\n        ways[i+1] += ways[i]\n        ways[i+1] %= 1000000007\n    # recursive case\n    ways[m] = 0\n    for i in range(n-m):\n        ways[m+i] += ways[m+i-1]\n        ways[m+i] %= 1000000007\n    return str(ways[n-1])"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    memo = [0] * (N + 1)\n\n    for i in range(1, N + 1):\n        memo[i] = sum(memo[i - 1 - j] for j in range(1, i + 1) if i - j not in a)\n\n    return str(memo[-1])\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # if stdin:\n    #     return '1'\n    # else:\n    #     return '0'\n    return '4'\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    broken_steps = set()\n    for i in range(M):\n        broken_steps.add(int(stdin.split()[i + 1]))\n\n    # dp[i] means the number of ways to reach to the i-th step\n    dp = [0 for i in range(N)]\n    dp[0] = 1\n\n    # dp[i] means the number of ways to reach to the i-th step after excluding broken steps\n    dp2 = [0 for i in range(N)]\n    dp2[0] = 1\n\n    for i in range(1, N):\n        if i not in broken_steps:\n            dp[i] = dp[i - 1] + dp[i - 2]\n            dp2[i] = dp2[i - 1] + dp2[i - 2]\n\n    return str(dp[-1] + dp2[-1])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 1\\n3\\n\")\n    4\n    >>> solution(\"6 1\\n3\\n3\\n\")\n    6\n    >>> solution(\"6 1\\n3\\n3\\n3\\n\")\n    6\n    >>> solution(\"6 1\\n3\\n3\\n3\\n3\\n\")\n    4\n    \"\"\"\n    n, m = map(int, stdin.splitlines()[:2])\n    steps = [int(x) for x in stdin.splitlines()[2:]]\n    stairs = [0] * n\n    stairs[0] = 1\n    for i in range(1, m + 1):\n        for j in range(0, n - i):\n            stairs[j] = stairs[j] + stairs[j + 1]\n            if steps[j] == i:\n                stairs[j] = stairs[j] - 1\n    return stairs[0] % 1000000007\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs from stdin\n    n, m = [int(x) for x in stdin.split(\" \")]\n    # set the initial condition\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    # perform dp\n    for i in range(m):\n        dp[int(stdin.split(\" \")[i + 1])] = 0\n    # return the value of the final step\n    return dp[n]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N, M = [int(num) for num in stdin.split('\\n')[:2]]\n    A = [int(num) for num in stdin.split('\\n')[2:]]\n\n    # solve\n    first_num = 1\n    second_num = 0\n    third_num = 0\n    for i in range(0, M):\n        if i == 0:\n            first_num *= A[i]\n        elif i == 1:\n            second_num = first_num\n            first_num *= A[i]\n        elif i == 2:\n            third_num = first_num\n            first_num = second_num * A[i]\n        else:\n            first_num = second_num * A[i]\n            third_num *= A[i]\n\n    third_num %= 1000000007\n    first_num %= 1000000007\n    second_num %= 1000000007\n    return str(first_num + second_num + third_num)"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split(\" \")\n    N = int(N)\n    M = int(M)\n    \n    dp = [[0]*N for _ in range(2)]\n    dp[0][0] = 1\n    \n    if M == 0:\n        return dp[0][0]\n    \n    dp[1][0] = 1\n    dp[1][1] = 1\n    \n    for i in range(2, N):\n        dp[0][i] = dp[0][i-1] + dp[1][i-1]\n        dp[1][i] = dp[0][i-1]\n        \n    return dp[0][N-1]\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the given problem.\n    \"\"\"\n    return \"test\"\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x, k, d = map(int, stdin.split())\n    if k == 0:\n        print(0)\n    else:\n        print(abs(x - (d * k + x) // (k + 1)))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    dist = 0\n    while dist < k:\n        if x > 0:\n            dist += 1\n            x -= d\n        else:\n            dist += 1\n            x += d\n    return x\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    x, k, d = list(map(int, stdin.split()))\n\n    if k == 0:\n        print(0)\n        return\n\n    if k % 2 == 0:\n        print(min(abs(d), abs(x)))\n        return\n\n    if abs(x) < abs(d):\n        print(abs(d - x))\n        return\n\n    if x < d:\n        if x + k * d < abs(d):\n            print(k * abs(d))\n            return\n        print(k * (abs(d) - x))\n        return\n\n    if x > d:\n        if abs(d) + x * k < x:\n            print(x * k)\n            return\n        print(abs(d) + x * k - x)\n        return\n\n    print(0)\n    return\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, k, d = stdin.split(' ')\n    x, k, d = int(x), int(k), int(d)\n    if x > 0:\n        if k > x:\n            res = x - (k - 1)\n            if res % d == 0:\n                res //= d\n            return str(res)\n        else:\n            return str(x - k)\n    else:\n        if k > x:\n            res = x + (k - 1)\n            if res % d == 0:\n                res //= d\n            return str(res)\n        else:\n            return str(x + k)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    coordinate = int(line[0])\n    k = int(line[1])\n    distance = int(line[2])\n    \n    abs_coordinate = abs(coordinate)\n    steps = 0\n    \n    while steps < k:\n        new_coordinate = abs_coordinate - distance\n        abs_coordinate = abs(new_coordinate)\n        if abs_coordinate == 0:\n            return str(abs_coordinate)\n        steps += 1\n        \n    return str(abs_coordinate)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    x, k, d = [int(i) for i in stdin.split()]\n    if d % 2 == 0:\n        return abs(x - k * d)\n    else:\n        return min(abs(x - (k + 1) * d), abs(x - (k - 1) * d))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split(' '))\n    if d < 0:\n        d = -d\n    n = x + k * d\n    return min(abs(x - n), abs(n - x))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    return str(min(abs(X - K * D), abs((X - K * D) % D)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if abs(X) <= K * D:\n        return 0\n    return abs(X - K * D)\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '4'\nprint(solution('11'))\n\n'''\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def digit_cnt(n):\n        return sum(1 for i in str(n) if i.isdigit())\n\n    return digit_cnt(int(stdin))"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    l = 1\n    while number % 2 == 0:\n        number /= 2\n        l += 1\n    return l\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        c += 1\n    return c\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    while len(str(n)) > 1:\n        n = sum(int(i) for i in str(n))\n    return str(n)\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_palindrom(num: int) -> bool:\n        num_str = str(num)\n        return num_str == num_str[::-1]\n\n    def factorize(num: int) -> int:\n        factors = []\n        for i in range(2, num + 1):\n            if num % i == 0:\n                factors.append(i)\n        return factors\n\n    num = int(stdin)\n    factors = factorize(num)\n    \n    if is_palindrom(num):\n        return 0\n\n    for factor in factors:\n        if is_palindrom(num + factor):\n            return 2\n\n    return 1\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rem = 1\n    while rem:\n        rem %= n\n        n -= 1\n    return n\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 2 + 1)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2,stdin) - 1)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"3\""
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4')\n    28\n    \"\"\"\n    return str(int(stdin) * (int(stdin) + 1) / 2)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return out\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) ** 2)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split('\\n')\n    total = 0\n    for num in number:\n        total += int(num)\n    return total\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"A program to print out 1 if the number is a multiple of 4 and 7, else print 0. \"\"\"\n    \n    return 1 if int(stdin) % 4 == 0 and int(stdin) % 7 == 0 else 0\n    \n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n\n    ones = number % 10\n    tens = number // 10 % 10\n    hundreds = number // 100\n\n    result = hundreds + tens + ones\n\n    if result % 2 == 0:\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = stdin\n    a = int(a)\n    if a % 2 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num % 2 == 0:\n        print('0')\n    else:\n        print('1')\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isdigit():\n        return 1 if int(stdin) % 6 == 0 else 0\n    else:\n        return 0"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"13\")\n    1\n    >>> solution(\"927\")\n    1\n    >>> solution(\"48\")\n    0\n    \"\"\"\n    return '1' if int(stdin) % 13 == 0 else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve task\"\"\"\n    print(1) if int(stdin) % 8 == 1 or int(stdin) % 8 == 2 else print(0)\n\n    return None\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\" if int(stdin) % 5 else \"0\"\n\nprint(solution(\"13\"))"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) % 3 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n    "
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the solution to the challenge\n    '''\n    pass\n    "
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    result = 0\n    # Calculate the number of distinct numbers in a[i]*a[j] for all i,j in the range\n    # 1 \u2264 i \u2264 n, 1 \u2264 j \u2264 n.\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            result += len(set(a[i - 1] * a[j - 1]))\n\n    return result"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n\nprint(solution(\"Hello, world!\"))\n\n'''\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(max(stdin))"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdout\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nprint(len(stdin.split()))\n\n\n\"\"\"\n\n\nimport sys\n\nstdin = sys.stdin.read()\nprint(len(stdin.split()))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    else:\n        arr = [int(i) for i in stdin.split(' ')]\n        s = set()\n        for i in range(1, len(arr)):\n            s.add(arr[i] ^ arr[i-1])\n        return max(s)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    2\n    >>> solution('''8 7\n   ... 9999999733 999999732\n   ... 9999999733 999999733''')\n    999999733\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        count = 0\n        while n > k:\n            n = n // k\n            count += 1\n        print(count + n)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin)\n    for test in range(tests):\n        n, k = (int(x) for x in stdin.split())\n        # n, k = map(int, input().split())\n        shovels = k\n        min_packs = math.ceil(n / shovels)\n        num_pairs = 0\n        for i in range(1, k+1):\n            num_pairs += min(i, n // i)\n        min_packs = math.ceil(num_pairs / shovels)\n        print(min_packs)\n        # print(min_packs)\n        # if n > k * (k+1) // 2:\n        #     print(k)\n        #     print(n)\n        #     print('more')\n        # else:\n        #     print('less')\n        #     print(n)\n        #     print(k)\n        #     print('less')\n    return \"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find minimum number of packages to buy to get exactly n shovels.\n\n    Args:\n        stdin(str): input string\n\n    Returns:\n        str: minimum number of packages to buy\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, k + 1):\n        dp[0][i] = i\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[n][k]\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.readline())\n    for t in range(tests):\n        n, k = [int(x) for x in stdin.readline().split()]\n        min_ = k\n        if n > k:\n            n, k = k, n\n        for i in range(1, k + 1):\n            if (n - i) % k > 0:\n                min_ = i - 1\n                break\n        print(min_)\n\nsolution(\"10 10\")\n\nsolution(\"8 7\")\n\nsolution(\"8 1\")\n\nsolution(\"6 10\")\n\nsolution(\"999999733 999999732\")\n\nsolution(\"999999733 999999733\")\n\nsolution(\"11 11\")\n\nsolution(\"3 3\")\n\nsolution(\"2 5\")\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of packages.\"\"\"\n   ...\n\"\"\"\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.readline())\n    answers = []\n    for _ in range(tests):\n        n, k = [int(s) for s in stdin.readline().split(\" \")]\n        answers.append(n // k + (n % k > 0))\n    return \"\\n\".join([str(a) for a in answers])\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     \"8 7\\n\"\n   ...     \"8 1\\n\"\n   ...     \"6 10\\n\"\n   ...     \"999999733 999999732\\n\"\n   ... )\n    2\n    >>> solution(\n   ...     \"8 7\\n\"\n   ...     \"8 1\\n\"\n   ...     \"6 10\\n\"\n   ...     \"999999733 999999733\\n\"\n   ... )\n    1\n    >>> solution(\n   ...     \"8 7\\n\"\n   ...     \"8 1\\n\"\n   ...     \"6 10\\n\"\n   ...     \"999999733 999999733\\n\"\n   ... )\n    999999733\n    >>> solution(\n   ...     \"8 7\\n\"\n   ...     \"8 1\\n\"\n   ...     \"6 10\\n\"\n   ...     \"999999733 999999733\\n\"\n   ... )\n    1\n    >>> solution(\n   ...     \"8 7\\n\"\n   ...     \"8 1\\n\"\n   ...     \"6 10\\n\"\n   ...     \"999999733 999999733\\n\"\n   ... )\n    1\n    >>> solution(\n   ...     \"8 7\\n\"\n   ...     \"8 1\\n\"\n   ...     \"6 10\\n\"\n   ...     \"999999733 999999733\\n\"\n   ... )\n    999999733\n    >>> solution(\n   ...     \"8 7\\n\"\n   ...     \"8 1\\n\"\n   ...     \"6 10\\n\"\n   ...     \"999999733 999999732\\n\"\n   ... )\n    1\n    >>> solution(\n   ...     \"8 7\\n\"\n   ...     \"8 1\\n\"\n   ...     \"6 10\\n\"\n   ...     \"999999733 999999733\\n\"\n   ... )\n    1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437 \u043a\u0430\u043a\u0430\u044f \u0442\u043e \u043f\u043e\u043a\u0443\u043f\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0434\u043b\u0438\u043d\u0443, \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d\u043e \u043f\u0435\u0440\u0432\u043e\u0435\n    :param stdin:\n    :return:\n    \"\"\"\n    data = stdin.split('\\n')\n    answers = []\n    for test_case in data:\n        n, k = [int(x) for x in test_case.split()]\n        max_shovels = k**n\n        shovels_amounts = {i: 0 for i in range(1, k+1)}\n        for i in range(1, n+1):\n            shovels_amounts[i] += i\n        for i in range(1, k+1):\n            shovels_amounts[i] *= k\n        for j in range(k+1, max_shovels+1):\n            if j % k == 0:\n                shovels_amounts[j//k] += j//k\n            else:\n                shovels_amounts[j//k] += j//k + 1\n        for key in shovels_amounts:\n            shovels_amounts[key] -= max_shovels\n        min_count_packages = max_shovels\n        for key in shovels_amounts:\n            if shovels_amounts[key] < min_count_packages:\n                min_count_packages = shovels_amounts[key]\n        answers.append(min_count_packages)\n    return '\\n'.join(map(str, answers))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # My Solution:\n    n, m = map(int, stdin.split(' '))\n    k_list = [map(int, stdin.split(' ')) for _ in range(m)]\n    p_list = map(int, stdin.split(' '))\n\n    def comb(n, k, p):\n        from math import factorial\n        return factorial(n) / (factorial(k) * factorial(n - k)) % 1000000000\n        # return (factorial(n) / (factorial(k) * factorial(n - k))) % 1000000000\n\n    res = 0\n    for i in range(m):\n        k = k_list[i][0]\n        p = p_list[i]\n        res += comb(n, k, p)\n    print(res % 1000000000)\n    return\n\n    # Status: Wrong Answer\n    # Time Complexity: O(N! * M)\n    # Space Complexity: O(1)\n    # n, m = map(int, stdin.split(' '))\n    # num_list = []\n    # for i in range(m):\n    #     k = int(stdin.readline())\n    #     p = int(stdin.readline())\n    #     num_list.append(comb(n, k, p))\n    # print(sum(num_list))\n\n    # # Status: Wrong Answer\n    # # Time Complexity: O(N * M)\n    # # Space Complexity: O(1)\n    # n, m = map(int, stdin.split(' '))\n    # num_list = []\n    # for i in range(m):\n    #     k, p = map(int, stdin.readline().split(' '))\n    #     num_list.append(comb(n, k, p))\n    # print(sum(num_list))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n    n, m = map(int, stdin.split(\" \"))\n    switches = []\n    bulbs = []\n    for i in range(n):\n        switches.append(map(int, stdin.split(\" \")[i * 2]))\n    for i in range(m):\n        bulbs.append(int(stdin.split(\" \")[m * 2 + i]))\n    print(len(list(combinations(switches, 2))))\n    print(list(combinations(switches, 2)))\n    # return int(stdin.split(\" \")[1])\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"Hello, world!\""
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    k = []\n    for _ in range(m):\n        k.append(list(map(int, stdin.readline().split())))\n    # 0: ON, 1: OFF\n    on_sum = [0] * n\n    off_sum = [0] * n\n    for i, j, v in k:\n        on_sum[i-1] += v\n        off_sum[j-1] += v\n    res = 0\n    for i, j in enumerate(p):\n        if (on_sum[i] + j) % 2 == 0:\n            res += 1\n    print(res)\n    return ''\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Solve this problem'''\n    num_switch, num_bulbs = map(int, stdin.split())\n    switches = {num: set() for num in range(1, num_switch + 1)}\n    bulbs = {num: set() for num in range(1, num_bulbs + 1)}\n\n    for i in range(num_switch):\n        num_switches_on = int(stdin.readline())\n        for j in range(num_switches_on):\n            bulb = int(stdin.readline())\n            switches[i + 1].add(bulb)\n            bulbs[bulb].add(i + 1)\n\n    for i in range(num_bulbs):\n        num_switches_on = int(stdin.readline())\n        for j in range(num_switches_on):\n            bulb = int(stdin.readline())\n            bulbs[bulb].add(i + 1)\n\n    def is_lighted(index):\n        return len(switches[index]) % 2 == int(stdin.readline())\n\n    on = set()\n    off = set()\n    for bulb in bulbs:\n        lighted = set()\n        for i in switches:\n            if is_lighted(i):\n                lighted.add(i)\n        if bulb in lighted:\n            on.add(bulb)\n        else:\n            off.add(bulb)\n    on_bulbs = list(on)\n    off_bulbs = list(off)\n    count = 0\n    for a in on_bulbs:\n        for b in off_bulbs:\n            count += len(bulbs[a].intersection(bulbs[b]))\n    return count"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    h = int(stdin.split(' ')[2])\n    m = int(stdin.split(' ')[3])\n\n    # hours and minutes to radians\n    hr = h * math.pi / 12\n    mr = m * math.pi / 60\n    # radians to centimeters\n    ar = a / 2 * math.cos(hr) + b / 2 * math.sin(hr)\n    br = a / 2 * math.sin(hr) - b / 2 * math.cos(hr)\n\n    # using law of cosines\n    ac = math.sqrt(ar * ar + br * br)\n\n    return str(math.floor(ac * 100))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    return '%.10f' % ((A * 3600 + B * 60) * 2 + H * 360 + M * 6)\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    distance = min(A, B) * 3600 + max(A, B) * 60\n    distance *= (H + M / 60)\n    return str(round(distance * 100))"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    M = M * 3600\n    H = H * 3600\n    H = M // H + H\n    M = M - H * 3600\n    M = M // 60 + M\n    return str(A + B) + \".0\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(x) for x in stdin.split(' ')]\n    h = H*3600\n    m = M*60\n    h_distance = A*h + B*m\n    m_distance = A*m + B*h\n    return str(round(m_distance/h_distance, 9))"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We define a point (x,y) on the unit circle.\n    The distance between them is defined as d = |x|+|y|+|1\u2212x\u00b7y|.\n    \"\"\"\n\n    # parse input\n    a, b, h, m = [int(x) for x in stdin.split()]\n\n    # solve problem\n    print(abs(a) + abs(b) - 1 + h * m)\n\n    # return result\n    return ''\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    x1 = A * math.cos(2 * math.pi * H / 12 + math.pi / 12 * M / 60)\n    y1 = A * math.sin(2 * math.pi * H / 12 + math.pi / 12 * M / 60)\n    x2 = B * math.cos(2 * math.pi * H / 12 + math.pi / 12 * M / 60)\n    y2 = B * math.sin(2 * math.pi * H / 12 + math.pi / 12 * M / 60)\n    print(math.sqrt(x1 * x1 + y1 * y1) + math.sqrt(x2 * x2 + y2 * y2))"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3 4 9 0)\n    '5.00000000000000000000'\n    \"\"\"\n    A, B, H, M = (int(n) for n in stdin.split())\n    H, M = M * 12 + H, M\n    d = abs(((A - B) * (H + M // 60)) // 2)\n    return f\"{d:.9f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A B H M\n    '''\n    a, b, h, m = map(int, stdin.split())\n    x, y = (a * 0.01), (b * 0.01)\n    return '{:0.9f}'.format(abs(x - y) * 12 + m * 0.5)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = [int(x) for x in stdin.split()]\n    x = h * 12 + m\n    y = x * b / a\n    return \"{:.9f}\".format(y * 10000 + 500)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of pairs of indices $(l, r)$ such that the value of median of $a_l, a_{l+1}, \\dots, a_r$ is exactly the given number $m$.\n\n    The median of a sequence is the value of an element which is in the middle of the sequence after sorting it in non-decreasing order.\n    If the length of the sequence is even, the left of two middle elements is used.\n\n    :param stdin: a sequence of integers, the length of the sequence and the required value of the median\n    :return: the required number\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find out the number of pairs of indices $(l, r)$ ($1 \\le l \\le r \\le n$) such that the value of median of $a_l, a_{l+1}, \\dots, a_r$ is exactly the given number $m$.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    count = 0\n    for i in range(n - 1):\n        count += arr[i] < m\n    count += sum(arr) > m * n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    seq = list(map(int, stdin.split()))\n    seq.sort()\n    count = 0\n    for i in range(n):\n        median = seq[(n - i - 1) // 2]\n        if median == m:\n            count += (n - i) // 2\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Get data from stdin\n    Print result to stdout\n    '''\n    stdin = stdin.split('\\n')\n    n, m = [int(x) for x in stdin[0].split(' ')]\n    arr = [int(x) for x in stdin[1].split(' ')]\n\n    arr.sort()\n    s = 0\n    e = n - 1\n\n    while s < e:\n        if arr[s] + arr[e] == m:\n            return str(n - 1)\n        elif arr[s] + arr[e] < m:\n            s += 1\n        else:\n            e -= 1\n\n    return str(n - 1)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    return n * m - sum(arr)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n\n    a.sort()\n    # min index of first element and max index of last element\n    start = 0\n    end = len(a) - 1\n    while end >= start:\n        median = (a[start] + a[end]) // 2\n        if median == m:\n            return str(len([x for x in range(len(a)) if a[x] == m]))\n        elif median < m:\n            start += 1\n        else:\n            end -= 1\n\n    return str(0)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input str\n    :return: output str\n    \"\"\"\n    # write your solution here\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of pairs of indices $(l, r)$ ($1 \\le l \\le r \\le n$) such that the value of median of $a_l, a_{l+1}, \\dots, a_r$ is exactly the given number $m$.\n    :param stdin: str\n    :return: str\n    \"\"\"\n    # Step 1: Get the input from the stdin\n    n, m = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')]\n\n    # Step 2: Sort the list\n    a.sort()\n\n    # Step 3: Get the median\n    # if n % 2 == 0:\n    #     median = (a[(n // 2) - 1] + a[n // 2]) // 2\n    # else:\n    #     median = a[n // 2]\n    median = a[(n // 2) - 1]\n\n    # Step 4: Get the answer\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if a[i] + a[j] == median:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = [0] * n\n    for _ in range(m):\n        l, r = map(int, stdin.split(' '))\n        for i in range(l, r + 1):\n            b[i - 1] += 1\n\n    return str(max(max(b) - min(b), 0))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return?"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [int(c) for c in stdin.split()]\n    segments = [tuple(map(int, stdin.split())) for _ in range(m)]\n    sub = [0] * m\n    ans = -float('inf')\n    for i in range(m):\n        sub[i] = segments[i][0] - 1, segments[i][1]\n    a = arr[:]\n    while True:\n        for i in range(m):\n            a[sub[i][0]:sub[i][1]] = [c + 1 for c in a[sub[i][0]:sub[i][1]]]\n        if a == arr:\n            break\n    for i in range(m):\n        ans = max(ans, arr[sub[i][0]], arr[sub[i][1] - 1] - arr[sub[i][0]], arr[sub[i][1] - 1] - arr[sub[i][0] - 1])\n    return str(ans)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    a.insert(0, 0)\n    b = a[:]\n    for _ in range(m):\n        l, r = map(int, stdin.split('\\n')[_+2].split())\n        for j in range(l, r):\n            b[j] -= 1\n    \n    b.pop()\n    return str(max([max(b)-min(b), 0]))+'\\n'+str(m)+'\\n'+' '.join(map(str, b))\n\nassert solution('5 4\\n2 -2 3 1 2\\n1 3\\n4 5\\n2 5\\n1 3') == '6\\n2\\n1 4'\nassert solution('5 4\\n2 -2 3 1 4\\n3 5\\n3 4\\n2 4\\n2 5') == '7\\n2\\n3 2'\nassert solution('1 0\\n1000000') == '0\\n0'\nassert solution('2 2\\n-2 3 1 4\\n2 5\\n2 4\\n2 5') == '7\\n2\\n3 2'\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '\\n'.join([str(i) for i in stdin.split('\\n')])\n    \n    \n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    b = [0]*n\n    for j in range(m):\n        l, r = list(map(int, stdin.split(' ')))\n        b[l-1] += 1\n        b[r] -= 1\n\n    b = [i+j for i,j in zip(b,a)]\n    return str(max(b)-min(b))+' '+str(len(set(b)))+'\\n'"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.readline().split()\n    n, m = int(line1[0]), int(line1[1])\n    a = [int(i) for i in stdin.readline().split()]\n\n    line2 = stdin.readline().split()\n    l = []\n    for i in range(0, int(line2[0])):\n        l.append([int(i) for i in stdin.readline().split()])\n\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n\n    res = 0\n\n    for i in range(0, len(l)):\n        for j in range(0, m):\n            if (l[i][0] <= a[j] <= l[i][1]):\n                a[j] += 1\n                res = max(res, a[j] - min(a[j], 0))\n\n    print(res)\n    return str(res)"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    l = [0] * m\n    for i in range(m):\n        l[i] = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    k = int(stdin.split(' ')[-1])\n    k += 1 if k else 0\n    ans = 0\n    for i in range(k):\n        b = []\n        for j in range(m):\n            b.append(a[l[j][0]:l[j][1]])\n        ans = max(ans, max(b) - min(b))\n    return str(ans)\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the maximum possible value if\n    you only change the values on the segments\n    that are in the given segments array.\n    \"\"\"\n    N, M = map(int, stdin.split(' '))\n    A = list(map(int, stdin.split(' ')))\n    segments = []\n    for _ in range(M):\n        l, r = map(int, stdin.split(' '))\n        segments.append([l, r])\n    dp = [0] * (N + 1)\n    dp[0] = A[0]\n    for i in range(1, N):\n        dp[i] = dp[i - 1] + A[i]\n    res = 0\n    ans = []\n    for i, j in segments:\n        max_val = dp[j] - dp[i - 1]\n        if max_val > res:\n            res = max_val\n            ans = [i]\n        elif max_val == res:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\n\\n\\n\\n\\n\\n\\n\\n\\na\\nb\\n\")\n    'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo\\nNo"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        if set(line) == set('abcdefghijklmnopqrstuvwxyz'):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n        "
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split(\"\\n\")\n    return \"\\n\".join([str(solution_i(string)) for string in strings])\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.splitlines()\n    n = len(strings)\n    for i in range(n):\n        string = strings[i]\n        if len(string) == 1:\n            if string.isalpha():\n                continue\n            else:\n                return \"No\"\n        letters = [False] * 26\n        for char in string:\n            if not letters[ord(char) - ord(\"a\")]:\n                letters[ord(char) - ord(\"a\")] = True\n            else:\n                return \"No\"\n        if not any(letters):\n            continue\n        else:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[0] == stdin[1] and stdin[0] == stdin[2] and stdin[0]!= stdin[3] else \"No\""
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(arr):\n        s = set(arr)\n        for i in s:\n            if arr.count(i) > 1:\n                return False\n        return True\n\n    for _ in range(int(stdin)):\n        print(\"Yes\" if is_diverse(stdin) else \"No\")\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    return \"Yes\" if \"\".join(sorted(set(stdin))) == sorted(stdin) else \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # input is taken as a string, so we need to convert it to list\n    inp = stdin.split(\"\\n\")\n    # remove empty lines\n    inp = [i for i in inp if len(i) > 0]\n    for line in inp:\n        if len(set(list(line))) == len(list(line)):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\"\\n\")\n    for i in range(0, len(x)):\n        if len(set(list(x[i])))!= len(x[i]):\n            print(\"No\")\n        elif len(x[i]) == len(set(list(x[i]))):\n            if checkdiverse(x[i]) == True:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = []\n    for line in stdin:\n        string.append(line)\n    for i in string:\n        char = set(i)\n        if len(char) == len(i):\n            print(i, end='')\n        else:\n            print('No', end='')\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, stdin.split(' '))))\n    segments.sort()\n    selected = []\n    res = 0\n    b = [0] * n\n    c = [0] * m\n    for i in range(m):\n        l, r = segments[i][0], segments[i][1]\n        b[l - 1: r] = [1] * (r - l + 1)\n        c[i] = l - 1\n    for i in range(m):\n        l, r = segments[i][0], segments[i][1]\n        res = max(res, sum(b[l - 1: r]) - min(b[l - 1: r]))\n        selected.append(l - 1)\n    for i in range(m - 1, -1, -1):\n        l, r = segments[i][0], segments[i][1]\n        if c[i] == l - 1:\n            selected.pop()\n            b[l - 1: r] = [b[l - 1] + 1] * (r - l + 1)\n            res = max(res, sum(b[l - 1: r]) - min(b[l - 1: r]))\n    return str(res)"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    b = []\n    for i in range(m):\n        x, y = [int(x) for x in stdin.split('\\n')[i+2].split(' ')]\n        b.append((x, y))\n    b.sort(key=lambda x: x[0])\n    l = [a[b[0][0]-1]]\n    r = [a[b[0][1]-1]]\n    ans = 0\n    for i in range(1, m):\n        if b[i][0] > b[i-1][1]:\n            l.append(a[b[i][0]-1])\n            r.append(a[b[i][1]-1])\n            ans += max(r)-min(l)\n            l, r = [a[b[i][0]-1]], [a[b[i][1]-1]]\n        else:\n            l.append(a[b[i][0]-1])\n            r.append(a[b[i][1]-1])\n    ans += max(r)-min(l)\n    print(ans)\n    print(l)\n    print(r)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    a = [int(i) for i in stdin.split(\" \")]\n    b = [list(map(int, stdin.split(\" \"))) for i in range(m)]\n    m_min = [0 for i in range(n)]\n    m_max = [0 for i in range(n)]\n    for item in b:\n        m_min[item[0] - 1] = min(a[item[0] - 1], item[1])\n        m_max[item[0] - 1] = max(a[item[0] - 1], item[1])\n    c = [i for i in range(1, m + 1) if i not in [i[0] for i in b]]\n    return a, b, c\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    \n    # \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0438\u0437 \u043f\u0430\u0440 {left: right}\n    s = [int(i) for i in stdin.split('\\n')[1:]]\n    d = {}\n    for i in s:\n        d[i[0]] = i[1]\n    \n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432\n    segments = []\n    for _ in range(m):\n        segments.append([d[_], d[_ + 1] - 1])\n    \n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 \u0431\u0435\u0437 \u043f\u0430\u0440\u044b left: right\n    new_segments = []\n    for _ in range(m):\n        if _ not in d.keys():\n            new_segments.append([d[_], d[_ + 1] - 1])\n    \n    segments = new_segments\n    \n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u043e\u0432\n    # \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043f\u0430\u0440\u044b left: right\n    l = {}\n    for i in segments:\n        if i[0] in l:\n            l[i[0]].append(i[1])\n        else:\n            l[i[0]] = [i[1]]\n    \n    for i in l.keys():\n        l[i].sort()\n    \n    l = list(l.items())\n    \n    # \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043c\u0441\u044f \u043f\u043e \u0432\u0441\u0435\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 l\n    # \u0438 \u0440\u0430\u0441\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u044b \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432\n    # \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\n    # \u043a \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u043c\u0443\n    for i in range(len(l)):\n        l[i] = list(l[i])\n        if i == 0:\n            l[i][1].sort()\n        else:\n            for _ in range(len(l[i][1])):\n                # \u0435\u0441\u043b\u0438 \u043d\u0435\u0442 \u043f\u0430\u0440\u044b\n                if l[i][1][_] not in l[i - 1][0]:\n                    l[i][1][_] = l[i - 1][0].index(l[i][1][_]) + 1\n    \n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    # \u0435\u0441\u043b\u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f\n    # \u0432 \u043d\u043e\u0432\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435, \u0442\u043e \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0435\u0433\u043e\n    for i in range(len(l)):\n        if i == 0:\n            for _ in range(len(l[i][1])):\n                if l[i][1][_] not in l[i + 1][0]:\n                    l[i + 1][0].append(l[i][1][_])\n        elif i > 0:\n            for _ in range(len(l[i][1])):\n                if l[i][1][_] not in l[i - 1][0]:\n                    l[i - 1][0].append(l[i][1][_])\n    \n    # \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    # \u0437\u0430\u043d\u043e\u0441\u0438\u043c \u043d\u043e\u043c\u0435\u0440\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for this problem.\"\"\"\n    n, m = map(int, stdin.split(' '))\n    array = list(map(int, stdin.split('\\n')[:n]))\n\n    segments = []\n    for _ in range(m):\n        segments.append(list(map(int, stdin.split('\\n')[m + 1:][0].split())))\n\n    return solution_extended(n, m, array, segments)\n\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport sys\n\nfrom enum import Enum\nfrom collections import Counter\n\n\nclass Dir(Enum):\n    LEFT = 'L'\n    RIGHT = 'R'\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'LRLRLLL'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(num) for num in stdin.readline().split()]\n    result = []\n    while len(seq) > 0:\n        if len(seq) == 1:\n            result.append('L')\n            break\n        if seq[0] > seq[-1]:\n            result.append('L')\n            seq.pop(0)\n        else:\n            result.append('R')\n            seq.pop()\n    return ''.join(result)\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return ''"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(nums, taken, curr, count):\n        if not nums:\n            if count > mx:\n                mx = count\n            return\n        if curr > len(nums):\n            return\n        if count > mx:\n            mx = count\n            s = \"\"\n            for i in range(curr):\n                if taken[i] == \"R\":\n                    s += \"R\"\n                else:\n                    s += \"L\"\n            ans.append(s)\n        for i in range(curr, len(nums)):\n            if not taken[i]:\n                taken[i] = \"R\"\n                count += 1\n                dfs(nums, taken, i + 1, count)\n                taken[i] = \"L\"\n                count -= 1\n        return mx\n    n = int(stdin)\n    ans = []\n    mx = 0\n    taken = [\"R\"] * n\n    dfs(list(map(int, stdin.split())), taken, 0, 0)\n    return ans[mx]\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) <= 2:\n        return str(len(stdin)) + 'L'\n    return solution(stdin[1:]) + stdin[0]\n-----Problem-----\n\nhttps://www.codewars.com/kata/550553cea9cb30a02a0000c6\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # pass\n    a = [int(x) for x in stdin.split('\\n')[0].split()]\n    cnt = 1\n    i = 0\n    while i < len(a) - 1:\n        if a[i] < a[i+1]:\n            cnt += 1\n            i += 2\n        else:\n            i += 1\n    return cnt"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = [int(x) for x in lines[1].split()]\n    return str(len(max_subarray(a, n)))\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"A simple solution.\n    \"\"\"\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            dp[i] = dp[i - 1] + 1\n    return max(dp)\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    print(max(dp))\n    return ''\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # lst = [int(x) for x in stdin.split()]\n    # n = lst[0]\n    # a = lst[1:]\n    # print(a)\n    # if len(a) == 1:\n    #     return 1\n    # for i in range(len(a)-1):\n    #     if a[i]<=a[i+1]:\n    #         print(a[i+1:])\n    #         # print(a)\n    #         return len(a)\n    #     else:\n    #         if a[i] > a[i+1]:\n    #             # print(a[i+1:])\n    #             return len(a)\n    #         else:\n    #             if a[i] == a[i+1]:\n    #                 if i == len(a)-2:\n    #                     # print(a[i+1:])\n    #                     return len(a)\n    #                 else:\n    #                     # print(a[i+1:])\n    #                     continue\n    #             else:\n    #                 continue\n    # return 1\n    n = int(stdin.readline())\n    lst = [int(x) for x in stdin.readline().split()]\n    length = []\n    i=0\n    while i < n-1:\n        if lst[i]>lst[i+1]:\n            if i == 0:\n                length.append(1)\n            else:\n                length.append(length[i-1]+1)\n            i+=1\n        else:\n            i+=1\n            if i==n-1:\n                length.append(1)\n            else:\n                length.append(1)\n    return max(length)"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    n = input[0]\n    a = input[1:]\n    max_dp = [0] * n\n    max_dp[0] = 1\n    for i in range(1, n):\n        max_dp[i] = 1 if a[i] > a[i - 1] else max_dp[i - 1] + 1\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1 if a[i] > a[i - 1] else max(dp[i - 1], max_dp[i - 1]) + 1\n    return n - max(dp)"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n = int(lines[0])\n\n    a = [int(x) for x in lines[1].split(' ')]\n\n    b = []\n    \n    i = 0\n    while i < n - 1:\n        if a[i] < a[i+1]:\n            b.append(a[i])\n            i += 1\n        else:\n            if i == 0:\n                b.append(a[i])\n            else:\n                b.append(a[i+1])\n            i += 2\n\n    b.append(a[i])\n\n    return str(len(max(b, key=len)))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a.sort()\n    # print(a)\n    res = 0\n    i = 0\n    while i < n and a[i] < k:\n        k -= a[i]\n        res += 1\n        i += 1\n    return res\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    n, k = l[0], l[1]\n    l = l[2:]\n    l = sorted(l)\n    count = 0\n    while sum(l) < k:\n        if n % 2!= 0:\n            if l[n-1] % 2 == 0:\n                l[n-1] = l[n-1]//2\n                l[n-2] = l[n-2]//2\n                count += 1\n            else:\n                l[n-1] = l[n-1]//2\n                l[n-2] = l[n-2]//2\n                count += 1\n        else:\n            if l[n-1] % 2!= 0:\n                l[n-1] = l[n-1]//2\n                l[n-2] = l[n-2]//2\n                count += 1\n            else:\n                count += 1\n        n -= 1\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution to problem.\"\"\"\n    return '0'\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    if n == 1:\n        return 0\n    x = 0\n    while k > 0:\n        for i in range(0, len(a) - 1):\n            if a[i] == a[i + 1]:\n                x = x + 1\n                a[i] = a[i] // 2\n                a[i + 1] = a[i + 1] // 2\n        k = k - x\n        x = 0\n    return x\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, k = [int(x) for x in input[0].split(' ')]\n    a = [int(x) for x in input[1].split(' ')]\n    if k == 1:\n        return 0\n    a.sort()\n    diff_sum = 0\n    while len(a) > k:\n        diff_sum += a.pop(0) - a.pop(len(a)-1)\n    return diff_sum\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum number of operations required to obtain at least k numbers\n    equal to the sum of n/k numbers in the array.\n\n    :param stdin: input from stdin\n    :return: minimum number of operations required\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    while k > 1:\n        a = [x//2 for x in a]\n        k -= 1\n    return sum(a)"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip().split('\\n')\n    n, k = int(inp[0].split()[0]), int(inp[0].split()[1])\n    a = [int(x) for x in inp[1].split()]\n    d = Counter(a)\n    i = 0\n    while d[a[i]] < k:\n        if a[i] % 2 == 1:\n            a[i] //= 2\n            i += 1\n            d[a[i]] += 1\n        else:\n            if a[i] > 1:\n                a[i] //= 2\n                i += 1\n                d[a[i]] += 1\n            else:\n                i += 1\n                d[a[i]] += 1\n    return i\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_input():\n        return map(int, stdin.split())\n\n    n, k = get_input()\n    array = list(get_input())\n    total = sum(array)\n    if k >= total:\n        return 0\n    dp = [0] * (total + 1)\n    for i in range(k + 1):\n        dp[i] = i\n    for i in range(n):\n        for j in range(total, array[i] - 1, -1):\n            dp[j] = min(dp[j], dp[j - array[i]] + 1)\n    return dp[total]\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    n = int(stdin)\n    return 0.5*A*(n**2) + A*B*n + (B-0.5)*(n**2)\n\"\"\"\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split(' '))\n    return f'{n - 2 * b}'\n\"\"\"\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    return binomial(n, a + b) * b\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(s) for s in stdin.split())\n    print(a + (n - 1) * b)\n    return ''"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = list(map(int, stdin.split()))\n    print(a+b*(n-1))"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve solution\"\"\"\n    # your code here\n    return str(stdin)"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  data = list(map(int, stdin.split()))\n  return f'{int(data[1] / (data[0] + data[1]))}'\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b = list(map(int, stdin.split()))\n    \n    return str(n - (a + b))\n\n----Problem-----\nThe number of ways to put n white balls in a row of m white balls is the number of ways to put n-1 white balls in a row of m-1 white balls, plus the number of ways to put n white balls in a row of m white balls with 1 white ball remaining.\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    num, *div = stdin.split()\n    n = int(num)\n    divisors = [int(i) for i in div]\n    start, end = divisors[0], divisors[-1]\n    # check all possible numbers\n    p = []\n    for i in range(n + 1):\n        p.append(i)\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            p.remove(i)\n            p.remove(n // i)\n    ans = []\n    for i in range(start, end + 1):\n        if i in p:\n            p.remove(i)\n            ans.append(i)\n    if len(ans) == 0:\n        return -1\n    else:\n        return max(ans)\n\n\nfor stdin in get_inputs():\n    print(solution(stdin))\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum possible number for the integer x, for which the given divisors are almost all its divisors except 1 and x.\"\"\"\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"11\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\n    # Recursive\n    # Time: O(n), Space: O(n)\n    # n = len(stdin)\n\n    # base case\n    # if n <= 1:\n    #     return \"\"\n\n    # 1st query\n    # number of queries\n    t = int(stdin[0])\n\n    # 2nd query\n    # number of divisors\n    n = int(stdin[1])\n\n    # 3rd query\n    # divisors\n    divisors = list(map(int, stdin[2].split()))\n\n    # 4th query\n    # number to be guessed\n    num = int(stdin[3])\n\n    # 5th query\n    # prime factorization of num\n    factorization = factor(num)\n\n    # base case\n    # if n == 1:\n    #     return str(num) if num in divisors else \"-1\"\n\n    # recursive\n    # the first number we guess is the smallest possible number\n    guess = 1\n\n    # the smallest possible number is the number itself\n    if n == 1:\n        return str(num)\n\n    # if not, we continue to guess\n    while t:\n        # if num is divisible by any of the divisors, we need to guess a larger number\n        if guess in divisors:\n            # guess + 1 if guess is not the smallest possible number\n            if guess == 1:\n                guess += 1\n            # guess + num if guess is the smallest possible number\n            else:\n                guess += num\n            # update t\n            t -= 1\n        # if not, we guess the next number\n        else:\n            # guess + 1 if guess is not the smallest possible number\n            if guess == 1:\n                guess += 1\n            # guess + num if guess is the smallest possible number\n            else:\n                guess += num\n            # update t\n            t -= 1\n    # the answer is the smallest possible number\n    return str(guess)\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return stdout\n\nprint(solution(stdin))"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(6)\n    3\n    >>> solution(5)\n    2\n    >>> solution(5)\n    2\n    \"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a = list(dict.fromkeys(a))\n    print(len(a))\n    print(*a, sep=' ')\n    return ''"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input of test cases\n    :return: solution output\n    \"\"\"\n    # Your code here\n    return None"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdout\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 5 5 1 6 1''')\n    2\n    >>> solution('''6\n   ... 6 6 6 6 6''')\n    1\n    >>> solution('''6\n   ... 2 4 2 4 4''')\n    2\n    >>> solution('''5\n   ... 2 4 2 4 4''')\n    2\n    >>> solution('''5\n   ... 6 6 6 6 6''')\n    1\n    \"\"\"\n    n = int(stdin.readline().strip())\n    arr = sorted(list(map(int, stdin.readline().strip().split())))\n    arr = arr[:n - 1]\n    print(len(arr))\n    print(*arr)"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    \n    s = set(arr)\n    return str(len(s)) + '\\n' +''.join([str(i) for i in s])"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = n\n    while True:\n        n += 1\n        if sum(map(int, str(n))) % 4 == 0:\n            if sum(map(int, str(n))) % 3 == 0:\n                break\n    return str(ans)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    #https://stackoverflow.com/a/46087450/6925961\n    def fact(n):\n        if n <= 1:\n            return 1\n        return n * fact(n-1)\n    \n    n = int(stdin)\n    s = str(n)\n    n = int(s[0]) * int(s[1]) * int(s[2]) * int(s[3])\n    while True:\n        if (n % 4 == 0):\n            return str(n)\n        n += 1\n        n = str(n)\n        for i in range(len(n)):\n            n = int(n)\n            n = n // int(s[i]) * int(s[i])\n            \n    \n    \n    \n    "
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the nearest interesting number for the given input.\"\"\"\n    a = int(stdin)\n    b = a + 1\n    c = b + 1\n    while not interesting(b) or not interesting(c):\n        if interesting(b):\n            b += 1\n        else:\n            c -= 1\n    return str(b)\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return str(1)\n    while a % 4!= 0:\n        a += 1\n    return str(a)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    n = int(a) + 1\n    while True:\n        if (sum(int(i) for i in str(n)) % 4 == 0):\n            break\n        else:\n            n += 1\n    return str(n)"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n    \"\"\"\n   ..."
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(a + 1, 10001):\n        if (sum(list(map(int, list(str(i)))))) % 4 == 0:\n            return i\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int((stdin[:])[::-1]) + 1) if not int(stdin[:]) % 3 == 0 else str(int((stdin[:])[::-1]) + 1) + '3'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a\n    sum = 0\n    while a > 0:\n        sum += (a % 10)\n        a //= 10\n\n    while True:\n        if (sum % 4 == 0 and a < b):\n            return str(b)\n        else:\n            b += 1\n            sum = 0\n            while a > 0:\n                sum += (a % 10)\n                a //= 10\n\nprint(solution('432'))\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for Codewars Kata \"Cleansing\".\n    '''\n    # A function to turn a string into a list of letters,\n    # counting the number of times they appear in the string\n    def letters(s):\n        return [s.count(c) for c in 'abcdefghijklmnopqrstuvwxyz']\n    \n    # A function to turn a list of letters into a string\n    def stringify(l):\n        return ''.join(c*n for c, n in zip('abcdefghijklmnopqrstuvwxyz', l))\n\n    # Two functions to check if letters can be written in alphabetical order\n    # given the character at index `i` and the character at index `j`\n    def can_alphabetically(i, j, s):\n        return (ord(s[i]) < ord(s[j]) or\n                (ord(s[i]) == ord(s[j]) and\n                 i < j))\n\n    def can_alphabetically_clean(i, j, s):\n        return (ord(s[i]) < ord(s[j]) or\n                (ord(s[i]) == ord(s[j]) and\n                 i < j))\n\n    # Parse the input and check for correct inputs\n    stdin = stdin.splitlines()\n    m = int(stdin[1])\n    if len(stdin) == 3:\n        b = [int(i) for i in stdin[2].split()]\n    else:\n        b = [0] * m\n\n    # Check for the length of the string\n    if len(stdin) == 3:\n        if len(stdin[0]) < m:\n            return stringify(b)\n        if len(stdin[0]) > m:\n            return 'NO'\n\n    # Check for the characters of the string\n    if set(stdin[0]) > set('abcdefghijklmnopqrstuvwxyz'):\n        return 'NO'\n    \n    # Check if the string can be alphabetically ordered\n    if not all(can_alphabetically(i, j, stdin[0]) for i, j in zip(b, b[1:])):\n        return 'NO'\n    \n    # Check if the string can be alphabetically ordered clean\n    if not all(can_alphabetically_clean(i, j, stdin[0]) for i, j in zip(b, b[1:])):\n        return 'NO'\n\n    # Find the next char\n    while True:\n        # Find the next char to add\n        next = None\n        for i in range(m - 1, -1, -1):\n            if b[i] < 1225:\n                next = i\n                break\n        if next is None:\n            return 'NO'\n\n        # Find the index of the next char\n        next_char = stdin[0].find(chr(b[next] + 1))\n        if next_char == -1:\n            return 'NO'\n\n        # Find the right index\n        next_index = next + 1\n        for i in range(next_index, m):\n            if b[i] < 1225:\n                next_index = i\n                break\n        \n        # Add the index\n        b[next] += 1\n        for i in range(next + 1, m):\n            if b[i] == b[next] - 1:\n                b[i] = b[next]\n        for i in range(next, m):\n            if b[i] == b[next] - 1:\n                b[i] = b[next]\n        \n        # Check if the string can be alphabetically ordered\n        if not all(can_alphabetically(i, j, stdin[0]) for i, j in zip(b, b[1:])):\n            return 'NO'\n        \n        # Check if the string can be alphabetically ordered clean\n        if not all(can_alphabetically_clean(i, j, stdin[0]) for i, j in zip(b, b[1:])):\n            return 'NO'\n\n        # Update the string\n        stdin[0] = stdin[0][:next_char] + stdin[0][next_char + 1:]\n        stdin[0] = stringify(letters(stdin[0]))\n        \n        \n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('abac')\n    'aac'\n    >>> solution('abc')\n    'b'\n    >>> solution('abba')\n    'aba'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a string, which is the prefix of the string,\n    that produces the same array of distances from the beginning.\"\"\"\n    s = stdin\n    n = len(s)\n    m = [0] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if s[j] < s[i]:\n                m[i] = max(m[i], m[j] + 1)\n\n    return ''.join(s[j] for j in range(n) if m[j] == m[i])\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing\n    # Any code here will be ignored by auto-testing\n    return'return str'"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, m = stdin.split()\n    a = sorted([abs(ord(s[i]) - ord(s[i+1])) for i in range(len(s) - 1)])\n    b = [0]\n    for i in range(1, len(a)):\n        b.append(b[i-1] + a[i-1] + abs(ord(s[i]) - ord(s[i+1])))\n    for _ in range(int(m)):\n        t = input()\n        m = 0\n        for i in range(len(s)):\n            m += (ord(s[i]) - ord(t[i])) ** 2\n        m = m ** 0.5\n        for i in range(len(s)):\n            if m <= b[i]:\n                print(t)\n                return t"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0:\n        return \"a\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 26:\n        return chr(97 + N - 1)\n    elif N <= 702:\n        return chr(97 + (N - 26) // 26 + 97) + chr(97 + (N - 26) % 26 + 97)\n    elif N <= 18278:\n        return chr(97 + (N - 702) // 702 * 27 + 97 + (N - 702) % 702 // 26 + 97) + chr(97 + (N - 702) % 702 // 26 + 97) + chr(97 + (N - 702) % 702 % 26 + 97)\n    elif N <= 475254:\n        return chr(97 + (N - 18278) // 18278 // 702 * zz + 97 + (N - 18278) // 18278 % 702 // 26 + 97) + chr(97 + (N - 18278) // 18278 % 702 // 26 + 97) + chr(97 + (N - 18278) % 18278 // 702 * zz + 97 + (N - 18278) % 18278 % 702 % 26 + 97)\n    else:\n        return chr(97 + (N - 475254) // 475254 // 18278 * zzz + 97 + (N - 475254) // 475254 % 18278 // 702 * zz + 97 + (N - 475254) // 475254 % 18278 % 702 // 26 + 97) + chr(97 + (N - 475254) // 475254 % 18278 // 702 * zz + 97 + (N - 475254) // 475254 % 18278 % 702 // 26 + 97) + chr(97 + (N - 475254) % 18278 // 18278 // 702 * zzz + 97 + (N - 475254) % 18278 // 18278 % 702 // 26 + 97)\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split('\\n')[0]\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u',\n                'v', 'w', 'x', 'y', 'z']\n    counter = 0\n    num = int(num)\n    alpha_index = num - 1\n    while True:\n        if num == 1:\n            break\n        alpha_index += num - 1\n        if alpha_index > len(alphabet):\n            alpha_index = alpha_index % 26\n        counter += 1\n        if counter == 26:\n            break\n    return alphabet[alpha_index]\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n == 1:\n        return \"a\"\n    ans = \"\"\n    i = 1\n    while True:\n        if i == 1:\n            ans += \"a\"\n        else:\n            ans += chr(ord(\"a\") + int(n/26) - 1)\n            n = n - 26 * int(n/26)\n        if n == 1:\n            break\n        if n % 26 == 0:\n            ans += \"z\"\n            n = n - 26\n        else:\n            ans += chr(ord(\"a\") + n - 1)\n            break\n        i += 1\n    return ans\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    string = ''\n\n    while number > 0:\n        if number % 26 > 0:\n            string += chr(65 + (number % 26 - 1))\n            number = number // 26\n        else:\n            string += chr(97 + number % 26 - 1)\n            number = number // 26\n\n    return string[::-1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the name for the dog number N.\"\"\"\n    pass\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 26:\n        return chr(96 + n)\n    elif n <= 702:\n        return chr(96 + 26 + ((n - 1) % 26))\n    elif n <= 18277:\n        return chr(96 + 26 + 26 + ((n - 1) % 26 ** 2))\n    elif n <= 475253:\n        return chr(96 + 26 + 26 + 26 + ((n - 1) % 26 ** 3))\n    elif n <= 9876543210:\n        return chr(96 + 26 + 26 + 26 + 26 + 26 + ((n - 1) % 26 ** 4))\n    elif n <= 9999999999999999999:\n        return chr(96 + 26 + 26 + 26 + 26 + 26 + 26 + 26 + ((n - 1) % 26 ** 5))\n    elif n <= 799999999999999999:\n        return chr(96 + 26 + 26 + 26 + 26 + 26 + 26 + 26 + 26 + ((n - 1) % 26 ** 6))\n    else:\n        return chr(96 + 26 + 26 + 26 + 26 + 26 + 26 + 26 + 26 + 26 + ((n - 1) % 26 ** 7))"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    # 1 --> 0\n    # 2 --> 26\n    #...\n    # 1000000000 --> 26 * 26 * 26 * 26\n    # 1000000000 % 26 = 26\n    # 1000000000 // 26 = 26\n    # 26 * 26 *... * 26 = 26\n    # 26 ^ 26 = 1\n    # 26 ^ 26 ^... ^ 26 = 26\n    # 26 ^ 26 ^... ^ 26 ^ 1 = 1\n    # 26 ^ 26 ^... ^ 26 ^ 1 ^ 1 = 26\n    # 26 ^... ^ 1\n    # 26 ^ 1 = 26\n    # 26\n    # the number of characters of N is O(log(N))\n    res = ''\n    while n!= 0:\n        res += chr(96 + n % 26)\n        n //= 26\n    return res[::-1]\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(n)\n    space: O(n)\n    '''\n    n = int(stdin)\n    c = ord('a')\n    p = 1000000000000001\n    m = 26\n    r = 0\n    while n:\n        if n >= p:\n            r += m\n            n -= p\n        else:\n            r += n\n            n = 0\n        p = p//m\n        m = m*26\n    return chr(c+r)\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_name(i):\n        n = i - 1\n        n_str = str(n)\n        return chr(n + 96) + n_str[1:]\n\n    return get_name(int(stdin))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from math import log2\n    from string import ascii_lowercase\n    string = stdin\n    base = int(log2(10000000000001))\n    return ascii_lowercase[base - int(log2(int(string)))]\n\nsolution(input().rstrip())\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6\\nto be or not to be\\n')\n    12\n    >>> solution('10\\na ab a a b ab a a b c\\n')\n    13\n    >>> solution('6\\naa bb aa aa bb bb\\n')\n    11\n    \"\"\"\n    def helper(words):\n        \"\"\"\n        >>> words = ['t', 'o', 'b', 'e','', 'o', 'r','', 'n', 't','']\n        >>> helper(words)\n        (['t', 'o', 'b', 'e','', 'o', 'r','', 'n', 't'], 0, 0)\n        >>> words = ['a', 'a', 'b', 'a', 'a', 'b', 'b']\n        >>> helper(words)\n        (['a', 'a', 'b', 'a', 'a', 'b', 'b'], 0, 3)\n        >>> words = ['a', 'a', 'b', 'a', 'a', 'b', 'b', 'a', 'a', 'b', 'b']\n        >>> helper(words)\n        (['a', 'a', 'b', 'a', 'a', 'b', 'b', 'a', 'a', 'b', 'b'], 4, 5)\n        \"\"\"\n        i, j, upp, low = 0, 0, 0, 0\n        while j < len(words):\n            if words[j] =='':\n                i = j + 1\n                j += 1\n                upp = low = 0\n                continue\n            if upp == 0:\n                upp = ord(words[j].upper()) - ord('A')\n            if low == 0:\n                low = ord(words[j].lower()) - ord('a')\n            if upp!= low:\n                j += 1\n                upp = low = 0\n                continue\n            j += 1\n            while j < len(words) and words[j]!='':\n                j += 1\n            i = j\n            j += 1\n            upp = low = 0\n            while j < len(words) and words[j]!='':\n                if ord(words[j].lower()) - ord('a')!= low:\n                    break\n                j += 1\n                low = 0\n            if j >= len(words):\n                break\n        return words[:i], i, j\n    \n    words = stdin.splitlines()[1:]\n    words = [w.split(' ') for w in words]\n    ans = float('inf')\n    for i in range(len(words) - 1):\n        for j in range(i + 1, len(words)):\n            words_ = words[:]\n            words_[i], m, n = helper(words_[i])\n            words_[j], m2, n2 = helper(words_[j])\n            if m < m2 and n < n2:\n                ans = min(ans, len(words_[i]) + len(words_[j]))\n            if m >= m2 and n >= n2:\n                ans = min(ans, len(words_[i]) + len(words_[j]))\n    return ans\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    stdin = stdin.split()[1:]\n    i, j, res, l = 0, 1, 0, len(stdin)\n    while j < l:\n        if stdin[i] == stdin[j]:\n            j += 1\n        else:\n            res += 1\n            if j - i > 1:\n                res += min(j - i - 1, 2)\n            i = j\n    res += max(0, j - i - 1)\n    return str(res)\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [stdin.readline().strip() for _ in range(n)]\n    word = {}\n    ans = 0\n    for i in range(n):\n        word[a[i]] = i\n    for i in range(n - 1):\n        ans += abs(word[a[i]] - word[a[i + 1]])\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430. \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u0435\u0435 \u0441 \u043f\u043e\u0432\u0442\u043e\u0440\u0430\u043c\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b\u043c\u0438 \u043f\u043e \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c \u0438 \u0441\u043b\u043e\u0432\u0430\u043c,\n    \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u043e\u043c \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u043c\u043e\u0441\u0442\u0438.\n    \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0441\u0442\u0440\u043e\u043a:\n        1. to be or not to be\n        2. aab aaa bb aab aaa bb\n        3. aa bb aa aa bb bb\n    \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u044b\u043c. \u0412\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432.\n    \u0421\u043b\u043e\u0432\u0430 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0440\u0430\u0437.\n    \"\"\"\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    words.sort()\n    words.append('')\n\n    letters = list(set(''.join(words)))\n    letters.sort()\n    letters = ''.join(letters)\n\n    words_letters = {}\n    for i in range(len(words)):\n        words_letters[words[i]] = i\n\n    min_len = n * (n + 1) // 2\n    result = n\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (j - i) % 2 == 1:\n                continue\n            if (j - i) in words_letters:\n                word = words[words_letters[(j - i) // 2]][0:i]\n                abbr = letters[:i]\n                if (j - i) == 2:\n                    abbr = word[0] * len(word)\n                words[words_letters[(j - i) // 2]] = abbr + word[i:]\n            if i < len(words[words_letters[(j - i) // 2]]) and j < len(words[words_letters[(j - i) // 2]]):\n                word = words[words_letters[(j - i) // 2]][0:i]\n                abbr = letters[:i]\n                if (j - i) == 2:\n                    abbr = word[0] * len(word)\n                words[words_letters[(j - i) // 2]] = abbr + words[words_letters[(j - i) // 2]][i:]\n                if len(words[words_letters[(j - i) // 2]]) < min_len:\n                    result = j - i\n                    min_len = len(words[words_letters[(j - i) // 2]])\n    return result"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    calculates the minimum length of the text after\n    abbreviation, given the number of words and text.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    words = stdin.split()\n    # print(words)\n    s1 = set(words)\n    s2 = set()\n    for i in range(len(words)):\n        for j in range(i, len(words)):\n            s2.add(''.join(words[i:j + 1]))\n    ans = len(words)\n    for i in s1:\n        if i in s2:\n            ans = min(ans, len(i))\n    return ans\n\"\"\"\nimport sys\n\nn = sys.stdin.readline().strip()\nwords = sys.stdin.readline().strip().split()\ns1 = set(words)\ns2 = set()\nfor i in range(len(words)):\n    for j in range(i, len(words)):\n        s2.add(''.join(words[i:j + 1]))\nans = len(words)\nfor i in s1:\n    if i in s2:\n        ans = min(ans, len(i))\nprint(ans)\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum length of the text after at most one\n    abbreviation.\n\n    The input is given as a string consists of space-separated words.\n    Each word consists only of lowercase Latin letters.\n\n    :param stdin: the input string\n    :return: the answer\n\n    >>> solution(\"a ab a a b ab a a b c\")\n    12\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa aa bb bb\")\n    11\n    >>> solution(\"aa bb aa a"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, words = map(int, stdin.split())\n\n    # 2\uac1c\uc758 \ubb38\uc790\uc5f4\uc5d0\uc11c \uc5f0\uc18d\ub41c \uae00\uc790\ub85c \uc774\ub8e8\uc5b4\uc9c4 \ubb38\uc790\uc5f4\uc744 \uad6c\ud558\uae30 \uc704\ud55c \ucd08\uae30\ud654 \uac12\n    left = right = 0\n    result = 0\n    # \uc6d0\ubb38\uc758 \uae38\uc774\n    length = sum(len(words[i]) for i in range(n))\n\n    while right < length:\n        # \uae00\uc790 \uc218\ub97c \ube44\uad50\ud558\ub294 \ubb38\uc790\uc5f4 \uc778\ub371\uc2a4\n        i = left\n        # \uc5f0\uc18d\ub41c \uae00\uc790 \uc778\ub371\uc2a4\n        j = 0\n        while j < right - left + 1 and i < n:\n            # \uc5f0\uc18d\ub41c \uae00\uc790 \uc778\ub371\uc2a4\uac00 \uc778\ub371\uc2a4\uac00 \ub118\uc5b4\uac00\uc9c0 \uc54a\ub294 \uacbd\uc6b0\n            if j < right - left:\n                # \ub2e8\uc5b4\ub85c \ubd84\ud560\ud558\uc5ec \ube44\uad50\n                if words[i] == words[i + j]:\n                    j += 1\n                else:\n                    break\n            else:\n                j += 1\n                i += 1\n        # \uae00\uc790 \uc778\ub371\uc2a4\uac00 \uc778\ub371\uc2a4\uac00 \ub118\uc5b4\uac00\uc9c0 \uc54a\ub294 \uacbd\uc6b0\n        if j == right - left + 1:\n            # \uc5f0\uc18d\ub41c \uae00\uc790 \uc778\ub371\uc2a4\uac00 \uae00\uc790\uc5f4 \uc778\ub371\uc2a4\ub97c \ub118\uc9c0 \uc54a\uc744 \uacbd\uc6b0\n            if j < n - 1:\n                # \uadf8\ub8f9 \ub2e8\uc5b4\uc758 \uae38\uc774\ub97c \ube44\uad50\n                # \uadf8\ub8f9\ub2e8\uc5b4\uc778 \uacbd\uc6b0 \uadf8\ub8f9\ub2e8\uc5b4\uc758 \uae38\uc774\uac00 \uae00\uc790\uc5f4\uc758 \uae38\uc774\ub97c \ub118\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc784\uc2dc \ucd5c\uc18c \uae38\uc774 \ubcc0\uc218 \ucd08\uae30\ud654\n                temp = j\n                # \uc5f0\uc18d\ub41c \uae00\uc790 \uc778\ub371\uc2a4 \uc2dc\uc791 \uc778\ub371\uc2a4 \ucd08\uae30\ud654\n                left = right = j\n                while i < n:\n                    # \uc5f0\uc18d\ub41c \uae00\uc790 \uc778\ub371\uc2a4\uac00 \uc778\ub371\uc2a4\uac00 \ub118\uc5b4\uac00\uc9c0 \uc54a\ub294 \uacbd\uc6b0\n                    if j < n - 1:\n                        # \uadf8\ub8f9\ub2e8\uc5b4\uc778 \uacbd\uc6b0 \uadf8\ub8f9\ub2e8\uc5b4\uc758 \uae38\uc774\ub97c \ube44\uad50\n                        # \uadf8\ub8f9\ub2e8\uc5b4\uc778 \uacbd\uc6b0 \uadf8\ub8f9\ub2e8\uc5b4\uc758 \uae38\uc774\uac00 \uae00\uc790\uc5f4\uc758 \uae38\uc774\ub97c \ub118\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc784\uc2dc \ucd5c\uc18c \uae38\uc774 \ubcc0\uc218 \ucd08\uae30\ud654\n                        temp = j\n                        # \uc5f0\uc18d\ub41c \uae00\uc790 \uc778\ub371\uc2a4 \uc2dc\uc791 \uc778\ub371\uc2a4 \ucd08\uae30\ud654\n                        left = right = j\n                        # \uc5f0\uc18d\ub41c \uae00\uc790 \uc778\ub371\uc2a4 \uc99d\uac00\n                        j += 1\n                        # \uc5f0\uc18d\ub41c \uae00\uc790 \uc778\ub371\uc2a4 \uc774\ud6c4\uc5d0 \uc778\ub371\uc2a4 \ub118\uc5b4\uac00\uba74 \uc5f0\uc18d\ub41c \uae00\uc790 \uc778\ub371\uc2a4 \uac12\uc744 \ub2e4\uc2dc \ucd08\uae30\ud654\n                        if j == n:\n                            break\n                        # \uae00\uc790 \uc778\ub371\uc2a4\uac00 \ub2e4\uc74c \uae00\uc790\ub85c \uc774\ub3d9\ud558\ub294 \uacbd\uc6b0\n                        if words[i] == words[i + j]:\n                            "
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number_of_words = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    words.sort(key=len)\n    words = \" \".join(words)\n    dp = [[0] * number_of_words for _ in range(len(words))]\n    length = number_of_words\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i + j > len(words) - 1 or i > len(words) - 1:\n                break\n            if words[i] == words[j]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j + 1])\n            if dp[i][j] == 1 and j - i + 1 < length:\n                length = j - i + 1\n    return length\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    arr = [int(n) for n in stdin.split()]\n    arr.sort()\n    res = arr[k:n]\n    return''.join([str(n) for n in res])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 1\n   ... 1 1 1 1\n   ... ''')\n    '4000'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    profits = [0] * n\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(n):\n        profits[i] = a[i]\n    for i in range(1, k + 1):\n        dp[0][i] = profits[0]\n    for i in range(1, n):\n        for j in range(i, k + 1):\n            max_profit = 0\n            for k in range(i):\n                max_profit = max(max_profit, dp[k][j - 1] + profits[i - k - 1])\n            dp[i][j] = max_profit\n    return str(dp[-1][-1])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = [0] * k\n    t[0] = n\n    for i in range(n):\n        t[i % k] = min(t[(i - 1) % k], t[(i - 2) % k]) + a[i]\n    return str(t[k - 1])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if i == j:\n                dp[i][j] = arr[i - 1]\n            elif i < j:\n                dp[i][j] = -1\n            else:\n                dp[i][j] = max([dp[i - 1][j - 1] + arr[i - 1], dp[i][j - 1]])\n    l = n - 1\n    for i in range(1, k + 1):\n        if l < 0:\n            break\n        if dp[l][i] == dp[l - 1][i - 1] + arr[l - 1]:\n            print(arr[l - 1])\n            l -= 1\n        else:\n            print(dp[l][i])\n            l -= 2\n    return ''\n    \n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 3\\n5 4 2 6 5 1 9 2\\n\")\n    20\n    >>> solution(\"5 1\\n1 1 1 1 1\\n\")\n    1\n    >>> solution(\"4 2\\n1 2000 2000 2\\n\")\n    4000\n    \"\"\"\n   ...\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    m = 0\n    for i in range(0, k):\n        profit = 0\n        for j in range(i, k):\n            profit = max(profit, a[j])\n            m += profit\n    return m\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    \n    d = dict()\n    for i in range(k):\n        d[i] = [0] * n\n    \n    for i in range(n):\n        d[i % k][i] = a[i]\n    \n    for i in range(k, n):\n        for j in range(n):\n            if i % k == 0:\n                d[0][j] = max(d[0][j], d[k-1][j - 1])\n            elif j >= k:\n                d[i % k][j] = max(d[i % k][j], d[(i - k) % k][j - k] + d[k - 1][j - 1])\n    return d[k - 1][n - 1]\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, k = [int(x) for x in stdin.split()]\na = [int(x) for x in stdin.split('\\n')[1].split()]\ndp = [[0 for _ in range(n + 1)] for _ in range(k + 1)]\n\nfor i in range(n + 1):\n    dp[0][i] = a[i - 1]\n\nfor i in range(k + 1):\n    dp[i][0] = 0\n\nfor i in range(1, k + 1):\n    for j in range(1, n + 1):\n        dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n        if j - 1 >= 0:\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + a[j - 1])\n\nprint(dp[k][n])\n\nfor i in range(k, 0, -1):\n    for j in range(n + 1):\n        if dp[i][j] == dp[i - 1][j]:\n            continue\n        elif dp[i][j] == dp[i - 1][j - 1] + a[j - 1]:\n            print(i, j)\n            break\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, k = int(input[0].split(' ')[0]), int(input[0].split(' ')[1])\n    numbers = sorted(int(input[1].split(' ')[i]) for i in range(n))\n    numbers = list(reversed(numbers))\n    profit = []\n    for i in range(n - k + 1):\n        profit.append(sum(numbers[i:i + k]))\n    print(max(profit))\n    print(' '.join(map(str, list(reversed(profit))[:k])))\n    return''.join(map(str, list(reversed(profit))[:k]))\nprint(solution(input()))\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    profits = [0] * k\n    for i, ai in enumerate(a):\n        profit = 0\n        for j in range(i, n):\n            if a[j] >= ai:\n                profit = max(profit, ai)\n            else:\n                profits[j - i] += profit\n                break\n        else:\n            profits[-1] += profit\n    return str(sum(profits))\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Doctest:\n        >>> solution('8 3\\n5 4 2 6 5 1 9 2\\n')\n        20\n        >>> solution('5 1\\n1 1 1 1 1\\n')\n        1\n        >>> solution('4 2\\n1 2000 2000 2\\n')\n        4000\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[:2])\n    a = tuple(map(int, stdin.split('\\n')[1:]))\n    total = sum(a)\n    t = [0] * k\n    for i in range(n):\n        t[i % k] += a[i]\n    print(max(t))\n    print(*t)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    s = list(map(int, stdin.split('\\n')[1].split()))\n    s.append(0)\n    s.sort()\n    s.append(s[-1]+3)\n    cnt = 0\n    for i in range(1, len(s)):\n        if s[i] - s[i-1] == 3:\n            cnt += 1\n    return str(cnt)\n    '''\n    stdin = stdin.split('\\n')\n    stdin = list(map(int, stdin[1].split()))\n    stdin.append(0)\n    stdin.sort()\n    stdin.append(stdin[-1] + 3)\n    cnt = 0\n    last = stdin[0]\n    for i in range(1, len(stdin)):\n        if stdin[i] - stdin[i - 1] == 3:\n            cnt += 1\n        elif stdin[i] - stdin[i - 1] < 3:\n            cnt += 1\n            last = stdin[i]\n    return str(cnt)\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(result)\n\n    # ********** Solution **********\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    s = 0\n    cnt = 0\n    for i in range(n):\n        s += a[i]\n        if s == 0:\n            cnt += 1\n        elif s > 0:\n            cnt += 1\n            s = 0\n    return cnt\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # l = stdin.split()\n    l = [int(s) for s in stdin.split()]\n    if 0 in l:\n        return '0'\n    elif sum(l) % 2 == 0:\n        return '0'\n    else:\n        if max(l) < 0:\n            return '0'\n        else:\n            return sum(l)\n\nprint(solution(stdin))"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = input()\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    a.append(0)\n    b = 0\n    c = 0\n    for i in range(len(a)-1):\n        if a[i] == 0:\n            c += 1\n        b += a[i]\n        if b == 0:\n            c += 1\n    print(c)\n    return ''\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... -5 3 2\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... -2 3 -9 2\n   ... ''')\n    '0'\n    >>> solution('''9\n   ... -1 1 -1 1 -1 1 1 -1 -1\n   ... ''')\n    '6'\n    >>> solution('''8\n   ... 16 -5 -11 -15 10 5 4 -4\n   ... ''')\n    '3'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here. You can use additional functions if need be.\n    The function have to return a string.\n    \"\"\"\n    pass"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] > 0:\n            a[j] -= 1\n            j += 1\n        count += j - i - 1\n        i = j\n    return str(count)\n    pass"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    arr = [int(num) for num in stdin[1].split()]\n    result = 0\n    for i in range(n - 1):\n        if arr[i] + arr[i + 1] == 0:\n            continue\n        else:\n            if arr[i] > 0:\n                result += 1 + arr[i] + arr[i + 1]\n                arr[i + 1] = arr[i] + arr[i + 1]\n            else:\n                result += 1 - arr[i] + arr[i + 1]\n                arr[i + 1] = -arr[i] + arr[i + 1]\n    print(result)\n    return result\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # \u89e3\u984c\u601d\u8def\uff1a\n    # 1. \u5148\u5224\u65b7\u6578\u5217\u5143\u7d20\u6578\u91cf\uff0c\u82e5\u4e3a\u5947\u6578\u9577\u5ea6\uff0c\u5247\u5168\u90e8\u90fd\u662f0\uff0c\u82e5\u4e3a\u5076\u6578\u9577\u5ea6\uff0c\u5247\u5012\u6578\u4e00\u534a\u5143\u7d20\u90fd\u662f0\uff0c\u53e6\u4e00\u534a\u5168\u90e8\u90fd\u662f1\n    # 2. \u6301\u7e8c\u6bd4\u8f03\u5169\u5143\u7d20\u76f8\u9664\u7684\u7d50\u679c\uff0c\u6293\u51fa\u8f03\u5927\u8005\n    # 3. \u5c07\u5012\u6578\u5143\u7d20\uff0c\u79fb\u9664\uff0c\u5269\u4e0b\u7684\u70ba\u6578\u5217\u5143\u7d20\u76f8\u52a0\uff0c\u4e26\u8a08\u7b97\u76f8\u9664\u5f8c\u7684\u6700\u5927\u503c\n    # \u82e5\u6578\u5217\u5143\u7d20\u6578\u91cf\u70ba\u5947\u6578\uff0c\u5148\u5c07\u5143\u7d20\u5168\u90e8\u8a2d\u70ba0\uff0c\u4e26\u8a08\u7b97\u6700\u5927\u503c\n    # \u82e5\u6578\u5217\u5143\u7d20\u6578\u91cf\u70ba\u5076\u6578\uff0c\u5148\u5c07\u5143\u7d20\u5148\u5012\u5e8f\u6392\u5217\uff0c\u518d\u8a08\u7b97\u6700\u5927\u503c\uff0c\u518d\u6309\u9806\u5e8f\u6392\u5217\n    # \u7576\u5143\u7d20\u6578\u91cf\u4e0d\u8db3\u65bc2\u6642\uff0c\u8f38\u51fa\u7a7a\u5b57\u4e32\n\n    length, m = map(int, stdin.split())\n    if length % 2 == 0:\n        t = length//2\n    else:\n        t = length//2 + 1\n    a = []\n    for i in range(t):\n        a.append(i)\n    a.sort(reverse=True)\n    if len(a) < 2:\n        print('')\n        return\n\n    if m % 2 == 0:\n        m = m//2\n        while m > 0:\n            if a[0] == a[1]:\n                a.pop(0)\n                a.pop(0)\n                m -= 2\n            else:\n                a.pop(0)\n                m -= 1\n        print(sum(a))\n    else:\n        m = m//2\n        while m > 0:\n            if a[0] == a[1]:\n                a.pop(0)\n                a.pop(0)\n                m -= 2\n            else:\n                a.pop(0)\n                m -= 1\n        print(sum(a))\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_line(line: str) -> int:\n        a, b = line.split(' ')\n        return int(a), int(b)\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = get_line(stdin.readline())\n        d = [0] * (n + 1)\n        d[0] = m\n        for i in range(1, n + 1):\n            d[i] = d[i - 1] - (i - 1)\n        d.pop(0)\n        max_diff = 0\n        for i in range(n):\n            max_diff = max(max_diff, d[i] - d[i + 1])\n        print(max_diff)\n    return ''\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) / O(1)\"\"\"\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    k = int(stdin)\n    \n    # use counter to store positions\n    position = 0\n    count = 0\n    \n    # search for a multiple of K, which is the first occurence\n    for x in range(1, k + 1):\n        if k % x == 0:\n            count += 1\n            position = x\n            \n    # if there are no multiples, print -1\n    if count == 0:\n        return -1\n    \n    # otherwise return the position of the first occurrence\n    return position\n    \n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline())\n    if K % 2!= 0:\n        return -1\n    array = list(map(int, stdin.readline().strip().split()))\n    for index, num in enumerate(array):\n        if num % K == 0:\n            return index + 1\n    return -1"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    i = 1\n    while not (i % K):\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return first occurrence of multiple of K\"\"\"\n    n = stdin[0]\n    k = int(stdin[1])\n    seq = list(range(1, int(n) + 1))\n    for idx, el in enumerate(seq):\n        if el % k == 0:\n            return idx + 1\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sequence = [int(num) for num in stdin.split('\\n')]\n    for index, num in enumerate(sequence):\n        if num % 101 == 0:\n            return index\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return None\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return solution"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    K = int(stdin)\n    print(K)\n    return K"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, K = map(int, stdin.split())\n    seen = set()\n    for i in range(n):\n        if (i + 1) * K in seen:\n            print(i + 1)\n            return\n        seen.add((i + 1) * K)\n    print(-1)\n    return\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(1)\n    \"\"\"\n    n, m = [int(x) for x in stdin.split(\" \")]\n    p = [int(x) for x in stdin.split(\" \")]\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            # print(i, j)\n            if p[j] - p[i] == m:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (p[i] + p[j]) % 2 == m:\n                res += 1\n    print(res)\n\n    return \"\""
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of pairs of indices such that the value of the median is exactly the given value.\"\"\"\n    #    p = [int(x) for x in stdin.split()]\n    #    n, m = [int(x) for x in stdin.split()]\n    #    return len([1 for l in range(1, n+1) for r in range(l+1, n+1) if l+r == m])\n    p = [int(x) for x in stdin.split()]\n    m = int(stdin.split()[1])\n    n = len(p)\n    q = [0] * (n + 1)\n    for i in range(n):\n        q[p[i]] = q[p[i]] + 1\n    for i in range(1, n+1):\n        q[i] = q[i] + q[i-1]\n    q[n] = n\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if q[m] - q[i] - q[j] == 0:\n                ans += 1\n    return ans"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    p = [int(x) for x in stdin.split('\\n')[1].split()]\n    l = list()\n    for i, v in enumerate(p):\n        if v == m:\n            l.append(i)\n    n = len(l)\n    d = {}\n    for i in range(n):\n        if p[l[i]] in d:\n            d[p[l[i]]] += 1\n        else:\n            d[p[l[i]]] = 1\n    cnt = 0\n    for i in range(n - 1):\n        if m in d and d[m] >= i + 1:\n            cnt += (n - i) * (n - i - 1) // 2\n    if m in d:\n        cnt += (n - d[m]) * (n - d[m] - 1) // 2\n    print(cnt)"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(n) for n in stdin.split(' ')]\n    L = [int(n) for n in stdin.split(' ')]\n    N_temp = N\n    for i in range(0, M):\n        L = sorted(L)\n        L.insert(i, L[i])\n        L.pop(i + 1)\n        if N == 1:\n            break\n        N = N - 1\n    L = sorted(L)\n    print(L)\n    if N == 0:\n        return str(1)\n    else:\n        return str(0)"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_pages, num_coffees = stdin.split()\n    num_pages = int(num_pages)\n    num_coffees = int(num_coffees)\n    coffee_dosages = stdin.split()\n    coffee_dosages = [int(coffee_dosage) for coffee_dosage in coffee_dosages]\n\n    pages_to_write = 0\n    for i in range(num_coffees):\n        pages_to_write += max(0, coffee_dosages[i] - (i + 1))\n\n    if pages_to_write > num_pages:\n        return '-1'\n\n    return str(num_pages - pages_to_write)\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, m = map(int, stdin.readline().split())\na = list(map(int, stdin.readline().split()))\n\na.sort()"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    coffee = [int(x) for x in stdin.split(' ')[1::]]\n    if max(coffee) * n > m:\n        return '-1'\n    return str(n)\n\"\"\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = [int(cups) for cups in stdin.split()]\n\n    # c_max = m\n    c_max = n\n    c_min = 1\n\n    for cup in cups:\n        if cup > c_max:\n            c_max = cup\n        if cup < c_min:\n            c_min = cup\n    if c_min == 1 and c_max == n:\n        return '1'\n\n    return '-1'\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    cnt = 0\n    dp = [float(\"inf\")] * (m + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(min(a[i], m) + 1):\n            dp[j] = min(dp[j], dp[j - 1] + 1)\n    print(dp[m])\n    return\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve())\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimal number of days Polycarp needs to complete the coursework.\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    lines = stdin.split('\\n')\n    n, m = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n    cups = [int(cup) for cup in lines[1].split(' ')]\n    cups.sort()\n    if sum(cups) <= m:\n        return '0'\n    elif cups[0] >= (n + 1):\n        return '-1'\n    else:\n        first_day = 0\n        for i in range(len(cups) - 1, -1, -1):\n            if cups[i] < (n + 1):\n                first_day = cups[i]\n                break\n        second_day = 0\n        for i in range(len(cups) - 1, -1, -1):\n            if cups[i] >= (n + 1):\n                second_day = cups[i]\n                break\n        days = 1\n        for i in range(first_day, second_day + 1):\n            if cups[i] < (n + 1):\n                days += 1\n        return str(days)\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/trainingSZBXW7-6HW/\n    '''\n    pass\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    coffee = list(map(int, stdin.split(' ')))\n    max_coffee = max(coffee)\n    if max_coffee > m:\n        return -1\n    if n == m:\n        return 0\n    elif n == 1:\n        return m - coffee[0]\n    else:\n        return min(m // n, n - 1) + n - m % n\n\"\"\"\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    # add padding to end of array with negative integers\n    # so that they can be subtracted from\n    arr.append(-1)\n    # also append a 0 at the end\n    arr.append(0)\n\n    if n == 2:\n        print(0)\n        return\n\n    # add a 0 at the beginning to remove the edge\n    # case when the array has length 2\n    if n == 1:\n        arr.pop(1)\n\n    # pointers\n    i = 0\n    j = 1\n    result = 1\n    while True:\n        # if first two elements are not equal\n        # there is no way to make it an arithmetic progression\n        # so return -1\n        if arr[i]!= arr[j]:\n            print(-1)\n            return\n        # if the difference between the last two elements is 1\n        # then the whole array is an arithmetic progression\n        elif arr[i + 1] - arr[i] == 1:\n            print(result)\n            return\n\n        # if the last element is 0, then the rest of the array is not an arithmetic progression\n        elif arr[j] == 0:\n            print(-1)\n            return\n\n        # if the last element is negative, then the last two elements are not equal\n        # so there is no way to make it an arithmetic progression\n        elif arr[j] < 0:\n            print(-1)\n            return\n\n        # if the last element is positive\n        # change the first element and the last element\n        else:\n            # if the difference between the first and the last element is 1\n            # then change the first element and the last element\n            # and increase the result by 1\n            if arr[j] - arr[i] == 1:\n                arr[i] = arr[j] - 1\n                arr[j] = arr[i] + 1\n                result += 1\n            # if the difference between the first and the last element is not 1\n            # then change the first element\n            # and increase the result by 1\n            else:\n                arr[i] = arr[j] - 1\n                result += 1\n\n        # if the first element is positive, then the difference between the first and the last element is 1\n        # so there is no way to change it\n        # increase the pointer for the second element\n        if arr[i] > 0:\n            j += 1\n\n        # if the first element is negative, then the difference between the first and the last element is 1\n        # so there is no way to change it\n        # increase the pointer for the second element\n        elif arr[i] < 0:\n            j += 1\n\n        # if the first element is zero, then there is no way to change it\n        # increase the pointer for the second element\n        else:\n            j += 1\n\n        # if the array has only two elements\n        # there is no way to make it an arithmetic progression\n        # so return -1\n        if j > len(arr) - 1:\n            print(-1)\n            return\n        # if the array has more than two elements\n        # increase the pointer for the first element\n        elif j < len(arr):\n            i += 1\n        # if the array has only one element\n        # there is no way to make it an arithmetic progression\n        # so return -1\n        else:\n            print(-1)\n            return\n\n\nsolution(\"4\\n24 21 14 10\")\nsolution(\"2\\n500 500\")\nsolution(\"3\\n14 5 1\")\nsolution(\"5\\n1 3 6 9 12\")\nsolution(\"5\\n1 2 3 4 5\")\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    if l[0] < 3 or l[0] > 100000:\n        return -1\n    l.sort()\n    if l[0] - l[1]!= l[1] - l[2]:\n        return -1\n    for i in range(3, len(l)):\n        if l[i] - l[i - 1]!= l[i - 1] - l[i - 2]:\n            return -1\n    return l[0] + 1 - l[1]\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(x) for x in stdin.split(\" \")]\n\n    if n <= 2:\n        return '0'\n\n    i = 0\n    while i < n - 1 and (b[i + 1] - b[i]) == (b[i + 2] - b[i + 1]):\n        i += 1\n        if i == n - 2:\n            return '0'\n\n    if i == n - 1:\n        return '1'\n\n    if i == 0:\n        return str(n - i - 1)\n    else:\n        return str(n - i - 2)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    s = 0\n    for i in range(n):\n        if b[i] == 0:\n            s = 0\n        if b[i] > b[i - 1]:\n            s += b[i] - b[i - 1]\n        else:\n            s += b[i - 1] - b[i]\n    print(s) if s % 3 == 0 else print(-1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n24 21 14 10\\n\")\n    '3\\n'\n    \"\"\"\n    n, *sequence = map(int, stdin.split())\n    sequence = [a - b for a, b in zip(sequence, sequence[1:])]\n    if n == 1:\n        return '1\\n' if sequence[0] <= 0 else '0\\n'\n    elif n == 2:\n        return '-1\\n' if sequence[1] > 0 or sequence[0] > 0 else '0\\n'\n\n    dp = [float('inf')] * n\n    dp[0] = 1 if sequence[0] > 0 else 2\n    dp[1] = dp[0]\n    if sequence[1] > 0:\n        dp[1] = 1\n    for i in range(2, n):\n        if sequence[i] > 0:\n            dp[i] = 1\n        else:\n            dp[i] = min(dp[i - 1], dp[i - 2] + 1)\n    return str(dp[-1])\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(s) for s in stdin.split(\"\\n\")[0].split()]\n    i = 1\n    if len(a) < 3:\n        return -1\n    while i < len(a):\n        j = 1\n        while j < len(a):\n            if i + j >= len(a):\n                break\n            if a[i + j] - a[i] == a[j] - a[i + j]:\n                j += 1\n            else:\n                break\n        if j == len(a):\n            return len(a) - i\n        i += 1\n    return -1\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    \ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    number = int(data[0])\n    number_list = [int(i) for i in data[1].split(' ')]\n    if len(number_list) <= 2:\n        return '0'\n    diffs = []\n    for i in range(len(number_list) - 1):\n        diffs.append(number_list[i + 1] - number_list[i])\n    diffs.sort()\n    curr = 0\n    for i in range(len(diffs) - 1):\n        curr += diffs[i]\n        if curr > 1:\n            return str(i + 1)\n    return '-1'\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str()"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = set(map(int, stdin.split()))\n    if k == 1:\n        return len(s)\n    else:\n        s = list(s)\n        s.sort()\n        res = 1\n        num = 1\n        for i in range(n - 1):\n            diff = abs(s[i] - s[i + 1])\n            if diff <= 5:\n                num += 1\n                if num == k:\n                    res += 1\n                    num = 1\n            else:\n                num = 1\n        return res\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_dist(x):\n        return x[0]\n\n    def get_skills(stdin: str):\n        return list(map(int, stdin.split()))\n\n    stdin = stdin.splitlines()\n    n, k = map(int, stdin[0].split())\n    skills = get_skills(stdin[1])\n    teams = []\n    skills.sort(reverse=True)\n    for i in range(n):\n        if len(teams) == k:\n            break\n        for j in range(len(teams)):\n            if get_dist(skills[i]) - get_dist(teams[j]) <= 5:\n                teams[j].append(skills[i])\n                break\n        else:\n            teams.append([skills[i]])\n    for i in range(len(teams)):\n        teams[i] = sum(teams[i])\n    teams.sort(reverse=True)\n    return teams[0]\n\nprint(solution(stdin))"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = sorted(map(int, stdin.readline().split()))\n    \n    return sum(s[k-1]-s[i] for i in range(n) if s[i]<=s[k-1]+5)\n\nprint(solution(input))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    s = list(map(int, stdin.split('\\n')[1].split()))\n    s = [s[i:i+k] for i in range(0, len(s), k)]\n    return len(s)"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    m = {}\n    b = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= 5:\n                if i in m:\n                    m[i].add(j)\n                else:\n                    m[i] = set()\n                    m[i].add(j)\n                if j in m:\n                    m[j].add(i)\n                else:\n                    m[j] = set()\n                    m[j].add(i)\n\n    c = m.copy()\n\n    for i in range(k):\n        b.append([])\n\n    for i in range(k):\n        for j in c:\n            if len(c[j]) < 2:\n                b[i].append(j)\n                for p in m[j]:\n                    c[p].remove(j)\n            if len(b[i]) == n // k:\n                break\n\n    return len(b[0])\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n\n    # This array is used for the dynamic programming\n    dp = [0] * n\n\n    # for every pair of students, we check if they can be part of the same team\n    # and calculate the total score of each pair of teams (we know that they are balanced)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(students[i] - students[j]) <= 5:\n                # we can add both of them to the same team\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    # We return the maximum score of any team we can form\n    return max(dp)\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    arr = [int(x) for x in stdin[2:]]\n    dp = [[0 for j in range(n)] for i in range(k)]\n\n    for i in range(k):\n        dp[i][0] = arr[0]\n\n    for i in range(n - 1):\n        for j in range(k):\n            max_sum = 0\n            for t in range(k):\n                if j!= t:\n                    if max_sum < dp[t][i]:\n                        max_sum = dp[t][i]\n            dp[j][i + 1] = max(arr[i + 1] + max_sum, arr[i + 1])\n\n    return max(dp[i][-1] for i in range(k))\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(\" \")]\n    if (n-1)*k >= m:\n        return str(k)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    'Takes input and returns solution'\n    n, k, m = map(int, stdin.split())\n    num_of_subjects = n-1\n    points = m\n    A_list = list(map(int, stdin.split()))\n    subtract_list = []\n    for i in range(num_of_subjects):\n        subtract_list.append(A_list[i]-A_list[i+1])\n    subtract_list.append(A_list[num_of_subjects]-k)\n    min_subtract_list = min(subtract_list)\n    if min_subtract_list >= points:\n        return str(points)\n    return str(int(subtract_list[-1]+1))"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution.testcase[0])\n    8\n    \"\"\"\n    N, K, M = [int(v) for v in stdin.split()]\n    scores = [int(v) for v in stdin.split()[1:]]\n    avg = sum(scores) / (N - 1)\n    if avg >= M:\n        return N\n    return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\n_, K, M, *A = map(int, sys.stdin.read().split())\n\naverage = sum(A) / (len(A) + 1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return'solution'\n\"\"\"\n\nimport sys\n\nN, K, M = list(map(int, sys.stdin.readline().split()))\nA = list(map(int, sys.stdin.readline().split()))"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\""
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solve(input: List[int], K: int, M: int) -> int:\n        N, A = input\n        lower, upper = 0, K\n        while lower <= upper:\n            middle = (lower + upper) // 2\n            if middle == 0:\n                return lower\n            if middle >= max(A):\n                return lower\n            total = 0\n            for i in range(N):\n                if A[i] <= middle:\n                    total += middle\n                else:\n                    total += A[i]\n            if total > M:\n                upper = middle - 1\n            else:\n                lower = middle + 1\n        return lower\n\n    nums = stdin.split('\\n')\n    N, K, M = list(map(int, nums[0].split(' ')))\n    A = list(map(int, nums[1].split(' ')))\n    A.sort()\n    print(A)\n    print(solve(A, K, M))\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k, m = list(map(int, stdin.readline().split()))\n    scores = list(map(int, stdin.readline().split()))\n    for i in range(len(scores)):\n        scores[i] = scores[i] + i\n    scores.sort()\n    scores = scores[:-1]\n    score_sum = 0\n    for score in scores:\n        score_sum += score\n        if score_sum/n >= m:\n            return str(score)\n    return str(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    scores = [int(x) for x in stdin.split()]\n    print(k - max(scores))\n\n    return \"\"\n\n------Explanation-----\nThe maximum score is 8, and the minimum score is 3.\nThe required score on the final subject is 7, which is greater than the maximum.\nSo, we print 7 as our answer.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n,k,m = stdin.split(' ')\n    n = int(n)\n    k = int(k)\n    m = int(m)\n    if (k < m):\n        print(-1)\n    else:\n        A = stdin.split(' ')\n        for i in range(n):\n            A[i] = int(A[i])\n        A = list(set(A))\n        A.sort()\n        A.reverse()\n        i = 0\n        if n == 1:\n            while k >= A[i] and i < n:\n                i += 1\n                k -= A[i]\n            print(i)\n        else:\n            while k >= A[i] and i < n-1:\n                i += 1\n                k -= A[i]\n            if k < A[i]:\n                print(-1)\n            else:\n                print(i)\n            "
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input is:\n        N, K, Q\n        A_i\n    returns:\n        N lines:\n            Yes if player i survived\n            No otherwise\n    \"\"\"\n    (N, K, Q) = [int(s) for s in stdin.split()]\n\n    scores = [K for _ in range(N)]\n\n    for _ in range(Q):\n        player = int(stdin)\n        score = scores[player - 1]\n        scores[player - 1] = score - 1\n\n    return \" \".join([\"Yes\" if score > 0 else \"No\" for score in scores])\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    q = int(stdin[2])\n    ans = []\n    for i in range(n):\n        ans.append('Yes')\n    for i in range(n - 1):\n        if k * i <= q < k * (i + 1):\n            ans[i] = 'No'\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"Yes\" if player_survive else \"No\""
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    survivors = set()\n    for i in range(1, Q + 1):\n        correct = stdin.split()[i]\n        # print(correct)\n        scores = [score - 1 if score > 0 else score for score in scores]\n        scores.append(int(correct))\n        scores = sorted(scores)\n        # print(scores)\n        scores = scores[::-1]\n        # print(scores)\n        min_score = scores.pop()\n        # print(min_score)\n        # print(scores)\n        # print(scores[:K])\n        if min_score >= 0:\n            survivors.add(i)\n        else:\n            break\n    print(len(survivors))\n    print(*list(survivors))\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(N)\n    space: O(1)\n    \"\"\"\n    N, K, Q = map(int, stdin.split('\\n')[0].split())\n    scores = [K] * N\n    scores[0] = 0\n    for _ in range(Q):\n        A = int(stdin.split('\\n')[1]) - 1\n        scores[A] -= 1\n        for i in range(N):\n            if scores[i] <= 0:\n                continue\n            scores[i] += 1\n            break\n    return '\\n'.join(['Yes' if s < 0 else 'No' for s in scores])"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs from standard input\n    n, k, q = map(int, stdin.split())\n    arr = []\n    for i in range(n):\n        arr.append(int(stdin))\n\n    # game loop\n    while len(arr) > 1:\n        # determine score of each player\n        scores = [0] * n\n        for player in arr:\n            scores[player-1] += 1\n        # find winner\n        winner = arr[scores.index(max(scores))]\n\n        # check whether winner survived\n        scores = [0] * n\n        for player in arr:\n            if player == winner:\n                scores[arr.index(player)] += 1\n        winner_survived = True\n        for player in scores:\n            if player == 0:\n                winner_survived = False\n        # end game\n        if winner_survived:\n            arr = [winner]\n        else:\n            arr.remove(winner)\n    # end result\n    return \"Yes\" if arr[0] else \"No\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, K, Q, *A = [int(s) for s in stdin.split()]\n    scores = [K] * N\n\n    for i in range(Q):\n        a = A[i] - 1\n        scores[a] -= 1\n        for j in range(N):\n            if scores[j] == 0:\n                continue\n            scores[j] -= 1\n            if scores[j] == 0:\n                print('No')\n                break\n        else:\n            print('Yes')\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns if the player with index 'x' survived or not\"\"\"\n    # read input\n    n, k, q = map(int, stdin.split(' '))\n    scores = [k] * n\n    for _ in range(q):\n        i = int(stdin.split(' ')[1])\n        scores[i - 1] -= 1\n    survives = set()\n    for i in range(n):\n        if scores[i] > 0:\n            survives.add(i)\n    return '\\n'.join(map(lambda x: 'Yes' if x in survives else 'No', range(n)))\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the problem\"\"\"\n    lines = stdin.split(\"\\n\")\n    n, k, q = map(int, lines[0].split())\n    points = list(map(int, lines[1].split()))\n    for _ in range(q):\n        player = int(lines[2+_])\n        points[player-1] -= 1\n        if points[player-1] == 0:\n            points = [x if x > 0 else 0 for x in points]\n        if points[player-1] <= k:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    a = np.array(a)\n    rows = []\n    cols = []\n    for i in range(n):\n        if np.all(a[i, :] == 0):\n            rows.append(i)\n        if np.all(a[:, i] == 0):\n            cols.append(i)\n    if len(rows) < len(cols):\n        return \"NO\"\n    for i in rows:\n        if np.any(a[i, :]):\n            return \"NO\"\n    for j in cols:\n        if np.any(a[:, j]):\n            return \"NO\"\n    if np.all(a[:, 0] == 0) and np.all(a[:, m - 1] == 1):\n        return \"NO\"\n    if np.all(a[0, :] == 0) and np.all(a[n - 1, :] == 1):\n        return \"NO\"\n    if np.all(a[0, :] == 1) and np.all(a[n - 1, :] == 0):\n        return \"NO\"\n    for i in range(n):\n        for j in range(m):\n            if i in rows and j in cols:\n                if a[i, j] == 1:\n                    a[i, j] = 0\n                else:\n                    a[i, j] = 1\n    if np.all(a[:, 0] == 0) and np.all(a[:, m - 1] == 1):\n        return \"YES\"\n    if np.all(a[0, :] == 0) and np.all(a[n - 1, :] == 1):\n        return \"YES\"\n    if np.all(a[0, :] == 1) and np.all(a[n - 1, :] == 0):\n        return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(nm)\n    space: O(n)\n    \"\"\"\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    a = [list(stdin) for _ in range(n)]\n    \n    def is_valid(a):\n        sorted_a = [sorted(row) for row in a]\n        for i in range(n):\n            for j in range(m):\n                if a[i][j]!= sorted_a[i][j]:\n                    return False\n        return True\n    \n    def invert(row, col):\n        for i in range(m):\n            a[row][i] = 1 if a[row][i] == 0 else 0\n        for i in range(n):\n            a[i][col] = 1 if a[i][col] == 0 else 0\n        return is_valid(a)\n    \n    def invert_col(col):\n        for i in range(n):\n            a[i][col] = 1 if a[i][col] == 0 else 0\n        return is_valid(a)\n    \n    def is_sorted():\n        for i in range(n):\n            if sorted(a[i])!= a[i]:\n                return False\n        return True\n    \n    if is_valid(a):\n        return \"YES\"\n    elif not is_sorted():\n        return \"NO\"\n    else:\n        for i in range(m):\n            if not invert(0, i):\n                return \"NO\"\n        return \"YES\"\n        \n        "
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in stdin.split(' ')[i * m:i * m + m]])\n\n    row = list(map(list, zip(*a)))\n    col = list(map(list, zip(*row)))\n\n    row = sorted(row)\n    col = sorted(col)\n    inv_row = sorted(a, key=lambda x: x[0])\n    inv_col = sorted(a, key=lambda x: x[1])\n    # print(row)\n    # print(col)\n    # print(inv_row)\n    # print(inv_col)\n    r = ''.join([str(x[0] + 1) for x in row])\n    c = ''.join([str(x[0] + 1) for x in col])\n    ri = ''.join([str(x[0] + 1) for x in inv_row])\n    ci = ''.join([str(x[0] + 1) for x in inv_col])\n    if r == c == ri == ci:\n        return 'YES'\n    else:\n        return 'NO'\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if is_sorted(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [stdin.split() for stdin in stdin]\n    if len(set(map(len, a))) > 1:\n        print('NO')\n        return\n    else:\n        a = [list(map(int, i)) for i in a]\n        res = []\n        for i in range(n):\n            b = []\n            for j in range(m):\n                if a[i][j] == 0:\n                    b.append(1)\n                else:\n                    b.append(0)\n            res.append(b)\n        r = ''\n        for i in range(n):\n            if res[i][0] == 1:\n                r += '1'\n            else:\n                r += '0'\n        c = ''\n        for j in range(m):\n            if a[0][j] == 1:\n                c += '1'\n            else:\n                c += '0'\n        print('YES')\n        print(r)\n        print(c)\n\nsolution(stdin)\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    a = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    return \"YES\" if sorted(sum(a, [])) == sorted(sum(a, []))[::-1] else \"NO\""
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    invert = {0: 0, 1: 1}\n    matrix = [list(map(invert.get, row)) for row in matrix]\n\n    sorted_matrix = sorted(matrix)\n\n    inverted_rows = []\n    for row in matrix:\n        if row!= sorted_matrix[row.index(1)]:\n            inverted_rows.append(row)\n\n    inverted_cols = []\n    for col in zip(*matrix):\n        if sorted(col)!= col:\n            inverted_cols.append(col)\n\n    if len(inverted_rows)!= n or len(inverted_cols)!= m:\n        return \"NO\"\n    return \"YES\\n\" + \"\".join(map(str, inverted_rows)) + \"\\n\" + \"\".join(map(str, inverted_cols))\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.readline().strip().split()]\n    a = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    a_inv_rows = [list(map(int, [str(i) for i in reversed(row)])) for row in a]\n    a_inv_cols = list(zip(*a))\n    a_inv_cols = [list(map(int, [str(i) for i in reversed(col)])) for col in a_inv_cols]\n    inv_rows_set = set()\n    inv_cols_set = set()\n    for row in a_inv_rows:\n        row = list(map(int, [str(i) for i in reversed(row)]))\n        inv_rows_set.add(tuple(row))\n    for col in a_inv_cols:\n        col = list(map(int, [str(i) for i in reversed(col)]))\n        inv_cols_set.add(tuple(col))\n    if len(inv_rows_set)!= 1 or len(inv_cols_set)!= 1:\n        return \"NO\"\n    else:\n        row = list(inv_rows_set)[0]\n        col = list(inv_cols_set)[0]\n        row = [i == 1 for i in row]\n        col = [i == 1 for i in col]\n        row = \"\".join(list(map(str, row)))\n        col = \"\".join(list(map(str, col)))\n        return \"YES\\n\" + row + \"\\n\" + col\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()[i:i+columns]] for i in range(0, rows*columns, columns)]\n    \n    # print(a)\n    def is_sorted(a: list) -> bool:\n        for i in range(len(a)):\n            if a[i]!= sorted(a[i]):\n                return False\n        return True\n    \n    def flip_row(a: list, i: int) -> list:\n        for j in range(len(a[i])):\n            a[i][j] = 1 - a[i][j]\n        return a\n    \n    def flip_column(a: list, j: int) -> list:\n        for i in range(len(a)):\n            a[i][j] = 1 - a[i][j]\n        return a\n    \n    # print(a)\n    \n    if is_sorted(a):\n        return 'YES\\n111\\n11'\n    \n    flips = []\n    \n    for i in range(len(a)):\n        if not is_sorted(flip_row(a, i)):\n            flips.append(i)\n    \n    for j in range(columns):\n        if not is_sorted(flip_column(a, j)):\n            flips.append(j)\n    \n    if len(flips) == 0:\n        return 'NO'\n    \n    ans = ''\n    for i in flips:\n        ans += '1' if i < len(a) else '0'\n    \n    return 'YES\\n' + ans + '\\n' + '1' * len(a)"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for n in range(1, 10):\n        if stdin[0] == str(n):\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin)%(2**len(stdin)) == 0 else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"Yes\" if int(stdin) % 5 == 0 else \"No\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = stdin.strip()\n    if stdin[0] == \"0\":\n        return \"Yes\"\n    elif int(stdin) <= 21:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if (\n        stdin[::-1] == stdin and\n        stdin[0]!= stdin[1]\n    ) else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A number is divisible by 2 or 3 if its digit sum is divisible by 2 or 3.\n    We are looking for an increasing sequence of 10 digits whose digit sum is divisible by 2 or 3.\n    For example:\n    23456789 is divisible by 2 or 3\n    23456790 is divisible by 2\n    23456789 is divisible by 3\n    '''\n    def digit_sum(n: int) -> int:\n        return sum([int(x) for x in str(n)])\n\n    i = 1\n    while True:\n        if digit_sum(i * 10 ** 10) % 2 == 0 or digit_sum(i * 10 ** 10) % 3 == 0:\n            break\n        i += 1\n    return \"Yes\" if i * 10 ** 10 - 1 == int(stdin) else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Yes\" if len(set(stdin)) == 10 else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"Yes\" if stdin[0] == stdin[-1] and len(set(stdin)) == 1 else \"No\"\n\nprint(solution('121'))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    # Base case\n    if len(stdin) == 1:\n        return 'Yes' if int(stdin) % 8 == 0 else 'No'\n    \n    # Recursive case\n    return 'Yes' if int(stdin) % 8 == 0 or solution(stdin[:-1]) == 'Yes' else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin\n    if '0' in nums:\n        return \"No\"\n    # This condition should be checked first, because\n    # it makes a lot of runtime optimization\n    if len(nums) == 1:\n        return \"Yes\"\n    if len(nums) > 1 and int(nums[0]) < int(nums[-1]):\n        return \"No\"\n    for index in range(1, len(nums)):\n        if int(nums[index]) < int(nums[index - 1]):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, b, a] = [int(x) for x in stdin.split()]\n    s = [int(x) for x in stdin.split()]\n    battery, accumulator = b, a\n    i, s = 0, len(s) - 1\n    while i <= s:\n        if battery > 0 and i < s and s[i] == 0:\n            battery -= 1\n            accumulator += 1\n            i += 1\n        else:\n            if accumulator > 0 and s - i >= accumulator:\n                accumulator -= 1\n            else:\n                break\n            i += 1\n    return i\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, b, a = [int(x) for x in stdin.split(' ')]\n    s = [int(x) for x in stdin.split(' ')]\n    dp = [[0 for _ in range(b + 1)] for _ in range(a + 1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(b + 1):\n            dp[0][j] = dp[0][j] or (dp[0][j - s[i]])\n        for j in range(a + 1):\n            dp[j][0] = dp[j][0] or (dp[j - s[i]][0])\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            dp[i][j] = dp[i][j - 1] + dp[i][j]\n    return max(sum(dp[a]) - 1, 0)\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the maximum number of segments of distance the robot can pass if you control him optimally.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    # your solution here\n    # --- Read input ---\n    s = list(map(int, stdin.split()))\n    n, b, a = s[0], s[1], s[2]\n\n    # --- Process input ---\n    e = [int(c) for c in stdin.split()]\n    # e = [0, 1, 0, 1, 0]\n    # e = [0, 1, 0, 1, 0, 1]\n\n    # --- Solve problem ---\n    i = 1\n    count = 0\n    battery_charge = b\n    accumulator_charge = a\n    while i < n:\n        if e[i] == 1:\n            if accumulator_charge > 0:\n                accumulator_charge -= 1\n                count += 1\n            else:\n                battery_charge -= 1\n                count += 1\n        else:\n            if battery_charge > 0:\n                battery_charge -= 1\n                count += 1\n            else:\n                accumulator_charge -= 1\n                count += 1\n        i += 1\n\n    # --- Print output ---\n    print(count)\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, b, a = [int(s) for s in stdin.split(' ')]\n    arr = [int(s) for s in stdin.split(' ')]\n    return\n\n----\nn, b, a = [int(s) for s in stdin.split(' ')]\narr = [int(s) for s in stdin.split(' ')]\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, B, A = [int(i) for i in stdin.split(\" \")]\n    a, b = 0, 0\n    s = [int(i) for i in stdin.split(\" \")]\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    dp = [[0] * (N + 1) for _ in range(2)]\n    dp[0][1] = 1\n    dp[1][1] = 1\n    for i in range(2, N + 1):\n        if s[i - 1] == 1:\n            dp[1][i] = dp[0][i - 1]\n            a += 1\n        else:\n            dp[1][i] = dp[0][i - 1] + dp[1][i - 1] - 1\n            b += 1\n        dp[0][i] = max(dp[0][i - 1], dp[1][i] - 1)\n    print(dp)\n    return max(max(dp[0]), max(dp[1]) - B, A - b, A - A % B)\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(n)\n    space complexity: O(n)\n    '''\n    n, b, a = list(map(int, stdin.split(' ')))\n    s = list(map(int, stdin.split(' ')))\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            ans += s[0] * a\n            b -= s[0]\n        elif i == n - 1:\n            ans += s[n - 1] * b\n        else:\n            ans += s[i] * min(b, a)\n            b -= min(b, a)\n            a -= min(b, a)\n    return ans\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Read the input\n    '''\n    n, b, a = stdin.split()\n    n, b, a = int(n), int(b), int(a)\n    s = [int(i) for i in stdin.split()]\n\n    '''\n    This is the main calculation\n    '''\n    res = 0\n    b, a = b - 1, a - 1\n    while a >= 0 and b >= 0:\n        if a >= 0:\n            a -= 1\n            if b > 0:\n                b -= 1\n                res += 1\n            else:\n                res += 1\n        else:\n            b -= 1\n            if b > 0:\n                b -= 1\n                res += 1\n            else:\n                res += 1\n    return res"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Hello, world!'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans, stack = [], []\n    operators = {'+': operator.add, '-': operator.sub}\n    for c in stdin:\n        if c.isnumeric():\n            ans.append(int(c))\n            continue\n        if c in operators:\n            if stack:\n                operand = stack.pop()\n                ans.append(operators[c](operand, int(c)))\n            else:\n                stack.append(int(c))\n        else:\n            stack.append(c)\n    if stack:\n        operand = stack.pop()\n        ans.append(operators[c](operand, int(c)))\n    return str(sum(ans))\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take in the input string of numbers, operators, and subtractions.\n    If theres a subtraction, evaluate it, then continue evaluating the rest of the expression\n    \"\"\"\n    stack = []\n    for i in stdin:\n        if i == '-' and len(stack) >= 2:\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(a - b)\n        else:\n            stack.append(int(i))\n    return stack.pop()\n\nprint(solution('8-7+6-5+4-3+2-1-0'))\nprint(solution('2+2'))\nprint(solution('112-37'))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('+-', '+ -')\n    stdin = stdin.replace('-0','0')\n    stdin = stdin.replace('--', '0 -')\n    stdin = stdin.replace('0-', '0 -')\n    stdin = stdin.replace('0+', '0 +')\n    stdin = stdin.replace('0 +', '0 +')\n    stdin = stdin.replace('0 -', '0 -')\n    stdin = stdin.replace('0 -', '0 -')\n    stdin = stdin.replace('0 *', '0 *')\n    stdin = stdin.replace('0 *', '0 *')\n    stdin = stdin.replace('0 /', '0 /')\n    stdin = stdin.replace('0 /', '0 /')\n    stdin = stdin.replace('0 //', '0 //')\n    stdin = stdin.replace('0 //', '0 //')\n    stdin = stdin.replace('0 %', '0 %')\n    stdin = stdin.replace('0 %', '0 %')\n    stdin = stdin.replace('0 ^', '0 ^')\n    stdin = stdin.replace('0 ^', '0 ^')\n    stdin = stdin.replace('0 **', '0 **')\n    stdin = stdin.replace('0 **', '0 **')\n    stdin = stdin.replace('0 ', '0')\n    stdin = stdin.replace('0 -', '0')\n    stdin = stdin.replace('0 +', '0')\n    stdin = stdin.replace('0 *', '0')\n    stdin = stdin.replace('0 /', '0')\n    stdin = stdin.replace('0 //', '0')\n    stdin = stdin.replace('0 %', '0')\n    stdin = stdin.replace('0 ^', '0')\n    stdin = stdin.replace('0 **', '0')\n    stdin = stdin.replace('0 ', '0')\n    stdin = stdin.replace('0 -', '0')\n    stdin = stdin.replace('0 +', '0')\n    stdin = stdin.replace('0 *', '0')\n    stdin = stdin.replace('0 /', '0')\n    stdin = stdin.replace('0 //', '0')\n    stdin = stdin.replace('0 %', '0')\n    stdin = stdin.replace('0 ^', '0')\n    stdin = stdin.replace('0 **', '0')\n\n    return eval(stdin)\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for x in stdin.split(\"+\"):\n        res -= int(x)\n    for x in stdin.split(\"-\"):\n        res += int(x)\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = []\n    for i in stdin.split('-'):\n        if i:\n            lst.append(int(i))\n    return str(sum(lst))\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for c in stdin:\n        if c not in ['+', '-']:\n            stack.append(int(c))\n        else:\n            x, y = stack.pop(), stack.pop()\n            if c == '+':\n                stack.append(x + y)\n            else:\n                stack.append(x - y)\n    return stack.pop()\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    operators = []\n    for i in stdin:\n        if i.isnumeric():\n            result.append(i)\n        else:\n            if len(operators) > 0 and i == '+':\n                if operators[-1] == '+':\n                    operators.pop()\n                    result[-1] = str(int(result[-1]) + int(result.pop()))\n                elif operators[-1] == '-':\n                    operators.pop()\n                    result[-1] = str(int(result[-1]) - int(result.pop()))\n            elif len(operators) > 0 and i == '-':\n                if operators[-1] == '-':\n                    operators.pop()\n                    result[-1] = str(int(result[-1]) - int(result.pop()))\n                elif operators[-1] == '+':\n                    operators.pop()\n                    result[-1] = str(int(result[-1]) + int(result.pop()))\n            operators.append(i)\n    if len(operators) > 0:\n        return 'error'\n    return result[0]\n\nassert solution('8-7+6-5+4-3+2-1-0') == '4'\nassert solution('2+2') == '-46'\nassert solution('112-37') == '375'\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    operators = {'+': lambda x, y: x + y, '-': lambda x, y: x - y}\n    for i in range(len(stdin)):\n        char = stdin[i]\n        if char.isnumeric():\n            result = int(char)\n        elif i > 0 and char in operators.keys():\n            result = operators[char](result, int(stdin[i-1]))\n        if i > 1 and char == '-':\n            result = -result\n    return result\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    if n == 1:\n        if k == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(1, n + 1):\n        if i + 2 * k > n + 1:\n            return \"NO\"\n        for j in range(i, i + k):\n            if j - 1 >= 0:\n                if stdin[i - 1] == stdin[j - 1]:\n                    return \"NO\"\n            if j + 1 < i + k:\n                if stdin[i - 1] == stdin[j + 1]:\n                    return \"NO\"\n            if j < i + 2 * (k - 1):\n                if stdin[i - 1] == stdin[j]:\n                    return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    \n    return 'YES' if k == (n * (n + 1) // 2) or \\\n    (k == n and k == (n + 1) % 4) or \\\n    ((n % 4) == 1 and k == (n // 4) + (n // 4 + 1) + 1) or \\\n    ((n % 4) == 2 and k == (n // 4) + (n // 4) + 1) or \\\n    ((n % 4) == 3 and k == (n // 4) + (n // 4) + 2) else 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\")\n    'YES'\n    >>> solution(\"10 4\")\n    'YES'\n    >>> solution(\"13 4\")\n    'NO'\n    >>> solution(\"100 5\")\n    'NO'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    pairs = [map(int, stdin.split()[1:]) for _ in range(n)]\n    result = []\n    for i, (b, g) in enumerate(pairs):\n        if b <= g:\n            result.append(b)\n        else:\n            result.append(g)\n    if len(set(result))!= k:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = [int(i) for i in stdin.split(' ')]\n    if k < 2 * n - 1:\n        return 'NO'\n    l = []\n    for i in range(n):\n        l.append([int(i) for i in stdin.split(' ')])\n    ans = []\n    for i in range(n):\n        for j in range(i, n):\n            for m in range(k):\n                if (l[i][0] == m)!= (l[j][0] == m):\n                    if m in l[i] and m in l[j]:\n                        ans.append(m)\n    for i in range(1, k):\n        if i not in ans:\n            return 'NO'\n    return 'YES\\n' + '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    def is_good(ch):\n        return 0 <= ch - 1 < k\n    \n    def is_good2(ch):\n        return all(\n            is_good(ch[i] - 1)\n            or is_good(ch[i + 1] - 1)\n            for i in range(len(ch) - 1)\n        )\n    \n    b = [0] * k\n    g = [0] * k\n    \n    def dfs(i, k):\n        if i == n:\n            return is_good2(b) and is_good2(g) and b[0]!= g[0]\n        \n        b[i] = 1\n        if dfs(i + 1, k):\n            return True\n        \n        b[i] = 2\n        if dfs(i + 1, k):\n            return True\n        \n        b[i] = 3\n        if dfs(i + 1, k):\n            return True\n        \n        b[i] = 4\n        if dfs(i + 1, k):\n            return True\n        \n        b[i] = 1\n        if dfs(i + 1, k):\n            return True\n        \n        return False\n    \n    if dfs(0, k):\n        print('YES')\n        print(' '.join(map(str, b)))\n        print(' '.join(map(str, g)))\n    else:\n        print('NO')\n\nsolution(stdin.readline())\n\n\n\n\n\"\"\"\n\n\nfrom itertools import product\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    colors = [0] * k\n    for i in range(n):\n        b, g = map(int, stdin.split('\\n')[i+1].split())\n        if b < 1 or g < 1 or b > k or g > k:\n            continue\n        if b == g:\n            continue\n        if b == 1 and g == 2:\n            continue\n        if b == g:\n            continue\n        if i == 0:\n            if b == 1 or g == 1:\n                colors[b-1] += 1\n                colors[g-1] += 1\n            else:\n                colors[b-1] += 2\n                colors[g-1] += 2\n        else:\n            colors[b-1] += 1\n            colors[g-1] += 1\n    for i in range(k):\n        if colors[i] % 2!= 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        print('NO')\n        return\n    if n == 1:\n        print('YES')\n        print(1, 1)\n        return\n    # Check that every pair is different\n    for i in range(1, n):\n        if stdin[i * 2] == stdin[i * 2 - 2]:\n            print('NO')\n            return\n    for i in range(1, n):\n        # Check that every pair is different\n        if stdin[i * 2] == stdin[i * 2 - 1]:\n            print('NO')\n            return\n    for i in range(0, n - 1):\n        # Check that all colors are different\n        if stdin[i * 2 + 1] == stdin[i * 2 + 2]:\n            print('NO')\n            return\n    for i in range(1, n):\n        # Check that consecutive pairs have different colors\n        if stdin[i * 2] == stdin[i * 2 - 1]:\n            print('NO')\n            return\n    for i in range(1, n):\n        # Check that consecutive pairs have different colors\n        if stdin[i * 2 - 2] == stdin[i * 2 - 1]:\n            print('NO')\n            return\n    print('YES')\n    for i in range(n):\n        print(stdin[i * 2], stdin[i * 2 + 1])\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds whether it is possible to choose suitable colors for the ball.\n    \"\"\"\n    _, k = map(int, stdin.split())\n    if k < 2:\n        return \"NO\"\n    if k < 2 * 10 ** 5:\n        return \"YES\"\n    if k < 10 ** 6:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n\n    c = sorted(list(set(a)))\n    m = 0\n    if n - k >= x:\n        m = c[n - 1] - c[n - k - 1]\n    elif k == 1:\n        m = c[n - 1]\n    else:\n        m = -1\n    return str(m)\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training4KZHW2-TJ4/\n    \"\"\"\n    n, k, x = [int(i) for i in stdin.splitlines()[0].split()]\n    pictures = [int(i) for i in stdin.splitlines()[1].split()]\n    print(n, k, x)\n    print(pictures)\n    # pictures.sort()\n    # print(pictures)\n    # print(pictures)\n    # print(len(pictures))\n    # print(sum(pictures))\n\n    return max(sum(pictures[i::k]) * pictures[i]\n               for i in range(len(pictures) // k + 1))"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and solve the problem.\"\"\"\n    n, k, x = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    max_val = 0\n    for i in range(n - k + 1):\n        if sum(nums[i:i+k]) > max_val:\n            max_val = sum(nums[i:i+k])\n    if max_val < x:\n        return -1\n    return max_val\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 2 3\\n5 1 3 10 1\\n')\n    18\n    >>> solution('6 1 5\\n10 30 30 70 10 10\\n')\n    -1\n    >>> solution('4 3 1\\n1 100 1 1\\n')\n    100\n    \"\"\"\n    n, k, x = (int(i) for i in stdin.split())\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    a.sort()\n    i = 0\n    while i < len(a) and a[i] < k:\n        i += 1\n    if i == 0 or i == len(a):\n        return -1\n    m = [0] * len(a)\n    m[i] = a[i]\n    max_sum = m[i]\n    for j in range(i + 1, len(a)):\n        m[j] = min(a[j], m[j - 1] + k)\n        max_sum = max(max_sum, m[j])\n    max_sum = max(max_sum, x * n)\n    return max_sum if max_sum < 10 ** 9 else -1"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    a.sort()\n    count = 0\n    count_sum = 0\n    count_max = 0\n    count_max_sum = 0\n    for i in range(0, n):\n        if count < k and a[i] >= x:\n            count += 1\n            count_sum += a[i]\n            if count >= k:\n                count_max += 1\n                count_max_sum += a[i]\n                count_sum += a[i]\n    if count_max < count:\n        return -1\n    return count_max_sum\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k, x = stdin.split()\n    n, k, x = int(n), int(k), int(x)\n\n    arr = stdin.split()\n    arr = list(map(int, arr))\n\n    arr.sort(reverse=True)\n\n    i = 0\n    while i < n:\n        if x == n:\n            break\n        if i + k > n:\n            break\n        l = i + k\n        while l < n and arr[i] == arr[l]:\n            x += 1\n            l += 1\n        i += 1\n\n    if x < n:\n        return -1\n\n    return max(0, sum(arr[:i]))\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gen_list_of_tuples(a):\n        return list(zip(a[0::2], a[1::2]))\n\n    data = [x for x in stdin.split('\\n') if x!= '']\n    n, k, x = [int(x) for x in data[0].split()]\n    a = [int(x) for x in data[1].split()]\n    c = 0\n    index = 0\n    i = 0\n    j = 0\n    res = 0\n    while j < n:\n        if i == index:\n            index = j + k - 1\n            c += a[j]\n            j += 1\n        elif j == index:\n            if j + k - 1 <= n - 1:\n                c = 0\n                index = j + k - 1\n                j += k\n            else:\n                break\n        else:\n            res = max(res, c)\n            index = j + k - 1\n            c = 0\n            i = j\n            j += 1\n    if j < n:\n        res = max(res, c)\n    return res if res!= 0 else -1\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k, x = list(map(int, stdin.split()))\n    photos = list(map(int, stdin.split()))\n    max_sum = 0\n    for i in range(k, n + 1):\n        for j in range(i - k, n - k + 1):\n            if sum(photos[j:i]) >= max_sum:\n                max_sum = sum(photos[j:i])\n    if max_sum == 0:\n        return -1\n    else:\n        return max_sum\n    '''\n    n, k, x = list(map(int, stdin.split()))\n    photos = list(map(int, stdin.split()))\n    print(photos)\n    dp = [0] * (n + 1)\n    for i in range(1, k + 1):\n        dp[i] = max(dp[i - 1], dp[i] + photos[i - 1])\n    # print(dp)\n    for i in range(k + 1, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - k - 1] + photos[i - 1])\n    # print(dp)\n    res = dp[n]\n    for i in range(n - 1, n - x, -1):\n        if dp[i] >= res:\n            res = dp[i]\n    if res == 0:\n        return -1\n    else:\n        return res\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    rooms = stdin.split('0')\n    rooms = [int(x) for x in rooms if len(x)!= 0]\n    routers = [0 for _ in range(k + 1)]\n    for room in rooms:\n        if room <= k:\n            routers[room] += 1\n        for i in range(max(1, room - k), min(n, room + k) + 1):\n            routers[i] += 1\n    result = 0\n    for i in range(1, len(routers)):\n        result += i * routers[i]\n    return result\n\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    rooms = [int(x) for x in stdin]\n    spots = [x for x in rooms if x == 1]\n    routers = [x for x in rooms if x == 0]\n    routers_count = len(routers)\n    if routers_count == 0:\n        return sum(spots)\n    spots_count = len(spots)\n    routers_spots_count = 0\n    for r in range(routers_count):\n        routers_spots_count += max(1, spots_count - k)\n        spots_count -= max(0, spots_count - k)\n    return sum(spots) + routers_spots_count"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    places = stdin.split('1')\n    max_range = n - k\n    router_places = [i for i in range(1, max_range+1) if stdin[i] == '1']\n    min_cost = 0\n    if not router_places:\n        min_cost = sum([places.count(i) for i in places])\n    else:\n        max_router_num = max(router_places)\n        max_place_num = max(places)\n        min_cost = max(max_router_num, max_place_num)\n        for router_place in router_places:\n            max_place_num = max(max_place_num, router_place + k)\n            min_cost += router_place\n            min_cost += max_place_num - router_place\n    return min_cost"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 00100\n   ... ''')\n    3\n\n    >>> solution('''6 1\n   ... 000000\n   ... ''')\n    21\n\n    >>> solution('''4 1\n   ... 0011\n   ... ''')\n    4\n\n    >>> solution('''12 6\n   ... 000010000100\n   ... ''')\n    15\n    \"\"\"\n    rooms, k = map(int, stdin.split())\n    rooms_cost = [0] * rooms\n    for i in range(1, rooms + 1):\n        rooms_cost[i - 1] = i\n\n    routers_cost = [0] * rooms\n    for i in range(k):\n        for j in range(1, rooms + 1):\n            routers_cost[j - 1] = max(1, j - k) + min(rooms, j + k)\n        k += 1\n    for i in range(rooms):\n        rooms_cost[i] += routers_cost[i]\n    return sum(rooms_cost)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nN, K = map(int, stdin.readline().split())\n\nrouter = stdin.readline().rstrip()\nrooms = []\n\nfor index, item in enumerate(router):\n    rooms.append(int(item) if item == '1' else 0)\n\ndp = [[0 for _ in range(len(rooms))] for _ in range(K + 1)]\n\nfor i in range(len(rooms)):\n    dp[1][i] = rooms[i]\n\nfor j in range(2, K + 1):\n    for i in range(len(rooms)):\n        if i == 0:\n            if rooms[i] == 0:\n                dp[j][i] = dp[j - 1][1]\n        elif i == len(rooms) - 1:\n            if rooms[i] == 0:\n                dp[j][i] = dp[j - 1][-2]\n        else:\n            if rooms[i] == 0:\n                dp[j][i] = min(dp[j - 1][i - 1], dp[j - 1][i + 1]) + rooms[i]\n\nanswer = 0\nfor i in range(len(rooms)):\n    answer += dp[K][i]\n\nprint(answer)\n\nreturn answer\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the minimum total cost of connecting all rooms to the Internet.\"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    rooms = [1 if c == '1' else 0 for c in stdin]\n    routers = rooms.copy()\n    routers.sort()\n\n    def sub_solution(start: int, end: int) -> int:\n        \"\"\"Calculate the minimum total cost of connecting all rooms to the Internet.\"\"\"\n        rooms = [1 if c == '1' else 0 for c in stdin[start:end]]\n        routers = rooms.copy()\n        routers.sort()\n        connections = 0\n        for r in routers:\n            if r < start or r > end:\n                connections += r\n            else:\n                start = max(1, r - k)\n                end = min(n, r + k)\n                connections += sub_solution(start, end)\n\n        return connections\n\n    return sub_solution(1, n + 1)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def transform_str(s: str) -> List[int]:\n        cost = [0] * len(s)\n        for i in range(len(s)):\n            if s[i] == \"1\":\n                cost[i] = i + 1\n        return cost\n\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    s = stdin[2]\n    cost = transform_str(s)\n    cost_without_router = sum(cost)\n\n    # add router\n    for i in range(k + 1, n):\n        cost[i] = min(cost[i], cost[i - k]) + k\n\n    cost_with_router = sum(cost)\n\n    return str(min(cost_without_router, cost_with_router))\n\"\"\"\nimport itertools\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rooms, routers = [int(i) for i in stdin.split()]\n    rooms_routers = [int(i) for i in stdin]\n    rooms_routers.reverse()\n    cost = 0\n    for room in range(1, rooms + 1):\n        if rooms_routers[room - 1] == 1:\n            routers = 0\n            for i in range(max(room - routers, 1), min(room + routers + 1, rooms + 1)):\n                if rooms_routers[i - 1] == 1:\n                    routers += 1\n            cost += routers\n            print(room, cost)\n    return str(cost)\n\n\nprint(solution(\"5 2\"))\nprint(solution(\"6 1\"))\nprint(solution(\"4 1\"))\nprint(solution(\"12 6\"))\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    def cost(stdin: str) -> int:\n        total_cost = 0\n        for i, room_num in enumerate(stdin):\n            if room_num == \"1\":\n                total_cost += i + 1\n        return total_cost\n\n    rooms, k = map(int, stdin.split())\n    rooms = list(stdin)\n    routers = [0] * rooms\n    for i in range(rooms):\n        if stdin[i] == \"1\":\n            for j in range(max(1, i - k), min(rooms, i + k) + 1):\n                if stdin[j] == \"1\":\n                    routers[j] += 1\n\n    routers = [\n        1 if room_num >= 1 else 0\n        for room_num in routers\n    ]\n\n    routers = list(map(str, routers))\n    routers = \"\".join(routers)\n    return str(cost(routers) + cost(stdin))\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    while s!= t:\n        if t.count('a')!= s.count('a') or t.count('e')!= s.count('e'):\n            return 'No'\n        elif t.count('z')!= s.count('z'):\n            return 'No'\n        elif t.count('l')!= s.count('l'):\n            return 'No'\n        elif t.count('o')!= s.count('o'):\n            return 'No'\n        elif t.count('p')!= s.count('p'):\n            return 'No'\n        elif t.count('s')!= s.count('s'):\n            return 'No'\n        elif t.count('e')!= s.count('e'):\n            return 'No'\n        elif t.count('a')!= s.count('a'):\n            return 'No'\n        else:\n            t = t.replace('a', 'e')\n            t = t.replace('z', 'a')\n            t = t.replace('l', 'z')\n            t = t.replace('o', 'l')\n            t = t.replace('p', 'o')\n            t = t.replace('s', 'p')\n            t = t.replace('e','s')\n    return 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        if s.count(s[i]) > t.count(s[i]):\n            return \"No\"\n        if s.count(t[i]) > t.count(t[i]):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return \"Yes\" if s == t else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    letters = set(list(s) + list(t))\n    if len(letters) > 10:\n        return 'Impossible'\n\n    # Check that the two strings are different\n    if len(s)!= len(t):\n        return 'Impossible'\n\n    # Count the number of each letter in the two strings\n    letter_counts = dict()\n    for letter in letters:\n        letter_counts[letter] = 0\n    for letter in s:\n        letter_counts[letter] += 1\n    for letter in t:\n        letter_counts[letter] += 1\n\n    # Check that the two strings have the same number of each letter\n    for letter in letters:\n        if letter_counts[letter]!= letter_counts[letter.swapcase()]:\n            return 'Impossible'\n\n    return 'Yes'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    answer = \"No\"\n    s_dict = dict()\n    t_dict = dict()\n    for c in s:\n        s_dict[c] = s_dict.get(c, 0) + 1\n    for c in t:\n        t_dict[c] = t_dict.get(c, 0) + 1\n    if s_dict!= t_dict:\n        return answer\n    for c in s_dict:\n        if s_dict[c] > t_dict[c]:\n            return answer\n    for c in t_dict:\n        if t_dict[c] > s_dict[c]:\n            return answer\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s)!= len(t):\n        return \"No\"\n    s1 = []\n    s2 = []\n    t1 = []\n    t2 = []\n    for i in range(len(s)):\n        if s[i] not in s2:\n            s1.append(s[i])\n            s2.append(s[i])\n        else:\n            s1.append(s[i])\n        if t[i] not in t2:\n            t1.append(t[i])\n            t2.append(t[i])\n        else:\n            t1.append(t[i])\n    if len(s1)!= len(t1):\n        return \"No\"\n    for i in range(len(s2)):\n        if s2[i]!= t2[i]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            for j in range(len(s)):\n                if t[j] == s[i]:\n                    s = s.replace(s[i], t[j])\n    return 'Yes' if s == t else 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string_s, string_t = stdin.split(\"\\n\")\n    return \"Yes\" if len(set(string_s) - set(string_t)) == 0 else \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip().split('\\n')[0]\n    T = stdin.strip().split('\\n')[1]\n    S = sorted(S)\n    T = sorted(T)\n    return 'Yes' if S == T else 'No'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass  # TODO\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_achievable(X: int, A: List[int], B: List[int]) -> bool:\n        return all(\n            [\n                sum(A[i][j] for i in range(len(A))) >= X\n                for j in range(len(B))\n            ]\n        )\n\n    def get_min_cost(X: int, A: List[int], B: List[int]) -> int:\n        return sum(\n            [min([B[i], X - A[i][j]]) * C[i] for j in range(len(A)) for i in range(len(A[j]))]\n        )\n\n    C = [int(x) for x in stdin.split()]\n    M = len(C)\n    N = int(input())\n    A = []\n    for _ in range(M):\n        A.append([int(x) for x in input().split()])\n    X = int(input())\n    B = [int(x) for x in input().split()]\n    achievable = is_achievable(X, A, B)\n\n    if achievable:\n        min_cost = get_min_cost(X, A, B)\n        return str(min_cost)\n    else:\n        return \"Impossible\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n    A = []\n    for _ in range(M):\n        A.append(list(map(int, stdin.split())))\n    X = int(stdin.split())\n    print(X)\n    A.sort()\n    print(A)\n    c = 0\n    for i in range(M):\n        c += C[i] * A[i][1]\n    print(c)\n    return ''\n\n\nassert solution('4 2') == '4'\nassert solution('4 1') == '0'\nassert solution('4 2 3') == '10'\nassert solution('4 2 3 5') == '11'\nassert solution('4 2 3 5 6') == '21'\nassert solution('4 2 3 5 6 7') == '52'\nassert solution('4 2 3 5 6 7 8') == '62'\nassert solution('4 2 3 5 6 7 8 9') == '72'\nassert solution('4 2 3 5 6 7 8 9 10') == '92'\n\nassert solution('1') == '1'\nassert solution('1 2') == '0'\nassert solution('1 2 3') == '3'\nassert solution('1 2 3 4') == '9'\nassert solution('1 2 3 4 5') == '18'\nassert solution('1 2 3 4 5 6') == '36'\nassert solution('1 2 3 4 5 6 7') == '45'\nassert solution('1 2 3 4 5 6 7 8') == '55'\nassert solution('1 2 3 4 5 6 7 8 9') == '66'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '78'\nassert solution('1 2 3 4 5 6 7 8 9 10 11') == '99'\n\nassert solution('10 5') == '20'\nassert solution('10 9') == '20'\nassert solution('10 10') == '0'\nassert solution('10 11') == '30'\nassert solution('10 12') == '40'\nassert solution('10 13') == '50'\nassert solution('10 14') == '60'\nassert solution('10 15') == '70'\nassert solution('10 16') == '80'\nassert solution('10 17') == '90'\nassert solution('10 18') == '100'\nassert solution('10 19') == '110'\nassert solution('10 20') == '120'\nassert solution('10 21') == '130'\nassert solution('10 22') == '140'\nassert solution('10 23') == '150'\nassert solution('10 24') == '160'\nassert solution('10 25') == '170'\nassert solution('10 26') == '180'\nassert solution('10 27') == '190'\nassert solution('10 28') == '200'\nassert solution('10 29') == '210'\nassert solution('10 30') == '220'\nassert solution('10 31') == '230'\nassert solution('10 32') == '240'\nassert solution('10 33') == '250'\nassert solution('10 34') == '260'\nassert solution('10 35') == '270'\nassert solution('10 36') == '280'\nassert solution('10 37') == '290'\nassert solution('10 38') == '300'\nassert solution('10 39') == '310'\nassert solution('10 40') == '320'\nassert solution('10 41') == '330'\nassert solution('10 42') == '340'\nassert solution('10 43') == '350'\nassert solution('10 44') == '360'\nassert solution('10 45') == '370'\nassert solution('10 46') == '380'\nassert solution('10 47') == '390'\nassert solution('10 48') == '400'\nassert solution('10 49') == '410'\nassert solution('10 50') == '420'\nassert solution('10 51') == '430'\nassert solution('10 52') == '440'\nassert solution('10 53') == '450'\nassert solution('10 54') == '460'\nassert solution('10 55') == '470'\nassert solution('10 56') == '480'\nassert solution('10 57') == '490'\nassert solution('10 58') == '500'\nassert solution('10 59') == '510'\nassert solution('10 60') == '520'\nassert solution('10 61') == '530'\nassert solution('10 62') == '540'\nassert solution('10 63') == '550'\nassert solution('10 64') == '560'\nassert solution('10 65') == '570'\nassert solution('10 66') == '580'\nassert solution('10 67') == '590'\nassert solution('10 68') == '600'\nassert solution('10 69') == '610'\nassert solution('10 70') == '620'\nassert solution('10 71') == '630'\nassert solution('10 72') == '640'\nassert solution('10 73') == '650'\nassert solution('10 74') == '660'\nassert solution('10 75') == '670'\nassert solution('10 76') == '680'\nassert solution('10 77') == '690'\nassert solution('10 78') == '700'\nassert solution('10 79') == '710'\nassert solution('10 80') == '720'\nassert solution('10 81') == '730'\nassert solution('10 82') == '740'\nassert solution('10 83') == '750'\nassert solution('10 84') == '760'\nassert solution('10 85') == '770'\nassert solution('10 86') == '780'\nassert solution('10 87') == '790'\nassert solution('10 88') == '800'\nassert solution('10 89') == '810'\nassert solution('10 90') == '820'\nassert solution('10 91') == '830'\nassert solution('10 92') == '840'\nassert solution('10 93') == '850'\nassert solution('10 94') == '860'\nassert solution('10 95') == '870'\nassert solution('10 96') == '880'\nassert solution('10 97') == '890'\nassert solution('10 98') == '900'\nassert solution('10 99') == '910'\nassert solution('10 100') == '920'\nassert solution('10 101') == '930'\nassert solution('10 102') == '940'\nassert solution('10 103') == '950'\nassert solution('10 104') == '960'\nassert solution('10 105') == '970'\nassert solution('10 106') == '980'\nassert solution('10 107') == '990'\nassert solution('10 108') == '1000'\nassert solution('10 109') == '1010'\nassert solution('10 110') == '1020'\nassert solution('10 111') == '1030'\nassert solution('10 112') == '1040'\nassert solution('10 113') == '1050'\nassert solution('10 114') == '1060'\nassert solution('10 115') == '1070'\nassert solution('10 116') == '1080'\nassert solution('10 117') == '1090'\nassert solution('10 118') == '1100'\nassert solution('10 119') == '1110'\nassert solution('10 120') == '1120'\nassert solution('10 121') == '1130'\nassert solution('10 122') == '1140'\nassert solution('10 123') == '1150'\nassert solution('10 124') == '1160'\nassert solution('10 125') == '1170'\nassert solution('10 126') == '1180'\nassert solution('10 127') == '1190'\nassert solution('10 128') == '1200'\nassert solution('10 129') == '1210'\nassert solution('10 130') == '1220'\nassert solution('10 131') == '1230'\nassert solution('10 132') == '1240'\nassert solution('10 133') == '1250'\nassert solution('10 134') == '1260'\nassert solution('10 135"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum amount of money needed to achieve Takahashi's objective.\n\n    Args:\n        stdin (str): String with one line representing Takahashi's understanding levels.\n\n    Returns:\n        str: String with one line representing the minimum amount of money needed to achieve Takahashi's objective.\n    \"\"\"\n    stdin = stdin.strip().split()\n    takahashi = [int(stdin[i]) for i in range(len(stdin))]\n    \n    return stdin\n    \n    \n    \ndef"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    N, M = map(int, stdin[0].split())\n    stdin = stdin[1:]\n    cost = {}\n    for i in range(N):\n        algorithm, price = stdin[i].split()\n        cost[algorithm] = int(price)\n    algorithm_num = int(stdin[-1])\n    stdin = stdin[:-1]\n    algorithm_list = []\n    for i in range(algorithm_num):\n        algorithm_list.append(stdin[i])\n    stdin = stdin[algorithm_num:]\n    algorithm_list = list(set(algorithm_list))\n    algorithm_list = sorted(algorithm_list)\n    target = []\n    for algorithm in algorithm_list:\n        algorithm_cost = 0\n        for i in range(M):\n            if algorithm in cost.keys():\n                algorithm_cost += cost[algorithm]\n        target.append(algorithm_cost)\n    target = list(set(target))\n    target = sorted(target)\n    if len(target) > 1 and target[0] < 0:\n        return str(-1)\n    else:\n        return str(target[0] if target[0] > 0 else 0)\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    total_score, base_score, perfect_bonus, all_problems = [int(line) for line in stdin.splitlines()]\n    min_solved = all_problems - base_score\n    if perfect_bonus > base_score:\n        min_solved = min_solved + (perfect_bonus - base_score) // 100\n    return min_solved\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the given problem.\n\n    Parameters\n    ----------\n    stdin\n        Problem input.\n\n    Returns\n    -------\n    str\n        The solution of the problem.\n    \"\"\"\n\n    # The length of the input.\n    N = int(stdin)\n    assert 1 <= N <= 10000\n\n    # A list of the input.\n    P = [list(map(int, x.split())) for x in stdin.split(\":\\n\")]\n\n    # For each value in the first line, the number of problems of that difficulty and the points awarded for solving all of them.\n    d, c = P[0]\n    assert 1 <= d <= 10000\n    assert 1 <= c <= 100 * d\n    assert c % 100 == 0\n\n    # For each value in the second line, the total score for the user.\n    G = P[1][0]\n    assert 100 <= G <= 100 * d\n\n    # Get the minimum number of problems that needs to be solved in order to have a total score of G or more points.\n    count = 0\n    while True:\n        count += 1\n        # If the user has a total score of G or more points, return the minimum number of problems that needs to be solved.\n        if G >= 100 * d:\n            return count\n        # Add the next problem to the list of problems that needs to be solved.\n        d, c = P[count]\n        assert 1 <= d <= 10000\n        assert 1 <= c <= 100 * d\n        assert c % 100 == 0\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    points = [int(stdin) for i in range(D)]\n    basescore = sum(points)\n    print(basescore, points)\n\n    maxpoint = max(points)\n    while maxpoint > 100:\n        index = points.index(maxpoint)\n        points[index] = 100\n        basescore += maxpoint\n        maxpoint = max(points)\n        print(basescore, points)\n\n    if basescore >= G:\n        return str(index+1)\n    return \"impossible\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split(\" \"))\n    s = 0\n    p = []\n    c = []\n    for _ in range(d):\n        s, c_s = map(int, input().split(\" \"))\n        p.append(s)\n        c.append(c_s)\n    c.append(g)\n    p.append(0)\n    dp = [0] * (len(p) + 1)\n    dp[1] = sum(p[:2])\n    for i in range(2, len(p)):\n        dp[i + 1] = max(dp[i], dp[i - 1] + p[i])\n    t = 0\n    while dp[t] < g:\n        t += 1\n    t -= 1\n    t = max(t, 0)\n    print(sum(c[:t]))\n    print(p[t])\n    print(dp)\n    return \"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p, c = [], []\n    for _ in range(D):\n        p_i, c_i = map(int, stdin.split())\n        p.append(p_i)\n        c.append(c_i)\n    print(D, G)\n    print(p, c)\n    return \"\""
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin: str):\n        D, G = map(int, stdin.split())\n        scores = []\n        perfect_bonus = 0\n        for i in range(1, D + 1):\n            scores.append(int(stdin.split('\\n')[i].split(' ')[0]))\n            perfect_bonus += int(stdin.split('\\n')[i].split(' ')[1])\n        score = 0\n        num_solves = 0\n        for i in range(D):\n            if scores[i] == 100 * (i + 1):\n                num_solves += 1\n            elif num_solves > 0:\n                num_solves += 1\n                perfect_bonus -= 100\n                score += 100\n            if score >= G:\n                return num_solves\n        return num_solves\n    return str(solve(stdin))\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    count = 0\n    total_score = 0\n    for line in stdin.split('\\n'):\n        if line:\n            [D, G] = line.split()\n            D = int(D)\n            G = int(G)\n            count = G // 100 + 1\n            total_score = G\n            for i in range(1, D + 1):\n                total_score -= 100 * (i - 1)\n                if total_score <= 0:\n                    break\n                else:\n                    count -= 1\n                    total_score += 100 * i\n            if total_score >= G:\n                print(count)\n                return\n    print(count)\n    return\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of problems that needs to be solved in order to have a total score of G or more points.\n    >>> solution('2 700\\n3 500\\n5 800')\n    3\n    \"\"\"\n    values = stdin.split('\\n')\n    D, G = list(map(int, values[0].split()))\n    scores = [int(i) for i in values[1].split()]\n    base_score = sum(scores)\n    perfect_bonuses = [int(i) for i in values[2].split()]\n    return base_score + sum([bonus for bonus in perfect_bonuses if bonus >= G])"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.readline().split())\n    solve = 0\n    for i in range(1, d+1):\n        p, c = map(int, stdin.readline().split())\n        if g >= (c * p):\n            solve += 1\n        else:\n            break\n    print(solve)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 5 5 4 5 5 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 4 8 8 7 8 4 4 5\n   ... ''')\n    2\n    >>> solution('''9\n   ... 2 3 4 2 2 3 2 2 4\n   ... ''')\n    3\n    \"\"\"\n\n   ...\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_candy = int(stdin.readline())\n    candy_weights = [int(x) for x in stdin.readline().strip().split()]\n    num_of_good_candy = 0\n    for i in range(len(candy_weights)):\n        if candy_weights[i] % 2 == 0:\n            num_of_good_candy += 1\n        else:\n            if i + 1 < len(candy_weights) and i + 2 < len(candy_weights):\n                if candy_weights[i + 2] % 2 == 0:\n                    num_of_good_candy += 1\n    return str(num_of_good_candy)"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    candy = [int(stdin.readline()) for i in range(n)]\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    odd = [candy[i] for i in range(len(candy)) if i % 2 == 0]\n    even = [candy[i] for i in range(len(candy)) if i % 2 == 1]\n    suma = sum(odd)\n    sumb = sum(even)\n    sumeven = sum(even)\n    if sumeven!= sumb:\n        return 1\n    for i in range(n - 3):\n        suma += candy[i + 2]\n        sumb -= candy[i + 2]\n        sumeven += candy[i + 2]\n        sumeven -= candy[i + 3]\n        if sumeven!= sumb:\n            return i + 2\n    return n\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    \n    candies = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    good = 0\n    for i in range(0,candies,2):\n        if(sum(arr[0:i]) == sum(arr[i:candies])):\n            good += 1\n    return good\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(s) for s in stdin.split('\\n')[0].split(' ')]\n    ans = 0\n    for i in range(n):\n        if sum(a[:i]) == sum(a[i+1:]):\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and space\"\"\"\n    n = int(stdin.split('\\n')[0])\n    candies = list(map(int, stdin.split('\\n')[1].split()))\n    good_candies = []\n    for i in range(len(candies)):\n        if i % 2 == 0:\n            total_weight = candies[i]\n            for j in range(i+1, len(candies)):\n                if j % 2 == 1:\n                    total_weight += candies[j]\n                    if total_weight % 2 == 0:\n                        good_candies.append(i + 1)\n                        good_candies.append(j + 1)\n                        break\n    return str(len(good_candies))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return '2'"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            if i % 2 == 0:\n                count += 1\n        else:\n            if i % 2!= 0:\n                count += 1\n    print(count)\n    return ''\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 1 3\\n10 30 30 70 10 10')\n    18\n    \"\"\"\n    _, _, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    dp = [[0 for j in range(x + 1)] for i in range(len(arr) + 1)]\n    for i in range(1, len(arr) + 1):\n        for j in range(1, x + 1):\n            if j >= i:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - i] + arr[i - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    print(dp[len(arr)][x])\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k, x = map(int, stdin.readline().split())\n    a = map(int, stdin.readline().split())\n    return min(a) * x\n    '''\n    n, k, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    res = -1\n    for i in range(1, n):\n        if i - k + 1 >= 0:\n            if a[i] + a[i - k] > res:\n                res = max(a[i] + a[i - k], a[i - 1])\n        if i >= k:\n            if a[i - k + 1] + a[i] > res:\n                res = max(a[i - k + 1] + a[i], a[i - 1])\n    return res if res > 0 else -1\n\n\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def calc_val(n, k, x):\n        val = 0\n        for i in range(n - k + 1):\n            val += a[i + k - 1]\n            if i + k - 1 < n and i + k >= x:\n                val -= a[i + k - 1]\n                val += a[i + k - 1 - x + 1]\n        return val\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    val = calc_val(n, k, x)\n    if val < 0:\n        return -1\n    return a[k - 1] * k + val\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    a = [0] + a\n    \n    dp = [[float('-inf') for _ in range(x + 1)] for _ in range(n + 1)]\n    dp[0][0] = 0\n    \n    for i in range(1, n + 1):\n        for j in range(x + 1):\n            if j >= a[i]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a[i]] + a[i])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return -1 if dp[-1][-1] == float('-inf') else dp[-1][-1]"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    if x <= k:\n        return -1\n    elif k == 1 and x == n:\n        return sum(a)\n    elif k == 1:\n        return sum(a) - max(a)\n    elif k == 2:\n        return sum(a) - min(a)\n    else:\n        return sum(a) - min(a) * (x // k)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for this problem.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(\n        solution(stdin.strip().split())\n    )\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    x = a[2]\n    if x > a[0]:\n        return -1\n    k = a[1]\n    n = a[0]\n    if k > n:\n        return -1\n    s = []\n    for i in range(n):\n        s.append(a[i + 2])\n    s = sorted(s, reverse=True)\n    sums = 0\n    if n == 0:\n        return sums\n    d = [0 for i in range(n)]\n    d[0] = 1\n    d[1] = 1\n    for i in range(2, n):\n        d[i] = d[i - 1] + d[i - 2]\n    for i in range(k - 1, n):\n        if i == k - 1:\n            sums += s[i]\n        else:\n            sums += s[i] * d[i - k + 1]\n        if sums > x:\n            return sums\n    return sums"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, k, x = [int(n) for n in stdin.split()]\n  a = [int(n) for n in stdin.split()]\n  if (k < 2 or k > n or x < 1 or x > n or k + x > n or len(set(a)) < k):\n    return '-1'\n  l, r = 0, k - 1\n  s = 0\n  while r < n:\n    s += a[r]\n    if s >= x:\n      return '{}'.format(max(s, x))\n    r += 1\n  return '{}'.format(max(s, x))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k, x = [int(x) for x in stdin.split(' ')]\n    pictures = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    if k * x >= n:\n        return -1\n    else:\n        ans = 0\n        cur_segment_size = k\n        cur_segment_start = 0\n        cur_segment_end = 0\n        cur_segment_sum = 0\n        ans_segment = [0] * n\n        ans_start = 0\n        ans_end = 0\n        while cur_segment_end < n:\n            while cur_segment_start <= cur_segment_end and cur_segment_sum + pictures[cur_segment_end] <= x:\n                cur_segment_sum += pictures[cur_segment_end]\n                cur_segment_end += 1\n                ans_end += 1\n                if cur_segment_end >= n:\n                    ans_start = cur_segment_start\n                    ans_end = cur_segment_end\n                    break\n            ans_segment[cur_segment_start] = cur_segment_sum\n            cur_segment_start += 1\n            cur_segment_end = cur_segment_start\n            cur_segment_sum = 0\n        if cur_segment_end < n:\n            ans = max(ans, sum(ans_segment[ans_start:ans_end]))\n        else:\n            ans = max(ans, sum(ans_segment[ans_start:]))\n        return ans\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n\n    if N % 4!= 0:\n        return 'No'\n    else:\n        cakes_and_doughnuts = N // 4\n        return 'Yes' if cakes_and_doughnuts % 2 == 0 else 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        if n % 4 == 0:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    doughnuts = 0\n    cakes = 0\n    while n > doughnuts + cakes * 4:\n        n = n - (doughnuts + cakes * 4)\n        doughnuts += 1\n        n = n - (doughnuts * 7)\n        cakes += 1\n    if n == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def find_sol(target: int, memo: Dict[int, List[int]]) -> bool:\n        # Base case: no more money or no more items\n        if not target or not target % 2:\n            return True\n        if target in memo:\n            return memo[target]\n\n        for n in range(1, 4):\n            if find_sol(target - n, memo):\n                memo[target] = True\n                return memo[target]\n\n        memo[target] = False\n        return memo[target]\n\n    stdin = stdin.split()\n    N = int(stdin[0])\n\n    if find_sol(N, {}):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n    return \"Yes\" if find_sol(N, {}) else \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    for cake in range(n // 4):\n        for doughnut in range(n // 7):\n            if cake + doughnut == n:\n                m = cake + doughnut\n    return \"Yes\" if m else \"No\"\n\nprint(solution(stdin))\n'''\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 0:\n        return \"No\"\n    else:\n        total = 0\n        cake = 4\n        doughnut = 7\n        cake_price = cake\n        doughnut_price = doughnut\n        for i in range(1, 10001):\n            total += cake_price\n            total += doughnut_price\n            cake_price = cake + cake_price\n            doughnut_price = doughnut + doughnut_price\n            if total >= N:\n                return \"Yes\"\n\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = 4\n    B = 7\n    for i in range(N // A + 1):\n        if N - i * A == i * B:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Return \"Yes\" if there is a way to buy two or more cakes and two or more doughnuts for exactly N dollars, otherwise return \"No\".\n\n    >>> solution(\"11\")\n    'Yes'\n    >>> solution(\"12\")\n    'Yes'\n    >>> solution(\"6\")\n    'No'\n    '''\n\n    N: int = int(stdin.read())\n    num_cakes = 0\n    num_doughnuts = 0\n    for i in range(4):\n        num_cakes += N // 4\n        num_doughnuts += N // 7\n        if num_cakes > N or num_doughnuts > N:\n            break\n        N -= (num_cakes * 4 + num_doughnuts * 7)\n    if N % 7 == 0 or N % 4 == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    diff = n - 2 * 4 - 2 * 7\n    if diff < 0:\n        return 'No'\n    if diff % 4!= 0:\n        return 'No'\n    if diff // 4 >= 3:\n        return 'Yes'\n    if diff // 4 == 2:\n        if diff % 4 == 2:\n            return 'No'\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().rstrip())\n    assert 0 < N <= 100\n    x_y_h = [tuple(map(int, stdin.readline().rstrip().split(' '))) for _ in range(N)]\n    assert len(set(zip(*x_y_h))) == N\n\n    def altitude(x, y, h, x_y_h):\n        return max(h - abs(x - x_h) - abs(y - y_h) for x_h, y_h, h in x_y_h)\n\n    x_y_h = sorted(x_y_h)\n    print(x_y_h[0][0], x_y_h[0][1], x_y_h[-1][2])\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        points.append(stdin.readline().strip().split(\" \"))\n    points = list(zip(*points))\n    \n    center_x = min(points[0])\n    center_y = min(points[1])\n    \n    max_height = 0\n    for point in points[2]:\n        max_height = max(max_height, abs(int(point) - center_x) + abs(int(point) - center_y))\n    \n    return str(center_x) + \" \" + str(center_y) + \" \" + str(max_height)\n\nimport sys\nprint(solution(sys.stdin.readlines()))\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\\n')\n    2 2 6\n    \"\"\"\n    center_point = list(map(int, stdin.split('\\n')[1:5]))\n    points = [list(map(int, stdin.split('\\n')[i + 5].split())) for i in range(4)]\n    x_coords, y_coords = zip(*points)\n    x_coords = set(x_coords)\n    y_coords = set(y_coords)\n    x_diffs = [abs(center_point[0] - x) for x in x_coords]\n    y_diffs = [abs(center_point[1] - y) for y in y_coords]\n    return str(min(x_diffs) + min(y_diffs))\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.readline().strip())\n    points: List[Tuple[int, int, int]] = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    # Get the center and height.\n    center: Tuple[int, int] = tuple(\n        sorted(\n            {(point[0], point[1]) for point in points}.pop()\n        )\n    )\n    height: int = max(point[2] for point in points)\n    return \" \".join(map(str, center + (height,)))\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_points = int(stdin[0])\n    points = []\n    for _ in range(number_of_points):\n        points.append(list(map(int, stdin.split()[1:])))\n    points.sort(key=lambda x: x[1])\n    points.sort(key=lambda x: x[0])\n    x_min = points[0][0]\n    x_max = points[-1][0]\n    y_min = points[0][1]\n    y_max = points[-1][1]\n    for x, y, h in points:\n        if x_min!= x:\n            x_min = x\n        if x_max!= x:\n            x_max = x\n        if y_min!= y:\n            y_min = y\n        if y_max!= y:\n            y_max = y\n    print('{0} {1} {2}'.format(x_min, y_min, y_max - x_max - y_max + x_min))\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    coords = {}\n    for i in range(N):\n        x, y, h = map(int, stdin.readline().split())\n        coords[(x, y)] = h\n\n    max_h = max(coords.values())\n    points = [point for point in coords if coords[point] == max_h]\n    result = list(map(lambda x: str(x[0]), points))\n    return''.join(result)\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_list = [int(stdin) for _ in range(N)]\n    y_list = [int(stdin) for _ in range(N)]\n    h_list = [int(stdin) for _ in range(N)]\n    min_h = 1000000\n    for i in range(N):\n        min_h = min(min_h, h_list[i])\n    max_x = 0\n    max_y = 0\n    for i in range(N):\n        if x_list[i] > max_x:\n            max_x = x_list[i]\n        if y_list[i] > max_y:\n            max_y = y_list[i]\n    min_x = 100\n    min_y = 100\n    for i in range(N):\n        if x_list[i] < min_x:\n            min_x = x_list[i]\n        if y_list[i] < min_y:\n            min_y = y_list[i]\n    x_range = max_x - min_x\n    y_range = max_y - min_y\n    x_center = min_x + x_range / 2\n    y_center = min_y + y_range / 2\n    print(x_center, y_center, min_h)\n    return ''\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\")\n    '2 2 6'\n    \"\"\"\n    data = stdin.strip().split(\"\\n\")\n\n    N = int(data[0])\n    C = list(map(int, data[1].split()))\n    C_X = sum([p[0] for p in C]) / N\n    C_Y = sum([p[1] for p in C]) / N\n    H = max(max([p[2] for p in C]), 1)\n\n    return f\"{C_X} {C_Y} {H}\"\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    points = []\n    for i in range(1, N + 1):\n        x, y, h = map(int, stdin[i].split())\n        points.append((x, y, h))\n    \n    return f\"{points[0][0]}{points[0][1]} {points[0][2]}\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - stdin[::-1].find(stdin)\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    count = 0\n    for i in range(0, len(string)):\n        temp = string[i]\n        string = string.replace(string[i], '')\n        if string == string[::-1]:\n            count += 1\n        string = string + temp\n    return count\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:3]+stdin[4:6]+stdin[7:9]\n    \ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    hugs = 0\n    S = stdin\n    for i in range(len(S)):\n        if S[i] == 'r' and S[-i-1] == 'r':\n            hugs += 1\n    return hugs\n\nsolution(stdin)\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    n: int = len(s)\n    d: Dict[str, int] = {}\n    for i in range(n):\n        for j in range(n):\n            if s[i]!= s[j]:\n                if (\n                    i + j >= n\n                    or (i + j) < n\n                    and s[i + j]!= s[j]\n                    or (i + j) >= n\n                    and s[i + j] == s[j]\n                ):\n                    d[s[i] + s[j]] = d.get(s[i] + s[j], 0) + 1\n    return min(d.values())\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    # write your code in Python 3.6\n    # take 2 strings\n    # return min(1, 2)\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    if N < 10:\n        if N % 2!= 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    a = N // 9\n    b = N % 9\n    if a == b or a - b == 1 or b - a == 1:\n        return \"Yes\"\n    return \"No\"\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    answer = \"Yes\" if n % 9 == 0 or n == 9 else \"No\"\n    print(answer)"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if 10 % int(stdin) == 0 else 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 100:\n        raise ValueError('Number should be between 1 and 9')\n    result = ''\n    i = 1\n    while i <= N:\n        if N % i == 0:\n            if i < 9:\n                result = 'Yes'\n            else:\n                result = 'Yes' if int(str(N) + '0') < 100 else 'No'\n        i += 1\n    print(result)\n    return result"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i*j == int(N):\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if num == (i * j):\n                return \"Yes\"\n    return \"No\"\n    pass\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if n % 9 == 0 or any(n % 9 == a for a in range(1, 9)) else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 1 <= n <= 9:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(1, 9 + 1):\n        for j in range(1, 9 + 1):\n            if i * j == n:\n                print(\"Yes\")\n                return \"Yes\"\n    print(\"No\")\n    return \"No\"\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = stdin.split(\"\\n\")[0]\n    listOfLists = [int(num) for num in stdin.split(\"\\n\")[1].split()]\n    total = 0\n    for i in range(int(n) - 2):\n        for j in range(i + 1, int(n) - 1):\n            for k in range(j + 1, int(n)):\n                if(listOfLists[i]!= listOfLists[j] and listOfLists[j]!= listOfLists[k] and listOfLists[k]!= listOfLists[i]):\n                    if (is_triangle(listOfLists[i], listOfLists[j], listOfLists[k])):\n                        total += 1\n    return total\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of ways to choose three of the sticks with different lengths that can form a triangle.\n\n    >>> solution(\"5\\n4 4 9 7 5\\n\")\n    '5'\n    \"\"\"\n\n    def is_valid(lengths: tuple[int,...]) -> bool:\n        \"\"\"Returns whether or not the given lengths of sticks can form a triangle.\n\n        >>> is_valid((4, 4, 9, 7, 5))\n        True\n        >>> is_valid((4, 4, 9, 7))\n        False\n        \"\"\"\n        # noinspection PyTypeChecker\n        return lengths[0] + lengths[1] > lengths[2] and lengths[0] + lengths[2] > lengths[1] and lengths[2] + lengths[1] > lengths[0]\n\n    def count_triples(lengths: tuple[int,...]) -> int:\n        \"\"\"Returns the number of triples (i, j, k) satisfying the conditions from is_valid.\n\n        >>> count_triples((4, 4, 9, 7, 5))\n        5\n        \"\"\"\n        return sum(\n            1\n            for i in range(len(lengths) - 2)\n            for j in range(i + 1, len(lengths) - 1)\n            for k in range(j + 1, len(lengths))\n            if is_valid((lengths[i], lengths[j], lengths[k]))\n        )\n\n    return str(count_triples(tuple(map(int, stdin.split()[1:]))))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    s = stdin.split('\\n')\n    n = int(s[0])\n    lengths = s[1].split(' ')\n    print(len(set(lengths))*(len(set(lengths))-1)*(len(set(lengths))-2)//6)\n    print(len(lengths))\n    print(Counter(lengths).values())\n    return ''\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the number of ways to choose three of the sticks with different lengths that can form a triangle.\n    \"\"\"\n    n = int(stdin)\n    s = [int(i) for i in stdin.split(' ')]\n    return f'{n - 2}{chr(169)}{n - 1}{chr(169)}{n}'\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n    return output\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Number of ways to choose three of the sticks with different lengths that can form a triangle:'+ str(N) + '\\n' + 'Triples satisfying both of the conditions:\\n' + str(arr)"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin[0])\n    lengths = list(map(int, stdin[1:].split(' ')))\n    triples = []\n    for i in range(number):\n        for j in range(i + 1, number):\n            for k in range(j + 1, number):\n                if lengths[i]!= lengths[j] and lengths[i]!= lengths[k] and lengths[j]!= lengths[k]:\n                    triples.append([i + 1, j + 1, k + 1])\n    print(len(triples))\n    return ''\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = [int(s.strip()) for s in stdin.readline().split()]\n    triplets = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if l[i]!= l[j]!= l[k]:\n                    triplets.add((l[i], l[j], l[k]))\n    print(len(triplets))\n    return ''\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    return None\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 1:\n        return \"1\"\n    if a == 2 and b == 2:\n        return \"4\"\n    if a == 2 and b == 3:\n        return \"7\"\n    if a == 2 and b == 4:\n        return \"8\"\n    if a == 2 and b == 5:\n        return \"10\"\n    if a == 2 and b == 6:\n        return \"12\"\n    if a == 2 and b == 7:\n        return \"14\"\n    if a == 2 and b == 8:\n        return \"16\"\n    if a == 2 and b == 9:\n        return \"18\"\n    if a == 2 and b == 10:\n        return \"20\"\n    if a == 2 and b == 11:\n        return \"22\"\n    if a == 2 and b == 12:\n        return \"24\"\n    if a == 2 and b == 13:\n        return \"26\"\n    if a == 2 and b == 14:\n        return \"28\"\n    if a == 2 and b == 15:\n        return \"30\"\n    if a == 2 and b == 16:\n        return \"32\"\n    if a == 2 and b == 17:\n        return \"34\"\n    if a == 2 and b == 18:\n        return \"36\"\n    if a == 2 and b == 19:\n        return \"38\"\n    if a == 2 and b == 20:\n        return \"40\"\n    if a == 3 and b == 1:\n        return \"3\"\n    if a == 3 and b == 2:\n        return \"6\"\n    if a == 3 and b == 3:\n        return \"9\"\n    if a == 3 and b == 4:\n        return \"12\"\n    if a == 3 and b == 5:\n        return \"15\"\n    if a == 3 and b == 6:\n        return \"18\"\n    if a == 3 and b == 7:\n        return \"21\"\n    if a == 3 and b == 8:\n        return \"24\"\n    if a == 3 and b == 9:\n        return \"27\"\n    if a == 3 and b == 10:\n        return \"30\"\n    if a == 3 and b == 11:\n        return \"33\"\n    if a == 3 and b == 12:\n        return \"36\"\n    if a == 3 and b == 13:\n        return \"39\"\n    if a == 3 and b == 14:\n        return \"42\"\n    if a == 3 and b == 15:\n        return \"45\"\n    if a == 3 and b == 16:\n        return \"48\"\n    if a == 3 and b == 17:\n        return \"51\"\n    if a == 3 and b == 18:\n        return \"54\"\n    if a == 3 and b == 19:\n        return \"57\"\n    if a == 3 and b == 20:\n        return \"60\"\n    if a == 4 and b == 1:\n        return \"4\"\n    if a == 4 and b == 2:\n        return \"8\"\n    if a == 4 and b == 3:\n        return \"12\"\n    if a == 4 and b == 4:\n        return \"16\"\n    if a == 4 and b == 5:\n        return \"20\"\n    if a == 4 and b == 6:\n        return \"24\"\n    if a == 4 and b == 7:\n        return \"28\"\n    if a == 4 and b == 8:\n        return \"32\"\n    if a == 4 and b == 9:\n        return \"36\"\n    if a == 4 and b == 10:\n        return \"40\"\n    if a == 4 and b == 11:\n        return \"44\"\n    if a == 4 and b == 12:\n        return \"48\"\n    if a == 4 and b == 13:\n        return \"52\"\n    if a == 4 and b == 14:\n        return \"56\"\n    if a == 4 and b == 15:\n        return \"60\"\n    if a == 4 and b == 16:\n        return \"64\"\n    if a == 4 and b == 17:\n        return \"68\"\n    if a == 4 and b == 18:\n        return \"72\"\n    if a == 4 and b == 19:\n        return \"76\"\n    if a == 4 and b == 20:\n        return \"80\"\n    if a == 5 and b == 1:\n        return \"5\"\n    if a == 5 and b == 2:\n        return \"10\"\n    if a == 5 and b == 3:\n        return \"15\"\n    if a == 5 and b == 4:\n        return \"20\"\n    if a == 5 and b == 5:\n        return \"25\"\n    if a == 5 and b == 6:\n        return \"30\"\n    if a == 5 and b == 7:\n        return \"35\"\n    if a == 5 and b == 8:\n        return \"40\"\n    if a == 5 and b == 9:\n        return \"45\"\n    if a == 5 and b == 10:\n        return \"50\"\n    if a == 5 and b == 11:\n        return \"55\"\n    if a == 5 and b == 12:\n        return \"60\"\n    if a == 5 and b == 13:\n        return \"65\"\n    if a == 5 and b == 14:\n        return \"70\"\n    if a == 5 and b == 15:\n        return \"75\"\n    if a == 5 and b == 16:\n        return \"80\"\n    if a == 5 and b == 17:\n        return \"85\"\n    if a == 5 and b == 18:\n        return \"90\"\n    if a == 5 and b == 19:\n        return \"95\"\n    if a == 5 and b == 20:\n        return \"100\"\n    if a == 6 and b == 1:\n        return \"6\"\n    if a == 6 and b == 2:\n        return \"12\"\n    if a == 6 and b == 3:\n        return \"18\"\n    if a == 6 and b == 4:\n        return \"24\"\n    if a == 6 and b == 5:\n        return \"30\"\n    if a == 6 and b == 6:\n        return \"36\"\n    if a == 6 and b == 7:\n        return \"42\"\n    if a == 6 and b == 8:\n        return \"48\"\n    if a == 6 and b == 9:\n        return \"54\"\n    if a == 6 and b == 10:\n        return \"60\"\n    if a == 6 and b == 11:\n        return \"66\"\n    if a == 6 and b == 12:\n        return \"72\"\n    if a == 6 and b == 13:\n        return \"78\"\n    if a == 6 and b == 14:\n        return \"84\"\n    if a == 6 and b == 15:\n        return \"90\"\n    if a == 6 and b == 16:\n        return \"96\"\n    if a == 6 and b == 17:\n        return \"102\"\n    if a == 6 and b == 18:\n        return \"108\"\n    if a == 6 and b == 19:\n        return \"114\"\n    if a == 6 and b == 20:\n        return \"120\"\n    if a == 7 and b == 1:\n        return \"7\"\n    if a == 7 and b == 2:\n        return \"14\"\n    if a == 7 and b == 3:\n        return \"21\"\n    if a == 7 and b == 4:\n        return \"28\"\n    if a == 7 and b == 5:\n        return \"35\"\n    if a == 7 and b == 6:\n        return \"42\"\n    if a == 7 and b == 7:\n        return \"49\"\n    if a == 7 and b == 8:\n        return \"56\"\n    if a == 7 and b"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(input()) for _ in range(2)]\n    if A * B > 9:\n        print(-1)\n    else:\n        print(A*B)"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B = [int(x) for x in stdin.split()]\n\n    for a in range(1, 11):\n        for b in range(1, 11):\n            if a * b == A * B:\n                return str(a * b)\n\n    return -1"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    a, b = line[0].split(' ')\n    a, b = int(a), int(b)\n    for i in range(1, 10):\n        if a * i == b:\n            return str(a * i)\n    return '-1'"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    return str(A * B) if A * B < 10 else str(-1)\n\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A, B = int(A), int(B)\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        if A * B in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            return str(A * B)\n        else:\n            return -1\n    else:\n        return -1"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split(\" \")))\n    if A == 1:\n        return str(B-1) if B!= 1 else \"-1\"\n    elif B == 1:\n        return str(A-1) if A!= 1 else \"-1\"\n    return str(A * B)"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = -1\n    a, b = map(int, stdin.split(\" \"))\n    if a == 0 or a == 1:\n        result = a * b\n    if b == 0 or b == 1:\n        result = a * b\n    if a == 0 or a == 1:\n        result = a * b\n    if b == 0 or b == 1:\n        result = a * b\n    if b!= 0 and b!= 1 and a!= 0 and a!= 1:\n        if a > 9:\n            if b > 9:\n                result = int(str(a) + str(b))\n            else:\n                result = int(str(a) + str(b))\n        elif a > 9:\n            result = int(str(a) + str(b))\n        else:\n            result = int(str(a) + str(b))\n    print(result)\n    return result\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < 0 or a > 20 or b < 0 or b > 20:\n        return -1\n    return f\"{a} \\times {b} = {a*b}\"\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # take in 2 ints, put them in a list\n    A, B = list(map(int, stdin.split(\" \")))\n    for x in range(1, 10):\n        for y in range(1, 10):\n            if x * y == A * B:\n                return str(x * y)\n    return \"-1\"\n    pass\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 5\\n10 12 1 2 14\")\n    5\n    \"\"\"\n    # Get the input from standard input\n    n, m = map(int, stdin.split(\" \"))\n    nums = list(map(int, stdin.split(\" \")))\n\n    # Find the minimum number of moves required to achieve the objective\n    num_moves = 0\n    for i in range(m):\n        num_moves += max(nums[i], nums[i + 1] - 1) - min(nums[i], nums[i + 1] - 1) + 1\n    return str(num_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n, m = [int(x) for x in lines[0].split(' ')]\n    xy = [int(x) for x in lines[1].split(' ')]\n    xy.sort()\n\n    return str(sum([abs(x) for x in xy[1:]]))\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Return result\n    return result"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    coordinates = list(map(int, stdin.split('\\n')[1].split(' ')))\n    # print(coordinates)\n    return''.join(str(i) for i in [sum([abs(i) for i in coordinates[:n//2] if i < 0]), sum([abs(i) for i in coordinates[n//2:]] if i > 0)])\n\nprint(solution(input()))"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the minimum number of moves required to achieve the objective.\n    Returns the minimum number of moves required to achieve the objective.\n\n    Time complexity: O(N * log(N))\n    Space complexity: O(1)\n    '''\n    n, m = map(int, stdin.readline().split())\n    pairs = list(map(int, stdin.readline().split()))\n    pairs.sort()\n\n    count = 0\n    first = pairs[0]\n    last = pairs[-1]\n\n    for i in range(m):\n        if i % 2 == 0:\n            pairs[i] += 1\n            count += 1\n        else:\n            pairs[i] -= 1\n            count += 1\n\n    if count > n:\n        count -= n\n    else:\n        count = 0\n    return count\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of moves required to achieve the objective.\"\"\"\n    n, m = [int(val) for val in stdin.split()]\n    a = [int(val) for val in stdin.split('\\n')[1].split(' ')]\n\n    visited = {num: False for num in a}\n    min_moves = 0\n    i = 0\n    while i < n and m > 0:\n        if visited[a[i]]:\n            i += 1\n            continue\n        else:\n            visited[a[i]] = True\n            m -= 1\n            min_moves += 1\n            if i == n - 1:\n                i = 0\n                continue\n            else:\n                if a[i] < a[i + 1]:\n                    a[i + 1] += 1\n                else:\n                    a[i + 1] -= 1\n    return min_moves\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n, m = map(int, lines[0].split())\n    coordinates = list(map(int, lines[1].split()))\n    count = 0\n    for i in range(m):\n        current_min = coordinates[i]\n        for j in range(i+1, m):\n            if coordinates[j] < current_min:\n                count += current_min - coordinates[j]\n                current_min = coordinates[j]\n        coordinates[i] = current_min\n\n    return str(count)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution for the jigsaw puzzle problem.\"\"\"\n    pass\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    \n    cnt = 0\n    \n    while True:\n        \n        flag = False\n        \n        for i in range(n):\n            \n            if t[i] % 2 == 0:\n                t[i] += 1\n            else:\n                t[i] -= 1\n                \n            if t[i] == m:\n                cnt += 1\n                flag = True\n                \n        if flag == False:\n            break\n        \n        \n    return str(cnt)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    roads = [[int(x) for x in stdin.split(\"\\n\")[i].split()] for i in range(1, m + 1)]\n\n    class City:\n        def __init__(self, _id: int, _connections: list[int]) -> None:\n            self.id = _id\n            self.connections = _connections\n\n        def __repr__(self) -> str:\n            return str(self.id)\n\n    cities: list[City] = [\n        City(i, [j for j in range(1, n + 1) if j!= i and j in _connections])\n        for (i, _connections) in enumerate(roads, 1)\n    ]\n\n    def solve(s: set[City]) -> bool:\n        for city in cities:\n            if city not in s:\n                return False\n        return True\n\n    def get_roads(s: set[City]) -> list[list[int]]:\n        road_set = set()\n        for city in cities:\n            if city in s:\n                road_set.add(city.id)\n        return [\n            [city.connections[0] for city in cities if city.id == road] for road in road_set\n        ]\n\n    def get_sum(s: set[City]) -> int:\n        return sum(\n            sum([1 for city in cities if city.id == road]) for road in s\n        )\n\n    return (\n        \"\".join([\"1\" if city in s else \"0\" for city in cities])\n        for s in itertools.product(\n            *[\n                itertools.combinations(roads, road_length)\n                for road_length in range(1, m + 1)\n            ]\n        )\n        if solve(set(s))\n    )\n\n\nprint(\n    \"\\n\".join(solution(stdin.read()))\n    or \"\\n\".join(solution(stdin.read()))\n    or solution(stdin.read())\n)\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds k different ways to choose n-1 roads from n cities to maximize the sum of distance between cities in the country.\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    roads = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads.append([a, b])\n\n    # ensure there is only one way to reach any city from the capital\n    road_indices = set(range(m))\n    road_indices.remove(0)\n\n    # the number of ways to choose k roads out of n-1 roads is the number of ways to choose n-k roads\n    k_roads = n - k\n\n    # for each possible way, the set of k roads must contain at least one road\n    # each of the k roads must be distinct from the roads chosen so far\n    # there must be at most k unique ways to choose k roads out of n-1 roads\n    # all of the ways to choose k roads must have at least one road from the capital\n    # the sum of distances from the capital to all cities must be minimized\n    ways = []\n\n    for i in range(k_roads):\n        if i + 1 not in road_indices:\n            continue\n        road_indices.remove(i + 1)\n        ways.append(i + 1)\n        while True:\n            new_ways = []\n            for way in ways:\n                if way in road_indices:\n                    new_ways.append(way)\n            if len(new_ways) == k - 1:\n                break\n            else:\n                ways = new_ways\n        if len(ways) == k:\n            break\n\n    return \"\".join([str(int(1 in way)) for way in ways])\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [[] for i in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split()[1+i*2:3+i*2])\n        roads[a-1].append(b-1)\n        roads[b-1].append(a-1)\n    num_of_ways = [[] for i in range(k)]\n    num_of_ways[0] = [[1 if i==j else 0 for j in range(n)] for i in range(n)]\n    for i in range(1, k):\n        new_num_of_ways = []\n        for j in range(n):\n            new_num_of_ways.append([])\n            for city in roads[j]:\n                if city == j:\n                    new_num_of_ways[-1].append(num_of_ways[i-1][j][city])\n                else:\n                    new_num_of_ways[-1].append(sum(num_of_ways[i-1][city]))\n        num_of_ways[i] = new_num_of_ways\n    res = []\n    for i in range(n):\n        temp = []\n        for j in range(k):\n            temp.append(num_of_ways[j][i].index(min(num_of_ways[j][i])))\n        res.append(temp)\n    for i in range(len(res)):\n        print(''.join(map(str, res[i])))\n    return ''\nsolution(stdin)\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n\")\n    '1011'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    roads = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads[a - 1].append(b - 1)\n        roads[b - 1].append(a - 1)\n\n    edges = set()\n    for i in range(n):\n        for j in roads[i]:\n            if (i + 1, j + 1) not in edges:\n                edges.add((i + 1, j + 1))\n\n    min_cost = float(\"inf\")\n    for i in range(1, n + 1):\n        cost = sum(1 for edge in edges if i in edge)\n        if cost == k - 1 and cost < min_cost:\n            min_cost = cost\n    if min_cost == float(\"inf\"):\n        return \"\".join(\"1\" if edge in edges else \"0\" for edge in edges)\n    return \"\".join(\"1\" if edge in edges else \"0\" for edge in edges if sum(1 for edge in edges if i in edge) == min_cost)\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    roads = [map(int, stdin.split('\\n')[i].split(' ')) for i in range(m)]\n    roads = list(map(lambda x: list(x), roads))\n    max_weight = n * (n - 1)\n    print(roads)\n    return str(0)\n    \ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\")\n    '101001'\n    \"\"\"\n\n    num_roads, num_opts, num_roads_to_repair = [int(x) for x in stdin.split()]\n\n    roads = []\n    for _ in range(num_roads):\n        roads.append(tuple(int(x) for x in stdin.readline().split()))\n\n    # print(num_roads, num_opts, num_roads_to_repair, roads)\n\n    return solve(num_roads, num_opts, num_roads_to_repair, roads)\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_cities, num_roads, num_options = map(int, stdin.split())\n    edges = [{} for _ in range(num_cities + 1)]\n    for _ in range(num_roads):\n        a, b = map(int, stdin.split())\n        edges[a][b] = edges[b][a] = 1\n    answers = [[0] * num_options for _ in range(num_options)]\n    for i in range(1, num_cities):\n        for k in range(1, num_options + 1):\n            for j in range(1, num_options + 1):\n                answers[i][k] = max(answers[i][k], answers[i][j] + min([edges[i][x] for x in range(1, num_cities + 1)]))\n    return \"\".join([\"1\" if x == num_cities - 1 else \"0\" for x in answers[-1]])\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    connections = [[] for _ in range(n)]\n    for i in range(m):\n        connections[map(int, stdin.split())].append(i)\n    roads = [[] for _ in range(n)]\n    for i in range(n - 1):\n        roads[connections[1][i]].append(connections[0][i])\n    d = [0] * n\n    q = [1]\n    d[0] = 0\n    while q:\n        u = q.pop(0)\n        for v in roads[u]:\n            if d[v] == 0:\n                d[v] = d[u] + 1\n                q.append(v)\n    dp = [[] for _ in range(n)]\n    for i in range(k):\n        dp[0].append([1] * d[0])\n    for i in range(1, n - 1):\n        for j in range(k):\n            for l in range(d[i]):\n                if dp[l][j] == 1:\n                    for v in roads[i]:\n                        dp[i].append(dp[l][j][:] + [0])\n                        dp[i][-1][v] = 1\n                    break\n    res = []\n    for i in range(k):\n        for j in range(m):\n            res.append(dp[d[j] - 1][i][j])\n    return '\\n'.join(res)"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bricks = stdin.split('\\n')\n    length = int(bricks[0])\n    bricks = [int(i) for i in bricks[1:]]\n\n    if len(set(bricks)) == 1:\n        print('YES')\n    elif len(set(bricks)) == 2:\n        if max(bricks) == 2:\n            print('NO')\n        else:\n            print('YES')\n    elif len(set(bricks)) == 3:\n        print('NO')\n    else:\n        print('YES')\n\n\nsolution('\\n'.join(sys.stdin.readlines()))\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 1 1 2 5\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 4 5 3\n   ... ''')\n    'YES'\n    >>> solution('''2\n   ... 10 10\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    m = max(a)\n    if n * (m - 1) - sum(a) > m * 2:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    ans = []\n    for i in range(n):\n        if i == 0:\n            ans.append(a[i])\n        else:\n            ans.append(max(a[i], a[i-1]))\n    ans.append(a[-1])\n    if n == 1:\n        if ans[0] > ans[1]:\n            return \"NO\"\n        return \"YES\"\n    if ans[0] < ans[1]:\n        return \"NO\"\n    for i in range(2, n):\n        if ans[i] < ans[i-1]:\n            return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    # n: total number of parts\n    n = int(stdin[0])\n    # a: list of heights\n    a = [int(num) for num in stdin[1:].split(' ')]\n    # dict of lists\n    a_dict = dict(enumerate(a))\n\n    # 2x1 bricks\n    bricks = 2\n    # check if a is complete\n    if n == 1:\n        if a_dict[0] == 0:\n            return 'YES'\n        else:\n            return 'NO'\n\n    # 2x2 bricks\n    bricks = bricks + 1\n    # if the wall is complete\n    if all(a_dict.values()):\n        return 'YES'\n\n    # if the wall is not complete\n    for idx, height in a_dict.items():\n        # if the current height is 0\n        if height == 0:\n            continue\n        # if the current height is not 0\n        else:\n            # if the wall is complete\n            if all(a_dict.values()):\n                return 'YES'\n            # check if the wall can be completed by this height\n            if n > 2:\n                # check if the wall can be completed by this height\n                if a_dict[idx] == a_dict[idx + 1] and a_dict[idx] == a_dict[idx + 2]:\n                    # delete the current height\n                    del a_dict[idx]\n                    # delete the current height\n                    del a_dict[idx + 1]\n                    # delete the current height\n                    del a_dict[idx + 2]\n                    # set the height of the current height\n                    a_dict[idx] = a_dict[idx] + bricks\n                    # set the height of the current height\n                    a_dict[idx + 1] = a_dict[idx + 1] + bricks\n                    # set the height of the current height\n                    a_dict[idx + 2] = a_dict[idx + 2] + bricks\n                    # check if the wall is complete\n                    if all(a_dict.values()):\n                        return 'YES'\n                    # if the wall is not complete\n                    else:\n                        # reset the dictionary\n                        a_dict = dict(enumerate(a))\n                        # check if the wall can be completed by this height\n                        if n > 3:\n                            # check if the wall can be completed by this height\n                            if a_dict[idx] == a_dict[idx + 1] and a_dict[idx] == a_dict[idx + 2]:\n                                # delete the current height\n                                del a_dict[idx]\n                                # delete the current height\n                                del a_dict[idx + 1]\n                                # delete the current height\n                                del a_dict[idx + 2]\n                                # set the height of the current height\n                                a_dict[idx] = a_dict[idx] + bricks\n                                # set the height of the current height\n                                a_dict[idx + 1] = a_dict[idx + 1] + bricks\n                                # set the height of the current height\n                                a_dict[idx + 2] = a_dict[idx + 2] + bricks\n                                # check if the wall is complete\n                                if all(a_dict.values()):\n                                    return 'YES'\n                                # if the wall is not complete\n                                else:\n                                    return 'NO'\n    return 'NO'"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_complete():\n        return not any(map(\n            lambda a, b: a + 1!= b,\n            zip(list(map(int, stdin.split())), [0] * n)\n        ))\n    return 'YES' if is_complete() else 'NO'\n    return ''\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n2 1 1 2 5\\n')\n    'YES'\n    >>> solution('3\\n1 2 3\\n')\n    'YES'\n    >>> solution('2\\n10 10\\n')\n    'YES'\n    >>> solution('3\\n1 2 3\\n')\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    heights = [0] * n\n    heights[0] = arr[0]\n    for i in range(1, n):\n        heights[i] = heights[i - 1] + arr[i]\n\n    for i in range(n):\n        j = 0\n        while j < n:\n            if (heights[i] == heights[j]) and (i!= j):\n                break\n            j += 1\n        if j == n:\n            return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if n == 1 or '2' in stdin else 'NO'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    arr2 = [arr[0]]\n    for i in range(1, len(arr)):\n        if arr[i] == arr2[-1]:\n            arr2.append(arr[i])\n        elif arr[i]!= arr2[-1] + 1:\n            arr2.append(arr[i])\n    if len(arr2) == 1:\n        return \"YES\"\n    if len(arr2) == 2:\n        return \"YES\" if arr2[1] - arr2[0] == 1 else \"NO\"\n    for i in range(len(arr2) - 2):\n        if arr2[i + 2] - arr2[i + 1]!= 1:\n            return \"NO\"\n    return \"YES\"\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    h, n = [int(x) for x in stdin.split(' ')]\n    d = [int(x) for x in stdin.split(' ')]\n    H = h\n    for i in range(n):\n        H += d[i]\n    while H > 0:\n        H += d[i]\n        if H <= 0:\n            return str(i + 1)\n    return '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    H, n = stdin.split()\n    H, n = int(H), int(n)\n    d = stdin.split()[1:]\n    d = [int(item) for item in d]\n\n    def is_dead(H: int, d: list) -> bool:\n        \"\"\"function to check whether monster is dead or not\"\"\"\n        H = H\n        for i in range(len(d)):\n            H = H + d[i]\n            if H <= 0:\n                return True\n        return False\n\n    def first_dead(H: int, n: int, d: list) -> int:\n        \"\"\"function to find the first minute when monster is dead\"\"\"\n        dead = False\n        minute = 0\n        while not dead:\n            for i in range(n):\n                H = H + d[i]\n                minute += 1\n                dead = is_dead(H, d)\n                if dead:\n                    break\n        return minute\n    return str(first_dead(H, n, d))\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input\n    :return: solution\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    initial_hp, n = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    hp_changes = [int(i) for i in stdin[1].split()]\n    if initial_hp <= 0:\n        return -1\n    round = 0\n    while round < n:\n        round += 1\n        initial_hp += hp_changes[round - 1]\n        if initial_hp <= 0:\n            return round\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    \n    h = H\n    for i in range(n):\n        h += d[i]\n        if h <= 0:\n            return i + 1\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0412\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445\n    :param stdin: \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0432\u0432\u043e\u0434\u0430\n    :return: \u041e\u0442\u0432\u0435\u0442 \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u043c \u0432\u044b\u0432\u043e\u0434\u0435\n    \"\"\"\n    H, N = [int(i) for i in stdin.split()]\n    ds = [int(i) for i in stdin.split()]\n    if ds[0] <= 0:\n        return -1\n    min_k = None\n    counter = 0\n    while True:\n        for i, d in enumerate(ds):\n            H += d\n            if H <= 0:\n                if min_k is None or min_k > counter:\n                    min_k = counter\n                return min_k\n            counter += 1\n            if counter >= N:\n                return -1\n\n\ndef"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split(' '))\n    arr = [int(x) for x in stdin.split(' ')]\n    arr = [arr[i] for i in range(n)]\n    hp = h\n    time = 0\n    while hp > 0:\n        hp += sum(arr)\n        time += 1\n        arr = [arr[i] if arr[i] > 0 else -arr[i] for i in range(n)]\n        hp = max(hp, 0)\n    return time if hp <= 0 else -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    now = 0\n    for i in range(n):\n        now += d[i]\n        if now < 1:\n            return str(i + 1)\n    return \"impossible\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split('\\n')[0].split(' '))\n    d = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    i = 0\n    \n    while H >= 0:\n        i += 1\n        H = H + sum(d)\n        if H <= 0:\n            return str(i)\n        \n    return -1"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if len(string) >= 2:\n        return max(string[i:i+2] for i in range(len(string)-1))\n\n\nsolution(input())\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\nfrom itertools import permutations\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    max_count = 0\n    for i in range(len(stdin)):\n        if i + 2 <= len(stdin):\n            if stdin[i]!= stdin[i + 1] and stdin[i + 1]!= stdin[i + 2]:\n                answer.append(stdin[i:i + 2])\n                count = stdin[i:i + 2].count(stdin[i + 1])\n                if count > max_count:\n                    max_count = count\n                    if max_count > 1:\n                        answer.pop()\n                    answer.append(stdin[i:i + 2])\n            else:\n                answer.append(stdin[i:i + 2])\n    print(''.join(answer))\n    return ''.join(answer)\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\nABACABA\\n\")\n    'AB'\n    >>> solution(\"5\\nZZZAA\\n\")\n    'ZZ'\n    \"\"\"\n    n = int(stdin.readline())\n    string = stdin.readline()\n    s = sorted(string)\n    count = 0\n    max_count = 0\n    for i in range(0, len(string) - 1):\n        if s[i] == s[i + 1]:\n            count += 1\n            max_count = count if max_count < count else max_count\n        else:\n            count = 0\n    print(s[max_count - 1])\n    return s[max_count - 1]\n\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('7\\nABACABA')\n    'AB'\n    >>> solution('5\\nZZZAA')\n    'ZZ'\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    s = s.replace(\"A\", \" \").replace(\"B\", \" \").replace(\"C\", \" \")\n    s = s.replace(\" \", \"\")\n    s = s.upper()\n    list = s.split(\" \")\n    d = dict()\n    for item in list:\n        if item in d:\n            d[item] = d[item] + 1\n        else:\n            d[item] = 1\n    max = 0\n    key = \"\"\n    for item in d:\n        if d[item] > max:\n            max = d[item]\n            key = item\n    print(key)\n    return key\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = [stdin[i] + stdin[i+1] for i in range(len(stdin) - 1)]\n    return max(dict(Counter(l)).items(), key=lambda x: x[1])[0]\n\n\nfrom collections import Counter\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return max(stdin.split(), key=lambda x: stdin.count(x))\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complete the two_gram function below.\n    \"\"\"\n    # Write your code here\n    s = stdin\n    ngrams = Counter(s[i:i+2] for i in range(len(s)-1))\n    most_common = ngrams.most_common()\n    return most_common[0][0]\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    "
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin[::-1]\n    return len(s) + len(t) - 2 * max(len(s), len(t))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    dp = [[0] * len(t) for i in range(len(s))]\n    for i in range(len(s)):\n        dp[i][0] = i\n    for j in range(len(t)):\n        dp[0][j] = j\n    for i in range(1, len(s)):\n        for j in range(1, len(t)):\n            dp[i][j] = min(dp[i - 1][j] + 1, dp[i][j - 1] + 1, dp[i - 1][j - 1] + (0 if s[i] == t[j] else 1))\n    return dp[-1][-1]\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    i = len(n) - 1\n    return min(i, n)\n\nprint(solution(\"test\"))\nprint(solution(\"west\"))\nprint(solution(\"codeforces\"))\nprint(solution(\"yes\"))\nprint(solution(\"b\"))\nprint(solution(\"ab\"))"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the fewest number of moves to make two given strings equal.\"\"\"\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n\n    return str(len(s) + len(t) - min(len(s), len(t)))\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    cities = map(int, stdin.split())\n    return str(calculate_distance(n, x, cities))\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    # TODO: Your code here.\n    pass\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO: Docstring\"\"\"\n    # Hint: You can take a look at the editorial solution for the problem.\n    # Hint: This can be solved by dynamic programming.\n\n    return None\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, x = map(int, stdin.split())\n    ar = list(map(int, stdin.split()))\n    lst = []\n    for i in range(n - 1):\n        lst.append(ar[i + 1] - ar[i])\n    lst.sort(reverse=True)\n    count = 0\n    i = 0\n    while True:\n        if i == len(lst):\n            break\n        if x - ar[i] <= lst[i]:\n            x = ar[i]\n            count += 1\n        else:\n            break\n        i += 1\n    return count\n    pass\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n    D = 0\n    visited = [0 for _ in range(N)]\n    while True:\n        if all(visited):\n            break\n        max_len = 0\n        for i, x in enumerate(C):\n            if visited[i]:\n                continue\n            max_len = max(max_len, x - D)\n            min_len = max(min(D, x), 0)\n            if x - D > 0:\n                visited[i] = 1\n                D += x - D\n                break\n            elif x - D <= 0:\n                visited[i] = 1\n                D += min_len\n    return str(D)"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, X = map(int, stdin.readline().split())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    ans = 0\n    for i in range(1, N - 1):\n        ans = max(ans, min(abs(arr[i] - arr[i - 1]), abs(arr[i] - arr[i + 1])))\n\n    return str(ans)\n    '''\n\n    # x_1, x_2,..., x_N = map(int, stdin.readline().split())\n    x = int(stdin.readline())\n    arr = map(int, stdin.readline().split())\n    arr = list(arr)\n    x_max = max(arr)\n    print(x_max)\n    ans = [0] * (x_max + 1)\n    for i in range(1, x_max + 1):\n        ans[i] = i\n    for i in range(1, x_max + 1):\n        if i in arr:\n            continue\n        ans[i] = min(ans[i - 1], ans[i + 1]) + 1\n\n    print(ans[x])\n    return ''\n\nsolution(sys.stdin)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value of D that enables you to visit all the cities\n    \"\"\"\n\n    num_cities, start = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    # Choose a point\n    point = cities[0]\n    # Dictionary of points visited\n    visited = {point: 0}\n    for city in cities[1:]:\n        # Find the distance between this point and the next point\n        dist = abs(city - point)\n        # Add to the dictionary of visited points\n        visited[city] = dist\n        # Update the current point\n        point = city\n    # Loop until we have visited all the cities\n    while len(visited) < num_cities:\n        # Find the next city to travel to\n        for city in cities:\n            # Find the distance to the next point\n            dist = abs(city - point)\n            # Update the dictionary of visited points if necessary\n            if city not in visited:\n                visited[city] = dist\n            # If we have already visited this point, we need to update it if necessary\n            else:\n                # Check to see if we need to update the distance\n                if dist < visited[city]:\n                    visited[city] = dist\n        # Move the point to the next city\n        point += visited[point]\n    # The difference between the start and end point is the answer\n    return abs(start - point)\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    middle = length // 2\n    odd_length = False\n    if length % 2 == 1:\n        odd_length = True\n    first_half = stdin[:middle]\n    second_half = stdin[middle + 1:]\n    if first_half == first_half[::-1] and second_half == second_half[::-1]:\n        return 'Yes'\n    if not odd_length:\n        if first_half == first_half[::-1] and second_half[:middle] == second_half[:middle][::-1]:\n            return 'Yes'\n        if first_half == first_half[::-1] and second_half[middle:] == second_half[middle:][::-1]:\n            return 'Yes'\n    return 'No'\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if is_strong_palindrome(stdin) else \"No\")\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin\n    # len(s) <= 2 or\n    if len(s) % 2 == 0 or len(s) == 1 or s[:(len(s) // 2)] == s[:len(s) // 2 - 1:-1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    # n/2 gives the midpoint of the string\n    if n % 2 == 0:\n        midpoint = int(n/2 - 1)\n    else:\n        midpoint = int(n/2)\n    # Check if the string is a palindrome\n    if isPalindrome(s):\n        return 'Yes'\n    # Check for the first half palindrome\n    firstHalf = s[:midpoint]\n    if isPalindrome(firstHalf):\n        # Check for the second half palindrome\n        secondHalf = s[midpoint:]\n        if isPalindrome(secondHalf):\n            return 'Yes'\n    return 'No'\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3 or n > 99 or n % 2 == 0:\n        return \"No\"\n\n    a = n // 2 - 1\n    b = n // 2 + 2\n    half1 = stdin[:a+1]\n    half2 = stdin[a+2:b]\n\n    if half1 == half1[::-1] and half2 == half2[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = stdin[:((n - 1) // 2)]\n    return \"Yes\" if s == s[::-1] and s == stdin[((n + 3) // 2):] else \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if all(s == s[::-1] for s in stdin.split()) else \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    str = stdin\n    print(\"yes\") if is_strong_palindrome(str) else print(\"no\")\n    return ''\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[0:3] == stdin[0:len(stdin)-3][::-1] and stdin[(len(stdin)-3)//2:len(stdin)+1] == stdin[len(stdin)-3//2:len(stdin)-1][::-1] else 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[((len(stdin) - 1) // 2):] == stdin[:(len(stdin) - 1) // 2:-1]\n\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    return str(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    a, b = stdin.split()\n    # compute the answer\n    # print the answer\n    print(int(a) * float(b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(num) for num in stdin.split()]\n    return str(a * b)"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B = stdin.split(\" \")\n    A, B = float(A), float(B)\n    \n    return int(A * B)\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [float(n) for n in stdin.split()]\n    return int(a*b)\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return str(int(a * b))\n    pass\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return str(int(round(a * b)))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    print(int(a * b))\n    return ''"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = float(B)\n    print(int(A * B))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = stdin.split()\n    b = int(float(\"0.\" + b) * 10 ** 15)\n    print(int((int(a) * int(b)) // 10 ** 15))\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    t = int(lines[0])\n\n    for i in range(1, t+1):\n        n = int(lines[i])\n        a = 1\n        while n % 2 == 0:\n            n //= 2\n            a += 1\n        if n == 1:\n            print(a)\n        else:\n            print(0)"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin.read())\n    n = int(input())\n    n_list = [int(stdin.read()) for _ in range(n)]\n    n_list.sort()\n    i = 0\n    while i < len(n_list) and n_list[i] <= 0:\n        i += 1\n    if i == len(n_list):\n        print(0)\n        return\n    left = i\n    right = len(n_list) - 1\n    while left < right:\n        s = n_list[left] + n_list[right]\n        if s > n:\n            right -= 1\n        elif s < n:\n            left += 1\n        else:\n            print(1)\n            return\n    print(0)\n    return\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(count_ways(int(n))) for n in stdin.split('\\n') if n])\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_number_of_ways(n: int) -> int:\n        if n % 2 == 0:\n            return n // 2\n\n        prev_odd_dividers: List[int] = [1, 1]\n        current_odd_dividers: List[int] = [1, 1]\n        current_n: int = n\n        while current_n > 1:\n            prev_odd_dividers = current_odd_dividers\n            current_odd_dividers = [1] * (current_n + 1)\n            for k in range(1, current_n):\n                current_odd_dividers[k] = prev_odd_dividers[k - 1] + prev_odd_dividers[k]\n\n            current_n = current_n // 2\n\n        return current_odd_dividers[-1]\n\n    return str(get_number_of_ways(int(stdin.split(\"\\n\")[0])))\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin)\n    for _ in range(cases):\n        n = int(stdin)\n        for a in range(n//2, -1, -1):\n            for b in range(a+1, n//2 + 1):\n                if a + b == n:\n                    print(a, b)\n                    break\n        else:\n            print(0)\n    return ''\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # you can take input from the stdin and write to the stdout\n    # don't forget to print the final result!\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = b = n // 2\n        n %= 2\n        if n:\n            a -= 1\n        if a < 0:\n            a = 0\n        if a + b < n:\n            result.append(0)\n        else:\n            result.append(2 ** a * 2 ** b)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for case in range(cases):\n        candies = int(stdin.readline())\n        result = 0\n        \n        for a in range(1, candies // 2 + 1):\n            b = candies - a\n            if a > b:\n                break\n            result += 1\n            \n        print(result)"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(c) for c in stdin.split(' ')]\n    roads = [[int(c) for c in stdin.split(' ')] for _ in range(m)]\n    cities = set(i for i in range(1, n + 1))\n    roads = [set(r) for r in roads]\n    dist = {(s, 0): 0}\n    while cities:\n        city = min(cities, key=lambda c: dist.get((c, 0), float('inf')))\n        dist = {(city, dist[city] + 1): 0}\n        roads[city - 1].discard(city)\n        for neighbor in roads[city - 1]:\n            dist[(neighbor, dist[(city, dist[city] + 1)] + 1)] = 0\n        cities.remove(city)\n\n    return min(dist.values())\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    N, M, S = int(x[0]), int(x[1]), int(x[2])\n    roads = {}\n    for _ in range(M):\n        x = stdin.split()\n        c1, c2 = int(x[0]), int(x[1])\n        if c1 not in roads:\n            roads[c1] = {c2}\n        else:\n            roads[c1].add(c2)\n\n        if c2 not in roads:\n            roads[c2] = {c1}\n        else:\n            roads[c2].add(c1)\n    # print(roads)\n    ans = 0\n    for i in range(1, N + 1):\n        if i == S:\n            continue\n        if i not in roads:\n            # print(i)\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, s] = [int(x) for x in stdin.split(\" \")]\n    roads = []\n    for i in range(m):\n        roads.append([int(x) for x in stdin.split(\" \")])\n    \n    roads.sort(key=lambda x: x[0])\n    \n    used = [False for x in range(n)]\n    used[s - 1] = True\n    count = 0\n    for i in range(len(roads)):\n        if roads[i][0] == s and used[roads[i][1] - 1] == False:\n            used[roads[i][1] - 1] = True\n            count += 1\n        if roads[i][1] == s and used[roads[i][0] - 1] == False:\n            used[roads[i][0] - 1] = True\n            count += 1\n        if count == n:\n            break\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cities, roads, start = [int(i) for i in stdin.split()]\n    roads = [\n        [int(j) for j in i.split()] for i in stdin.split('\\n')[:-1]\n    ]\n    adj_list = {}\n    for u, v in roads:\n        adj_list.setdefault(u, []).append(v)\n        adj_list.setdefault(v, []).append(u)\n    visited = {}\n    queue = [start]\n    while queue:\n        node = queue.pop()\n        visited[node] = True\n        for child in adj_list.get(node, []):\n            if child not in visited:\n                visited[child] = True\n                queue.append(child)\n    visited = set(visited.keys())\n    return len([i for i in range(1, cities+1) if i not in visited])\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split(' ')]\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split(' ')]\n        adj[u].append(v)\n        adj[v].append(u)\n    stack = [s]\n    visited = set()\n    while stack:\n        curr = stack.pop()\n        for next in adj[curr]:\n            if next not in visited:\n                stack.append(next)\n        visited.add(curr)\n    return len(visited) - 1\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def DFS(adj: Dict[str, List[str]], cur_path: List[str], start: str):\n        stack = [(start, [])]\n        visited = set()\n        while stack:\n            cur, path = stack.pop()\n            cur_path.append(cur)\n            if cur in visited:\n                continue\n            visited.add(cur)\n            for next_ in adj[cur]:\n                if next_ not in visited:\n                    stack.append((next_, path + [next_]))\n        return path\n\n    n, m, s = map(int, stdin.split(' '))\n    adj = {}\n    for i in range(1, n + 1):\n        adj[str(i)] = []\n    for _ in range(m):\n        a, b = map(int, stdin.split(' '))\n        adj[str(a)].append(str(b))\n        adj[str(b)].append(str(a))\n    path = DFS(adj, [], s)\n    return len(path) - 1\n\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    a.sort()\n    a.reverse()\n    l = len(a)\n    f = []\n    for i in range(l):\n        for j in range(i+1, l):\n            if a[i] + a[j] == a[j] + a[i]:\n                f.append(a[i] + a[j])\n    f.sort()\n    f.reverse()\n    return f[0]\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution function\"\"\"\n    pass\n    return ''\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    boxes = [int(i) for i in stdin.split('\\n')[0].split()]\n    max_weight = max(boxes)\n    boxes.sort()\n    dp = [[0 for _ in range(max_weight + 1)] for _ in range(len(boxes))]\n    dp[0][boxes[0]] = 1\n    for i in range(1, len(boxes)):\n        for j in range(max_weight + 1):\n            if j - boxes[i] >= 0:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - boxes[i]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return max(dp[len(boxes) - 1])\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    boxers = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    boxers.sort()\n    curr_weight = boxers[0]\n    total = 1\n    for i in range(1, len(boxers)):\n        if boxers[i] == curr_weight + 1:\n            curr_weight += 1\n        else:\n            total += 1\n            curr_weight = boxers[i]\n    return str(total)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #Input\n    #15\n    #5 1 2 3 4 5\n    #Output\n    #5\n    n = int(stdin.readline())\n    w = list(map(int, stdin.readline().split()))\n    w.sort()\n    t = 1\n    for i in range(1, len(w)):\n        if w[i] - w[i - 1] > 1:\n            t += 1\n    return t\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    weights.sort()\n    ans = 1\n    for i in range(1, count):\n        if weights[i] - weights[i-1] > 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    weights = [int(x) for x in stdin.split(\"\\n\")[1].split(' ')]\n    n = len(weights)\n    dp = [[0] * (n + 1) for _ in range(count + 1)]\n    max_weight = 0\n    for i in range(1, count + 1):\n        for j in range(1, n + 1):\n            if weights[j - 1] > i:\n                dp[i][j] = dp[i][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i - weights[j - 1]][j - 1] + i)\n            max_weight = max(max_weight, dp[i][j])\n    return max_weight\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    cities = []\n    for _ in range(N):\n        prefecture, year = map(int, stdin.split(\" \"))\n        cities.append([prefecture, year])\n    cities.sort(key=lambda x: x[0])\n    for i in range(M):\n        _, year = cities[i]\n        prefecture = str(prefecture).zfill(6)\n        year = str(year).zfill(6)\n        city = prefecture + year\n        print(city)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution for the problem.\n\n    Parameters\n    ----------\n    stdin : str\n        The input string of the test case.\n\n    Returns\n    -------\n    str\n        The output string of the test case.\n    \"\"\"\n    return"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"N, M = map(int, stdin.readline().strip().split())\n    ans = []\n    for _ in range(N):\n        city, year = stdin.readline().strip().split()\n        year = int(year)\n        ans.append(f\"{year:0>6}{city:0>6}\")\n    return \"\\n\".join(ans)\"\"\"\n    return '\\n'.join([''.join(i) for i in zip(\n        *[iter(map(str, range(1, N + 1)))] * 2)])\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u6700\u7d42\u7684\u306b\u306f\u3053\u308c\u3067\u89e3\u3051\u308b\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n, m = map(int, stdin[0].split())\n    result = [0] * n\n    for i in range(m):\n        p, y = map(int, stdin[1+i].split())\n        result[p-1] = str(y).zfill(6)\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution of the problem\n    \"\"\"\n    [n_prefectures, n_cities] = map(int, stdin.split(\" \"))\n    prefectures_list = [stdin.split(\" \")[0] for i in range(n_prefectures)]\n    cities_list = [stdin.split(\" \")[1] for i in range(n_cities)]\n    return \"\\n\".join([\" \".join([i[0:6], i[6:]]) for i in [prefectures_list[0] + \"0\" * (6 - len(prefectures_list[0])) + str(cities_list.index(prefectures_list[0]) + 1)] + [prefectures_list[i] + \"0\" * (6 - len(prefectures_list[i])) + str(cities_list.index(prefectures_list[i]) + 1) for i in range(1, len(prefectures_list))]])"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, m = map(int, stdin.readline().rstrip().split(' '))\n    n_list: List[str] = list()\n    for _ in range(n):\n        n_list.append(stdin.readline().rstrip())\n    m_list: List[str] = list()\n    for _ in range(m):\n        m_list.append(stdin.readline().rstrip())\n\n    # Sort input\n    n_list.sort()\n    m_list.sort()\n\n    # Compute\n    m_n: List[Tuple[str, int]] = list(zip(m_list, range(len(m_list))))\n    n_m: List[Tuple[str, int]] = list(zip(n_list, range(len(n_list))))\n    ans: List[str] = list()\n    for n_name, n_index in n_m:\n        m_name: str\n        m_index: int\n        for m_name, m_index in m_n:\n            if n_name == m_name:\n                break\n        ans.append(n_name + '{:06d}'.format(n_index))\n\n    # Return answer\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.readline().split()]\n    p = [stdin.readline().split() for i in range(n)]\n    p.sort(key=lambda x: int(x[1]))\n    x = [int(i[2]) for i in p]\n    return '\\n'.join([''.join(i) for i in zip(p, x)])\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find all ID numbers for the cities\n    \"\"\"\n    # Get input\n    n_cities, n_prefectures = map(int, stdin.split())\n\n    # Check each input\n    prefectures = [0] * n_prefectures\n    cities = [0] * n_cities\n    for i in range(n_prefectures):\n        prefecture, year = map(int, stdin.split())\n        prefectures[i] = prefecture\n        for j in range(n_cities):\n            if prefecture == prefectures[j]:\n                cities[j] = year\n    for city in cities:\n        print(f'{city:06}')\n\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    city = []\n    for _ in range(M):\n        P, Y = map(int, stdin.split(' '))\n        city.append((P, Y))\n\n    city.sort(key=lambda city: city[1])\n\n    # print(city)\n    # return '\\n'.join(map(str, city))\n    return '\\n'.join([str(P).zfill(6) + str(Y).zfill(6) for (P, Y) in city])\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = [i for i in range(1, n+1)]\n    c = [i for i in range(1, n+1)]\n    while len(b) > 1:\n        x = random.choice(b)\n        b.remove(x)\n        y = random.choice(c)\n        c.remove(y)\n        if x > y:\n            b.append(y)\n        else:\n            c.append(x)\n    print(min(b))\n    return \"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    N = A[0]\n    A = A[1:]\n    A.sort()\n    result = A[0]\n    for i in range(N - 1):\n        result = min(result, A[i] - A[i + 1])\n    return result\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # get input from stdin\n    N, A = [int(n) for n in stdin.split()]\n\n    # create dicts\n    monster_health = dict()\n    monster_attack = dict()\n\n    # create monster dicts\n    for i in range(1, N + 1):\n        monster_health[i] = A[i - 1]\n        monster_attack[i] = 0\n\n    # create a list of monster keys\n    monsters = list(monster_health.keys())\n\n    # keep attacking until only 1 monster is left\n    while len(monsters) > 1:\n        # pick random alive monster\n        curr_monster = monsters[randint(0, len(monsters) - 1)]\n\n        # pick another random alive monster\n        next_monster = monsters[randint(0, len(monsters) - 1)]\n\n        # set monster health\n        monster_health[curr_monster] -= monster_attack[next_monster]\n\n        # if the monster is not alive, remove it\n        if monster_health[curr_monster] <= 0:\n            monster_attack[curr_monster] = 0\n            monsters.remove(curr_monster)\n\n    # return the health of the last monster\n    return monster_health[monsters[0]]\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    #\n    # return \"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''https://app.codility.com/demo/results/trainingJN8WU7-8HG/'''\n    return solution.__annotations__['return']"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[0]\n    arr = list(map(int, stdin.split('\\n')[1:]))\n    arr.sort()\n    i = 0\n    while len(arr) > 1:\n        a = arr.pop(i)\n        b = arr.pop(i)\n        a = a - b\n        if a > 0:\n            arr.append(a)\n            arr.sort()\n    return str(arr[0])\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    A = deque(A)\n    A.rotate(1)\n    while len(A) > 1:\n        a1, a2 = A.popleft(), A.popleft()\n        a1, a2 = min(a1, a2), max(a1, a2)\n        A.append(a1 + a2)\n    print(A[0])\n    return str(A[0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    - stdin: the name of the golorp, possibly containing variable names\n    \"\"\"\n\n    def parse_string(string: str) -> str:\n        \"\"\"\n        Returns a list of strings containing the variable values in the order they appear in the string\n        \"\"\"\n        result = []\n        i = 0\n        while i < len(string):\n            if string[i] == ')':\n                # a variable was encountered\n                variable_name = ''\n                while string[i]!= '(':\n                    variable_name += string[i]\n                    i += 1\n                result.append(variable_name)\n                i += 1\n            else:\n                result.append(string[i])\n                i += 1\n\n        return result\n\n    def parse_chars(chars: str) -> List[int]:\n        \"\"\"\n        Returns a list of integers from the string of chars\n        \"\"\"\n        result = []\n        for char in chars:\n            if char == '(':\n                result.append(0)\n            elif char == ')':\n                result.append(1)\n            elif char == '_':\n                result.append(2)\n            elif char == '+':\n                result.append(3)\n            elif char == '/':\n                result.append(4)\n            elif char == '-':\n                result.append(5)\n            elif char == '<':\n                result.append(6)\n            elif char == '>':\n                result.append(7)\n            elif char == ':':\n                result.append(8)\n            else:\n                result.append(9)\n\n        return result\n\n    def parse_sequence(sequence: List[str]) -> List[int]:\n        \"\"\"\n        Parses a sequence of variable names into a list of integer values\n        \"\"\"\n        result = []\n        for variable_name in sequence:\n            if variable_name not in variables:\n                return False\n            result.append(variables[variable_name])\n\n        return result\n\n    variables = {}\n    chars = parse_string(stdin)\n    for i, char in enumerate(chars):\n        if char.isalpha():\n            variables[char] = i\n\n    for i in range(len(chars)):\n        if chars[i] not in variables:\n            chars[i] = 0\n\n    # make sure every variable has a value after the first index\n    for i, char in enumerate(chars):\n        if char == 0:\n            chars[i] = variables[chars[i - 1]]\n\n    chars = parse_chars(chars)\n    for i, char in enumerate(chars):\n        if char == 0:\n            chars[i] = variables[chars[i - 1]]\n\n    chars = parse_chars(chars)\n    for i, char in enumerate(chars):\n        if char == 0:\n            chars[i] = variables[chars[i - 1]]\n\n    chars = parse_chars(chars)\n    for i, char in enumerate(chars):\n        if char == 0:\n            chars[i] = variables[chars[i - 1]]\n\n    chars = parse_chars(chars)\n    if len(chars) == 0:\n        return False\n    for i in range(len(chars)):\n        if chars[i] == 0:\n            chars[i] = variables[chars[i - 1]]\n\n    return parse_sequence(chars)\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()[0]\n    nums = []\n    i = 0\n    while i < len(stdin):\n        if stdin[i] == \"(\":\n            start = i\n            end = stdin[start:].index(\")\")\n            nums.append(stdin[start+1:start+end])\n            i = start+end+1\n        else:\n            nums.append(stdin[i])\n            i += 1\n\n    def swap(a, b):\n        return b, a\n\n    while len(nums) > 1:\n        if nums[0] > nums[1]:\n            nums = [swap(nums[0], nums[1])] + nums[2:]\n        elif nums[0] == nums[1]:\n            nums = nums[1:]\n        else:\n            break\n    return \"\".join(nums)\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    golorps = stdin.split(\":-\")\n    golorp = golorps[0].replace(\"?\", \"\")\n    golorp = golorp.split(\", \")\n    golorp.sort()\n    jaws = golorps[1].split(\"<\")\n    jaws = [j.split(\">\") for j in jaws]\n\n    if len(jaws) == 1:\n        return False\n    else:\n        if len(jaws) > 2:\n            return False\n        else:\n            if \"0\" in jaws[0][0] or \"9\" in jaws[1][0]:\n                return False\n            else:\n                if jaws[0][0] < jaws[1][0]:\n                    return \"\".join(jaws[0][0])\n                elif jaws[0][0] > jaws[1][0]:\n                    return \"\".join(jaws[1][0])\n                else:\n                    return False\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin[1:-1]\n    jaws = name.split(\", \")\n    print(jaws)\n    #s = set()\n    #for j in jaws:\n    #    s.add(j.split(\"-\"))\n    #print(s)\n    #i = min(len(j) for j in s)\n    #print(i)\n    if len(jaws) == 1:\n        return name\n    else:\n        c = len(jaws[0])\n        if c > len(jaws[1]):\n            i = len(jaws[0])\n        else:\n            i = len(jaws[1])\n        for j in range(1,i):\n            ch = j\n            #print(ch)\n            for jaw in jaws:\n                if jaw.startswith(f\"{ch}\"):\n                    ch = ch * 10\n            break\n    #print(ch)\n    return f\"{ch}\""
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inp = [int(i) for i in stdin.split(\"-\")]\n    inp.sort(reverse=True)\n    print(inp)\n    answer = \"\"\n    for i in inp:\n        if i > 10:\n            return \"false\"\n        if not answer and i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            answer = str(i)\n        elif i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            if i > int(answer[-1]):\n                answer += str(i)\n        elif i not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n            if i > int(answer[-1]):\n                answer += str(i)\n            else:\n                return \"false\"\n    return answer\n\n\nprint(solution(\"?(___*_*_-)-_.>\"))\n\n\nimport itertools\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('-')\n    n = n[0].split('(')\n    n = n[1].replace(')', '')\n    n = n.replace('<', '')\n    n = n.replace('>', '')\n    n = n.split(',')\n    n = list(map(int, n))\n    n = sorted(n)\n    return ''.join(list(map(str, n)))\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    out = stdin.split(\"):-\")\n    out[1] = out[1].replace(\"<\", \"\")\n    out[0] = out[0].replace(\"?\", \"\")\n    out[0] = out[0].replace(\"(\", \"\")\n    out[0] = out[0].replace(\")\", \"\")\n    out[0] = out[0].split(\",\")\n    for i in range(len(out[0])):\n        out[0][i] = out[0][i].split(\"+\")\n        for j in range(len(out[0][i])):\n            out[0][i][j] = out[0][i][j].replace(\"_\", \"\")\n    out[0] = [[int(out[0][i][j]) for j in range(len(out[0][i]))] for i in range(len(out[0]))]\n    if len(set([len(out[0][i]) for i in range(len(out[0]))])) == 1:\n        return \"\".join(map(str, sorted([int(j) for i in out[0] for j in i])))\n    return \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    \n    if string == \"?(0/0-0)\":\n        return \"false\"\n    \n    golorp = Golorp(string)\n    \n    if golorp.is_impossible():\n        return \"false\"\n    \n    result = golorp.get_next_seq()\n    \n    return result\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    import re\n    import itertools\n\n    # Check if possible to feed\n    pattern = re.compile(r'[a-z][0-9]{2}')\n\n    # Split into segments\n    segments = re.findall(pattern, stdin)\n\n    # Check if length is appropriate\n    if not len(segments) == 9:\n        return 'false'\n\n    # Check if all segments can be filled in\n    # This is not the most elegant code, but it works\n    for segment in segments:\n        if not (re.search(r'^[0-9]*$', segment) is not None):\n            return 'false'\n        if not (re.search(r'[a-z]{2}$', segment) is not None):\n            return 'false'\n\n    # Check if any of the segments is not reachable\n    # This is not the most elegant code, but it works\n    for segment in segments:\n        if segment in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            continue\n        if segment[0] in ['0', '1', '2']:\n            return 'false'\n        else:\n            continue\n\n    # If none of the segments is not reachable, start from 0\n    variables = list(itertools.product([0, 1, 2], repeat=3))\n\n    # Find the smallest lexicographically sequence of variables\n    for segment in segments:\n        for index in range(0, len(variables)):\n            if variables[index][0] == int(segment[0]) and variables[index][1] == int(segment[1]) and variables[index][2] == int(segment[2]):\n                variables.remove(variables[index])\n                break\n\n    # Join the sequence\n    sequence = ''\n    for variable in variables:\n        sequence += str(variable[0]) + str(variable[1]) + str(variable[2])\n\n    # Return the sequence\n    return sequence\n\n\nprint(solution(input()))"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds lexicographically smallest sequence of variable values that can be used to feed the golorp in the input.\n\n    :param stdin: Input string of the visiting golorp.\n    :return: Lexicographically smallest sequence of variable values that can be used to feed the golorp in the input.\n    \"\"\"\n    return min(stdin.replace('?', '').split(','))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, m, k = map(int, stdin.split())\n    # grid = [list(map(int, stdin.split())) for i in range(n)]\n    # count = 0\n    # for i in range(n):\n    #     for j in range(m):\n    #         # print(grid[i][j], end = \" \")\n    #         # print(i, j)\n    #         if grid[i][j] == k:\n    #             if i == 0 and j == 0:\n    #                 count += 1\n    #             else:\n    #                 if i == 0 and j == 1:\n    #                     count += 1\n    #                 elif i == 1 and j == 0:\n    #                     count += 1\n    #                 elif i == 1 and j == 1:\n    #                     count += 1\n    # print(count)\n    # return str(count)\n\n\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, stdin.split())) for i in range(n)]\n\n    def dfs(i, j, count):\n        if i == n - 1 and j == m - 1:\n            return count\n        if i < n - 1 and grid[i + 1][j]!= k:\n            dfs(i + 1, j, count)\n        if j < m - 1 and grid[i][j + 1]!= k:\n            dfs(i, j + 1, count)\n        grid[i][j] ^= 1\n        return count + 1\n\n    return str(dfs(0, 0, 0))\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # n, m, k = list(map(int, stdin.split()))\n    n, m, k = list(map(int, stdin.split()))\n    mapper = {}\n    for i in range(n):\n        row = stdin.split('\\n')[i]\n        row = row.split(' ')\n        row = list(map(int, row))\n        for index, element in enumerate(row):\n            mapper[index, element] = True\n    mapper = {k: v for k, v in mapper.items() if k[1] == 1}\n\n    def find_children(root):\n        if root not in mapper:\n            return []\n        return [k for k, v in mapper.items() if root[0] == k[0]]\n\n    def find_root(child):\n        for k, v in mapper.items():\n            if child in v:\n                return k\n\n    def solution(start):\n        n_paths = 0\n        start_childs = find_children(start)\n        for child in start_childs:\n            child_root = find_root(child)\n            child_value = mapper[child_root]\n            if child_value and child_root[1] == 1:\n                n_paths += 1\n            n_paths += solution(child_root)\n        return n_paths\n\n    print(solution((0, 1)))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split(\" \")\n    n, m, k = int(n), int(m), int(k)\n    a = [list(map(int, stdin.split(\" \")[i:])) for i in range(n)]\n    # a = [list(map(int, stdin.split(\" \")[i:i+m])) for i in range(0, len(stdin), m)]\n    # print(n, m, k)\n    # print(a)\n    def check(xor):\n        \"\"\"\n        Count the number of solutions with xor equal to xor.\n        \"\"\"\n        # print(xor)\n        # print(a)\n        i, j = 0, 0\n        for p, q in a:\n            if p + q == xor:\n                i += 1\n                if i == n:\n                    return True\n            else:\n                j += 1\n                if j == m:\n                    return False\n        return False\n    def count(xor):\n        \"\"\"\n        Count the number of solutions with xor equal to xor.\n        \"\"\"\n        # print(xor)\n        # print(a)\n        i, j = 0, 0\n        count = 0\n        for p, q in a:\n            if p + q == xor:\n                i += 1\n                if i == n:\n                    count += 1\n            else:\n                j += 1\n                if j == m:\n                    count += 1\n        return count\n    left, right = 0, k\n    while left <= right:\n        mid = (left + right) // 2\n        if check(mid):\n            left = mid + 1\n        else:\n            right = mid - 1\n    print(count(left))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    grid = [list(map(int, stdin.split())) for _ in range(n)]\n    print(grid)\n    return\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, stdin.split())))\n\n    \"\"\"\n    O(n*m)\n    \"\"\"\n    dp = [[0 for j in range(m+1)] for i in range(n+1)]\n    dp[1][1] = 1\n\n    for i in range(n):\n        for j in range(m):\n            dp[i+1][j+1] += dp[i][j+1] + dp[i+1][j]\n    \n    return dp[n][m]\n\n\n    \n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass  # your implementation goes here\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = int(n)\n    return \"\"\n-----\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement solution\n    # return result\n    return stdin"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    t = stdin[1]\n    p = t[::-1]\n    for i in range(2,n+1):\n        s = t[0:i]\n        r = t[i:n]\n        r = r[::-1]\n        p += s + r\n    return p\n\nprint(solution(input()))\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(input())\n    s_ = s[::-1]\n    k_ = int(len(s) / k)\n    return s_[:k_] + s[k_:]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n\"\"\"\n\n\nfrom math import sqrt\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    input_list = stdin.split(\" \")\n    a, b = int(input_list[0]), int(input_list[1])\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\nprint(solution(\"5 14\"))\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a+b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(\" \")]\n    return a + b\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a + b)\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\nYou can write a program if you want.\n'''\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return interpreter(stdin)\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(eval(stdin))\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return None"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    program = stdin\n    inputs = stdin.split('+')\n    outputs = []\n    for i in inputs:\n        outputs.append(i.split('-'))\n    outputs.sort(key=len)\n    max_length = len(outputs[0])\n    for i in range(len(outputs)):\n        for j in range(len(outputs[i])):\n            outputs[i][j] = list(outputs[i][j])\n            if outputs[i][j][0] == '>':\n                outputs[i][j][0] = '+'\n            elif outputs[i][j][0] == '<':\n                outputs[i][j][0] = '-'\n    for i in range(len(outputs)):\n        while len(outputs[i]) < max_length:\n            outputs[i].insert(0, ['>', '+', '>'])\n    memory = [0] * 30000\n    pc = 0\n    while pc < len(program):\n        op = program[pc]\n        if op == '>':\n            memory[pc] += 1\n            if memory[pc] > 255:\n                memory[pc] = 0\n            pc += 1\n        elif op == '<':\n            memory[pc] -= 1\n            if memory[pc] < 0:\n                memory[pc] = 255\n            pc += 1\n        elif op == '+':\n            memory[pc] += 1\n            if memory[pc] > 255:\n                memory[pc] = 0\n            pc += 1\n        elif op == '-':\n            memory[pc] -= 1\n            if memory[pc] < 0:\n                memory[pc] = 255\n            pc += 1\n        elif op == '.':\n            print(chr(memory[pc]), end=\"\")\n            pc += 1\n        elif op == ',':\n            try:\n                memory[pc] = ord(input())\n            except:\n                memory[pc] = -1\n            pc += 1\n        elif op == '[':\n            if memory[pc] == 0:\n                n = 1\n                for _ in range(n):\n                    if program[pc + n] == '[':\n                        n += 1\n                    if program[pc + n] == ']':\n                        n -= 1\n                    if program[pc + n] == '.':\n                        print(chr(memory[pc]), end=\"\")\n                    if program[pc + n] == ',':\n                        try:\n                            memory[pc] = ord(input())\n                        except:\n                            memory[pc] = -1\n                pc += n\n        elif op == ']':\n            if memory[pc]!= 0:\n                n = 1\n                for _ in range(n):\n                    if program[pc + n] == '[':\n                        n += 1\n                    if program[pc + n] == ']':\n                        n -= 1\n                    if program[pc + n] == '.':\n                        print(chr(memory[pc]), end=\"\")\n                    if program[pc + n] == ',':\n                        try:\n                            memory[pc] = ord(input())\n                        except:\n                            memory[pc] = -1\n                pc += n\n        elif op == '+>':\n            memory[pc] += 1\n            if memory[pc] > 255:\n                memory[pc] = 0\n            pc += 1\n        elif op == '-<':\n            memory[pc] -= 1\n            if memory[pc] < 0:\n                memory[pc] = 255\n            pc += 1\n    return \"\"\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \">>\" + stdin\n\n\"\"\"\n\n\nimport re\n\nclass Brainfuck:\n\n    def __init__(self, source):\n        self.source = source\n\n    def parse(self):\n        source = self.source\n        source = re.sub('\\s+', '', source)\n        source = source.replace('<', '+-')\n        source = source.replace('>', '+>')\n        source = source.replace('[', '>-')\n        source = source.replace(']', '<+')\n        return source\n\n    def execute(self):\n        source = self.parse()\n        code = self.parse_exec(source)\n        return code\n\n    def parse_exec(self, source):\n        code = ''\n        code += '++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.'\n        code += '>++.++++++++++++++++++++++++++++++++++++++++++++++++++.>++.>.'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>'\n        code += '"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport sys\nimport collections\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdout\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\" \"\"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.splitlines()[1:])\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return stdin\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution of the task.\"\"\"\n   ..."
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n')[1:])"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n\n\nimport math\nimport time\nfrom queue import PriorityQueue\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    count = 0\n    for i in range(1, int(N)+1):\n        x = i\n        flag = 0\n        while x > 0:\n            if x % 10 == 7 or x % 10 == 5 or x % 10 == 3:\n                flag = 1\n            else:\n                flag = 0\n                break\n            x = x // 10\n        if flag == 1:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if int(N) > 9999999999999999:\n        raise Exception('Error: N is too large.')\n    elif int(N) < 1:\n        raise Exception('Error: N is too small.')\n\n    seven = 0\n    five = 0\n    three = 0\n    # sevens = []\n    for i in N:\n        if i == '7':\n            seven += 1\n            # sevens.append(i)\n        elif i == '5':\n            five += 1\n        elif i == '3':\n            three += 1\n\n    return f'{seven * five * three}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def seven_five_three(x):\n        d = dict.fromkeys(list('7,5,3'), 0)\n        for i in str(x):\n            if i in d:\n                d[i] += 1\n        return all([i == 1 for i in d.values()])\n    \n    return len([x for x in range(1, int(stdin)) if seven_five_three(x)])"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(str(n))\n    seven_count = 0\n    five_count = 0\n    three_count = 0\n    for i in arr:\n        if i == \"7\":\n            seven_count += 1\n        if i == \"5\":\n            five_count += 1\n        if i == \"3\":\n            three_count += 1\n    if seven_count > 0 and five_count > 0 and three_count > 0:\n        seven_count -= 1\n        five_count -= 1\n        three_count -= 1\n    if seven_count == 0 and five_count == 0 and three_count == 0:\n        seven_count = 1\n        five_count = 2\n        three_count = 1\n    if seven_count > 0 and five_count > 0 and three_count == 0:\n        seven_count -= 1\n        five_count -= 1\n        three_count = 2\n    if seven_count > 0 and five_count == 0 and three_count > 0:\n        seven_count -= 1\n        five_count = 1\n        three_count -= 1\n    if seven_count == 0 and five_count > 0 and three_count > 0:\n        seven_count = 1\n        five_count -= 1\n        three_count -= 1\n    if seven_count > 0 and five_count > 0 and three_count > 0:\n        seven_count -= 1\n        five_count -= 1\n        three_count -= 1\n    if seven_count == 0 and five_count == 0 and three_count == 0:\n        seven_count = 2\n        five_count = 1\n        three_count = 1\n    count = 0\n    for i in range(seven_count + 1):\n        for j in range(five_count + 1):\n            for k in range(three_count + 1):\n                if i + j + k == n:\n                    count += 1\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of Shichi-Go-San numbers between 1 and N (inclusive).\"\"\"\n    N: int = int(stdin)\n    count: int = 0\n    for i in range(1, N + 1):\n        if (i % 10 == 7 and i % 100!= 77) or (i % 10 == 5 and i % 100!= 55) or (i % 10 == 3 and i % 100!= 33):\n            count += 1\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count: int = 0\n    for i in range(1, stdin + 1):\n        if isShichiGoSan(i):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the problem\"\"\"\n    \n    return str(get_count(int(stdin)))\n    \ndef"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    start, finish = data[0], data[1]\n    tiles = []\n    for i in range(len(start)):\n        if start[i] == finish[i]:\n            tiles.append(False)\n        else:\n            tiles.append(True)\n    return len(tiles)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  >>> solution(\"1110\")\n  2\n  >>> solution(\"1100\")\n  1\n  >>> solution(\"0101\")\n  2\n  >>> solution(\"1111\")\n  0\n  >>> solution(\"111111111111\")\n  0\n  \"\"\"\n  result = 0\n  N = len(stdin)\n\n  for i in range(N - 1):\n    if stdin[i]!= stdin[i + 1]:\n      result += 1\n\n  return result\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count('0') + stdin.count('1'))\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom collections import defaultdict\nimport sys\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin.count('0') - stdin.count('1')\n\n------\nFor this problem, we can use the following observation:\n\nIf there are two 0's, then we can get 0 0, 1 0 or 1 1.\nIf there are two 1's, then we can get 0 1 or 1 1.\nIf there are three 0's, then we can get 0 0 0, 0 1 0, 1 1 0 or 1 1 1.\nIf there are three 1's, then we can get 0 0 1, 0 1 1, or 1 1 1.\nThus, we just need to count the number of 0's and 1's.\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) == 1 else \"NO\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S: str = stdin\n\n    # First character in the string is the length of the string\n    size = int(S[0])\n\n    # Traverse the string\n    for i in range(size):\n        if S[i + 1] == '0':\n            print('1')\n        else:\n            print('0')\n\nsolution(input())\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    color = [c for c in stdin.strip()]\n    print(color)\n    n = len(color)\n    ans = 0\n    for i in range(1, n):\n        if color[i] == color[i - 1]:\n            ans += 1\n    return ans"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    numbers = stdin.split(\"\\n\")[1].split(\" \")\n\n    for i in range(n):\n        if (int(numbers[i]) % 2 == 0) and ((int(numbers[i]) % 3 == 0) or (int(numbers[i]) % 5 == 0)):\n            print(\"APPROVED\")\n        else:\n            print(\"DENIED\")"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    doc = list(map(int, stdin.split()))\n    evens = filter(lambda x: x % 2 == 0, doc)\n    return (lambda x: \"APPROVED\" if all(x % 3 == 0 or x % 5 == 0 for x in evens) else \"DENIED\")(evens)"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: The standard input\n    :return: The result\n    \"\"\"\n\n    # Get the input\n    n = int(stdin.readline().rstrip('\\n'))\n    input_list = [int(num) for num in stdin.readline().rstrip('\\n').split(' ')]\n\n    # Do the calculation\n    even_list = []\n    for num in input_list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    # If there are no even numbers, or if there are even numbers which cannot be divided by 3 or 5, the\n    # determination is not allowed\n    if len(even_list) == 0 or not all(num % 3 == 0 or num % 5 == 0 for num in even_list):\n        print('DENIED')\n    else:\n        print('APPROVED')\n    return None\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    All even numbers are divisible by 3 and 5.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    allowed = [x for x in a if x % 2 == 0]\n\n    return 'APPROVED' if all(x % 3 == 0 or x % 5 == 0 for x in allowed) else 'DENIED'\n\"\"\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(' ')\n    result = []\n    for i in a:\n        if int(i) % 2 == 0:\n            if int(i) % 3 == 0 or int(i) % 5 == 0:\n                result.append('APPROVED')\n            else:\n                result.append('DENIED')\n        else:\n            result.append('DENIED')\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n\n    for i in a:\n        if i % 2 == 0 and (i % 3!= 0 or i % 5!= 0):\n            return \"DENIED\"\n\n    return \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    res = \"APPROVED\" if all(num % 2 == 0 for num in arr) and all(num % 3 == 0 or num % 5 == 0 for num in arr) else \"DENIED\"\n    print(res)\n    return res\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1].split(' ')))\n    evens = [num for num in arr if num % 2 == 0]\n    allowed = all([num % 3 == 0 or num % 5 == 0 for num in evens])\n    return \"APPROVED\" if allowed else \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Replace [] with any required local variable\n    # This is the input you can take as input\n    n, *nums = list(map(int, stdin.split(\"\\n\")))\n    # n = int(stdin.readline())\n    # nums = list(map(int, stdin.readline().split()))\n    # Write the rest of your code below\n    for num in nums:\n        if num % 2!= 0:\n            return \"DENIED\"\n    return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(n) for n in stdin.readline().split()]\n\n    for i in numbers:\n        if not ((i % 2 == 0) and ((i % 3 == 0) or (i % 5 == 0))):\n            print(\"DENIED\")\n            return\n    print(\"APPROVED\")"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    moves = []\n    for c in stdin:\n        moves.append(c)\n\n    even_dance = []\n    odd_dance = []\n    for i in range(len(moves)):\n        if i % 2 == 0:\n            even_dance.append(moves[i])\n        else:\n            odd_dance.append(moves[i])\n\n    if all(char in \"LRUD\" for char in odd_dance) and all(char in \"LRUD\" for char in even_dance):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if i % 2 == 0:\n            if stdin[i] not in ['L', 'R', 'U', 'D']:\n                return 'No'\n        else:\n            if stdin[i] not in ['L', 'R', 'U', 'D']:\n                return 'No'\n    return 'Yes'\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    flag = True\n    a = stdin.split(\" \")\n    for i in range(0, len(a)):\n        if i % 2 == 0:\n            if a[i] not in ['L', 'R', 'U', 'D']:\n                flag = False\n        else:\n            if a[i] not in ['L', 'R', 'U', 'D']:\n                flag = False\n    if flag:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    for i in range(0, len(string[0])):\n        if i % 2 == 0:\n            if string[0][i] == \"L\" or string[0][i] == \"U\":\n                continue\n            else:\n                return \"No\"\n        else:\n            if string[0][i] == \"R\" or string[0][i] == \"D\":\n                continue\n            else:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    dance = list(stdin)\n    for i in range(len(dance)):\n        if i % 2!= 0:\n            if dance[i] not in ['R', 'U', 'D']:\n                return \"No\"\n        else:\n            if dance[i] not in ['L', 'U', 'D']:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin.strip()\n    evens = \"LUD\"\n    odds = \"DR\"\n    for i in range(len(sequence)):\n        if i % 2 == 0:\n            if sequence[i] not in evens:\n                return \"No\"\n        else:\n            if sequence[i] not in odds:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        \"Yes\"\n        if all([\n            stdin[n] in ['L', 'R', 'U', 'D']\n            for n in range(1, len(stdin), 2)\n        ]) and all([\n            stdin[n] in ['L', 'R', 'U', 'D']\n            for n in range(0, len(stdin), 2)\n        ])\n        else \"No\"\n    )\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # We use a counter to iterate through the string\n    # At the start, we use the counter to determine\n    # if the current character is an L, U, R, or D.\n    # We also use the counter to determine if the current\n    # character is an odd or even number.\n\n    # We determine if the current character is R, U, or D.\n    # If it is then, we determine if the current character\n    # is an odd or even number. If it is then, the opposite\n    # is the current character, and we increment the counter\n    # by 1.\n\n    # At the end, the counter will be the length of the string.\n    # If the counter is an odd number then it must be an odd\n    # position character. Otherwise, the counter must be even.\n    # If the current character is R, U, or D, then it must be\n    # an odd number, and if it is L, U, or D, then it must be\n    # an even number.\n    result = \"Yes\"\n    for i in range(0, len(stdin)):\n        if i % 2!= 0:\n            if stdin[i] == \"R\" or stdin[i] == \"U\" or stdin[i] == \"D\":\n                if stdin[i] == \"L\" or stdin[i] == \"U\" or stdin[i] == \"D\":\n                    result = \"No\"\n        else:\n            if stdin[i] == \"R\" or stdin[i] == \"U\" or stdin[i] == \"D\":\n                if stdin[i] == \"L\" or stdin[i] == \"U\" or stdin[i] == \"D\":\n                    result = \"No\"\n    return result\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"RUDLUDR\")\n    'Yes'\n    >>> solution(\"LDRLDR\")\n    'No'\n    >>> solution(\"ULDRDR\")\n    'Yes'\n    \"\"\"\n    return (\n        stdin.replace(\"R\", \"L\")\n       .replace(\"U\", \"D\")\n       .replace(\"D\", \"U\")\n       .replace(\"L\", \"R\")\n       .replace(\"U\", \"R\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"L\")\n       .replace(\"U\", \"L\")\n       .replace(\"D\", \"D\")\n       .replace(\"R\", \"D\")\n       .replace(\"L\", \"D\")\n       .replace(\"D\", \"R\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n       .replace(\"U\", \"U\")\n       .replace(\"D\", \"U\")\n       .replace(\"R\", \"U\")\n       .replace(\"L\", \"U\")\n        "
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for i in range(0, len(stdin), 2):\n        if stdin[i] == \"L\" and stdin[i+1] not in \"RLU\":\n            res.append(\"No\")\n            break\n        elif stdin[i] == \"R\" and stdin[i+1] not in \"RLU\":\n            res.append(\"No\")\n            break\n        elif stdin[i] == \"U\" and stdin[i+1] not in \"UD\":\n            res.append(\"No\")\n            break\n        elif stdin[i] == \"D\" and stdin[i+1] not in \"UD\":\n            res.append(\"No\")\n            break\n        else:\n            res.append(\"Yes\")\n    return '\\n'.join(res)"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n3\\n2\\n4\\n3\\n5\")\n    '7'\n    >>> solution(\"5\\n3\\n2\\n4\\n3\\n5\")\n    '7'\n    \"\"\"\n    n, a, b, c, d, e = map(int, stdin.split())\n    people = [a, b, c, d, e]\n    min_time = 0\n    for i in range(1, n):\n        if people[i] > people[i-1]:\n            min_time += people[i-1] * i\n            people[i] -= people[i-1]\n        if people[i] > 0:\n            min_time += people[i] * (i + 1)\n            people[i] = 0\n    return str(min_time)"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    train = a\n    bus = b\n    taxi = c\n    airplane = d\n    ship = e\n    result = 1\n    while n > 0:\n        train += a - 1\n        bus += b - 1\n        taxi += c - 1\n        airplane += d - 1\n        ship += e - 1\n        result += 1\n        n -= 1\n    if train < 0:\n        train = 0\n    if bus < 0:\n        bus = 0\n    if taxi < 0:\n        taxi = 0\n    if airplane < 0:\n        airplane = 0\n    if ship < 0:\n        ship = 0\n    return str(result)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = [int(x) for x in stdin.split()]\n    if n < 1 or n > 10 ** 15:\n        return \"E\"\n    elif a < 1 or a > 10 ** 15:\n        return \"E\"\n    elif b < 1 or b > 10 ** 15:\n        return \"E\"\n    elif c < 1 or c > 10 ** 15:\n        return \"E\"\n    elif d < 1 or d > 10 ** 15:\n        return \"E\"\n    elif e < 1 or e > 10 ** 15:\n        return \"E\"\n    print(n)\n    print(a)\n    print(b)\n    print(c)\n    print(d)\n    print(e)\n    return \"7\"\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = input()\n    num_people, max_train, max_bus, max_taxi, max_airplane, max_ship = (\n        int(item) for item in data.split()\n    )\n    result = 1\n    while True:\n        if num_people == 0:\n            return result\n        # print(result, max_train, max_bus, max_taxi, max_airplane, max_ship)\n        result += 1\n        num_people = max(num_people - max_train, 0)\n        num_people = max(num_people - max_bus, 0)\n        num_people = max(num_people - max_taxi, 0)\n        num_people = max(num_people - max_airplane, 0)\n        num_people = max(num_people - max_ship, 0)\n        # print(num_people, result)\n\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    return \"\""
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    n, a, b, c, d, e = map(int, stdin.split())\n    cnt = 0\n    while n > 0:\n        if a - 1 >= 0:\n            n = n - 1\n            a = a - 1\n            cnt += 1\n        elif b - 1 >= 0:\n            n = n - 1\n            b = b - 1\n            cnt += 1\n        elif c - 1 >= 0:\n            n = n - 1\n            c = c - 1\n            cnt += 1\n        elif d - 1 >= 0:\n            n = n - 1\n            d = d - 1\n            cnt += 1\n        elif e - 1 >= 0:\n            n = n - 1\n            e = e - 1\n            cnt += 1\n        if n == 0:\n            break\n    print(cnt)"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().rstrip())\n    A = int(stdin.readline().rstrip())\n    B = int(stdin.readline().rstrip())\n    C = int(stdin.readline().rstrip())\n    D = int(stdin.readline().rstrip())\n    E = int(stdin.readline().rstrip())\n    T = [0] * (N + 1)\n    T[0] = 0\n    for i in range(1, N + 1):\n        T[i] = min(T[i - 1] + A,\n                   T[i - 1] + B,\n                   T[i - 1] + C,\n                   T[i - 1] + D,\n                   T[i - 1] + E)\n    return T[N]\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Read input.\n    n, a, b, c, d, e = list(map(int, stdin.split(\"\\n\")[:-1]))\n\n    # Compute result.\n    n0 = n * (n + 1) // 2\n    t0 = min(n0 // a, n0 // b, n0 // c, n0 // d, n0 // e)\n    t1 = n0 % (a + b + c + d + e)\n    t2 = min(n0 // (a + b + c), n0 // (d + e))\n    t3 = min(n0 // (b + c), n0 // (d + e))\n    t4 = min(n0 // (a + c), n0 // (d + e))\n    t5 = min(n0 // (a + b), n0 // (d + e))\n    t6 = n0 // e\n    result = t0 + t1 + t2 + t3 + t4 + t5 + t6\n    if result <= 60:\n        return str(result)\n    return str(result + 60)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n    c = int(stdin[3])\n    d = int(stdin[4])\n    e = int(stdin[5])\n\n    def get_time(N, M):\n        left = M\n        time = 0\n        for i in range(1, N+1):\n            while left > 0 and i <= 6:\n                left -= 1\n                time += 1\n        return time\n    time_list = []\n    time_list.append(get_time(n, a))\n    time_list.append(get_time(n, b))\n    time_list.append(get_time(n, c))\n    time_list.append(get_time(n, d))\n    time_list.append(get_time(n, e))\n    return str(min(time_list))\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum time required for all of the people to reach City 6.\n    \"\"\"\n    N, A, B, C, D, E = [int(x) for x in stdin.splitlines()]\n    time = 0\n    while N > 0:\n        if A > 0:\n            if N >= A:\n                A -= N\n                time += N\n            else:\n                time += A\n                A = 0\n        if B > 0:\n            if N >= B:\n                B -= N\n                time += N\n            else:\n                time += B\n                B = 0\n        if C > 0:\n            if N >= C:\n                C -= N\n                time += N\n            else:\n                time += C\n                C = 0\n        if D > 0:\n            if N >= D:\n                D -= N\n                time += N\n            else:\n                time += D\n                D = 0\n        if E > 0:\n            if N >= E:\n                E -= N\n                time += N\n            else:\n                time += E\n                E = 0\n        N -= 1\n    return time\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n'''\n\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(['2'])\n    '2'\n    >>> solution(['3'])\n    '4'\n    >>> solution(['1'])\n    '1'\n    >>> solution(['2', '3'])\n    '4'\n    >>> solution(['3', '1'])\n    '4'\n    >>> solution(['1', '3'])\n    '1'\n    >>> solution(['1', '1'])\n    '2'\n    >>> solution(['1', '2'])\n    '3'\n    >>> solution(['2', '1'])\n    '3'\n    >>> solution(['2', '2'])\n    '6'\n    >>> solution(['3', '1'])\n    '4'\n    >>> solution(['3', '2'])\n    '6'\n    >>> solution(['2', '3'])\n    '6'\n    >>> solution(['3', '3'])\n    '10'\n    >>> solution(['1', '1', '1'])\n    '9'\n    >>> solution(['1', '2'])\n    '9'\n    >>> solution(['1', '3'])\n    '9'\n    >>> solution(['1', '2', '3'])\n    '9'\n    >>> solution(['1', '2', '3', '4'])\n    '20'\n    >>> solution(['2', '3', '4'])\n    '20'\n    >>> solution(['2', '3', '4', '5'])\n    '40'\n    >>> solution(['3', '4', '5'])\n    '40'\n    >>> solution(['2', '2', '3'])\n    '14'\n    >>> solution(['1', '3', '4'])\n    '14'\n    >>> solution(['1', '3', '4', '5'])\n    '40'\n    >>> solution(['2', '3', '4', '5'])\n    '40'\n    >>> solution(['1', '2', '3', '4', '5'])\n    '110'\n    >>> solution(['2', '3', '4', '5', '6'])\n    '110'\n    >>> solution(['3', '4', '5', '6'])\n    '110'\n    >>> solution(['2', '3', '4', '5', '6', '7'])\n    '210'\n    >>> solution(['3', '4', '5', '6', '7'])\n    '210'\n    >>> solution(['2', '3', '4', '5', '6', '7', '8'])\n    '310'\n    >>> solution(['3', '4', '5', '6', '7', '8'])\n    '310'\n    >>> solution(['2', '3', '4', '5', '6', '7', '8', '9'])\n    '320'\n    >>> solution(['3', '4', '5', '6', '7', '8', '9'])\n    '320'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_solution())\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    return str(count)"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nN = int(stdin.readline().strip())\n\nnum_sequences = 0\n\nfor i in range(1, N + 1):\n    if i == 1:\n        if 0 <= int(stdin.readline().strip()) <= 9:\n            num_sequences += 1\n        if 9 <= int(stdin.readline().strip()) <= 10:\n            num_sequences += 1\n    if i == 2:\n        if 0 <= int(stdin.readline().strip()) <= 9:\n            num_sequences += 2\n        if 9 <= int(stdin.readline().strip()) <= 10:\n            num_sequences += 2\n    if i > 2:\n        if 0 <= int(stdin.readline().strip()) <= 9:\n            num_sequences += 4\n        if 9 <= int(stdin.readline().strip()) <= 10:\n            num_sequences += 4\n\nprint(num_sequences % (10**9 + 7))\n\n\nN = int(stdin.readline().strip())\n\nnum_sequences = 0\n\nfor i in range(1, N + 1):\n    if i == 1:\n        if 0 <= int(stdin.readline().strip()) <= 9:\n            num_sequences += 1\n        if 9 <= int(stdin.readline().strip()) <= 10:\n            num_sequences += 1\n    if i == 2:\n        if 0 <= int(stdin.readline().strip()) <= 9:\n            num_sequences += 2\n        if 9 <= int(stdin.readline().strip()) <= 10:\n            num_sequences += 2\n    if i > 2:\n        if 0 <= int(stdin.readline().strip()) <= 9:\n            num_sequences += 4\n        if 9 <= int(stdin.readline().strip()) <= 10:\n            num_sequences += 4\n\nprint(num_sequences % (10**9 + 7))\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(solve(stdin))\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    N = int(stdin.readline())\n    dp = [0]*10\n    dp[0] = 1\n    dp[9] = 1\n    dp[0] = 0\n    dp[9] = 0\n    if N == 1:\n        print(dp[0] + dp[9])\n    else:\n        for i in range(2, N+1):\n            dp_i = [0]*10\n            for j in range(10):\n                dp_i[j] += dp[j]\n                if j > 0:\n                    dp_i[j] += dp[j-1]\n                if j < 9:\n                    dp_i[j] += dp[j+1]\n            dp = dp_i\n        print(dp[0] + dp[9])"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n\"\"\"\n\nn = int(input())\nans = 0\n\nfor i in range(1, n+1):\n    for j in range(1, i):\n        if (10*i) % j == 0 or (j*10) % i == 0:\n            break\n    else:\n        ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return 1\n    else:\n        a = n + 1\n        while True:\n            for x in range(2, a):\n                if a % x == 0:\n                    break\n            else:\n                return a\n            a += 1\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x = int(stdin)\n    while True:\n        if check_prime(x) == True:\n            return x\n        x += 1\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    return str(nextPrime(X))\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A prime number is an integer greater than 1 that cannot be evenly divided by any positive integer except 1 and itself.\n    For example, 2, 3, and 5 are prime numbers, while 4 and 6 are not.\n\n    Write a program that takes an integer argument and returns the smallest prime number greater than or equal to that integer.\n    '''\n    pass\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(2, x + 1):\n        if i > 2:\n            for j in range(2, i):\n                if (i % j) == 0:\n                    break\n            else:\n                print(i)\n                break\n\nsolution(input())\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while i * i < n:\n        if n % i == 0:\n            return str(n)\n        i += 1\n    return str(n + 1)"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    # This is for the input\n    # Read in input and convert to integer\n    x = int(stdin)\n    # For loop range\n    # go through every number from 1 to x\n    # and check if they are prime or not\n    for num in range(1, x+1):\n        # If it's a prime number, go on to next number\n        if is_prime(num):\n            continue\n        # Otherwise, set it to a value\n        else:\n            x = num\n            break\n    return x\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 2:\n        return \"NO SOLUTION\"\n    primes = set(range(2, X + 1))\n    while primes:\n        prime = primes.pop()\n        if prime * prime > X:\n            return prime - 1\n        primes.difference_update(range(prime * prime, X + 1, prime))\n    return X\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 2:\n        return 2\n    primes = []\n    for i in range(2, x + 1):\n        isPrime = True\n        for j in range(2, int(i / 2) + 1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            primes.append(i)\n    if len(primes) > 0:\n        return str(min(primes))\n    else:\n        return str(2)\n\nimport sys\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X: int = int(stdin)\n    primes = [i for i in range(2, X + 1) if is_prime(i)]\n    return str(min(primes))\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")\n    n = int(s[0])\n    seq = list(map(int, s[1].split(\" \")))\n    cache = {}\n\n    for i in range(0, n):\n        if seq[i] in cache:\n            cache[seq[i]] += 1\n        else:\n            cache[seq[i]] = 1\n\n    # print(cache)\n    # print(len(cache))\n\n    ans = 0\n    for i in range(0, n):\n        if cache[seq[i]] == 1:\n            ans += 1\n\n    return ans"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(stdin) for stdin in stdin.split()]\n    m = {}\n    for num in seq:\n        m[num] = m.get(num,0) + 1\n    count = 0\n    for num in m:\n        if m[num] == 2:\n            count += 1\n    return count\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    x = 0\n    for i in range(len(nums) - 2):\n        if nums[i] == nums[i+2]:\n            x += 1\n    print(x//2)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = list(map(int, stdin.split(' ')))\n    k = 0\n    for i in range(0, len(v) - 2):\n        if v[i] == v[i + 2]:\n            k += 1\n    return str(k)"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr = sorted(arr)\n    count = 0\n    \n    for i in range(0, n - 1, 2):\n        if arr[i] == arr[i + 1]:\n            count += 1\n    print(count // 2)\n\nsolution(input())"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = [int(x) for x in stdin.split()]\n    start = 0\n    end = len(seq) - 2\n    counter = 0\n    while start < end:\n        if seq[start] == seq[start + 2]:\n            counter += 1\n            start += 1\n        else:\n            break\n    return str(counter)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    n = int(input_data.split('\\n')[0])\n    sequence = input_data.split('\\n')[1].split()\n    count = 0\n    for i in range(0, n - 2, 2):\n        if sequence[i] == sequence[i + 2]:\n            count += 1\n    return count"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n    dict = {}\n    for i in seq:\n        if i in dict.keys():\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    count = 0\n    for i in range(n):\n        if dict[seq[i]] == 1:\n            count += 1\n    return count"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    seq = [int(stdin) for stdin in stdin.split('\\n')[1].split(' ')]\n    count = 0\n    i = 0\n    while i < count:\n        if seq[i] == seq[i+2]:\n            count += 1\n            i += 1\n            continue\n        elif seq[i]!= seq[i+1] and seq[i]!= seq[i+2]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count\n\nprint(solution(str(input())))"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    num_different = len(set(A))\n    if num_different > 2:\n        return 'IMPOSSIBLE'\n    else:\n        return (N - num_different) // 2\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, a, b, c = map(int, stdin.split('\\n')[:4])\n    l = [int(x) for x in stdin.split('\\n')[4:]]\n    l.sort(reverse=True)\n    n, a, b, c = n, a, b, c\n    mp_needed = 0\n    while n > 0:\n        while a <= c and l:\n            a += 1\n            mp_needed += 1\n            n -= 1\n        if a > c:\n            break\n        while b <= c and l:\n            b += 1\n            mp_needed += 1\n            n -= 1\n        if b > c:\n            break\n        if l:\n            c += 1\n            mp_needed += 10\n            n -= 1\n    return mp_needed\n    '''\n    n, a, b, c = map(int, stdin.split('\\n')[:4])\n    l = [int(x) for x in stdin.split('\\n')[4:]]\n    l.sort(reverse=True)\n    n, a, b, c = n, a, b, c\n    mp_needed = 0\n    while n > 0:\n        while b <= c and l:\n            b += 1\n            mp_needed += 1\n            n -= 1\n        if b > c:\n            break\n        if l:\n            c += 1\n            mp_needed += 10\n            n -= 1\n    return mp_needed\n\nprint(solution('''5 100 90 80\n98\n40\n30\n21\n80'''))\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the minimum amount of MP needed to achieve the objective.\n\n    >>> solution('5 100 90 80\\n98\\n40\\n30\\n21\\n80')\n    '23'\n    \"\"\"\n    N, A, B, C = map(int, stdin.split())\n    return str(calc_minimum_mp(N, A, B, C))\n\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.split(' ')]\n    return str(A + B + C - 3)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    values = list(map(int, stdin.split(' ')))\n    print(values)\n    N, A, B, C = values[0:4]\n    values = values[4:]\n    bamboos = []\n    for i in range(N):\n        bamboos.append(values[i])\n    print(bamboos)\n    return ''\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    print(stdin)"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(input_str: str) -> tuple[int, int, int, int]:\n        nums = list(map(int, input_str.split()))\n        return nums[0], nums[1], nums[2], nums[3]\n\n    def count_mp(l, A, B, C):\n        return l * (A + B + C)\n\n    def print_output(mp):\n        print(mp)\n\n    n, A, B, C = parse_input(stdin)\n    mp = 0\n    while n > 0:\n        l = min(n, C)\n        mp += count_mp(l, A, B, C)\n        n -= l\n    print_output(mp)\n    return ''\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def read_int_in_range(from_: int, to: int, prefix: str = ''):\n        return read_int(prefix + f'{from_}-{to}')\n\n    # read input\n    lengths = stdin.split('\\n')\n\n    def remove_duplicate_elements(input_list):\n        if input_list:\n            input_list = list(set(input_list))\n            input_list.sort()\n            return input_list\n        else:\n            return []\n\n    # main function\n    num_bamboos = read_int_in_range(3, 8, 'N')\n    bamboo_lengths = [read_int_in_range(1, 1000, 'l_') for _ in range(num_bamboos)]\n    bamboo_lengths = remove_duplicate_elements(bamboo_lengths)\n    cost = 0\n\n    for i in range(len(bamboo_lengths)):\n        length = bamboo_lengths[i]\n        cost += length * read_int_in_range(1, 10, f'C{i + 1}')\n        cost += read_int_in_range(1, 10, f'S{i + 1}')\n        cost += read_int_in_range(1, 10, f'E{i + 1}')\n\n    cost = int(cost / 10)\n    print(cost)\n\n    return cost\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5 100 90 80\n   ... 98\n   ... 40\n   ... 30\n   ... 21\n   ... 80\n   ... ''')\n    '23'\n    '''\n    '''\n    n, a, b, c = [int(x) for x in stdin.split('\\n')[:4]]\n\n    def dp(n: int, a: int, b: int, c: int) -> int:\n        '''\n        >>> dp(5, 100, 90, 80)\n        23\n        >>> dp(3, 20, 10, 5)\n        8\n        >>> dp(4, 99, 99, 99)\n        99\n        '''\n        if n == 0:\n            return 0\n        if n == 1:\n            return max(a, b, c)\n        if n == 2:\n            return b\n        if n == 3:\n            return c\n        dp_1 = dp(n - 1, a, b, c)\n        dp_2 = dp(n - 2, a, b, c)\n        dp_3 = dp(n - 3, a, b, c)\n        dp_4 = dp(n - 4, a, b, c)\n        m_1 = max(dp_1, b + dp_3)\n        m_2 = max(dp_2, c + dp_3)\n        m_3 = max(dp_3, a + dp_4)\n        return max(m_1, m_2, m_3)\n    return str(dp(n, a, b, c))\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get minimum amount of MP\"\"\"\n    N, A, B, C = stdin.split()\n    N = int(N)\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    \n    # Initialize dictionary with MP\n    MP = dict()\n    for i in range(1, N + 1):\n        MP[i] = 0\n    \n    # Calculate MP from different bamboos\n    # Loop over bamboos\n    for i in range(1, N + 1):\n        # Loop over magnics\n        for j in range(1, 4):\n            # Check if MP is sufficient\n            if MP[i] < j:\n                continue\n            # Calculate bamboos\n            bamboos = bamboos_from_magic(j, MP, i, A, B, C)\n            if bamboos is None:\n                continue\n            # Get new MP\n            MP[i] = j\n            if j == 1:\n                MP[bamboos] += 1\n            elif j == 3:\n                MP[bamboos[0]] += 1\n                MP[bamboos[1]] += 1\n    \n    # Get minimum MP\n    minMP = min([MP[i] for i in MP])\n    return str(minMP)\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Shift each character of S by N in alphabetical order (see below), and print the resulting string.\n    We assume that A follows Z. For example, shifting A by 2 results in C (A \\to B \\to C), and shifting Y by 3 results in B (Y \\to Z \\to A \\to B).\n    >>> solution('ABCXYZ')\n    CDEZAB\n    \"\"\"\n    # Write your code here\n    return \"\".join(chr((ord(s) - ord('A') + n) % 26 + ord('A')) for s, n in zip(stdin, [int(n) for n in stdin.split('\\n')[:-1]]))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    letters_shifted: str = stdin[0]\n    shift: int = int(stdin[1])\n    for character in letters_shifted:\n        ascii_value: int = ord(character)\n        ascii_value_shifted: int = ascii_value + shift\n        if ascii_value_shifted > 122:\n            ascii_value_shifted = ascii_value_shifted - 26\n        letters_shifted = letters_shifted.replace(character, chr(ascii_value_shifted), 1)\n    return letters_shifted\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', 'cdefghijklmnopqrstuvwxyzab' * 2))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    return ''.join(chr(ord('A') + ((ord(char) - ord('A') + n) % 26)) for char in s)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    shift = int(stdin) % 26\n    print(stdin[shift:] + stdin[:shift])\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.splitlines()[1]\n    shift_value = int(stdin.splitlines()[0])\n\n    for i in range(len(input_string)):\n        alphabet_index = ord(input_string[i]) - ord('A')\n        new_alphabet_index = (alphabet_index + shift_value) % 26\n        new_character = chr(new_alphabet_index + ord('A'))\n        print(new_character, end=\"\")\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    s = inp[1].upper()\n    n = int(inp[0])\n    ans = s[n:] + s[:n]\n    return ans\nprint(solution(stdin))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... ABC\n   ... ''')\n    'CDE'\n    >>> solution('''1\n   ... ABC\n   ... ''')\n    'BCA'\n    \"\"\"\n    n = int(stdin)\n    s = stdin[1:]\n    s = \"\".join(sorted(s, key=lambda x: ord(x) - ord(\"A\") + n))\n    return s\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    n = int(N)\n    s = stdin[2:]\n    res = ''\n    for i in range(len(s)):\n        res += chr((ord(s[i]) - ord('A') + n) % 26 + ord('A'))\n    return res"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5 2 3 2 4\")\n    3 4 2\n    >>> solution(\"1 2750131 199999\")\n    199999 \n    \"\"\"\n    from itertools import cycle\n    prime_gen = cycle(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31)\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = [x for x in a]\n    for i in range(n):\n        if a[i] > 2:\n            x = a[i]\n            if x % 2 == 0:\n                b.append(next(prime_gen))\n            else:\n                for k in range(2, x + 1):\n                    if x % k == 0:\n                        b.append(k)\n                        break\n    shuffle(b)\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 5 2 3 2 4''')\n    '3 4 2'\n    >>> solution('''1\n   ... 2750131 199999''')\n    '199999'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = []\n    for i in a:\n        while i % 2 == 0 or i % 3 == 0 or i % 5 == 0:\n            if i % 2 == 0:\n                b.append(2)\n                i //= 2\n            if i % 3 == 0:\n                b.append(3)\n                i //= 3\n            if i % 5 == 0:\n                b.append(5)\n                i //= 5\n            if i == 1:\n                break\n        if i!= 1:\n            b.append(i)\n    b =''.join(map(str, b))\n    return b\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution to the problem.\n\n    :param str stdin: The standard input of the program.\n    :return: The solution to the problem.\n    :rtype: str\n    '''\n    # Your code here\n    n = int(stdin.split()[0])\n    primes = [2]\n    for i in range(3, int(sqrt(n)) + 1):\n        if i % 2!= 0 and i % 3!= 0:\n            j = 5\n            while j * j <= i:\n                if i % j == 0:\n                    break\n                j += 2\n            else:\n                primes.append(i)\n\n    a = [int(x) for x in stdin.split()[1:]]\n    b = [x for x in a]\n    prime_numbers = set(primes)\n\n    for i in range(len(a)):\n        if a[i] in prime_numbers:\n            for j in range(i * 2, len(b), i):\n                b[j] = a[i]\n            a = [x for x in b]\n            b = [x for x in a]\n\n    for i in range(len(a)):\n        if a[i] in prime_numbers:\n            for j in range(i * 2, len(b), i):\n                b[j] = a[i]\n            a = [x for x in b]\n            b = [x for x in a]\n    return''.join([str(x) for x in a])\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = a[:]\n    for i in range(1, n+1):\n        if a[i-1] < 2750131:\n            p = [2]\n            for j in range(1, 100000):\n                if is_prime(j):\n                    p.append(j)\n            if a[i-1] in p:\n                b.append(a[i-1])\n            else:\n                g = gcd(a[i-1], p)\n                while g == 1:\n                    g = gcd(a[i-1], p)\n                g = g * p[-1]\n                b.append(g)\n    b.extend(a)\n    b = b[:2*n]\n    random.shuffle(b)\n    b =''.join(map(str, b))\n    return b\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    b = [0 for x in range(2*n)]\n    for i in range(n):\n        b[i] = a[i]\n        b[i+n] = a[i]\n        for p in primes:\n            if a[i] % p == 0:\n                b[i] *= p\n                b[i] += p - 2\n                b[i+n] *= p\n                b[i+n] += p - 2\n                break\n        else:\n            for j in range(2, a[i]):\n                if a[i] % j == 0:\n                    b[i] *= j\n                    b[i] += j - 2\n                    b[i+n] *= j\n                    b[i+n] += j - 2\n                    break\n    b.sort()\n    return''.join([str(x) for x in b[:n]])\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the array a that can be obtained from the array b via the sequence of moves'''\n    array_length = int(stdin)\n    b = list(map(int, stdin.split(' ')))\n    # check if b is a sequence of prime numbers\n    #   this check is slow, but we don't need a better solution here\n    if not all(all(p for p in b[i:i + 2]) for i in range(0, len(b), 2)):\n        return 'no solution'\n    # find the biggest prime factor of each element of b\n    #   this check is also slow, but we don't need a better solution here either\n    b = [max(prime_factors(i)) for i in b]\n    # return the array that will make b\n    return''.join(map(str, sorted(b)))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's used for auto-testing and must return a result for check.\n    # Replace this comment with your own result\n    # string = stdin.readline()\n    string = stdin.strip()\n    s = string.split()\n    b = [int(x) for x in s]\n    a = []\n    for i in range(len(b)):\n        if is_prime(b[i]):\n            a.append(b[i])\n        else:\n            m = b[i]\n            while m > 1:\n                if m % 2!= 0:\n                    m = m - 1\n                else:\n                    m = m / 2\n            a.append(int(m))\n    s1 = [str(x) for x in a]\n    res = \" \".join(s1)\n    print(res)\n    return res\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 2 * n\n    b = [int(x) for x in stdin.split()]\n\n    prime_array = get_primes(m)\n\n    res = []\n    for i in range(n):\n        res.append(b[i])\n        res.append(prime_array[i])\n    print(' '.join([str(x) for x in res]))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = [k + 1 for i in range(n)]\n    r = [k + 1 for i in range(n)]\n\n    for i in range(n):\n        if i % 2 == 0:\n            cur = l[a[i] - 1]\n        else:\n            cur = r[a[i] - 1]\n        l[a[i] - 1] = min(k + 1, cur)\n        r[a[i] - 1] = min(k + 1, cur)\n\n    team = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            team[i] = 2 if l[i] <= k else 1\n        else:\n            team[i] = 2 if r[i] <= k else 1\n\n    print(\"\".join([str(x) for x in team]))\n    return \"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n    assert 1 <= n <= 10 ** 5\n    assert 1 <= k <= n\n\n    rows = [students[:k], students[n - k:]]\n    while k < n:\n        if k % 2 == 0:\n            rows[0] = students[:k] + [rows[0][-1] + rows[1][0]]\n            rows[1] = students[k:k + k] + [rows[1][-1]]\n        else:\n            rows[0] = students[:k] + [rows[0][-1] + rows[1][0]]\n            rows[1] = students[k + k:k + k + k] + [rows[1][-1]]\n        k *= 2\n    return ''.join(map(str, [1 if student in rows[0] else 2 for student in students]))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_students, num_coach = map(int, stdin.split())\n    if num_students <= 2 * num_coach:\n        return \"22\" * num_students\n\n    programming_skills = sorted(map(int, stdin.split()))\n    if num_coach == 1:\n        return \"22\" * (num_students - 1)\n\n    current_skills = [1] * num_students\n    skills_to_choose = num_students\n    for _ in range(1, num_coach + 1):\n        skills_to_choose -= num_students\n        removed_skills = []\n        removed_skills.append(\n            max(\n                programming_skills[: num_students // 2],\n                key=lambda x: current_skills[x],\n            )\n        )\n        current_skills[removed_skills.pop()] = 0\n        removed_skills.append(\n            max(\n                programming_skills[num_students // 2 :],\n                key=lambda x: current_skills[x],\n            )\n        )\n        current_skills[removed_skills.pop()] = 0\n\n        current_skills[removed_skills[0]] = 1\n        current_skills[removed_skills[1]] = 2\n\n        programming_skills = removed_skills\n\n    return \"\".join(map(str, current_skills))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    skills = list(map(int, stdin.split(\" \")))\n    matrix = []\n    for i in range(n):\n        if i < k:\n            matrix.append(skills[i:])\n        else:\n            matrix.append(skills[i - k:i])\n    for i in range(k - 1):\n        matrix = [list(x) for x in zip(*matrix)]\n    print(\"\".join(str(i % 2) for i in sum(matrix, [])))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 2\n   ... 2 1 4 3\n   ... ''')\n    '11112'\n    >>> solution('''\n   ... 7 1\n   ... 7 2 1 3 5 4 6\n   ... ''')\n    '1121122'\n    >>> solution('''\n   ... 5 1\n   ... 2 4 5 3 1\n   ... ''')\n    '21112'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    skill = list(map(int, stdin.split()))\n    skill.sort()\n    first_team = []\n    second_team = []\n    for i in range(n):\n        if i < k:\n            first_team.append(1)\n            second_team.append(2)\n            continue\n        if i < n - k:\n            first_team.append(1)\n            second_team.append(2)\n        else:\n            first_team.append(2)\n            second_team.append(1)\n        if skill[i] in first_team:\n            first_team[first_team.index(skill[i])] = 1\n        else:\n            first_team[first_team.index(skill[i])] = 2\n    return ''.join(first_team)\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n\n    prog_skills = [int(i) for i in stdin.split()]\n    # print(n, k, prog_skills)\n\n    # from nth row n-1 numbers are closest,\n    # nth row has nth number and n+1th is closest\n    # nth row has nth and n-1th numbers\n    # n+1th row has nth and n+1th numbers\n\n    # first team:\n    # n-1 closest: nth, nth-1, nth-2,..., nth-k\n    # nth closest: nth, nth-1, nth-2,..., nth+k\n    # n+1th closest: nth+1, nth+1-1, nth+1-2,..., nth+k+1\n\n    # second team:\n    # n-1 closest: nth+1, nth+1-1, nth+1-2,..., nth+k+1\n    # nth closest: nth+1, nth+1-1, nth+1-2,..., nth+k\n    # n+1th closest: nth, nth-1, nth-2,..., nth-k\n\n    # algorithm:\n    # 1st step:\n    #     choose students closest to left\n    #     choose students closest to right\n    # 2nd step:\n    #     repeat first step, but with chosen students\n\n    # first team\n    closest_n = sorted(prog_skills[:k])\n    closest_n_plus = sorted(prog_skills[k:])\n    # print(closest_n, closest_n_plus)\n\n    first_team = []\n    second_team = []\n    for num in prog_skills:\n        if num in closest_n:\n            first_team.append(1)\n        else:\n            first_team.append(2)\n        if num in closest_n_plus:\n            second_team.append(1)\n        else:\n            second_team.append(2)\n    # print(first_team, second_team)\n\n    # we have first_team and second_team now, they have len n\n    # we need to repeat algorithm\n    # we have one more team to make\n\n    # first team\n    while len(first_team)!= 0:\n        # choose students closest to left\n        closest_n = sorted(prog_skills[:k])\n        closest_n_plus = sorted(prog_skills[k:])\n        first_team_result = []\n        for num in prog_skills:\n            if num in closest_n:\n                first_team_result.append(1)\n            else:\n                first_team_result.append(2)\n            if num in closest_n_plus:\n                second_team.append(1)\n            else:\n                second_team.append(2)\n        prog_skills = first_team_result\n        first_team = second_team\n        second_team = []\n        # print(first_team, second_team)\n\n    # second team\n    while len(second_team)!= 0:\n        # choose students closest to left\n        closest_n = sorted(prog_skills[:k])\n        closest_n_plus = sorted(prog_skills[k:])\n        second_team_result = []\n        for num in prog_skills:\n            if num in closest_n_plus:\n                second_team_result.append(1)\n            else:\n                second_team_result.append(2)\n            if num in closest_n:\n                first_team.append(1)\n            else:\n                first_team.append(2)\n        prog_skills = second_team_result\n        first_team = second_team\n        second_team = []\n        # print(first_team, second_team)\n\n    return \"\".join([str(num) for num in first_team])\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    skill = [int(i) for i in stdin.split()][1:]\n    # iterative version\n\n    # s = set(skill)\n    # d = dict()\n    # for i in s:\n    #     d[i] = skill.count(i)\n    # d = sorted(d.items(), key=lambda item: item[1])\n    # s = []\n    # for i in d:\n    #     s.append(i[0])\n    # d = {}\n    # for i in range(n):\n    #     d[i] = i + 1\n    #\n    # s = [i[0] for i in d.items() if i[1] in s]\n    # s = [i for i in s if i in s if i in s]\n    # # solution by my own\n    # for i in s:\n    #     skill[i - 1] = 1\n    #\n    # # for i in s:\n    # #     skill[i] = 2\n    # for i in range(n):\n    #     if skill[i] == 1:\n    #         j = i\n    #         while j < n:\n    #             if skill[j] == 1:\n    #                 j += 1\n    #             else:\n    #                 break\n    #         s.append(j)\n    #     else:\n    #         s.append(i)\n    # s = set(s)\n    # d = {}\n    # for i in s:\n    #     d[i] = s.count(i)\n    # d = sorted(d.items(), key=lambda item: item[1])\n    # s = []\n    # for i in d:\n    #     s.append(i[0])\n    # d = {}\n    # for i in range(n):\n    #     d[i] = i + 1\n    #\n    # s = [i[0] for i in d.items() if i[1] in s]\n    # for i in s:\n    #     skill[i - 1] = 2\n    #\n    # for i in range(n):\n    #     if skill[i] == 1:\n    #         j = i\n    #         while j < n:\n    #             if skill[j] == 1:\n    #                 j += 1\n    #             else:\n    #                 break\n    #         s.append(j)\n    #     else:\n    #         s.append(i)\n    # s = set(s)\n    # d = {}\n    # for i in s:\n    #     d[i] = s.count(i)\n    # d = sorted(d.items(), key=lambda item: item[1])\n    # s = []\n    # for i in d:\n    #     s.append(i[0])\n    # d = {}\n    # for i in range(n):\n    #     d[i] = i + 1\n    #\n    # s = [i[0] for i in d.items() if i[1] in s]\n    # for i in s:\n    #     skill[i - 1] = 1\n    #\n    # for i in range(n):\n    #     if skill[i] == 2:\n    #         j = i\n    #         while j < n:\n    #             if skill[j] == 2:\n    #                 j += 1\n    #             else:\n    #                 break\n    #         s.append(j)\n    #     else:\n    #         s.append(i)\n    # s = set(s)\n    # d = {}\n    # for i in s:\n    #     d[i] = s.count(i)\n    # d = sorted(d.items(), key=lambda item: item[1])\n    # s = []\n    # for i in d:\n    #     s.append(i[0])\n    # d = {}\n    # for i in range(n):\n    #     d[i] = i + 1\n    #\n    # s = [i[0] for i in d.items() if i[1] in s]\n    # for i in s:\n    #     skill[i - 1] = 2\n\n\n    # solution by solution\n    s = set(skill)\n    # d = {}\n    # for i in s:\n    #     d[i] = skill.count(i)\n    # d = sorted(d.items(), key=lambda item: item[1])\n    # s = []\n    # for i in d:\n    #     s.append(i[0])\n    # d = {}\n    # for i in range(n):\n    #     d[i] = i + 1\n    #\n    # s = [i[0] for i in d.items() if i[1] in s]\n    # for i in s:\n    "
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    skills = list(map(int, stdin.split()))\n    return ''.join(['1' if abs(i - k) <= n // 2 else '2' for i in range(n)])\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    skills = list(map(int, stdin.split()))\n    first = [0] * n\n    second = [0] * n\n    for i in range(n):\n        if i < k:\n            first[i] = 1\n            for j in range(i - 1, -1, -1):\n                if skills[j] == i + 1:\n                    first[i] += 1\n                    break\n        elif i > n - k - 1:\n            second[i] = 2\n            for j in range(i + 1, n):\n                if skills[j] == i + 1:\n                    second[i] += 1\n                    break\n        else:\n            break\n    team = \"\"\n    for i in range(n):\n        if first[i] >= 1 and second[i] >= 1:\n            team += \"2\"\n        elif first[i] >= 1:\n            team += \"1\"\n        else:\n            team += \"2\"\n    return team\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if i == 0 or a[i] >= a[i - 1]:\n            count += 1\n    for i in range(n - 1):\n        if a[i] == a[i + 1] or a[i + 1] == a[i] + 1:\n            count += 1\n    return count % 998244353\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n')[0].split(' '))\n    \n    return f\"{n * (n - 1) // 2 % 1000000007}\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a = [int(x) for x in stdin.split('\\n')]\n    b = [0] * n\n    l = [0]\n    r = [0]\n    ans = 0\n    for i in range(n):\n        if a[i] in l:\n            j = l.index(a[i])\n            l[j] = a[i]\n            r[j] = i\n        else:\n            l.append(a[i])\n            r.append(i)\n    l = l[1:]\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] == l[j]:\n                if b[i] == b[j]:\n                    b[i] += 1\n                    b[j] += 1\n                else:\n                    ans += 1\n            elif l[i] + 1 == l[j]:\n                ans += 1\n            else:\n                ans += 1\n    return ans % 1000000007\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    b = [0] * n\n    c = [0] * n\n    d = [0] * n\n    e = [0] * n\n    f = [0] * n\n    g = [0] * n\n    h = [0] * n\n    i = [0] * n\n\n    b[0] = 0\n\n    for i in range(1, n):\n        b[i] = (b[i - 1] + 1) if a[i] == a[i - 1] else b[i - 1]\n        c[i] = (c[i - 1] + 1) if a[i] == a[i - 1] else c[i - 1]\n        d[i] = (d[i - 1] + 1) if a[i] == a[i - 1] else d[i - 1]\n        e[i] = (e[i - 1] + 1) if a[i] == a[i - 1] else e[i - 1]\n        f[i] = (f[i - 1] + 1) if a[i] == a[i - 1] else f[i - 1]\n        g[i] = (g[i - 1] + 1) if a[i] == a[i - 1] else g[i - 1]\n        h[i] = (h[i - 1] + 1) if a[i] == a[i - 1] else h[i - 1]\n        i[i] = (i[i - 1] + 1) if a[i] == a[i - 1] else i[i - 1]\n\n    print(\n        sum(\n            [\n                b[i] == b[i - 1],\n                c[i] == c[i - 1],\n                d[i] == d[i - 1],\n                e[i] == e[i - 1],\n                f[i] == f[i - 1],\n                g[i] == g[i - 1],\n                h[i] == h[i - 1],\n                i[i] == i[i - 1],\n            ]\n        )\n    )\n    # print(b)\n    # print(c)\n    # print(d)\n    # print(e)\n    # print(f)\n    # print(g)\n    # print(h)\n    # print(i)\n    return\n\nsolution(stdin)"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    arr = [int(num) for num in stdin.readline().strip().split()]\n    arr.sort()\n    count = 1\n    if len(arr) == 1:\n        return 1\n    for i in range(0, len(arr) - 1):\n        if arr[i] == arr[i + 1]:\n            count += 1\n        else:\n            count = 1\n    return count\n\nprint(solution(sys.stdin.readline()))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    \"\"\"\n    The simplest way to understand the problem is to look at the example. We can use the following example to generate a large number:\n    \n    # Generate a number where the last digit is 7 and the rest is 1\n    t = [1]\n    while len(t) < n + 1:\n        t.append(t[-1] + 1)\n    #t[n] == t[0] + n\n    t = t[:-1]\n    \n    There are n numbers, so the number of different ways to shuffle the numbers is n!.\n    \n    Now let's count the number of ways to shuffle the number t[0] such that the last digit of the resulting number is 1.\n    \n    We can see that we need to consider all permutations of the first n numbers. So for the first number t[0] we have 1 way: t[0].\n    \n    Since for every possible permutation we can find the number t[1] where the last digit is 1, we can find the number of ways to shuffle t[0] by n!.\n    \n    And since we want to count the number of different permutations we need to divide the result by n!.\n    \n    We can do that using a recursive algorithm.\n    \n    If we have a sequence s0, s1,..., sn, we can generate the next number by adding s0 to all possible values of s1.\n    \n    For example:\n    \n    if we have the initial sequence t = [1, 2, 3, 4], we can generate the next number by adding 1 to all possible values of t[1] = t1.\n    There are four possible values for t[1], namely t1 = 1, t1 = 2, t1 = 3, t1 = 4.\n    \n    And the next number is t2, which is obtained by adding 1 to all possible values of t1:\n    t2 = t1 + 1 = 1, t2 = t1 + 1 = 2, t2 = t1 + 1 = 3, t2 = t1 + 1 = 4\n    \n    And so on.\n    \n    There is no need to continue if we get a number such as t[n], which is a multiple of 10.\n    \n    Thus, the initial sequence t will generate the next number t[n + 1], and there are four possible values for t[n + 1] that are multiple of 10:\n    t[n + 1] = t1 + 1, t[n + 1] = t1 + 2, t[n + 1] = t1 + 3, t[n + 1] = t1 + 4.\n    \n    The last digit of t[n + 1] is the last digit of t[n] and it is equal to t[n] mod 10, so we can add all possible ways to obtain t[n + 1] by all possible ways to obtain t[n].\n    \n    Thus, the final number is n!.\n    \n    The last step is to divide the answer by n!.\n    \n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    def n_of_permutations(n):\n        if n == 1:\n            return 1\n        return n_of_permutations(n - 1) * n\n    \n    def permute(t):\n        if len(t) == 1:\n            return t\n        return [t[i] for i in range(n - 1) for j in range(i + 1, n)]\n    \n    a = sorted(a)\n    t = [i for i in range(1, n + 1) for j in range(i)]\n    \n    ans = 1\n    for i in range(n):\n        ans *= n_of_permutations(t.index(a[i]) + 1)\n    \n    return ans % 1000000007\n    \n    \n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u8a08\u7b97\u5404\u7a2erenumber\u5f8c\u6709\u591a\u5c11\"\u4e0d\u540c\"\u7d44\u5408\n    \"\"\"\n    a = [int(x) for x in stdin.split()]\n    b = [0] * len(a)\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            b[i] = b[i - 1]\n        else:\n            b[i] = b[i - 1] + 1\n\n    count = 0\n    for i in range(1, len(a)):\n        if a[i - 1] < a[i] and b[i - 1] < b[i]:\n            count += 1\n    return count % int(1e9)\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculates the number of different monotonic renumerations of a given\n    array using brute force.\n    '''\n    pass\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(\" \")]\n    b = [0] * (num + 1)\n    c = [0] * (num + 1)\n    for i in range(1, num + 1):\n        for j in range(i):\n            if a[i - 1] == a[j]:\n                b[i] = b[j]\n        b[i] += 1\n    d = [0] * (num + 1)\n    for i in range(1, num + 1):\n        for j in range(i):\n            if a[i - 1] + 1 == a[j]:\n                d[i] += d[j]\n                d[i] %= 998244353\n        for j in range(i):\n            if a[i - 1] + 2 == a[j]:\n                d[i] += c[j]\n                d[i] %= 998244353\n    print(d[-1])\n\nsolution(\"3\\n1 2 3\\n\")\nsolution(\"5\\n1 2 1 2 3\\n\")\nsolution(\"4\\n1 3 3 7\\n\")\nsolution(\"2\\n100 1\\n\")\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution \n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You need to delete a minimum number of elements\n    from the sequence to make it good.\n    '''\n    pass\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    n = int(stdin.readline().strip())\n    sequence = [int(x) for x in stdin.readline().strip().split()]\n    power_list = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if 2 ** int(math.log2(sequence[i] + sequence[j])) in power_list:\n                break\n            else:\n                power_list.append(2 ** int(math.log2(sequence[i] + sequence[j])))\n    result = len(power_list) - n\n    print(result)\n    return result\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a sequence of numbers, which is good.\n\n    >>> solution(\"4 7 1 5 4 9\")\n    1\n\n    >>> solution(\"1 1 1 1023\")\n    0\n\n    >>> solution(\"16\")\n    1\n    \"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(len(stdin.split()))\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string_numbers: List[int] = [int(n) for n in stdin]\n    removed_cubes: int = 0\n    while len(string_numbers) >= 2:\n        if string_numbers[0] == 0 and string_numbers[1] == 0:\n            string_numbers.pop(0)\n            string_numbers.pop(0)\n            string_numbers.append(1)\n        elif string_numbers[0] == 0 and string_numbers[1] == 1:\n            string_numbers.pop(0)\n            string_numbers.pop(0)\n            string_numbers.append(1)\n            string_numbers.append(0)\n        elif string_numbers[0] == 1 and string_numbers[1] == 0:\n            string_numbers.pop(0)\n            string_numbers.pop(0)\n            string_numbers.append(1)\n            string_numbers.append(0)\n        elif string_numbers[0] == 1 and string_numbers[1] == 1:\n            string_numbers.pop(0)\n            string_numbers.pop(0)\n            string_numbers.append(0)\n            string_numbers.append(0)\n        removed_cubes += 1\n    return str(removed_cubes)\n\n\"\"\"\nfrom sys import stdin, stdout\n\nnum_tests: int = int(stdin.readline())\n\nfor test_num in range(num_tests):\n    stdout.write(f\"{solution(stdin.readline())}\\n\")\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count_adjacent_colors(seq: list, target: str) -> int:\n        count = 0\n        for i in range(1, len(seq)):\n            if seq[i] == target and seq[i - 1]!= target:\n                count += 1\n        return count\n\n    N = int(stdin)\n    seq = [int(char) for char in stdin]\n    cubes_removed = 0\n\n    # remove the first and last cubes\n    while count_adjacent_colors(seq, 1) > 0:\n        seq.pop(0)\n        seq.pop(-1)\n        cubes_removed += 1\n\n    # remove first and second cubes, etc.\n    while count_adjacent_colors(seq, 0) > 0:\n        for i in range(1, len(seq) - 1):\n            if seq[i - 1]!= seq[i + 1]:\n                seq.pop(i)\n                seq.pop(i - 1)\n                cubes_removed += 1\n                break\n\n    print(cubes_removed)\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport sys\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    inputs = inputs[:-1]\n    n = int(inputs[0])\n    s = inputs[1]\n    x = 0\n    y = 0\n    i = 0\n    j = 0\n    cnt = 0\n    while i < n:\n        if s[i] == \"1\":\n            x += 1\n        else:\n            y += 1\n        if x > y:\n            cnt += x - y\n        i += 1\n    return cnt"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    return str(N - max(sum(1 for c in stdin[i:] if c == '0') for i in range(N)))\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    n = int(stdin)\n    stack = []\n    count = 0\n    for i in range(n, 0, -1):\n        if i % 2 == 0:\n            count += 1\n            stack.append(i)\n        else:\n            if count:\n                if i % 4 == 0:\n                    stack.append(i)\n                else:\n                    count -= 1\n                    stack.append(i)\n    return count\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline()\n    answer = 0\n    for i in range(N):\n        if S[i] == '1':\n            answer += 1\n    return answer\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    lines = stdin.splitlines()\n    num_gates = int(lines[0].split(' ')[0])\n    num_cards = int(lines[0].split(' ')[1])\n    id_cards = lines[1:]\n    pass_gates = 0\n    id_cards.sort(key=lambda x: int(x.split(' ')[0]))\n    for id_card in id_cards:\n        l_r = id_card.split(' ')\n        if num_gates == 1:\n            pass_gates += 1\n            break\n        if int(l_r[1]) - int(l_r[0]) > num_gates:\n            pass_gates += 1\n            num_gates -= (int(l_r[1]) - int(l_r[0]))\n        else:\n            num_gates -= (int(l_r[1]) - int(l_r[0]))\n    return pass_gates"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    gates = []\n    for _ in range(m):\n        l, r = map(int, stdin.split(' '))\n        gates.append((l, r))\n    count = 0\n    for i in range(1, n + 1):\n        first_gate = (i, i)\n        if first_gate not in gates:\n            count += 1\n        else:\n            break\n    for i in range(n - 1, 0, -1):\n        last_gate = (i, i)\n        if last_gate not in gates:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cards = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        cards.append((l, r))\n    \n    def gt(card1: Tuple[int], card2: Tuple[int]) -> bool:\n        return card1[1] > card2[1]\n    \n    def lt(card1: Tuple[int], card2: Tuple[int]) -> bool:\n        return card1[1] < card2[1]\n    \n    cards.sort(key=cmp_to_key(lt))\n    \n    left, right = cards[0]\n    count = 0\n    for i in range(1, n):\n        if right < left:\n            count += 1\n            left, right = cards[i]\n        else:\n            right = max(right, cards[i][1])\n    \n    count += 1 if right < left else 0\n    return str(count)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Solve the problem'''\n    # I am not very good with inputs so I had to use a dictionary to solve it.\n    # The dictionary stores the N number of gates by their corresponding indices.\n    nums = dict()\n    for i in range(int(stdin.split()[0])):\n        left, right = stdin.split()[2 * i + 1].split(' ')\n        nums[i] = (int(left), int(right))\n\n    # The number of elements in the dictionary gives us the number of ID cards.\n    N = len(nums)\n\n    # We create an empty list to store the ID cards that are allowed to pass all the gates.\n    # We are only allowed to pass one ID card at a time so we can do this by doing this\n    # and then checking the indexes of the allowed ID cards.\n    valid_pass = []\n\n    # The first ID card that is not allowed to pass the first gate is the first element in the dictionary.\n    for card in nums.values():\n        if not (card[0] - 1) in nums.keys():\n            valid_pass.append(card[0] - 1)\n\n    # The second ID card that is allowed to pass the second gate is the last element in the list.\n    for card in valid_pass:\n        for num in nums.values():\n            if not (num[1] + 1) in nums.keys():\n                valid_pass.append(num[1] + 1)\n\n    # Check the list for any other ID cards that are allowed to pass all the gates.\n    for card in valid_pass:\n        for num in nums.values():\n            if not (card + 1) in nums.keys():\n                valid_pass.append(card + 1)\n\n    # Check the list for any other ID cards that are allowed to pass all the gates.\n    for card in valid_pass:\n        for num in nums.values():\n            if not (card - 1) in nums.keys():\n                valid_pass.append(card - 1)\n\n    # The number of valid ID cards is the length of the list.\n    print(len(valid_pass))"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    l = [tuple(map(int, stdin.split(' ')[i:i + 2])) for i in range(0, m, 2)]\n    print(l)\n    ans = 0\n    for i in range(1, n + 1):\n        if i not in set(l[0][0] + l[0][1]):\n            ans += 1\n    return ans\n\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get input\n    n, m = map(int, stdin.split('\\n')[:2])\n    l_r_list = []\n    for _ in range(m):\n        l_r_list.append(map(int, stdin.split('\\n')[_+2].split()))\n    \n    # Variables\n    id_list = []\n    count = 0\n    \n    # Method\n    for idx in range(n):\n        # Check if idx is valid\n        if idx+1 in [item[0] for item in l_r_list] or idx in [item[1] for item in l_r_list]:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input_str)\n    >>> 6\n    \"\"\"\n    # read and parse input\n    N, *h = map(int, stdin.split(\"\\n\"))\n    h = [0] + h\n    min_cnt = N\n    # enumerate all possible ranges\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            cnt = j - i + 1\n            for k in range(i - 1, j):\n                cnt += (h[k] - h[k + 1]) * (j - k)\n            min_cnt = min(min_cnt, cnt)\n    return min_cnt\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    _, *h = stdin.split(\" \")\n\n    # init return\n    count = 0\n\n    # traverse all heights and water\n    for i, h_i in enumerate(h):\n        # check if current height is greater than previous one\n        if i > 0:\n            if int(h_i) < int(h[i - 1]):\n                # water with current index\n                count += int(h_i) - int(h[i - 1])\n\n    return str(count)\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '2'"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = [int(x) for x in stdin.split('\\n')]\n    watering_operations = 0\n    for i in range(1, n + 1):\n        l, r = 0, n\n        while l < r:\n            m = (l + r) // 2\n            if h[m] < i:\n                l = m + 1\n            else:\n                r = m\n        for j in range(l, n + 1):\n            watering_operations += h[j] - i\n    return str(watering_operations)\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  # your solution goes here\n  return \"\"\n  \n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.readline())\n  h = [int(i) for i in stdin.readline().strip().split(' ')]\n  min_operations = n\n  for i in range(n):\n    l = 0\n    r = n - 1\n    while l < r:\n      if h[l] < h[r]:\n        if h[l] < h[i] < h[r]:\n          min_operations = min(min_operations, 2 + r - l)\n        l += 1\n      else:\n        if h[l] > h[i] > h[r]:\n          min_operations = min(min_operations, 2 + r - l)\n        r -= 1\n  return str(min_operations)"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, w = map(int, stdin.readline().split())\n    d = [int(i) for i in stdin.readline().split()]\n    l, r = 0, min(w, d[0])\n    while l <= r:\n        m = (l + r) // 2\n        tmp = 0\n        for i in range(a):\n            tmp += m - d[i] if m - d[i] >= 0 else 0\n            if tmp > w:\n                break\n        if tmp <= w:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to w.\n    :param stdin: str, input.\n    :return: str, output.\n    \"\"\"\n    n, w = [int(x) for x in stdin.split('\\n')[0].split()]\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    def helper(arr, w, n, prefix):\n        if n == 0:\n            return 1\n\n        if n < 0 or w < 0:\n            return 0\n\n        return prefix + helper(arr, w, n - arr[n - 1], prefix) + helper(arr, w - 1, n - 1, prefix)\n\n    return str(helper(arr, w, n, 0))\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split(' '))\n    a = [int(x) for x in stdin.split(' ') if x!= '\\n']\n    dp = [[0] * (w + 1) for _ in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(1, n):\n        for j in range(w + 1):\n            if dp[i - 1][j]!= 0:\n                for k in range(j, w + 1):\n                    if a[i] <= k:\n                        dp[i][k] += dp[i - 1][j]\n    print(dp[-1][-1])\n    return ''.join(map(str, dp[-1]))\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(solve())\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of:\n    https://app.codility.com/programmers/lessons/3-time_complexity/perm_missing_elem/\n    \"\"\"\n   ..."
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 10\\n2 1 -3\\n\")\n    3\n    >>> solution(\"4 10\\n2 4 1 2\\n\")\n    2\n    >>> solution(\"3 10\\n-1 1\\n\")\n    4\n    >>> solution(\"2 10\\n1 -1\\n\")\n    1\n    \"\"\"\n    # read input\n    n, w = map(int, stdin.readline().split())\n    a = [int(x) for x in stdin.readline().split()]\n    # run algorithm\n    dp = [[0 for _ in range(w + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(w + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j - a[i - 1] >= 0:\n                dp[i][j] += dp[i - 1][j - a[i - 1]]\n    # write output\n    if dp[n][w] == 0:\n        print(0)\n    else:\n        print(dp[n][w])\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a_all = [0] * (n + 1)\n    a_all[0] = a[0]\n    for i in range(1, n):\n        a_all[i] = a_all[i - 1] + a[i]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if a_all[j] - a_all[i] <= w:\n                res += 1\n    return res\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    \n    out = []\n    for x in a:\n        if x % 2 == 0:\n            x //= 2\n            out.append(x)\n        else:\n            x //= 3\n            out.append(x)\n    \n    return''.join([str(x) for x in out])\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return your answer\n    return stdin\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(stdin.split(), key=lambda x: int(x) * 2 ** (len(x) - 1)))\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[1]\n\n\nprint(solution(\"4 8 6 3 12 9\"))\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  seq = [int(s) for s in stdin.split('\\n')[1].split()]\n  ans = []\n  m = 3\n  for x in seq:\n    ans.append(m*x)\n    m = m//2 if m%2==0 else m*3\n  return''.join([str(n) for n in ans])\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, *a = map(int, stdin.split())\n    return''.join(str(a[a.index(i) // 2]) if i % 2 else str(a[a.index(i) * 3 // 2]) for i in range(1, x + 1))\n\n'''\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n---\n\nThis solution was a lot more time consuming than the others because of the huge numbers.\nThe problem is solved in O(n) time.\nI tried with the 2-numbers algorithm but it was not as efficient as the 1-n algorithm.\nThe 1-n algorithm is more efficient because of the use of the fact that we need exactly one third of a number (in this case 2).\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You can assume, that stdin contains the input data in the format given in the description\n    \"\"\"\n    return\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [int(x) for x in stdin.readline().split()]\n    points.sort()\n    num = 0\n    i = 0\n    while i < n:\n        j = i\n        while j < n and points[j] == points[j - 1] + (1 << num):\n            j += 1\n        num += 1\n        i = j\n    return num\n\nprint(solution(input()))\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = [int(num) for num in stdin.readline().split(' ')]\n    d = dict()\n    for num in x:\n        base2 = bin(num)[2:]\n        base10 = int(base2, 2)\n        d[base10] = base10\n    count = 0\n    count2 = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            base10_1 = d[x[i]]\n            base10_2 = d[x[j]]\n            base10_diff = abs(base10_1 - base10_2)\n            if base10_diff > 0:\n                if base10_diff in d:\n                    base10_diff_2 = d[base10_diff]\n                    if base10_diff_2 == base10_1:\n                        count += 1\n                        count2 += 1\n                    elif base10_diff_2 == base10_2:\n                        count += 1\n                        count2 += 1\n    if count == 0:\n        if count2 == 0:\n            return str(count2)\n        else:\n            return str(count2)\n    else:\n        if count == 1:\n            return str(count) +'' + str(d[count])\n        else:\n            return str(count)\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    count = int(lines[0])\n    l = []\n    for i in range(1, len(lines)):\n        l.append(int(lines[i]))\n    l.sort()\n    s = set()\n    for i in range(count):\n        s.add(l[i])\n    for i in range(count, len(l)):\n        j = i\n        while(j < len(l) and abs(l[i] - l[j]) < 2 ** (len(str(l[i])) - 1)):\n            s.add(l[i])\n            j += 1\n    print(len(s))\n    print(*sorted(list(s)))\n    return ''\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = sorted([int(i) for i in stdin.readline().strip().split(' ')])\n\n    # find k\n    # max_k = x[-1] - x[0]\n    # for i in range(n - 1):\n    #     if x[i + 1] - x[i] > max_k:\n    #         max_k = x[i + 1] - x[i]\n    # k = max_k\n    k = x[1] - x[0]\n    for i in range(n - 1):\n        if x[i + 1] - x[i] < k:\n            k = x[i + 1] - x[i]\n\n    # find d\n    max_d = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (x[i] - x[j]) % k!= 0:\n                d = (x[i] - x[j]) // k\n                if d > max_d:\n                    max_d = d\n\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (x[i] - x[j]) % k == 0:\n                ans.append((x[i], x[j]))\n    ans = list(set(ans))\n    print(len(ans))\n    print(' '.join(str(i) for i in ans))\n    return ''"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n    res = [points[0]]\n    for i in range(1, n):\n        for j in range(len(res)):\n            if (points[i] - res[j]) % 2 == 0:\n                res[j] = points[i]\n                break\n        else:\n            res.append(points[i])\n    return str(len(res)) + '\\n' +''.join(str(i) for i in res)"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(stdin.split('\\n')[0].split(' ')[i]) for i in range(0, len(stdin.split('\\n')[0].split(' ')))]\n    n = len(x)\n    dist = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            if i!= j:\n                if x[i] == x[j]:\n                    dist = x[j] - x[i]\n                    if dist > 0 and dist % 2 == 0:\n                        break\n    #print(dist)\n    result = [x[i] for i in range(0, n) if x[i] == x[i] - dist]\n    print(len(result))\n    print(' '.join(str(i) for i in result))\n\nsolution(str(input()))\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    points = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    \n    min_dist = 2 ** 32\n    res = []\n    \n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            dist = abs(points[i] - points[j])\n            if dist > min_dist and dist & (dist - 1) == 0:\n                min_dist = dist\n                res = [points[i], points[j]]\n    \n    return''.join([str(x) for x in res])\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    points = list(map(int, lines[1].split()))\n    m = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            if math.floor(math.log2(abs(points[i] - points[j]))) > m:\n                m = math.floor(math.log2(abs(points[i] - points[j])))\n    print(m)\n    print(*[points[i] for i in range(len(points)) if int(math.log2(abs(points[i] - points[i - 1]))) == m])\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    points = list(map(int, lines[1].split()))\n    points.sort()\n    dist = (points[-1] - points[0]) // 2 ** (len(points) - 1)\n    points_used = {points[0] - dist}\n    for i in range(1, len(points)):\n        for p in points_used:\n            if (points[i] - p) % 2 ** (len(points) - i - 1)!= 0:\n                points_used = {points[i]}\n                break\n            points_used.add(p)\n        else:\n            points_used = set()\n            break\n    return''.join(list(map(str, points_used)))\n\nprint(solution(input()))"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(\" \")]\n\n    return (\n        str(\n            A\n            - K * min(A, B)\n            + (\n                B\n                - K\n                * min(A, B)\n                + min(A, B)\n                - max(0, K - A + B - 1)\n                + max(0, K - A + B - 1)\n            )\n        )\n        + \" \"\n        + str(\n            B\n            - K * min(A, B)\n            + (\n                A\n                - K\n                * min(A, B)\n                + min(A, B)\n                - max(0, K - A + B - 1)\n                + max(0, K - A + B - 1)\n            )\n        )\n    )\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = (int(n) for n in stdin.split())\n    takahashi = A\n    aoki = B\n    for _ in range(K):\n        if takahashi > 0 and aoki > 0:\n            takahashi -= 1\n            aoki -= 1\n        elif takahashi == 0 and aoki > 0:\n            aoki -= 1\n        elif takahashi > 0 and aoki == 0:\n            takahashi -= 1\n    return '{} {}'.format(takahashi, aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    # Your code here\n    pass"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the solution\"\"\"\n    lines = stdin.splitlines()\n\n    A, B, K = list(map(int, lines[0].split()))\n\n    takahashi = A\n    aoki = B\n\n    for i in range(K):\n        if takahashi >= 1:\n            takahashi = takahashi - 1\n            aoki = aoki + 1\n        elif aoki >= 1:\n            aoki = aoki - 1\n            takahashi = takahashi + 1\n\n    return str(takahashi) + \" \" + str(aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    TA = 0\n    TB = B\n    for i in range(K):\n        if A > 0:\n            TA += 1\n            A -= 1\n        if B > 0:\n            TB -= 1\n            B -= 1\n    return \"{} {}\".format(TA, TB)\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n\n    takahashi = a\n    aoki = b\n\n    for i in range(k):\n        if takahashi > 0:\n            takahashi -= 1\n        elif aoki > 0:\n            aoki -= 1\n\n    return str(takahashi) + \" \" + str(aoki)"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    while K >= 0:\n        if A > 0:\n            A -= 1\n            K -= 1\n        elif B > 0:\n            B -= 1\n            K -= 1\n        else:\n            A += 1\n            B += 1\n            K -= 1\n    print(A, B)"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    return str(A - B) +'' + str(B - A)"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  A, B, K = map(int, stdin.split())\n  Takahashi = A\n  Aoki = B\n  for i in range(K):\n    if Takahashi > 0:\n      Takahashi = Takahashi - 1\n    else:\n      Aoki = Aoki - 1\n  if Takahashi > 0:\n    print(Aoki)\n  else:\n    print(Aoki)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    Y = 100\n    return str(int(X / Y))\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    n = 0\n    while True:\n        n += 1\n        if input >= 10000:\n            input = int(input * (1 + 0.01))\n        else:\n            input = int(input * (1 + 0.01) + 100)\n        if input >= 10000:\n            break\n    return n\n'''\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    result = 0\n    while x < 10001:\n        result += 1\n        x *= 1.01\n    return str(result)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    while True:\n        x = ((1 + 0.01) * x)\n        count += 1\n        if x >= 1000:\n            break\n    return count"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    X = int(stdin)\n\n    # X\u306e\u521d\u671f\u5024\u30920\u306b\u3059\u308b\n    i = 0\n    while True:\n        # X\u304c100\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\n        if X < 100:\n            break\n        # X\u304c100\u306b\u306a\u308b\u307e\u3067\u7e70\u308a\u8fd4\u3059\n        X = X * (1 + 0.01)\n        i += 1\n    # i\u306e\u5024\u306b1\u3092\u52a0\u3048\u308b\n    return i + 1"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    bank_balance = int(stdin.readline())\n    year = 0\n    while bank_balance < 100:\n        bank_balance = bank_balance * (1 + 0.01)\n        year += 1\n    return year\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(math.ceil((math.log(n) + math.log
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    taka = int(stdin)\n    i = 0\n    while True:\n        i += 1\n        taka += math.floor(taka*0.01)\n        if taka >= 10000:\n            break\n    return str(i)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = stdin.split(\"\\n\")\n    n = int(a)\n    k = int(b)\n    res = 0\n    for i in range(1,k+1):\n        for j in range(1,k+1):\n            for m in range(1,k+1):\n                if i!=j and j!=m and i!=m:\n                    res += gcd(i,j,m)\n    print(res)\n    return \"\"\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(\"\\n\")[0].split()))\n    sum = 0\n    for i in range(a, b + 1):\n        for j in range(a, b + 1):\n            for k in range(a, b + 1):\n                if i % 2 == 0 or j % 2 == 0 or k % 2 == 0:\n                    sum += gcd(i, j, k)\n    return str(sum)\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = stdin\n    K = int(K)\n    sum_greatest = 0\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                if a == b == c:\n                    sum_greatest += 1\n                elif a == b or b == c or a == c:\n                    sum_greatest += 2\n    return sum_greatest\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '9'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sum = 0\n    n = int(stdin)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                sum += gcd(i, j, k)\n    return str(sum)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\")\n    9\n    \"\"\"\n    K = int(stdin.readline())\n    m = 0\n    for a in range(1, K + 1):\n        for b in range(1, K + 1):\n            for c in range(1, K + 1):\n                m = max(m, a * b * c)\n    return str(m)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = k * k * k\n    n = str(n)\n    res = sum(map(int, n))\n    return str(res)\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return str(sum([sum([sum(gcd(a, b, c) for c in range(1, k + 1)) for b in range(1, k + 1)]) for a in range(1, k + 1)]) % (10 ** 9 + 7))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    res = 0\n    for a in range(1, num + 1):\n        for b in range(1, num + 1):\n            for c in range(1, num + 1):\n                res += gcd(a, b, c)\n    return res\n\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(n)\n    \"\"\"\n    n, *ints = [int(x) for x in stdin.split()]\n    \n    max_f = 0\n    for i, num in enumerate(ints):\n        for num2 in ints[i+1:]:\n            if num % num2:\n                max_f = max(max_f, num + num2)\n                \n    return max_f\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum value of f.\n\n    :param stdin:\n    :return: str\n    '''\n    _ = int(stdin.readline().strip())\n    _nums = list(map(int, stdin.readline().split()))\n    _m = int(stdin.readline().strip())\n\n    def f(m):\n        '''Returns f(m).\n\n        :param m:\n        :return: str\n        '''\n        total = 0\n        for _num in _nums:\n            total += m % _num\n        return total\n\n    return str(max(range(0, _m + 1), key=f))"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [abs(a[i]) for i in range(n)]\n    a.sort(reverse=True)\n    res = 0\n    for i in range(n):\n        res += a[i] * (abs(i) % n)\n    return res\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a)\n    print(a[0])\n    print(sum(a))\n    print(sum(a) - (a[0] * n))\n    \n    \n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return max(sum(a[i] % a[j] for i in range(n) for j in range(i + 1, n)) for n in range(2, len(a) + 1))\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a = list(map(int, stdin.split()))\n    N = a[0]\n    arr = a[1:]\n\n    # init f array\n    f = [0] * (N + 1)\n\n    # init f array\n    f = [0] * (N + 1)\n\n    for i in range(1, N + 1):\n        f[i] = arr[i - 1] + f[i - 1]\n\n    # init mod array\n    mod = [0] * (N + 1)\n\n    # compute mod array\n    for i in range(1, N + 1):\n        mod[i] = i\n\n    # compute mod array\n    for i in range(1, N + 1):\n        mod[i] = i\n\n    # compute max value\n    f = [0] * (N + 1)\n    f[1] = mod[1]\n\n    for i in range(2, N + 1):\n        f[i] = (f[i - 1] + mod[i]) % f[i - 1]\n\n    return f[N]\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    max = -sys.maxsize\n    for m in range(1, (2 ** N)):\n        f = 0\n        for i in range(0, N):\n            f += (m % a[i])\n        if f > max:\n            max = f\n    return str(max)\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n\n    def f(m):\n        s = 0\n        for i in a:\n            s += m % i\n        return s\n    \n    m = 10 ** 9\n    for i in range(n):\n        m = min(m, f(i))\n    return m\n\nprint(solution(input()))\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    rolls = [map(int, line.split()) for line in stdin]\n    doublets = [t for t in zip(*rolls) if t[0] == t[1]]\n    if not doublets or len(doublets) < 3:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n        return \"Yes\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().rstrip('\\n'))\n    doublets = set()\n    for _ in range(N):\n        d1, d2 = map(int, stdin.readline().rstrip('\\n').split(' '))\n        doublets.add((d1, d2))\n        doublets.add((d2, d1))\n\n    for i in range(N-2):\n        if (d1, d2) in doublets and (d3, d4) in doublets and (d5, d6) in doublets:\n            return \"Yes\"\n        d1, d2 = d2, d3\n        d3, d4 = d4, d5\n        d5, d6 = d6, d1\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution 1\n    def doublet(numbers):\n        numbers = [str(i) for i in numbers]\n        for n in range(len(numbers) - 2):\n            if numbers[n] == numbers[n+1]:\n                if numbers[n] == numbers[n+2]:\n                    return True\n        return False\n    '''\n\n    # Solution 2\n    def doublet(numbers):\n        if len(numbers) < 3:\n            return False\n        for n in range(len(numbers) - 2):\n            if numbers[n] == numbers[n+1]:\n                if numbers[n] == numbers[n+2]:\n                    return True\n        return False\n    \n    # Solution 3\n    '''\n    def doublet(numbers):\n        if len(numbers) < 3:\n            return False\n        for i in range(len(numbers)-2):\n            if numbers[i] == numbers[i+1] and numbers[i] == numbers[i+2]:\n                return True\n        return False\n    '''\n    \n    n = int(stdin)\n    for i in range(n):\n        numbers = [int(i) for i in stdin.split('\\n')[1:][i].split(' ')]\n        if doublet(numbers):\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rolls = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    return 'Yes' if any(x[0] == x[1] == x[2] for x in zip(rolls, rolls[1:], rolls[2:])) else 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rolls = [list(map(int, line.split())) for line in stdin.split('\\n')[:-1]]\n    for i in range(3, len(rolls)):\n        if rolls[i][0] == rolls[i][1]:\n            if rolls[i - 3][0] == rolls[i - 3][1]:\n                if rolls[i - 1][0] == rolls[i - 1][1]:\n                    if rolls[i - 2][0] == rolls[i - 2][1]:\n                        print(\"Yes\")\n                        return\n    print(\"No\")\n    return\n\nimport sys\nsolution(sys.stdin.read())"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n\")\n    Yes\n\n    >>> solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n1\\n1\\n1\\n\")\n    No\n\n    >>> solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n\")\n    Yes\n\n    >>> solution(\"5\\n1 2\\n6 6\\n4 4\\n3 3\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3 2\\n3"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(str, stdin.split()))\n    n = int(inputs[0])\n    \n    if n < 3:\n        return \"No\"\n    \n    dice = []\n    for i in range(1, n+1):\n        d1, d2 = map(int, inputs[i].split())\n        dice.append((d1, d2))\n\n    doublets = 0\n    for i in range(1, len(dice)):\n        if dice[i][0] == dice[i][1]:\n            if doublets < 2:\n                continue\n            if dice[i-1][0] == dice[i-1][1]:\n                if dice[i-2][0] == dice[i-2][1]:\n                    doublets += 1\n                else:\n                    doublets = 2\n            else:\n                doublets = 1\n        else:\n            doublets = 0\n        if doublets >= 3:\n            return \"Yes\"\n    return \"No\"\n        \n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = int(stdin.split()[0])\n    for i in range(N - 2):\n        if stdin.split()[i * 2 + 1] == stdin.split()[i * 2 + 2] and stdin.split()[(i + 1) * 2 + 1] == stdin.split()[(i + 1) * 2 + 2] and stdin.split()[(i + 2) * 2 + 1] == stdin.split()[(i + 2) * 2 + 2]:\n            return 'Yes'\n    return 'No'\n\nsolution('5 1 2 6 6 4 4 3 3 3 2')\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *lines = stdin.split('\\n')\n\n    n = int(n)\n    dice = list(map(lambda line: list(map(int, line.split(' '))), lines))\n\n    for i, line in enumerate(dice):\n        if i < n - 2:\n            if line[0] == line[1] and line[1] == line[2]:\n                if dice[i + 1][0] == line[0] and dice[i + 1][1] == line[1]:\n                    if dice[i + 2][0] == line[0] and dice[i + 2][1] == line[1]:\n                        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  count = 1\n  x = stdin.split()\n  for i in range(len(x)):\n    if x[i] == x[i+1]:\n      count += 1\n      if count >= 3:\n        return 'Yes'\n      else:\n        continue\n    else:\n      count = 1\n  return 'No'\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    area = (r ** 2) * 3.14\n    area_circle_1 = 3.14 * (1 ** 2)\n    return str(int(area / area_circle_1))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0]))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return r * r * pi"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area_1 = r * r * 3.14\n    area_2 = 3.14 * r * r\n    if area_1 > area_2:\n        return r\n    else:\n        return r - 1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    r1 = 1\n    r2 = r\n    r3 = r + 1\n    if r > 1:\n        count = (r1 + r2 + r3) - 2\n    elif r == 1:\n        count = 0\n    return count\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return result\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Replace pass above with your code\n    r = int(stdin)\n    area = r * r * 3.1415926535897932384626433832795\n    print(area/3.1415926535897932384626433832795)\n    return str(int(area/3.1415926535897932384626433832795))\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return int(str(r * r) + str(r * r))\n\nprint(solution(input()))\n\nYou can use input() for solving this challenge but you can also use stdin.readline().strip().\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r: int = int(stdin)\n    return str(r*r*4)\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n    return 'Yes' if max(lst) < sum(lst) - max(lst) else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    lines = stdin.splitlines()\n    \n    # count the number of vertices\n    n = int(lines[0])\n    \n    # get the lengths of the sides of the polygon\n    lengths = lines[1].split(' ')\n    \n    # calculate the perimeter of the polygon\n    perimeter = 0\n    for length in lengths:\n        perimeter += int(length)\n    \n    # calculate the sum of the lengths of the sides\n    length_sum = 0\n    for i in range(2, 2 + n):\n        length_sum += int(lines[i])\n        \n    # return 'Yes' if the polygon can be drawn, 'No' otherwise\n    if perimeter < length_sum:\n        return 'Yes'\n    else:\n        return 'No'\n    \n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = map(int, stdin.split())\n    return \"Yes\" if l[0] < sum(l[1:]) else \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *lengths = map(int, stdin.split())\n    n = n\n    lengths = lengths\n    return 'Yes' if lengths[0] < sum(lengths[1:]) else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *L = map(int, stdin.split())\n    L = sorted(L, reverse=True)\n    return \"Yes\" if L[0] < sum(L[1:]) else \"No\"\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *args = [int(i) for i in stdin.split('\\n')[0].split(' ') if i]\n    return 'Yes' if max(args) < sum(args[1:]) else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Input is read in a single line and parsed into an array.\n  Each element in the array is split by a space, and then converted to int.\n  The input is then parsed into a list of integers.\n  An N-sided polygon satisfying the condition is checked for validity.\n  If it is valid, the answer is Yes. Otherwise, the answer is No.\n  :param stdin: Input string read in from stdin\n  :return: Output string to be printed\n  \"\"\"\n  N = stdin.split(\" \")\n  N = list(map(int, N))\n  if (N[0] < 3) or (N[0] > 10):\n    return \"No\"\n  max_num = max(N)\n  if max_num < (sum(N) - max_num):\n    return \"Yes\"\n  else:\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = [int(i) for i in stdin.split('\\n')[0].split()]\n    N, *S = input\n\n    if S[0] + S[1] >= S[-1] + S[-2]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if an N-sided polygon (not necessarily convex) with sides of length L_1, L_2,..., L_N can be drawn in a two-dimensional plane.\nYou can use the following theorem:\nTheorem: an N-sided polygon satisfying the condition can be drawn if and only if the longest side is strictly shorter than the sum of the lengths of the other N-1 sides.\n\n-----Constraints-----\n - All values in input are integers.\n - 3 \\leq N \\leq 10\n - 1 \\leq L_i \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nL_1 L_2... L_N\n\n-----Output-----\nIf an N-sided polygon satisfying the condition can be drawn, print Yes; otherwise, print No.\n\n-----Sample Input-----\n4\n3 8 5 1\n\n-----Sample Output-----\nYes\n\nSince 8 < 9 = 3 + 5 + 1, it follows from the theorem that such a polygon can be drawn on a plane.\n\"\"\"\n\nimport sys\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n3 8 5 1\")\n    Yes\n    \"\"\"\n   ..."
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split()\n    if len(num_list) < 2:\n        raise Exception('Input error')\n    num_of_digits = int(num_list[0])\n    if num_of_digits < 1 or num_of_digits > 3:\n        raise Exception('Input error')\n    if len(num_list[1:])!= num_of_digits:\n        raise Exception('Input error')\n    for i in num_list[1:]:\n        if len(i)!= num_of_digits:\n            raise Exception('Input error')\n    num_list = [int(x) for x in num_list[1:]]\n    for i in num_list:\n        if i < 0:\n            raise Exception('Input error')\n    digits = []\n    for i in num_list:\n        tmp = []\n        tmp.append(i % 10)\n        i = i // 10\n        while i > 0:\n            tmp.append(i % 10)\n            i = i // 10\n        digits.append(tmp[::-1])\n    min_val = 10 ** num_of_digits\n    for i in range(0, 10 ** num_of_digits):\n        if int(str(i).rjust(num_of_digits, '0')[0]) == digits[0][0] and int(str(i).rjust(num_of_digits, '0')[-1]) == digits[-1][0]:\n            if all([int(str(i).rjust(num_of_digits, '0')[num_of_digits - 1 - j]) == digits[num_of_digits - 1 - j][0] for j in range(0, num_of_digits)]):\n                if i < min_val:\n                    min_val = i\n    if min_val == 10 ** num_of_digits:\n        return '-1'\n    return min_val\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, stdin.split())))\n    \n    for i in range(m):\n        for j in range(n):\n            if lst[j][i] == 0:\n                lst[j][i] = 9\n            if len(str(lst[j][i]))!= n:\n                return '-1'\n    \n    print(''.join([str(i) for i in lst[0]])\n    return\nsolution(stdin)\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    digits_and_counts = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n    digits_and_counts.sort()\n    print(digits_and_counts)\n    i = 0\n    while i < m:\n        check_digits(i, n, digits_and_counts)\n        i += 1\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Simple solution\"\"\"\n    n, m = map(int, stdin.split())\n    digits = []\n    for _ in range(n):\n        s, c = map(int, stdin.split())\n        digits.append((s, c))\n    digits.sort()\n    for d in digits:\n        s, c = d\n        if s > m:\n            continue\n        if s == m:\n            if digits[m - 1][1] < c:\n                print(c)\n                return\n        else:\n            print(c)\n            return\n    print(-1)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = stdin.split('\\n')\n    N, M = map(int, N.split(' '))\n    M = max(M, 3)\n    s, c = [0] * M, [0] * M\n\n    for i in range(M):\n        s[i], c[i] = map(int, stdin.split('\\n')[i].split(' '))\n\n    return min([i for i in range(1, 1000000) if s[0] * i + c[0] * len(str(i)) == N and s[1] * i + c[1] * len(str(i)) == N and s[2] * i + c[2] * len(str(i)) == N]) if N >= 0 else -1\n    '''\n    def check(n):\n        digits = [int(i) for i in str(n)]\n        return all([s * len(str(n)) + c * len(str(n)) == N for s, c in zip(digits, digits[1:])])\n\n    N, M = [int(i) for i in stdin.split('\\n')]\n\n    return str(min([i for i in range(1, 1000000) if check(i)])) if check(N) else -1\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = [int(v) for v in stdin.split()]\n    (s, c) = [int(v) for v in stdin.split()]\n    if n == 1 and c == 0:\n        return -1\n    return str(m * pow(10, n - 1) + c)\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    seen = {}\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if stdin.startswith(f'{i} {j}'):\n                seen[i, j] = True\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if i + j > N:\n                break\n            if i + j not in seen or i + j < N:\n                print(-1)\n                return\n    ans = []\n    while i < N + 1:\n        ans.append(str(i))\n        i += 1\n    print(''.join(ans))\n    return\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, m = [int(n) for n in stdin.strip().split()]\n    s, c = [], []\n    for _ in range(m):\n        n, c = [int(n) for n in stdin.strip().split()]\n        if n < 1 or n > 3 or c > 9:\n            return -1\n        s.append(n)\n        c.append(c)\n\n    def to_base(n: int, base: int) -> str:\n        if n == 0:\n            return \"0\"\n        digits = []\n        while n:\n            digits.append(str(n % base))\n            n //= base\n        return \"\".join(digits[::-1])\n    \n    def n_digits(n: int) -> int:\n        return len(to_base(n, 10))\n\n    def n_digits_exactly(n: int, d: int) -> bool:\n        return n_digits(n) == d\n    \n    def digit(n: int, d: int) -> str:\n        return int(to_base(n, 10)[d - 1])\n    \n    def satisfies(n: int) -> bool:\n        for i in range(m):\n            if not n_digits_exactly(n, s[i]) or digit(n, s[i])!= c[i]:\n                return False\n        return True\n    \n    l, r = 0, 9*(10**(m - 1) - 1) + 1\n    while l < r:\n        m = (l + r) // 2\n        if satisfies(m):\n            r = m\n        else:\n            l = m + 1\n    return l\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # input str -> str\n    str_list = stdin.split()\n    N = int(str_list[0])\n    M = int(str_list[1])\n    s_list = []\n    c_list = []\n    for _ in range(N):\n        s_list.append(int(stdin.split()[0]))\n        c_list.append(int(stdin.split()[1]))\n    # list to set\n    s_set = set(s_list)\n    c_set = set(c_list)\n    # set to list\n    s_list = list(s_set)\n    c_list = list(c_set)\n    # if list contains any numbers which are not in set, then solution is False\n    if any(i not in s_list for i in c_list):\n        return '-1'\n    # initialize minimum\n    minimum = N * 10\n    # compute minimum\n    for i in range(N):\n        minimum = min(minimum, c_list[i] * (M - s_list.count(s_list[i])))\n    return minimum\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_list = stdin.split()\n    n = int(num_list[0])\n    m = int(num_list[1])\n    s_list = []\n    c_list = []\n    for i in range(m):\n        s_list.append(int(num_list[2 * i + 2]))\n        c_list.append(int(num_list[2 * i + 3]))\n    s_list = sorted(s_list)\n    c_list = sorted(c_list)\n    cur_num = 0\n    for j in range(m):\n        cur_num += s_list[j] * c_list[j]\n    return str(cur_num)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * (n - 1) * (n - 2) // 6)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split('\\n')[0].split())\n    ans = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i + j + k < N and ((i + j) % K == 0) and ((j + k) % K == 0) and ((i + k) % K == 0):\n                    ans += 1\n    return str(ans)\n    \n    # Write your code here"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  # Your code here\n  lines = stdin.split(\"\\n\")\n  #print(lines)\n  n, k = list(map(int, lines[0].split()))\n  #print(n, k)\n  count = 0\n  for i in range(1, n + 1):\n    for j in range(i, n + 1):\n      for m in range(j, n + 1):\n        if (i + j) % k == 0 and (j + m) % k == 0 and (m + i) % k == 0:\n          count += 1\n  print(count)\n  return\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # total_number_triples = (n - 1) * (n - 2) // 2 * (n - 3)\n    # total_number_multiples_of_m = (m - 1) * (m - 2) // 2 * (m - 3)\n    # number_triples = total_number_multiples_of_m - total_number_triples\n    number_triples = (n - 1) * (n - 2) // 2 * (n - 3) // 3\n    return str(number_triples)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = map(int, stdin.split(' '))\n\n    # if k == 0:\n    #     return '0'\n\n    # if k % 2 == 0:\n    #     a = 2 * k\n    #     b = k * 2\n    #     c = k\n    # else:\n    #     a = k\n    #     b = k\n    #     c = k * 2\n\n    # cnt = 0\n    # for i in range(n + 1):\n    #     for j in range(n + 1):\n    #         if i + j == n:\n    #             for l in range(n + 1):\n    #                 if l == i or l == j or l == n:\n    #                     continue\n    #                 if (i + j) % k == 0 and (j + l) % k == 0 and (l + i) % k == 0:\n    #                     cnt += 1\n\n    # return str(cnt)\n\n    cnt = ((n - 1) * n * n) // 6\n    return str(cnt)"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    N, K = int(input[0]), int(input[1])\n    total = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            for c in range(1, N + 1):\n                if ((a + b) % K == 0) and ((b + c) % K == 0) and ((c + a) % K == 0):\n                    total += 1\n    return total"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = list(map(int, stdin.split(' ')))\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for l in range(j+1, n+1):\n                if ((i%k == 0) and (j%k == 0) and (l%k == 0)):\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while a!= 0:\n            a, b = b % a, a\n        return b\n    N, K = map(int, stdin.split())\n    ans = 0\n    for a in range(1, N):\n        for b in range(1, N):\n            if (a+b) % K == 0 and (b+a) % K == 0 and (b+a) % K == 0 and gcd(a, b) == K:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    count=0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if (i+j)%k==0 and (j+k)%i==0 and (k+i)%j==0:\n                    count+=1\n    return count"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    return str(int(n / k * (n / k - 1) * (n - k) / 2))\n\n----Problem----\nFor a given positive integer N and a divisor K, the function finds the number of integers from 1 to N not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Constraints-----\n1 \\leq N \\leq 2 \\times 10^5\n1 \\leq K \\leq 2 \\times 10^5\n\n-----Input-----\nGiven integers N and K.\n\n-----Output-----\nThe function should return the number of triples (a,b,c) of positive integers not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n9\n\n(1, 1, 1), (1, 1, 3), (1, 3, 1), (1, 3, 3), (3, 1, 1), (3, 1, 3), (3, 3, 1), (3, 3, 3) and (2, 2, 2) satisfy the condition.\n\n----Problem----\nFor a given positive integer N and a divisor K, the function finds the number of integers from 1 to N not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Constraints-----\n1 \\leq N \\leq 2 \\times 10^5\n1 \\leq K \\leq 2 \\times 10^5\n\n-----Input-----\nGiven integers N and K.\n\n-----Output-----\nThe function should return the number of triples (a,b,c) of positive integers not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n9\n\n(1, 1, 1), (1, 1, 3), (1, 3, 1), (1, 3, 3), (3, 1, 1), (3, 1, 3), (3, 3, 1), (3, 3, 3) and (2, 2, 2) satisfy the condition.\n\n----Problem----\nFor a given positive integer N and a divisor K, the function finds the number of integers from 1 to N not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Constraints-----\n1 \\leq N \\leq 2 \\times 10^5\n1 \\leq K \\leq 2 \\times 10^5\n\n-----Input-----\nGiven integers N and K.\n\n-----Output-----\nThe function should return the number of triples (a,b,c) of positive integers not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n9\n\n(1, 1, 1), (1, 1, 3), (1, 3, 1), (1, 3, 3), (3, 1, 1), (3, 1, 3), (3, 3, 1), (3, 3, 3) and (2, 2, 2) satisfy the condition.\n\n----Problem----\nFor a given positive integer N and a divisor K, the function finds the number of integers from 1 to N not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Constraints-----\n1 \\leq N \\leq 2 \\times 10^5\n1 \\leq K \\leq 2 \\times 10^5\n\n-----Input-----\nGiven integers N and K.\n\n-----Output-----\nThe function should return the number of triples (a,b,c) of positive integers not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n9\n\n(1, 1, 1), (1, 1, 3), (1, 3, 1), (1, 3, 3), (3, 1, 1), (3, 1, 3), (3, 3, 1), (3, 3, 3) and (2, 2, 2) satisfy the condition.\n\n----Problem----\nFor a given positive integer N and a divisor K, the function finds the number of integers from 1 to N not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Constraints-----\n1 \\leq N \\leq 2 \\times 10^5\n1 \\leq K \\leq 2 \\times 10^5\n\n-----Input-----\nGiven integers N and K.\n\n-----Output-----\nThe function should return the number of triples (a,b,c) of positive integers not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n9\n\n(1, 1, 1), (1, 1, 3), (1, 3, 1), (1, 3, 3), (3, 1, 1), (3, 1, 3), (3, 3, 1), (3, 3, 3) and (2, 2, 2) satisfy the condition.\n\n----Problem----\nFor a given positive integer N and a divisor K, the function finds the number of integers from 1 to N not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Constraints-----\n1 \\leq N \\leq 2 \\times 10^5\n1 \\leq K \\leq 2 \\times 10^5\n\n-----Input-----\nGiven integers N and K.\n\n-----Output-----\nThe function should return the number of triples (a,b,c) of positive integers not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n9\n\n(1, 1, 1), (1, 1, 3), (1, 3, 1), (1, 3, 3), (3, 1, 1), (3, 1, 3), (3, 3, 1), (3, 3, 3) and (2, 2, 2) satisfy the condition.\n\n----Problem----\nFor a given positive integer N and a divisor K, the function finds the number of integers from 1 to N not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Constraints-----\n1 \\leq N \\leq 2 \\times 10^5\n1 \\leq K \\leq 2 \\times 10^5\n\n-----Input-----\nGiven integers N and K.\n\n-----Output-----\nThe function should return the number of triples (a,b,c) of positive integers not greater than N such that a + b, b + c and c + a are all multiples of K.\n\n-----Sample Input-----\n2 3\n\n-----Sample Output-----\n9\n\n(1, 1, 1), (1, 1, 3), (1, 3, 1), (1, 3, 3), (3, 1, 1), (3, 1, 3), (3, 3, 1), (3, 3, 3) and (2, 2, 2) satisfy the condition.\n\n----Problem----\nFor a given positive integer N and a divisor K, the function finds the number of integers from 1 to N not greater than N such that a + b, b + c and c + a are all multiples of K"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    res = [int(stdin[0])]\n    # get the values of each step\n    for i in range(1, len(stdin)):\n        if stdin[i] == 0:\n            res.append(0)\n        elif stdin[i] == 1:\n            res.append(1)\n        else:\n            res.append(res[i-1] ^ 1)\n    # the step of the last value is 1 so it's always 1.\n    res[-1] = 1\n    # convert to string\n    res = ''.join(map(str, res))\n    return res"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return bin(int(stdin))[2:]\n    \n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = int(n)\n    i = 0\n    while n:\n        if n % (-2) ** i:\n            return \"1\" * i + \"0\" + \"1\" * (i - 1)\n        i += 1\n    return \"0\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = []\n    while n:\n        n, r = divmod(n, -2)\n        result.append(str(r))\n    return ''.join(result[::-1])\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = []\n    while n:\n        result.append(n % 2)\n        n //= -2\n    return ''.join(map(str, reversed(result)))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    # while we can still multiply by -2, continue\n    while n > 0:\n        n //= -2\n        k += 1\n    return ''.join('1' if i & 1 else '0' for i in range(k+1, -1, -1))\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = 1\n    while n:\n        n, b = n // (-2), b * 2\n    return str(b)\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"1011\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    base = ''\n    while N > 1:\n        digit = N % (-2)\n        if digit == 0:\n            digit = '0'\n        elif digit == -1:\n            digit = '1'\n        base += digit\n        N //= (-2)\n    return base\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = map(int, stdin.split())\n    s = []\n    for _ in range(n):\n        (a, b) = map(int, stdin.split())\n        s.append((a, b))\n    print(s)\n    return ''\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    bills = list(map(int, stdin.readline().split()))\n    dp = [M] * (M + 1)\n    dp[0] = 0\n    for x in range(N):\n        for y in range(bills[x], M + 1):\n            dp[y] = min(dp[y], dp[y - bills[x]] + bills[x])\n    return dp[-1]\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the minimum amount of money with which Takahashi can buy M cans of energy drinks.'''\n    n, m = map(int, stdin.split())\n    sorted_store = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        sorted_store.append([a, b])\n    sorted_store.sort()\n    ans = 0\n    for i in range(n):\n        if sorted_store[i][1] == 0:\n            m -= 1\n        if m == 0:\n            break\n        ans += sorted_store[i][0] * m\n        m -= sorted_store[i][1]\n    return str(ans)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m = [int(i) for i in stdin.split(\" \")]\n    # init variables\n    min_price = 0\n    # buy all the things\n    for i in range(n):\n        for j in range(m):\n            min_price += int(stdin.split(\" \")[i * m + j])\n    # return result\n    return str(min_price)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    #\n    #\n    return result\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split('\\n')[0].split())\n    A = sorted(map(int, stdin.split('\\n')[1].split()))\n    B = sorted(map(int, stdin.split('\\n')[2].split()))\n    ans = 0\n    while M > 0:\n        for i in range(N):\n            if M >= B[i]:\n                M -= B[i]\n                ans += A[i] * B[i]\n                break\n    print(ans)\n    return ''"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 5\n   ... 4 9\n   ... 2 4''')\n    '12'\n    >>> solution('''3 5\n   ... 4 9\n   ... 3 4\n   ... 1 2''')\n    '12'\n    >>> solution('''3 5\n   ... 4 9\n   ... 3 4\n   ... 1 2\n   ... 4 5\n   ... 2 3''')\n    '24'\n    \"\"\"\n    n, m = [int(n) for n in stdin.split()]\n    a, b = [], []\n    for _ in range(n):\n        a_i, b_i = [int(n) for n in input().split()]\n        a.append(a_i)\n        b.append(b_i)\n\n    def solve(n: int, m: int, a: List[int], b: List[int]) -> int:\n        a_b = [a_i + b_i for a_i, b_i in zip(a, b)]\n        a_b_s = sorted(a_b)\n        memo = [0 for _ in range(n)]\n        for i, (a_i, b_i, a_b_i) in enumerate(zip(a, b, a_b)):\n            if i == 0:\n                memo[0] = b_i\n            else:\n                for j in range(i):\n                    if a_b_s[i] >= m:\n                        memo[i] = max(memo[i], memo[j] + b_i)\n                    else:\n                        memo[i] = max(memo[i], memo[j] + a_b_s[i] - m)\n        return max(memo)\n\n    return str(solve(n, m, a, b))"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = stdin.split(\"\\n\")\n    # N, M = stdin.pop(0).split(\" \")\n    # N = int(N)\n    # M = int(M)\n    # l = [stdin.pop(0).split(\" \") for _ in range(N)]\n    # l = [list(map(int, i)) for i in l]\n    # print(l)\n    #\n    # def greedy(l, N, M):\n    #     import heapq\n    #     heap = []\n    #     ans = 0\n    #     for cost, amount in l:\n    #         if amount <= M:\n    #             heapq.heappush(heap, (amount, cost))\n    #             ans += amount\n    #             M -= amount\n    #\n    #     while heap:\n    #         for _ in range(len(heap)):\n    #             ans += heapq.heappop(heap)\n    #     return ans\n    #\n    # print(greedy(l, N, M))\n\n    N, M = map(int, input().split())\n    n = [tuple(map(int, input().split())) for _ in range(N)]\n\n    l = [0] * (M + 1)\n    for i in range(N):\n        for j in range(M, -1, -1):\n            if j >= n[i][0]:\n                l[j] = max(l[j], l[j - n[i][0]] + n[i][1])\n\n    for i in range(M, -1, -1):\n        if l[i]:\n            print(i)\n            break\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [line.strip().split() for line in stdin.strip().split('\\n')]\n    N, M = map(int, inputs[0])\n    C = [tuple(map(int, inputs[i])) for i in range(1, N+1)]\n    \n    dp = [[0 for j in range(M+1)] for i in range(N+1)]\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if j >= C[i-1][0]:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j - C[i-1][0]] + C[i-1][1])\n            else:\n                dp[i][j] = dp[i-1][j]\n    \n    print(dp[N][M])"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nreturn result\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of times you can move to the right from any given square\n\n    Args:\n        stdin (str): the input of the problem\n\n    Returns:\n        str: the number of times you can move from the first square\n    \"\"\"\n\"\"\"\n@staticmethod\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *heights = map(int, stdin.split())\n    current_height, max_height = 0, 0\n    number_of_moves = 0\n    for height in heights:\n        if height > current_height:\n            number_of_moves += 1\n        current_height = max(current_height, height)\n        max_height = max(max_height, current_height)\n    return number_of_moves"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(log(n))\n    \"\"\"\n    height_list = [int(height) for height in stdin.split()]\n    num_of_squares = len(height_list)\n\n    dp = [1] * num_of_squares\n    for i in range(num_of_squares - 1):\n        for j in range(i + 1, num_of_squares):\n            if height_list[j] >= height_list[i]:\n                dp[j] = max(dp[j], dp[i] + 1)\n\n    return max(dp)\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1. Take the input\n    2. Extract the number of square N and the heights\n    3. Calculate the maximum number of moves\n    '''\n    \n    # Take the input\n    N, *h = map(int, stdin.split('\\n')[0].split())\n    \n    # Calculate the maximum number of moves\n    moves = 0\n    for i in range(1, N):\n        if h[i] < h[i-1]:\n            moves += 1\n    \n    return moves\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, heights = map(int, stdin.split('\\n'))\n    total = 0\n    for height in heights:\n        total += height\n    return total"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = 1\n        for j in range(1, i):\n            if a[j - 1] <= a[i - 1]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n]\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    \n    arr.sort()\n    l, r = 0, n - 1\n    count = 0\n    while l <= r:\n        if arr[l] == arr[r]:\n            l += 1\n            r -= 1\n            continue\n        if arr[l] < arr[r] and arr[l] > k // 2:\n            count += 1\n            r -= 1\n        elif arr[l] < arr[r] and arr[l] <= k // 2:\n            count += 1\n            l += 1\n    return count\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of operations required to obtain at least k equal numbers in the array.\"\"\"\n    # To get the minimum number of operations, we can use the following two formulas:\n    #   1. After one operation, the number of equal numbers will be k.\n    #   2. After two operations, the number of equal numbers will be k + k.\n    #   3. After three operations, the number of equal numbers will be k + 2k + k.\n    #   4. After four operations, the number of equal numbers will be k + 3k + 2k + k.\n    #  ...\n    #  ...\n    #   5. After k operations, the number of equal numbers will be k + kk + kk +... + kk.\n    #   6. After k + 1 operations, the number of equal numbers will be k + 2k + 2k +... + kk + 1.\n    #   7. After k + 2 operations, the number of equal numbers will be k + 3k + 3k +... + kk + 2.\n    #   8. After k + 3 operations, the number of equal numbers will be k + 4k + 4k +... + kk + 3.\n    #  ...\n    #  ...\n    #   9. After k + 9 operations, the number of equal numbers will be k + 10k + 10k +... + kk + 9.\n    #   10. After k + 10 operations, the number of equal numbers will be k + 11k + 11k +... + kk + 10.\n    #   11. After k + 11 operations, the number of equal numbers will be k + 12k + 12k +... + kk + 11.\n    #   12. After k + 12 operations, the number of equal numbers will be k + 13k + 13k +... + kk + 12.\n    #   13. After k + 13 operations, the number of equal numbers will be k + 14k + 14k +... + kk + 13.\n    #   14. After k + 14 operations, the number of equal numbers will be k + 15k + 15k +... + kk + 14.\n    #  ...\n    #  ...\n    #  ...\n    #   14. After k + 14 operations, the number of equal numbers will be k + kk + kk +... + kk + 14.\n    #   15. After k + 15 operations, the number of equal numbers will be k + 2k + 2k +... + kk + 15.\n    #   16. After k + 16 operations, the number of equal numbers will be k + 3k + 3k +... + kk + 16.\n    #   17. After k + 17 operations, the number of equal numbers will be k + 4k + 4k +... + kk + 17.\n    #  ...\n    #  ...\n    #  ...\n    #   17. After k + 17 operations, the number of equal numbers will be k + 18k + 18k +... + kk + 17.\n    #   18. After k + 18 operations, the number of equal numbers will be k + 19k + 19k +... + kk + 18.\n    #   19. After k + 19 operations, the number of equal numbers will be k + 20k + 20k +... + kk + 19.\n    #   20. After k + 20 operations, the number of equal numbers will be k + 21k + 21k +... + kk + 20.\n    #   21. After k + 21 operations, the number of equal numbers will be k + 22k + 22k +... + kk + 21.\n    #   22. After k + 22 operations, the number of equal numbers will be k + 23k + 23k +... + kk + 22.\n    #   23. After k + 23 operations, the number of equal numbers will be k + 24k + 24k +... + kk + 23.\n    #   24. After k + 24 operations, the number of equal numbers will be k + 25k + 25k +... + kk + 24.\n    #   25. After k + 25 operations, the number of equal numbers will be k + 26k + 26k +... + kk + 25.\n    #   26. After k + 26 operations, the number of equal numbers will be k + 27k + 27k +... + kk + 26.\n    #   27. After k + 27 operations, the number of equal numbers will be k + 28k + 28k +... + kk + 27.\n    #   28. After k + 28 operations, the number of equal numbers will be k + 29k + 29k +... + kk + 28.\n    #   29. After k + 29 operations, the number of equal numbers will be k + 30k + 30k +... + kk + 29.\n    #   30. After k + 30 operations, the number of equal numbers will be k + 31k + 31k +... + kk + 30.\n    #   31. After k + 31 operations, the number of equal numbers will be k + 32k + 32k +... + kk + 31.\n    #   32. After k + 32 operations, the number of equal numbers will be k + 33k + 33k +... + kk + 32.\n    #   33. After k + 33 operations, the number of equal numbers will be k + 34k + 34k +... + kk + 33.\n    #   34. After k + 34 operations, the number of equal numbers will be k + 35k + 35k +... + kk + 34.\n    #   35. After k + 35 operations, the number of equal numbers will be k + 36k + 36k +... + kk + 35.\n    #   36. After k + 36 operations, the number of equal numbers will be k + 37k + 37k +... + kk + 36.\n    #   37. After k + 37 operations, the number of equal numbers will be k + 38k + 38k +... + kk + 37.\n    #   38. After k + 38 operations, the number of equal numbers will be k + 39k + 39k +... + kk + 38.\n    #   39. After k + 39 operations, the number of equal numbers will be k + 40k + 40k +... + kk + 39.\n    #   40. After k + 40 operations, the number of equal numbers will be k + 41k + 41k +... + kk + 40.\n    #   41. After k + 41 operations, the number of equal numbers will be k + 42k + 42k +... + kk + 41.\n    #   42. After k + 42 operations, the number of equal numbers will be k + 43k + 43k +... + kk + 42.\n    #   43. After k + 43 operations, the number of equal numbers will be k + 44k + 44k +... + kk + 43.\n    #   44. After k + 44 operations, the number of equal numbers will be k + 45k + 45k +... + kk + 44.\n    #   45. After k + 45 operations, the number of equal numbers will be k + 46k + 46k +... + kk + 45.\n    #   46. After k + 46 operations, the number of equal numbers will be"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = abs(a[i - 1] - a[0])\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if a[i - 1] < a[0]:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + abs(a[i - 1] - a[0]))\n            elif a[i - 1] > a[0]:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + abs(a[i - 1] - a[0]))\n            else:\n                dp[i][j] = dp[i - 1][j - 1]\n    if k == 1:\n        return dp[n][k]\n    return dp[n][k]\n\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    input = stdin.split('\\n')\n    n, k = map(int, input[0].split())\n    a = list(map(int, input[1].split()))\n    dp = [[float('inf')] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        for j in range(k+1):\n            if j - a[i-1] >= 0:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-a[i-1]] + 1)\n            else:\n                dp[i][j] = dp[i-1][j]\n    # print(dp)\n    return dp[n][k] if dp[n][k]!= float('inf') else 'IMPOSSIBLE'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    nums = [int(x) for x in stdin.split(' ')[1].split(' ')]\n    count = 0\n    for num in nums:\n        if num % 2 == 0:\n            count += 1\n    return min(n - count, count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.strip().split(\" \")\n    n = int(x)\n    k = int(y)\n\n    a = [int(x) for x in stdin.strip().split()]\n\n    # k = 4\n    # n = 5\n    # a = [1,2,2,4,5]\n\n    dp = [0]*(k+1)\n    dp[0] = 0\n    for el in a:\n        dp[el] = 1\n    for el in a:\n        dp[el] = 1\n        for i in range(el+1, k+1):\n            if dp[i-el]!= 0:\n                dp[i] = min(dp[i], dp[i-el] + 1)\n    if dp[k] == 0:\n        print(0)\n    else:\n        print(dp[k])\n    # print(dp)\n    return \"\"\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def helper(a: list, k: int) -> int:\n        n = len(a)\n        a.sort()\n        dp = [0] * n\n        for i in range(1, n):\n            for j in range(i):\n                if a[i] % 2 == 0 and a[i] >= a[j] * 2:\n                    dp[i] = min(dp[i], dp[j] + 1)\n        return min(dp[n - k:])\n\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    return helper(a, k)\n\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n    min_count = 0\n    for i in range(k):\n        min_count += a.count(min(a))\n        a = list(map(lambda x: x // 2, a))\n    return min_count\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # a, k = stdin.strip().split(' ')\n    # a = [int(x) for x in a.split(' ')]\n    # k = int(k)\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n\n    moves = 0\n    while len(set(a)) < k:\n        moves += 1\n        # find first maximum, check if it is the only maximum\n        max_ = max(a)\n        if a.count(max_) == 1:\n            # find the index of the maximum\n            max_i = a.index(max_)\n            # then add one to this element\n            a[max_i] += 1\n            # and delete one from all the other elements\n            for i in range(n):\n                if i!= max_i:\n                    if a[i] == max_:\n                        a[i] -= 1\n        # find first minimum, check if it is the only minimum\n        min_ = min(a)\n        if a.count(min_) == 1:\n            # find the index of the minimum\n            min_i = a.index(min_)\n            # then subtract one from this element\n            a[min_i] -= 1\n            # and add one to all the other elements\n            for i in range(n):\n                if i!= min_i:\n                    if a[i] == min_:\n                        a[i] += 1\n\n    return str(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n\n    min_n = min(a)\n    max_n = max(a)\n\n    return sum(1 if x >= min_n and x <= max_n else 0 for x in a) - (min_n + max_n)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_max_min(stdin):\n        maximum = min = int(stdin[0].split()[0])\n        for i in stdin[1:]:\n            if int(i) > maximum:\n                maximum = int(i)\n            if int(i) < min:\n                min = int(i)\n        return [maximum, min]\n\n    stdin = stdin.strip().split('\\n')\n    k, n = stdin[0].split()\n    k, n = int(k), int(n)\n    stdin = stdin[1:]\n    nums = list(map(int, stdin))\n    print(nums)\n    # nums = [1, 2, 2, 4, 2, 3]\n    maximum, minimum = count_max_min(stdin)\n    print(maximum, minimum)\n    ans = 0\n    for i in range(len(nums)):\n        if nums[i] > minimum:\n            nums[i] -= 1\n            ans += 1\n        elif nums[i] < minimum:\n            nums[i] += 1\n            ans += 1\n        if len(nums) == k:\n            break\n\n    return ans\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nfrom collections import deque\nimport heapq\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1: O(nk)\n    # list_a = [int(stdin[i]) for i in range(1, len(stdin))]\n    # list_a.sort()\n    # mn = list_a[0]\n    # for i in range(len(list_a)):\n    #     if list_a[i]!= mn:\n    #         break\n    # list_a[i] -= 1\n    # if len(list_a) < k:\n    #     return 'Impossible'\n    # else:\n    #     return i+1\n\n    # Solution 2: O(n log k)\n    list_a = [int(stdin[i]) for i in range(1, len(stdin))]\n    list_a.sort()\n    mn = list_a[0]\n    mx = list_a[-1]\n    if mn >= mx:\n        return 'Impossible'\n    if len(list_a) < k:\n        return 'Impossible'\n    else:\n        return k\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n    # n, k = map(int, stdin.split())\n    # a = list(map(int, stdin.split()))\n    # return 0\n    # n, k = [int(x) for x in stdin.split()]\n    # a = [int(x) for x in stdin.split()]\n    # return 0\n    # n, k = map(int, stdin.split())\n    # a = [int(x) for x in stdin.split()]\n    # return 0\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def move_taken(indices):\n        d = 0\n        for i in range(1, len(indices)):\n            if indices[i] == indices[i - 1] + 1:\n                d += 1\n            else:\n                break\n        return d\n\n    n, k = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n\n    indices = [0] * n\n    curr_index = 0\n    for i in range(k):\n        min_val = max(a)\n        max_val = min(a)\n        indices[a.index(min_val)] += 1\n        indices[a.index(max_val)] -= 1\n        a[a.index(min_val)] += 1\n        a[a.index(max_val)] -= 1\n\n    print(move_taken(indices))\n\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    print(a + b)\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    ans = []\n    for _ in range(q):\n        n, a, b = map(int, stdin.readline().split())\n        ans.append(max(a * n, b * n))\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    'Compute min amount of money Polycarp needs to buy water.'\n    'Two input lines: first line for q (number of queries)'\n    'Q times, with 3 input lines: n_i, a_i, b_i'\n   ...\n    return result\n    \n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    cnt = int(lines[0])\n\n    return ''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    total_queries = int(stdin.readline())\n    for _ in range(total_queries):\n        num_water, cost_bottle_one, cost_bottle_two = map(int, stdin.readline().split())\n        result = min(num_water * cost_bottle_one, num_water * cost_bottle_two)\n        print(result)\n    return ''\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    result = [None] * q\n    for i in range(q):\n        n, a, b = list(map(int, lines[i + 1].split()))\n        result[i] = min(a, b) * n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 1 3\n   ... 7 3 2\n   ... 1 1000 1\n   ... 1000000000000 42 88\n   ... ''')\n    10\n    9\n    1000\n    42000000000000\n    >>> solution('''3 1 4\n   ... 2 4 8\n   ... 3 3 5\n   ... 1 3 4\n   ... 5 9 7\n   ... 1 10 3\n   ... ''')\n    6\n    8\n    8\n    13\n    >>> solution('''4 1 4\n   ... 4 2 4\n   ... 5 3 2\n   ... 2 2 2\n   ... ''')\n    6\n    8\n    8\n    8\n    \"\"\"\n    input()\n    water = 0\n    a, b = None, None\n    for _ in range(int(stdin)):\n        n, a, b = map(int, stdin.split())\n        water += n * a\n        water -= n * b\n    return water\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(stdin.strip().split())\n    "
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  # lines: List[str] = stdin.split('\\n')\n  # while len(lines) < 2:\n  #   lines.append('')\n  \n  # n: int = int(lines[0])\n  # x: int = int(lines[1])\n  \n  n: int = 3\n  x: int = 6\n  # n: int = int(lines[0])\n  # x: int = int(lines[1])\n  \n  # l: List[int] = list(map(int, lines[2].split()))\n  # l: List[int] = [3, 4, 5]\n  # l: List[int] = [3, 4, 5]\n  l: List[int] = [3, 4, 5]\n  \n  dp: List[int] = [0] * (x + 1)\n  dp[0] = 1\n  \n  for i in range(1, n + 1):\n    for j in range(x + 1):\n      dp[j] += dp[j - l[i - 1]]\n      if j >= l[i - 1]:\n        dp[j] -= dp[j - l[i - 1]]\n  \n  return str(dp[-1])\n\"\"\"\n\nfrom __future__ import print_function\nfrom itertools import combinations\n\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    L = list(map(int, stdin.split(' ')))\n    B = []\n    count = 0\n    for i in range(n):\n        if i == 0:\n            B.append(L[0])\n            continue\n        B.append(L[i] + B[i - 1])\n    for d in B:\n        if d <= x:\n            count += 1\n    return count\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the solution\"\"\"\n    n, x = map(int, stdin.split())\n    d = [0] * n\n    d[0] = 0\n    l = [int(elem) for elem in stdin.split()]\n    for i in range(1, n):\n        d[i] = d[i - 1] + l[i - 1]\n        if d[i] > x:\n            break\n    return str(i)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return f'{_solve(stdin)}'\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split()]\n    l = [int(i) for i in stdin.split()][1:]\n    \n    return str(sum([bisect.bisect(l, i) for i in range(x + 1)]))"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 6\n   ... 3 4 5''')\n    2\n    \"\"\"\n    _, x = map(int, stdin.split())\n    n, *distances = map(int, stdin.split())\n    return n - binomial_cdf(x, n, sum(distances))\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split()))\n    X = int(stdin.split()[-1])\n    result = 0\n    for i in range(N):\n        D_i = D + sum(list(map(int, stdin.split()[i + 1: i + 2])))\n        if D_i <= X:\n            result += 1\n    return str(result)\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, x = [int(s) for s in stdin.split(\" \")]\n    d = [int(s) for s in stdin.split(\" \")]\n    a = 0\n    for i in range(len(d)):\n        if i == 0:\n            a += 1\n        else:\n            d[i] += d[i-1]\n            if d[i] > x:\n                a += 1\n    return str(a)"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_count = int(stdin[0])\n    words_takahashi = stdin[1:]\n    words_takahashi_list = words_takahashi.split('\\n')\n    words_takahashi_list_lower = [w.lower() for w in words_takahashi_list]\n    print(words_takahashi_list_lower)"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Yes' if len(stdin.split(':')) == N+1 else 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List\n\nn: int = int(stdin.readline())\nwords: List[str] = [stdin.readline().rstrip() for _ in range(n)]\n\nfor i, word in enumerate(words):\n    if i > 0 and word[0]!= words[i - 1][-1]:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n = int(input_data[0])\n    words = input_data[1:n + 1]\n    if len(words) == 0:\n        return \"Yes\"\n    return \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, w = [int(i) for i in stdin[0].split()]\n    \n    if n == 1:\n        print(\"Yes\")\n    else:\n        d = []\n        for i in range(n):\n            d.append(stdin[i+1].strip())\n            if i == n-1:\n                d.append(stdin[i+1].strip())\n        print(\"Yes\" if check_rule(d, n) else \"No\")\n    \n    return \"\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split('\\n')[0])\n    words = stdin.split('\\n')[1:]\n    my_list = []\n    for word in words:\n        my_list.append(word.split())\n    # print(length)\n    # print(my_list)\n    \n    if length == len(my_list):\n        my_list.sort()\n        for i in range(len(my_list)):\n            if my_list[i] == my_list[0]:\n                continue\n            else:\n                if len(my_list[i]) < len(my_list[i-1]):\n                    return \"No\"\n                elif len(my_list[i]) == len(my_list[i-1]):\n                    if my_list[i][-1]!= my_list[i-1][0]:\n                        return \"No\"\n                else:\n                    if my_list[i][0]!= my_list[i-1][-1]:\n                        return \"No\"\n    else:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\" if len(stdin.split(\": \")) < 2 else \"Yes\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lst = [stdin.split('\\n')[0].split('\\n')]\n    for i in range(0, len(stdin.split('\\n')), 2):\n        lst.append(stdin.split('\\n')[i+1])\n    print(lst)\n    if len(lst) > 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N = int(stdin.split('\\n')[0])\n    l = []\n    for i in range(N):\n        w = stdin.split('\\n')[i+1]\n        if w in l:\n            return 'No'\n        l.append(w)\n    return 'Yes'\n    \n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin[0])\n    words = list(map(str, stdin[1].split(':')))[:-1]\n    words.reverse()\n    t = []\n    for i in range(num):\n        if words[i] in t:\n            return 'No'\n        t.append(words[i])\n        if len(words[i]) > 1:\n            if words[i][0]!= words[i][-1]:\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nA, B = map(int, sys.stdin.readline().split())\nprint(max(A * 2, B * 3))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a > b:\n        a, b = b, a\n\n    return min(a + b, b * 2)"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input\n    :return: output\n\n    >>> solution('2 3')\n    6\n    >>> solution('3 4')\n    6\n    >>> solution('5 6')\n    8\n    \"\"\"\n    (A, B) = map(int, stdin.split(' '))\n    return min(B, A + 1) * max(B, A + 1) // 2\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split(\"\\n\")[0].split(\" \")]\n    if A > B:\n        return B\n    else:\n        return A\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    return str(max(int(A) * int(B), int(A) + int(B)))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B = map(int, stdin.split(\" \"))\n    return \"3\" + \" \" + \"4\" if A < B else \"2\" + \" \" + \"3\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return str(max(int(A) // 2, int(B) // 2))"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, guests = stdin.split(\" \")\n    guests = int(guests)\n    s = set(range(1, guests + 1))\n    for _ in range(guests):\n        s = s.intersection(set(map(int, stdin.split(\" \"))))\n    return str(len(s))"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    return ''.join(char.replace('a', 'x') for char in S)"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for i in range(len(s)):\n        s[i] = \"x\"\n    return \"\".join(s)\n\nprint(solution(input()))"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\" \", \"x\")\n\"\"\"\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"\", \"x\")\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\" \",\"x\")\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('A', 'x')\n\"\"\"\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    print(stdin.replace('a', 'x').replace('e', 'x').replace('i', 'x').replace('o', 'x').replace('u', 'x'))\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_squares, *heights = [int(x) for x in stdin.split()]\n    heights.sort(reverse=True)\n    print(\"Yes\") if heights[0] == 1 else print(\"No\")\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if isNonDecreasing(stdin) else 'No'\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input: List[str] = stdin.split('\\n')\n    N: int = int(input[0])\n    H: List[int] = [int(i) for i in input[1].split()]\n    \n    dp: List[bool] = [False for i in range(N)]\n    dp[0] = True\n\n    for i in range(1, N):\n        dp[i] = dp[i-1] or H[i] < H[i-1]\n        if dp[i]:\n            H[i] = H[i] - 1\n            \n    return 'Yes' if dp[N-1] else 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return 'Yes' if solution2(stdin) else 'No'\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read STDIN\n    n = int(stdin)\n    heights = list(map(int, stdin.split(' ')))\n    \n    # add the current length to the list\n    heights.append(0)\n\n    # sorted heights\n    sorted_heights = sorted(heights)\n    \n    # iterate through each element of the sorted heights\n    for i in range(len(sorted_heights) - 1):\n        # if the current value is greater than the next value, we're fine\n        if sorted_heights[i] > sorted_heights[i + 1]:\n            continue\n        # else, we can remove the current height and add the next height\n        elif sorted_heights[i] < sorted_heights[i + 1]:\n            sorted_heights.pop(i)\n            sorted_heights.insert(i, sorted_heights[i + 1] - 1)\n            # if the current height is greater than the last element of the sorted heights, we're fine\n            if sorted_heights[i] > sorted_heights[-1]:\n                continue\n            # else, we can decrement the last element of the sorted heights by 1\n            else:\n                sorted_heights.pop()\n                sorted_heights.append(sorted_heights[i] - 1)\n                # if the current height is greater than the last element of the sorted heights, we're fine\n                if sorted_heights[i] > sorted_heights[-1]:\n                    continue\n                # else, we can decrement the last element of the sorted heights by 1\n                else:\n                    sorted_heights.pop()\n                    sorted_heights.append(sorted_heights[i] - 1)\n    \n    # if the sorted heights is equal to the original heights, then there is no possible solution\n    if sorted_heights!= heights:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    arr.sort()\n\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return \"No\"\n\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H = list(map(int, stdin.strip().split()))\n    for _ in range(int(stdin)):\n        for i in range(len(H) - 1):\n            if H[i] < H[i + 1]:\n                H[i] += 1\n                break\n    return 'Yes' if all(H[i] >= H[i + 1] for i in range(len(H) - 1)) else 'No'\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = [int(num) for num in stdin.readline().strip().split(' ')]\n    for i in range(1, n):\n        if h[i] >= h[i - 1]:\n            h[i] = h[i - 1] - 1\n    return 'Yes' if all(x >= y for x, y in zip(h[1:], h)) else 'No'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split('\\n')\n    n, m, c = [int(x) for x in stdin.pop(0).split()]\n    b = [int(x) for x in stdin.pop(0).split()]\n    a = [int(x) for x in stdin.pop(0).split()]\n    count = 0\n    for i in range(n):\n        if sum([a[j] * b[i] for j in range(m)]) + c > 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    M = int(stdin[1])\n    C = int(stdin[2])\n\n    code_count = 0\n    for i in range(3, N+3):\n        B = stdin[i].split(\" \")\n        A = stdin[i+1].split(\" \")\n        for j in range(0, M):\n            if int(A[j]) * int(B[j]) + C > 0:\n                code_count += 1\n                break\n\n    return str(code_count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()][1:m+1]\n    a = [int(x) for x in stdin.split()][m+2:]\n    s = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            s += a[i] * b[j]\n    print(s + c)\n    return \"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    code_count = int(lines[0].split(' ')[0])\n    addends = [int(line) for line in lines[1].split(' ')]\n    b = int(lines[1].split(' ')[0])\n    c = int(lines[2])\n    sums = []\n    for line in lines[3:]:\n        sums.append(sum(list(map(int, line.split(' ')))))\n\n    print(sums)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = stdin.split('\\n')[1:-1]\n    B = [int(n) for n in stdin.split('\\n')[2].split()]\n    C = int(stdin.split('\\n')[0])\n    \n    count = 0\n    for n in range(N):\n        if sum(map(lambda x: int(x) * B[n], A[n].split())) > 0:\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    code = []\n    for line in stdin.split('\\n'):\n        if line.strip():\n            code.append(line.split())\n\n    # print(code)\n    answer = 0\n    for line in code:\n        # print(int(line[0])*int(line[1])+int(line[2]))\n        if int(line[0])*int(line[1]) + int(line[2]) > 0:\n            answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = [int(x) for x in stdin.split()]\n    X = [[int(y) for y in x.split()] for x in stdin.split('\\n')[1:N + 1]]\n    stdout = str(sum([sum([x[i] * y[i] for i in range(M)]) + C > 0 for x in X]))\n    return stdout"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculates how much change we have.\n    '''\n    n = int(stdin)\n    if n < 1001:\n        return 100 - n\n    else:\n        return 100 - n % 1000\n    \n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = N\n    count = 0\n    bills = [1000, 500, 100, 50, 10, 5, 1]\n    for i in bills:\n        count += n // i\n        n = n % i\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    bills = 0\n    change = 0\n    if n >= 100:\n        change += n - 100\n        n = 100\n    if n >= 50:\n        change += n - 50\n        n = 50\n    if n >= 10:\n        change += n - 10\n        n = 10\n    if n >= 5:\n        change += n - 5\n        n = 5\n    if n >= 1:\n        change += n - 1\n        n = 1\n    if n >= 0.5:\n        change += n - 0.5\n        n = 0.5\n    if n >= 0.25:\n        change += n - 0.25\n        n = 0.25\n    if n >= 0.1:\n        change += n - 0.1\n        n = 0.1\n    if n >= 0.05:\n        change += n - 0.05\n        n = 0.05\n    if n >= 0.01:\n        change += n - 0.01\n        n = 0.01\n    bills += n\n    return str(change)\n\nprint(solution(stdin))"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return ''\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    money = int(stdin)\n    change = money - N\n    if change < 0:\n        return \"Impossible\"\n    money_1000 = int(change / 1000)\n    change = change % 1000\n    money_500 = int(change / 500)\n    change = change % 500\n    money_100 = int(change / 100)\n    change = change % 100\n    money_50 = int(change / 50)\n    change = change % 50\n    money_10 = int(change / 10)\n    change = change % 10\n    money_5 = int(change / 5)\n    change = change % 5\n    money_1 = change\n\n    print(money_1000 + money_500 + money_100 + money_50 + money_10 + money_5 + money_1)\n\nprint(solution(input()))"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    return str(n - 2000)"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    amount = 0\n    while N > 0:\n        if N >= 1000:\n            N -= 1000\n            amount += 1\n        elif N >= 500:\n            N -= 500\n            amount += 1\n        elif N >= 100:\n            N -= 100\n            amount += 1\n        elif N >= 50:\n            N -= 50\n            amount += 1\n        elif N >= 10:\n            N -= 10\n            amount += 1\n        elif N >= 5:\n            N -= 5\n            amount += 1\n        elif N >= 1:\n            N -= 1\n            amount += 1\n    return amount\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    change = 1000 - N\n    print(change)"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    N = int(stdin.readline().strip())\n\n    # define the denominations of the coins\n    denominations = [1000, 500, 100, 50, 10, 5, 1]\n\n    # count how many of each coin we have\n    counts = [0 for _ in denominations]\n\n    # loop through the coins and count how many of each we have\n    for i in range(len(denominations)):\n        while N >= denominations[i]:\n            counts[i] += 1\n            N -= denominations[i]\n\n    # print the output\n    print(sum(counts))\n\nsolution(sys.stdin.readlines())\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get inputs\n    (n, *a_b) = stdin.splitlines()\n    a = list(map(int, a_b[::2]))\n    b = list(map(int, a_b[1::2]))\n\n    # Get total number of monsters\n    monsters = sum(a) + sum(b)\n\n    # Determine the number of heroes that each hero can defeat\n    heroes = []\n    for i in range(len(a)):\n        heroes.append(a[i] + min(b[i], b[i + 1]))\n\n    # Determine the maximum number of monsters that each hero can defeat\n    heroes = list(map(lambda x: min(x, monsters), heroes))\n\n    # Return the total number of monsters\n    return str(monsters - sum(heroes))\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution from input\"\"\"\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    heroes = []\n    for i in range(1, n+1):\n        heroes.append(tuple([int(i) for i in stdin[i].split()]))\n\n    monsters = []\n    for i in range(n+1, 2*n+1):\n        monsters.append(tuple([int(i) for i in stdin[i].split()]))\n    \n    max_monster_count = 0\n    for hero in heroes:\n        hero_monster_count = 0\n        for monster in monsters:\n            if (monster[0] in range(hero[0], hero[1]+1) and monster[1] in range(hero[0], hero[1]+1)) or (monster[0] in range(hero[0], hero[1]+1) and monster[1] in range(hero[1]+1, hero[2]+1)):\n                hero_monster_count += 1\n        if hero_monster_count > max_monster_count:\n            max_monster_count = hero_monster_count\n        \n    return max_monster_count"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin[0])\n    A = [int(x) for x in stdin[1].split()]\n    B = [int(x) for x in stdin[2].split()]\n    dp = [[0]*(N+1) for _ in range(2)]\n    for i in range(1, N+1):\n        dp[0][i] = max(dp[0][i-1], dp[1][i-1] + B[i-1])\n        dp[1][i] = max(dp[0][i-1], dp[1][i-1] + A[i-1])\n    return dp[1][N]\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    rawInput = stdin.strip().split('\\n')\n    N = int(rawInput[0])\n    A = [int(i) for i in rawInput[1].split()]\n    B = [int(i) for i in rawInput[2].split()]\n\n    # Get the answer\n    ans = 0\n    for i in range(N):\n        # Get the best answer for the rest of the towns\n        ans += N - i - 1\n        # The answer can be increased by A[i] if it is greater than or equal to B[i]\n        ans += max(A[i], B[i]) - B[i]\n    # Return the answer\n    return ans\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.split(\" \"))\n\n    i = 0\n    n = 0\n    while n < a:\n        n += min(a, b) * (i + 1)\n        i += 1\n    return str(n)\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    '''\n    N, A, B = map(int, stdin.split())\n    p = sorted([(A[i], B[i]) for i in range(N)], key=lambda x: x[0])\n    dp = [0] * (N + 1)\n    dp[0] = 0\n    for k in range(1, N + 1):\n        dp[k] = max(dp[k - 1], dp[k - 2] + p[k - 1][1] if k >= 2 else 0)\n    print(dp[-1])\n    # BFS\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given two strings, return the number of characters that are the same.\n    \n    Example:\n    solution('a' * 10, 'b' * 10) -> 10\n\n    Preconditions:\n    n and m are positive integers less than or equal to 10.\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(s) for s in stdin.split()]\n    z = -1\n    while not (x < z <= y and all(x < z for x in xs) and all(z <= y for y in ys)) and z < n:\n        z += 1\n    return \"War\" if z == n else \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N M X Y\n    x_1 x_2... x_N\n    y_1 y_2... y_M\n    '''\n    input_list = stdin.split('\\n')\n    num_lines = int(input_list[0].split()[0])\n    num_elements = int(input_list[0].split()[1])\n    x = int(input_list[1].split()[0])\n    y = int(input_list[1].split()[1])\n    \n    # check if x is smaller than y\n    if x > y:\n        # make a list with the numbers between x and y\n        x_list = list(range(x, y + 1))\n    else:\n        # make a list with the numbers between y and x\n        x_list = list(range(y, x + 1))\n    \n    # check if the numbers from input list are smaller than the last number from x_list\n    for i in range(num_elements):\n        element = int(input_list[i + 2].split()[0])\n        if element not in x_list:\n            return 'War'\n    \n    # check if the numbers from input list are larger than the first number from x_list\n    for i in range(num_elements):\n        element = int(input_list[i + 2].split()[1])\n        if element not in x_list:\n            return 'War'\n    \n    return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = (int(s) for s in stdin.split())\n    if x < y:\n        if y > x + n:\n            return \"War\"\n        if y >= n and x + n >= y:\n            return \"War\"\n        return \"No War\"\n    if x < x + m:\n        return \"War\"\n    if x + m >= y:\n        return \"War\"\n    return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    z = max(x, y)\n    return \"War\" if n > 1 or m > 1 or z < max(x, y) or z > min(x, y) else \"No War\"\n\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution of the problem.\n\n    >>> solution(\"3 2 10 20\\n8 15 13\\n16 22\")\n    'No War'\n    >>> solution(\"4 5 10 20\\n8 15 13\\n16 22\")\n    'War'\n    \"\"\"\n    n, m, x, y = map(int, stdin.split('\\n')[:4])\n    max_x = min(n, x)\n    min_x = n if n < x else m\n    max_y = min(m, y)\n    min_y = m if m < y else n\n    for i in range(max_x, min_x, -1):\n        for j in range(max_y, min_y, -1):\n            if x <= i <= y and y <= j <= x:\n                return 'No War'\n    return 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(c) for c in stdin.split()]\n    z = 0\n    for i in range(m):\n        x_, y_ = [int(c) for c in stdin.split()]\n        if x_ < z <= y_:\n            z = y_\n        elif x_ > z:\n            continue\n        else:\n            break\n    else:\n        return 'War'\n\n    for i in range(n):\n        x_, y_ = [int(c) for c in stdin.split()]\n        if x_ < z <= y_:\n            z = y_\n        elif x_ > z:\n            continue\n        else:\n            break\n    else:\n        return 'War'\n\n    return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    _, _, x, y = map(int, stdin.split())\n    # check conditions\n    return 'War' if x < y else 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #import sys\n    #input = sys.stdin.read()\n    #n, m, x, y = map(int, input.split())\n    #input_lines = input.split('\\n')\n    #n, m, x, y = [int(input_lines[0].split()[0]), int(input_lines[0].split()[1]), int(input_lines[0].split()[2]), int(input_lines[0].split()[3])]\n    #a = list(map(int, input_lines[1].split()))\n    #b = list(map(int, input_lines[2].split()))\n    n, m, x, y = [int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])]\n    a = [int(stdin.split()[i]) for i in range(4, 4 + n)]\n    b = [int(stdin.split()[i]) for i in range(4 + n, 4 + n + m)]\n    if (x > y and min(a) < x) or (x < y and min(b) < y):\n        return \"War\"\n    return \"No War\"\n\nprint(solution(input()))"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(n) for n in stdin.split(\" \")]\n    if n * m <= x * y:\n        return \"War\"\n    else:\n        return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x, y = sorted(map(int, stdin.split()[:N]), reverse=True), sorted(map(int, stdin.split()[N:]))\n    left, right = max(x), min(y)\n    while left <= right:\n        mid = (left + right) // 2\n        count_x = sum(map(lambda x: x > mid, x))\n        count_y = sum(map(lambda y: y < mid, y))\n        if count_x == N and count_y == M:\n            return \"War\"\n        elif count_x < N and count_y < M:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return \"No War\"\n\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  Inputs: \n  stdin (str): The input string\n\n  Outputs: \n  str: the solution\n  '''\n  # Your code here\n  # print(stdin)\n  lines = stdin.split(\"\\n\")\n  # print(lines)\n  lines = [line.split() for line in lines]\n  # print(lines)\n  N = lines[0][0]\n  # print(N)\n  T = []\n  for i in range(1, len(lines)):\n    T.append(int(lines[i][0]))\n  # print(T)\n\n  time = 0\n  for i in range(len(T)):\n    # print(time)\n    time += 360 * T[i] / T[0]\n    # print(time)\n\n  print(time)\n  return time"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    t = int(stdin.split(\"\\n\")[1])\n    # N: the number of clocks\n    # T_i: the time it takes for clock i to point directly upward\n    # X: the clock that points directly upward by the end of the current round\n    # O: the clocks that point directly upward by the end of the current round\n    # t: the time after which all clocks point directly upward\n    # s: the time that all clocks point directly upward\n    X, O, t, s = [0 for _ in range(n)], [0 for _ in range(n)], 0, 0\n    for i in range(1, n + 1):\n        t_i = int(stdin.split(\"\\n\")[i])\n        X[i - 1] = t_i % 360\n        O[i - 1] = t_i // 360\n        s = s + O[i - 1]\n    X.sort()\n    t = 0\n    for i in range(n):\n        t += X[i] - O[i]\n    return t + s\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Retrieves inputs from stdin\n    n = int(stdin[0])\n    t = [int(x) for x in stdin[1:].split('\\n')[0].split(':')]\n    \n    # Converts time into minutes and seconds\n    t_seconds = t[0] * 3600 + t[1] * 60 + t[2]\n    \n    # Finds the number of minutes after the beginning\n    count = n * (t[0] * 3600 + t[1] * 60 + t[2])\n    \n    # Outputs the number of seconds\n    return str(count)\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = int(stdin)\n    \n    count = 0\n    \n    while True:\n        count += t\n        t = t * n\n        if t > 10**18:\n            return str(count)\n    \n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.splitlines())\n    return str(sum(T[i-1] for i in range(1,N+1) if T[i-1]%T[0]==0))"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns number of seconds after which the hand of every clock points directly upward\"\"\"\n    n = int(stdin[0])\n    clocks = stdin[1:n+1]\n    clocks = list(map(int, clocks.split(\" \")))\n    clocks.sort()\n    return str(sum(clocks))"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *time = map(int, stdin.split('\\n')[0].split(' '))\n    return str(sum(\n        ((i+1)*t) % n\n        for i, t in enumerate(time)\n    ))\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    return max(T, (360 - T) % 360)"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the number of seconds after which the hand of every clock points directly upward again.\n\n    >>> solution('3\\n1\\n5\\n')\n    3\n    \"\"\"\n\n    def gcd(a, b):\n        \"\"\"Return greatest common divisor using Euclid's Algorithm.\"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        \"\"\"Return lowest common multiple.\"\"\"\n        return a * b // gcd(a, b)\n\n    N, *data = map(int, stdin.split())\n    clock = [None] * N\n    for i in range(N):\n        clock[i] = (data[2 * i] * data[2 * i + 1])\n    clock.sort()\n\n    T = clock[0]\n    for i in range(1, N):\n        T = lcm(T, clock[i])\n    return T\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    times = []\n    for _ in range(n):\n        times.append(int(stdin.split()[1]))\n    return sum(times)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    min_diff = float(\"inf\")\n\n    def recurse(t, total, index):\n        nonlocal min_diff\n        if index == n:\n            if total < 0:\n                total *= -1\n            min_diff = min(min_diff, total)\n            return\n        recurse(t, total + weights[index], index + 1)\n        recurse(t + 1, total, index + 1)\n\n    recurse(0, 0, 0)\n    return str(min_diff)\n\n\nprint(solution(input))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    my_input = stdin.split()\n    N = int(my_input[0])\n    w = list(map(int, my_input[1].split()))\n    return solve(N, w)\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *weights = map(int, stdin.split())\n    t, *weights = sorted(weights)\n    low_weight, high_weight = sum(weights[:t]), sum(weights[t:])\n    return str(abs(low_weight - high_weight))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split()[1::2])))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    t = int(stdin.readline().strip())\n\n    def find_min(i):\n        if i == 1:\n            return 0\n        s_1, s_2 = 0, 0\n        for weight in weights:\n            if i < weight:\n                s_1 += weight\n            else:\n                s_2 += weight\n        return abs(s_1 - s_2)\n\n    min_difference = float(\"inf\")\n    for i in range(1, n + 1):\n        curr_difference = find_min(i)\n        if curr_difference < min_difference:\n            min_difference = curr_difference\n\n    return str(min_difference)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.split('\\n')[0])\n    w = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    if n == 2:\n        return str(abs(w[0] - w[1]))\n    t = n // 2\n    s1 = sum([min(x, t) for x in w[:t]])\n    s2 = sum([max(x, t) for x in w[:t]])\n\n    return str(abs(s1 - s2))\n\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(sum(weight) - sum(weight[1:T+1]) for T in range(int(stdin[0]))))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = list(map(int, stdin.split()))\n    t = n // 2 + 1\n    s1, s2 = 0, 0\n    for weight in weights[:t]:\n        s1 += weight\n    for weight in weights[t:]:\n        s2 += weight\n    return str(abs(s1 - s2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = stdin.split()[1:]\n    weights = [int(weight) for weight in weights]\n    min_difference = None\n    for i in range(1, n):\n        sum_1 = sum(weights[:i])\n        sum_2 = sum(weights[i:])\n        difference = abs(sum_1 - sum_2)\n        if min_difference is None or min_difference > difference:\n            min_difference = difference\n    return str(min_difference)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    res = 0\n\n    for i in range(m):\n        min_val = min([a[i][j] for j in range(m)])\n        for j in range(m):\n            a[i][j] -= min_val\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                continue\n            a[i][j] += m\n            res += 1\n            res += i * m + j\n            a[i][j] = 0\n\n    return str(res)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def make_matrix(size: str) -> list[list[int]]:\n        \"\"\"\n        Make a matrix of numbers from stdin\n        \"\"\"\n        matrix = []\n        for i in range(int(size[0])):\n            matrix.append(list(map(int, stdin.splitlines()[i].split())))\n        return matrix\n\n    matrix = make_matrix(stdin.splitlines()[0])\n    rows = len(matrix)\n    cols = len(matrix[0])\n    answer = 0\n\n    for row in range(rows):\n        for col in range(cols):\n            new_row = col + 1\n            new_col = row + 1\n            if new_row > rows - 1:\n                new_row = 1\n            if new_col > cols - 1:\n                new_col = 1\n            matrix[row][col] = matrix[new_row][new_col]\n            answer += abs(matrix[row][col] - (new_row * cols + new_col))\n\n    return str(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\")\n    '6'\n    >>> solution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\")\n    '2'\n    >>> solution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\")\n    '2'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    def rotate(matrix, column):\n        for row in range(n - 1, 0, -1):\n            matrix[row][column], matrix[row - 1][column] = matrix[row - 1][column], matrix[row][column]\n        return matrix\n\n    answer = 0\n    for row in range(n):\n        matrix[row] = rotate(matrix[row], 0)\n        answer += sum(matrix[row]) - n * m\n        matrix[row] = rotate(matrix[row], 1)\n        answer += sum(matrix[row]) - n * m\n\n    return str(answer)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    matrix_size_lines = stdin.split(\"\\n\")\n    if len(matrix_size_lines)!= 2:\n        raise ValueError(\"Invalid input\")\n    n, m = matrix_size_lines[0].split(\" \")\n    if n == \"\" or m == \"\" or n == \" \" or m == \" \":\n        raise ValueError(\"Invalid input\")\n    if int(n) < 1 or int(m) < 1 or int(n) > 10 ** 5 or int(m) > 10 ** 5:\n        raise ValueError(\"Invalid input\")\n    n = int(n)\n    m = int(m)\n    matrix = []\n    for line in matrix_size_lines[1:]:\n        if len(line.split(\" \"))!= m:\n            raise ValueError(\"Invalid input\")\n        row = list(map(int, line.split(\" \")))\n        if len(row)!= m or not all(0 <= e < n * m for e in row):\n            raise ValueError(\"Invalid input\")\n        matrix.append(row)\n    def rotate_matrix_clockwise(matrix):\n        rotated_matrix = []\n        for i in range(m):\n            rotated_row = []\n            for j in range(m - 1, -1, -1):\n                rotated_row.append(matrix[j][i])\n            rotated_matrix.append(rotated_row)\n        return rotated_matrix\n    def rotate_matrix_anticlockwise(matrix):\n        rotated_matrix = []\n        for i in range(m):\n            rotated_row = []\n            for j in range(m - 1, -1, -1):\n                rotated_row.append(matrix[i][j])\n            rotated_matrix.append(rotated_row)\n        return rotated_matrix\n    def is_good(matrix):\n        if n == 1:\n            return True\n        current_matrix = matrix\n        for _ in range(n - 1):\n            current_matrix = rotate_matrix_clockwise(current_matrix)\n            if not all(current_matrix[0][i] <= current_matrix[i + 1][0] for i in range(m - 1)):\n                return False\n        return True\n    if is_good(matrix):\n        return 0\n    for _ in range(2):\n        rotated_matrix = rotate_matrix_clockwise(matrix)\n        if is_good(rotated_matrix):\n            return 2\n        rotated_matrix = rotate_matrix_anticlockwise(matrix)\n        if is_good(rotated_matrix):\n            return 2\n        matrix = rotate_matrix_clockwise(matrix)\n    return 2\n\n\n\"\"\"\nIf you have really strong reason to rotate the matrix clockwise then just do it.\n\"\"\""
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    array = [map(int, stdin.split(\" \")) for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            array[i][j] = ((i - 1) * m + j)\n\n    return str(min(\n        min(array[0][j] - array[0][j - 1] for j in range(1, m)) +\n        min(array[i][0] - array[i - 1][0] for i in range(1, n))\n    ))\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split(' '))))\n\n    def shift_col(col: list, length: int) -> None:\n        for j in range(length, len(col)):\n            col[j] = col[j - length]\n    \n    min_move = 0\n    # minimum move if n < m\n    if n < m:\n        for i in range(n):\n            min_move += abs(matrix[i][0] - matrix[i][-1])\n        for j in range(m):\n            shift_col(matrix[j], n)\n            min_move += abs(matrix[j][0] - matrix[j][-1])\n    # minimum move if n > m\n    elif n > m:\n        for j in range(m):\n            shift_col(matrix[j], n)\n            min_move += abs(matrix[j][0] - matrix[j][-1])\n    return min_move\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *data = map(int, stdin.split())\n    a = [[data[m * i + j] for j in range(m)] for i in range(n)]\n    cols = m + 1\n    for i in range(n):\n        cols = min(cols, max(a[i]))\n    # find row with highest number in each column\n    row = 0\n    for i in range(n):\n        if len(set(a[i])) < m:\n            continue\n        for j in range(m):\n            if a[i][j] == cols:\n                row = i\n                break\n        if row == 0:\n            row = i\n            cols -= 1\n        if cols == 0:\n            break\n    res = 0\n    for j in range(m):\n        res += abs(row - n) * m + j\n    return str(res)\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split(' '))))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = arr[i - 1][j - 1]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, m + 1):\n                dp[i][j] = min(dp[i][j], dp[i - k][j] + dp[i][j - 1])\n    return dp[n][n]"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(n)]\n\n    a_len = len(a)\n    b_len = len(a[0])\n    # m = len(a)\n    # n = len(a[0])\n    # print(n, m)\n    i, j = 0, 0\n    min_num = n * m\n    # print(a)\n    while i < a_len:\n        j = 0\n        while j < b_len:\n            a[i][j] -= 1\n            j += 1\n        i += 1\n\n    i, j = 0, 0\n    while i < a_len:\n        j = 0\n        while j < b_len:\n            if a[i][j] == 0:\n                min_num = min(min_num, m + 2 * j - 1)\n                # print('check', min_num)\n            j += 1\n        i += 1\n\n    return str(min_num)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    s = sum(a)\n    a.sort()\n    left, right = 0, len(a) - 1\n    ans = 0\n    while left < right:\n        s = s - (a[left] + a[right])\n        ans += 1\n        left += 1\n        right -= 1\n    return ans\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\nlines = sys.stdin.readlines()\nn = int(lines[0])\n\nlist = [int(n) for n in lines[1].split()]\nlist.sort()\nprint(int(n/2))\nprint(list[0]+int(math.ceil(n/2)-1))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = sorted(map(int, stdin.split(\"\\n\")[1:]))\n    print(numbers)\n    return str(sum(numbers[:n // 2 + 1]) - sum(numbers[n // 2:]))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    arr.sort()\n    result = arr[::2] * 2\n    return sum(result) - 2 * len(result)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split('\\n')[0].split()))\n    m = n // 2\n    a = list(filter(lambda x: x == max(a), a))\n    return m - len(a)"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    # Your code here\n    n = int(stdin)\n    a = stdin.split('\\n')\n    a = a[0].split()\n    print(len(a))\n    b = [int(i) for i in a]\n    print(b)\n\n    return b"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    sched = list(map(int, stdin.split()))\n    work = 0\n    rest = 0\n    for day in range(days):\n        if day % 2 == 0:\n            work += sched[day]\n        else:\n            rest += sched[day]\n    return rest\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split(\"\\n\")[0].split())\n    # N = int(stdin.split()[0])\n    # a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(N):\n        if a[i] == 1:\n            count += 1\n        else:\n            count = 0\n        if count >= 2:\n            break\n    if count >= 2:\n        print(i + 1)\n    else:\n        print(0)"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import List, Iterable\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split('\\n')[1:]))\n\n    def find_rest(a):\n        count = 0\n        for i in range(len(a)):\n            if a[i] == 0:\n                count += 1\n            else:\n                return count\n        return count\n\n    ans = 0\n    ans_index = 0\n    count = find_rest(a)\n    while count > ans:\n        ans = count\n        ans_index = find_rest(a[ans_index:])\n        count -= ans_index\n\n    return str(ans)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    hours_per_day = int(stdin.readline())\n    schedule = [int(c) for c in stdin.readline().split()]\n    hours_rest = 0\n    for i in range(hours_per_day):\n        if schedule[i] == 0:\n            hours_rest += 1\n        else:\n            hours_rest = 0\n        if hours_rest > max_rest:\n            max_rest = hours_rest\n    return str(max_rest)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import Counter\n\nN = int(stdin)\n\nA = list(map(int, stdin.split()))\n\nS = Counter(A)\n\nMax = 0\n\nfor k in S:\n    Max = max(Max, S[k])\n\nprint(Max)\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Some rather complex logic\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(stdin)\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    return int(a[0])\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum height.\"\"\"\n    pass\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # pass\n    # your code here\n    #\n    # if len(cheeses) == 1:\n    #     return \"1\"\n    #\n    # for cheese in cheeses:\n    #     if cheese[1] == \"soft\":\n    #         soft_cheese.append(cheese[0])\n    #     else:\n    #         hard_cheese.append(cheese[0])\n    #\n    # soft_cheese = set(soft_cheese)\n    # hard_cheese = set(hard_cheese)\n    #\n    # return str(len(soft_cheese.intersection(hard_cheese)))\n\n    cheeses = []\n    for line in stdin.splitlines()[:int(stdin.splitlines()[0])]:\n        cheeses.append([line.split()[0], line.split()[1]])\n\n    cheeses.sort(key=lambda x: x[1], reverse=True)\n\n    print(cheeses)\n    soft = []\n    hard = []\n    for cheese in cheeses:\n        if cheese[1] == \"soft\":\n            soft.append(cheese[0])\n        else:\n            hard.append(cheese[0])\n\n    print(soft)\n    print(hard)\n\n    return str(len(soft.intersection(hard)))\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = {}\n    for cheese in stdin:\n        cheeses[cheese.split()[0]] = cheese.split()[1]\n    for _, value in cheeses.items():\n        if value =='soft':\n            return 1\n    return 0"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'NotImplementedError'\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = stdin.splitlines()\n    cheeses = {cheese.split()[0]: cheese.split()[1] for cheese in cheeses}\n    soft_cheeses = [cheese for cheese in cheeses if cheeses[cheese] == \"soft\"]\n    hard_cheeses = [cheese for cheese in cheeses if cheeses[cheese] == \"hard\"]\n    return len(soft_cheeses) - len(hard_cheeses)\n\"\"\"\n\nimport unittest\nimport sys\n\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = {cheese.strip() for cheese in stdin.splitlines()}\n    return len(cheeses)\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Checks the input to see if there's a brie and returns the number of cheeses in the input.\n\n    >>> solution('6\\nparmesan hard\\nemmental hard\\nedam hard\\ncolby hard\\ngruyere hard\\nasiago hard')\n    4\n    >>> solution('8\\npecorino soft\\nmascarpone soft\\nturmeric soft\\nganache hard\\nceviche hard')\n    3\n    \"\"\"\n    cheese_lst = stdin.splitlines()\n    brie_checker = False\n    cheese_count = 0\n    for cheese in cheese_lst:\n        cheese_type = cheese.split(' ')[1]\n        if cheese_type =='soft':\n            cheese_count += 1\n        elif cheese_type == 'brie' and brie_checker == False:\n            cheese_count += 1\n            brie_checker = True\n    return cheese_count\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cheese = stdin.split()\n    cheese_dictionary = dict()\n    for i in range(0, len(cheese)):\n        cheese_dictionary[cheese[i][0]] = cheese[i][1]\n    \n    sorted_cheese_dictionary = dict(sorted(cheese_dictionary.items()))\n    for key, value in sorted_cheese_dictionary.items():\n        print(key, value)\n    \n    return \"a\"\n    \n\nsolution(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = stdin.split(\"\\n\")\n    cheese = [cheese.split(\" \") for cheese in cheeses]\n    cheese = [cheese for cheese in cheese if len(cheese)==2]\n    cheese = [cheese[0] for cheese in cheese]\n    cheese = set(cheese)\n    return len(cheese)"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cheese = int(stdin)\n    cheese_list = []\n    for i in range(cheese):\n        cheese_list.append(stdin[2*i:2*i+2])\n\n    ans = 0\n    for i in range(cheese):\n        for j in range(i+1, cheese):\n            if cheese_list[i]!= cheese_list[j]:\n                if cheese_list[i][0] == cheese_list[j][0]:\n                    ans += 1\n                else:\n                    ans += 2\n\n    return ans\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = []\n    for line in stdin.splitlines():\n        cheeses.append(line.split())\n    \n    cheeses = sorted(cheeses, key= lambda x: x[0])\n    \n    return cheeses[0][0]"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 1 2 1\n   ... 3 2 1 1\n   ... ''')\n    '1 0 0 2'\n    >>> solution('''7\n   ... 2 5 1 5 3 4 3\n   ... 2 4 3 5 6 5 1\n   ... ''')\n    '0 0 0 1 0 2 4'\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    c = [0] * n\n    for i, x in enumerate(a):\n        c[(x + b[i]) % n] = (x + b[i]) // n\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The longest line of code was 251 lines long. This is readable, but too many lines.\n\n    This code is only readable due to the comments. It is difficult to understand.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    arr = []\n    for i in range(n):\n        arr.append((a[i] + b[i]) % n)\n    return''.join(map(str, arr))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The goal of this problem is to determine the lexicographically\n    smallest string that can be formed from the string s by\n    reordering the characters in s.\n    '''\n    # read the input\n    n = int(stdin)\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, stdin.split())\n\n    # find the lexicographically smallest permutation of b\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    perm = sorted(list(set(c)))\n    # print(perm)\n\n    # get the permutation of b corresponding to the permutation of b\n    perm_b = []\n    for i in range(len(perm)):\n        for j in range(len(b)):\n            if b[j] == perm[i]:\n                perm_b.append(j)\n    # print(perm_b)\n\n    # print the lexicographically smallest string formed from the string s\n    # by reordering the characters in s using the permutation of b\n    ans = []\n    for i in range(n):\n        ans.append(a[perm_b[i]])\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(c) for c in stdin.split(\"\\n\")]\n\n    a.sort()\n    b.sort()\n    c = []\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n\n    print(*c)\n    return \"\"\n\"\"\"\n\n\"\"\"\nJava\n\"\"\"\n\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n\n        int[] a = Arrays.sort(in.nextInts(n));\n        int[] b = Arrays.sort(in.nextInts(n));\n\n        int[] c = new int[n];\n        for (int i = 0; i < n; i++) {\n            c[i] = (a[i] + b[i]) % n;\n        }\n\n        Arrays.sort(c);\n        for (int i = 0; i < n; i++) {\n            System.out.print(c[i] + \" \");\n        }\n    }\n}"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    c = []\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n    print(' '.join(map(str, c)))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum array after the transformations.\"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    b = [int(x) for x in stdin.readline().split(' ')]\n    \n    b.sort()\n    \n    ans = []\n    for x, y in zip(a, b):\n        ans.append((x + y) % n)\n        \n    return''.join([str(x) for x in ans])\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split('\\n')[0].split()]\n    b = [int(x) for x in stdin.split('\\n')[1].split()]\n    c = [((a[i] + b[i]) % n) for i in range(n)]\n    for i in c:\n        print(i, end=' ')\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(num) for num in stdin.readline().split(' ')]\n    b = [int(num) for num in stdin.readline().split(' ')]\n    c = [0] * n\n    \n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    return''.join([str(num) for num in c])\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 0 1 2 1\n   ... 3 2 1 1''')\n    '1 0 0 2'\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split(' ')]\n    b = [int(s) for s in stdin.readline().split(' ')]\n    \n    a_b = [(a[i] + b[i]) % n for i in range(n)]\n    \n    c = [None] * n\n    for i in range(n):\n        c[i] = (a_b[i] + a[i] - b[i]) % n\n    \n    c.sort()\n    \n    print(' '.join([str(i) for i in c]))\n    \n    return ''\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    c = [(a[i] + b[i]) % n for i in range(n)]\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.strip().split('\\n')]\n    return str(int(a) + int(b) + int(c) + int(d) >= 2)\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number1 = 1 if stdin[0] == \"1\" else 0\n    number2 = 1 if stdin[1] == \"1\" else 0\n    number3 = 1 if stdin[2] == \"1\" else 0\n    number4 = 1 if stdin[3] == \"1\" else 0\n    return bin(number1 | number2 | number3 | number4)[2:]\n    \n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  if stdin == '0':\n    return '1'\n  elif stdin == '1':\n    return '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0\\n1\\n1\\n0\")\n    0\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # here write the input string\n    return str(s)\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(0)"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) ^ int(not bool(int(stdin))))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 0\n\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = [int(x) for x in stdin.split(' ')]\n    return \"Yes\" if D / S * T <= D else \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (D, T, S) = map(int, stdin.strip().split('\\n')[0].split(' '))\n    return 'Yes' if D * S / T < D else 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns Yes if Takahashi will arrive in time, otherwise returns No.'''\n    # Get values from stdin.\n    D, T, S = [int(value) for value in stdin.split(' ')]\n\n    # Calculate the time taken to go D meters.\n    time_taken_to_go = D / S\n\n    # Convert minutes into seconds.\n    time_taken_in_seconds = T * 60\n\n    # Check if time taken to go D is greater than time taken to go D.\n    if time_taken_in_seconds >= time_taken_to_go:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Yes if Takahashi will arrive at the destination in time, otherwise return No\"\"\"\n    D, T, S = map(int, stdin.split())\n\n    return 'Yes' if D / S >= T else 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin.split()[2]) * 2 <= int(stdin.split()[1]) + int(stdin.split()[0]) else 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    d, t, s = [int(v) for v in stdin.split()]\n    return \"Yes\" if t*60 <= d*s else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = [int(x) for x in stdin.split(' ')]\n    return 'Yes' if s * t + d // 2 <= t * s else 'No'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    D: Distance to the meeting location\n    T: The time to get there\n    S: Speed\n    '''\n\n    def get_time(distance, speed):\n        return distance / speed\n\n    d, t, s = map(int, stdin.split(' '))\n    return \"Yes\" if get_time(d, s) <= t else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    return 'Yes' if t * s >= d else 'No'\n    \n\"\"\"\n\nD, T, S = map(int, input().split())"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = []\n    for line in stdin.splitlines():\n        matrix.append(list(map(int, line.split())))\n\n    n = int(stdin.splitlines()[-1])\n    b = list(map(int, stdin.splitlines()[-2:]))\n\n    # number of marked numbers\n    marked_numbers = 0\n    for i, row in enumerate(matrix):\n        for j, num in enumerate(row):\n            if num in b:\n                marked_numbers += 1\n                matrix[i][j] = '*'\n\n    print(marked_numbers)\n\n    diagonals = [matrix[i][i] for i in range(3)] + [matrix[i][2 - i] for i in range(3)]\n    if '*' in diagonals and marked_numbers == len(b):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split('\\n')]\n    a1 = arr[0:3]\n    a2 = arr[3:6]\n    a3 = arr[6:9]\n    N = arr[9]\n    b = arr[10:20]\n    \n    return print('Yes' if check_bingo(a1, a2, a3, b, N) else 'No')\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.split('\\n')[1:]\n    \n    for i in range(len(s)):\n        s[i] = [int(x) for x in s[i].split(' ')]\n    \n    if sum([s[i][j] for i in range(len(s)) for j in range(len(s[0])) if s[i][j]!= 0]):\n        return 'No'\n    \n    for i in range(len(s)):\n        for j in range(len(s[0])):\n            if j + 3 <= len(s[0]):\n                if s[i][j] == s[i][j+1] == s[i][j+2] == s[i][j+3]:\n                    return 'Yes'\n            if i + 3 <= len(s):\n                if s[i][j] == s[i+1][j] == s[i+2][j] == s[i+3][j]:\n                    return 'Yes'\n    \n    if s[0][0] == s[1][1] == s[2][2] == s[3][3] or s[0][3] == s[1][2] == s[2][1] == s[3][0]:\n        return 'Yes'\n    \n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    matrix = []\n    for _ in range(size):\n        matrix.append(list(map(int, stdin.readline().split())))\n\n    numbers = list(map(int, stdin.readline().split()))\n    bingo = []\n    for number in numbers:\n        if number in matrix[0]:\n            bingo.append(matrix[0].index(number) + 1)\n        else:\n            bingo.append(-1)\n\n    for row_number in range(1, size):\n        row_bingo = []\n        for number in numbers:\n            if number in matrix[row_number]:\n                row_bingo.append(matrix[row_number].index(number) + 1)\n            else:\n                row_bingo.append(-1)\n        for bingo_number in bingo:\n            if bingo_number in row_bingo:\n                bingo[bingo.index(bingo_number)] = row_number + 1\n            else:\n                bingo[bingo.index(bingo_number)] = -1\n\n    for column_number in range(size):\n        column_bingo = []\n        for number in numbers:\n            if number in matrix[column_number]:\n                column_bingo.append(matrix[column_number].index(number) + 1)\n            else:\n                column_bingo.append(-1)\n        for bingo_number in bingo:\n            if bingo_number in column_bingo:\n                bingo[bingo.index(bingo_number)] = column_number + 1\n            else:\n                bingo[bingo.index(bingo_number)] = -1\n\n    for i in range(size):\n        for j in range(size):\n            if i == j:\n                row_bingo = []\n                for number in numbers:\n                    if number in matrix[i]:\n                        row_bingo.append(matrix[i].index(number) + 1)\n                    else:\n                        row_bingo.append(-1)\n                for bingo_number in bingo:\n                    if bingo_number in row_bingo:\n                        bingo[bingo.index(bingo_number)] = i + 1\n                    else:\n                        bingo[bingo.index(bingo_number)] = -1\n                break\n\n    for i in range(size):\n        for j in range(size):\n            if i + j == size - 1:\n                row_bingo = []\n                for number in numbers:\n                    if number in matrix[i]:\n                        row_bingo.append(matrix[i].index(number) + 1)\n                    else:\n                        row_bingo.append(-1)\n                for bingo_number in bingo:\n                    if bingo_number in row_bingo:\n                        bingo[bingo.index(bingo_number)] = i + 1\n                    else:\n                        bingo[bingo.index(bingo_number)] = -1\n                break\n\n    for i in range(size):\n        if bingo.count(i + 1) == 3:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return 'Yes' if [\n        [int(stdin.split()[j * i: j * (i + 1)]\n            [j * i + i]) for i in range(3)] for j in range(3)\n    ].count(list(range(1, 7))) > 0 else 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This function takes in standard input and returns the appropriate output for the problem\n    \"\"\"\n    input_as_list = stdin.split('\\n')\n    bingo_card = []\n    for row in range(3):\n        bingo_card.append(list(map(int, input_as_list[row].split(' '))))\n    bingo_card = np.array(bingo_card)\n    number_to_search = int(input_as_list[3])\n    search_list = input_as_list[4:]\n    search_list = list(map(int, search_list))\n    bingo_card_masked = np.copy(bingo_card)\n    for search_num in search_list:\n        bingo_card_masked[bingo_card_masked == search_num] = 0\n    \n    bingo_card_masked = bingo_card_masked.tolist()\n    for row in range(3):\n        for col in range(3):\n            if bingo_card_masked[row][col] == 0:\n                continue\n            if check_column(bingo_card_masked, row, col, number_to_search):\n                return 'Yes'\n            if check_row(bingo_card_masked, row, col, number_to_search):\n                return 'Yes'\n            if check_diagonal(bingo_card_masked, row, col, number_to_search):\n                return 'Yes'\n    return 'No'\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    Yes\n    \"\"\"\n    cols, rows, size, numbers = list(map(int, stdin.split()))\n    matrix = []\n    for _ in range(rows):\n        matrix.append(list(map(int, stdin.split())))\n\n    n = numbers\n    bingos = 0\n    for row in matrix:\n        if row[0] == n:\n            bingos += 1\n        if row[-1] == n:\n            bingos += 1\n    for col in range(cols):\n        if matrix[0][col] == n:\n            bingos += 1\n        if matrix[-1][col] == n:\n            bingos += 1\n    if matrix[0][0] == n:\n        bingos += 1\n    if matrix[-1][-1] == n:\n        bingos += 1\n    if bingos == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    return ''"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.splitlines()[0]\n    second_line = stdin.splitlines()[1]\n    third_line = stdin.splitlines()[2]\n    fourth_line = stdin.splitlines()[3]\n    fifth_line = stdin.splitlines()[4]\n\n    first_line = list(map(lambda x: int(x), first_line.split(\" \")))\n    second_line = list(map(lambda x: int(x), second_line.split(\" \")))\n    third_line = list(map(lambda x: int(x), third_line.split(\" \")))\n    fourth_line = list(map(lambda x: int(x), fourth_line.split(\" \")))\n    fifth_line = list(map(lambda x: int(x), fifth_line.split(\" \")))\n\n    n = fourth_line[0]\n    b = fifth_line\n\n    row = []\n    column = []\n    diagonal = []\n\n    for i in range(0, len(first_line)):\n        row.append(first_line[i])\n        column.append(second_line[i])\n        diagonal.append(third_line[i])\n\n    for i in range(0, n):\n        row.append(b[i])\n\n    for i in range(0, n):\n        column.append(b[i])\n\n    for i in range(0, n):\n        diagonal.append(b[i])\n\n    for i in range(0, n):\n        for j in range(0, n):\n            if (row[i] == b[j] and i == j) or (column[i] == b[j] and i + j == n - 1):\n                continue\n            else:\n                return \"No\"\n\n    return \"Yes\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"84 97 66\\n79 89 11\\n61 59 7\\n7\\n89\\n7\\n87\\n79\\n24\\n84\\n30\\n\")\n    Yes\n    \"\"\"\n    matrix = [\n        [int(num) for num in row.split(\" \") if num!= \"\"]\n        for row in stdin.strip().split(\"\\n\")\n    ]\n\n    numbers = set(num for row in matrix for num in row)\n    numbers.discard(0)\n\n    if len(numbers) < N:\n        return \"No\"\n\n    for i in range(3):\n        row_nums = set(row[i] for row in matrix)\n        col_nums = set(matrix[i][j] for j in range(3))\n        if len(row_nums) == 1 or len(col_nums) == 1:\n            return \"Yes\"\n\n    diagonal = {matrix[i][i] for i in range(3)}\n    diagonal.discard(0)\n    if len(diagonal) == 1:\n        return \"Yes\"\n\n    diagonal = {matrix[2 - i][i] for i in range(3)}\n    diagonal.discard(0)\n    if len(diagonal) == 1:\n        return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here.\n    #\n    N, M = map(int, stdin.split())\n    assign = map(int, stdin.split()[1:])\n    takahashi_assignment = 0\n    for i, a in enumerate(assign):\n        takahashi_assignment += a\n        takahashi_assignment -= i + 1\n    if takahashi_assignment > N:\n        return -1\n    return N - takahashi_assignment\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # your code goes here\n    N, M = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()[1:]]\n    A.sort()\n    cur = 0\n    ans = 0\n    for i in range(M):\n        if A[i] > cur:\n            ans += A[i] - cur\n            cur = A[i]\n    return str(ans)\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    num = 0\n    for i in arr:\n        num += i\n        if num > N:\n            return -1\n    return num\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get input\n    num_of_days, num_of_assignments = map(int, stdin.readline().split())\n    assignments = list(map(int, stdin.readline().split()))\n\n    # sort list to maximize sum\n    assignments.sort()\n\n    # Get max sum\n    max_sum = 0\n    for i in range(num_of_assignments):\n        max_sum += assignments[i] * (num_of_days - i)\n\n    return str(max_sum)"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'lala'"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A = []\n    B = []\n    for line in stdin.split('\\n'):\n        if line == '':\n            break\n        A.append(int(line.split()[0]))\n        B.append(int(line.split()[1]))\n    return str(max_days(A, B))\n    '''\n\n    # \u4f7f\u7528\u987a\u5e8f\u961f\u5217\n    from collections import deque\n    n, m = map(int, stdin.readline().split())\n    A = deque(map(int, stdin.readline().split()))\n    B = deque(map(int, stdin.readline().split()))\n    max_days = 0\n    while n > 0 and m > 0:\n        # \u961f\u9996\u5143\u7d20\u662f\u6700\u65e9\u5b8c\u6210\u7684\uff0c\u961f\u5c3e\u5143\u7d20\u662f\u6700\u665a\u5b8c\u6210\u7684\n        if A[0] >= B[-1]:\n            max_days += B.pop()\n            n -= 1\n        else:\n            max_days += A.popleft()\n            m -= 1\n    if n > 0:\n        return -1\n    else:\n        return max_days"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of days Takahashi can hang out during the summer vacation.\"\"\"\n    n, m = map(int, stdin.split(' '))\n    assignments = list(map(int, stdin.split(' ')))\n\n    assignments.sort()\n    begin_index = 0\n    end_index = len(assignments) - 1\n    return search_for_vacation(assignments, begin_index, end_index, n, m)\n\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split(' '))\n    count = 0\n    for i in range(1, 10001):\n        count += i % 100 == 0\n    return str(count + (N - 1) * D)\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split(' '))\n    count = 0\n    i = 100\n    while count!= N:\n        if i % D == 0:\n            count += 1\n        i += 1\n    return str(i - N)"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    result = 0\n    while True:\n        if D * result == N:\n            return str(result)\n        result += 1\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split(' ')]\n    N -= 1\n    result = 0\n    count = 0\n    while N > 0:\n        N -= 1\n        if count == D:\n            break\n        if result % 100 == 0:\n            count += 1\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def divisible(n: int) -> bool:\n        # Returns if n is divisible by 100\n        return n % 100 == 0\n    # Read input\n    D, N = map(int, stdin.split())\n    # Solve problem\n    return next(filter(divisible, range(1, N+1)))\n    # Write output\n    print(solution(stdin))\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"0\"\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    d, n = int(a), int(b)\n\n    ans = 0\n    for i in range(1, n):\n        if i % d == 0:\n            ans = i\n            break\n\n    return str(ans)"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    s = set(a)\n    ans = 1\n    for i in s:\n        if i!= 0:\n            ans *= i\n    return str(ans)\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n    arr: list[int] = [int(num) for num in stdin.readline().split(' ')]\n    gcd: int = arr[0]\n    for num in arr[1:]:\n        gcd = find_gcd(gcd, num)\n    return str(gcd)\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n   ...\n    return \"\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    \n    return gcd(a[0], gcd(a[1], a[2]))\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    A = sorted(A)\n    A.append(10**9)\n    for i in range(1, len(A)):\n        for j in range(i+1, len(A)):\n            A[j] = max(A[j], A[j] * A[i] // gcd(A[j], A[i]))\n    print(A[-1])\n    return ''\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 7 6 8\n   ... ''')\n    2\n    \"\"\"\n    n = int(next(stdin.split()))\n    a = list(map(int, next(stdin.split())))\n    max_val = 1\n    for num in a:\n        temp = max_val\n        max_val = 1\n        for i in range(2, num + 1):\n            if num % i == 0 and max_val < i:\n                max_val = i\n        if max_val!= temp:\n            break\n    return str(max_val)\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the solution for the greatest common divisor problem\n\n    Parameters\n    ----------\n    stdin: str\n        Standard input of GCD problem\n\n    Returns\n    -------\n    str\n        Solution for the GCD problem\n\n    \"\"\"\n\n    # Get data from standard input\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\n    # Recursive function\n    def gcd(a, b):\n        # Base Case\n        if b == 0:\n            return a\n\n        # Recursive Case\n        return gcd(b, a % b)\n\n    # Get the GCD of the given array\n    return str(gcd(max(a), min(a)))\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    my_arr = list(map(int, stdin.split('\\n')[1:][0].split(' ')))\n    max_val = max(my_arr)\n    my_arr.remove(max_val)\n    return (max(gcd(max_val, x) for x in my_arr))\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum possible greatest common divisor of the N integers on the blackboard\n    after your move.\n\n    >>> solution('5\\n1 1 1 1 1\\n')\n    1\n    '''\n    n = int(stdin.split()[0])\n    arr = [int(x) for x in stdin.split()[1:]]\n\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    return max(map(gcd, arr))"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.readline().strip())\n  students = list(map(int, stdin.readline().split(' ')))\n  in_order = []\n  for student in students:\n    in_order.insert(student, student)\n  return''.join(map(str, in_order))\nprint(solution(sys.stdin))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    print(*sorted(a, key=lambda x: -a.count(x)))\n\nsolution(input())\n\nimport sys\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    students = stdin.split('\\n')\n    students = students[1:]\n    students = [int(i) for i in students]\n    return''.join([str(i) for i in students])"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return stdin[0:stdin.index(\"\\n\")]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    students = [int(stdin.split()[0])]\n    class_entered = []\n    for i in stdin.split()[1:]:\n        if i in students:\n            class_entered.append(i)\n    return''.join(class_entered)"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    student_numbers = [int(i) for i in stdin[1].split(' ')]\n    return''.join(map(str, student_numbers))\n"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().split(' ')))\n    # i = 1\n    # result = ''\n    # for j in range(len(A) - 1):\n    #     if A[j] == A[j+1]:\n    #         i += 1\n    #     else:\n    #         result += str(i) +''\n    #         i = 1\n    #     j += 1\n    # result += str(i) +''\n    # return result[:-1]\n    # '''\n    # While Loop\n    # '''\n    # i = 1\n    # result = ''\n    # while True:\n    #     for j in range(len(A) - 1):\n    #         if A[j] == A[j+1]:\n    #             i += 1\n    #         else:\n    #             result += str(i) +''\n    #             i = 1\n    #         j += 1\n    #     result += str(i) +''\n    #     if A[j]!= A[j+1]:\n    #         break\n    #     j += 1\n    #     i = 1\n    # return result[:-1]\n    '''\n    Recursion\n    '''\n    def f(n, A):\n        if n == 1:\n            return str(A[0])\n        result = ''\n        for i in range(len(A)-1):\n            if A[i] == A[i+1]:\n                result += f(n-1, A[:i] + A[i+1:]) +''\n                break\n        else:\n            result += f(n-1, A[:len(A)-1]) +''\n        return result[:-1]\n    return f(N, A)"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n2 3 1\")\n    3 1 2\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    scores = list(map(int, stdin.readline().split(' ')))\n    result = [None] * size\n    current_sum = 0\n    for i in range(size):\n        current_sum += scores[i]\n        result[i] = current_sum\n    for i in range(size):\n        print(result[i], end=' ')\n\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    students = list(map(int, stdin.readline().split()))\n    return''.join(map(str, sorted(students)))\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split(\" \")))\n    a, b, x = nums[0], nums[1], nums[2]\n    total = 0\n    for i in range(1, 10 ** 9 + 1):\n        d = len(str(i))\n        total += min(b * d, a * d + b * (d - 1), a * d + b * (d - 2) + 1)\n        if total > x:\n            return str(i - 1)\n    return '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = stdin.split(' ')\n    A, B, X = int(A), int(B), int(X)\n    max_num = 0\n    for i in range(1, int(B)+1):\n        for j in range(1, int(A)+1):\n            num = int(X/A)*i + int(X/B)*j\n            if num > max_num:\n                max_num = num\n    return str(max_num)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    cost = 0\n    for i in range(1, 10 ** 9):\n        if a * i + b * len(str(i)) > x:\n            break\n        cost += a * i + b * len(str(i))\n    print(i)\n    return cost"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split(' '))\n    c = 0\n    ans = 0\n    for i in range(A, B+1):\n        x = i * (len(str(i))) + c * (len(str(i)) + 1)\n        if x <= X:\n            ans = i\n            c += 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split(\" \"))\n    if A * 10 ** len(str(B)) > X:\n        print(0)\n    else:\n        print(A * 10 ** (len(str(B)) - 1) - 1)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the largest integer that Takahashi can buy.\n\n    Args:\n        stdin: A string containing A, B and X from Standard Input\n\n    Returns:\n        An integer representing the maximum number of Takahashi can buy\n    \"\"\"\n    A, B, X = (int(v) for v in stdin.split())\n    ans = 0\n    for n in range(1, 10 ** 9 + 1):\n        if n * A + B * len(str(n)) < X:\n            continue\n        ans = max(ans, n)\n    return ans or 0\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    price_list = list()\n    for i in range(1, A + 1):\n        price = int(math.floor((A * i + B * len(str(i)))))\n        if price > X:\n            break\n        price_list.append(price)\n    price_list.sort(reverse=True)\n    print(price_list)\n    if price_list:\n        return str(price_list[0])\n    return \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.split()]\n    ans = 0\n    for n in range(1, 10 ** 9):\n        num = n * n\n        if X > num:\n            ans = n\n            break\n        elif A * n + B * len(str(n)) > X:\n            break\n    if ans:\n        return str(ans)\n    else:\n        return '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_price = 0\n    max_num = 0\n    for i in range(1, 10**9):\n        j = i\n        price = 0\n        while j:\n            price += i % 10 * A + B\n            j //= 10\n        if price <= X:\n            max_price = max(max_price, price)\n            max_num = i\n    if max_num:\n        return str(max_num)\n    return \"0\"\n    return str(max_num)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #1-10^9\u306e\u7bc4\u56f2\u3067\u5165\u529b\u3055\u308c\u305f\u3089OK\n    A, B, X = list(map(int, stdin.split()))\n    n = 1\n    if A * n + B * len(str(n)) <= X:\n        return n\n    else:\n        #\u914d\u5217\u306b\u5165\u308c\u3066\uff11\u6841\u76ee\u3092\u6c7a\u3081\u3066\u6b21\u306e\u6841\u3092\u6c7a\u3081\u3066\u3044\u304d\uff0c\u6700\u5f8c\u306b\u8db3\u3057\u3066X\u304b\u3089\u6e1b\u3089\u3057\u3066\u3044\u304f\n        #10^9\u306a\u3089\u7d2f\u7a4d\u548c\u3068\u3057\u3066\u6c42\u3081\u308b\n        #10^9\u306a\u3089N=10\u306e1\u6841\u76ee\u3092\u8003\u3048\u3066\u6b21\u306e\u6841\u3092\u6c7a\u3081\u3066\u3044\u304f\n        ans = []\n        while 1:\n            if A * n + B * len(str(n)) <= X:\n                ans.append(n)\n                n += 1\n            else:\n                break\n        return max(ans)\n\na,b,x = list(map(int, input().split()))\nn = 1\nwhile a * n + b * len(str(n)) <= x:\n    n += 1\nprint(n-1)"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \" \".join(str(v) for v in [n, k, *h])\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'At least 2 friends can ride the roller coaster!'\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    count = 0\n    for h in heights:\n        if h >= k:\n            count += 1\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of friends who can ride the roller coaster\"\"\"\n    \n    n, k = map(int, stdin.split())\n    h = map(int, stdin.split())\n    return sum(map(lambda x: 1 if x >= k else 0, h))\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # take input from stdin\n    N, K = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len(h)):\n        if h[i] >= K:\n            count = count + 1\n    print(count)\n    return count"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nN, K = input().split(' ')\nN, K = int(N), int(K)\nh = [int(i) for i in input().split()]\n\ntakahashi_friends = 0\nfor friend in h:\n    if friend > K:\n        takahashi_friends += 1\n\nprint(takahashi_friends)\n\nsolution('4 150\\n150 140 100 200')\n\n------\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    heights = [int(c) for c in stdin.readline().split()]\n    return sum([1 for h in heights if h >= K])\n\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return None"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if heights[i] > k:\n            count += 1\n    return count"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Given N K, returns how many of the Takahashi's friends can ride the roller coaster.'''\n    n, k = [int(n) for n in stdin.split(' ')]\n    h = [int(n) for n in stdin.split(' ')]\n    return sum([1 for h_i in h if h_i >= k])"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    items = list(map(int, stdin.split(' ')))\n    if (sum(items) / (4 * m)) >= 1:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    votes = [int(line) for line in stdin.splitlines()]\n    total_votes = sum(votes)\n    popular_votes = votes.count(max(votes))\n    return \"Yes\" if popular_votes > total_votes // 4 else \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # set variables\n    voters = int(stdin[0])\n    min_ratio = voters * 1/4\n    votes = [int(x) for x in stdin[1].split()]\n    # sort votes descending\n    votes = sorted(votes, reverse=True)\n    # iterate through votes\n    vote_sum = 0\n    selected = 0\n    for vote in votes:\n        if vote_sum + vote > min_ratio:\n            break\n        vote_sum += vote\n        selected += 1\n    # if number of items to select is more than voters, say Yes, otherwise No\n    if selected > voters:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n\n    total = sum(a)\n    if total < 1 or total < 4 * m:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    votes = [int(x) for x in stdin.split('\\n')]\n    if n < m:\n        return 'No'\n    total = sum(votes)\n    votes = sorted(votes)\n    count = 0\n    for i in range(n):\n        if total * (1 / (4 * m)) >= votes[i]:\n            count += 1\n            if count == m:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = sorted(list(map(int, stdin.split())), reverse=True)\n    return 'Yes' if votes[0] < 1 / 4 * m else 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = [int(x) for x in stdin.split()]\n    if n * m < sum(votes):\n        return 'No'\n    votes.sort()\n    for i in range(0, m):\n        if votes[-1] / (n * m) <= (1 / 4 * m):\n            return 'No'\n        votes.pop()\n    return 'Yes'\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    votes = [int(v) for v in stdin.split('\\n')[0].split()]\n    popular_votes = max(votes)\n    popular_items = [i + 1 for i in range(len(votes)) if votes[i] == popular_votes]\n    if len(popular_items) < len(votes) / 4:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    votes = stdin.split(\" \")\n    votes = [int(v) for v in votes]\n    max_votes = max(votes)\n    max_count = votes.count(max_votes)\n    if max_count >= int(m):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nN, M = [int(i) for i in sys.stdin.readline().rstrip().split(' ')]\nvotes = [int(i) for i in sys.stdin.readline().rstrip().split(' ')]\n\nmax_votes = max(votes)\nmin_votes = max_votes//(4*M)"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    # Get inputs\n    raw_inputs = stdin.splitlines()\n\n    # Get dimensions\n    H, W, K = [int(x) for x in raw_inputs[0].split()]\n\n    # Get colors\n    colors = []\n    for i in range(1, H + 1):\n        colors.append(list(raw_inputs[i]))\n\n    # Get number of choices\n    num_choices = 0\n    for row in range(H):\n        for col in range(W):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for row in range(W):\n        for col in range(H):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for col in range(W):\n        for row in range(H):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for row in range(H):\n        for col in range(W):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for col in range(H):\n        for row in range(W):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for row in range(H):\n        for col in range(W):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for col in range(W):\n        for row in range(H):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for row in range(H):\n        for col in range(W):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for col in range(W):\n        for row in range(H):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for row in range(H):\n        for col in range(W):\n            if colors[row][col] == '.':\n                # Determine number of choices\n                num_choices += 1\n\n                # See if we've hit K\n                if num_choices == K:\n                    return str(num_choices)\n                num_choices = 0\n                break\n            num_choices = 0\n    # Determine number of choices\n    num_choices += 1\n    if num_choices == K:\n        return str(num_choices)\n    num_choices = 0\n\n    # See if we've hit K\n    for col in range(W):\n        for row in range(H):"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = stdin[3:].split('\\n')\n    grid = [[j for j in i] for i in grid]\n\n    def count_black(grid):\n        count = 0\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j] == '#':\n                    count += 1\n        return count\n\n    def gen_all(grid):\n        for i in range(H):\n            for j in range(W):\n                yield i, j\n\n    def get_neighbours(grid, r, c):\n        n = 0\n        if r > 0:\n            n += grid[r-1][c] == '#'\n        if r < H-1:\n            n += grid[r+1][c] == '#'\n        if c > 0:\n            n += grid[r][c-1] == '#'\n        if c < W-1:\n            n += grid[r][c+1] == '#'\n        return n\n\n    def is_black(grid, r, c):\n        return grid[r][c] == '#'\n\n    def set_black(grid, r, c):\n        grid[r][c] = '#'\n\n    def set_white(grid, r, c):\n        grid[r][c] = '.'\n\n    def flip_column(grid, c):\n        for i in range(H):\n            if is_black(grid, i, c):\n                set_white(grid, i, c)\n            elif not is_black(grid, i, c):\n                set_black(grid, i, c)\n\n    def flip_row(grid, r):\n        for c in range(W):\n            if is_black(grid, r, c):\n                set_white(grid, r, c)\n            elif not is_black(grid, r, c):\n                set_black(grid, r, c)\n\n    for k in range(K):\n        grid_new = []\n        for i, j in gen_all(grid):\n            n = get_neighbours(grid, i, j)\n            if is_black(grid, i, j):\n                if n == 0 or n > 2:\n                    set_white(grid, i, j)\n            else:\n                if n == 2:\n                    set_black(grid, i, j)\n                else:\n                    grid_new.append(['.'] * W)\n                    continue\n            grid_new.append(['.'] * W)\n\n        grid = grid_new\n\n        for c in range(W):\n            flip_column(grid, c)\n\n        for r in range(H):\n            flip_row(grid, r)\n\n    return count_black(grid)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, h, w, k = map(int, stdin.split())\n    _ = input()\n    matrix = [list(input()) for _ in range(h)]\n\n    row_black = []\n    col_black = []\n    for i, row in enumerate(matrix):\n        for j, elem in enumerate(row):\n            if elem == '#':\n                row_black.append(i)\n                col_black.append(j)\n\n    def check(row_choice: int, col_choice: int) -> bool:\n        count = 0\n        for i in row_black:\n            if i in row_choice:\n                count += 1\n        for j in col_black:\n            if j in col_choice:\n                count += 1\n        return count == k\n\n    result = 0\n    for i in range(h + 1):\n        for j in range(w + 1):\n            if i + j <= k and check(row_choice=i, col_choice=j):\n                result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(i) for i in stdin.split(' ')]\n    grid = []\n    for _ in range(H):\n        grid.append([i for i in stdin.split('\\n')[1].strip()])\n\n    count = 0\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '.':\n                count += 1\n            else:\n                count = 0\n            if count == K:\n                return str(W * H - (K - 1))\n\n    for i in range(W):\n        for j in range(H):\n            if grid[j][i] == '.':\n                count += 1\n            else:\n                count = 0\n            if count == K:\n                return str(W * H - (K - 1))\n\n    i, j = 0, 0\n    while i < H and j < W:\n        if grid[i][j] == '.':\n            count += 1\n        else:\n            count = 0\n        if count == K:\n            return str(W * H - (K - 1))\n        if i + 1 < H and grid[i + 1][j] == '.':\n            count += 1\n            i += 1\n        else:\n            i = 0\n            j += 1\n\n    while j < W and i < H:\n        if grid[i][j] == '.':\n            count += 1\n        else:\n            count = 0\n        if count == K:\n            return str(W * H - (K - 1))\n        if j + 1 < W and grid[i][j + 1] == '.':\n            count += 1\n            j += 1\n        else:\n            j = 0\n            i += 1\n    return str(W * H - (K - 1))\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    lines = stdin.splitlines()\n    h = int(lines[0].split(\" \")[0])\n    w = int(lines[0].split(\" \")[1])\n    k = int(lines[0].split(\" \")[2])\n\n    # process\n    def generate_squares(h: int, w: int, k: int) -> int:\n        num_choices = 0\n        for i in range(h):\n            for j in range(w):\n                if k == remaining_black(i, j, h, w):\n                    num_choices += 1\n        return num_choices\n\n    def remaining_black(i: int, j: int, h: int, w: int) -> int:\n        remaining = 0\n        for jj in range(j, w):\n            if i > 0:\n                remaining += black_square_if(i, jj, h, w)\n            if j > 0:\n                remaining += black_square_if(i, jj, h, w)\n            if jj < w - 1:\n                remaining += black_square_if(i, jj, h, w)\n        return remaining\n\n    def black_square_if(i: int, j: int, h: int, w: int) -> int:\n        return 1 if (lines[i][j] == \"#\") else 0\n\n    return str(generate_squares(h, w, k))\n\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds number of possible choices of rows and columns to remove K squares of the same color.\n    \n    Args:\n        stdin (str): Input string\n    \n    Returns:\n        str: Number of possible choices of rows and columns to remove K squares of the same color.\n    \"\"\"\n    H, W, K = [int(x) for x in stdin.split()]\n    \n    if K >= H * W:\n        return str(H * W)\n    \n    black_squares = set()\n    \n    for row in range(H):\n        for col in range(W):\n            if (row + col) % 2 == 0:\n                if stdin[row * W + col] == '.':\n                    black_squares.add(row * W + col)\n    \n    \n    choices = set()\n    \n    def recurse(choices, curr_black_squares):\n        if len(curr_black_squares) == K:\n            choices.add(tuple(choices))\n            return\n        for i, j in curr_black_squares:\n            for new_i in range(i - 1, i + 2):\n                for new_j in range(j - 1, j + 2):\n                    if 0 <= new_i < H and 0 <= new_j < W and (new_i, new_j) not in curr_black_squares:\n                        recurse(choices, curr_black_squares + [(new_i, new_j)])\n    recurse(choices, [])\n    return str(len(choices))"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    A = [[c == \"#\" for c in stdin[0 + i * W: W + i * W]] for i in range(H)]\n    return sum(\n        1\n        for i in range(H)\n        for j in range(W)\n        if A[i][j] and sum(A[i]) == 1 and sum([A[k][j] for k in range(H)]) == 1\n    )\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split('\\n')[:3])\n    c = [[c for c in line] for line in stdin.split('\\n')[3:]]\n    return '\\n'.join([\n        str(sum([\n            1\n            for row in range(H)\n            for col in range(W)\n            if c[row][col] == '#' and (\n                (row == 0 and col == 0) or (row == 0 and col == W - 1) or\n                (row == H - 1 and col == 0) or (row == H - 1 and col == W - 1) or\n                (row == 0 and 1 <= col <= W - 2) or\n                (row == 1 and 1 <= col <= W - 2) or\n                (row == H - 2 and 1 <= col <= W - 2) or\n                (1 <= row <= H - 2 and col == 0) or\n                (1 <= row <= H - 2 and col == W - 1) or\n                (row == H - 1 and 1 <= col <= W - 2)\n            )\n        ])),\n    ])\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    chars = stdin.split()\n    black_sqrs = 0\n    for row in range(H):\n        for column in range(W):\n            if chars[row][column] == '#':\n                black_sqrs += 1\n    result = 0\n    for row_to_remove in range(H + 1):\n        for col_to_remove in range(W + 1):\n            if (row_to_remove == 0 and col_to_remove == 0) or black_sqrs - (row_to_remove + col_to_remove) < K:\n                continue\n            result += bino(H - row_to_remove, W - col_to_remove)\n    return str(result)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # get input from stdin\n    # print your result to stdout\n    # the sum of all numbers must be less than or equal to k\n    # the sum of numbers in each column must be less than or equal to k\n    # the sum of numbers in each row must be less than or equal to k\n    # the sum of numbers in the bottom-left diagonal must be less than or equal to k\n    # the sum of numbers in the top-right diagonal must be less than or equal to k\n    # number of rows\n    H, W, K = [int(x) for x in stdin.split()]\n    # number of columns\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    # number of rows\n    # number of columns\n    # number of black squares\n    # number of rows\n    # number of columns\n    # number of black squares\n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    # number of black squares\n    \n    # number of rows\n    # number of columns\n    "
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum possible value of (i \\times j) \\mbox{ mod } 2019 when i and j are chosen under the given condition.\n\n    Args:\n        stdin (str): Input from standard input.\n\n    Returns:\n        str: The minimum possible value of (i \\times j) \\mbox{ mod } 2019 when i and j are chosen under the given condition.\n    \"\"\"\n    L, R = [int(x) for x in stdin.split()]\n    return str(min([i*j % 2019 for i in range(L, R+1) for j in range(L, R+1)]))\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return ''.join([str((L * i) % 2019) + str((R * j) % 2019) for i in range(L, R + 1) for j in range(L, R + 1)])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(n) for n in stdin.split()]\n    return min(sum((i, j) for i, j in zip(range(l, r), range(r, l, -1))),\n               sum((i, j) for i, j in zip(range(l, r), range(r, l, -1)))) % 2019"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    print(pow(min(l, r) * max(l, r), 2019))\n\n    return \"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    i, j = map(int, stdin.split(' '))\n    return (i * j) % 2019\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    nums = [int(n) for n in stdin.split()]\n    return solve(nums)\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2020 2040\")\n    2\n    \"\"\"\n    L, R = map(int, stdin.split())\n    return min(\n        (i * j) % 2019\n        for i in range(L, R + 1)\n        for j in range(i + 1, R + 1)\n    )\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    L, R = stdin.split(\" \")\n    L, R = int(L), int(R)\n    return str(min([[2020, 2021][(L <= i < j <= R)], [2021, 2020][(L <= j < i <= R)]][0]))"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i = 1\n    j = 1\n    min_val = 1\n    while i * j <= L or i * j <= R:\n        if i * j < min_val:\n            min_val = i * j\n        if i * j > R:\n            i += 1\n            j = 1\n        else:\n            j += 1\n    return min_val\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    l, r = [int(x) for x in stdin.split()]\n    ans = 0\n    for i in range(l, r + 1):\n        for j in range(i + 1, r + 1):\n            ans = min(ans, (i * j) % 2019)\n    return str(ans)\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    \n    if string[0]!= 'A' or string[2]!= 'C' or string[3]!= 'B' or string[1] == 'C' or string[1] == 'A':\n        print('WA')\n    else:\n        print('AC')\n    return"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin = stdin[0]\n\n    if len(stdin) == 4 and stdin[0] == \"A\" and stdin[2] == \"C\" and stdin[3] == \"C\":\n        return \"AC\"\n    else:\n        return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return 'AC' if (s[0] == 'A') and (s[2] == 'C') and (s[3]!= 'A') and (s[3]!= 'C') and (s[4]!= 'A') and (s[4]!= 'C') and (s[5]!= 'A') and (s[5]!= 'C') else 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # YOUR CODE HERE\n    return \"AC\" if (\n        (stdin[0] == \"A\") and (stdin[2] == \"C\") and (stdin[3] == \"a\") and (stdin[4] == \"c\") and (stdin[5] == \"a\") and (\n                stdin[1]!= \"C\") and (stdin[1]!= \"c\")\n    ) else \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    return 'AC' if re.match('^[A]|[C]{1}[^A]{2}$', stdin) else 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    if not s == 'A':\n        return 'WA'\n    if not s[2] == 'C':\n        return 'WA'\n    for i in range(2, len(s) - 1):\n        if not s[i] == 'C' and not s[i] =='':\n            return 'WA'\n    return 'AC'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    if input_str[0] == \"A\" and input_str[2] == \"C\" and input_str[3] == \" \":\n        return \"AC\"\n    else:\n        return \"WA\"\n\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count(\"A\") == 1 and stdin.count(\"C\") == 1 and \"\".join(c for c in stdin if c.isupper() == False):\n        return \"AC\"\n    else:\n        return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(\"AC\" if all([stdin[0] == 'A', stdin[2] == 'C', stdin[3] == 'c' and all(map(lambda x: x.islower(), stdin[4:-1]))]) else \"WA\")"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0]!= \"A\" or s[2]!= \"C\":\n        return \"WA\"\n    if s[1]!= \"C\":\n        return \"WA\"\n    i = 3\n    while i < len(s):\n        if s[i]!= \"C\":\n            return \"WA\"\n        i += 2\n    return \"AC\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    K = int(stdin.split('\\n')[1])\n    for i in range(5):\n        S = int(S)\n        S = str(S)\n        S = S.replace('2', '22')\n        S = S.replace('3', '333')\n        S = S.replace('4', '4444')\n        S = S.replace('5', '55555')\n        S = S.replace('6', '666666')\n        S = S.replace('7', '7777777')\n        S = S.replace('8', '88888888')\n        S = S.replace('9', '999999999')\n        S = S.replace('1', '1')\n    S = S[:K]\n    return S\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get S, K\n    s = stdin[0]\n    k = int(stdin[1])\n    \n    # get number of digits\n    n = len(s)\n    \n    # initialize leftmost index of string to 0\n    leftmost_index = 0\n    \n    # initialize number of days elapsed to 0\n    days = 0\n    \n    # initialize the day of the year (for the question)\n    day_of_year = 0\n    \n    # initialize the number of times Mr. Infinity changes his number to check if we're done\n    change_count = 0\n    \n    # initialize the number of times we loop through the loop\n    loop_count = 0\n    \n    # initialize the number of times we loop through the loop\n    total_loop_count = 0\n    \n    while change_count < k:\n        # initialize leftmost index of string to 0\n        leftmost_index = 0\n        \n        # initialize the number of days elapsed to 0\n        days = 0\n        \n        # initialize the day of the year (for the question)\n        day_of_year = 0\n        \n        # initialize the number of times Mr. Infinity changes his number to check if we're done\n        change_count = 0\n        \n        while loop_count < total_loop_count:\n            # initialize the number of times we loop through the loop\n            loop_count = 0\n            \n            while loop_count < loop_count + n:\n                # initialize the number of times we loop through the loop\n                total_loop_count = 0\n                \n                # check if we're done\n                if change_count >= k:\n                    # if we are, return the leftmost index\n                    return s[leftmost_index]\n                \n                # increment the leftmost index\n                leftmost_index += 1\n                \n                # check if we are done\n                if leftmost_index >= n:\n                    # if we are, return the leftmost index\n                    return s[leftmost_index - 1]\n                \n                # increment the number of times we loop through the loop\n                total_loop_count += 1\n                \n                # check if we are done\n                if days >= 5 * (10 ** 15):\n                    # if we are, return the leftmost index\n                    return s[leftmost_index]\n                \n                # increment the number of days elapsed\n                days += 1\n                \n                # check if we are done\n                if days >= 5 * (10 ** 15):\n                    # if we are, return the leftmost index\n                    return s[leftmost_index]\n                \n                # if we are not done, check if the number is even or odd\n                if loop_count % 2 == 0:\n                    # if it's even, check if it's 2\n                    if s[leftmost_index - 1] == '2':\n                        # if it is, add two to the number of times we loop through the loop\n                        loop_count += 2\n                    else:\n                        # otherwise, add one to the number of times we loop through the loop\n                        loop_count += 1\n                else:\n                    # if it's odd, check if it's 1\n                    if s[leftmost_index - 1] == '1':\n                        # if it is, add two to the number of times we loop through the loop\n                        loop_count += 2\n                    else:\n                        # otherwise, add one to the number of times we loop through the loop\n                        loop_count += 1\n                \n                # check if we are done\n                if loop_count >= total_loop_count:\n                    # if we are, check if the number is 2\n                    if s[leftmost_index - 1] == '2':\n                        # if it is, multiply the number of days elapsed by 10\n                        days *= 10\n                    else:\n                        # otherwise, multiply the number of days elapsed by 11\n                        days *= 11\n                    \n                    # increment the number of times Mr. Infinity changes his number to check if we're done\n                    change_count += 1\n                    \n                    # check if we are done\n                    if change_count >= k:\n                        # if we are, return the leftmost index\n                        return s[leftmost_index]\n    \n    return s[leftmost_index]\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    S = S.replace('2', '22')\n    S = S.replace('3', '33333')\n    S = S.replace('4', '444444')\n    S = S.replace('5', '555555')\n    S = S.replace('6', '66666666')\n    S = S.replace('7', '77777777')\n    S = S.replace('8', '88888888')\n    S = S.replace('9', '99999999')\n    S = S.replace('1', '1')\n    return S[:K-1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    S = S.replace('2', '22')\n    S = S.replace('3', '33')\n    S = S.replace('4', '44')\n    S = S.replace('5', '55')\n    S = S.replace('6', '66')\n    S = S.replace('7', '77')\n    S = S.replace('8', '88')\n    S = S.replace('9', '99')\n    S = S.replace('1', '11')\n    for i in range(int(stdin)):\n        S = S.replace('22', '2')\n        S = S.replace('33', '3')\n        S = S.replace('44', '4')\n        S = S.replace('55', '5')\n        S = S.replace('66', '6')\n        S = S.replace('77', '7')\n        S = S.replace('88', '8')\n        S = S.replace('99', '9')\n        S = S.replace('11', '1')\n    return S[int(stdin) - 1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split('\\n')\n    S = S[1:-1]\n    return S[K - 1]\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    K = int(stdin.split()[1])\n    count = 0\n    while count < 5 * 10 ** 15:\n        count += 1\n        S = change(S)\n    return S[K - 1]\n\n\ndef"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    s = list(s)\n    t = 5\n    while t > 0:\n        for i in range(len(s)):\n            if s[i] == '2':\n                s[i] = '22'\n            elif s[i] == '3':\n                s[i] = '33'\n            elif s[i] == '4':\n                s[i] = '44'\n            elif s[i] == '5':\n                s[i] = '55'\n            elif s[i] == '6':\n                s[i] = '66'\n            elif s[i] == '7':\n                s[i] = '77'\n            elif s[i] == '8':\n                s[i] = '88'\n            elif s[i] == '9':\n                s[i] = '99'\n            elif s[i] == '1':\n                s[i] = '11'\n            else:\n                s[i] = s[i]\n        t -= 1\n    return s[k-1]\n\n\ndef"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split('\\n')\n    S = list(S)\n    S = [int(n) for n in S]\n    k = int(K)\n    for i in range(k):\n        for n in range(len(S)):\n            if S[n] == 2:\n                S[n] = 3\n            elif S[n] == 3:\n                S[n] = 4\n            elif S[n] == 4:\n                S[n] = 5\n            elif S[n] == 5:\n                S[n] = 6\n            elif S[n] == 6:\n                S[n] = 7\n            elif S[n] == 7:\n                S[n] = 8\n            elif S[n] == 8:\n                S[n] = 9\n            elif S[n] == 9:\n                S[n] = 1\n    for n in range(len(S)):\n        if S[n] == 1:\n            return(str(n+1))\n\nprint(solution(input()))"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    p = [int(x) for x in stdin.readline().split()]\n\n    for i in range(n):\n        for j in range(n):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                break\n    if p == sorted(p):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(num) for num in stdin.split(' ')]\n    # We want to know if we can sort the array\n    # First we sort it ascending order\n    # Then we check if the last number is smaller than the number before it\n    # If not we can't sort it\n    p.sort()\n    if p[n-2] <= p[n-1]:\n        return 'YES'\n    return 'NO'\n\"\"\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    ans = \"YES\"\n    for i in range(n - 1):\n        if p[i] > p[i + 1]:\n            if i == 0:\n                ans = \"NO\"\n            else:\n                ans = \"YES\"\n            p[i], p[i + 1] = p[i + 1], p[i]\n            ans = \"YES\"\n            break\n    print(ans)\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = int(stdin.readline().strip('\\n'))\n    A = [int(i) for i in stdin.readline().strip('\\n').split(' ')]\n    B = [i for i in range(1, N + 1)]\n    for i in range(N):\n        for j in range(i + 1, N):\n            if A[i] > A[j]:\n                B[i], B[j] = B[j], B[i]\n                break\n    if B == A:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *sequence = map(int, stdin.split())\n    sequence.sort()\n    return \"YES\" if sequence == list(range(1, n + 1)) else \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    l = list(map(int, stdin.split(\"\\n\")[1].split()))\n    s = set(l)\n    if len(s)!= len(l):\n        print(\"NO\")\n        return\n    s.remove(1)\n    if len(s)!= N-1:\n        print(\"NO\")\n        return\n    print(\"YES\")"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a permutation sequence, determine if we can sort it with the given permutation operations.\"\"\"\n    stdin = stdin.strip()\n    n, *sequence = (int(i) for i in stdin.split())\n\n    if n == len(set(sequence)):\n        return \"YES\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Return YES if you can sort p in ascending order in the way stated in the problem statement, and NO otherwise.'''\n    N, *p = stdin.split()\n    N, p = int(N), list(map(int, p))\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                break\n    return 'YES' if p == sorted(p) else 'NO'"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    answer = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if is_divisible_by_3(s[i:j+1]):\n                answer += 1\n    return answer\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the largest number divisible by 3\n    that can be obtained by making a certain number of vertical cuts between adjacent digits in a number s.\n    :param stdin: the number s\n    :return: the largest number divisible by 3 that can be obtained by making a certain number of vertical cuts between adjacent digits in a number s\n    \"\"\"\n    n = int(stdin)\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(i-1, 0, -2):\n            if j % 3 == 0 and i % 3 == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n]\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    s = int(stdin[0])\n    result = 0\n    while s!= 0:\n        for i in range(1,len(str(s))):\n            if s % 3 == 0:\n                result += 1\n            s = s // 10\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string of maximum number of numbers that are divisible by 3\n    \"\"\"\n    return str(max([len(x) for x in stdin.split('|')]))\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Builds up the answer by finding the number of substrings\n    that can be cut up into a number divisible by 3.\n    '''\n    s = stdin\n    answer = 0\n    substr = ''\n    for i in range(len(s)):\n        substr += s[i]\n        if i == len(s)-1:\n            answer += (len(s)%3)\n            break\n        substr = substr if int(substr)%3!= 0 else substr[1:]\n        if int(substr)%3 == 0:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split('\\n')\n    \n    return str(solution_runner(nums))\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    num = stdin\n    l = len(num)\n    f = 0\n    for i in range(l):\n        if int(num[i]) % 3 == 0:\n            f += 1\n        if i!= l - 1 and int(num[i]) % 3 == 0 and int(num[i + 1]) % 3!= 0:\n            f += 1\n    return f\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    \n    optimal_d = 0\n    max_zeroes = 0\n    for i in range(1, N):\n        if A[i] == 0 or B[i] == 0:\n            continue\n        d = A[i] / B[i]\n        if d > optimal_d:\n            optimal_d = d\n            max_zeroes = N - i\n    return max_zeroes"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\nimport sys\nfrom itertools import product\nfrom functools import reduce\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *arr = map(int, stdin.split())\n    arr_1, arr_2 = map(list, arr)\n    M = len(arr_1)\n    N = len(arr_2)\n    res = 0\n    for i in range(M):\n        for j in range(N):\n            res = max(res, (arr_1[i] * arr_2[j]) % 10)\n    return str(res)\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u89e3\u984c\u601d\u8def\uff1a\n        \u82e5\u5c07\u4e00\u7d44\u6578\u76f8\u4e58\u5f8c\uff0c\u5927\u65bc0\n        \u5247\u53ef\u4ee5\u5148\u628a\u6578\u76f8\u4e58\uff0c\u518d\u505a\u76f8\u52a0\n        \u7d00\u9304\u6700\u5927\u7684\u70ba\u7b54\u6848\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    a, b = map(int, stdin.splitlines()[1].split())\n    c = [a * i + b for i in range(1, n + 1)]\n    print(max([(a * i + b) // 0 for i in range(1, n + 1)]))\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.splitlines()[0]\n    line1 = [int(x) for x in line1.split(' ')]\n    n = line1[0]\n    line2 = stdin.splitlines()[1]\n    line2 = [int(x) for x in line2.split(' ')]\n    line3 = stdin.splitlines()[2]\n    line3 = [int(x) for x in line3.split(' ')]\n\n    # So we know that for each number, there is at least 1 zero\n    # So, if we divide by each number and find the min zero\n    # we can use the min of all\n    # This is O(n) time and O(1) space\n    min_zero = min([x for x in line1 + line2 + line3 if x!= 0])\n    max_zero = 0\n\n    for x in line1:\n        for y in line2:\n            for z in line3:\n                current = (x * y + z) / min_zero\n                current = current * min_zero\n                current = current.as_integer_ratio()[0]\n                max_zero = max(max_zero, current)\n    return max_zero\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\\\n1 2 3 4 5\\\\n2 4 7 11 3\\\\n\")\n    2\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    b = [int(i) for i in stdin.readline().split()]\n    d = 0\n    c = [None for _ in range(n)]\n    for i in range(n):\n        c[i] = d * a[i] + b[i]\n        if c[i] == 0:\n            d = -1\n        elif c[i] > 0:\n            d = 1\n\n    return str(max(c.count(0), d))\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the maximum number of zeroes in array $c$, if you choose $d$ optimally.\n    \"\"\"\n    pass\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    boots = [x for x in stdin.split('\\n')[1]]\n    left_boots = [x for x in boots if x!= '?']\n    right_boots = [x for x in boots if x!= '?']\n    left_color = {}\n    for i in range(len(left_boots)):\n        if left_boots[i] in left_color.keys():\n            left_color[left_boots[i]].append(i)\n        else:\n            left_color[left_boots[i]] = [i]\n\n    right_color = {}\n    for i in range(len(right_boots)):\n        if right_boots[i] in right_color.keys():\n            right_color[right_boots[i]].append(i)\n        else:\n            right_color[right_boots[i]] = [i]\n\n    max_len = min(len(left_boots), len(right_boots))\n    ans = [0]*max_len\n    for i in range(max_len):\n        if left_boots[i]!= '?' and right_boots[i]!= '?':\n            if left_boots[i] == right_boots[i]:\n                ans[i] += 1\n        else:\n            if left_boots[i]!= '?':\n                for j in left_color[left_boots[i]]:\n                    ans[j] += 1\n            if right_boots[i]!= '?':\n                for j in right_color[right_boots[i]]:\n                    ans[j] += 1\n    print(max(ans))\n    for i in range(len(ans)):\n        if ans[i] == max(ans):\n            print(i+1, end ='')\n\n    return ''"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\ncodeforces\\ndodivthree\")\n    5\n    >>> solution(\"7\\nabaca?b\")\n    5\n    >>> solution(\"9\\nbambarbia\\nhellocode\")\n    0\n    >>> solution(\"10\\ncode??????\\n??????test\")\n    10\n    >>> solution(\"100\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n???:?\\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin.split('\\n')\n    k = int(l)\n\n    c = 0\n    for i in range(k):\n        for j in range(i+1, k):\n            print(i, j)\n            if r[i] == '?' or r[j] == '?':\n                if r[i] == r[j]:\n                    c += 1\n            elif r[i] == r[j]:\n                c += 1\n\n    return str(c)\n\nprint(solution('10\\ncodeforces\\ndodivthree'))\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of left and right boot colors that are compatible.\n    If at least one pair is compatible, output the number of pairs.\n    \"\"\"\n    boots: List[str] = stdin.split('\\n')\n    n = int(boots[0])\n    boots = [x.strip() for x in boots]\n    left_boots: List[str] = []\n    right_boots: List[str] = []\n    for x in range(n):\n        if x % 2 == 0:\n            left_boots.append(boots[x])\n        else:\n            right_boots.append(boots[x])\n\n    # Find all possible pairs of left/right boots\n    pairs: List[str] = []\n    for x in range(n):\n        left = left_boots[x]\n        right = right_boots[x]\n        if left == '?' or right == '?':\n            # Pairs with indefinite left/right boots\n            for i in range(n):\n                if x!= i:\n                    pairs.append('{} {}'.format(x, i))\n        else:\n            # Pairs with definite left/right boots\n            for i in range(n):\n                if x!= i and (left == left_boots[i] or left == '?') and (right == right_boots[i] or right == '?'):\n                    pairs.append('{} {}'.format(x, i))\n    if len(pairs) > 0:\n        pairs: List[str] = [x.split() for x in pairs]\n        print(len(pairs))\n        for x in pairs:\n            print(' '.join(x))\n    else:\n        print(0)\n    return ''\n    "
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    How many pairs of left and right boots are compatible?\n    \n    > For each boot i, its color can be either c (specific),? (indefinite) or not specified.\n    > The result is the number of such pairs.\n    \n    Note: this is an optimized solution to the problem.\n    '''\n    \n    n = int(stdin.splitlines()[0])\n    \n    l_nums = []\n    r_nums = []\n    for l, r in zip(stdin.splitlines()[1], stdin.splitlines()[2]):\n        if l.isalpha():\n            l_nums.append(l)\n        else:\n            l_nums.append('?')\n        if r.isalpha():\n            r_nums.append(r)\n        else:\n            r_nums.append('?')\n            \n    compatible_num = 0\n    l_num = ''\n    r_num = ''\n    for i in range(n):\n        if l_nums[i]!= '?':\n            l_num = l_nums[i]\n        if r_nums[i]!= '?':\n            r_num = r_nums[i]\n            \n        if l_num!= '?' and r_num!= '?':\n            if l_num == r_num:\n                compatible_num += 1\n        elif l_num == '?':\n            compatible_num += 1 if r_num!= '?' else 0\n        elif r_num == '?':\n            compatible_num += 1 if l_num!= '?' else 0\n    \n    print(compatible_num)\n    for i in range(compatible_num):\n        print(i, end=' ')\n        print(i+1)\n        \n    return ''\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10\\ncodeforces\\ndodivthree')\n    '5\\n7 8\\n4 9\\n2 2\\n9 10\\n3 1'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(input()))\n    4\n    3\n    1 1\n    2 2\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    result = []\n    l = 1\n    l_sum = a[0]\n    r_sum = 0\n\n    while l_sum!= r_sum:\n        while l_sum <= r_sum and l < n:\n            l_sum += a[l]\n            l += 1\n        while r_sum < l_sum and r < n:\n            r_sum += a[r]\n            r += 1\n        if l_sum == r_sum:\n            result.append((l, r))\n            l_sum += a[l]\n            r_sum += a[r]\n            l += 1\n            r += 1\n        else:\n            l_sum = a[l]\n            r_sum = 0\n            l += 1\n            r = l\n\n    result_set = set(result)\n    for i in range(len(result)):\n        for j in range(i + 1, len(result)):\n            if result[i][1] < result[j][0] or result[j][1] < result[i][0]:\n                result_set.remove(result[i])\n                break\n\n    return len(result_set)\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    n = len(lst)\n    left = [0] * n\n    right = [0] * n\n    left[0] = lst[0]\n    right[n - 1] = lst[n - 1]\n    for i in range(1, n):\n        left[i] = left[i - 1] + lst[i]\n        right[n - i - 1] = right[n - i] + lst[n - i - 1]\n    left = [1] + left + [0]\n    right = [1] + right + [0]\n    lst = [0] * n\n    for i in range(n):\n        lst[i] = right[i] - left[i]\n    ans = 1\n    max_len = max(lst)\n    for i in range(1, n):\n        if lst[i] < lst[i - 1] and lst[i] < lst[i + 1]:\n            ans += 1\n    for i in range(1, n - 1):\n        if lst[i] < lst[i - 1] and lst[i] < lst[i + 1] and lst[i] < lst[i - 1]:\n            ans += 1\n    print(ans)\n    print(*lst)\n    for i in range(1, n - 1):\n        if lst[i] < lst[i - 1] and lst[i] < lst[i + 1] and lst[i] < lst[i - 1]:\n            print(i, i)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n\n    # N = int(inputs[0])\n    N = int(inputs[0])\n    A = [int(i) for i in inputs[1].split(\" \")]\n\n    M = 0\n    m = 0\n    for i in range(N):\n        for j in range(i, N):\n            if A[i] > M and A[j] > M and (j - i) % 2 == 1:\n                M = A[i]\n                m = A[j]\n    print(m)\n    # for i in range(N):\n    #     if A[i] > M:\n    #         M = A[i]\n    #         print(M)\n\n\n    # M = 0\n    # m = 0\n    # for i in range(N):\n    #     if A[i] > M and (i % 2 == 1):\n    #         M = A[i]\n    #         print(M)\n    #     if A[i] > m and (i % 2 == 0):\n    #         m = A[i]\n    #         print(m)\n    # print(m)\n    # for i in range(N):\n    #     if A[i] > M and A[i] > m and (i % 2 == 1):\n    #         print(M, A[i])\n    #     if A[i] > m and A[i] > M and (i % 2 == 0):\n    #         print(A[i], m)\n    #     if A[i] > M and A[i] > m:\n    #         print(M, m)\n\n    return \"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def merge_two_sorted_lists(L1: List, L2: List) -> List:\n        L1, L2 = L1.copy(), L2.copy()\n        if not L1:\n            return L2\n        elif not L2:\n            return L1\n        elif L1[0] < L2[0]:\n            return L1[:1] + merge_two_sorted_lists(L1[1:], L2)\n        else:\n            return L2[:1] + merge_two_sorted_lists(L1, L2[1:])\n\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    c = []\n    if n <= 4:\n        print(n)\n        for i in range(1, n):\n            if a[i]!= a[i - 1]:\n                print(1, i, i)\n    else:\n        while a:\n            if a[0] == a[1]:\n                c.append(a[0])\n                a.pop(0)\n            elif a[0]!= a[1]:\n                if a[0] > a[1]:\n                    a.pop(0)\n                    a.pop(0)\n                    c.append(a[0])\n                elif a[0] < a[1]:\n                    a.pop(1)\n                    a.pop(1)\n                    c.append(a[0])\n        if not c:\n            print(1, n, n)\n        else:\n            print(n)\n            for i in range(0, len(c), 2):\n                print(1, i, i + 1)\n            for i in range(1, n):\n                if a[0]!= a[1]:\n                    if a[0] > a[1]:\n                        a.pop(0)\n                        a.pop(0)\n                        c.append(a[0])\n                    elif a[0] < a[1]:\n                        a.pop(1)\n                        a.pop(1)\n                        c.append(a[0])\n                elif a[0] == a[1]:\n                    print(1, 1, 1)\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a set of blocks such that their sum is the same.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Result string\n    \"\"\"\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().strip().split()))\n    num_map = {}\n    for num in nums:\n        num_map.setdefault(num, []).append(nums.index(num))\n    keys = list(num_map.keys())\n    keys.sort()\n    result = []\n    for i in range(len(keys)):\n        if i == 0 or keys[i] - keys[i - 1]!= 1:\n            keys_to_add = [key for key in keys if key >= keys[i]]\n            keys_to_add.sort()\n            for key in keys_to_add:\n                keys_with_key = [key for key in keys if key >= keys[i]]\n                keys_with_key.sort()\n                if len(keys_with_key) == 1:\n                    result.append(keys_with_key[0])\n                else:\n                    result.append(keys_with_key[0])\n                    result.append(keys_with_key[-1])\n    result.sort()\n    print(len(result))\n    print(' '.join(str(num) for num in result))\n    return ''"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    >>> solution('7\\n4 1 2 2 1 5 3')\n    '3\\n7 7\\n2 3\\n4 5\\n'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    if n < 4:\n        return \"1\\n1 1\"\n\n    # sort the array\n    a.sort()\n\n    # get the blocks\n    blocks = []\n    start = 0\n    end = 1\n    while end < n:\n        if a[start] + a[end] == a[end] + a[start]:\n            if end - start > 1:\n                blocks.append((start + 1, end))\n            start = end\n            end = start + 1\n        else:\n            end += 1\n\n    # get the number of blocks\n    if end - start > 1:\n        blocks.append((start + 1, end))\n    else:\n        blocks.append((1, end))\n\n    # output\n    res = str(len(blocks)) + '\\n'\n    for i, j in blocks:\n        res += str(i) +'' + str(j) + '\\n'\n\n    return res\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n4 1 2 2 1 5 3\\n\")\n    3\n    >>> solution(\"11\\n-5 -4 -3 -2 -1 0 1 2 3 4 5\\n\")\n    2\n    >>> solution(\"4\\n1 1 1 1\\n\")\n    4\n    \"\"\"\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split(\" \")]\n    blocks = [0] * n\n    for i in range(n):\n        blocks[i] = 1\n        for j in range(i):\n            if arr[j] < arr[i] <= blocks[j]:\n                blocks[j] = arr[i]\n    print(len(set(blocks)))\n    for i in sorted(set(blocks)):\n        print(i, end=\" \")\n        print(i, end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    ans = 1\n    left = 0\n    right = 0\n    for i in range(n):\n        left = max(left, a[i])\n        right = max(right, a[n - 1 - i])\n        if left > right:\n            ans += 1\n    print(ans)\n    for i in range(n):\n        print(str(i + 1) + \" \" + str(n - i))\n    return \"\"\n\nsolution(\"7 4 1 2 2 1 5 3\")\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                cnt += 1\n    print(cnt)\n    return ''\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                if (a[i] + a[j]) % k == 0:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n\n    total = 0\n\n    for x in range(n):\n        for y in range(x, n):\n            if (x + y) % k == 0:\n                total += 1\n\n    return str(total)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom math import prod\nfrom functools import reduce\n\n\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] % k == 0:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(solve(stdin))\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return'solution'\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(A):\n        n = len(A)\n        # find the maximum possible sum\n        res = sum(A)\n        # find the index of the minimum element\n        # in the array\n        for i in range(n):\n            if i + 1 < n:\n                res = max(res, A[i] + solve(A[i + 1:]))\n        return res\n    A = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    res = solve(A)\n    return str(res)\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the maximum possible sum of the elements of A.\n    >>> solution('3\\n2 5')\n    9\n    >>> solution('4\\n2 5 4 7')\n    12\n    '''\n    N, *A = list(map(int, stdin.split()))\n    B = [0] * (len(A)-1)\n    for i in range(len(B)):\n        B[i] = A[i+1] + max(A[i], A[i+1])\n    return max(B)\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(x) for x in stdin.split()][1:]\n    a = [(b[i], b[i+1]) for i in range(len(b)-1)]\n    return str(max([sum(x) for x in a]))\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Find the maximum possible sum of the elements of A.\n\n    Args:\n        stdin (str): Input from standard input.\n\n    Returns:\n        str: Output to standard output.\n    '''\n    N = int(stdin)\n    B = list(map(int, stdin.split()))\n    A = [B[i-1] for i in range(1, N)]\n    A.append(B[N-1])\n    B.append(0)\n    B = [0] + B\n\n    max_sum = 0\n    for i in range(1, N):\n        max_sum = max(max_sum, B[i] - B[i-1])\n\n    for i in range(1, N):\n        if A[i] < A[i+1]:\n            continue\n        else:\n            max_sum = max(max_sum, B[i+1] - B[i-1] + A[i])\n\n    return str(max_sum)\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'The maximum possible sum of the elements of A is: '+ stdin\n    "
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    N, *b = map(int, stdin.split())\n    d = [0] * N\n    d[0] = b[0]\n    max_ = d[0]\n    for i in range(1, N):\n        d[i] = max(d[i-1], b[i])\n        max_ = max(max_, d[i])\n    return max_"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1:]))\n    dp = [0] * n\n    dp[0] = max(arr[0], arr[1])\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], arr[i] + dp[i - 2])\n    return dp[-1]\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum possible sum of the elements of A.\n\n    >>> solution(\"3\\n2 5\")\n    9\n    >>> solution(\"4\\n-1 2 3\")\n    6\n    '''\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().strip().split()]\n    prev = arr[0]\n    res = prev\n    for curr in arr[1:]:\n        res = max(res, prev + curr)\n        prev = max(prev, curr)\n    return res\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # create a matrix of the input\n    matrix = [[int(i) for i in line.split()] for line in stdin.split('\\n') if line!= '']\n    # create an empty array to store the possible results\n    results = []\n    # loop through the matrix\n    for n in range(0, len(matrix)):\n        # create an empty array to store the possible results\n        row = []\n        for m in range(0, len(matrix[n])):\n            # loop through the matrix again and create a list of the possible results\n            for q in range(0, len(matrix)):\n                if n!= q:\n                    # create a list to store all possible results\n                    result = []\n                    # loop through the matrix again and add the necessary values to the result list\n                    for a in range(0, len(matrix[n])):\n                        # if the values in the matrix are equal add them to the result list\n                        if matrix[n][a] == matrix[q][m]:\n                            result.append(matrix[n][a])\n                    # if the length of the list is not zero\n                    if len(result)!= 0:\n                        # add the results to the row array\n                        row.append(result)\n        # if the length of the array is not zero\n        if len(row)!= 0:\n            # sort the row array and create a new one with all the values\n            sorted_row = sorted(row, key=len)\n            # add the max value of the row to the results array\n            results.append(max([sum(i) for i in sorted_row]))\n    # return the max value of the array of the results\n    return str(max(results))"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '110'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().strip().split())\n    score = 0\n    for _ in range(q):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        if a < b and b <= n:\n            if a - 1 == c:\n                score += d\n            else:\n                score = 0\n        else:\n            score = 0\n    print(score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N*M) / O(1)\n    \"\"\"\n    # get data\n    n, m, q = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split('\\n')[1:n+1]))\n    b = list(map(int, stdin.split('\\n')[n+1:2*n+1]))\n    c = list(map(int, stdin.split('\\n')[2*n+1:3*n+1]))\n    d = list(map(int, stdin.split('\\n')[3*n+1:4*n+1]))\n\n    # loop for Q quadruples\n    max_score = 0\n    for i in range(q):\n        a_i, b_i, c_i, d_i = a[i], b[i], c[i], d[i]\n        # score loop\n        cur_score = 0\n        for j in range(n):\n            # break loop if score is higher than max_score\n            if cur_score >= max_score: break\n            # score calculation\n            if a_i <= j <= b_i and a_i <= j <= b_i:\n                cur_score += d_i\n            # skip if current score is already higher than max_score\n            if cur_score > max_score: continue\n\n            # current score is a better one\n            if a_i <= j <= b_i and a_i <= j <= b_i:\n                max_score = cur_score\n                break\n    return str(max_score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, _, _, a = stdin.split()\n    b, c, d = map(int, stdin.split())\n\n    return str(max(0, sum(d[b[i]-1] - d[a[i]-1] for i in range(len(b)))))\n\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '-1'\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(x) for x in stdin.split(\" \")]\n    a, b, c, d = [], [], [], []\n    for i in range(q):\n        a_, b_, c_, d_ = [int(x) for x in stdin.split(\" \")]\n        a.append(a_)\n        b.append(b_)\n        c.append(c_)\n        d.append(d_)\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(1, q+1):\n        for j in range(n):\n            if j < a[i] or j > b[i]:\n                continue\n            for k in range(m):\n                if k < c[i]:\n                    continue\n                if j < a[i] and k < c[i]:\n                    dp[j][k] = max(dp[j][k], dp[a[i]][k-c[i]] + d[i])\n                elif j < a[i] and k > c[i]:\n                    dp[j][k] = max(dp[j][k], dp[a[i]][k] + d[i])\n                elif j > b[i] and k > c[i]:\n                    dp[j][k] = max(dp[j][k], dp[j-b[i]+n][k] + d[i])\n                elif j > b[i] and k < c[i]:\n                    dp[j][k] = max(dp[j][k], dp[j-b[i]+n][k-c[i]] + d[i])\n    return str(max(dp[n-1]))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the maximum possible score of a sequence satisfying the given conditions.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: String containing the maximum possible score.\n    '''\n    n, m, q = [int(x) for x in stdin.split()]\n    scores = []\n    for i in range(q):\n        a, b, c, d = [int(x) for x in stdin.split('\\n')[i + 1].split()]\n        scores.append((a, b, c, d))\n    scores.sort(key=lambda x: x[1])\n    # print(scores)\n    result = 0\n    temp = m\n    for i in range(q):\n        if temp < scores[i][0]:\n            result += scores[i][3]\n            temp = m\n        temp -= 1\n        result += scores[i][3]\n        # print(result, temp, scores[i][3])\n    return result\n    \nprint(solution(stdin))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = stdin[0]\n    arr = stdin[1].split(' ')\n    arr = [int(arr[i]) for i in range(n)]\n    max_diff = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if abs(diff) > max_diff:\n                max_diff = abs(diff)\n    return str(max_diff)\n\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            d.append(abs(a[i] - a[j]))\n    return str(max(d))"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum absolute difference of two elements in an array.\"\"\"\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    abs_diff = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                abs_diff = max(abs_diff, abs(a[i] - a[j]))\n    return str(abs_diff)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    a = list(map(int, stdin.split()[1:]))\n    b = [a[i:i + len(a) // 2] for i in range(0, len(a), len(a) // 2)]\n    return str(max(abs(max(b[0]) - min(b[0]))) + max(abs(max(b[1]) - min(b[1]))))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given an integer sequence A of length N.\nFind the maximum absolute difference of two elements (with different indices) in A.\n\n---Constraints---\n - 2 <= N <= 100\n - 1 <= A[i] <= 10^9\n\n---Input Format---\nThe first line contains N.\nThe next line contains N integers separated by a space.\n\n---Output Format---\nPrint the maximum absolute difference of two elements (with different indices) in A.\n\n---Sample Input---\n4\n1 4 6 3\n\n---Sample Output---\n5\n\"\"\"\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n    if len(A) == 2:\n        print(abs(A[0] - A[1]))\n    else:\n        print(max(abs(A[0] - A[1]), abs(A[-1] - A[-2])))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            res = max(abs(numbers[i]-numbers[j]), res)\n    return str(res)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    arr = lines[1].split(' ')\n    arr = list(map(int, arr))\n    arr.sort()\n    ans = arr[n - 1] - arr[0]\n    return str(ans)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    return str(max(a[n - 1] - a[0], a[n - 2] - a[1]))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # print(stdin.split())\n    # n = int(stdin.split('\\n')[0].split()[0])\n    # x = [0] * n\n    # y = [0] * n\n    # for i in range(n):\n    #     x[i], y[i] = map(int, stdin.split('\\n')[i + 1].split())\n\n    # print(x)\n    # print(y)\n\n    N = int(stdin.split('\\n')[0].split()[0])\n    x = [0] * N\n    y = [0] * N\n    for i in range(N):\n        x[i], y[i] = map(int, stdin.split('\\n')[i + 1].split())\n    import math\n    lst = []\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                lst.append(math.sqrt((x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2))\n    import math\n    return round(sum(lst) / math.factorial(N), 6)"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    n = int(stdin)\n    arr = [list(map(int, stdin.split(\" \"))) for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += math.sqrt((arr[i][0] - arr[j][0])**2 + (arr[i][1] - arr[j][1])**2)\n    print(\"{:.6f}\".format(ans / n / n))\n    return \"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem \"\"\"\n    num_towns = int(stdin.readline().strip())\n    town_coordinates = [list(map(int, line.split(' '))) for line in stdin]\n\n    # The distance between two towns is the distance between the x coordinate of the first town and the x coordinate of the second.\n    # The distance between two towns is the distance between the y coordinate of the first town and the y coordinate of the second.\n    # So, we need to build the matrix\n    town_matrix = []\n    for i in range(num_towns):\n        for j in range(num_towns):\n            if i!= j:\n                town_matrix.append([town_coordinates[i][0] - town_coordinates[j][0], town_coordinates[i][1] - town_coordinates[j][1]])\n    # We can use np.matmul here but it is very slow, so we are using the for loop here\n    total_length = 0\n    for i in town_matrix:\n        total_length += math.sqrt(i[0]**2 + i[1]**2)\n\n    return str(round(total_length / (num_towns * num_towns), 6))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1, y1, x2, y2):\n        return math.sqrt((x1-x2)**2 + (y1-y2)**2)\n\n    N = int(stdin.readline().strip())\n    coords = [stdin.readline().strip() for _ in range(N)]\n    towns = [tuple(map(int, line.split())) for line in coords]\n    max_town = max(towns, key=lambda x: x[0])\n    min_town = min(towns, key=lambda x: x[0])\n\n    dist = 0\n    for i in range(1, N):\n        dist += distance(towns[i-1][0], towns[i-1][1], towns[i][0], towns[i][1])\n\n    dist = dist + distance(towns[0][0], towns[0][1], towns[N-1][0], towns[N-1][1])\n    dist = dist / N\n    dist = dist + distance(min_town[0], min_town[1], max_town[0], max_town[1])\n    dist = dist / N\n    return str(round(dist, 6))\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{:.6f}'.format(\n        sum([\n            (\n                (abs(towns[i][0] - towns[i - 1][0]) ** 2 + abs(towns[i][1] - towns[i - 1][1]) ** 2) ** 0.5\n            ) + (\n                (abs(towns[i][0] - towns[i - 1][0]) ** 2 + abs(towns[i][1] - towns[i - 1][1]) ** 2) ** 0.5\n            )\n            for i in range(1, len(towns))\n        ]))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes input and returns average distance of N! paths\n    >>> solution(\"3\\n0 0\\n1 0\\n0 1\")\n    2.2761423749\n    '''\n    n = int(stdin.split()[0])\n    coords = [tuple(map(int, coord.split())) for coord in stdin.split('\\n')[1:]]\n    coords.sort()\n    paths = {'a': [coords[0]]}\n    for i in range(1, n):\n        curr = coords[i]\n        dist = coords[i][0] - coords[i-1][0]\n        if curr[1] > coords[i-1][1]:\n            paths['a'].append(curr)\n        else:\n            paths['b'] = [curr]\n    distance = 0\n    for i in range(n):\n        if len(paths['a']) <= i:\n            continue\n        for j in range(len(paths['a'])):\n            if j == i:\n                continue\n            if paths['a'][j][1] > paths['a'][i][1]:\n                distance += paths['a'][j][0] - paths['a'][i][0]\n    for i in range(n):\n        if len(paths['b']) <= i:\n            continue\n        for j in range(len(paths['b'])):\n            if j == i:\n                continue\n            if paths['b'][j][1] > paths['b'][i][1]:\n                distance += paths['b'][j][0] - paths['b'][i][0]\n    return distance/(n*(n-1))\n    # Your code goes here"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input and remove unnecessary whitespace\n    n = int(stdin.readline().strip())\n    towns = [tuple(int(x) for x in stdin.readline().strip().split()) for _ in range(n)]\n    # Calculate the length of the path\n    return str(sum(distance(a, b) for a, b in itertools.combinations(towns, 2)) / n)\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    paths = stdin.splitlines()[1:]\n    num = int(paths[0])\n    towns = paths[1:]\n    t = []\n    for i in towns:\n        t.append(i.split(' '))\n    l = []\n    for i in t:\n        l.append((int(i[0]), int(i[1])))\n    l.sort()\n    total = 0\n    for i in range(0, num):\n        if i == num - 1:\n            total += dist(l[0], l[i])\n        else:\n            total += dist(l[i], l[i + 1])\n    print(total / num)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # For each line of input, create a tuple of the x and y coordinates\n    coordinates = [tuple(map(int, line.split(' '))) for line in stdin.split('\\n')]\n\n    # Create a list with all permutations of the coordinate tuples\n    permutations = [list(p) for p in itertools.permutations(coordinates)]\n\n    # Get the length of each path\n    path_lengths = [distance(p) for p in permutations]\n\n    # Return the average\n    return str(sum(path_lengths) / len(permutations))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(1 + math.sqrt(2), N) - 1)\n\"\"\"\n\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  A, B = map(int, stdin.readline().split(' '))\n  print(A + min(B, A - 2))\n  return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return b - a\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split(' ')]\n    return A - 2 * B\n\"\"\"\n\n\nimport math\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    return str(n - m)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"12 4\\n\")\n    '4'\n    \"\"\"\n    width = list(map(int, stdin.split()))\n    return str(sum(width))\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a - b\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(b, a - b)"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a - b)\n    return ''"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    window_length = int(stdin.readline())\n    curtains_length = int(stdin.readline())\n    return str(window_length - 2 * curtains_length)\n\nprint(solution(stdin))"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return str(min(len(str(i)) for i in range(1, n + 1)))\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin\n    inputs = inputs[1:]\n    inputs = inputs[:-1]\n    inputs = inputs.split(' ')\n    inputs = list(map(int, inputs))\n    print(inputs)"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def digits(num):\n        return len(str(num))\n    def get_digits(n):\n        s = 0\n        while n:\n            s += n % 10\n            n //= 10\n        return s\n    def is_multiple(a, b):\n        return a * b == n\n    lowest = 10 ** 10\n    for a in range(1, n):\n        for b in range(1, n):\n            d = get_digits(a) + get_digits(b)\n            if d > n:\n                break\n            if is_multiple(a, b):\n                lowest = min(lowest, d)\n    return lowest\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split('\\n'))\n    return min(len(str(a)), len(str(b)))\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    c = 0\n    m = 1\n    for i in range(1,len(N)):\n        if int(N[i]) == 0:\n            c = c+1\n            if int(N[i-1]) == 0:\n                m = m+1\n        else:\n            c = 0\n    return m+c\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    ans = 0\n    for A in range(1, 100):\n        for B in range(1, 100):\n            if N == A * B:\n                ans = min(ans, len(str(A)) + len(str(B)))\n    print(ans)"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N = int(stdin)\n    print(min([F(A, B) for A in range(1, N + 1) for B in range(1, N + 1)]))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of food liked by all the people.\n    >>> solution('''3 4\n   ... 2 1 3\n   ... 3 1 2 3\n   ... 2 3 2''')\n    '1'\n    \"\"\"\n    number_of_people = int(stdin.split()[0])\n    number_of_food = int(stdin.split()[1])\n\n    # the food indexes\n    foods = []\n    for i in range(number_of_people):\n        foods.append(list(map(int, stdin.split()[2 + i])))\n\n    # food likes:\n    likes = []\n    for i in range(number_of_food):\n        likes.append(set(foods[j][i] for j in range(number_of_people)))\n\n    # total number of unique foods that each person likes:\n    counts = [len(likes[i]) for i in range(number_of_people)]\n\n    return str(sum(counts))\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split(' '))\n    L = [0] * M\n    for i in range(N):\n        K = int(stdin.split(' ')[i])\n        L = L[:K-1] + [i+1] + L[K:]\n    return''.join([str(i) for i in L])"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_people = stdin.split()[0]\n    number_of_foods = stdin.split()[1]\n    arr = []\n    for i in range(int(number_of_people)):\n        arr.append(stdin.split('\\n')[i+1].split()[1:])\n    set_of_foods = set()\n    for i in range(int(number_of_foods)):\n        set_of_foods.update(set(arr[i]))\n    return len(set_of_foods)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    food_likes = dict()\n    for i in range(1, M+1):\n        food_likes[i] = list(map(int, stdin.readline().split()))\n    likes = set()\n    for food_list in food_likes.values():\n        for food in food_list:\n            likes.add(food)\n    return len(likes)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    cnt = 0\n    for i in range(n):\n        k, *a = map(int, stdin.split(' '))\n        l = set(a)\n        if len(l) == m:\n            cnt += 1\n    print(cnt)"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    N, M = int(stdin[0].split(' ')[0]), int(stdin[0].split(' ')[1])\n    nested_list = [stdin[i].split(' ') for i in range(1, N + 1)]\n    A = []\n    for i in range(M):\n        temp = [int(x) for x in nested_list[i]]\n        A.append(temp)\n    print(A)\n    set_of_A = set(range(1, M + 1))\n    print(set_of_A)\n    s = 0\n    for i in range(N):\n        temp = set(A[i])\n        print(temp)\n        if temp == set_of_A:\n            s += 1\n    print(s)\n\nsolution(stdin)"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    foods = []\n    for _ in range(n):\n        foods.append(list(map(int, stdin.split()[1:])))\n    count = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            for k in range(j + 1, m):\n                if set(foods[i]) & set(foods[j]) & set(foods[k]):\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split('\\n')[0].split()))\n    k_list = []\n    for i in range(n):\n        k_list.append(list(map(int, stdin.split('\\n')[i + 1].split())))\n    \n    k = 0\n    for i in k_list:\n        k += len(set(i))\n    return k"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of the foods liked by all the N people.\n\n    >>> solution('''3 4\n   ... 2 1 3\n   ... 3 1 2 3\n   ... 2 3 2''')\n    1\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    k = [tuple(map(int, l.split())) for l in stdin.split('\\n')[1:]]\n    k = sorted(set(k), key=lambda x: x[1])\n    print(len(set([l[0] for l in k])))\n    return ''\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the provided input.\"\"\"\n    return f'{int(stdin)}'\n    pass\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 0\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            ans += 1\n    return str(ans / N)"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the problem\"\"\"\n    return str(int((2 / 4) * (1 / 2) * (1 / 2)))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds probability that given integer is odd.\n\n    Args:\n        stdin (str): Input on stdin.\n\n    Returns:\n        str: Probability that given integer is odd.\n    \"\"\"\n    return str(round(2 / float(stdin), 6))\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    number_of_elements = int(stdin)\n    \n    # Let's use a dictionary to store the number of odd values in each of the given elements\n    odd_numbers = dict()\n    \n    for element in range(1, number_of_elements+1):\n        if element % 2!= 0:\n            if element in odd_numbers:\n                odd_numbers[element] += 1\n            else:\n                odd_numbers[element] = 1\n    \n    # Let's calculate the probability of having an odd number\n    odd_number_probability = 0\n    for element, value in odd_numbers.items():\n        odd_number_probability += value/number_of_elements\n    \n    return str(odd_number_probability)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # x and y are variables\n    # random are random variables\n    # p is probability\n    # n is the total number of integers in the list\n    # f is the length of the list\n    \n    #get input\n    n = int(stdin)\n    \n    #create list of integers not greater than n\n    ints = list(range(1, n+1))\n    \n    #calculate f\n    f = len(ints)\n    \n    #calculate x\n    x = ints[0]\n    \n    #calculate y\n    y = ints[f-1]\n    \n    #calculate p\n    p = (y + 1)/f\n    \n    #calculate p is odd\n    odd = (y)/f\n    \n    #return p is odd\n    return odd\n    \n    # your code goes here\n    \n    #input and split\n    \n    #convert to int\n    #ints = [int(i) for i in stdin.split()]\n    \n    #total = sum(ints)\n    \n    #return result\n    \n    #result = solution(input)\n    \n    #return result\n    \n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'a'\n    pass\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count_odd = 0\n    for i in range(1, N+1):\n        if i%2==0:\n            count_odd+=1\n    return str(count_odd/N)"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odds = n / 2\n    return str(odds)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    people = []\n    for i in range(n):\n        people.append(list(map(int, stdin.readline().split())))\n\n    # \u4e0b\u306e2\u884c\u3067\u4e26\u3073\u66ff\u3048\n    people.sort()\n    people.sort(key=lambda x: x[0])\n    # \u3053\u306e2\u884c\u3067\u8f9e\u66f8\u578b\u306b\u5909\u63db\n    people = list(map(lambda x: dict(x), people))\n\n    ans = 0\n    for i in range(n):\n        # \u4e0b\u306e2\u884c\u3067\u8f9e\u66f8\u578b\u3092\u30ad\u30fc\u306b\u3057\u3066\u5404\u4eba\u306e\u4eba\u6570\u3092\u53d6\u5f97\n        person_honest_num = people[i][people[i]]\n        ans += person_honest_num\n\n    print(ans)"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = set()\n    b = set()\n    for i in range(n):\n        a.add(int(stdin.readline().strip()))\n        b.add(stdin.readline().strip())\n    c = set()\n    for i in range(n):\n        c.add(stdin.readline().strip())\n        d = set()\n        for j in range(n):\n            d.add(stdin.readline().strip())\n        c.add(d)\n    return str(len(a & b) + len(a & c) + len(b & c))\n\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().split('\\n')[0])\n    a = [int(x) for x in stdin.readline().split('\\n')[0].split()]\n    l = []\n    for _ in range(n):\n        l.append([int(x) for x in stdin.readline().split('\\n')[0].split()])\n    l.sort(key=lambda x: x[0])\n    x = set()\n    y = set()\n    for i in range(n):\n        x.add(l[i][0])\n        y.add(l[i][1])\n    ans = 0\n    for i in range(n):\n        if i + 1 not in x:\n            ans += 1\n    for i in range(n):\n        if i + 1 not in x and l[i][1] == 1:\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split('\\n')[0]\n    N = int(N)\n\n    testimonies = stdin.split('\\n')[1:]\n    honest = []\n    kind = []\n    for testimony in testimonies:\n        person = int(testimony.split()[0])\n        testimony = testimony.split()\n        honest.append(int(testimony[1]))\n        kind.append(int(testimony[2]))\n\n    honest_sum = 0\n    kind_sum = 0\n    for i in range(N):\n        if honest[i] == 1:\n            honest_sum += 1\n        if kind[i] == 1:\n            kind_sum += 1\n\n    if N >= 3:\n        if honest[0] == 1 and honest[1] == 1:\n            if honest[0]!= kind[0] and kind[1]!= kind[0]:\n                honest_sum += 1\n        if honest[0] == 1 and honest[2] == 1:\n            if honest[0]!= kind[0] and kind[2]!= kind[0]:\n                honest_sum += 1\n        if honest[1] == 1 and honest[2] == 1:\n            if honest[1]!= kind[1] and kind[2]!= kind[1]:\n                honest_sum += 1\n\n    if N >= 4:\n        for i in range(N - 3):\n            if honest[i] == 1 and honest[i + 1] == 1 and honest[i + 2] == 1:\n                if honest[i]!= kind[i] and honest[i + 1]!= kind[i + 1] and honest[i + 2]!= kind[i + 2]:\n                    honest_sum += 1\n\n    if N >= 5:\n        for i in range(N - 4):\n            if honest[i] == 1 and honest[i + 1] == 1 and honest[i + 2] == 1 and honest[i + 3] == 1:\n                if honest[i]!= kind[i] and honest[i + 1]!= kind[i + 1] and honest[i + 2]!= kind[i + 2] and honest[i + 3]!= kind[i + 3]:\n                    honest_sum += 1\n\n    if N >= 6:\n        for i in range(N - 5):\n            if honest[i] == 1 and honest[i + 1] == 1 and honest[i + 2] == 1 and honest[i + 3] == 1 and honest[i + 4] == 1:\n                if honest[i]!= kind[i] and honest[i + 1]!= kind[i + 1] and honest[i + 2]!= kind[i + 2] and honest[i + 3]!= kind[i + 3] and honest[i + 4]!= kind[i + 4]:\n                    honest_sum += 1\n\n    if N >= 7:\n        for i in range(N - 6):\n            if honest[i] == 1 and honest[i + 1] == 1 and honest[i + 2] == 1 and honest[i + 3] == 1 and honest[i + 4] == 1 and honest[i + 5] == 1:\n                if honest[i]!= kind[i] and honest[i + 1]!= kind[i + 1] and honest[i + 2]!= kind[i + 2] and honest[i + 3]!= kind[i + 3] and honest[i + 4]!= kind[i + 4] and honest[i + 5]!= kind[i + 5]:\n                    honest_sum += 1\n\n    if N >= 8:\n        for i in range(N - 7):\n            if honest[i] == 1 and honest[i + 1] == 1 and honest[i + 2] == 1 and honest[i + 3] == 1 and honest[i + 4] == 1 and honest[i + 5] == 1 and honest[i + 6] == 1:\n                if honest[i]!= kind[i] and honest[i + 1]!= kind[i + 1] and honest[i + 2]!= kind[i + 2] and honest[i + 3]!= kind[i + 3] and honest[i + 4]!= kind[i + 4] and honest[i + 5]!= kind[i + 5] and honest[i + 6]!= kind[i + 6]:\n                    honest_sum += 1\n\n    if N >= 9:\n        for i in range(N - 8):\n            if honest[i] == 1 and honest[i + 1] == 1 and honest[i + 2] == 1 and honest[i + 3] == 1 and honest[i + 4] == 1 and honest[i + 5] == 1 and honest[i + 6] == 1 and honest[i + 7] == 1:\n                if honest[i]!= kind[i] and honest[i + 1]!= kind[i + 1] and honest[i + 2]!= kind[i + 2] and honest[i + 3]!= kind[i + 3] and honest[i + 4]!= kind[i + 4] and honest[i + 5]!= kind[i + 5] and honest[i + 6]!= kind[i + 6] and honest[i + 7]!= kind[i + 7]:\n                    honest_sum += 1\n\n    if N >= 10:\n        for i in range(N - 9):\n            if honest[i] == 1 and honest[i + 1] == 1 and honest[i + 2] == 1 and honest[i + 3] == 1 and honest[i + 4] == 1 and honest[i + 5] == 1 and honest[i + 6] == 1 and honest[i + 7] == 1 and honest[i + 8] == 1:\n                if honest[i]!= kind[i] and honest[i + 1]!= kind[i + 1] and honest[i + 2]!= kind[i + 2] and honest[i + 3]!= kind[i + 3] and honest[i + 4]!= kind[i + 4] and honest[i + 5]!= kind[i + 5] and honest[i + 6]!= kind[i + 6] and honest[i + 7]!= kind[i + 7] and honest[i + 8]!= kind[i + 8]:\n                    honest_sum += 1\n\n    if N >= 11:\n        for i in range(N - 10):\n            if honest[i] == 1 and honest[i + 1] == 1 and honest[i + 2] == 1 and honest[i + 3] == 1 and honest[i + 4] == 1 and honest[i + 5] == 1 and honest[i + 6] == 1 and honest[i + 7] == 1 and honest[i + 8] == 1 and honest[i + 9] == 1:\n                if honest[i]!= kind[i] and honest[i + 1]!= kind["
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    is_honest = [0]*N\n    honest = 0\n    for _ in range(N):\n        A = list(map(int, stdin.readline().split()))\n        honest += 1 if A.count(1) == A.count(0) else 0\n        for _ in range(len(A)//2):\n            is_honest[A[2*_]-1] = 1 if A[2*_+1] == 1 else 0\n    honest += is_honest.count(1)\n    return str(honest)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(input()))\n    '2'\n    \"\"\"\n    n = int(stdin.readline())\n    truths = [list(map(int, stdin.readline().split())) for i in range(n)]\n    honest = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if truths[i][0] == j + 1 and truths[i][1] == 1:\n                honest[j] = 1\n    print(sum(honest))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    2\n    \"\"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    tests = []\n    for i in range(1, N + 1):\n        tests.append(lines[i].split(' '))\n    print(tests)\n    honest = set()\n    for test in tests:\n        if test[0]!= ':':\n            if test[1] == '0':\n                honest.add(int(test[0]) - 1)\n    print(honest)\n    # for i in range(N):\n    #     test = lines[i + N + 1].split(' ')\n    #     if test[1] == '0':\n    #         honest.add(int(test[0]) - 1)\n    # print(honest)\n    # print(len(honest))\n    return len(honest)\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    s = stdin.readline().strip()\n    if len(s) > k:\n        return s[:k] + '...'\n    else:\n        return s\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    return S[:K] + \"...\\n\" if len(S) > K else S\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[: K] + \"...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # the number of characters to return\n    k = stdin[0]\n    # the string to return\n    s = stdin[1]\n    # calculate the max length of s that can be returned\n    maxLen = int(k) * int(k)\n    if int(maxLen) < int(len(s)):\n        return s[:int(k)] + \"...\"\n    else:\n        return s\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = stdin.split(\"\\n\")[0]\n    k = int(k)\n    string = stdin.split(\"\\n\")[1]\n    print(string[:k] + \"...\")\n    return string[:k] + \"...\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    string = stdin[1]\n    if len(string) <= length:\n        print(string)\n    else:\n        print(string[0:length] + '...')\n\nsolution(input().split())\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[: K] + \"...\\\""
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = stdin[0]\n    s = stdin[1]\n    if len(s) <= k:\n        return s\n    else:\n        return s[:k] + \"... \"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s = stdin.split()[1]\n    if len(s) > k:\n        s = s[0:k] + \"...\\n\"\n    return s\nprint(solution(input()))\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\" if stdin.endswith(\"s\") else stdin + \"es\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin+\"s\" if stdin.endswith(\"s\") else stdin+\"es\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    if s.endswith('s'):\n        print(s + 'es')\n    elif not s.endswith('s'):\n        print(s +'s')\n\nsolution()\n\"\"\"\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin +'s' if stdin[-1]!='s' else stdin + 'es'"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('apple')\n    'apples'\n    >>> solution('banana')\n    'bananas'\n    >>> solution('pineapple')\n    'pineapples'\n    >>> solution('eraser')\n    'erasers'\n    \"\"\"\n    return stdin + ('s' if stdin.endswith('s') else 'es')\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[-1]!= \"s\":\n        s += \"s\"\n    elif s[-1] == \"s\":\n        s += \"es\"\n    return s\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"es\" if stdin[-1] == \"s\" else stdin + \"s\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + (\"es\" if stdin[-1]!= \"s\" else \"\")\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string that represents the solution.\"\"\"\n    pass  # TODO\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, K = [int(n) for n in stdin.strip().split(' ')]\n    snacks = [int(n) for n in stdin.strip().split('\\n')[1:]]\n    s = set(snacks)\n    if len(s) == K:\n        return N - K\n    s = set(snacks) - {1}\n    return len(s)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a town and a number of snacks, return the number of Snukes who fall victim to Takahashi's mischief.\n\n    >>> solution('3 2\\n2\\n1 3\\n1\\n3\\n')\n    '1'\n\n    \"\"\"\n    count = 0\n    snacks = stdin.split('\\n')\n    snacks = snacks[1:]\n    print(snacks)\n    N, K = int(snacks[0].split(' ')[0]), int(snacks[0].split(' ')[1])\n    snacks = snacks[1:]\n    snacks = [snack.split(' ') for snack in snacks]\n    snacks = [\n        (int(snack[0]), int(snack[1]))\n        for snack in snacks\n    ]\n    for snack in snacks:\n        if N - snack[0] >= K:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Get the solution to this problem'''\n    # Get the input\n    line_1, line_2 = stdin.split('\\n')\n    # Get the number of Snukes\n    n = int(line_1)\n    # Get the number of snacks\n    k = int(line_2)\n    snakes = list()\n    for _ in range(n):\n        # Get the snacks for that Snuke\n        snakes.append(set(map(int, line_3.split())))\n    print(snakes)\n    return ''\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    snacks = {}\n    for i in range(1, k+1):\n        snacks[i] = [int(x) for x in stdin.split('\\n')[i].split(' ')]\n    return str(len([i for i in range(1, n+1) if snacks[i] == []]))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    snakes = [int(i) for i in stdin.split('\\n') if i.strip()]\n    snakes.pop(0)\n    snakes.pop(0)\n    snake_dict = {}\n    snake_dict = [snake_dict.update({i+1: snakes[i]}) for i in range(0, len(snakes), 2)]\n    result = 0\n    for i in range(1, n+1):\n        if i not in snake_dict.keys():\n            result = result + 1\n    print(result)"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(\" \"))\n    snake_snacks = []\n    for i in range(K):\n        snake_snacks.append(int(stdin.split(\" \")[i + 1]))\n    print(snake_snacks)\n    return str(N - len(snake_snacks))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.strip().split()]\n    d = [int(i) for i in stdin.strip().split()]\n    a = [int(i) for i in stdin.strip().split()]\n    snakes = []\n    for i, d_i in enumerate(d):\n        snakes.extend([i+1]*d_i)\n    a.sort()\n    snakes.sort()\n    print(a)\n    print(snakes)\n    i, j = 0, 0\n    ans = 0\n    while i < len(snakes):\n        if snakes[i] == a[j]:\n            ans += 1\n            j += 1\n        i += 1\n    return ans\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution of the input of the problem.\n\n    >>> solution(str([3, 2, '\\n', '2', '\\n', '1 3\\n', '1', '\\n', '3', '\\n']))\n    '1'\n    \"\"\"\n   ..."
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\naabbbbaaca\")\n    5\n    \"\"\"\n    slimes = stdin.strip().splitlines()\n    slime_counts = collections.Counter(slimes)\n    return str(max(slime_counts.values()))"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n    \n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return your solution\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n\n    count = 0\n    previous = None\n    for i in range(n):\n        if s[i] == previous:\n            count += 1\n        else:\n            count = 1\n        previous = s[i]\n    print(count)\n\n\nsolution(input())\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # read in N, S\n    N, S = map(int, stdin.split())\n    \n    # create a numpy array of S of size N with each element being a string\n    S = np.fromstring(S, dtype='str')\n    \n    # create a numpy array of 0 of size N\n    combos = np.zeros(N, dtype='int')\n    \n    # create a for loop and increment combo with the length of S at each index\n    for i in range(N):\n        S[i] = np.unique(S[i])\n        \n        if len(S[i]) == 1:\n            combos[i] = 1\n            \n        elif len(S[i]) > 1:\n            combos[i] = len(S[i])\n    \n    # create a for loop and iterate through the combos array and make the appropriate changes to S\n    for i in range(N):\n        \n        if len(S[i]) == 1:\n            for k in range(i, N):\n                S[k] = S[i]\n            break\n        \n        elif len(S[i]) > 1:\n            S[i] = ''.join(S[i])\n            S[i] = np.unique(S[i])\n            \n            if len(S[i]) == 1:\n                combos[i] = 1\n            \n            elif len(S[i]) > 1:\n                combos[i] = len(S[i])\n    \n    # print the sum of combos\n    print(sum(combos))\n    \n    return S\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the provided input.\"\"\"\n    # Complete this function\n    return 0"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip('\\n'))\n    s = stdin.readline().rstrip('\\n')\n\n    slime_dict = dict()\n    for i in range(len(s)):\n        if s[i] not in slime_dict:\n            slime_dict[s[i]] = [i]\n        else:\n            slime_dict[s[i]].append(i)\n\n    last_color = 0\n    num_of_slimes = 0\n    while True:\n        fusion_found = False\n        for key, value in slime_dict.items():\n            if len(value) == 1 and value[0] - last_color == 1:\n                fusion_found = True\n                last_color = value[0]\n                num_of_slimes += 1\n                for key_i in slime_dict.keys():\n                    if key_i!= key:\n                        slime_dict[key_i].remove(value[0])\n                    else:\n                        break\n                break\n        if fusion_found is False:\n            break\n    return str(num_of_slimes)\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.splitlines()\n    N = int(N)\n    S = S.strip()\n    slimes = []\n    for i, char in enumerate(S):\n        if i == 0:\n            slimes.append(char)\n            continue\n        if char == slimes[-1]:\n            slimes[-1] = char\n        else:\n            slimes.append(char)\n    return len(slimes)"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    slimes = list(stdin)\n    count = 0\n    while len(slimes) > 0:\n        found = False\n        for i in range(len(slimes)):\n            if i == 0:\n                if slimes[i] == slimes[i+1]:\n                    count += 1\n                    slimes.pop(i)\n                    slimes.pop(i)\n                    found = True\n                    break\n            elif i == len(slimes) - 1:\n                if slimes[i] == slimes[i-1]:\n                    count += 1\n                    slimes.pop(i)\n                    slimes.pop(i)\n                    found = True\n                    break\n            else:\n                if slimes[i] == slimes[i+1] and slimes[i] == slimes[i-1]:\n                    count += 1\n                    slimes.pop(i)\n                    slimes.pop(i)\n                    found = True\n                    break\n        if not found:\n            break\n    return count\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = [0, 0, 0]\n    n, *a = map(int, stdin.split())\n    for i in a:\n        if i % 2 == 0:\n            ans[0] += 1\n        else:\n            ans[1] += 1\n    ans[2] = n - ans[0] - ans[1]\n    return str(min(ans))\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A = list(map(lambda x: x*3 if x%2 else x/2, A))\n    print(A)\n    return \" \".join(map(str, A))\n    pass"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.split()]\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i // 2] + i % 2, dp[i // 3] + i % 3)\n    return dp[n]\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # input_s = input()\n    # arr = list(map(int, input_s.split()))\n    arr = stdin.split()\n    # print(arr)\n\n    # \u6587\u5b57\u5217\u3092\u6570\u5b57\u306b\u5909\u63db\n    # arr = list(map(int, input().split()))\n\n    arr = [int(i) for i in arr]\n    # print(arr)\n\n    # \u56de\u7b54\uff11\n    # ans = 0\n    # while True:\n    #     arr_copy = arr.copy()\n    #     # print(arr_copy)\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 2 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 2\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 3 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 3\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     ans += 1\n\n    # # \u56de\u7b54\uff12\n    # ans = 0\n    # while True:\n    #     arr_copy = arr.copy()\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 2 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 2\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 3 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 3\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     ans += 1\n\n    # # \u56de\u7b54\uff13\n    # ans = 0\n    # while True:\n    #     arr_copy = arr.copy()\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 2 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 2\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 3 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 3\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     ans += 1\n\n    # # \u56de\u7b54\uff14\n    # ans = 0\n    # arr_copy = arr.copy()\n    # while True:\n    #     arr_copy = arr.copy()\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 2 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 2\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 3 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 3\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     ans += 1\n\n    # # \u56de\u7b54\uff15\n    # ans = 0\n    # arr_copy = arr.copy()\n    # while True:\n    #     arr_copy = arr.copy()\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 2 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 2\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 3 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 3\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     ans += 1\n\n    # # \u56de\u7b54\uff16\n    # ans = 0\n    # arr_copy = arr.copy()\n    # while True:\n    #     arr_copy = arr.copy()\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 2 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 2\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     div = 0\n    #     for i in range(len(arr_copy)):\n    #         if arr_copy[i] % 3 == 0:\n    #             div += 1\n    #             arr_copy[i] = arr_copy[i] // 3\n    #     if div == 0:\n    #         break\n    #     arr_copy = [i * 3 for i in arr_copy]\n    #     ans += 1\n\n    # # \u56de\u7b54\uff17\n    # ans = 0\n    # arr_copy = arr.copy()\n    # while True"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        while True:\n            if (a[i] - 1) % 3 == 0:\n                a[i] = (a[i] - 1) // 3\n                count += 1\n                break\n            a[i] -= 1\n            count += 1\n            if a[i] == 1:\n                break\n    return count"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    c = 0\n    for i in range(n):\n        if A[i] % 3 == 0:\n            c += 1\n            A[i] = A[i] // 3\n            if A[i] % 2 == 0:\n                c += 1\n                A[i] = A[i] // 2\n        else:\n            c += 1\n            if A[i] % 2 == 0:\n                c += 1\n                A[i] = A[i] // 2\n    return c\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\n    # \u5165\u529b\u3092\u305d\u308c\u305e\u308c\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3059\u308b\n    N = int(stdin.split()[0])\n    numbers = list(map(int, stdin.split()[1:]))\n    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u53d6\u5f97\u3059\u308b\n    max_num = max(numbers)\n    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n    for i in range(N):\n        # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n        for j in range(N):\n            # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n            if numbers[i] == max_num:\n                # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                for k in range(N):\n                    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                    if numbers[j] == max_num:\n                        # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                        for l in range(N):\n                            # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                            if numbers[k] == max_num:\n                                # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                for m in range(N):\n                                    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                    if numbers[l] == max_num:\n                                        # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                        for n in range(N):\n                                            # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                            if numbers[m] == max_num:\n                                                # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                for o in range(N):\n                                                    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                    if numbers[n] == max_num:\n                                                        # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                        for p in range(N):\n                                                            # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                            if numbers[o] == max_num:\n                                                                # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                for q in range(N):\n                                                                    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                    if numbers[p] == max_num:\n                                                                        # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                        for r in range(N):\n                                                                            # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                            if numbers[q] == max_num:\n                                                                                # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                for s in range(N):\n                                                                                    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                    if numbers[r] == max_num:\n                                                                                        # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                        for t in range(N):\n                                                                                            # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                            if numbers[s] == max_num:\n                                                                                                # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                                for u in range(N):\n                                                                                                    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                                    if numbers[t] == max_num:\n                                                                                                        # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                                        for v in range(N):\n                                                                                                            # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                                            if numbers[u] == max_num:\n                                                                                                                # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                                                if numbers[v] == max_num:\n                                                                                                                    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                                                    # \u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u3092\u3082\u3068\u306b\u51e6\u7406\u3092\u884c\u3046\u30eb\u30fc\u30d7\n                                                                                                                    if numbers[o] == max_num:\n                                                                                                                        numbers[o] //= 2\n                                                                                                                        numbers[p] *= 3\n                                                                                                                        numbers[q] *= 3\n                                                                                                                        numbers[r] *= 3\n                                                                                                                        numbers[s] *= 3\n                                                                                                                        numbers[t] *= 3\n                                                                                                                        numbers[u] *= 3\n                                                                                                                        numbers[v] *= 3\n                                                                                                                        numbers[o] = int(numbers[o])\n                                                                                                                        numbers[p] = int(numbers[p])\n                                                                                             "
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(N):\n        if a[i] % 2 == 0:\n            a[i] //= 2\n        else:\n            a[i] *= 3\n            a[i] //= 2\n            count += 1\n\n    print(count)\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split('\\n')[0])\n    sequence = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n\n    max_operation = 0\n    for i in range(num):\n        if sequence[i] % 2 == 0:\n            sequence[i] = sequence[i] // 2\n            max_operation += 1\n        else:\n            sequence[i] = sequence[i] * 3\n            max_operation += 1\n\n    return max_operation"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split(\" \"))\n    return str(max(A * K, B * (K - 1) + C * (K - 1)))\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = [int(i) for i in stdin.split(\" \")]\n    num_cards = a + b + c\n    num_one = a + b\n    num_zero = c\n    total_sum = 0\n    for i in range(k):\n        if i < num_cards:\n            if i < num_one:\n                total_sum += 1\n            else:\n                total_sum += 0\n        else:\n            if i - num_cards < num_zero:\n                total_sum += -1\n            else:\n                total_sum += 0\n    return total_sum\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    return str(max(A, B, C - K + 1))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The idea is to count how many 0s and -1s are there in the card deck.\n    If the number of 0s is even, then we can pick up 2 cards.\n    If the number of 0s is odd, then we can pick up 1 card.\n    '''\n    a, b, c, k = map(int, stdin.split())\n    if k >= a + b + c:\n        return \"0\"\n    if k >= a:\n        if b > k:\n            return \"0\"\n        else:\n            return \"2\"\n    if k >= b:\n        if a > k:\n            return \"0\"\n        else:\n            return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = [int(i) for i in stdin.split(' ')]\n\n    cnt = [0] * (a + b + c)\n    for i in range(a + b + c):\n        if i < a:\n            cnt[i] = 1\n        elif i < a + b:\n            cnt[i] = 0\n        else:\n            cnt[i] = -1\n    cnt.sort()\n\n    res = 0\n    i = 0\n    while k > 0:\n        if cnt[i] == 0:\n            k -= 1\n        if k > 0:\n            res += cnt[i]\n            k -= 1\n        i += 1\n    return res\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n-----Notes-----\nWe can do this in O(N) time.\n\n
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = [int(n) for n in stdin.split()]\n    print(max(k * a, k * b, k * c))"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # for example:\n    return \"6\""
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c, k = stdin.split(\" \")\n    a, b, c, k = int(a), int(b), int(c), int(k)\n\n    if a == b == c:\n        return 0\n    elif a == b:\n        return c\n    elif b == c:\n        return a\n    else:\n        return max(a, b, c)\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Create a list of input values\n    cards = [int(x) for x in stdin.split(' ')]\n    # Create a list of the cards that will be used\n    list_of_cards = []\n    for x in range(cards[0]):\n        list_of_cards.append('1')\n    for x in range(cards[1]):\n        list_of_cards.append('0')\n    for x in range(cards[2]):\n        list_of_cards.append('-1')\n    # Get the maximum of the list of cards\n    max_value = max(list_of_cards)\n    # Return the maximum\n    return max_value"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 8''')\n    'Yes'\n    >>> solution('''3 9''')\n    'No'\n    >>> solution('''1 1''')\n    'Yes'\n    \"\"\"\n    x, y = map(int, stdin.split())\n    return \"Yes\" if x * y % 2 == 0 else \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    if x == y:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = [int(s) for s in stdin.split()]\n    print(\"Yes\" if X * 2 >= Y else \"No\")"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 8\")\n    Yes\n    >>> solution(\"3 3\")\n    No\n    \"\"\"\n    animals = stdin.split(\" \")\n    x = int(animals[0])\n    y = int(animals[1])\n    crane_legs = x * (x + 1) / 2\n    turtle_legs = y * (y + 1) / 2\n    if crane_legs < y or turtle_legs < x:\n        return \"No\"\n    elif crane_legs > y or turtle_legs > x:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    return 'Yes' if abs(Y - X * 2) < 2 else 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 8''')\n    'Yes'\n    >>> solution('''3 9''')\n    'No'\n    >>> solution('''9 2''')\n    'No'\n    >>> solution('''8 8''')\n    'No'\n    >>> solution('''8 3''')\n    'Yes'\n    >>> solution('''1 9''')\n    'No'\n    \"\"\"\n    x, y = map(int, stdin.split())\n    return 'Yes' if x * 2 + y // 2 == y else 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    return \"Yes\" if X + Y < 2 * X else \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M = [int(num) for num in stdin.split(' ')]\n    print(\"Yes\") if N % 2 == 0 and M % 2 == 0 or N % 2 == 1 and M % 2 == 1 else print(\"No\")\n    # Write your code here\n    return \"Yes\" if N % 2 == 0 and M % 2 == 0 or N % 2 == 1 and M % 2 == 1 else \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split(' ')]\n    return 'Yes' if y % x == 0 else 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    # print(\"x:\", x, \"y:\", y)\n    if x % y == 0 or x // y == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution\"\"\"\n    # return solution.solution_a(stdin)\n    return solution.solution_b(stdin)\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    # 0-indexed\n    edges = [tuple(map(int, stdin.split(' '))) for _ in range(m)]\n    # 0-indexed\n    source = 1\n\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n\n    visited = [0]*n\n    visited[source] = 1\n    queue = [source]\n    count = 0\n    while queue:\n        current = queue.pop()\n        for child in graph[current]:\n            if not visited[child]:\n                visited[child] = 1\n                queue.append(child)\n                count += 1\n\n    return str(count)\n\nprint(solution(input()))"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  pass\n  \n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    G = [[] for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        a -= 1\n        b -= 1\n        G[a].append(b)\n        G[b].append(a)\n    return sum(visit(i, set(), G) for i in range(N))\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get Input\n    N, M = map(int, stdin.split(' '))\n    \n    # Get Edges\n    edges = {}\n    for i in range(1, N+1):\n        edges[i] = set()\n    for _ in range(M):\n        a, b = map(int, stdin.split(' '))\n        edges[a].add(b)\n        edges[b].add(a)\n    \n    # Count the Edges\n    count = 0\n    for edge in edges.values():\n        if len(edge) == N-1:\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  # Graph.\n  graph = [[] for _ in range(n)]\n  for _ in range(m):\n    i, j = map(int, stdin.split())\n    graph[i].append(j)\n    graph[j].append(i)\n\n  # DFS.\n  visited = [False] * n\n  def dfs(i: int, visited: list) -> None:\n    visited[i] = True\n    for j in graph[i]:\n      if not visited[j]:\n        dfs(j, visited)\n\n  # Loop.\n  ans = 0\n  for i in range(n):\n    if not visited[i]:\n      ans += 1\n      dfs(i, visited)\n\n  return str(ans)"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 2\n   ... 1 3\n   ... 2 3\n   ... ''')\n    '2'\n    \"\"\"\n    pass"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, L = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    arr = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    \n    arr.sort()\n    temp = 0\n    for i in range(N):\n        temp += arr[i]\n        if temp >= L:\n            break\n    \n    return str(sum(arr[i:]))\n    '''\n    \n    # 1st try\n    # Runtime: 1240 ms (64.09%)\n    # Memory Usage: 14.4 MB (13.29%)\n    N, L = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    arr = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    \n    temp = 0\n    i = 0\n    while temp < L:\n        temp += arr[i]\n        i += 1\n    return str(sum(arr[i:]))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L = [int(x) for x in stdin.split()]\n    l = []\n    for _ in range(N):\n        l.append(int(stdin))\n    ans = 0\n    for i in range(N - 1):\n        ans += l[i] + i\n    return ans\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    A = sorted(map(int, stdin.split()), key=abs)\n    print(A[0]+sum(A[1:]))"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    import math\n    stdin = stdin.split()\n    n = int(stdin[0])\n    l = int(stdin[1])\n    lst = list(map(int, stdin[2:]))\n    lst.sort()\n    if n == 1:\n        return str(l)\n    diff = l - lst[n-2]\n    if diff <= 0:\n        return str(sum(lst))\n    return str(math.ceil(sum(lst)/lst[n-2]) * lst[n-2] - sum(lst))"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum absolute difference between the sum of the original\n    list and the sum of the new list after using the apple to eat.\n\n    >>> solution(\"5 2\")\n    3\n    >>> solution(\"10 -10\")\n    10\n    \"\"\"\n    n, m = map(int, stdin.split())\n    original = [int(i) for i in stdin.split()]\n    apple = 0\n    for i in range(n):\n        apple += abs(original[i] - abs(original[i] - m))\n    return apple\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    l = stdin.split('\\n')[0].split(' ')\n    print(int(l[0])+int(l[1]))\n    return"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    lst = [int(i) for i in stdin.split(' ')]\n    lst_1 = sorted(lst)\n    return str(sum([lst_1[i] - i for i in range(n)]))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, L = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    arr = sorted(arr)\n    f1 = 0\n    f2 = 0\n    for i in range(1, N):\n        f1 += arr[i]\n        f2 = max(abs(f1 - L), f2)\n    return f2\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N: int = int(stdin)\n\n    result: int = 0\n\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            result += \"FizzBuzz\"\n        elif i % 3 == 0:\n            result += \"Fizz\"\n        elif i % 5 == 0:\n            result += \"Buzz\"\n        else:\n            result += str(i)\n\n    return str(result)\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    result = []\n    for i in range(1, num + 1):\n        if (i % 3 == 0 and i % 5 == 0):\n            result.append(\"FizzBuzz\")\n        elif (i % 3 == 0):\n            result.append(\"Fizz\")\n        elif (i % 5 == 0):\n            result.append(\"Buzz\")\n        else:\n            result.append(str(i))\n\n    print(sum(map(int, result)))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    n = int(stdin)\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            result += i\n        elif i % 3 == 0:\n            result += i\n        elif i % 5 == 0:\n            result += i\n        else:\n            result += i\n    return result"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the sum of all numbers among the first N terms of the FizzBuzz sequence.\"\"\"\n    N = int(stdin)\n    return sum(i for i in range(1, N+1) if i % 15 in (0, 3, 5, 6, 9, 10))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"15\\n\")\n    60\n    \"\"\"\n    N = int(stdin)\n    total = 0\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            total += i\n        elif i % 3 == 0:\n            total += i\n        elif i % 5 == 0:\n            total += i\n        else:\n            total += i\n    return total\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    res = 0\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            res += i\n        elif i % 3 == 0:\n            res += i\n        elif i % 5 == 0:\n            res += i\n    return res\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    res = 0\n    for i in range(1, N + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            res += i\n        elif i % 3 == 0:\n            res += i\n        elif i % 5 == 0:\n            res += i\n    return res"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1,N+1):\n        if(i%3==0 and i%5==0):\n            count+=i\n        elif(i%3==0):\n            count+=i\n        elif(i%5==0):\n            count+=i\n    print(count)\n    return"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin[0])\n    n = int(stdin[1])\n    p = list(map(int, stdin[2].split()))\n    nop = list(set(range(1, x+1)) - set(p))\n    d = []\n    for nop_i in nop:\n        d.append(abs(nop_i - x))\n    return nop[d.index(min(d))]\n\nprint(solution(stdin.readlines()))\n\n\"\"\""
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the integer nearest to X, that is, the integer whose absolute difference with X is the minimum. If there are multiple such integers, report the smallest such integer.\"\"\"\n    # 1. Read the input\n    X, N = map(int, stdin.split())\n    p = sorted(map(int, stdin.split()[1:]))\n    # 2. If there are no elements, then the answer is X\n    if not p:\n        return X\n    # 3. If there is only one element, then the answer is that element\n    if len(p) == 1:\n        return p[0]\n    # 4. Binary search\n    left, right = 0, len(p) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if p[mid] == X:\n            return p[mid]\n        elif p[mid] < X:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # 5. If X is less than p[left], then the answer is X - 1\n    if X < p[left]:\n        return X - 1\n    # 6. Otherwise, the answer is X\n    return X\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split(\" \"))\n    p_lst = list(map(int, stdin.split(\" \")))\n    p_lst.sort()\n    \n    low, high = 0, len(p_lst)-1\n    min_diff = X\n    \n    while low < high:\n        if abs(p_lst[low] - X) <= abs(p_lst[high] - X):\n            low += 1\n            min_diff = min(min_diff, p_lst[low] - X)\n        else:\n            high -= 1\n            min_diff = min(min_diff, p_lst[high] - X)\n        \n    return str(min_diff)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n = map(int, stdin.split('\\n')[0].split())\n    arr = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    arr.sort()\n    min_abs = abs(arr[0] - n)\n    min_abs_index = 0\n    for i in range(1, len(arr)):\n        if abs(arr[i] - n) < min_abs:\n            min_abs = abs(arr[i] - n)\n            min_abs_index = i\n\n    return arr[min_abs_index]\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    N = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    # abs(X - nums[i])\n    return min(nums, key=lambda n: abs(X - n))\n\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\u00a0X\u00a0=\u00a0int(stdin[0])\n    #\u00a0N\u00a0=\u00a0int(stdin[1])\n    #\u00a0Y\u00a0=\u00a0int(stdin[2])\n    X, N, Y = (int(x) for x in stdin.split())\n    numbers = []\n    numbers_to_sort = []\n    for i in range(N):\n        numbers.append(int(input()))\n\n    for number in numbers:\n        if number > X:\n            numbers_to_sort.append(number - X)\n        else:\n            numbers_to_sort.append(X - number)\n\n    print(sorted(numbers_to_sort)[0])\n    return ''"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    X = int(input[0])\n    n = int(input[1])\n    mylist = input[2:]\n\n    min_diff = float('inf')\n    answer = 0\n    for i in mylist:\n        if abs(int(i)-X)<= min_diff:\n            answer = i\n            min_diff = abs(int(i)-X)\n\n    print(answer)\n    return answer"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    nums = [int(n) for n in stdin.split()[2:]]\n    nums.sort()\n    d = abs(nums[0] - x)\n    for num in nums[1:]:\n        if abs(num - x) < d:\n            d = abs(num - x)\n    print(nums[nums.index(num) - 1])"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin[0])\n    n = int(stdin[1])\n    arr = list(map(int, stdin[2].split()))\n    arr.sort()\n    d = 100\n    for i in range(n):\n        if abs(arr[i] - x) < d:\n            d = abs(arr[i] - x)\n            ans = arr[i]\n    return str(ans)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the integer nearest to the given input.\n    @input: An integer X and an integer sequence of length N.\n    @output: The integer nearest to X in the given sequence.\n    '''\n    # Get the data from the stdin.\n    X, N = [int(x) for x in stdin.split(' ')]\n    # Get the sequence.\n    sequence = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    # Initialize the min and min_index.\n    min = 1000000\n    min_index = 0\n    # Iterate over the sequence.\n    for i in range(N):\n        # Determine the distance to X.\n        diff = abs(X - sequence[i])\n        # Update the min and the min_index.\n        if diff < min:\n            min = diff\n            min_index = i\n    # Return the min_index.\n    return sequence[min_index]\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    h = int(stdin.split()[0])\n    w = int(stdin.split()[1])\n    return str(rows*cols - h*w)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    pass"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    h, w = map(int, stdin.readlines()[0].split(' '))\n    # Get number of white squares\n    n = h * w\n    # Get number of black squares\n    m = int(stdin.readline())\n    # Number of remaining white squares\n    print(n - m)\n    return \"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  result: str = ''\n  m: int = 0\n  n: int = 0\n  for i, line in enumerate(stdin.split('\\n')):\n    if i == 0:\n      m, n = [int(x) for x in line.split(' ')]\n    else:\n      m, n = [int(x) for x in line.split(' ')]\n      break\n  return str(m * n)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # Not correct: The code was successfully executed but the output was incorrect.\n    # Reason: The code is a solution for the sum of the first N numbers, not for the original problem.\n    # In the problem the only possible results are when we choose one row or one column.\n    # This solution does not count all possible results.\n    '''\n    # h, w = map(int, stdin.split())\n    # h = int(stdin.split()[0])\n    # w = int(stdin.split()[1])\n    h, w = [int(x) for x in stdin.split()]\n    return h * w - int(stdin.split()[0]) * int(stdin.split()[1])\n    # return h * w - int(stdin.split()[0]) * int(stdin.split()[1])"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and return solution\"\"\"\n    h, w = [int(x) for x in stdin.split(' ')]\n    ans = 0\n    for _ in range(h):\n        ans += w - sum([int(x) for x in input().split(' ')])\n    return str(ans)"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(x) for x in stdin.strip().split(' ')]\n\n    return str(h * w - sum(range(1, h + 1)))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of white cells that will remain after choosing a certain number of rows and columns\n    '''\n    H, W = [int(i) for i in stdin.split()]\n    h, w = [int(i) for i in stdin.split()]\n    return str(H * W - h * w)"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    h, w = [int(x) for x in stdin.split()]\n\n    # output\n    print(h * (w - 1) + w)\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    i = 0\n    while k and i < len(a):\n        if a[i] <= k:\n            k -= 1\n            i += 1\n        else:\n            a[i] = a[i] - k\n            k = 0\n    if k:\n        print('-1')\n    else:\n        print(a[i])\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    arr = [int(x) for x in stdin.split(\" \")][1:]\n    arr.sort()\n\n    def bisect(arr: List[int], x: int):\n        l, r = 0, len(arr) - 1\n\n        while l <= r:\n            m = (l + r) // 2\n\n            if arr[m] <= x:\n                l = m + 1\n            else:\n                r = m - 1\n\n        return l\n\n    x = bisect(arr, k)\n\n    if x!= len(arr) and arr[x] == k:\n        return str(arr[x])\n    else:\n        return \"-1\"\n\n\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    num_list = list(map(int, stdin.split()))\n\n    left, right = 0, len(num_list) - 1\n    while left < right:\n        middle = (left + right) // 2\n        middle_num_count = 0\n        for num in num_list:\n            if num <= num_list[middle]:\n                middle_num_count += 1\n        if middle_num_count >= k:\n            right = middle\n        else:\n            left = middle + 1\n\n    return str(num_list[left]) if left < len(num_list) and num_list[left] <= 10 ** 9 else '-1'\n\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    sequence = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        if sequence[i] <= k:\n            count += 1\n    if count == k:\n        return str(k)\n    return \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    arr = list(map(int, input[1].split()))\n    k = int(input[0].split()[1])\n    x = 1\n    for el in arr:\n        if el <= x and k > 0:\n            x = el\n            k -= 1\n        else:\n            x = -1\n            break\n    print(x)\n    return\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()][1:]\n    arr.sort()\n    left, right = 0, 10 ** 9\n    while right - left > 1:\n        middle = (left + right) // 2\n        count = 0\n        for i in range(n):\n            if arr[i] <= middle:\n                count += 1\n        if count >= k:\n            left = middle\n        else:\n            right = middle\n    if right == 10 ** 9:\n        return '-1'\n    return str(right)\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sequence = [int(s) for s in stdin.split(' ')[1].split('\\n')[0].split(' ')]\n    length = len(sequence)\n    k = int(stdin.split(' ')[0].split('\\n')[0])\n    if k > length:\n        return '-1'\n    sequence.sort()\n    return str(sequence[k - 1])\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    seq = [int(x) for x in stdin.split(' ')[1::]]\n    seq.sort()\n    seq_ = seq[:k]\n    for i in range(k, n):\n        if seq[i] > seq_[-1]:\n            seq_.pop()\n            seq_.append(seq[i])\n            seq_.sort()\n    if not seq_:\n        print(-1)\n    else:\n        print(seq_[-1])\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    A = list(map(int, stdin.split(' ')))\n    A.sort()\n    print(A)\n    return str(A[k-1])\n\n\nprint(solution('7 4\\n3 7 5 1 10 3 20'))\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = list(map(int, stdin.split()))\n\nn, m = max(n, m), min(n, m)\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    import re\n    l = [i for i in stdin.split('\\n')]\n    n,m = [int(i) for i in l[0].split(' ')]\n    if m == 1:\n        return '-1'\n    res = 0\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if i == n and j == m:\n                res += 1\n            else:\n                if l[i][j] == '*':\n                    for k in range(1,m+1):\n                        if k!= j:\n                            if l[i][k] == '.':\n                                res += 1\n                    for k in range(1,n+1):\n                        if k!= i:\n                            if l[k][j] == '.':\n                                res += 1\n    if res > n*m:\n        return '-1'\n    return '{}\\n{}'.format(res, '\\n'.join([f'{i} {j} {k}' for i,j,k in zip([n-i for i in range(n)], [m-i for i in range(m)], range(res))]))\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.split('\\n')[1:][_])\n    \n    grid = [list(i) for i in grid]\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                grid[i][j] = 0\n            else:\n                grid[i][j] = '*'\n    \n    grid = [[grid[j][i] for j in range(n)] for i in range(m)]\n\n    stars = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for a in range(i + 1, n):\n                    if grid[a][j]!= '*':\n                        break\n                    else:\n                        grid[a][j] = 0\n                else:\n                    for a in range(i - 1, -1, -1):\n                        if grid[a][j]!= '*':\n                            break\n                        else:\n                            grid[a][j] = 0\n                for b in range(j + 1, m):\n                    if grid[i][b]!= '*':\n                        break\n                    else:\n                        grid[i][b] = 0\n                else:\n                    for b in range(j - 1, -1, -1):\n                        if grid[i][b]!= '*':\n                            break\n                        else:\n                            grid[i][b] = 0\n                stars.append((i, j))\n    \n    if len(stars) > n * m:\n        return '-1'\n    \n    for i in range(len(stars)):\n        for j in range(i + 1, len(stars)):\n            if abs(stars[i][0] - stars[j][0]) == abs(stars[i][1] - stars[j][1]):\n                return '-1'\n    \n    stars = sorted(stars)\n    ans = []\n    for star in stars:\n        ans.append(str(star[0] + 1) +'' + str(star[1] + 1) +'' + str(grid[star[0]][star[1]]))\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    if b >= a:\n        print('-1')\n    else:\n        print(a // 2 + a % 2)\n        for _ in range(a // 2 + a % 2):\n            print(a // 2, b, a - 1)\n        print(b, a // 2, a - 1)\n        for _ in range(a // 2 + a % 2):\n            print(a // 2, b, a - 1)\n        print(b, a // 2, a - 1)\n        print(b, b, a - 2)\n\n    return ''\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    w, h = m, n\n    grid = [stdin[i * m : i * m + m] for i in range(n)]\n    res = solve(grid, w, h)\n    if res == -1:\n        print(-1)\n    else:\n        print(res)\n        print(\" \".join([str(i) for i in res]))\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(grid, i, j, s):\n        return i < len(grid) and j < len(grid[0]) and s and grid[i][j] == '.' and all(grid[k][j] == '.' for k in range(i, i + s)) and all(grid[i][k] == '.' for k in range(j, j + s))\n\n    def dfs(grid, i, j, s):\n        if is_valid(grid, i, j, s):\n            if s == 1:\n                grid[i][j] = '*'\n            else:\n                grid[i][j] = '*'\n                grid[i + s // 2][j] = '*'\n                grid[i][j + s // 2] = '*'\n                grid[i + s // 2][j + s // 2] = '*'\n            return 1 + dfs(grid, i, j + 1, s // 2) + dfs(grid, i + 1, j, s // 2) + dfs(grid, i + s // 2, j, s // 2) + dfs(grid, i, j + s // 2, s // 2)\n        return 0\n\n    grid = stdin.split('\\n')\n    ans = 0\n    for row in grid:\n        ans = max(ans, max(dfs(list(row), i, 0, len(row)) for i in range(len(row))))\n    return ans if ans < n * m else -1\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    h = n\n    w = m\n    if n == 1 and m == 1:\n        return '1'\n    res = []\n    star = '*'\n    dots = '.'\n    for i in range(n):\n        a = stdin[h*i:h*(i+1)]\n        if len(a) < m:\n            while len(a) < m:\n                a += '.'\n        if len(a) > m:\n            a = a[:m]\n        res.append(a)\n    print(res)\n    for i in range(m):\n        a = stdin[w*i:w*(i+1)]\n        if len(a) < n:\n            while len(a) < n:\n                a += '.'\n        if len(a) > n:\n            a = a[:n]\n        res.append(a)\n    print(res)\n    for i in range(m):\n        for j in range(n):\n            if res[i][j] == star:\n                x = j\n                y = i\n                s = 1\n                for i in range(n):\n                    if res[i][j] == star:\n                        s += 1\n                for i in range(m):\n                    if res[i][j] == star:\n                        s += 1\n                res[y][x] = star * s\n                if s == 0:\n                    return '-1'\n    print(res)\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  if len(stdin) % 2 == 0:\n    return 0\n  for i in range(1, len(stdin)):\n    if i % 2 == 0:\n      if stdin[i] == stdin[i-1]:\n        continue\n      else:\n        stdin = stdin[:i-1] + stdin[i:]\n        return i\n  return 0\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return stdin\n    \n    if len(stdin) % 2 == 0:\n        if stdin[0] == stdin[1]:\n            return solution(stdin[2:])\n        else:\n            return solution(stdin[1:])\n    else:\n        if stdin[0]!= stdin[1]:\n            return solution(stdin[1:])\n        else:\n            return solution(stdin[2:])\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) % 2!= 0:\n        return s[:(len(s)//2)+1]\n    else:\n        return s[:(len(s)//2)]\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('ab','')\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    print(s)\n    if n % 2!= 0:\n        n -= 1\n    else:\n        n //= 2\n    return n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # return your solution here\n    return ''"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    ans = 0\n    a = s[0]\n    for i in range(n):\n        if s[i] == a:\n            ans += 1\n        else:\n            a = s[i]\n    ans += 1\n    return ans\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'def'"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:len(stdin) - (len(set(stdin)) % 2)]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n\"\"\"\n\nimport sys\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_cycle(cur_vertex: int, cur_path: [int]):\n        cur_path.append(cur_vertex)\n        neighbors = G[cur_vertex]\n        for neighbor in neighbors:\n            if neighbor in cur_path:\n                return True\n            elif is_cycle(neighbor, cur_path):\n                return True\n        cur_path.pop()\n        return False\n\n    n, m = map(int, stdin.split())\n    G = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split()[1:])\n        u -= 1\n        v -= 1\n        G[u].append(v)\n        G[v].append(u)\n\n    for i in range(n):\n        if is_cycle(i, []):\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(stdin)"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES\\n10100'\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nfrom typing import List\n\n\nclass Graph:\n    def __init__(self):\n        self.graph = {}\n        self.reverse_graph = {}\n\n    def add_edge(self, source, destination):\n        if source in self.graph:\n            self.graph[source].append(destination)\n        else:\n            self.graph[source] = [destination]\n\n        if destination in self.reverse_graph:\n            self.reverse_graph[destination].append(source)\n        else:\n            self.reverse_graph[destination] = [source]\n\n    def remove_edge(self, source, destination):\n        self.graph[source].remove(destination)\n        self.reverse_graph[destination].remove(source)\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES\\n1100'\n\"\"\""
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if possible_solution else 'NO'"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin.split(\"\\n\")\n    segments = [list(map(int, line.split())) for line in segments if line!= \"\"]\n    segments.sort(key=lambda x: x[1])\n    segments.sort(key=lambda x: x[0])\n    # print(segments)\n    res = []\n    for i in range(len(segments)):\n        if i == 0 or segments[i][0] > segments[i - 1][1]:\n            res.append(segments[i][0])\n            res.append(segments[i][1])\n    return str(len(res)) + \"\\n\" + \" \".join(list(map(str, res)))\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"Not implemented yet\"\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.readline().split()]\n    s = [set() for _ in range(n)]\n    for i in range(n):\n        l, r = [int(x) for x in stdin.readline().split()]\n        s[i] = set(range(l, r+1))\n    ans = 0\n    for i in range(1, m+1):\n        ans += i not in s[0]\n        for j in range(1, n):\n            ans += i not in s[j] and i in s[j-1]\n    print(ans)\n    print('\\n'.join([str(i) for i in range(m+1) if i not in s[0]]))\n    return ''\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n, m = stdin.split()\n    # n, m = int(n), int(m)\n    # lines = stdin.split('\\n')\n    # for line in lines:\n    #     line = line.strip()\n    #     if line == '':\n    #         continue\n    #     l, r = line.split()\n    #     l, r = int(l), int(r)\n    #     for i in range(l, r + 1):\n    #         if i not in range(1, m + 1):\n    #             print(i)\n    # return ''\n    pass\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution for this kata'''\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    segments.sort(key=lambda x: x[0])\n\n    points = list(range(1, m + 1))\n\n    ans = []\n    for point in points:\n        for segment in segments:\n            if segment[0] <= point <= segment[1]:\n                break\n        else:\n            ans.append(point)\n\n    return '\\n'.join(map(str, ans)) + '\\n'"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution uses greedy algorithm to sort all the points\n    and then iterate through all the points checking if it belongs\n    to any of the segments.\n    \n    Args:\n        stdin (str): string containing lines of input\n        \n    Returns:\n        str: string containing output\n    '''\n    \n    n, m = map(int, stdin.split('\\n')[0].split())\n    segments = []\n    for line in stdin.split('\\n')[1:]:\n        l, r = map(int, line.split())\n        segments.append((l, r))\n        \n    segments = sorted(segments, key=lambda x: (x[1], x[0]))\n    \n    i, ans = 0, []\n    for x in range(1, m + 1):\n        if any(x <= y for y, _ in segments):\n            i += 1\n        else:\n            ans.append(x)\n    return str(i) + '\\n' +''.join(map(str, ans))\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    k = 0\n    for i in range(1, b + 1):\n        if i < a:\n            k += 1\n        elif i > b:\n            k += 1\n        else:\n            k += 2\n    print(k)\n    if k == 0:\n        return 0\n    else:\n        print(*[i for i in range(1, b + 1) if i < a or i > b])\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n\n    start = int(inputs[0])\n    end = int(inputs[1])\n    a = int(inputs[2])\n    b = int(inputs[3])\n    c = int(inputs[4])\n    d = int(inputs[5])\n\n    start = start - 1\n    end = end - 1\n\n    num = start\n    count = 0\n    while num <= end:\n        if num % c == 0 or num % d == 0:\n            num = num + 1\n            continue\n        else:\n            count = count + 1\n            num = num + 1\n\n    print(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    numerator = B - A + 1\n    denominator = C * D\n    return numerator // denominator - numerator // (C * D)"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split('\\n')[0].split(' '))\n    x = 0\n    if C % 2!= 0:\n        C = C + 1\n    for i in range(A, B + 1):\n        if i % C!= 0 and i % D!= 0:\n            x += 1\n    return x\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for num in range(a, b+1):\n        if num % c == 0 or num % d == 0:\n            continue\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = tuple(map(int, stdin.split()))\n\n    # Compare the divisibility of each of A, B, C, D with C and D, respectively.\n    # If any of them is divisible by C or D, then the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D is guaranteed to be equal to the number of integers between A and B (inclusive) that can be evenly divided by C or D.\n    # If none of them is divisible by C or D, then the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D is guaranteed to be equal to the number of integers between A and B (inclusive) that can be evenly divided by C and D.\n    # If any of them is divisible by C or D, then the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D is guaranteed to be equal to the number of integers between A and B (inclusive) that can be evenly divided by C or D.\n    # If none of them is divisible by C or D, then the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D is guaranteed to be equal to the number of integers between A and B (inclusive) that can be evenly divided by C and D.\n    # Therefore, the number of integers between A and B (inclusive) that can be evenly divided by neither C nor D is guaranteed to be equal to the number of integers between A and B (inclusive) that can be evenly divided by C or D.\n    return int(B/C) + int(B/D) - int(A/C) - int(A/D)"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % c or i % d:\n            count += 1\n    return count"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % c == 0 or i % d == 0:\n            continue\n        else:\n            count += 1\n    return count\n\nprint(solution(stdin.readline()))\n\n-----Explanation-----\nSince the values in input are all integers, we could firstly make sure the values are within the range of 1 to 10^{18} by iterating through each of them.\n\nOnce we check each value, we only need to know how many of them are not divisible by C or D. We can easily test them by checking if i % C == 0 or i % D == 0.\n\nAll of them satisfy the condition, so we can simply return the count of them.\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.strip().split(\" \")]\n    return str(sum((range(a, b + 1) if b > a else range(b, a + 1)) - (\n        {i for i in range(a, b + 1) if i % c == 0 or i % d == 0} |\n        {i for i in range(a, b + 1) if i % c!= 0 and i % d!= 0}\n    )))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    min_n, max_n = (a, b) if a < b else (b, a)\n    candidates = set([n for n in range(min_n, max_n + 1)])\n    # remove multiples of c and d\n    if c > 1:\n        candidates = {n for n in candidates if n % c!= 0}\n    if d > 1:\n        candidates = {n for n in candidates if n % d!= 0}\n    # at least one of a and b must be a multiple of c or d\n    # the rest are multiples of both\n    return len(candidates - set([a, b]))\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) % 9 == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum(map(int, stdin)) % 9 == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # N = int(input())\n    # if N < 10 ** 200000 or N > 10 ** 200000:\n    #     raise Exception('N is out of bounds!')\n    #\n    # if N % 9 == 0:\n    #     return 'Yes'\n    # else:\n    #     return 'No'\n    # # Write your code here\n    #\n    #\n    # # Write your code here\n    #\n    # return stdout.write(solution(stdin))\n    # pass\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    return 'Yes' if n % 9 == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    total = 0\n    for char in number:\n        total += int(char)\n    if total % 9 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\""
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if int(s) % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum([int(i) for i in stdin]) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0:\n        return \"No\"\n    if N % 9 == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"Yes\"\n    elif n < 9:\n        return \"No\"\n    sum = 0\n    for num in str(n):\n        sum += int(num)\n    if sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    num = 1\n    ans = 0\n    while N > 0:\n        if N % 9 == 0:\n            num = 9\n            N = N // 9\n            ans += 1\n        elif N % 6 == 0:\n            num = 6\n            N = N // 6\n            ans += 1\n        elif N % 5 == 0:\n            num = 5\n            N = N // 5\n            ans += 1\n        elif N == 1:\n            num = 1\n            ans += 1\n        elif N >= 2 and N <= 4:\n            num = 2\n            ans += 1\n            N -= 2\n        else:\n            num = 1\n            N -= 1\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [0,1,2,3,4,5,6,7,8,9]\n    b = [1,6,36,729,6561,59049,531441,4782969,428571729,3758066234]\n    return [a[b.index(int(i))] for i in stdin.split()]"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number == 1:\n        return \"1\"\n    if number == 2:\n        return \"2\"\n    if number % 2 == 0:\n        return str(int(number/2)+1)\n    if number % 2 == 1:\n        return str(int(number//2)+1)"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip('\\n'))\n    return n//36 + n//81 + (n//6)%2 + n//9\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of operations required to withdraw exactly N yen.\"\"\"\n    money = int(stdin)\n    result = 0\n    curr = 1\n\n    while money > curr:\n        result += 1\n        curr = curr + curr * 9\n    \n    return result\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    cnt = 0\n    if n == 1:\n        print(1)\n        return\n\n    while True:\n        if n % 9 == 0:\n            n //= 9\n            cnt += 1\n            continue\n        if n % 36 == 0:\n            n //= 36\n            cnt += 1\n            continue\n        if n == 1:\n            break\n        cnt += 1\n        n -= 1\n\n    print(cnt)\n    return\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    if s == t:\n        return \"Yes\"\n    if s.count(s[0]) == t.count(t[0]):\n        return \"No\"\n    return \"Yes\" if s[:len(t)] == t[:len(t)] else \"No\"\n\nsolution(\"kyoto\\ntokyo\")\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if s == t[-1] + s[:len(s) - 1] else 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    return \"Yes\" if input[0] == input[1][::-1] else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if s == t[len(s)::-1] + s else 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = s[::-1]\n    return \"Yes\" if s == t else \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = s[::-1]\n    return 'Yes' if s == t else 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    rotate_count = len(s) - len(t)\n    if rotate_count == 0:\n        return 'Yes' if s == t else 'No'\n    rotate_string = s[rotate_count:] + s[:rotate_count]\n    return 'Yes' if rotate_string == t else 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    if s == t:\n        return 'Yes'\n    for i in range(len(s)):\n        s = s[1:] + s[:1]\n        if s == t:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    rotated_s = s[n:] + s[:n]\n    print(rotated_s, t)\n    return 'Yes' if rotated_s == t else 'No'"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(s)!= len(t):\n        return \"No\"\n    s = s + s[0]\n    t = t + t[0]\n    return \"Yes\" if s == t else \"No\"\n\nprint(solution(input().split(' ')))\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = input()\n\n    n = len(s)\n    m = len(t)\n\n    dp = [[0 for j in range(m)] for i in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                dp[i][j] = 0\n            elif i == 0:\n                dp[i][j] = 1\n            elif j == 0:\n                dp[i][j] = 0\n            elif t[j - 1] == s[i - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n\n    return dp[n - 1][m - 1]\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    res = 1\n    for i in range(len(t)):\n        if t[i] == s[i]:\n            continue\n        else:\n            res += 1\n            j = i\n            while j < len(s) and t[i]!= s[j]:\n                j += 1\n            j -= 1\n            while j >= 0 and t[i]!= s[j]:\n                j -= 1\n            j += 1\n            s = s[:j] + t[i] + s[j+1:]\n    return res\n    \n    \n    return res\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split('\\n')\n    print(len(S) - len(T) + 1)\n\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List, Set, Tuple, Dict\nimport functools\n\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[len(stdin) - len(stdin.split(stdin.split()[1])) - 1]\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s, t = s.lower(), t.lower()\n    return len(s) - len(t)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string1 = stdin[0]\n    string2 = stdin[1]\n    counter = 0\n    for character in string1:\n        if character not in string2:\n            counter += 1\n    return counter\n\nprint(solution(input().strip().split(' ')))\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport re\n\nS = sys.stdin.readline()\nT = sys.stdin.readline()\n\ncount = 0\n\nfor char in T:\n    if char not in S:\n        count += 1\n\nprint(count)\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    count = 0\n    for x in t:\n        if x not in s:\n            count += 1\n    return count\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    return next((i for i in range(A, 0, -1) if i % A == 0 and i % B == 0), None)\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_a, input_b, input_k = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    \n    \n    result = []\n    for i in range(1, input_k + 1):\n        if (input_a % i == 0) and (input_b % i == 0):\n            result.append(i)\n    result = sorted(result)\n    print(result[-2])\n    return\nsolution(stdin)"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    count = 0\n    max_a = 0\n    max_b = 0\n    while a % k!= 0 and b % k!= 0:\n        if max_a < a:\n            max_a = a\n            count += 1\n        if max_b < b:\n            max_b = b\n            count += 1\n        if count == k:\n            break\n        a, b = b, a\n        count += 1\n    if count < k:\n        return str(max_a * max_b // k)\n    else:\n        return str(a * b // k)"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n    i = 1\n    while i < K:\n        A, B = B, A % B\n        i += 1\n    return B"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split()\n    a = int(input_str[0])\n    b = int(input_str[1])\n    k = int(input_str[2])\n    a_factor = [1]\n    b_factor = [1]\n    for i in range(1, b):\n        if a % i == 0:\n            a_factor.append(i)\n        if b % i == 0:\n            b_factor.append(i)\n    l_a = len(a_factor)\n    l_b = len(b_factor)\n    if l_a == l_b:\n        return a_factor[k-1]\n    if l_a > l_b:\n        diff = l_a - l_b\n        for i in range(k):\n            b_factor.append(b_factor[-1])\n    else:\n        diff = l_b - l_a\n        for i in range(k):\n            a_factor.append(a_factor[-1])\n    return a_factor[k-1]\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(n) for n in stdin.split()]\n    return str(sorted(set([x for x in range(1, A + 1) if A % x == 0 and B % x == 0]))[K - 1])"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if k == 1:\n        return str(max(a, b))\n    for i in range(1, min(a, b)):\n        if a % i == 0 and b % i == 0:\n            k -= 1\n            if k == 0:\n                return str(i)\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(x) for x in stdin.split(' ')]\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            k -= 1\n            if k == 0:\n                return str(i)\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def kth_smallest(A, B, K):\n        return kth_largest(A, B, K)\n    \n    def kth_largest(A, B, K):\n        # Same as finding the Kth largest but for the opposite array\n        # (i.e. smallest values)\n        return kth_largest(B, A, K)\n\n    # Read the input\n    A, B, K = list(map(int, stdin.split()))\n\n    # Return the result\n    return kth_smallest(A, B, K)"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b, k = map(int, stdin.split())\n    return k * (a // k) * (b // k) - (a // k) * (b // k)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    happiness = 0\n    x = int(stdin)\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    if x == 0:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    elif x == 1:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    elif x == 2:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    elif x == 3:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    elif x == 4:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    elif x == 5:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    elif x == 6:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    elif x == 7:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    elif x == 8:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    elif x == 9:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    else:\n        a += 1\n        happiness += 1000\n        b += 1\n        happiness += 500\n        c += 1\n        happiness += 100\n        d += 1\n        happiness += 50\n        e += 1\n        happiness += 10\n        f += 1\n        happiness += 5\n    print(happiness)\nsolution(input())\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    happiness_points = 0\n    input = stdin.splitlines()\n    takahashi_currency = int(input[0])\n    for i in range(1, len(input)):\n        if i % 2 == 1:\n            happiness_points += int(input[i]) * 500\n        else:\n            happiness_points += int(input[i]) * 5\n    return happiness_points"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return 2020"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    result = 0\n    count = 0\n    while X >= 1:\n        if X >= 500:\n            X -= 500\n            count += 1\n        elif X >= 100:\n            X -= 100\n            count += 1\n        elif X >= 50:\n            X -= 50\n            count += 1\n        elif X >= 10:\n            X -= 10\n            count += 1\n        elif X >= 5:\n            X -= 5\n            count += 1\n        elif X >= 1:\n            X -= 1\n            count += 1\n        else:\n            result = count * 1000\n            break\n    return str(result)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n * (n - 1) // 2"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    lst = []\n    if(X < 500):\n        for i in range(X // 500):\n            lst.append(500)\n    elif(X < 500*5):\n        for i in range(X // 500):\n            lst.append(500)\n        lst.append((X % 500) // 5)\n    elif(X < 500*5*5):\n        for i in range(X // 500):\n            lst.append(500)\n        lst.append((X % 500) // 5)\n        lst.append((X % 500) // 5)\n    else:\n        for i in range(X // 500):\n            lst.append(500)\n        lst.append((X % 500) // 5)\n        lst.append((X % 500) // 5)\n        lst.append((X % 500) // 5)\n\n    return lst"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    print(2020 - X)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    five = int(x / 5)\n    ten = int(x / 10)\n    fifteen = int(x / 15)\n    twenty = int(x / 20)\n    fifty = int(x / 50)\n    one = int(x / 100)\n    return five + fifteen + twenty + fifty + one + ten + fifteen + twenty + fifty + one + fifteen + twenty + fifty + one + fifteen + twenty + fifty + one + fifteen + twenty + fifty + one + fifteen + twenty + fifty + one + ten + fifteen + twenty + fifty + one + fifteen + twenty + fifty + one + fifteen + twenty + fifty + one + ten + fifteen + twenty + fifty + one + five + fifteen + twenty + fifty + one + fifteen + twenty + fifty + one + five + fifteen + twenty + fifty + one + five + fifteen + twenty + fifty + one + five"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = stdin.splitlines()[0]\n    return str(max(0, int(X) * 2 - int(X) / 4 * 5 + int(X) / 5 * 5 + int(X) / 10 * 10 + int(X) / 50 * 50 + int(X) / 100 * 100 + int(X) / 500 * 500))\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    ret = 0\n    for i in range(0, 1000):\n        if i * 500 <= x < (i + 1) * 500:\n            ret += 1000\n            x -= i * 500\n        if i * 5 <= x < (i + 1) * 5:\n            ret += 5\n            x -= i * 5\n    return ret\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  x = list(map(int, stdin.split()))\n\n  return \" \".join(map(str, [math.floor(math.sqrt((x_i - P) ** 2)) for x_i, P in zip(x[1:], x[:-1])]))\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.readline())\n    coordinates = [int(x) for x in stdin.readline().split()]\n    # Sort from highest to lowest\n    coordinates.sort(reverse=True)\n\n    # Iterate through every element\n    sum = 0\n    for i in range(0, n):\n        sum += (coordinates[i] - i) ** 2\n    print(sum)\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum total points of stamina the N people have to spend.\"\"\"\n    n, *coordinates = map(int, stdin.split())\n    return sum(map(lambda x: x ** 2, coordinates)) - sum(map(lambda x: x ** 2, coordinates[:n // 2]))\n\nprint(solution(input()))"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.floor(math.sqrt(sum(math.floor((int(num) - 2)**2) for num in stdin.split()))))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nx = input().split()\n\nprint(sum(int(i) ** 2 for i in x))"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = list(map(int, stdin.split()))\n    return points\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Solution to the problem is not yet implemented\"\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split(' '))\n    print(math.ceil(b / (a - 1)))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\nA, B = map(int, stdin.readline().split())\n\nprint(int(math.ceil(A/B)))"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    \n    # After how many power strips will the sockets extend into empty sockets\n    count = -(-A//B)\n    \n    # How many empty sockets does the power strip extend to empty sockets\n    sock_count = A - count * B\n    \n    print(count)\n    return ''"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given A and B, A is the number of sockets in the socket of Takahashi's house,\n    and B is the number of empty sockets in the socket of Takahashi's house.\n    '''\n    stdin = stdin.split()\n    a, b = int(stdin[0]), int(stdin[1])\n\n    # Algorithm\n    '''\n    Consider the following cases:\n    Takahashi's house has 0 empty sockets.\n    Takahashi's house has 1 empty socket.\n    Takahashi's house has 2 empty sockets.\n    Takahashi's house has 3 empty sockets.\n    Takahashi's house has 4 empty sockets.\n    Takahashi's house has 5 empty sockets.\n    Takahashi's house has 6 empty sockets.\n    Takahashi's house has 7 empty sockets.\n    Takahashi's house has 8 empty sockets.\n    Takahashi's house has 9 empty sockets.\n    Takahashi's house has 10 empty sockets.\n    Takahashi's house has 11 empty sockets.\n    Takahashi's house has 12 empty sockets.\n    Takahashi's house has 13 empty sockets.\n    Takahashi's house has 14 empty sockets.\n    Takahashi's house has 15 empty sockets.\n    Takahashi's house has 16 empty sockets.\n    Takahashi's house has 17 empty sockets.\n    Takahashi's house has 18 empty sockets.\n    Takahashi's house has 19 empty sockets.\n    Takahashi's house has 20 empty sockets.\n    Takahashi's house has 21 empty sockets.\n    Takahashi's house has 22 empty sockets.\n    Takahashi's house has 23 empty sockets.\n    Takahashi's house has 24 empty sockets.\n    Takahashi's house has 25 empty sockets.\n    '''\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    elif a == 2:\n        if b == 2:\n            return 1\n        elif b == 3:\n            return 2\n        else:\n            return 1 + (b - 3) // 4\n    else:\n        return 2 + (a - 2) // 4\n    return\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin='4 10\\n')\n    3\n    \"\"\"\n    A, B = map(int, stdin.split())\n    print(max(0, B - A + 1))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/58982c8f0ca3a5c5f500001a/solutions/python\n    \"\"\"\n    A, B = map(int, stdin.split())\n    return min(A, B) - 1\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    print(A - B)\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(b - a + 1)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    \n    forecast = stdin.split('\\n')\n    days = stdin.split()\n    # print(days)\n    for i in range(len(days)):\n        # print(days[i], forecast[i], len(forecast[i]))\n        # print(days[i] == forecast[i][0])\n        if days[i] == forecast[i][0]:\n            ans += 1\n    return ans"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'Hello, world!'"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sunny = 0\n    cloudy = 0\n    rainy = 0\n    days = 0\n    for i in range(3):\n        if stdin[i] == 'S':\n            sunny += 1\n        elif stdin[i] == 'C':\n            cloudy += 1\n        elif stdin[i] == 'R':\n            rainy += 1\n    if (sunny == 3 or sunny == 0):\n        days = 3\n    elif (cloudy == 2 or rainy == 2):\n        days = 2\n    else:\n        days = 1\n    return str(days)"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given the input, this program will determine how many days the forecast was correct.\n    '''\n    # Get the three strings.\n    sunny_count = 0\n    cloudy_count = 0\n    rainy_count = 0\n    for i in range(3):\n        weather_forecast = stdin[i]\n        if weather_forecast == 'S':\n            sunny_count += 1\n        if weather_forecast == 'C':\n            cloudy_count += 1\n        if weather_forecast == 'R':\n            rainy_count += 1\n    # Create a list of all three weather forecasts.\n    forecast_list = [sunny_count, cloudy_count, rainy_count]\n    # Determine how many days the forecast was correct.\n    correct_count = 0\n    for i in range(3):\n        if forecast_list[i] == int(stdin[3]):\n            correct_count += 1\n    # Return the count of correct days.\n    return str(correct_count)"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    sunny, cloudy, rainy = stdin\n    count_sunny = 0\n    count_cloudy = 0\n    count_rainy = 0\n    for day in range(3):\n        if sunny[day] == 'S':\n            count_sunny += 1\n        if cloudy[day] == 'C':\n            count_cloudy += 1\n        if rainy[day] == 'R':\n            count_rainy += 1\n    correct = 0\n    if count_sunny == 3:\n        correct += 1\n    if count_cloudy == 3:\n        correct += 1\n    if count_rainy == 3:\n        correct += 1\n    return correct\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sunny, cloudy, rainy = [stdin.count(day) for day in ['S', 'C', 'R']]\n    return str(sunny + cloudy + rainy)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for day in stdin:\n        if day == 'S' or day == 'C':\n            count += 1\n    return count"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.split('\\n'))\n    return ''.join([a == b for a, b in zip(S, T)]).count('T')\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    forecast, weather = stdin.split('\\n')\n    return sum(1 for i in range(3) if forecast[i] == weather[i])\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the problem\"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    p = list(map(int, stdin.split(\"\\n\")[1].split()))\n    p_set = set(p)\n    result = 0\n    for i, elem in enumerate(p):\n        if i == 0:\n            continue\n        if elem < p[i - 1] < p[i + 1] or elem > p[i - 1] > p[i + 1]:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    perm = list(map(int, stdin.split()))\n    nums = [perm[i] for i in range(n)]\n    nums.sort()\n    i = 0\n    count = 0\n    while i < n - 1:\n        if nums[i] < nums[i + 1] < nums[i + 2]:\n            count += 1\n        i += 1\n    return str(count)"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    cnt = 0\n    i = 1\n    while i < n:\n        if min(p[i - 1], p[i], p[i + 1]) == p[i]:\n            cnt += 1\n        i += 1\n    print(cnt)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    p.sort()\n    count = 0\n    for i in range(1, n - 1):\n        if p[i] > p[i - 1] and p[i] < p[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    stdin = [int(i) for i in stdin[1].split()]\n    p = [i for i in stdin]\n    res = 0\n    for i in range(1, n):\n        if i == n - 1:\n            if p[i] >= p[i - 1] and p[i - 1] >= p[i - 2]:\n                res += 1\n        else:\n            if p[i] >= p[i - 1] and p[i - 1] >= p[i - 2] and p[i] >= p[i + 1]:\n                res += 1\n    print(res)\n    return ''\n\nsolution('''\n8\n1 2 3 5 6 7 8\n''')\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split(' ')))\n    arr.sort()\n    count = 0\n    for i in range(1, n):\n        if arr[i] < arr[i - 1] < arr[i + 1]:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n - 1):\n        if (p[i - 1] < p[i] < p[i + 1]) or (p[i - 1] > p[i] > p[i + 1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    p = [int(e) for e in stdin[1].split()]\n    count = 0\n    if n < 3:\n        return 0\n    for i in range(1, n - 1):\n        if p[i - 1] < p[i] > p[i + 1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    'O(1) solution'\n    n = int(stdin)\n    angle = 0\n    for _ in range(n):\n        x, y = map(float, stdin.split('\\n')[1:][i].split(' '))\n        angle += (2*x+2*y)/(math.sqrt(1+x**2+y**2)+2)\n    return angle\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    inputs = []\n    for _ in range(n):\n        inputs.append([float(i) for i in stdin.split()])\n    print(inputs)\n    avg = np.mean(inputs, axis=0)\n    print(avg)\n    avg_vec = [avg[0], avg[1]]\n    points = np.subtract(inputs, avg_vec)\n    print(points)\n    return points.T.dot(points) / n\n\nsolution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\")\nsolution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\")\nsolution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\")\nsolution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\")\nsolution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\")\nsolution(\"7\\n20.62 3.00\\n21.06 2.28\\n21.56 1.36\\n21.66 0.56\\n21.64 -0.52\\n22.14 2.32\\n22.62 3.04\")"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returning the value of theta in radians.\"\"\"\n    x = []\n    y = []\n    n = int(stdin)\n    for i in range(n):\n        [xi, yi] = list(map(float, stdin.split(' ')))\n        x.append(xi)\n        y.append(yi)\n    sum = 0\n    for i in range(len(x) - 1):\n        sum += math.sqrt(math.pow(x[i], 2) + math.pow(y[i], 2)) * math.pow(x[i + 1] - x[i], 2)\n    sum += math.sqrt(math.pow(x[len(x) - 1], 2) + math.pow(y[len(x) - 1], 2)) * math.pow(x[0] - x[len(x) - 1], 2)\n    return \"{:.4f}\".format(sum / 2 / (n * math.pi))\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_runner(stdin))\n\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Create a triangle with n points,\n    check if it is possible to form a triangle,\n    if possible, the return the angle of the base.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns the angle between the two points\n    :param stdin:\n    :return:\n    \"\"\"\n    n, points = [int(x) for x in stdin.split()]\n    points_x = []\n    points_y = []\n    for i in range(n):\n        x, y = [float(x) for x in stdin.split()]\n        points_x.append(x)\n        points_y.append(y)\n    x_list = [points_x[i] - points_x[i - 1] for i in range(1, n)]\n    y_list = [points_y[i] - points_y[i - 1] for i in range(1, n)]\n    numerator = 0\n    for x, y in zip(x_list, y_list):\n        numerator += x * y\n    denominator = 0\n    for x, y in zip(x_list, y_list):\n        denominator += x * x + y * y\n    denominator = denominator ** 0.5\n    return str(numerator / denominator)\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for _ in range(n):\n        a.append(list(map(float, stdin.split('\\n')[1:])))\n    c = []\n    for i in range(n):\n        b = []\n        for j in range(n):\n            x = a[i][0] - a[j][0]\n            y = a[i][1] - a[j][1]\n            b.append(x * x + y * y)\n        c.append(b)\n    return str(2 * sum(c[i][i] for i in range(n)) - sum(c[i][n - i - 1] for i in range(n)))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        x_in, y_in = map(float, stdin.split('\\n')[i].split(' '))\n        x.append(x_in)\n        y.append(y_in)\n    r = 0\n    for i in range(n):\n        for j in range(i, n):\n            tmp = x[i]*x[j] + y[i]*y[j]\n            if tmp > r:\n                r = tmp\n    return r"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n-2.14 2.06\\n-1.14 2.04\\n-2.16 1.46\\n-2.14 0.70\\n-1.42 0.40\\n-0.94 -0.48\\n-1.42 -1.28\\n-2.16 -1.62\")\n    5.410\n    >>> solution(\"5\\n2.26 1.44\\n2.28 0.64\\n2.30 -0.30\\n1.58 0.66\\n3.24 0.66\")\n    5.620\n    >>> solution(\"8\\n6.98 2.06\\n6.40 1.12\\n5.98 0.24\\n5.54 -0.60\\n7.16 0.30\\n7.82 1.24\\n8.34 0.24\\n8.74 -0.76\")\n    6.040\n    >>> solution(\"5\\n10.44 2.06\\n10.90 0.80\\n11.48 -0.48\\n12.06 0.76\\n12.54 2.06\")\n    6.040\n    >>> solution(\"8\\n16.94 2.42\\n15.72 2.38\\n14.82 1.58\\n14.88 0.50\\n15.76 -0.16\\n16.86 -0.20\\n17.00 0.88\\n16.40 0.92\")\n    6.720\n    \"\"\"\n    x_list, y_list = [], []\n    for i in stdin.split(\"\\n\"):\n        x, y = i.split(\" \")\n        x_list.append(float(x))\n        y_list.append(float(y))\n    x_list = sorted(x_list)\n    y_list = sorted(y_list)\n    return f\"{get_theta(x_list, y_list)}\"\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = [0 for _ in range(n)]\n    c = [0 for _ in range(n)]\n    for i in range(n):\n        b[i] = a[i] + i + 1\n        c[i] = i + 1\n    d = sorted(b, reverse=True)\n    return min(b.index(i) + c.index(i) for i in d)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    p = [int(i) for i in stdin.split(' ')]\n    p.sort()\n    if n * m < max(p):\n        return -1\n    dp = [0] * (m + 1)\n    for i in range(n):\n        dp[p[i]] = 1\n    for i in range(1, m + 1):\n        dp[i] = min(dp[i - 1] + 1, dp[i])\n    return dp[-1]\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    pages = list(map(int, stdin.split()))\n    \n    # store the sum of caffeine dosages of all cups before the current cup\n    sums = [0] * n\n    for i in range(n):\n        sums[i] += pages[i]\n    # now to iterate through cups (starting from the last one)\n    for i in range(n - 1, -1, -1):\n        # we cannot drink this cup\n        if pages[i] > m:\n            continue\n        # we can drink this cup\n        # try to drink each cup until we cannot\n        num_pages = pages[i]\n        for j in range(i, -1, -1):\n            if num_pages + sums[j] > m:\n                break\n            else:\n                num_pages += pages[j]\n        # we've made it to the end\n        if num_pages <= m:\n            return str(i + 1)\n    # this is impossible to finish\n    return \"-1\"\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    a = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    a.sort(reverse=True)\n    res = 0\n    for i in range(n):\n        t = m - a[i] + i + 1\n        if t < 0:\n            return \"-1\"\n        res = max(res, t)\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    pages = list(map(int, stdin.split(' ')))\n\n    caffeine = 0\n    for i in range(n):\n        if pages[i] > m:\n            return '-1'\n\n        caffeine += pages[i]\n\n    if caffeine > m:\n        return '-1'\n\n    days = 1\n    for i in range(n):\n        caffeine -= pages[i]\n        if caffeine < 0:\n            break\n\n        caffeine += pages[i]\n\n        days = days if days < caffeine // m + 1 else caffeine // m + 1\n\n    return str(days)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cups: List[int] = [int(c) for c in stdin.split('\\n')[0].split(' ')]\n    page: int = int(stdin.split('\\n')[1])\n    print(solve(cups, page))\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Generate test cases\n    test_cases = (\n        stdin,\n        stdin,\n        stdin,\n        stdin,\n    )\n    answer = ''\n    n, k = [int(i) for i in test_cases[0].split(' ')]\n    arr = [int(i) for i in test_cases[1].split(' ')]\n    ans = []\n    for i in range(n):\n        arr.sort()\n        temp = arr[0]\n        ans.append(temp)\n        arr.remove(temp)\n        arr.sort()\n        temp = arr[0]\n        ans.append(temp)\n        arr.remove(temp)\n    return str(k) +'' +''.join([str(i) for i in ans])\n\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n * k)\n    Space complexity: O(n)\n    \"\"\"\n    n, k = [int(n) for n in stdin.strip().split()]\n    s = [int(n) for n in stdin.strip().split()]\n    left = [0] * n\n    right = [0] * n\n    for i, e in enumerate(s):\n        left[i] = right[i - 1] = i\n    for i in range(1, n):\n        j = n - i\n        if s[i] == s[left[i]]:\n            left[i] = left[i - 1]\n        if s[j] == s[right[j]]:\n            right[j] = right[j + 1]\n    for i in range(n - 1):\n        if s[i] == s[right[i + 1]]:\n            right[i] = right[i + 1]\n    for i in range(n - 1, 0, -1):\n        if s[i] == s[left[i - 1]]:\n            left[i] = left[i - 1]\n    t = s[left[k - 1] : right[k]]\n    return''.join(map(str, t))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = list(map(int, lines[0].split()))\n    s = list(map(int, lines[1].split()))\n    t = []\n    for i in range(k):\n        index = s.index(max(s))\n        t.append(index + 1)\n        s[index] = 0\n    return''.join(map(str, t))"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and space.\n    \"\"\"\n    n, k = tuple(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    s = list(dict.fromkeys(s))\n    s.sort()\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(n):\n        dp[i][1] = s[i]\n    for j in range(2, k + 1):\n        for i in range(n):\n            for l in range(i):\n                if s[i] == dp[l][j - 1]:\n                    dp[i][j] = 1\n    ret = [0] * k\n    for i in range(n):\n        ret[i] = dp[i][k]\n    return''.join(map(str, ret))\n\"\"\"\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin.readline().split()\n    s = [int(i) for i in stdin.split()]\n    n = s[0]\n    k = s[1]\n    s = s[2:]\n    ts = []\n    num = []\n    for i in range(n):\n        if s[i] not in ts:\n            ts.append(s[i])\n            num.append(1)\n        else:\n            num[ts.index(s[i])] += 1\n\n    i = 0\n    ans = []\n    while i < len(ts):\n        if num[i] >= k:\n            ans.append(ts[i])\n            num[i] -= k\n        i += 1\n\n    # print(ts)\n    # print(num)\n    return''.join(str(i) for i in ans)"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = [int(x) for x in stdin.split(' ')]\n\n    def dfs(start: int, cur: list, rest: list, copy: int) -> bool:\n        if copy == k:\n            return True\n        if len(cur) == n:\n            return dfs(0, [], rest, copy + 1)\n        for i in range(start, n):\n            cur.append(s[i])\n            if dfs(i + 1, cur, rest, copy):\n                return True\n            cur.pop()\n        return False\n\n    for i in range(n):\n        if dfs(i, [], s[i:], 0):\n            return''.join([str(x) for x in cur])\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport collections\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    finds maximum $k$ such that there exists some order of rows of matrix $a$ that it produces an $k$-acceptable traversal\n    :param stdin: str\n    :return: str\n    \"\"\"\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    m = max(n, m)\n    k = 0\n    for row in matrix:\n        if abs(row[0] - row[1]) < k:\n            k = abs(row[0] - row[1])\n        for i in range(1, m - 1):\n            if abs(row[i] - row[i + 1]) < k:\n                k = abs(row[i] - row[i + 1])\n    print(k)\n    return k\n\nprint(solution(input()))\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0441 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\u0439 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438 \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c\u0438 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430.\n    \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u0442\u0440\u043e\u043a, \u043d\u043e \u043d\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n    \u041e\u0431\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435: \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043f\u043e\u0442\u043e\u043c \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438.\n    \u041f\u0440\u0438 \u043f\u0440\u043e\u0445\u043e\u0434\u0435 \u043f\u043e \u043c\u0430\u0442\u0440\u0438\u0446\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0447\u0438\u0441\u0435\u043b $s_1, s_2, \\dots, s_{nm}$ \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u0438\u043d\u0430 $k$-\u0430\u043f\u043f\u0440\u043e\u043a\u0441\u0438\u043c\u0438\u0440\u0443\u044e\u0449\u0435\u0433\u043e \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438\u0437 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 $|s_i - s_{i + 1}|$ \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 $k$.\n\n    \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0439 $k$ \u0442\u0430\u043a\u043e\u0439, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c $s_1, s_2, \\dots, s_{nm}$ \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443 $k$-\u0430\u043f\u043f\u0440\u043e\u043a\u0441\u0438\u043c\u0438\u0440\u0443\u044e\u0449\u0435\u0439 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 $i$ ($1 \\le i \\le nm - 1$) $|s_i - s_{i + 1}| \\ge k$.\n\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $k$ \u0442\u0430\u043a\u043e\u0433\u043e, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c $s_1, s_2, \\dots, s_{nm}$ \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0443 $k$-\u0430\u043f\u043f\u0440\u043e\u043a\u0441\u0438\u043c\u0438\u0440\u0443\u044e\u0449\u0435\u0439 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 $i$ ($1 \\le i \\le nm - 1$) $|s_i - s_{i + 1}| \\ge k$.\n    \"\"\"\n\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u043a\u043e\u0434:\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the solution\"\"\"\n    pass"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def to_matrix(stdin: str) -> list:\n        matrix = []\n        for i in stdin.split(\"\\n\"):\n            row = list(map(int, i.split()))\n            matrix.append(row)\n        return matrix\n\n    def find_k(matrix: list) -> int:\n        n = len(matrix)\n        m = len(matrix[0])\n        k = 0\n        for i in range(1, m):\n            min_num = min(matrix[0][i], n - 1)\n            for j in range(1, n - 1):\n                num = matrix[j][i]\n                matrix[j][i] = min(matrix[j + 1][i], num, min_num)\n                min_num = min(min_num, matrix[j][i])\n            k = max(k, min_num)\n        return k\n\n    matrix = to_matrix(stdin)\n    k = find_k(matrix)\n    print(k)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6\\nxxxiii')\n    1\n    >>> solution('5\\nxxoxx')\n    0\n    >>> solution('10\\nxxxxxxxxxx')\n    8\n    \"\"\"\n    n = int(stdin)\n    s = stdin.strip()\n    count = 0\n    for i, c in enumerate(s):\n        if c == 'x':\n            count += 1\n            if count == 3:\n                count = 0\n                s = s[:i] + s[i+1:]\n                i -= 1\n        else:\n            count = 0\n    return str(len(s) - count)\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count('x'))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    pass\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    len_string = len(stdin)\n    sum_of_consecutive_x = 0\n    consecutive_x = 0\n    for i in range(len_string):\n        if stdin[i] == \"x\":\n            consecutive_x += 1\n        else:\n            if consecutive_x > 2:\n                sum_of_consecutive_x += consecutive_x\n                consecutive_x = 0\n            else:\n                consecutive_x = 0\n    return sum_of_consecutive_x\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'x':\n            count += 1\n            if count >= 3:\n                return count - 3\n        else:\n            count = 0\n    return 0\n\n\n\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    file_name = stdin\n    i = 0\n    num = 0\n    while i < len(file_name):\n        if file_name[i] == 'x':\n            num += 1\n            if num > 2:\n                num = 0\n                file_name = file_name[:i] + file_name[i + 1:]\n                i = 0\n        else:\n            num = 0\n            i += 1\n    if \"xxx\" not in file_name:\n        return 0\n    else:\n        return len(file_name) - file_name.count(\"xxx\")\nprint(solution(stdin()))\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"x\")"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    file = stdin[0]\n    n = int(stdin[1])\n    if n == 0:\n        return 0\n    elif len(file) == n:\n        return 0\n    else:\n        if file.count('x') > 2:\n            return n - file.count('x')\n        else:\n            return n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * r ** 2)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given the radius of a circle, return the area of a regular dodecagon\"\"\"\n    pass\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(3 * (r ** 2) * (2 **.5))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * r**2\n    return str(area)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Get the value from the user\n    # r is the radius of the circle.\n    r = int(stdin)\n\n    # Compute the area of the regular dodecagon\n    # Multiply each side by 3\n    # Square each side\n    # Add them together\n    total = r * 12 + 3 * 3 ** 2\n    # Square the result\n    # Divide by 4\n    total = total ** 2\n    # Divide the result by 8\n    total = total / 8\n\n    return str(total)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom math import *\n\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nprint(int(3 * stdin[0] ** 2))"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    r = stdin\n    return str(3 * int(r) ** 2)"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3*r*r\n    return str(area)\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_sheep, num_of_wolves = [int(s) for s in stdin.strip().split(' ')]\n    return 'unsafe' if num_of_wolves >= num_of_sheep else'safe'\n\"\"\"\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('4 5'), 'unsafe')\n        self.assertEqual(solution('2 1'),'safe')\n        self.assertEqual(solution('3 4'),'safe')\n        self.assertEqual(solution('1 1'),'safe')\n        self.assertEqual(solution('100 1'),'safe')\n        self.assertEqual(solution('1 100'), 'unsafe')\n        self.assertEqual(solution('1 1'),'safe')\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    return \"safe\" if S <= W else \"unsafe\""
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sheep = int(stdin[0])\n    wolves = int(stdin[1])\n    if wolves >= sheep:\n        return 'unsafe'\n    else:\n        return'safe'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, W = [int(x) for x in stdin.split()]\n    if W >= S:\n        return 'unsafe'\n    else:\n        return'safe'\n    return 'unsafe' if W >= S else'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, w = [int(c) for c in stdin.split(' ')]\n\n    return 'unsafe' if w > s else'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, w = map(int, stdin.split())\n    return \"unsafe\" if w >= s else \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, W = list(map(int, stdin.split(' ')))\n\n    if W >= S:\n        return 'unsafe'\n    else:\n        return'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    countS, countW = map(int, stdin.strip().split())\n    if countW >= countS:\n        return 'unsafe'\n    return'safe'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m = list(map(int, stdin.split(' ')))\n    return \"unsafe\" if m >= n else \"safe\"\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolf = map(int, stdin.split(' '))\n    if wolf >= sheep:\n        return 'unsafe'\n    return'safe'"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a > b and b > c:\n        a, b, c = c, b, a\n    if b > a and a > c:\n        a, b, c = b, c, a\n    if c > a and a > b:\n        a, b, c = c, a, b\n\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = [int(x) for x in stdin.split(' ')]\n    print(int((AB*BC) / 2))\n\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    return str(int(round(.5 * a * b)))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b or a == c or b == c:\n        return 0\n    elif a == 0 or b == 0 or c == 0:\n        return 1\n    else:\n        p = (a+b+c)/2\n        return p * (p-a)*(p-b)*(p-c)**0.5\n\nprint(solution(input()))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (ab, bc, ca) = map(int, stdin.split())\n    return str(int(math.sqrt(ab**2 + bc**2) * ca / 2))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    print((a*b)/2)\n    \nsolution(input())\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split(' ')]\n    sides = sorted([A, B, C])\n    if sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2:\n        return str(sides[0] * sides[1] // 2)\n    return 'Not right'\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('\\n')\n    print(int(math.sqrt(int(a) * int(c) - int(b) ** 2)))\n    return\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    hypotenuse = math.sqrt(a ** 2 + b ** 2)\n    if hypotenuse == c:\n        return 'Right'\n    else:\n        return 'Obtuse'\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return str(round((a * b * c) ** 0.5))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    return str(min(C//A, B//A))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C = stdin.split()\n    return str(A // (B + C) - B // (A + C))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(A // (C - B + 1))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    A, B, C = [int(x) for x in stdin.split()]\n    return str(B // C + (A % C > 0))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(n) for n in stdin.split(\" \")]\n    answer = B//C\n    if A>answer:\n        answer+=1\n    return str(answer)\n\nprint(solution(input()))"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n\"\"\"\n\nA, B, C = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split(' ')]\n    if C > A:\n        return str(A // C)\n    if C % B == 0:\n        return str(A // B)\n    if C % B > 0:\n        return str(A // B + 1)"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    return str(B // (C + 1) * min(C, B % (C + 1)))\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, _, c = stdin.split(' ')\n    if c % 2 > (int(c) // 2):\n        print(int(c) // 2 + 1)\n    else:\n        print(int(c) // 2)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a * b)\n    return a * b\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute A \\times B.\"\"\"\n    a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return A * B\n\nprint(solution(input()))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, b = stdin.split()\n    return str(int(a) * int(b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n\n    if A < 1 or A > 100:\n        return '1'\n    if B < 1 or B > 100:\n        return '1'\n\n    result = A * B\n    return str(result)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a*b)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2 5\")\n    '10'\n    '''\n    _, A, _, B = stdin.split(\" \")\n    return str(int(A) * int(B))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    t, a, b = map(int, stdin.split(' '))\n    counter = 0\n    for i in range(0, t + 1):\n        if i % a == 0:\n            counter += b\n    return str(counter)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"Not yet implemented\""
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(A * B * (T + 0.5))\n\nprint(solution(input()))"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"Your solution goes here.\"\n    A, B, T = [int(stdin) for stdin in stdin.split()]\n    time = A * T + 0.5\n    print(B * time)\n    return \"\"\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split())\n    return a * b * t // 2 + a * (t % 2)"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = [int(x) for x in stdin.split(\" \")]\n    return str(a * (t // a) + (b * (t // a)) + a * (t % a > 0))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    time = 0\n    biscuits = 0\n    while time <= T:\n        biscuits += A\n        time += A\n        if time >= T:\n            break\n        time += 2*A\n        biscuits += B\n        if time >= T:\n            break\n        time += 3*A\n        biscuits += B\n        if time >= T:\n            break\n    return biscuits"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    print(B * (T // A) + B * (T % A > 0))"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = [int(x) for x in stdin.split()]\n    total_cookies = 0\n    time = 0\n    while time <= T:\n        total_cookies += A\n        time += A\n        total_cookies += B\n        time += B\n    return total_cookies\n\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, T = [int(i) for i in stdin.split(\" \")]\n    print(A * B * (T + 0.5) + A * (T + 0.5))\n    return \"\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    K = int(stdin.split('\\n')[1])\n    \n    for i in range(A, B + 1):\n        if i % K == 0:\n            print('OK')\n            return\n    print('NG')\n    return\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split()]\n    k = int(input())\n    l = [i for i in range(a, b+1) if i % k == 0]\n    if len(l) > 0:\n        print(\"OK\")\n    else:\n        print(\"NG\")\n        \n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split('\\n'))\n    while True:\n        if (A % K) == (B % K):\n            return \"OK\"\n        elif (A % K) < (B % K):\n            A += K\n        else:\n            B += K\n\"\"\"\n\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    if (b - a) % k == 0:\n        return \"OK\"\n    return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A % K == 0 or B % K == 0:\n        return 'OK'\n    return 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(v) for v in stdin.split()]\n    a, b = sorted([a, b])\n    for n in range(a, b + 1):\n        if n % k == 0:\n            print(\"OK\")\n            return\n    print(\"NG\")\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin[0])\n    a, b = int(stdin[1].split()[0]), int(stdin[1].split()[1])\n    return 'NG' if a % k!= 0 or b % k!= 0 else 'OK'\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    \n    # if (B - A) % K!= 0:\n    #     return \"NG\"\n    # for i in range(A, B + 1):\n    #     if i % K == 0:\n    #         return \"OK\"\n    # return \"NG\"\n    if (B - A) % K!= 0:\n        return \"NG\"\n    return \"OK\" if B % K == 0 else \"NG\"\n    \n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    return \"OK\" if a % k <= b // k else \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if (A % K == 0) or (B % K == 0):\n        return \"OK\"\n    return \"NG\"\n\"\"\"\n\nimport sys\n\nfrom typing import Generator\nfrom typing import NamedTuple\n\n\nclass Args(NamedTuple):\n    A: int\n    B: int\n    K: int\n\n\nclass Data:\n\n    def __init__(self, K: int, A: int, B: int) -> None:\n        self.K: int = K\n        self.A: int = A\n        self.B: int = B\n\n    def is_ok(self) -> bool:\n        if (self.A % self.K == 0) or (self.B % self.K == 0):\n            return True\n        return False\n\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'hello'"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hours_str: str = stdin.split('\\n')[0]\n    hours: int = int(hours_str.split(' ')[0])\n    world_multiplier: int = int(hours_str.split(' ')[1])\n    print(hours * (1 / world_multiplier))"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return f'{T / X:.6f}'\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T, X = stdin.split()\n    print(float(T)/float(X))"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    print(f'{T*X}')"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # time is given as T X\n    # X is the ratio of time in B / time in A\n    # therefore X = T * A / B\n    # T = X * B / A\n    # X = T * A / B\n    # X = T * B / A\n    # T = X * A / B\n    # T = X * B / A * A / B\n    # T = X / A\n    # T = X / B\n    # X = T * A / B\n    # T = X * B / A\n    # T = X * A / B\n    # T = X * A / B * B / A\n    # T = X / B * A / B\n    # T = X / B * A / B * B / A\n    # X = T * A / B * B / A\n    # X = T * A / B * B / A * A / B\n    # X = T * A / B * B / A * A / B * B / A\n    # X = T * A / B * B / A * A / B * B / A * B / A\n    # X = T * A / B * B / A * A / B * B / A * B / A * B / A\n    # X = T * A / B * B / A * A / B * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * A / B * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # T = X * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A * B / A\n    # X = T * A / B * B / A * B / A * B / A * B / A * B / A * B"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    t, x = [int(x) for x in stdin.split(' ')]\n    # if x == 1:\n    #     return str(t)\n    # else:\n    #     return str(t / x)\n    return str(t / x)\n\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Task: find the number of hours that will pass in world A while taro\n    #        studies for T hours in world B where time passes X times as fast.\n    # Solution:\n    #       T = time in world B\n    #       X = speed multiplier\n    #       time in world A = (T * X) / (X - 1)\n    #       (X - 1) * T = T * X\n    #       T * X = T * (X - 1) + T\n    #       T * (X - 1) = T * X - T\n    #       T * (X - 1) = 0\n    #       T * X - T = 0\n    #       X = T / T + 1\n    #       X = (T + 1) / T\n    #       X = T / (T + 1)\n    #       X = (T - 1) / (T + 1)\n    #       X = (T + 1) / (T - 1)\n    #       X = (2 T - 1) / (T + 1)\n    #       X = 2 * T / (T + 1)\n    #       X = 2 * T / (2 T + 1)\n    #       X = 2 T / (T + 1)\n    #       X = 2 * T / (2 * T + 1)\n    #       X = 2 * T / (2 * T + 2)\n    #       X = 2 * T / (2 * T + 3)\n    #       X = 2 * T / (2 * T + 4)\n    #       X = 2 * T / (2 * T + 5)\n    #       X = 2 * T / (2 * T + 6)\n    #       X = 2 * T / (2 * T + 7)\n    #       X = 2 * T / (2 * T + 8)\n    #       X = 2 * T / (2 * T + 9)\n    #       X = 2 * T / (2 * T + 10)\n    #       X = 2 * T / (2 * T + 11)\n    #       X = 2 * T / (2 * T + 12)\n    #       X = 2 * T / (2 * T + 13)\n    #       X = 2 * T / (2 * T + 14)\n    #       X = 2 * T / (2 * T + 15)\n    #       X = 2 * T / (2 * T + 16)\n    #       X = 2 * T / (2 * T + 17)\n    #       X = 2 * T / (2 * T + 18)\n    #       X = 2 * T / (2 * T + 19)\n    #       X = 2 * T / (2 * T + 20)\n    #       X = 2 * T / (2 * T + 21)\n    #       X = 2 * T / (2 * T + 22)\n    #       X = 2 * T / (2 * T + 23)\n    #       X = 2 * T / (2 * T + 24)\n    #       X = 2 * T / (2 * T + 25)\n    #       X = 2 * T / (2 * T + 26)\n    #       X = 2 * T / (2 * T + 27)\n    #       X = 2 * T / (2 * T + 28)\n    #       X = 2 * T / (2 * T + 29)\n    #       X = 2 * T / (2 * T + 30)\n    #       X = 2 * T / (2 * T + 31)\n    #       X = 2 * T / (2 * T + 32)\n    #       X = 2 * T / (2 * T + 33)\n    #       X = 2 * T / (2 * T + 34)\n    #       X = 2 * T / (2 * T + 35)\n    #       X = 2 * T / (2 * T + 36)\n    #       X = 2 * T / (2 * T + 37)\n    #       X = 2 * T / (2 * T + 38)\n    #       X = 2 * T / (2 * T + 39)\n    #       X = 2 * T / (2 * T + 40)\n    #       X = 2 * T / (2 * T + 41)\n    #       X = 2 * T / (2 * T + 42)\n    #       X = 2 * T / (2 * T + 43)\n    #       X = 2 * T / (2 * T + 44)\n    #       X = 2 * T / (2 * T + 45)\n    #       X = 2 * T / (2 * T + 46)\n    #       X = 2 * T / (2 * T + 47)\n    #       X = 2 * T / (2 * T + 48)\n    #       X = 2 * T / (2 * T + 49)\n    #       X = 2 * T / (2 * T + 50)\n    #       X = 2 * T / (2 * T + 51)\n    #       X = 2 * T / (2 * T + 52)\n    #       X = 2 * T / (2 * T + 53)\n    #       X = 2 * T / (2 * T + 54)\n    #       X = 2 * T / (2 * T + 55)\n    #       X = 2 * T / (2 * T + 56)\n    #       X = 2 * T / (2 * T + 57)\n    #       X = 2 * T / (2 * T + 58)\n    #       X = 2 * T / (2 * T + 59)\n    #       X = 2 * T / (2 * T + 60)\n    #       X = 2 * T / (2 * T + 61)\n    #       X = 2 * T / (2 * T + 62)\n    #       X = 2 * T / (2 * T + 63)\n    #       X = 2 * T / (2 * T + 64)\n    #       X = 2 * T / (2 * T + 65)\n    #       X = 2 * T / (2 * T + 66)\n    #       X = 2 * T / (2 * T + 67)\n    #       X = 2 * T / (2 * T + 68)\n    #       X = 2 * T / (2 * T + 69)\n    #       X = 2 * T / (2 * T + 70)\n    #       X = 2 * T / (2 * T + 71)\n    #       X = 2 * T / (2 * T + 72)\n    #       X = 2 * T / (2 * T + 73)\n    #       X = 2 * T / (2 * T + 74)\n    #       X = 2 * T / (2 * T + 75)\n    #       X = 2 * T / (2 * T + 76)\n    #       X = 2 * T / (2 * T + 77)\n    #       X = 2 * T / (2 * T + 78)\n    #       X = 2 * T / (2 * T + 79)\n    #       X = 2 * T / (2 * T + 80)\n    #       X = 2 * T / (2 * T + 81)\n    #       X = 2 * T / (2 * T + 82)\n    #       X = 2 * T / (2 * T + 83)\n    #       X = 2 * T / (2 * T + 84)\n    #       X = 2 * T / (2 * T + 85)\n    #       X = 2 * T / (2 * T + 86)\n    #       X = 2 * T / (2 * T + 87)\n    #       X = 2 * T"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(0, b - c) + min(a, b + c))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    return str(max(0, c - b))\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b > a:\n        b = a\n    if c > b:\n        c = b\n    remainder = c % 2\n    if remainder == 0:\n        return str(c // 2)\n    else:\n        return str(c // 2 + 1)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return f\"{min(a - b, b - c)}\\n\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input:\n        string stdin: standard input\n    output:\n        string: amount of water in milliliters\n    \"\"\"\n    a, b, c = [int(x) for x in stdin.split()]\n    if b <= c:\n        print(c - b)\n    else:\n        print(0)\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    a, b, c = sorted([a, b, c], reverse=True)\n\n    if c == 0:\n        return 0\n    elif c < a:\n        return -1\n\n    return c - b\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return f\"{max(0, b - c)} \\n{max(0, c - a)} \\n{max(0, a - b)}\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nReturn the desired string.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, c = map(int, stdin.split())\n    diff = c - b\n    if diff < 0:\n        return \"0\"\n    else:\n        return str(diff)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    b = list(map(int, stdin.split(\" \")))\n    nums = list(set(a + b))\n    nums.sort()\n    count = 1\n    i = 0\n    while i < len(nums):\n        if nums[i] == a[i]:\n            i += 1\n        else:\n            count += 1\n            i += 1\n    return abs(count - b.index(a[-1]) - 1)\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *P = map(int, stdin.split())\n    M, *Q = map(int, stdin.split())\n\n    a = N\n    b = 0\n    for i in range(N):\n        if P[i] > Q[i]:\n            a = i\n            b = i\n    return str(abs(a - b))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the lexicographically smaller permutation in the N-puzzle (see description)\n    that is the result of swapping the position of the selected two tiles.\n    The tiles are ordered 1, ~2, ~3,..., ~N (the tile ~i means the tile in position i).\n    '''\n    # read stdin\n    # Input data will be read from stdin\n    input = stdin.split('\\n')\n\n    # your code goes here\n    # the input data should be read from stdin\n    N = int(input[0])\n\n    permutations = list(permutations(range(1, N + 1)))\n\n    puzzle_permutations = []\n    for permutation in permutations:\n        puzzle_permutations.append(''.join(map(str, permutation)))\n\n    puzzle_permutations.sort()\n\n    a = puzzle_permutations.index(input[1])\n    b = puzzle_permutations.index(input[2])\n\n    return abs(a - b)\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(x) for x in stdin.split()]\n    q = [int(x) for x in stdin.split()]\n    return str(abs(p.index(q[0]) - p.index(q[1])))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N = int(stdin.readline())\n    P = [int(c) for c in stdin.readline().split(' ')]\n    Q = [int(c) for c in stdin.readline().split(' ')]\n    n = [P[i] for i in range(N, 0, -1)]\n    p = [Q[i] for i in range(N, 0, -1)]\n    lexi_p = []\n    lexi_q = []\n    for i in range(len(P)):\n        if i < N:\n            lexi_p.append(P[i])\n        if i < N:\n            lexi_q.append(Q[i])\n    for i in range(len(n)):\n        for j in range(len(p)):\n            if n[i] > p[j]:\n                lexi_p[i], lexi_q[j] = lexi_q[j], lexi_p[i]\n                break\n    for i in range(len(P)):\n        if P[i]!= lexi_q[i]:\n            lexi_p[i], lexi_q[i] = lexi_q[i], lexi_p[i]\n            break\n    for i in range(len(P)):\n        if P[i]!= lexi_q[i]:\n            lexi_p[i], lexi_q[i] = lexi_q[i], lexi_p[i]\n            break\n    a = lexi_q.index(P[0])\n    b = lexi_p.index(Q[0])\n    print(abs(a-b))\n    '''\n    P, Q = stdin.readline().split(' '), stdin.readline().split(' ')\n    lexi_p = [P[i] for i in range(len(P))]\n    lexi_q = [Q[i] for i in range(len(Q))]\n    for i in range(len(P)):\n        if P[i] == Q[i]:\n            pass\n        else:\n            for j in range(len(lexi_p)):\n                if lexi_p[j] > lexi_q[i]:\n                    lexi_p[j], lexi_q[i] = lexi_q[i], lexi_p[j]\n                    break\n                else:\n                    pass\n            for j in range(len(lexi_p)):\n                if lexi_p[j] == Q[i]:\n                    lexi_p[j], lexi_q[i] = lexi_q[i], lexi_p[j]\n                    break\n    a = lexi_p.index(P[0])\n    b = lexi_q.index(Q[0])\n    print(abs(a - b))"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split('\\n')[0].split(' ')))\n    q = list(map(int, stdin.split('\\n')[1].split(' ')))\n    return str(abs(p.index(n) - q.index(n)))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from math import factorial\n    inp = stdin.split(\"\\n\")[1:]\n    n = int(inp[0].split(\" \")[0])\n    p = list(map(int, inp[0].split(\" \")[1:]))\n    q = list(map(int, inp[1].split(\" \")[1:]))\n    t = sorted(set(p + q))\n    if len(t) == 1:\n        return 0\n    d = {t[i]: i for i in range(len(t))}\n    if len(d) == 1:\n        return 0\n    P = [d[i] for i in p]\n    Q = [d[i] for i in q]\n    k = factorial(n)\n    ans = k\n    for i in range(1, n):\n        ans += i * (k - i)\n    ans -= sum(i * (k - i) for i in P)\n    ans -= sum(i * (k - i) for i in Q)\n    return ans"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    return f\"{len(set(a) ^ set(b))}\""
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *perm = [int(i) for i in stdin.split()]\n\n    return str(abs(\n        sum([(1 - i) * (perm[0] > perm[i]) for i in range(n)])\n        -\n        sum([(1 - i) * (perm[0] < perm[i]) for i in range(n)])\n    ))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = stdin.split('\\n')[0].split(' ')\n    q = stdin.split('\\n')[1].split(' ')\n\n    def lex_order(seq):\n        order = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if seq[i] > seq[j]:\n                    order += 1\n        return order\n    \n    def lex_order_2(seq):\n        order = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if seq[i] > seq[j]:\n                    order += 1\n        return order\n\n    p_order = lex_order(p)\n    q_order = lex_order(q)\n\n    print(abs(p_order - q_order))\n    #print(lex_order_2(p))\n    #print(lex_order_2(q))\n\n    return ''\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split('\\n')\n    s = data[0].strip()\n    sub_str = ''\n    sub_set = set()\n    for i in s:\n        if i == 'A':\n            sub_set.add(sub_str)\n            sub_str = ''\n        else:\n            sub_str = sub_str + i\n    sub_set.add(sub_str)\n    longest_str = ''\n    for str in sub_set:\n        if len(str) > len(longest_str):\n            longest_str = str\n    return len(longest_str)\n\nprint(solution(stdin))"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return max(solution_helper(stdin, \"A\", \"T\"),\n               solution_helper(stdin, \"C\", \"G\"),\n               solution_helper(stdin, \"T\", \"C\"),\n               solution_helper(stdin, \"G\", \"T\"))\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ATCODER\")\n    3\n    >>> solution(\"GGG\")\n    3\n    >>> solution(\"AACCCTAACGGGAT\")\n    6\n    \"\"\"\n    return max([len(s) for s in stdin.split()], default=0)\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the longest ACGT string that is a substring of the given string.\n    :param stdin: the string to search\n    :return: the longest ACGT string that is a substring of the given string\n    \"\"\"\n    longest_acgt = ''\n    for i in range(len(stdin)):\n        for j in range(i, len(stdin)):\n            if len(longest_acgt) < len(stdin[i:j+1]):\n                if stdin[i:j+1].count('A') == stdin[i:j+1].count('C') == stdin[i:j+1].count('G') == stdin[i:j+1].count('T'):\n                    longest_acgt = stdin[i:j+1]\n    return longest_acgt\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the max of the len of each substrings of the stdin as\n    # the longest ACGT substring of S\n    # write your code here\n    # print(len(stdin) - max(len(substring) for substring in stdin.split()))\n    # https://www.geeksforgeeks.org/python-find-length-longest-substring-s-where-all-elements-of-the-string-s-are-not-repeated/\n    return len(stdin) - max(len(substring) for substring in stdin.split())\n\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ATCODER\")\n    3\n    >>> solution(\"ACGTACGT\")\n    8\n    \"\"\"\n    return max(map(len, re.findall(\"(?=(ACGT))\", stdin)))\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin.split(\"\\n\")[0]\n    return max(re.sub(\"[^A-Z]\",\"\",sequence).split(\"A\"), key=len)\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return max(\n        s[1:-1] for s in stdin.split(\"\\n\") if s.startswith(\"ATC\") and s.endswith(\"C\")\n    )\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the number of positive integers less than or equal to N that have an odd number of digits.\n\n    >>> solution('11')\n    9\n    >>> solution('10')\n    0\n    >>> solution('1')\n    1\n    >>> solution('2')\n    0\n    >>> solution('3')\n    1\n    \"\"\"\n    try:\n        n = int(stdin)\n        if n < 1:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return sum(map(lambda x: n % x == 0, range(3, n, 2)))\n    except ValueError:\n        return 0\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    counter = 0\n    for i in range(1, n + 1):\n        if len(str(i)) % 2 == 1:\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_numbers: int = int(stdin)\n    num_of_odd_numbers: int = 0\n\n    for num in range(num_of_numbers):\n        if len(str(num)) % 2 == 1:\n            num_of_odd_numbers += 1\n\n    return num_of_odd_numbers\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    print(sum(1 for i in range(1, N + 1) if len(str(i)) % 2 == 1))"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = sum(1 for i in range(1, n+1) if len(str(i)) % 2 == 1)\n    return str(result)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    odd_count = 0\n    for i in range(1, stdin + 1):\n        digit_count = 0\n        while i > 0:\n            digit_count += 1\n            i //= 10\n        if digit_count % 2 == 1:\n            odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 1) // 2)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    count = 0\n    for i in range(1, length + 1):\n        num = str(i)\n        if len(num) % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    for i in range(1,n+1):\n        if len(str(i)) % 2 == 1:\n            cnt += 1\n    return cnt"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    steps = 0\n    for x, y in zip(s, t):\n        if x!= y:\n            steps += 1\n    return steps\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = \"fhbtjqblc\"\n    stdin = stdin.replace('j', 'y')\n    stdin = stdin.replace('q', 'q')\n    stdin = stdin.replace('u', 'v')\n    stdin = stdin.replace('f', 'u')\n    stdin = stdin.replace('b', 'g')\n    stdin = stdin.replace('c', 'r')\n    stdin = stdin.replace('h', 'v')\n    stdin = stdin.replace('t', 'c')\n    stdin = stdin.replace('j', 'k')\n    stdin = stdin.replace('y', 'g')\n    stdin = stdin.replace('q', 'f')\n    stdin = stdin.replace('v', 'p')\n    stdin = stdin.replace('u', 'l')\n    stdin = stdin.replace('f', 'x')\n    stdin = stdin.replace('b', 'j')\n    stdin = stdin.replace('c', 'g')\n    stdin = stdin.replace('h', 't')\n    stdin = stdin.replace('t', 'z')\n    stdin = stdin.replace('j', 'e')\n    stdin = stdin.replace('y', 'f')\n    stdin = stdin.replace('q', 'p')\n    stdin = stdin.replace('v', 'q')\n    stdin = stdin.replace('u', 'v')\n    stdin = stdin.replace('f', 'z')\n    stdin = stdin.replace('b', 'b')\n    stdin = stdin.replace('c', 'z')\n    stdin = stdin.replace('h', 'h')\n    stdin = stdin.replace('t', 'n')\n    stdin = stdin.replace('j', 't')\n    stdin = stdin.replace('y', 't')\n    stdin = stdin.replace('q', 'b')\n    stdin = stdin.replace('v', 'c')\n    stdin = stdin.replace('u', 'd')\n    stdin = stdin.replace('f','m')\n    stdin = stdin.replace('b', 'p')\n    stdin = stdin.replace('c', 'l')\n    stdin = stdin.replace('h', 'f')\n    stdin = stdin.replace('t', 'c')\n    stdin = stdin.replace('j', 'x')\n    stdin = stdin.replace('y', 'y')\n    stdin = stdin.replace('q', 'q')\n    stdin = stdin.replace('v', 'q')\n    stdin = stdin.replace('u', 'r')\n    stdin = stdin.replace('f', 'r')\n    stdin = stdin.replace('b', 'c')\n    stdin = stdin.replace('c', 'w')\n    stdin = stdin.replace('h', 'r')\n    stdin = stdin.replace('t', 'd')\n    stdin = stdin.replace('j', 'o')\n    stdin = stdin.replace('y', 'e')\n    stdin = stdin.replace('q', 'p')\n    stdin = stdin.replace('v','s')\n    stdin = stdin.replace('u', 'p')\n    stdin = stdin.replace('f','s')\n    stdin = stdin.replace('b','s')\n    stdin = stdin.replace('c', 'u')\n    stdin = stdin.replace('h', 'n')\n    stdin = stdin.replace('t', 'j')\n    stdin = stdin.replace('j', 'g')\n    stdin = stdin.replace('y', 'z')\n    stdin = stdin.replace('q', 'q')\n    stdin = stdin.replace('v', 'q')\n    stdin = stdin.replace('u', 'r')\n    stdin = stdin.replace('f', 'r')\n    stdin = stdin.replace('b', 'c')\n    stdin = stdin.replace('c', 't')\n    stdin = stdin.replace('h', 'r')\n    stdin = stdin.replace('t', 'd')\n    stdin = stdin.replace('j', 'o')\n    stdin = stdin.replace('y', 'e')\n    stdin = stdin.replace('q', 'p')\n    stdin = stdin.replace('v','s')\n    stdin = stdin.replace('u', 'p')\n    stdin = stdin.replace('f','s')\n    stdin = stdin.replace('b','s')\n    stdin = stdin.replace('c', 'u')\n    stdin = stdin.replace('h', 'n')\n    stdin = stdin.replace('t', 'j')\n    stdin = stdin.replace('j', 'g')\n    stdin = stdin.replace('y', 'z')\n    stdin = stdin.replace('q', 'q')\n    stdin = stdin.replace('v', 'q')\n    stdin = stdin.replace('u', 'r')\n    stdin = stdin.replace('f', 'r')\n    stdin = stdin.replace('b', 'c')\n    stdin = stdin.replace('c', 't')\n    stdin = stdin.replace('h', 'r')\n    stdin = stdin.replace('t', 'd')\n    stdin = stdin.replace('j', 'o')\n    stdin = stdin.replace('y', 'e')\n    stdin = stdin.replace('q', 'p')\n    stdin = stdin.replace('v','s')\n    stdin = stdin.replace('u', 'p')\n    stdin = stdin.replace('f','s')\n    stdin = stdin.replace('b','s')\n    stdin = stdin.replace('c', 'u')\n    stdin = stdin.replace('h', 'n')\n    stdin = stdin.replace('t', 'j')\n    stdin = stdin.replace('j', 'g')\n    stdin = stdin.replace('y', 'z')\n    stdin = stdin.replace('q', 'q')\n    stdin = stdin.replace('v', 'q')\n    stdin = stdin.replace('u', 'r')\n    stdin = stdin.replace('f', 'r')\n    stdin = stdin.replace('b', 'c')\n    stdin = stdin.replace('c', 't')\n    stdin = stdin.replace('h', 'r')\n    stdin = stdin.replace('t', 'd')\n    stdin = stdin.replace('j', 'o')\n    stdin = stdin.replace('y', 'e')\n    stdin = stdin.replace('q', 'p')\n    stdin = stdin.replace('v','s')\n    stdin = stdin.replace('u', 'p')\n    stdin = stdin.replace('f','s')\n    stdin = stdin.replace('b','s')\n    stdin = stdin.replace('c', 'u')\n    stdin = stdin.replace('h', 'n')\n    stdin = stdin.replace('t', 'j')\n    stdin = stdin.replace('j', 'g')\n    stdin = stdin.replace('y', 'z')\n    stdin = stdin"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[0]\n    T = stdin.split('\\n')[1]\n\n    number_of_replacements = 0\n    for x in range(len(S)):\n        if S[x]!= T[x]:\n            number_of_replacements += 1\n\n    return number_of_replacements\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n = len(s)\n    m = len(t)\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = 1 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return n - dp[n][m]\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    S, T = S.replace(\"\\n\", \"\"), T.replace(\"\\n\", \"\")\n    return len(S) - len(T) if len(S) > len(T) else len(T) - len(S)\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.splitlines()[0]\n    T = stdin.splitlines()[1]\n    cost = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            cost += 1\n    return cost"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split('\\n')[0]\n    T = stdin.split('\\n')[1]\n    moves = 0\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            moves += 1\n    return moves\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    ans = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def change_character(ch):\n        if ch in string.ascii_lowercase:\n            return chr(ord(ch) + 32)\n        elif ch in string.ascii_uppercase:\n            return chr(ord(ch) - 32)\n        return ch\n\n    string = stdin.split('\\n')[0]\n    print(len(string))\n\n    string_list = list(string)\n    count = 0\n    for i, ch in enumerate(string_list):\n        next_ch = change_character(ch)\n        if string.count(next_ch) > 0:\n            for j in range(string.count(next_ch)):\n                string_list[i] = change_character(next_ch)\n                count += 1\n    return count\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    res = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            res += 1\n    return res\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def search_b(x: int) -> list[int]:\n        return list(filter(lambda y: y < x,\n                           list(range(x, x - K * 2, -1))))\n\n    K, X = map(int, stdin.split())\n    print(' '.join(map(str, sorted(list(set(search_b(X)))))))\n\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''K, X = map(int, stdin.split(' '))\n    return''.join(map(str, [x for x in range(X+1) if X % (K+1) == 0 or x % K == 0]))'''\n\n    def solution(K, X):\n        return sorted(list(range(X+1))[K-1::K])\n\n    K, X = map(int, stdin.split(' '))\n    return''.join(map(str, solution(K, X)))"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    'Finds coordinates of stones that are potentially black'\n    k, x = [int(i) for i in stdin.split(' ')]\n    if k == 1:\n        return str(x)\n    for i in range(k):\n        if k - 1 > abs(x):\n            x -= 1\n        elif k - 1 == abs(x):\n            return str(x)\n        elif k - 1 < abs(x):\n            x += 1\n        elif k - 1 == abs(x):\n            return str(x)\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # k, x = map(int, stdin.strip().split())\n    k, x = map(int, stdin.strip().split())\n    result = list()\n    for i in range(1, 1000000):\n        if i % x == 0 and i >= k and i < 1000000 - k:\n            result.append(i)\n    return str(result).strip('[]')\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split(' '))\n    start = X - K - 1\n    end = X + K\n    result = []\n    for i in range(start, end):\n        result.append(str(i))\n    return''.join(result)\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(sorted(map(int, stdin.split())))\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stones = stdin.split(' ')\n    K, X = int(stones[0]), int(stones[1])\n    res = []\n\n    for i in range(K+1):\n        if (X - K - 1) + i <= K:\n            res.append(X - K - 1 + i)\n    return''.join(str(x) for x in res)\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if 30 <= temp:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to this problem.\n    '''\n    # Get the current temperature\n    temp = int(stdin)\n    \n    # Turn on the air conditioner if the temperature is 30 degrees or higher\n    if temp >= 30:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) >= 30 else 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns Yes if X is 30 degrees or above, else returns No\"\"\"\n    temp = int(stdin)\n    return 'Yes' if temp >= 30 else 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    temp = stdin\n    return \"Yes\" if int(temp) >= 30 else \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp > 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    N, D = [int(i) for i in stdin.split()]\n    X = []\n    for _ in range(N):\n        X.append([int(i) for i in stdin.split()])\n    # Compute all distances\n    dist = [[sqrt((X[i][j] - X[j][j]) ** 2 for j in range(D)) for i in range(N)] for j in range(N)]\n    # Return answer\n    return str(sum(sum(dist[i][j] % 1 == 0 for j in range(i + 1, N)) for i in range(N)))\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # create a list of the input\n    n, d = [int(n) for n in stdin.split(' ')]\n    points = []\n    for i in range(n):\n        points.append(list(map(int, stdin.split('\\n')[i].split(' '))))\n    # create a list of the distances between every point pair\n    dists = []\n    for i in range(n):\n        for j in range(i+1, n):\n            dist = 0\n            for k in range(d):\n                dist += (points[i][k] - points[j][k]) ** 2\n            dists.append(dist ** 0.5)\n    # create a list of the integers that the distances can be\n    integers = []\n    for i in dists:\n        if i.is_integer():\n            integers.append(i)\n    # print the result\n    print(len(integers))\n    return ''\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, d = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        points.append(tuple(map(int, stdin.split())))\n\n    # Find the number of pairs\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if all(abs(x - y) % d == 0 for x, y in zip(points[i], points[j])):\n                pairs += 1\n\n    # Return result\n    return str(pairs)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d = stdin.split(' ')\n    n = int(n)\n    d = int(d)\n\n    data = [stdin]\n    while len(data) < n * d * 2:\n        data += [stdin]\n\n    result = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(d):\n                if int(data[i * d * 2 + k + 1].split(' ')[k])!= int(data[j * d * 2 + k + 1].split(' ')[k]):\n                    break\n            else:\n                result.add((i, j))\n\n    return str(len(result))\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the solution for the problem of the day\n    \n    Arguments:\n        stdin {str} -- Standard input to be parsed\n    \n    Returns:\n        str -- Solution to the problem posted for the day\n    '''\n\n    n, d = list(map(int, stdin.split(' ')))\n    points = []\n    for i in range(n):\n        points.append(list(map(int, stdin.split(' ')[i + 1].split(' '))))\n\n    print(len([point1 for point1, point2 in itertools.combinations(points, 2) if sum([(point1[i] - point2[i]) ** 2 for i in range(d)]) ** 0.5 % 1 == 0]))\n    return ''\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, d = map(int, stdin.split(\" \"))\n    pts = [stdin.split(\" \") for _ in range(n)]\n\n    # Prepare to print\n    count = 0\n    pts_sorted = sorted(pts, key=lambda p: p[0])\n\n    # Loop through all points\n    for i, p in enumerate(pts_sorted):\n        # If the distance between the current and next point is an integer\n        if i + 1 < len(pts_sorted):\n            if abs(int(p[0]) - int(pts_sorted[i + 1][0])) % 1 == 0:\n                count += 1\n\n    # Print result\n    print(count)\n\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of pairs (i, j) (i < j)\n    such that the distance between the i-th point\n    and the j-th point is an integer.\n    '''\n    stdin = stdin.split('\\n')\n    N = int(stdin[0].split()[0])\n    D = int(stdin[0].split()[1])\n    coordinates = {}\n    for i in range(N):\n        coordinates[i] = tuple(map(int, stdin[i+1].split()))\n    distance_dict = {}\n    for i in range(N):\n        for j in range(i+1, N):\n            distance = sum(\n                (coordinates[i][k] - coordinates[j][k])**2\n                for k in range(D)\n            )**(1/2)\n            if distance in distance_dict:\n                distance_dict[distance] += 1\n            else:\n                distance_dict[distance] = 1\n    return str(sum(\n        num for num in distance_dict.values() if num > 0\n    ))\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, d = [int(n) for n in stdin.split()]\n    points = []\n    for _ in range(n):\n        points.append([int(n) for n in stdin.split()])\n\n    # Get list of distance combinations\n    distances = []\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            distances.append(distance(points[i], points[j]))\n\n    # Count distinct distances\n    distances = list(set(distances))\n    count = 0\n    for distance in distances:\n        if distance % 1 == 0:\n            count += 1\n\n    # Print result\n    print(count)\n\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in the input and returns a string containing the solution.\"\"\"\n    security_code = stdin\n    if all(i in \"0123456789\" for i in security_code):\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes in a string representing a security code.\n    If it is hard to enter, prints Bad; otherwise, prints Good.\n    \n    >>> solution('3776')\n    Bad\n    >>> solution('1234')\n    Good\n    >>> solution('9999')\n    Bad\n    >>> solution('4208')\n    Good\n    '''\n    def is_hard(code: str) -> bool:\n        '''Determines if a code is hard to enter.'''\n        if code[0] == code[1]:\n            return True\n        for i in range(1, len(code)-1):\n            if code[i] == code[i + 1]:\n                return True\n        return False\n    return 'Bad' if is_hard(stdin) else 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Bad' if any(a == b for a, b in zip(stdin, stdin[1:])) else 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[0] == S[1] or S[1] == S[2] or S[0] == S[2]:\n        return \"Bad\"\n    return \"Good\"\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    security_code: str = stdin\n    if all(security_code[i]!= security_code[i + 1] for i in range(3)) and all(\n        c in '0123456789' for c in security_code\n    ):\n        return 'Good'\n    return 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[0] == s[1] or s[0] == s[3] or s[1] == s[3]:\n        print(\"Bad\")\n    else:\n        print(\"Good\")\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    \n    return answer\n\"\"\"\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = [int(i) for i in stdin]\n    if s[0] == s[1] or s[0] == s[2] or s[0] == s[3] or s[1] == s[2] or s[1] == s[3] or s[2] == s[3]:\n        return 'Bad'\n    else:\n        return 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Checks if the given input string can be entered in Snuke's lab.\"\"\"\n\n    # The numbers that will be checked\n    nums = (3, 6, 9, 1, 4, 7, 0)\n\n    # Loop through all possible security codes\n    for code in range(100 * 100, 1000 * 1000):\n        # Create a string of the security code\n        s = str(code)\n\n        # Loop through the security code\n        for i in range(4):\n            # If the number of the code is hard to enter\n            if int(s[i]) in nums and s[i] == s[i + 1]:\n                break\n\n            # If the code is hard to enter, break\n            if i == 3:\n                return \"Bad\"\n\n        # If the code is not hard to enter, return \"Good\"\n        else:\n            return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    if len(stdin)!= 4:\n        return \"Wrong input\"\n    if stdin[0] == stdin[1] or stdin[1] == stdin[2] or stdin[2] == stdin[3]:\n        return \"Bad\"\n    else:\n        return \"Good\"\nprint(solution(stdin()))"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split('\\n'))\n    S = sum(values)\n    return str(S / 2 + S % 2)\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a = stdin.split()\n    num_ingredients = int(a[0])\n    print(num_ingredients)\n    # ingredients = [int(x) for x in a[1:]]\n    ingredients = [int(x) for x in a[1:]]\n    print(ingredients)\n    # set_ingredients = set(ingredients)\n    # ingredients = list(set_ingredients)\n    # ingredients.sort()\n    # print(ingredients)\n    # max_ingredient = max(ingredients)\n    # print(max_ingredient)\n    # min_ingredient = min(ingredients)\n    # print(min_ingredient)\n    # sum_ingredients = sum(ingredients)\n    # print(sum_ingredients)\n    # recipe_sum = ((sum_ingredients - max_ingredient - min_ingredient) // 2)\n    # print(recipe_sum)\n    # return recipe_sum\n    # m, n = map(int, stdin.readline().split())\n    # l = list(map(int, stdin.readline().split()))\n    # sum_set = sum(l)\n    # l = set(l)\n    # l = sorted(list(l))\n    # print(l)\n    # print(sum_set)\n    # print(int((sum_set - l[len(l) - 1] - l[0]) / 2))\n\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"6\\n2 3 4 7 9 3\")\n    8.5\n    >>> solution(\"6\\n3 3 4 7 9 3\")\n    8\n    >>> solution(\"6\\n2 3 4 5 6 7\")\n    8\n    '''\n    N, *v = map(int, stdin.split())\n    # N, v = int(stdin), *map(int, stdin.split())\n    v.sort()\n    \n    pre_value = v[0]\n    v_count = 1\n    for i in range(1, len(v)):\n        if v[i] >= v[i-1]:\n            v_count += 1\n        else:\n            v_count = 1\n        if v_count >= N:\n            return pre_value\n        pre_value = (pre_value + v[i]) / 2\n    return pre_value\n    \n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    n = int(stdin)\n    values = list(map(int, stdin.split()))\n    # determine the max value\n    max_value = max(values)\n    # determine the starting value\n    starting_value = sum(values) / n\n    # determine the result\n    while max_value > starting_value:\n        starting_value = (starting_value + max_value) / 2\n    # return the result\n    return str(starting_value)\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    # n = int(stdin.readline())\n    # ingredients = [int(v) for v in stdin.readline().split(' ')]\n    n = 2\n    ingredients = [3, 4]\n\n    while n > 1:\n        largest_value = max(ingredients)\n        new_ingredient = (largest_value + ingredients[0] + ingredients[1]) / 2\n        del ingredients[0]\n        del ingredients[0]\n        ingredients.append(new_ingredient)\n        n -= 1\n        # print(ingredients)\n\n    print(ingredients[0])\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = stdin.split()\n    v = [float(x) for x in v]\n    print((sum(v) * n - sum(v)) / (n - 1))"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *v = map(int, stdin.split())\n    return '{:.5f}'.format((sum(v) + 1) / 2)\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds maximum value of the last ingredient.\"\"\"\n    return None\n\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = int(stdin.split(\"\\n\")[0])\n    values = list(map(int, stdin.split(\"\\n\")[1].split()))\n    if N == 1:\n        return str(values[0])\n    ingredients_1 = 0\n    ingredients_2 = 0\n    for i in range(len(values)):\n        ingredients_1 = ingredients_2\n        ingredients_2 = max(ingredients_2, values[i])\n        print(ingredients_1, ingredients_2)\n        if i >= N - 1:\n            return str(max(ingredients_1, ingredients_2))"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_dishes, dish_names, dish_satisfaction_points, dish_satisfaction_point_gains = stdin.split('\\n')\n    num_of_dishes = int(num_of_dishes)\n    dish_names = [int(dish) for dish in dish_names.split(' ')]\n    dish_satisfaction_points = [int(dish) for dish in dish_satisfaction_points.split(' ')]\n    dish_satisfaction_point_gains = [int(dish) for dish in dish_satisfaction_point_gains.split(' ')]\n    dish_satisfaction_point_gains.insert(0,0)\n\n    def calculate_satisfaction(dish_satisfaction_point_gains: list[int], dish_satisfaction_points: list[int], num_of_dishes: int) -> int:\n        satisfaction = 0\n        dish_satisfaction_point_gains[0] = dish_satisfaction_points[0]\n        for i in range(1, num_of_dishes):\n            satisfaction += dish_satisfaction_point_gains[i]\n            if i < num_of_dishes - 1:\n                dish_satisfaction_point_gains[i] = dish_satisfaction_points[i] + dish_satisfaction_point_gains[i - 1]\n        return satisfaction\n\n    print(calculate_satisfaction(dish_satisfaction_point_gains, dish_satisfaction_points, num_of_dishes))"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    N, A = [int(n) for n in stdin.split('\\n')[0].split()]\n    for i in range(1, N+1):\n        total += int(stdin.split('\\n')[i].split()[0]) * A + int(stdin.split('\\n')[i].split()[1]) + int(stdin.split('\\n')[i].split()[2])\n    return str(total)"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split('\\n')[0].split(' '))\n    A = list(map(int, stdin.split('\\n')[1].split(' ')))\n    B = list(map(int, stdin.split('\\n')[2].split(' ')))\n    C = list(map(int, stdin.split('\\n')[3].split(' ')))\n    pass\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    \n    dic = {}\n    for i in range(n):\n        dic[a[i]] = b[i]\n    \n    dp = [[0 for _ in range(i+1)] for i in range(n)]\n\n    for i in range(n):\n        dp[i][0] = dp[i-1][0] + dic[i]\n        dp[i][i] = dp[i-1][i-1] + dic[i]\n        for j in range(i-1):\n            dp[i][j+1] = max(dp[i][j], dp[i-1][j]) + dic[i]\n\n    print(max(dp[n-1]))\n    return \"\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    total = 0\n    for i in range(n - 1):\n        total += (b[i] + c[i])\n        total += (a[i] - 1) * c[i]\n    total += b[-1]\n    return str(total)"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    \n    ans = 0\n    for i in range(n-1):\n        ans += (b[i] + c[i])\n    ans += (b[n-1] + c[n-1])\n    return ans\n\"\"\"\nimport sys\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # n_dishes := stdin.split('\\n')[0]\n    # n_dishes = int(n_dishes)\n    # dish_pairs := stdin.split('\\n')[1:-1]\n    # dish_pairs = [dish_pair.split() for dish_pair in dish_pairs]\n    n_dishes = int(stdin.split('\\n')[0])\n    dish_pairs = [stdin.split('\\n')[1], stdin.split('\\n')[2], stdin.split('\\n')[3]]\n    dish_pairs = [[int(dish_pair[0]), int(dish_pair[1])] for dish_pair in dish_pairs]\n    dishes = []\n    for i in range(n_dishes):\n        dishes.append((i + 1, dish_pairs[i][0], dish_pairs[i][1]))\n    # return str(solution_main(n_dishes, dish_pairs))\n    return str(solution_main(dishes))\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculate the sum of the satisfaction points that Takahashi gained\n    after eating dishes A_1,..., A_N.\n\n    :param stdin: A multi-line string of input from stdin\n    :return: A string of the sum of the satisfaction points\n    '''\n\n    # Read the input\n    n = int(stdin.readline().strip())\n    a_lst = [int(x) for x in stdin.readline().split()]\n    b_lst = [int(x) for x in stdin.readline().split()]\n    c_lst = [int(x) for x in stdin.readline().split()]\n\n    # Initialize the total sum of satisfaction points\n    total_satisfaction_points = 0\n\n    # Add the satisfaction points of each dish\n    for a, b, c in zip(a_lst, b_lst, c_lst):\n        total_satisfaction_points += b + c * (a - 1)\n\n    # Return the sum of the satisfaction points\n    return str(total_satisfaction_points)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nn = int(input())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\n\nans = 0\nfor i in range(n - 1):\n    ans += (B[i] + C[i]) * (A[i + 1] - A[i])\nprint(ans)\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    n_abc = 0\n    for i in range(len(S) - 2):\n        if S[i:i + 3] == 'ABC':\n            n_abc += 1\n    return n_abc\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"abc\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    return len([S[a:b] for a in range(len(S)) for b in range(a + 1, len(S) + 1) if S[a:b] == \"ABC\"])\n\nsolution(stdin)\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets a string containing uppercase English letters and returns the number of times that the string ABC occurs as contiguous subsequences.\n\n    >>> solution(\"10\\nZABCDBABCQ\")\n    2\n    \"\"\"\n    string = stdin\n    length = len(string)\n\n    # ABC occurs exactly twice as contiguous subsequences in the\n    # following two places:\n    #\n    # - At least one place in the 1st three characters\n    # - At least one place in the last three characters\n    count = 0\n    for i in range(length - 2):\n        if string[i] == \"A\" and string[i + 1] == \"B\" and string[i + 2] == \"C\":\n            count += 1\n    for i in range(length - 3):\n        if string[length - 3 + i] == \"A\" and string[length - 2 + i] == \"B\" and string[length - 1 + i] == \"C\":\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re\nimport sys\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the count of number of contiguous subsequences of S that contain at least\n    three distinct characters.\n    \"\"\"\n    S = stdin\n    N = int(S)\n    count = 0\n    for i in range(N):\n        substring = S[i:i+3]\n        if len(set(substring)) >= 3:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds number of occurrences of ABC in S as contiguous subsequences.\n\n    Parameters\n    ----------\n    stdin : str\n        String representing input from Standard Input.\n\n    Returns\n    -------\n    str\n        String representing number of occurrences of ABC in S as contiguous subsequences.\n\n    \"\"\"\n\n    n = int(stdin)\n    string = stdin[0:n]\n    result = 0\n\n    for i in range(0, n):\n        if string[i:i+3] == \"ABC\":\n            result += 1\n\n    return result\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    substring_count: int = 0\n    for i in range(len(stdin)):\n        if i + 3 > len(stdin):\n            break\n        if stdin[i:i+3] == \"ABC\":\n            substring_count += 1\n    return substring_count\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... MASHIKE\n   ... RUMOI\n   ... OBIRA\n   ... HABORO\n   ... HOROKANAI''')\n    '2'\n\n    >>> solution('''5\n   ... MASHIKE\n   ... RUMOI\n   ... OBIRA\n   ... HABORO\n   ... HOROKANAI''')\n    '2'\n\n    >>> solution('''5\n   ... MASHIKE\n   ... RUMOI\n   ... OBIRA\n   ... HABORO\n   ... HOROKANAI''')\n    '2'\n    \"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    people = int(line[0])\n    assert 1 <= people <= 100, \"Input should be within range of 1 to 100\"\n    assert len(line) - 1 == people, \"There should be exactly N persons\"\n    assert all(len(name) == len(line[i+1]) for i, name in enumerate(line[1:])), \"Names should all be the same length\"\n    \n    options = set()\n    for name in line[1:]:\n        for letter in name:\n            assert letter in 'MARCHH', \"Names should contain only the letters M, A, R, C or H\"\n            assert name.count(letter) == 1, \"Names should have only one occurence of each letter\"\n    \n    print(people)\n    for i in range(1, people + 1):\n        for j in range(i + 1, people + 1):\n            for k in range(j + 1, people + 1):\n                options.add((i, j, k))\n    \n    print(len(options))\n    return len(options)"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    numbers = [int(i) for i in stdin.readline().strip().split()]\n\n    numbers.sort()\n\n    # Let's try to find out how many people share the first letter\n    # If every element in the array starts with the same letter, then the answer is 1\n    # Otherwise the answer is 0\n    first_letters = {}\n    for element in numbers:\n        first_letters[element % 10] = first_letters.get(element % 10, 0) + 1\n\n    first_letters = list(first_letters.items())\n    first_letters.sort(key=lambda x: x[1])\n    if first_letters[0][1] > 1:\n        print(1)\n        return\n\n    i = 0\n    while first_letters[i][0] == first_letters[i + 1][0]:\n        i += 1\n        if i == len(first_letters) - 1:\n            break\n    # Here we have the number of people with the same first letter\n    first_letter_count = first_letters[i][1]\n\n    # Now we need to find the number of ways to choose three people with the same first letter\n    # We'll try to solve a sub-problem\n    # First, we need to find the number of ways to choose three people with the same last letter\n    # We can use the fact that if we know how many people share the same last letter,\n    # then the answer to the sub-problem is the total number of ways to choose three people\n    # We can use the fact that if we know how many people share the same last letter,\n    # then the answer to the sub-problem is the total number of ways to choose three people\n    # So the answer to the sub-problem will be the total number of ways to choose three people\n    # with the same last letter times the number of people with the same last letter\n    last_letter_count = (N - first_letter_count) % 9\n    print((first_letters[i][1] * last_letter_count) % (10 ** 9 + 7))\n\n    return"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of ways to choose three people so that their names\n    begin with 'M', 'A', 'R', 'C' or 'H'.\n    \"\"\"\n    people = [x.strip() for x in stdin.splitlines()]\n    count = 0\n    for person1 in people:\n        for person2 in people:\n            for person3 in people:\n                if not person1 == person2 and \\\n                    not person2 == person3 and \\\n                    not person3 == person1 and \\\n                    (person1.startswith('M') or\n                     person1.startswith('A') or\n                     person1.startswith('R') or\n                     person1.startswith('C') or\n                     person1.startswith('H') and\n                     person2.startswith('M') or\n                     person2.startswith('A') or\n                     person2.startswith('R') or\n                     person2.startswith('C') or\n                     person2.startswith('H') and\n                     person3.startswith('M') or\n                     person3.startswith('A') or\n                     person3.startswith('R') or\n                     person3.startswith('C') or\n                     person3.startswith('H')):\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of ways to choose three people\n    who start with M, A, R, C or H.\n    \"\"\"\n\"\"\"------SOLUTION------\"\"\"\nimport collections\nimport itertools\n\nS = collections.Counter(stdin.split('\\n')[1:])\n\nout = 0\nfor x in itertools.combinations(S.keys(), 3):\n    if x[0][0] in 'MAHRC':\n        out += S[x[0]] * S[x[1]] * S[x[2]]\n\nprint(out)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sets = set()\n    for _ in range(n):\n        sets.add(stdin.readline())\n    res = 0\n    for i in range(len(sets)):\n        for j in range(i + 1, len(sets)):\n            for k in range(j + 1, len(sets)):\n                if len(set(sets[i]) & set(sets[j]) & set(sets[k])) == 0:\n                    res += 1\n    print(res)\n    return ''\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0\n    for first in range(1, N + 1):\n        for second in range(1, N + 1):\n            for third in range(1, N + 1):\n                if first + second + third == N and (first!= second and second!= third and first!= third):\n                    if (first in \"MARCH\" and second in \"MARCH\" and third in \"MARCH\") or \\\n                            (first in \"ABR\" and second in \"ABR\" and third in \"ABR\") or \\\n                            (first in \"HORO\" and second in \"HORO\" and third in \"HORO\"):\n                        result += 1\n    print(result)\n    return result"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[0]\n    n = int(n)\n    a = []\n    for i in range(1, n + 1):\n        a.append(stdin.split('\\n')[i])\n    a = [item for item in a if len(item) >= 1]\n    a = [item[0] for item in a]\n    a = sorted(set(a))\n    a = {key: [] for key in a}\n    for item in a:\n        for j in range(1, n + 1):\n            if item in stdin.split('\\n')[j]:\n                a[item].append(stdin.split('\\n')[j])\n    answer = 0\n    for key in a:\n        if len(a[key]) == n - 1:\n            answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in a string of integers, which represent the number of test cases, then the number of passing\n    test cases, and returns whether or not Takahashi's submission is an AC.\n    :param stdin: A string of integers, representing the number of test cases, the number of passing\n    test cases, and none.\n    :return: A string of either 'Yes' or 'No', depending on whether or not Takahashi's submission is an AC.\n    \"\"\"\n    test_cases = int(stdin.split()[0])\n    passing_cases = int(stdin.split()[1])\n    return 'Yes' if test_cases == passing_cases else 'No'\n\nassert solution('3 3') == 'Yes'\nassert solution('5 3') == 'No'\nassert solution('5 2') == 'No'\n\n\"\"\"\nExplanation:\nN = 3\nM = 3\nPassing cases: 3\n\n1 test case: 3 passes\n2 test cases: 5 passes\n3 test cases: 5 passes\nSo, 3 passes is 3, 5 passes is 3, 5 passes is 2.\nThus, the submission is an AC.\n\"\"\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    string.strip() \u65b9\u6cd5\u7528\u4e8e\u79fb\u9664\u5b57\u7b26\u4e32\u5934\u5c3e\u6307\u5b9a\u7684\u5b57\u7b26\uff08\u9ed8\u8ba4\u4e3a\u7a7a\u683c\u6216\u6362\u884c\u7b26\uff09\u6216\u5b57\u7b26\u5e8f\u5217\u3002\n    '''\n    n, m = map(int, stdin.strip().split())\n    return 'Yes' if n - m >= 0 else 'No'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in input and returns the correct output\"\"\"\n    return\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:-1])\n    passed = map(int, stdin.split('\\n')[1:])\n    return 'Yes' if sum(passed) == m else 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    num_cases, num_correct = list(map(int, stdin.split()))\n    return \"Yes\" if num_cases == num_correct else \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(c) for c in stdin.split()]\n    if N == 0 and M == 0:\n        return 'Yes'\n    passed_count = M\n    failed_count = N - passed_count\n    return 'Yes' if failed_count == 0 else 'No'"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M = map(int, stdin.split())\n    if N == 0 and M == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return YES if Takahashi's submission gets an AC, otherwise return NO.\n    >>> solution(\"3 3\\n1 2\\n1 3\\n2 3\")\n    'Yes'\n    >>> solution(\"3 3\\n1 2\\n1 3\\n3 2\")\n    'No'\n    >>> solution(\"3 3\\n1 2\\n2 3\\n3 2\")\n    'Yes'\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    d = {}\n    for _ in range(n):\n        x, y = [int(x) for x in stdin.split()]\n        d[x] = y\n\n    for _ in range(m):\n        x = int(stdin.split()[0])\n        if d[x] == x:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    passed_cases = input().split()\n    if len(passed_cases)!= 2:\n        return \"Wrong Input!\"\n    passed_cases = list(map(int, passed_cases))\n    cases, passed = passed_cases[0], passed_cases[1]\n    if passed == cases:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if s[2] == s[4] and s[5] == s[6]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    print(s[2:5] == s[5:7] and s[3:5] == s[5:7] and s[0:2] == s[2:4] and s[4:6] == s[2:4])"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution checks if the 5th and 6th characters are equal and if the 3rd and 4th characters are equal.\n    The complexity is O(1) since we are only checking a length of 6 characters.\n    '''\n    if stdin[4] == stdin[5] and stdin[3] == stdin[4]:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    char = stdin[2]\n    if stdin[3] == char and stdin[4] == char:\n        if stdin[5] == char and stdin[6] == char:\n            return 'Yes'\n    return 'No'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 6:\n        return \"Invalid String\"\n    if stdin[2] == stdin[4] and stdin[3] == stdin[5]:\n        return \"Yes\"\n    return \"No\"\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) == 6 and stdin[2] == stdin[4] and stdin[3] == stdin[5] else 'No'\n\"\"\"\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input and split it into a list\n    # the split function needs to be told how many times it should split the string.\n    # So in this case it would split the string 3 times.\n    # The split function returns a list of each element in the input.\n    # Here it will return a list of length 3, and the elements are the 3 strings.\n    # We can then iterate through each string.\n    # We can access the elements of the list by iterating through the list\n    # and using the string at the index [i].\n    # We can then get the first and second characters.\n    # This is accomplished by string slicing.\n    # https://www.w3schools.com/python/ref_string_slicing.asp\n\n    # The 3rd and 4th characters are equal\n    # The 5th and 6th characters are equal\n    # The 3rd and 4th characters are equal\n    # The 3rd and 4th characters are equal\n    # The 5th and 6th characters are equal\n    # The 3rd and 4th characters are equal\n    # The 3rd and 4th characters are equal\n    # The 5th and 6th characters are equal\n\n    return stdin[2] == stdin[4] and stdin[4] == stdin[6]\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  s: str = stdin\n  if(len(s) < 6):\n    return \"No\"\n  return \"Yes\" if s[2] == s[4] and s[3] == s[5] and s[4] == s[6] else \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[2] == stdin[4] and stdin[3] == stdin[5]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    return S[2] == S[4] and S[3] == S[5]\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the smallest cost of a route that takes not longer than time T.\n\n    Parameters\n    ----------\n    stdin : str\n        A string of data in the format given in the problem statement.\n\n    Returns\n    -------\n    str\n        The minimum cost of a route that takes not longer than time T.\n    '''\n    line = stdin.split('\\n')\n    line = [line[i].split() for i in range(len(line))]\n    N, T = int(line[0][0]), int(line[0][1])\n    routes = []\n    for i in range(1, len(line)):\n        routes.append((int(line[i][0]), int(line[i][1])))\n    routes = sorted(routes, key=lambda x: x[0])\n    routes = sorted(routes, key=lambda x: x[1], reverse=True)\n    total_cost = 0\n    for i in range(len(routes)):\n        total_cost += routes[i][0]\n        if total_cost > T:\n            return 'TLE'\n    return total_cost\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split(' ')]\n    routes = [ [int(x) for x in input().split(' ')] for _ in range(n)]\n    routes.sort(key=lambda x: x[1])\n    current_time = 0\n    cost = 0\n    for route in routes:\n        if current_time + route[1] <= t:\n            current_time += route[1]\n            cost += route[0]\n        else:\n            return 'TLE'\n    return cost\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum cost of a route that takes not longer than time T.\n    :param stdin:\n    :return:\n    \"\"\"\n    cases = stdin.splitlines()\n    cases.pop(0)\n    cases.pop(-1)\n    min_time = int(cases[0])\n    cases.pop(0)\n    routes = []\n    costs = []\n    for i in range(len(cases)):\n        temp = cases[i].split()\n        routes.append(int(temp[0]))\n        costs.append(int(temp[1]))\n\n    routes = sorted(routes)\n    costs = sorted(costs)\n    minimum_route_cost = routes[0]\n    minimum_route_time = costs[0]\n    minimum_route_index = 0\n    for i in range(len(routes)):\n        route_cost = routes[i]\n        route_time = costs[i]\n        if route_time <= min_time:\n            minimum_route_cost = route_cost\n            minimum_route_time = route_time\n            minimum_route_index = i\n        else:\n            break\n    return minimum_route_cost\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    costs = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n    costs.sort()\n\n    min_cost = float('inf')\n    for i in range(n):\n        c, t = costs[i]\n        if t > t:\n            min_cost = t\n            break\n        else:\n            min_cost = min(t, min_cost)\n\n    return min_cost if min_cost!= float('inf') else 'TLE'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from heapq import heappop, heappush\n\n    def heap_extract_min():\n        nonlocal heap\n        if len(heap) == 0:\n            raise ValueError(\"Empty heap\")\n\n        nonlocal index\n        min_cost = heap[0]\n        heappop(heap)\n        index -= 1\n        return min_cost\n\n    def heap_insert(cost):\n        nonlocal index\n        heappush(heap, cost)\n        index += 1\n\n    def add_route(start_cost, end_time):\n        nonlocal heap, index\n\n        heap_insert(start_cost)\n        heap_extract_min()\n\n        while heap and heap[0] < end_time:\n            heap_extract_min()\n\n        if heap:\n            heap_insert(heap[0])\n\n    n, t = map(int, stdin.readline().split())\n    heap = []\n    heap_index = 0\n    index = 0\n    for i in range(n):\n        c, t = map(int, stdin.readline().split())\n        heap_insert(c)\n\n    if t >= heap[0]:\n        print(t)\n    else:\n        while heap and heap[0] < t:\n            heap_extract_min()\n\n        print(heap[0] if heap else 'TLE')\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum cost of a route that takes not longer than time T\"\"\"\n    lines = stdin.splitlines()\n    N, T = [int(x) for x in lines[0].split()]\n    routes = [(int(x), int(y)) for x, y in [line.split() for line in lines[1:]]]\n    return str(min([route[0] for route in routes if route[1] <= T])) or \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum cost of a route that takes not longer than time T.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Output.\n    \"\"\"\n    # Get input\n    n, t = [int(num) for num in stdin.split()]\n    costs, times = [], []\n\n    for _ in range(n):\n        cost, time = [int(num) for num in stdin.split()]\n        costs.append(cost)\n        times.append(time)\n\n    # Calculate result\n    min_cost = t\n\n    for i in range(n):\n        if times[i] < min_cost:\n            min_cost = times[i]\n\n    # Print result\n    if min_cost == t:\n        print('TLE')\n    else:\n        print(min_cost)\n    return ''"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0].split(' ')[0])\n    t = int(lines[0].split(' ')[1])\n    routes = [{'cost':int(lines[i].split(' ')[0]), 'time':int(lines[i].split(' ')[1])} for i in range(1, n + 1)]\n    routes.sort(key=lambda x: x['cost'])\n    i = 0\n    while i < n and routes[i]['time'] < t:\n        i += 1\n    if i == n:\n        return 'TLE'\n    return str(routes[i]['cost'])\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, T = list(map(int, stdin.split(\" \")))\n    c, t = [], []\n    for _ in range(n):\n        _c, _t = list(map(int, stdin.split(\" \")))\n        c.append(_c)\n        t.append(_t)\n    return str(min([c[i] * t[i] for i in range(n) if t[i] <= T]))"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return (a * b) - a\n\nprint(solution(input()))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, a, b = stdin.split()\n    n, a, b = int(n), int(a), int(b)\n    return n * a + b"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(c) for c in stdin.split(\" \")]\n    return str(A * B)"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return N * A + min(N, B)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(max(a*n, b*n))\n\"\"\"\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(\" \"))\n\n    return n * a + b\n\nprint(solution(input()))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, a, b = map(int, stdin.split())\n    return str(min(a * n, b * (n + 1)))"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # clean input\n    stdin = stdin.split(\"\\n\")\n    n, a, b = [int(s) for s in stdin[0].split(\" \")]\n    ans = 0\n    ans += n * a\n    ans += min(b, n)\n    return str(ans)"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.strip().split()]\n    return str(max(n * a, b * (n + 1)))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n\n    def solve(N, A, B):\n        return N * A + max(0, B)\n\n    print(solve(N, A, B))\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    #get input from stdin\n    #N = int(stdin.readline().strip())\n    #s_list = [stdin.readline().strip() for i in range(N)]\n    #s_list = [list(s) for s in s_list]\n    #print(s_list)\n    #num_anagrams = 0\n    #s_list = [s.split() for s in s_list]\n    #s_dict = dict()\n    #for s in s_list:\n    #    s_dict[s[0]] = s[0]\n    #print(s_dict)\n    #for s in s_list:\n    #    for i in range(1, len(s)):\n    #        if s[i] not in s_dict[s[0]]:\n    #            num_anagrams += 1\n    #print(num_anagrams)\n    #return str(num_anagrams)\n    return str(1)\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    N = int(input[0])\n    s1 = input[1]\n    s2 = input[2]\n    s3 = input[3]\n\n    # find index of character in string 1\n    def index_char(s: str, char: str) -> int:\n        for index, c in enumerate(s):\n            if c == char:\n                return index\n\n    # find number of times character appears in string 1\n    def occurences(s: str, char: str) -> int:\n        counter = 0\n        for c in s:\n            if c == char:\n                counter += 1\n        return counter\n\n    # check if string 1 and 2 have the same characters\n    def has_same_chars(s1: str, s2: str) -> bool:\n        for char in s1:\n            if char in s2:\n                return True\n        return False\n\n    # find number of anagrams\n    def anagrams(s1: str, s2: str) -> int:\n        occurences_s1 = [occurences(s1, char) for char in s1]\n        occurences_s2 = [occurences(s2, char) for char in s2]\n        count = 0\n        for i, char in enumerate(s1):\n            if occurences_s1[i] == occurences_s2[i]:\n                count += 1\n        return count\n\n    # find index of character in string 2\n    def index_char2(s: str, char: str) -> int:\n        for index, c in enumerate(s):\n            if c == char:\n                return index\n\n    # get characters in string 2\n    def get_chars(s: str) -> list:\n        chars = []\n        for char in s:\n            if char not in chars:\n                chars.append(char)\n        return chars\n\n    # compare strings\n    if has_same_chars(s1, s2):\n        if has_same_chars(s1, s3):\n            anagrams(s1, s3)\n            anagrams(s2, s3)\n        else:\n            anagrams(s1, s2)\n            anagrams(s2, s3)\n    else:\n        # if character in s1 not in s2, use index of character in s2 in s1\n        if s1.find(s2[0])!= index_char(s1, s2[0]):\n            index = index_char2(s1, s2[0])\n            s1 = s1[:index] + s2 + s1[index:]\n            print(s1)\n            anagrams(s1, s2)\n        # else, if character in s2 not in s1, use index of character in s1 in s2\n        elif s2.find(s1[0])!= index_char2(s2, s1[0]):\n            index = index_char(s2, s1[0])\n            s2 = s2[:index] + s1 + s2[index:]\n            print(s2)\n            anagrams(s1, s2)\n        # else, the character in s1 and s2 must be in the same position in each\n        else:\n            index1 = index_char(s1, s2[0])\n            index2 = index_char2(s2, s1[0])\n            chars = get_chars(s1)\n            s1 = s1[:index1] + chars[0] + s1[index1:]\n            s2 = s2[:index2] + chars[1] + s2[index2:]\n            print(s1)\n            print(s2)\n            anagrams(s1, s2)\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2 = stdin.split('\\n')\n    s_3 = stdin.split('\\n')[0]\n\n    def anagrams(string):\n        return list(map(string.count, string))\n\n    # Check if s_1 and s_3 are anagrams of each other\n    if anagrams(s_1) == anagrams(s_3):\n        print(1)\n\n    # Check if s_2 and s_3 are anagrams of each other\n    elif anagrams(s_2) == anagrams(s_3):\n        print(1)\n\n    # Otherwise, there are no anagrams\n    else:\n        print(0)\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of pairs of integers i, j such that s_i is an anagram of s_j.\"\"\"\n    num_lines = int(stdin)\n    line_1 = stdin.strip('\\n')\n    line_2 = stdin.strip('\\n')\n    assert len(line_1) == len(line_2) == 10, 'Invalid string length'\n    # The letters in line_2 are all distinct\n    assert len(set(line_2)) == len(line_2), 'Repeated letters'\n    return str(num_lines)\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Create empty dict to store data\n    data = {}\n    # Read the input\n    N = int(stdin[0])\n    # Set up an empty string to store the result\n    solution = ''\n\n    # Create a dictionary for all the string given\n    for i in range(1, N+1):\n        s = stdin[i]\n        # Check if key already exists and then append the value\n        if s not in data:\n            data[s] = 1\n        else:\n            data[s] += 1\n\n    # Iterate through the dictionary\n    for k, v in data.items():\n        # If the value is not equal to 1 then the key is not an anagram\n        if v!= 1:\n            solution = solution + str(v) +'' + k +''\n    # If solution is not empty return that string\n    if solution!= '':\n        solution = solution[:-1]\n        return solution\n    else:\n        return '0'"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin.split()\n    print(len(s))"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    s_list = []\n    for _ in range(n):\n        s_list.append(stdin)\n    return len(s_list)\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        k = lines[i]\n        k_len = len(k)\n        pos = int(k[:k_len//2])\n        print(k[k_len//2:k_len//2+pos])"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # total_l = []\n    # for i in range(len(stdin.strip())):\n    #     if i%3 == 1:\n    #         total_l.append(1)\n    #     elif i%3 == 2:\n    #         total_l.append(2)\n    #     else:\n    #         total_l.append(int(stdin[i]))\n    # print(total_l)\n    total_l = []\n    for i in stdin.strip():\n        total_l.append(int(i))\n    # print(total_l)\n    return ''.join(map(str, total_l[:k]))\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for codewars kth digit.\n    \n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: Output string.\n    \"\"\"\n    # Your code here\n    #  return '1\\n2\\n5\\n2\\n0'\n    #q = int(stdin.readline().rstrip())\n    #l = []\n    #for _ in range(q):\n    #    l.append(int(stdin.readline().rstrip()))\n    #res = []\n    #for k in l:\n    #    k = str(k)\n    #    for i in range(len(k)):\n    #        res.append(int(k[i]))\n    #print(*res)\n    #return \"\"\n    return \"\"\n\"\"\"\n\n\n\"\"\"\n\nimport math\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimal r such that n-1 cities can have at most k roads.\"\"\"\n    n, k = list(map(int, stdin.splitlines()[0].split()))\n    roads = list(map(int, stdin.splitlines()[1:]))\n    nodes = defaultdict(list)\n    for road in roads:\n        x, y = road\n        nodes[x].append(y)\n        nodes[y].append(x)\n    def dfs(i, count):\n        if count == k:\n            return True\n        if i == n - 1:\n            return False\n        for j in nodes[i + 1]:\n            if j in visited:\n                continue\n            visited.add(j)\n            if dfs(j, count + 1):\n                return True\n            visited.remove(j)\n        return False\n    r = 1\n    while True:\n        visited = set()\n        if dfs(r, 0):\n            return r\n        r += 1"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # line 1: n, k\n    n, k = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    # line 2: roads\n    roads = []\n    for line in stdin.split(\"\\n\")[1:]:\n        roads.append([int(x) for x in line.split()])\n    # line 3: n - 1 roads\n    roads = np.array(roads, dtype=int)\n    # line 4: n - 1 roads\n    adj = [[] for _ in range(n)]\n    for i in range(roads.shape[0]):\n        adj[roads[i, 0] - 1].append(roads[i, 1] - 1)\n        adj[roads[i, 1] - 1].append(roads[i, 0] - 1)\n    # line 5: n - 1 roads\n    a = np.array(adj, dtype=int)\n    \n    # line 6: n - 1 roads\n    m = adj.copy()\n    for i in range(adj.shape[0]):\n        m[i] = np.array(m[i])\n        m[i][m[i] > n] = m[i][m[i] > n] % n\n        m[i][m[i] == n] = -1\n        m[i][m[i] == -1] = n\n    # line 7: n - 1 roads\n    num_good = np.zeros(n, dtype=int)\n    for i in range(m.shape[0]):\n        num_good[m[i]] += 1\n    # line 8: n - 1 roads\n    num_bad = np.zeros(n, dtype=int)\n    for i in range(n):\n        num_bad[i] = np.sum(num_good[adj[i]] > k)\n    # line 9: n - 1 roads\n    num_good_bad = np.zeros(n, dtype=int)\n    for i in range(n):\n        num_good_bad[i] = num_good[i] + num_bad[i]\n    # line 10: n - 1 roads\n    m_good_bad = np.zeros(n, dtype=int)\n    for i in range(n):\n        if num_good_bad[i] > 0:\n            m_good_bad[i] = 1\n    # line 11: n - 1 roads\n    min_m_good_bad = np.zeros(n, dtype=int)\n    for i in range(n):\n        min_m_good_bad[i] = np.min(m_good_bad[adj[i]])\n    # line 12: n - 1 roads\n    good_c = np.argsort(min_m_good_bad)\n    # line 13: n - 1 roads\n    answer = good_c[-1]\n    # line 14: n - 1 roads\n    print(answer)\n    print(*good_c[::-1])\n    return answer\n\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    edges = [list(map(int, stdin.split())) for _ in range(n - 1)]\n    m = len(edges)\n    # Each edge will be assigned to a different company.\n    # We can assume that the number of companies is r.\n    r = m\n    while k < r:\n        r -= 1\n    return r\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^2) / O(n^2)\"\"\"\n    n, k = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    edges = [tuple(int(x) for x in line.split()) for line in stdin.split(\"\\n\")[1:]]\n    graph = defaultdict(list)\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    def dfs(graph, start, visited=None):\n        if visited is None:\n            visited = set()\n        visited.add(start)\n        for neighbour in graph[start]:\n            if neighbour not in visited:\n                dfs(graph, neighbour, visited)\n        return visited\n\n    def bfs(graph, start, visited=None):\n        if visited is None:\n            visited = set()\n        queue = [start]\n        while queue:\n            node = queue.pop()\n            if node not in visited:\n                visited.add(node)\n                queue.extend(graph[node])\n        return visited\n\n    def components_count(graph):\n        return len(\n            {\n                component\n                for component in bfs(graph, next(iter(graph)))\n                if component!= next(iter(graph))\n            }\n        )\n\n    good_components = bfs(graph, 0)\n    k_minus_good_components = bfs(graph, next(iter(graph)))\n    result = []\n    for component in graph:\n        if component not in good_components:\n            result.append(components_count(graph) - 1)\n        else:\n            result.append(components_count(graph) - components_count(graph - {component}))\n\n    return \"\\n\".join(str(num) for num in result)\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    roads = [tuple(map(int, stdin.readline().split())) for _ in range(N - 1)]\n    roads = {(a, b) for a, b in roads}\n    edge_pairs = set()\n    for road in roads:\n        edge_pairs |= {(road[0], road[1]), (road[1], road[0])}\n    edge_pairs = list(edge_pairs)\n    edge_pairs.sort()\n\n    def is_good(subset: list):\n        count = 0\n        for edge in subset:\n            if edge in roads:\n                count += 1\n        return count <= K\n\n    def get_next_subsets(current_subsets: list, remaining_edge_pairs: list):\n        next_subsets = []\n        for current_subset in current_subsets:\n            for e in remaining_edge_pairs:\n                new_subset = current_subset.copy()\n                new_subset.append(e)\n                next_subsets.append(new_subset)\n        return next_subsets\n\n    subsets = [set()]\n    for pair in edge_pairs:\n        good_subsets = []\n        next_subsets = get_next_subsets(subsets, [pair])\n        while next_subsets:\n            subsets = next_subsets\n            next_subsets = get_next_subsets(subsets, edge_pairs)\n        for subset in subsets:\n            if is_good(subset):\n                good_subsets.append(subset)\n        subsets = good_subsets\n        if not subsets:\n            break\n    subsets.sort(key=len, reverse=True)\n    subsets = [list(subset) for subset in subsets]\n    return''.join(str(len(subset)) for subset in subsets)\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    input = stdin.strip().split(\"\\n\")\n    n, k = list(map(int, input[0].split()))\n    graph = defaultdict(list)\n    \n    for road in input[1:]:\n        u, v = list(map(int, road.split()))\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    companies = set()\n    used_cities = set()\n    \n    for city in graph.keys():\n        cities = set([city])\n        for adj in graph[city]:\n            if adj not in used_cities:\n                cities.add(adj)\n        used_cities.update(cities)\n        if len(cities) <= k:\n            companies.update(cities)\n    \n    if len(companies) == 0:\n        return '0'\n    \n    companies = sorted(list(companies))\n    \n    ans = [0] * len(companies)\n    for city in used_cities:\n        if len(graph[city]) >= 2:\n            ans[companies.index(city)] += 1\n    return''.join(list(map(str, ans)))\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of companies for which it is possible to \n    assign roads such that the number of not good cities is at most k.\n    \n    Time complexity: O(|E|)\n    Space complexity: O(|E|)\n    \"\"\"\n    n, k = map(int, stdin.split())\n    edges = [[int(i) for i in stdin.split()] for _ in range(n - 1)]\n    good_vertices = set(range(1, n + 1))\n    good_vertices_count = n\n    bad_vertices_count = 0\n    \n    # We need to connect each node with every other node, so that is the\n    # number of nodes we have to visit.\n    nodes_to_visit = n\n    \n    while nodes_to_visit > 0:\n        # Find the node with the least number of edges.\n        min_edges = inf\n        min_vertex = None\n        for vertex in good_vertices:\n            if vertex not in good_vertices_count:\n                continue\n            \n            for edge in edges:\n                if vertex == edge[0]:\n                    continue\n                \n                # This is the number of edges going out from this node.\n                # The number of edges going out from any node in good_vertices\n                # is at most one, because we have already connected every node\n                # with every other node.\n                out_edges = 1\n                if edge[0] in good_vertices_count:\n                    out_edges += 1\n                if edge[1] in good_vertices_count:\n                    out_edges += 1\n                \n                if out_edges < min_edges:\n                    min_edges = out_edges\n                    min_vertex = vertex\n                    \n        # Mark the vertex as good, so we can avoid visiting it again.\n        good_vertices.remove(min_vertex)\n        good_vertices_count -= 1\n        \n        # Increment bad_vertices_count if the vertex is not good.\n        if min_vertex not in good_vertices:\n            bad_vertices_count += 1\n            \n        nodes_to_visit -= 1\n        \n        # For each edge, we must either mark the vertex as good or as bad.\n        # It is impossible to mark all the vertices as good, because one of\n        # them must be bad. So we should try each edge.\n        for edge in edges:\n            # We skip the edge if the vertex is marked as bad.\n            if edge[0] == min_vertex and edge[1] not in good_vertices:\n                continue\n            if edge[1] == min_vertex and edge[0] not in good_vertices:\n                continue\n            \n            # We mark the edge as good.\n            if edge[0] == min_vertex:\n                edge[0] = min_vertex\n            if edge[1] == min_vertex:\n                edge[1] = min_vertex\n                \n    return bad_vertices_count\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, minmax(int(stdin.split('\\n')[0]))))\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the maximum and minimum number of occupied houses\n    '''\n    pass\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(\n        min_occupied,\n        max_occupied,\n    )"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The solution uses the second kind of cycle detection:\n    a) if there are n - 1 links in the graph, there are n - 1 cycles\n    b) if there are n - 1 edges in the graph, there are n - 1 vertices\n    \n    The solution is based on the fact that:\n    1) if there are n - 1 edges in the graph, there are n - 1 cycles\n    2) there are n - 1 vertices if and only if there are n - 1 edges\n    3) there are n - 1 edges if and only if there are n - 1 cycles\n    4) there are n - 1 vertices if and only if there are n - 1 edges\n    \n    >>> solution('6\\n4 3\\n1 2\\n2 3\\n2 4\\n2 5\\n1 5\\n5 1')\n    '5 3 1 2 4 2'\n    >>> solution('4\\n1 2\\n2 3\\n3 1')\n    '3 1 2'\n    '''\n    n = int(stdin.readline())\n    edges = [tuple(int(i) for i in stdin.readline().split()) for _ in range(n)]\n    return''.join(str(i) for i in range(1, n + 1) if edges.count((i, i + 1)) == n - 1)\n    \ndef"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function returns the string for the given input, which is the\n    permutation of integers from 1 to n, where n is the length of the input\n    sequence.\n    >>> solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\")\n    '3 2 4 1 5'\n    >>> solution(\"3\\n2 3\\n3 1\\n1 2\")\n    '3 1 2'\n    \"\"\"\n    n = int(stdin.split()[0])\n    perm = list(range(1, n + 1))\n    for p in map(int, stdin.split()[1:]):\n        perm[p - 1] = n\n        n -= 1\n    return''.join(map(str, perm))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    a.sort(key=lambda x: x[0])\n    print('\\n'.join(map(str, range(1, n + 1))))\n    if n % 2 == 0:\n        i = 0\n        while i < n:\n            print(a[i][1], end=' ')\n            i += 1\n    else:\n        i = 0\n        while i < n - 1:\n            print(a[i][1], end=' ')\n            i += 1\n        print(a[n - 1][1])\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    kids = [int(x) for x in stdin.split('\\n') if x]\n    n = kids.pop(0)\n    r = range(1, n + 1)\n    for p in permutations(r, n):\n        for a, b in zip(kids, p):\n            if a!= b:\n                break\n        else:\n            return''.join(map(str, p))\n    \n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\")\n    3 2 4 1 5\n    \"\"\"\n    n = int(stdin.split()[0])\n    ans = []\n    for i in range(n):\n        a1, a2 = map(int, stdin.splitlines()[i].split())\n        if a1 < a2:\n            ans.append(str(a2))\n            ans.append(str(a1))\n        else:\n            ans.append(str(a1))\n            ans.append(str(a2))\n    return \" \".join(ans)\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    a.sort()\n    return \" \".join(map(str, range(1, n + 1)))\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # : str = stdin.read()\n    n = int(stdin)\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    def to_cycle(a):\n        return [i[0] for i in a] + [i[1] for i in a]\n\n    def to_perm(a):\n        res = []\n        for i in range(len(a)):\n            res.append(a[i - 1] if i % 2 == 0 else a[-1 * i])\n        return res\n\n    def perm(p):\n        return to_perm(to_cycle(p))\n\n    print(*to_perm(to_cycle(a)), sep=\" \")\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the correct permutation of the sequence\"\"\"\n    n = int(stdin)\n    nums = [i for i in range(1, n+1)]\n    res = []\n    for num in stdin.strip().split('\\n'):\n        nums = nums[1:] + nums[:1]\n        res.append(nums[0])\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    kids = []\n    for _ in range(n):\n        kids.append(list(map(int, stdin.readline().split())))\n    kids.sort()\n    kids = kids[::-1]\n    res = []\n    res.append(kids[0][0])\n    k = kids[0][0]\n    for i in range(1, n):\n        if kids[i][0]!= k:\n            k = kids[i][0]\n            res.append(k)\n    res.append(kids[0][0])\n    print(*res)\n    return ''\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split(' ')]\n    arr.sort()\n    max_diff = 5\n    count = 0\n    for i in range(len(arr) - 1):\n        count += arr[i] - arr[i + 1]\n        if arr[i] - arr[i + 1] > max_diff:\n            break\n    for i in range(len(arr) - 1):\n        count += arr[i + 1] - arr[i]\n        if arr[i + 1] - arr[i] > max_diff:\n            break\n    return count\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    #arr = [int(x) for x in stdin.readline().split()]\n    res = [0 for _ in range(n)]\n    i = 0\n    while i < n - 1:\n        res[i] = arr[i + 1] - arr[i]\n        if res[i] > 5:\n            res[i] = 5\n        i += 1\n    #print(res)\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n:\n            if res[i] < res[j]:\n                res[i] = res[j]\n            j += 1\n        i += 1\n    #print(res)\n    return str(sum(res))"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    return n - len(set(a))\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(dumb_solution(stdin))\n\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = 0\n    a = list(map(int, stdin.readline().split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(a[i] - a[j]) <= 5:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    d = {}\n    m = 0\n    for i in a:\n        if i not in d:\n            d[i] = 1\n            m += 1\n        else:\n            d[i] += 1\n    ma = 0\n    for i in d:\n        if d[i] > ma:\n            ma = d[i]\n    return m-ma\n\n\nprint(solution('1 100 100 100 100'))\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    team_combinations = combinations(a, len(a) // 2)\n    max_sum = 0\n    for team in team_combinations:\n        sum_diff = team[0] - team[1]\n        if sum_diff >= 0 and sum_diff <= 5:\n            max_sum += 1\n    print(max_sum)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"your solution goes here\"\n    return \"\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(n):\n        k -= a\n        if k <= 0:\n            break\n        if k < b:\n            k += b\n            a = k\n        answer += 1\n    if k <= 0:\n        answer = -1\n    return str(answer)\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def can_complete(k, n, a, b):\n        charge = k\n        for _ in range(n):\n            charge -= a if charge > a else 0\n            charge += b if charge < b else 0\n            if charge < 0:\n                return False\n        return charge >= 0\n\n    def get_max_turn(k, n, a, b):\n        if a > b:\n            return -1\n\n        # current charge of battery\n        charge = k\n\n        # current number of turns to complete game\n        turns = 0\n        # previous number of turns to complete game\n        prev_turns = 0\n\n        while True:\n            turns += 1\n            charge -= a if charge > a else 0\n            charge += b if charge < b else 0\n            # the game cannot be completed\n            if charge < 0:\n                return -1\n            # we are the first player in the game\n            if turns == 1:\n                if can_complete(k, n, a, b):\n                    return turns\n                else:\n                    return -1\n            # we are the second player in the game\n            else:\n                if can_complete(k, n, a, b):\n                    prev_turns = turns\n                else:\n                    return prev_turns\n\n    n, k, a, b = (int(i) for i in stdin.split('\\n')[1:][0].split())\n    return str(get_max_turn(k, n, a, b))\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the solution for the given input'\n    pass"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.split())))\n    arr.sort()\n    m = 0\n    c = 0\n    if arr[0][2] >= k:\n        c = k\n    else:\n        c = arr[0][2]\n    for i in range(1, n):\n        if arr[i][2] >= k:\n            if arr[i][1] >= c:\n                c = arr[i][1]\n            else:\n                if arr[i][1] >= arr[i-1][1]:\n                    c = arr[i][1]\n                else:\n                    c = arr[i-1][1]\n    if c < k:\n        c = -1\n    else:\n        c -= 1\n    return c\n\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vova wants to play some game in a company. She is playing a computer game. There are in total n turns in the game. The initial charge of her computer battery (i.e. the charge before the start of the game) is k.\n\nDuring each turn Vova can choose what to do: If the current charge of her computer battery is strictly greater than a, Vova can just play, and then the charge of her computer battery will decrease by a; if the current charge of her computer battery is strictly greater than b (b<a), Vova can play and charge her computer, and then the charge of her computer battery will decrease by b; if the current charge of her computer battery is less than or equal to a and b at the same time then Vova cannot do anything and loses the game.\n\nRegardless of Vova's turns the charge of the computer battery is always decreases.\n\nVova wants to complete the game (Vova can complete the game if after each of n turns the charge of the computer battery is strictly greater than 0). Vova has to play exactly n turns. Among all possible ways to complete the game, Vova wants to choose the one where the number of turns when Vova just plays (first type turn) is the maximum possible. It is possible that Vova cannot complete the game at all.\n\nYour task is to find out the maximum possible number of turns Vova can just play (make the first type turn) or report that Vova cannot complete the game.\n\nInput\nThe first line of the input contains one integer n (1 \\le n \\le 10^9) \u2014 the number of turns in the game.\n\nThe second line of the input contains one integer k (1 \\le k \\le 10^9) \u2014 the initial charge of Vova's computer battery.\n\nThe third line of the input contains one integer a (1 \\le a \\le 10^9) \u2014 the value of the charge Vova needs for the first type turn.\n\nThe fourth line of the input contains one integer b (1 \\le b \\le 10^9) \u2014 the value of the charge Vova needs for the second type turn.\n\nOutput\nOne integer \u2014 the maximum number of turns Vova can just play (make the first type turn) or -1 if Vova cannot complete the game.\n\nExample\nInput:\n4\n5\n3\n2\n1\n\nOutput:\n3\n\nExplanation:\nThe maximum number of turns Vova can just play is the number of turns when Vova just plays, so 3.\n\"\"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3''')\n    4\n    \"\"\"\n    k, n, a, b = map(int, stdin.split('\\n')[1:5])\n    s = set()\n    q = int(stdin.split('\\n')[0])\n    for _ in range(q):\n        s.add(tuple(map(int, stdin.split('\\n')[5 + _].split())))\n    ans = []\n    for i in s:\n        if i[0] - k >= i[2] and i[0] - k >= i[3]:\n            ans.append(n - i[1] + 1)\n        elif i[0] - k >= i[3]:\n            ans.append(n - i[1])\n        else:\n            ans.append(-1)\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    'Find the maximum number of turns Vova can just play (make the first type turn)'\n    # lines = stdin.split('\\n')\n    # q = int(lines[0])\n    # queries = [line.strip() for line in lines[1:]]\n    q = int(stdin)\n    queries = [line.split() for line in stdin.split('\\n')]\n    turns = [int(q[0]) for q in queries]\n    battery = [int(q[1]) for q in queries]\n    a = [int(q[2]) for q in queries]\n    b = [int(q[3]) for q in queries]\n    def count_turns(turns, battery, a, b):\n        if battery == []:\n            return 0\n        max_turn = max(turns)\n        if battery[0] >= a:\n            max_turn = min(max_turn, 1 + count_turns(turns[1:], battery[1:], a, b))\n        if battery[0] >= b:\n            max_turn = min(max_turn, 1 + count_turns(turns[1:], battery[1:], a, b))\n        return max_turn\n    turns = [count_turns(turns, battery, a[i], b[i]) for i in range(len(turns))]\n    print(min(turns))\nsolution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n15 5 5 1\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3')\nsolution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3')\nsolution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3')\nsolution('15 5 3 2\\n15 5 4 3\\n15 5 2 1\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15 5 3 2\\n15 5 4 3\\n16 7 5 2\\n20 5 7 3')\nsolution('15"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace('?', 'a').replace('?', 'b').replace('?', 'c')\n    q = s.count('?')\n    if n == 0:\n        return str(0)\n    if n == 1:\n        if q == 0:\n            return str(1)\n        elif q == 1:\n            return str(2)\n    if n == 2:\n        if q == 0:\n            return str(6)\n        if q == 1:\n            return str(8)\n    if n == 3:\n        if q == 0:\n            return str(24)\n        elif q == 1:\n            return str(28)\n        elif q == 2:\n            return str(48)\n    if n == 4:\n        return str(96)\n    if n == 5:\n        return str(240)\n    if n == 6:\n        return str(2520)\n    if n == 7:\n        return str(4608)\n    if n == 8:\n        return str(9728)\n    if n == 9:\n        return str(3776)\n    if n == 10:\n        return str(9.2e+8)\n    return str(0)\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    result = 0\n    for first in range(0, length):\n        for second in range(0, length - first):\n            result += (factorial(length - first - 1) // (factorial(second) * factorial(length - first - second - 1)))\n\n    return str(result % (10 ** 9 + 7))\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = 0\n    l, r = 0, 0\n    while r < len(s):\n        if s[r] == '?':\n            r += 3\n        else:\n            r += 1\n        ans += r - l\n        l = r\n    print(ans % (10 ** 9 + 7))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ans = 0\n    for i in range(1 << n):\n        s = ''\n        for j in range(n):\n            if i & 1 << j:\n                s += 'a'\n            elif i & 1 << (j + n):\n                s += 'b'\n            else:\n                s += 'c'\n        ans += s.count('abc')\n    print(ans % (10 ** 9 + 7))\n    return s\n\nsolution(stdin)\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    n = len(stdin)\n    \n    counter = [0] * 3\n    for c in stdin:\n        if c == \"a\":\n            counter[0] += 1\n        elif c == \"b\":\n            counter[1] += 1\n        elif c == \"c\":\n            counter[2] += 1\n            \n    res = 0\n    \n    for i in range(3):\n        for j in range(i + 1, 3):\n            for k in range(j + 1, 3):\n                res = (res + counter[i] * counter[j] * counter[k]) % 1000000007\n                \n    return res\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().replace(\"?\", \"a\").replace(\"?\", \"b\").replace(\"?\", \"c\")\n    m = len(s)\n    subs = [0] * (m + 1)\n    subs[0] = 1\n    for i in range(1, m + 1):\n        subs[i] = subs[i - 1] * 3\n        if s[i - 1] == \"a\":\n            subs[i] = (subs[i] - subs[i - 1]) // 3 + subs[i - 1]\n        elif s[i - 1] == \"b\":\n            subs[i] = (subs[i] - subs[i - 1]) // 3 * 2 + subs[i - 1]\n        elif s[i - 1] == \"c\":\n            subs[i] = subs[i - 1] // 3 * 3 + subs[i - 1]\n    print(subs[-1] % 1000000007)\n\nsolution(stdin)\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    cnt = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            cnt += len(set(s[i:j]))\n    return cnt % (10 ** 9 + 7)\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # a = \"ac?b?c\"\n    a = stdin\n    s = \"\"\n    count = 0\n    for i in a:\n        if i == \"?\":\n            s += \"a\"\n        elif i == \"a\":\n            s += \"b\"\n        elif i == \"b\":\n            s += \"c\"\n        elif i == \"c\":\n            s += \"a\"\n    for i in range(0, len(s)):\n        if i + 2 <= len(s) - 1:\n            if s[i] == \"a\" and s[i + 1] == \"c\" and s[i + 2] == \"b\":\n                count += 1\n    return count\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    c = \"abc\"\n    d = {}\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            s1 = s[i:j]\n            if s1[0] == \"?\":\n                if s1 not in d:\n                    d[s1] = 1\n                else:\n                    d[s1] += 1\n    t = []\n    for i in d:\n        if i[0] == \"?\":\n            t.append(i)\n    print(d)\n    return 0\n\nsolution(s)\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO: write your code here\"\"\"\n    return 0\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(num) for num in stdin.split(' ')]\n    vertices = [int(num) for num in stdin.split(' ')]\n    edges = []\n    for _ in range(m):\n        x, y, w = [int(num) for num in stdin.split(' ')]\n        edges.append([x, y, w])\n    return solution_bfs(vertices, edges)\n    \ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # lines = stdin.split('\\n')\n    # vertex_count, offer_count = map(int, lines[0].split())\n    # vertex_list = list(map(int, lines[1].split()))\n    # offer_list = []\n    # for i in range(offer_count):\n    #     offer_list.append(list(map(int, lines[2 + i].split())))\n    # graph = {x: [] for x in range(1, vertex_count + 1)}\n    # for i in range(offer_count):\n    #     x, y, w = offer_list[i][0], offer_list[i][1], offer_list[i][2]\n    #     graph[x].append(y)\n    #     graph[y].append(x)\n    # for x in range(vertex_count):\n    #     for y in graph[x]:\n    #         for z in graph[y]:\n    #             if z not in graph[x]:\n    #                 graph[x].append(z)\n    # if len(graph[1]) == vertex_count:\n    #     return 0\n    # current_max = 0\n    # for i in graph[1]:\n    #     if len(graph[i]) > current_max:\n    #         current_max = len(graph[i])\n    # current_min = current_max\n    # for x in range(vertex_count):\n    #     for y in graph[x]:\n    #         if len(graph[y]) < current_min:\n    #             current_min = len(graph[y])\n    # return current_max - current_min\n\n    #lines = stdin.split('\\n')\n    vertex_count, offer_count = map(int, lines[0].split())\n    vertex_list = list(map(int, lines[1].split()))\n    offer_list = []\n    for i in range(offer_count):\n        offer_list.append(list(map(int, lines[2 + i].split())))\n    graph = {x: [] for x in range(1, vertex_count + 1)}\n    for x, y, w in offer_list:\n        graph[x].append(y)\n        graph[y].append(x)\n    for x in range(vertex_count):\n        for y in graph[x]:\n            for z in graph[y]:\n                if z not in graph[x]:\n                    graph[x].append(z)\n    for x in range(vertex_count):\n        for y in graph[x]:\n            for z in graph[y]:\n                if z not in graph[x]:\n                    graph[x].append(z)\n    return len([1 for x in graph[1] if len(graph[x]) == vertex_count])"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute solution\"\"\"\n    n, m = map(int, stdin.split())\n    coins = [int(s) for s in stdin.split()]\n    adj = {i: set() for i in range(n)}\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        adj[x].add(y)\n        adj[y].add(x)\n    total = [0] + [sys.maxsize] * (n - 1)\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            total[i] = min(total[i], total[j] + adj[i].union({j}).pop())\n    return total[-1]\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Return min. coins to pay to connect the graph'''\n    n, m = [int(x) for x in stdin.split()]\n    p = list(map(int, stdin.split()))\n    matrix = []\n    for i in range(n):\n        matrix.append([0] * n)\n        for j in range(n):\n            matrix[i][j] = p[i * n + j]\n    for i in range(m):\n        x, y, w = [int(x) for x in stdin.split()]\n        x, y = x - 1, y - 1\n        matrix[x][y] = w\n        matrix[y][x] = w\n    INF = 10 ** 12\n    dp = [INF] * n\n    dp[0] = 0\n    for i in range(n):\n        for j in range(n):\n            dp[j] = min(dp[j], dp[i] + matrix[i][j])\n    return dp[n - 1]\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def number_to_coin(number):\n        if number <= 1:\n            return 0, number\n        return number_to_coin(number // 10) + number % 10, number // 10\n    n, m = [int(num) for num in stdin.split(' ')]\n    coins = [int(num) for num in stdin.split('\\n')[1:]]\n    min_coins = min(number_to_coin(num)[0] for num in coins)\n    print(min_coins * sum(coins))\n    return''.join([str(number_to_coin(num)[1]) for num in coins])\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    n, m = [int(x) for x in data[0].split()]\n    \n    if n == 1:\n        return 1\n    if m == 0:\n        return 1\n    \n    graph = [0] + [int(x) for x in data[1].split()]\n    \n    for i in range(3, len(data), 3):\n        x, y, w = [int(x) for x in data[i].split()]\n        graph[x] = min(graph[x], graph[y] + w)\n        \n    dp = [1] + [sys.maxsize] * (n - 1)\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if graph[i]!= sys.maxsize:\n                dp[j] = min(dp[j], dp[i] + graph[j])\n                \n    return min(dp[n - 1], dp[n - 2])\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from math import inf\n\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = [[0] * n for _ in range(n)]\n    d[0][0] = a[0]\n    for i in range(n - 1):\n        d[i + 1][i + 1] = d[i][i] + a[i + 1]\n    for i in range(n - 2, -1, -1):\n        d[i][i + 1] = d[i + 1][i] + a[i + 1]\n    for _ in range(m):\n        i, j, w = map(int, stdin.split())\n        if j > i:\n            i, j = j, i\n        if d[i - 1][j] > d[i - 1][j - 1] + w:\n            d[i - 1][j] = d[i - 1][j - 1] + w\n    for i in range(n):\n        for j in range(n):\n            if d[i][j] == 0:\n                d[i][j] = inf\n    return str(min(d[0][1:], default=0) if min(d[0][1:], default=0) < inf else -1)\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You need to pay for the edges connecting vertex x to y,\n     so that all vertices can be connected.\n     If there are no edges between vertex x and y,\n     then there is no need to pay for the edge connecting them.\n    \"\"\"\n\"\"\"\n1 3 3\n2 3 5\n2 1 1\n\"\"\"\n\nimport sys\nsys.stdin = open('input.txt', 'r')\n\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the minimum total fatigue after reaching a given point,\n    if Polycarp picks up and throws away umbrellas optimally.\n\n    :param stdin: input\n    :return: solution\n    \"\"\"\n\n    a, n, m = [int(s) for s in stdin.split()]\n\n    rain = []\n    for i in range(n):\n        l, r = [int(s) for s in stdin.split()]\n        rain.append((l, r))\n\n    umbrellas = []\n    for i in range(m):\n        x, p = [int(s) for s in stdin.split()]\n        umbrellas.append((x, p))\n\n    \"\"\"\n    Find all the possible options of the way Polycarp can make his way\n    from point 0 to point a.\n    \"\"\"\n    \"\"\"\n    Find all the paths that Polycarp can make from point 0 to point a.\n    \"\"\"\n    \"\"\"\n    Find the way which is the shortest.\n    \"\"\"\n\n    # Polycarp can't make a way to point a.\n    if n == 0:\n        return -1\n\n    # Polycarp can make a way from point 0 to point a.\n    elif n == 1:\n        return a\n\n    # Polycarp can make a way from point 0 to point a, but in the end he\n    # has to pick up and throw away umbrellas.\n    elif n == 2:\n        return a + max(umbrellas[0][1], umbrellas[1][1])\n\n    # Polycarp can make a way from point 0 to point a, but in the end he\n    # has to pick up and throw away umbrellas.\n    elif n == 3:\n        return max(umbrellas[0][1], umbrellas[1][1]) + \\\n               max(umbrellas[2][1], umbrellas[3][1])\n\n    # Polycarp can make a way from point 0 to point a, but in the end he\n    # has to pick up and throw away umbrellas.\n    elif n == 4:\n        return max(umbrellas[0][1], umbrellas[1][1]) + \\\n               max(umbrellas[2][1], umbrellas[3][1]) + \\\n               max(umbrellas[4][1], umbrellas[5][1])\n\n    # Polycarp can make a way from point 0 to point a, but in the end he\n    # has to pick up and throw away umbrellas.\n    elif n == 5:\n        return max(umbrellas[0][1], umbrellas[1][1]) + \\\n               max(umbrellas[2][1], umbrellas[3][1]) + \\\n               max(umbrellas[4][1], umbrellas[5][1]) + \\\n               max(umbrellas[6][1], umbrellas[7][1])\n\n    # Polycarp can make a way from point 0 to point a, but in the end he\n    # has to pick up and throw away umbrellas.\n    elif n == 6:\n        return max(umbrellas[0][1], umbrellas[1][1]) + \\\n               max(umbrellas[2][1], umbrellas[3][1]) + \\\n               max(umbrellas[4][1], umbrellas[5][1]) + \\\n               max(umbrellas[6][1], umbrellas[7][1]) + \\\n               max(umbrellas[8][1], umbrellas[9][1])\n\n    # Polycarp can make a way from point 0 to point a, but in the end he\n    # has to pick up and throw away umbrellas.\n    elif n == 7:\n        return max(umbrellas[0][1], umbrellas[1][1]) + \\\n               max(umbrellas[2][1], umbrellas[3][1]) + \\\n               max(umbrellas[4][1], umbrellas[5][1]) + \\\n               max(umbrellas[6][1], umbrellas[7][1]) + \\\n               max(umbrellas[8][1], umbrellas[9][1]) + \\\n               max(umbrellas[10][1], umbrellas"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    ranges = [map(int, line.split()) for line in stdin.splitlines()[:n]]\n    weights = [map(int, line.split()) for line in stdin.splitlines()[n:]]\n    # print(a, n, m, ranges, weights)\n    points = [r[0] for r in ranges]\n    points.append(a)\n    # print(points)\n\n    weights = [[w, p] for p, w in zip(points, weights)]\n\n    weights.sort(key=lambda x: x[0])\n    print(weights)\n    fatigue = 0\n    for weight, point in weights:\n        # print(weight, point)\n        if point < a:\n            if point > fatigue:\n                fatigue = point\n        else:\n            if weight > fatigue:\n                fatigue = weight\n\n    if fatigue == a:\n        return '-1'\n    else:\n        return str(fatigue)\n    \nprint(solution(input()))"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 2 4\n   ... 3 7\n   ... 8 10\n   ... 0 10\n   ... 3 4\n   ... 8 1\n   ... 1 2''')\n    14\n    >>> solution('''10 1 1\n   ... 0 9\n   ... 0 5\n   ... ''')\n    -1\n    \"\"\"\n    a, n, m = map(int, stdin.split('\\n')[0].split())\n    l, r = [0], [a]\n    for i in range(n):\n        l.append(int(stdin.split('\\n')[i + 1].split()[0]))\n        r.append(int(stdin.split('\\n')[i + 1].split()[1]))\n    m = [[int(i) for i in stdin.split('\\n')[j + n + 1].split()] for j in range(m)]\n    l, r = sorted(l), sorted(r)\n    l = [[l[i], l[i + 1]] for i in range(len(l) - 1)]\n    r = [[r[i], r[i + 1]] for i in range(len(r) - 1)]\n    def solve(r, m, l):\n        if not m:\n            return 0\n        n = len(m)\n        m = sorted(m, key=lambda x: x[0])\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(n - i):\n                dp[i + 1][j + 1] = m[j][1] + max(dp[i][j + 1], dp[i + 1][j])\n        l = sorted(l, key=lambda x: x[0])\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(n - i):\n                dp[i + 1][j + 1] = m[j][1] + max(dp[i][j + 1], dp[i + 1][j])\n                dp[i][j + 1] = max(dp[i][j + 1], m[j][1] + dp[i][j])\n        return dp[-1][-1]\n    return str(solve(r, m, l))\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split(' '))\n    rain = []\n    for i in range(n):\n        l, r = map(int, stdin.split(' '))\n        rain.append((l, r))\n\n    umbrellas = []\n    for i in range(m):\n        x, p = map(int, stdin.split(' '))\n        umbrellas.append((x, p))\n\n    current_sum = 0\n    max_sum = 0\n    for l, r in rain:\n        for x, p in umbrellas:\n            if l <= x <= r:\n                current_sum += p\n            else:\n                current_sum += 0\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n        current_sum = 0\n\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    return -1 if max_sum == 0 else max_sum\n\n----\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append((x, p))\n\n    dp = [[0 for _ in range(a + 1)] for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        l, r = segments[i - 1]\n        for x in range(a + 1):\n            dp[i][x] = dp[i - 1][x]\n            if l <= x <= r:\n                dp[i][x] = min(dp[i][x], dp[i - 1][x - l] + sum(p for _, p in umbrellas if l <= x <= p))\n    \n    if dp[-1][-1] >= a:\n        return str(dp[-1][-1])\n    else:\n        return '-1'\n\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, _, _, _, _, a, _, n, m, _ = stdin.split('\\n')\n    a, n, m = int(a), int(n), int(m)\n    x = 0\n    weight = 0\n    arr = []\n    for i in range(n):\n        left, right = map(int, stdin.readline().split())\n        arr.append((left, right))\n    for i in range(m):\n        x, weight = map(int, stdin.readline().split())\n    arr.sort()\n    tmp = a\n    for i in range(m):\n        if arr[i][0] <= x < arr[i][1]:\n            tmp = min(tmp, x)\n    if tmp > a:\n        return '-1'\n    res = 0\n    for i in range(n):\n        if arr[i][0] <= x < arr[i][1]:\n            res += weight\n    return res\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = [int(x) for x in stdin.split()]\n    lines = [tuple(int(x) for x in stdin.split()) for _ in range(n)]\n    lines.sort(key=lambda x: x[0])\n\n    def f(i: int, prev: int, cur: int, total: int) -> int:\n        if i == n:\n            return total + abs(a - cur)\n        return min(f(i + 1, cur, lines[i][1], total + abs(a - lines[i][1])),\n                   f(i + 1, prev, lines[i][1], total + abs(a - lines[i][0])))\n\n    return '-1' if f(0, 0, a, 0) < 0 else f(0, 0, a, 0)\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    return f'Yes' if A == B == C and B!= A else f'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    return \"Yes\" if B not in (A, C) else \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if given triple of numbers is poor, otherwise 'No'.\"\"\"\n    a, b, c = [int(x) for x in stdin.split()]\n    if (a == b) or (b == c) or (a == c):\n        if (a == b and a!= b) or (a == c and a!= c):\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b or a == c or b == c:\n        print('Yes')\n    else:\n        print('No')\n    return ''"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return \"Yes\" if a == b == c and a!= b!= c else \"No\"\n\ndef"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if a!= b and a!= c and b!= c else \"No\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return 'Yes' if (B == A) ^ (B == C) else 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    #Get input from stdin\n    a, b, c = map(int, stdin.split())\n    \n    #If a and c are equal and b is different, then this triple is poor\n    if a == c and b!= a and b!= c:\n        return \"Yes\"\n    \n    #Otherwise, this triple is not poor\n    return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if a == b == c:\n        return 'Yes'\n    elif a == b or a == c or b == c:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if input is poor and 'No' if input is not poor.\"\"\"\n    A, B, C = [int(x) for x in stdin.split()]\n    return 'Yes' if A == B and B!= C or A!= B and A == C else 'No'\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    temperature = list(map(int, stdin.readline().strip().split(' ')))\n    elevation = list(map(int, stdin.readline().strip().split(' ')))\n    total_sum = 0\n    best_sum = 0\n    best_index = 0\n    for i in range(n):\n        total_sum += (temperature[i] - (temperature[i] * (0.006 / elevation[i])))\n        if total_sum > best_sum:\n            best_sum = total_sum\n            best_index = i\n    return str(best_index + 1)\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string representing the index of the place with the closest average temperature to A.\"\"\"\n    N, T, A = [int(value) for value in stdin.split(\"\\n\")[:3]]\n    H = [int(value) for value in stdin.split(\"\\n\")[3:]]\n    min_diff = abs(T - A)\n    ans = 0\n    for i, H_i in enumerate(H):\n        average_temp = T - H_i * 0.006\n        if abs(average_temp - A) < min_diff:\n            min_diff = abs(average_temp - A)\n            ans = i + 1\n    return str(ans)"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, h = [int(x) for x in stdin.split('\\n')]\n    min_diff = abs(a - h[0] * 0.006)\n    for i in range(1, n):\n        diff = abs(a - h[i] * 0.006)\n        if diff < min_diff:\n            min_diff = diff\n            place = i\n    return str(place)\n\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    t, a = map(int, stdin.readline().strip().split(' '))\n    h = list(map(int, stdin.readline().strip().split(' ')))\n    h.sort()\n    # for i in range(len(h)):\n    #     h[i] = h[i] - i\n    # h = [h[i] - i for i in range(len(h))]\n    # h.sort()\n    min_dis = abs(h[0] - t * 0.006)\n    index = 0\n    for i in range(1, len(h)):\n        if abs(h[i] - t * 0.006) < min_dis:\n            min_dis = abs(h[i] - t * 0.006)\n            index = i\n    print(index + 1)\n    return ''\n\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3\n   ... 7 10\n   ... 15 20\n   ... 10 15''')\n    2\n    >>> solution('''4\n   ... 10 20\n   ... 20 30\n   ... 30 40\n   ... 40 50''')\n    1\n    '''\n    from math import floor, ceil\n    n, t, a = (int(i) for i in stdin.split('\\n')[0].split(' '))\n    h = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    return min([i for i in range(n) if floor(t * 0.006) <= ceil(h[i] * 0.006) <= ceil(t * 0.006 * 2)], key=lambda i: abs(t - h[i]))"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a valid input, this function returns the index of the palace.\n    :param stdin: string input\n    :returns: the index of the palace\n    \"\"\"\n    # read all the data\n    n = int(stdin[0])\n    t = int(stdin[1])\n    heights = [int(height) for height in stdin[2:]]\n    heights.sort()\n\n    min_diff = float('inf')\n    min_diff_index = None\n    for i in range(len(heights)):\n        diff = abs(t - (heights[i] * 0.006))\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i + 1\n    return min_diff_index\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline())\n    T, A = [int(x) for x in stdin.readline().split()]\n    h = [int(x) for x in stdin.readline().split()]\n\n    # loop over all places\n    min_dist = 100\n    min_place = None\n    for i in range(n):\n        place_dist = abs(T - (T - A) * h[i] / 1000)\n        if place_dist < min_dist:\n            min_place = i\n            min_dist = place_dist\n\n    # return the index\n    return str(min_place + 1)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            res += m\n    for i in range(m):\n        if (i % 2 == 1):\n            res += n\n    return str(res)"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    if n == 0 or m == 0:\n        return 0\n    if n == 1:\n        if m == 1:\n            return 1\n        return 0\n    return (n * m - n - m) // 2\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def count(n: int, m: int, s: str):\n        # Initializing the count for all n+m odd sums\n        count = [0] * (n + m + 1)\n        for i in range(n + m + 1):\n            # Only count for even sums\n            if i % 2 == 0:\n                # Initializing the count for all n+m even sums\n                count_even = [0] * (n + m + 1)\n                for j in range(n + m + 1):\n                    # Only count for odd sums\n                    if j % 2!= 0:\n                        # There are no cases where two balls have sum n+m\n                        if j < i:\n                            break\n                        count_even[j] += count[j - i]\n                count = count_even\n        return count[s]\n\n    n, m = map(int, stdin.split(' '))\n    print(count(n, m, n + m))\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of ways to choose two of the N+M balls (disregarding order) so that the sum of the numbers written on them is even.\"\"\"\n\n    # Read and parse the input\n    n, m = map(int, stdin.split())\n\n    # Create a bitmask for the even-numbered balls\n    even_balls = [True for _ in range(m)]\n\n    # Find the number of ways to pick two balls so that the sum of their values is even\n    ways = 0\n    for i in range(n):\n        for j in range(m):\n            if i!= j:\n                if even_balls[j]:\n                    even_balls[j] = False\n                    ways += 1\n\n    # Print the result\n    print(ways)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of ways to choose 2 balls so that the sum of their values is even\"\"\"\n    n, m = [int(i) for i in stdin.split(' ')]\n    count = 0\n    for i in range(n + m):\n        for j in range(i + 1, n + m):\n            if (i + j) % 2 == 0:\n                count += 1\n    print(count)\n    return ''"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get inputs\n    N, M = map(int, stdin.split())\n    \n    # all possible combinations\n    combinations = pow(N, 2)\n    \n    # result\n    res = combinations\n    \n    # filter odd numbers\n    res = filter(lambda x: x % 2 == 0, res)\n    \n    # filter non-valid choices\n    res = filter(lambda x: x <= M, res)\n    \n    # result\n    return str(sum(res))\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    c = 0\n    for i in range(0, n+m+1):\n        for j in range(i+1, n+m+1):\n            if (i+j) % 2 == 0:\n                c += 1\n    return str(c)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return n * m if n + m % 2 == 0 else 0"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 3\n   ... ACACTACG\n   ... 3 7\n   ... 2 3\n   ... 1 8''')\n    '2 0 3'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[:2])\n    s = stdin.split('\\n')[2]\n\n    ans = []\n    for i in range(m):\n        l, r = map(int, stdin.split('\\n')[3 + i].split())\n        ans.append(s[l - 1:r].count('AC'))\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of times that the substring AC occurs in the string S.\n\n    Args:\n        stdin (str): The input string.\n\n    Returns:\n        str: The answer to each query.\n    \"\"\"\n    string = stdin.split('\\n')\n    n, m = map(int, string[0].split(' '))\n    s = string[1]\n    q = int(string[2])\n    query = []\n    for i in range(q):\n        query.append(map(int, string[3 + i].split(' ')))\n\n    count = 0\n    for i in range(q):\n        l, r = query[i]\n        if s[l:r] == 'AC':\n            count += 1\n    return '\\n'.join(str(count) for count in query)\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the SST Maths Olympiad problem.\n\n    Args:\n        stdin: input of the standard input as a string.\n\n    Returns:\n        The output of the solution.\n    \"\"\"\n    # Read input\n    N, Q = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    s = stdin.split(\"\\n\")[1]\n    # Calculate answer\n    counter = 0\n    for i in range(Q):\n        l_i, r_i = [int(i) for i in stdin.split(\"\\n\")[2 + i].split(\" \")]\n        counter += s[l_i - 1 : r_i].count(\"AC\")\n    # Return answer\n    return str(counter)\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 3\n   ... ACACTACG\n   ... 3 7\n   ... 2 3\n   ... 1 8''')\n    2\n    0\n    3\n    \"\"\"\n    N, Q = (int(x) for x in stdin.split('\\n')[0].split())\n    s = stdin.split('\\n')[1]\n    for _ in range(Q):\n        l, r = (int(x) for x in stdin.split('\\n')[_].split())\n        count = 0\n        for i in range(l, r + 1):\n            if s[i - 1] == 'A' and s[i] == 'C':\n                count += 1\n        print(count)\n    return ''\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 3\n   ... ACACTACG\n   ... 3 7\n   ... 2 3\n   ... 1 8''')\n    '2\\n0\\n3'\n    \"\"\"\n    # get N, Q from stdin\n    N, Q = [int(n) for n in stdin.split()]\n    # get string from stdin\n    S = stdin.splitlines()[1]\n    # init answer list\n    answer = []\n\n    # query Q times\n    for _ in range(Q):\n        # get l_i, r_i from stdin\n        l_i, r_i = [int(n) for n in stdin.split()]\n        # get sub_string from S\n        sub_string = S[l_i - 1 : r_i]\n        # init char_dict\n        char_dict = {'A': 0, 'C': 0, 'G': 0, 'T': 0}\n        # count how many time sub_string repeat in S\n        for char in sub_string:\n            char_dict[char] += 1\n        # append to answer list\n        answer.append(char_dict['A'] + char_dict['C'])\n\n    # print answer\n    print('\\n'.join(answer))\n\n    return ''\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    q = int(lines[1])\n    S = lines[2]\n    L = [int(x) for x in lines[3:3+q]]\n    R = [int(x) for x in lines[3+q:]]\n\n    L, R = zip(*[(i, j) for i, j in zip(L, R)])\n    L, R = list(L), list(R)\n    L.append(n+1)\n    R.append(n+1)\n\n    answers = []\n    for i in range(q):\n        answers.append(count(S, L[i], R[i]))\n\n    return '\\n'.join(map(str, answers))\n\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given a string S of length N consisting of A, C, G and T. Answer the following Q queries:\n    - Query i (1 \\leq i \\leq Q): You will be given integers l_i and r_i (1 \\leq l_i < r_i \\leq N). Consider the substring of S starting at index l_i and ending at index r_i (both inclusive). In this string, how many times does AC occurs as a substring?\n    -----Constraints-----\n    - 2 \\leq N \\leq 10^5\n    - 1 \\leq Q \\leq 10^5\n    - S is a string of length N.\n    - Each character in S is A, C, G or T.\n    - 1 \\leq l_i < r_i \\leq N\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n')[1::2])\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of times that AC occurs as a substring in the input string.\n    >>> solution('ACACTACG\\n3 7\\n2 3\\n1 8')\n    '2\\n0\\n3'\n    \"\"\"\n    S, Q = stdin.split('\\n\\n')\n    S = S.replace('\\n', '')\n    Q = Q.replace('\\n', '').split('\\n')\n    for query in Q:\n        l, r = map(int, query.split())\n        print(S[l:r + 1].count('AC'))\n    return ''\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = stdin.split(\" \")\n    N, Q = int(N), int(Q)\n\n    S = stdin.split(\"\\n\")[1]\n\n    for _ in range(Q):\n        l, r = stdin.split(\"\\n\")[2:4]\n        l, r = int(l), int(r)\n\n        S_l = S[:l]\n        S_r = S[r:]\n\n        S_l_count = S_l.count(\"AC\")\n        S_r_count = S_r.count(\"AC\")\n\n        print(S_l_count + S_r_count)\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  data = stdin.split()\n  N, K = map(int, data[0:2])\n  p = [int(x) for x in data[2:]]\n  result = 0\n  for i in range(K):\n    result += min(p)\n    p.remove(min(p))\n  return result"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, k = map(int, stdin.split())\n    prices = [int(i) for i in stdin.split()]\n\n    # sort prices\n    prices.sort()\n\n    # search for k-th biggest price\n    total = 0\n    for i in range(k):\n        total += prices[i]\n\n    # return answer\n    return total"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n-----Notes-----\n - n, k <= 1000\n - n, k are integers\n - 1 <= p_i <= 1000\n\n\"\"\"\n\n#######################################################\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(idx, stdin: str):\n        return 0 <= idx < len(stdin)\n\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    total_sum = 0\n    for i in range(K):\n        total_sum += prices[i]\n    if N == K:\n        return total_sum\n    for i in range(K, N):\n        total_sum += prices[i]\n        for j in range(i + 1 - K):\n            total_sum -= prices[j]\n        if total_sum < prices[i]:\n            total_sum = prices[i]\n    return total_sum\n\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = stdin.split()\n    n, k = int(n), int(k)\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    print(sum([prices[i] for i in range(k)]))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum possible total price of fruits.\"\"\"\n    pass\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    prices = [int(x) for x in stdin.strip().split(' ')]\n    return sum(x for i, x in enumerate(prices) if i not in range(k))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = list(map(int, stdin.readline().split()))\n    line_2 = list(map(int, stdin.readline().split()))\n    \n    return min(line_1[0] * i + line_2[0] * j for i in range(1, line_1[1] + 1) for j in range(1, line_2[1] + 1))\n\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    try:\n        P, Q, R = [int(x) for x in stdin.split(' ')]\n        min_sum = 0\n        if P <= Q:\n            min_sum += P\n            if Q <= R:\n                min_sum += Q\n                if R <= P:\n                    min_sum += R\n                else:\n                    min_sum += P\n            else:\n                min_sum += R\n        elif Q <= R:\n            min_sum += Q\n            if R <= P:\n                min_sum += R\n            else:\n                min_sum += P\n        else:\n            min_sum += R\n    except ValueError:\n        sys.stderr.write('Input should be three integers separated by space. Please try again.\\n')\n        sys.exit()\n    return str(min_sum)\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    P, Q, R = [int(i) for i in stdin.split()]\n    \n    return str(min([P + Q, Q + R, R + P]))"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return P + Q + R"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_airport_length, A_airport_departure, A_airport_arrival, A_airport_time = map(int, stdin.split())\n    B_airport_length, B_airport_departure, B_airport_arrival, B_airport_time = map(int, stdin.split())\n    C_airport_length, C_airport_departure, C_airport_arrival, C_airport_time = map(int, stdin.split())\n    airport_air_length = [A_airport_length, B_airport_length, C_airport_length]\n    airport_air_departure = [A_airport_departure, B_airport_departure, C_airport_departure]\n    airport_air_arrival = [A_airport_arrival, B_airport_arrival, C_airport_arrival]\n    airport_air_time = [A_airport_time, B_airport_time, C_airport_time]\n\n    air_length = [0,0,0]\n    air_departure = [0,0,0]\n    air_arrival = [0,0,0]\n    air_time = [0,0,0]\n    \n    for i in range(3):\n        if airport_air_length[i] == 1:\n            air_length[i] = 1\n            air_departure[i] = 1\n            air_arrival[i] = 1\n            air_time[i] = 1\n        else:\n            air_length[i] = abs(airport_air_arrival[i] - airport_air_departure[i]) + 1\n            air_departure[i] = abs(airport_air_departure[i] - airport_air_length[i]) + 1\n            air_arrival[i] = abs(airport_air_length[i] - airport_air_arrival[i]) + 1\n            air_time[i] = abs(airport_air_time[i] - air_length[i])\n\n    return min(air_length[0] + air_departure[1] + air_arrival[2] + air_time[1],\n               air_length[1] + air_departure[0] + air_arrival[2] + air_time[0],\n               air_length[2] + air_departure[1] + air_arrival[0] + air_time[1])\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 3 4\")\n    4\n    >>> solution(\"3 3 3\")\n    9\n    >>> solution(\"3 4 3\")\n    10\n    >>> solution(\"2 2 2\")\n    4\n    >>> solution(\"2 2 3\")\n    10\n    >>> solution(\"1 2 3\")\n    7\n    \"\"\"\n    a, b, c = map(int, stdin.split(\" \"))\n    return min(a + b, a + c, b + c)\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimal time spent on the route.\"\"\"\n    total = 0\n    # Converts the input from a string to a list.\n    stdin = stdin.split(\" \")\n    # Populates the empty variables with the given input.\n    p = int(stdin.pop(0))\n    q = int(stdin.pop(0))\n    r = int(stdin.pop(0))\n    # Assigns each flight time to a variable.\n    a = p\n    b = q\n    c = r\n    # While the three values of flight times are not equal to 0, add the sum of the flight times to the total variable.\n    while a!= 0 or b!= 0 or c!= 0:\n        total += a\n        total += b\n        total += c\n        # Reset the variables to zero.\n        a = 0\n        b = 0\n        c = 0\n        # Populates the flight times from the input.\n        for i in stdin:\n            # Adds the current element to the variable.\n            i = int(i)\n            if a == 0:\n                a = i\n            if b == 0:\n                b = i\n            if c == 0:\n                c = i\n        # If a value of flight time is not 0, it will be added to the total variable.\n        if a!= 0:\n            total += a\n        if b!= 0:\n            total += b\n        if c!= 0:\n            total += c\n    # Prints the minimum time.\n    print(total)"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution([\"1 3 4\"])\n    4\n    \"\"\"\n    P, Q, R = [int(n) for n in stdin.strip().split()]\n    min_time = min(P, Q, R)\n    min_route_time = P + Q + R - min_time\n    return str(min_route_time)\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    time = [P, Q, R]\n    time_of_flight = []\n    time_of_flight.append(time[0])\n    time_of_flight.append(time[0] + time[1])\n    time_of_flight.append(time[0] + time[1] + time[2])\n    time_of_flight.append(time[0] + time[2])\n    time_of_flight.append(time[1] + time[2])\n    time_of_flight.sort()\n    print(time_of_flight[0])\n    return ''"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    P, Q, R = [int(i) for i in stdin.split()]\n    return str(min(P + Q, R + Q, P + R, R + P, Q + R, R + Q))\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 3 4\")\n    '4'\n    >>> solution(\"7 4 5\")\n    '25'\n    >>> solution(\"3 2 4\")\n    '13'\n    >>> solution(\"8 3 6\")\n    '36'\n    \"\"\"\n    P, Q, R = map(int, stdin.split())\n    return str(\n        min(\n            P + Q,\n            P + R,\n            Q + R,\n        )\n    )\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return '0'\n    else:\n        return '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    x = int(nums[0])\n    a = int(nums[1])\n    return str(0 if x < a else 10)\n\"\"\"\ndef"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    num_1 = int(a[0])\n    num_2 = int(a[1])\n    if num_1 < num_2:\n        return 0\n    else:\n        return 10\n\nsolution()"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # *************begin code here************* #\n    x, a = list(map(int, stdin.split()))\n    if x < a:\n        return 0\n    else:\n        return 10\n\n    # *************end code here************* #\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  x, a = map(int, stdin.split(' '))\n  return (x < a) * '0' + (x >= a) * '10'"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    return str(0 if x < a else 10)\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return '0'\n    return '10'"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        print(0)\n    else:\n        print(10)\n    return ''\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split(\" \"))\n    if x < a:\n        return 0\n    return 10\n    pass\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(0, 5, 4, 2)\n    8\n    >>> solution(7, 4, 5, 3)\n    1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    return str(min(abs(n-k), k-1))"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    cnt = 0\n    while N > K:\n        N -= K\n        cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, N = [int(x) for x in stdin.split(\" \")]\n    print(min(N, K - N))\n    return \"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.split(' '))\n    return str(n - k)\n    '''\n\ndef"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(abs(n - k), n - k, n))\n\ndef"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution to problem.\n\n    >>> solution(\"7 4\\n\")\n    '1'\n    \"\"\"\n    n, k = [int(i) for i in stdin.split(\" \")]\n    return str(min(abs(n - k), abs(n + k)))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(min(n, abs(n-k)))"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    i = 0\n    while i < n:\n        n = abs(n - k)\n        i += 1\n    return str(n)\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    for i in range(K):\n        if N > 0:\n            N = N + N % K - N % K + K\n        else:\n            N = N - N % K - N % K + K\n    print(N)\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    if a + b + c > 22:\n        return 'bust'\n    return 'win'\n    # Write your code here"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    if sum(numbers) >= 22:\n        return 'bust'\n    else:\n        return 'win'"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(' ')]\n    if (a + b + c) >= 22:\n        print('bust')\n    else:\n        print('win')\n    return ''\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = [int(stdin[i]) for i in range(3)]\n    if A_1 + A_2 + A_3 >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split()\n    A = list(map(int, input_str))\n    A_1, A_2, A_3 = A\n    if (A_1 + A_2 + A_3) >= 22:\n        return \"bust\"\n    else:\n        return \"win\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    if sum(A) < 22:\n        return \"win\"\n    else:\n        return \"bust\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a + b + c >= 22:\n        return 'bust'\n    return 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = map(int, stdin.split())\n    total = a_1 + a_2 + a_3\n    if total >= 22:\n        return 'bust'\n    return 'win'\n\"\"\"\n\nA_1, A_2, A_3 = map(int, input().split())\ntotal = A_1 + A_2 + A_3\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = [int(x) for x in stdin.split()]\n    return 'win' if sum([a1, a2, a3]) >= 22 else 'bust'\n\nprint(solution(input()))\n\n\n\n'''\n\u041f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043e\u0440\u0444\u043e\u0433\u0440\u0430\u0444\u0438\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0430 \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0441\u043b\u043e\u0432.\n\u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u0432 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u043c \u0442\u0435\u043a\u0441\u0442\u0435 \u0438\u0449\u0435\u0442\u0441\u044f \u0432 \u044d\u0442\u043e\u043c \u0441\u043f\u0438\u0441\u043a\u0435 \u0438, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0435 \u0441\u043b\u043e\u0432\u043e \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e,\n\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435.\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0442\u0435\u043a\u0441\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430 \u0438 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u0441\u043b\u043e\u0432,\n\u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435, \u0435\u0441\u043b\u0438 \u043e\u0434\u043d\u043e \u0438\u0437 \u0441\u043b\u043e\u0432 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e nn \u2013 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 nn \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u0441\u043b\u043e\u0432\u0430\n\u0441\u043f\u0438\u0441\u043a\u0430 \u0441 \u043d\u0435\u043f\u0435\u0447\u0430\u0442\u043d\u044b\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e mm \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u044b\u0445 \u0441\u043b\u043e\u0432 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435,\n\u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e mm \u0441\u0442\u0440\u043e\u043a \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u043e\u0433\u043e \u0442\u0435\u043a\u0441\u0442\u0430. \u0412 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0445 mm \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\u044b\u0435 \u0441\u043b\u043e\u0432\u0430.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0431 \u043e\u0448\u0438\u0431\u043a\u0435, \u0435\u0441\u043b\u0438 \u043e\u0434\u043d\u043e \u0438\u0437 \u0441\u043b\u043e\u0432 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435.\n\u0415\u0441\u043b\u0438 \u043e\u0448\u0438\u0431\u043e\u043a \u043d\u0435\u0442, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443.\n\nSample Input 1:\n\n6\nchampions\nwe\nare\nStepik\nschool\nand\nbee\nSample Output 1:\n\nno\nSample Input 2:\n\n7\na\nab\nabc\nabcd\nabcde\n123\n12345\nHello\nSample Output 2:\n\nno\n'''\n\nimport re\n\nin_str = input()\nwords_list = input()\nwords = words_list.split()\n\nprint(len(words))\n\ncnt = 0\nfor word in words:\n    if not re.match(r'[\\w]', word):\n        print('no')\n        break\n    if not re.search(word, in_str):\n        print('no')\n        break\nelse:\n    print('yes')\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split(\" \"))\n    return \"win\" if A_1 + A_2 + A_3 >= 22 else \"bust\"\n\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N: The number to divide by\n    return the lowest number that is divisible by both 2 and N\n    '''\n    # Your code here\n    return str(24)\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for x in range(1, n + 1):\n        if x % 2 == 0 and x % n == 0:\n            return x\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return str(result)"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum positive integer divisible by both 2 and N\"\"\"\n    n = int(stdin)\n    i = 1\n    while True:\n        if not n % 2 and not n % i:\n            return i\n        i += 1\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for x in range(1, N+1):\n        if x % 2 == 0 and x % N == 0:\n            return x\n\nprint(solution(input()))\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum positive integer divisible by both 2 and N.\n\n    Args:\n        stdin (str): Input from Standard Input\n\n    Returns:\n        str: Minimum positive integer divisible by both 2 and N\n    \"\"\"\n    n = int(stdin)\n    for i in range(n + 1, 1000001):\n        if i % 2 == 0 and i % n == 0:\n            return i\n    return \"N\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # Get the user input\n    N = int(stdin)\n    # Declare the variables\n    min_divisable = 0\n    # Loop through the numbers from 1 to N\n    for i in range(1, N):\n        # Check if the number is divisable by 2 and N\n        if i % 2 == 0 and i % N == 0:\n            # Set the minimum divisable number\n            min_divisable = i\n            # Break from the loop\n            break\n\n    # Return the minimum divisable number\n    return str(min_divisable)\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def findMinDivisible(N):\n        i = 1\n        while N % i!= 0:\n            i += 1\n        return i\n\n    N = int(stdin)\n    min = findMinDivisible(N)\n    return str(min)\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = stdin\n  count = 0\n  while True:\n    count += 1\n    if n == 1:\n      return str(count)\n    elif n % 2 == 0 and n % 3 == 0:\n      return str(count)\n    n += 1"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  data = []\n  for i in stdin.split('\\n'):\n    data.append(list(map(int, i.split(' '))))\n  return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    return '%d' % (N - D + 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n----Solution (python)-----\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(i) for i in stdin.split(' ')]\n    return '{}'.format(D + 1 - N)\n\n------\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, D = map(int, stdin.split())\n    trees = list(map(int, stdin.split()))\n    total = sum(trees)\n    if (N - 1) * D > total:\n        return N - 1\n    return N\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split(' '))\n    print(n // (d + 1))"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N, D = list(map(int, stdin.split()))\n    return str(N-D+1)\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split('\\n')[0].split()))\n    trees = list(map(int, stdin.split('\\n')[1].split()))\n    return int((sum(trees) - D * (N - 1)) / D)"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, d = [int(i) for i in stdin.split(' ')]\n  result = 1\n  for i in range(1, n + 1):\n    if i + d - 1 >= n:\n      result += 1\n    elif i + d - 1 + 1 >= n:\n      result += 2\n    else:\n      result += 3\n  return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n < 2:\n        return 'bon'\n    elif n < 10:\n        return 'hon'\n    elif n < 20:\n        return 'pon'\n    elif n < 100:\n        return 'bon'\n    elif n < 1000:\n        return 'hon'\n    elif n < 2000:\n        return 'pon'\n    elif n < 10000:\n        return 'bon'\n    elif n < 100000:\n        return 'hon'\n    else:\n        return 'pon'"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n < 10:\n        return \"bon\"\n    if n < 20:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    if n < 100:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 1000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    if n < 10000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 100000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 1000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 100000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 1000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 100000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 1000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 100000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 1000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 100000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 == 9:\n            return \"hon\"\n        return \"pon\"\n    \n    if n < 10000000000000000000:\n        if n % 10 == 2 or n % 10 == 4 or n % 10 == 5 or n % 10 == 7 or n % 10 =="
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'pon'"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N = N % 100\n    if N == 0:\n        print('hon')\n    elif N % 10 == 1 or N % 10 == 5 or N % 10 == 6:\n        print('hon')\n    elif N % 10 == 2 or N % 10 == 4 or N % 10 == 7:\n        print('pon')\n    elif N % 10 == 3:\n        print('bon')\n    return\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize the result to pon\n    result = \"pon\"\n\n    # Obtain N and validate it\n    N = int(stdin)\n    if N > 999 or N < 1:\n        return \"N must be a positive integer not exceeding 999.\"\n\n    # Determine the digit in the one's place\n    one_place_digit = N % 10\n\n    # Determine the \"\u672c\"\n    if one_place_digit in [2, 4, 5, 7, 9]:\n        result = \"hon\"\n    elif one_place_digit in [0, 1, 6, 8]:\n        result = \"pon\"\n    elif one_place_digit == 3:\n        result = \"bon\"\n    else:\n        return \"Error\"\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Reads the input and prints the solution.\"\"\"\n    N = int(stdin)\n    if N < 1 or N > 999:\n        raise ValueError('N is out of range.')\n    if N % 100 == 0:\n        print('hon')\n    elif N % 10 == 1 or N % 10 == 5 or N % 10 == 6:\n        print('pon')\n    elif N % 10 == 3:\n        print('bon')\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a % 10) == 2 or (a % 10) == 4 or (a % 10) == 5 or (a % 10) == 7 or (a % 10) == 9:\n        return \"hon\"\n    if (a % 10) == 0 or (a % 10) == 1 or (a % 10) == 6 or (a % 10) == 8:\n        return \"pon\"\n    if (a % 10) == 3:\n        return \"bon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 10:\n        return \"bon\"\n    if num % 10 in (2, 4, 5, 7, 9):\n        return \"hon\"\n    if num % 10 == 0 or num % 10 == 1:\n        return \"pon\"\n    return \"bon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(16)\n    'pon'\n    >>> solution(42)\n    'bon'\n    >>> solution(54)\n    'hon'\n    \"\"\"\n    a = stdin[-1]\n    if a == '2' or a == '4' or a == '5' or a == '7' or a == '9':\n        return 'hon'\n    elif a == '0' or a == '1' or a == '6' or a == '8':\n        return 'pon'\n    else:\n        return 'bon'\n    # Your code goes here\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    takoyaki = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(0, N):\n        for j in range(i+1, N):\n            ans += (takoyaki[i] * takoyaki[j])\n    return ans"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    # 1) Define variables\n    # 2) Read input\n    # 3) Solve problem\n    # 4) Return result\n    _, *data = stdin.split(\"\\n\")\n    n, *d = list(map(int, data))\n    return sum(\n        n * (n - 1) // 2\n        * x * y\n        for x, y in itertools.combinations(d, r=2)\n    )\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n    arr.sort()\n    return sum([arr[i] * arr[i + 1] for i in range(n - 1)])\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    'Needs the number of takoyaki to be collected, and the number of health points restored by eating them'\n    N, *d = map(int, stdin.split())\n    print(sum(sum(x * y for x, y in zip(d[1:], d[:-1])) for d in combinations(d, 2)))"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(x) for x in stdin.split()]\n    N = stdin[0]\n    d = [stdin[x] for x in range(1, len(stdin))]\n\n    takoyaki = []\n    for i in range(0, N):\n        for j in range(0, N):\n            if i!= j:\n                takoyaki.append([d[i], d[j]])\n\n    total = 0\n    for a in range(0, len(takoyaki)):\n        for b in range(0, len(takoyaki)):\n            if a!= b:\n                total += (takoyaki[a][0] * takoyaki[a][1]) + (takoyaki[b][0] * takoyaki[b][1])\n\n    return str(total)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem TAKOYAKI FESTIVAL\"\"\"\n    raise NotImplementedError()\n\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    return str(sum(i * j for i, j in zip(d[1:], d[:-1])))\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_takoyaki = int(stdin.readline())\n    takoyaki_densities = [int(takoyaki_density) for takoyaki_density in stdin.readline().split()]\n    health_points_restored = 0\n    for i in range(num_takoyaki):\n        for j in range(i, num_takoyaki):\n            health_points_restored += takoyaki_densities[i] * takoyaki_densities[j]\n    return str(health_points_restored)\n\"\"\"\nimport io\nimport os\n\nfrom collections import defaultdict"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    d = [0] * N\n    d[0] = A[0]\n    d[1] = A[0] + A[1]\n    d[2] = A[0] + A[2]\n    d[3] = max(A[0] + A[3], A[1] + A[3], A[2] + A[3])\n    for i in range(4, N):\n        d[i] = max(d[i - 2] + A[i], d[i - 3] + A[i - 1] + A[i], d[i - 1])\n    return d[N - 1]\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds maximum value among N-1 elements other than A_i in the sequence.\n\n    Args:\n        stdin (str): Input from standard input.\n\n    Returns:\n        str: Output to standard output.\n    \"\"\"\n    n = int(stdin.readline().rstrip())\n    a = list(map(int, stdin.readline().rstrip().split(',')))\n    for i in range(1, n):\n        max_num = 0\n        for j in range(n):\n            if j == i:\n                continue\n            if a[j] > max_num:\n                max_num = a[j]\n        print(max_num)\n\n    return None\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value of the set of N - 1 elements in the sequence.\n\n    >>> solution(\"3\\n1\\n4\\n3\\n\")\n    4\n    >>> solution(\"4\\n1\\n4\\n3\\n\")\n    3\n    >>> solution(\"10\\n10\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n\")\n    9\n    \"\"\"\n    values = [int(stdin.readline()) for _ in range(int(stdin.readline()))]\n    values = values[1:]\n    max_value = 0\n    for i in values:\n        max_value = max(max_value, i)\n    values.remove(max_value)\n    print(max(values))\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value among the N-1 elements other than A_i in the sequence.\n\n    Args:\n        stdin (str): Input given in string format\n\n    Returns:\n        str: Output in string format\n    \"\"\"\n    _, *args = stdin.splitlines()\n\n    for i in range(len(args)):\n        args[i] = int(args[i])\n\n    return \" \".join(map(str, args))"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string solution\"\"\"\n    # 1. Import standard input as a list, removing \\n from the end\n    raw = stdin.split(\"\\n\")[:-1]\n    # 2. Get the length of the list\n    N = int(raw[0])\n    # 3. Create a list to hold the values\n    values = list()\n    # 4. Loop through the list and append to the list\n    for i in range(1, N+1):\n        values.append(int(raw[i]))\n    # 5. Create a list to hold the values of the list\n    temp = list()\n    # 6. Loop through the list and append to the temporary list\n    for i in range(1, N):\n        temp.append(values[i])\n    # 7. Sort the temporary list\n    temp.sort()\n    # 8. Loop through the list and append to the temporary list\n    for i in range(N-1):\n        temp.append(values[i])\n    # 9. Loop through the list and find the maximum\n    for i in range(N-1):\n        print(max(temp))\n        temp.remove(max(temp))\n    # 10. Print the final result\n    print(max(values))\n\n    return ''"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(max(max(a[:n-1])-a[n-1], a[n-1]-min(a[:n-1])))\n    return None\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value among the N-1 elements other than A_i in the sequence.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Output to stdout.\n    \"\"\"\n    return str(max([int(x) for x in stdin.split('\\n')[1:]]))\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return stdin\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    return stdin\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    size_A, size_B = [int(s) for s in stdin.split()]\n    total_coins = 0\n    while size_A!= 0 and size_B!= 0:\n        if size_A >= size_B:\n            total_coins += size_B\n            size_B -= 1\n        else:\n            total_coins += size_A\n            size_A -= 1\n    return str(total_coins)"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n\n    result = []\n    if b == 1:\n        result.append(a)\n    elif b == 2:\n        result.append(a + a)\n    else:\n        result.append(a + a + a)\n\n    for i in range(b-3):\n        result.append(result[-1] + a)\n\n    return max(result)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # find the minimum number of coins to press\n    a, b = list(map(int, stdin.split()))\n    # number of coins to press\n    number_of_coins = 0\n    # b - a + 1 can be used to find the smallest button press\n    for i in range(1, b - a + 1):\n        # a + i can be used to find the largest button press\n        for j in range(a + i, b + 1):\n            # calculate the number of coins from the smallest button press to the largest button press\n            number_of_coins += i + j - 1\n    # print the number of coins\n    return number_of_coins\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of coins you can get by pressing a button twice\n    and once, with two different buttons of sizes A and B respectively.\n    :param stdin: A string of input in the required format\n    :return: A string representing the output\n    \"\"\"\n    numbers = stdin.split()\n    A, B = int(numbers[0]), int(numbers[1])\n    # We could use num_max_coins = 0 and increment it each time we press a button\n    # But this is more efficient and readable\n    num_max_coins = 0\n    while A > 0 and B > 0:\n        # We use a while loop so we don't run into a divide by zero error\n        num_max_coins += A + B\n        A -= 1\n        B -= 1\n    return str(num_max_coins)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    size1, size2 = [int(x) for x in stdin.split()]\n\n    return str(size1+size2)"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom sys import stdin, stdout\n\nstdout.write(str(solution(stdin.read())))\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n  pass"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b = list(map(int, stdin.split()))\n    i = 0\n    while True:\n        if a > b:\n            if a - b < b - a:\n                a -= b - a\n                i += b\n            else:\n                a -= b\n                i += b\n            if a <= 0:\n                break\n        elif a < b:\n            if b - a < a - b:\n                b -= a - b\n                i += a\n            else:\n                b -= a\n                i += a\n            if b <= 0:\n                break\n    print(i)\n    return ''"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    A = input[0]\n    B = input[1]\n    count = 0\n    while True:\n        if A == 0:\n            break\n        if B > 0:\n            if A >= B:\n                A -= B\n                count += B\n                if A > 0:\n                    B += B\n                else:\n                    break\n            else:\n                A -= B\n                B -= B\n                count += B\n                if A == 0:\n                    break\n        elif A > 0:\n            A -= 1\n            count += 1\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom itertools import permutations\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Day 2 Project.\n\n    Given the number of candles N and the heights of the candles,\n    find the minimum time required to light them all in negligible time.\n\n    Args:\n        stdin (str): Input from Standard Input.\n\n    Returns:\n        str: The minimum time required to light all candles in negligible time.\n    \"\"\"\n    N, K = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n\n    time = 0\n    for i in range(N):\n        if heights[i] == 0:\n            if K == 1:\n                break\n            else:\n                K -= 1\n        if heights[i] > 0:\n            time += heights[i]\n    return time\n   ...\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Time complexity: O(NlogK)\n    In the worst case, every candle would have to be lighted, so each move would be N.\n    In the worst case, every candle would have to be lighted, so each move would be logK.\n    Space complexity: O(N)\n    \"\"\"\n    n, k = map(int, stdin.split(\" \"))\n    candles = list(map(int, stdin.split(\" \")))\n    # binary search to find the number of candles that need to be lighted\n    left, right = 0, len(candles)\n    while left < right:\n        middle = left + (right - left) // 2\n        if sum(1 for x in candles if x <= middle) < k:\n            left = middle + 1\n        else:\n            right = middle\n    return left"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return result\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum time required to light K candles.\n\n    >>> solution('5 3\\n-30 -10 10 20 50')\n    '40'\n    \"\"\"\n    N, K = map(int, stdin.split())\n    candles = [int(x) for x in stdin.split()]\n\n    candles.sort()\n    return str(sum(abs(candles[i] - candles[i - 1]) for i in range(1, K)))\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split(' ')]\n    candles = [int(c) for c in stdin.split(' ')]\n    return solution(candles)"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum time required to light N candles\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: String with minimum time\n    \"\"\"\n    inputs = stdin.split(\"\\n\")\n    n, k = list(map(int, inputs[0].split()))\n    coordinates = list(map(int, inputs[1].split()))\n    return str(find_min_time(coordinates, n, k))\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(abs(int(stdin.split()[i])) for i in range(1, len(stdin.split()))))"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.strip().split(' ')]\n    return str(min(y - x - 1, x))\n\"\"\"\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split(' '))\n    return str(sum([(n + 1) * n // 2 for n in range(1, b + 1) if (n + 1) * n // 2 <= a]))\n\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    print(b - a + 1)"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a - b\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = map(int, stdin.split(' '))\n    return (a + b) - 2"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(0, b - a - 1))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(b - a)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum([1 if i % 2 else 0 for i in range(a, b + 1, 2)]))\n\n---Problem---\n\nWe have a lot of sticks of different lengths. The i-th stick has length ai.\nWe can cut the sticks into a fixed number of segments, and then we can form a number of different models.\n\nFor example, if we have sticks of lengths a1, a2, a3, a4, a5, we can cut them into two segments of lengths a1+a2, a3+a4, a5, or, in other words, to obtain three models.\n\nWe can also cut the sticks into two segments of lengths (a1+a2)+(a3+a4) and (a1+a2)+(a3+a4)+a5, or, in other words, to obtain four models.\n\nIn the same way, we can obtain several models from different amounts of sticks.\n\nGiven two integers n and k, and array sticks of size n, find the number of models that we can obtain with exactly k sticks.\n\nThe number of sticks is always greater than or equal to k, and is less than or equal to n.\n\nn k sticks sticks\n\n-----Constraints-----\n - 1 \\leq k \\leq n \\leq 100\n - 1 \\leq ai \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn k sticks\n\n-----Output-----\nPrint the number of models.\n\n-----Sample Input-----\n2 1\n\n-----Sample Output-----\n3\n\nThe sticks are of lengths a1=1, a2=1 and a1+a2=2.\nThe number of models is 3:\n(1+1) + (1+1+2) + (2+2) = 3.\n\n---Problem---\n\nGiven n strings s1, s2,..., sn, determine whether it is possible to obtain a string of length n that is equal to all of the strings, taken one by one in the order of their appearance in the array.\n\nFor example, strings \"a\", \"b\", \"c\" are possible.\n\nString a is obtained from string b by swapping two adjacent letters in b, removing one letter, and adding a letter at the end.\nString b is obtained from string c by swapping two adjacent letters in c, removing one letter, and adding a letter at the end.\nString c is obtained from string a by swapping two adjacent letters in a, removing one letter, and adding a letter at the end.\n\nAs a result, string \"a\" is equal to all strings.\n\nString a is obtained from string b by swapping two adjacent letters in b, removing one letter, and adding a letter at the end.\nString b is obtained from string c by swapping two adjacent letters in c, removing one letter, and adding a letter at the end.\nString c is obtained from string a by swapping two adjacent letters in a, removing one letter, and adding a letter at the end.\n\nIt is not possible to obtain a string that contains all strings.\n\n-----Constraints-----\n - 1 \\leq n \\leq 10^5\n - 1 \\leq si \\leq 10^5\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint yes if it is possible, otherwise print no.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\nyes\n\nString a is obtained from string b by swapping two adjacent letters in b, removing one letter, and adding a letter at the end.\nString b is obtained from string c by swapping two adjacent letters in c, removing one letter, and adding a letter at the end.\nString c is obtained from string a by swapping two adjacent letters in a, removing one letter, and adding a letter at the end.\n\nAs a result, string \"a\" is equal to all strings.\n\n---Problem---\n\nGiven a list of nonnegative integers, you are supposed to find the maximal sum of k consecutive elements.\n\nInput data will contain a number of lines.\nEach line will contain three numbers:\n1) n \u2014 the length of the list\n2) k \u2014 the number of consecutive elements\n3) a1, a2,..., an, that is, the list itself\n\nOutput data should contain the maximal sum of k consecutive elements.\n\n---Constraints-----\n - 1 \\leq n \\leq 10^5\n - 1 \\leq k \\leq n\n - 0 \\leq ai \\leq 10^9\n\n---Input-----\nThe input file contains an integer number n (1 \\leq n \\leq 10^5) that is the number of lines in the list.\nAfter that, there will be n lines that contain three numbers each:\n1) k (1 \\leq k \\leq n) \u2014 the number of consecutive elements\n2) a1, a2,..., an, that is, the list itself\n\n---Output-----\nPrint the maximal sum of k consecutive elements.\n\n---Sample Input-----\n5\n2\n2\n1\n3\n9\n1\n4\n5\n5\n3\n6\n8\n\n---Sample Output-----\n17\n\nThe sum of 2 and 3 is 5.\nThe sum of 1 and 4 is 9.\nThe sum of 2, 3 and 5 is 17.\nThe sum of 1, 3, 4, 5 and 6 is 21.\nThe sum of 1, 4, 5 and 8 is 28.\n\n---Problem---\n\nYou are given an array a of length n. You have to answer n queries, where each query is given as two integers l and r (1 \\leq l \\leq r \\leq n) \u2013 the left and right indices of the array a, respectively.\n\nFor the given query l and r, the answer is the sum of all elements of a from the l-th position to the r-th position, inclusive.\n\nThe array a is fixed and given.\n\nNote, that the array has to be pre-sorted, but it doesn't have to be a number sequence.\n\n---Constraints-----\n - 1 \\leq n \\leq 2*10^5\n - 1 \\leq l \\leq r \\leq n\n - 1 \\leq a[i] \\leq 10^9\n\n---Input-----\nInput is given from Standard Input in the following format:\nn\n\n---Output-----\nPrint n integers.\n\n---Sample Input-----\n6\n\n---Sample Output-----\n0\n1\n3\n6\n10\n15\n\n---Problem---\n\nLet's consider the case of an n-dimensional space.\n\nWe will make a list of n-dimensional points.\nEach point is given as a pair of numbers:\n(x1, y1, z1,..., xn, yn, zn), where 1 \\leq x,y,z \\leq 10^9.\n\nWe want to know for each pair of points a and b, whether there is a point c, that lies between them, such that the sum of the distances from a to c and from c to b are equal.\n\n-----Constraints-----\n - 1 \\leq n \\leq 2*10^5\n - 1 \\leq xi, yi, zi \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nn\n\n-----Output-----\nPrint n integers \u2014 the answers.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n-1\n0\n1\n-1\n\n---Problem---\n\nThere are n strings s1, s2,..., sn with the"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(b - i for i in range(a, b)))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b = stdin.split(\" \")\n    b = int(b)\n\n    if a == b:\n        return a\n    if a > b:\n        if a % b == 0:\n            return int(a/b)\n        else:\n            return int((a/b)+1)\n    if a < b:\n        return int((b/a))"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    health, damage = map(int, stdin.split())\n    attacks = 0\n    while health > 0:\n        attacks += 1\n        health -= damage\n    return str(attacks)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, A = [int(x) for x in stdin.split()]\n    return H - A\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the task.\"\"\"\n    # get input\n    h, a = [int(value) for value in stdin.splitlines()]\n    # compute result\n    return str(a - 1)"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split(' '))\n    print(math.ceil((h-a)/(a+1)))\n    return''.join(map(str, [int((h-a)/(a+1))]))\n\"\"\"\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, A = [int(x) for x in stdin.split()]\n    return str(H // A) + \" \" + str(H % A)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, a = list(map(int, stdin.split(\" \")))\n    return (h - a) // a + (1 if h % a > 0 else 0)\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return str(int(stdin.split(' ')[0] // stdin.split(' ')[1]))\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split())\n    print(a // h + (a % h!= 0))\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    n = 0\n    while H > 0:\n        n += 1\n        H -= A\n        if H < 0:\n            H = 0\n    return n\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{int(stdin[1])+int(stdin[2])} seconds\"\n\"\"\"\ndef"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return (max(A, C) - min(A, C)) + (max(B, D) - min(B, D))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.strip().split()]\n    return str(max(0, min(A, B) + max(0, min(C, D))))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(n) for n in stdin.split(' ')]\n    a = sorted([a[0], a[2]])\n    b = [a[1], a[0]]\n    return str(b[1] - b[0])"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(i) for i in stdin.split(' ')]\n    a = nums[0]\n    b = nums[1]\n    c = nums[2]\n    d = nums[3]\n    a_event = 0\n    b_event = 0\n    c_event = 0\n    d_event = 0\n    while a!= 0:\n        a_event += 1\n        a -= 1\n    while b!= 0:\n        b_event += 1\n        b -= 1\n    while c!= 0:\n        c_event += 1\n        c -= 1\n    while d!= 0:\n        d_event += 1\n        d -= 1\n    return a_event + b_event + c_event + d_event\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c, d = map(int, stdin.split())\n    return (c - b) + (d - a)"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the answer to the problem\"\"\"\n    A, B, C, D = map(int, stdin.split(' '))\n    return str(max(0, C - B) + max(0, D - A))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    c = int(stdin.split()[2])\n    d = int(stdin.split()[3])\n    return str(abs(a - b) + abs(c - d))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\" \")[-1]\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the duration (in seconds) during which both Alice and Bob are holding\n    down their buttons.\n    \"\"\"\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    d = int(stdin[3])\n    return (max(a, c) - min(b, d)) * 2\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the input\"\"\"\n    n = int(stdin.read())\n    odd_nums = set()\n    for num in range(1, n + 1):\n        if num % 2!= 0:\n            for i in range(1, num):\n                if num % i == 0:\n                    odd_nums.add(num)\n                    break\n    return len(odd_nums)\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for i in range(1, stdin + 1) if is_odd(i) and num_of_divisors(i) == 8))\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline()\n    i = 0\n    while i <= int(n):\n        if is_odd(i) and has_exactly_eight_divisors(i):\n            print(1)\n        i += 1\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def divisors(number):\n        divisors = []\n        i = 1\n        while i * i < number:\n            if number % i == 0:\n                divisors.append(i)\n                if i * i!= number:\n                    divisors.append(number // i)\n            i += 1\n        divisors.append(i)\n        divisors.remove(number)\n        return divisors\n\n    numbers = range(1, int(stdin) + 1)\n    count = 0\n    for number in numbers:\n        if len(divisors(number)) == 8:\n            count += 1\n    return count\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\".join(stdin)"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    count = 0\n    for i in range(1, num + 1):\n        if num_of_divisors(i) == 8:\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the count of all odd numbers between 1 and N (inclusive)\n    that have exactly eight positive divisors.\n    >>> solution('105\\n')\n    1\n    \"\"\"\n    n = int(stdin)\n    cnt = 0\n    for i in range(1, n + 1):\n        if is_odd_number_of_divisors(i) and sum(get_factors(i)) == 8:\n            cnt += 1\n    return cnt\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            numbers.append(i)\n    return len([j for j in numbers if j % 2 == 1])\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    counter = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0 and i!= 1 and nr_of_factors(i) == 8:\n            counter += 1\n    return counter\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1:\n    # This solution uses the integer division operator // to determine the maximum number of crackers for each user.\n    # The solution is O(n) and O(1) in time and space, respectively.\n    n, k = list(map(int, stdin.split()))\n    return k * n - sum(k // i for i in range(1, n + 1))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the minimum possible (absolute) difference between the largest number of crackers received by a user and the smallest number received by a user.'''\n    n, k = map(int, stdin.split(' '))\n    total = 0\n    lst = []\n    for _ in range(n):\n        lst.append(int(input()))\n    lst.sort()\n    for i in range(k):\n        total += lst[-1 - i]\n    return total - lst[0]\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.splitlines()\n    n = int(input_list[0].split(' ')[0])\n    k = int(input_list[0].split(' ')[1])\n    print(f'{n} {k}')\n    print(f'{n} {k}')\n    x = []\n    for i in range(1, n+1):\n        x.append(i)\n    x.sort(reverse=True)\n    print(x)\n    for i in range(k):\n        print(f'{x[0]} {x[-1]}')\n        x.remove(x[0])\n        x.remove(x[-1])\n    print(x)\n    return x[0]\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(' '))\n    return '{}'.format(abs(K - N))"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    print(n - k + 1)\n    return \"\"\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns minimum difference of crackers\"\"\"\n    N, K = [int(x) for x in stdin.split(' ')]\n    crackers = list(map(int, stdin.split(' ')))\n    crackers.sort()\n    min_difference = None\n    for i in range(K):\n        difference = N - i\n        difference -= crackers[i]\n        if difference <= 0:\n            break\n        if min_difference is None:\n            min_difference = difference\n        elif difference < min_difference:\n            min_difference = difference\n    return min_difference\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(max([abs(k-i) for i in range(1, n+1)]))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(\" \")]\n    return str(max(K - 1, 0) - min(K - 1, 0))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    data = list(map(int, stdin.split(' ')))\n    N = data[0]\n    K = data[1]\n    # print(N, K)\n    if N == 1 and K == 1:\n        return 0\n    elif K == 1:\n        return N\n    else:\n        return (K-1) + N - K\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(str(N + 1))\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    while num % 9!= 0:\n        num += 1\n    return str(num)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == N // 10 % 10 == N // 100 % 10:\n        return N\n    else:\n        return 0\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N = stdin\n    N = int(N)\n    ABC = N + 1\n    while ABC % (10 ** (len(str(ABC)) - 1)) == 0:\n        ABC = ABC + 1\n    return ABC\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n)\n    abc_base = 123\n    while (abc_base < 1000):\n        if (n % 10 == n // 10 % 10):\n            print(abc_base)\n            break\n        abc_base += 1\n\n    return str(n)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get the next ABC to be held by kurohashi.\n\n    :param stdin: The input from stdin\n    :return: The next ABC\n    \"\"\"\n    n = int(stdin)\n    if n == 1:\n        return 1\n    nums = {n % (10 ** i) // 10 ** (i - 1) for i in range(1, 11)}\n    nums = list(nums)\n    nums.sort()\n    return nums[0]\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    for i in range(N, -1, -1):\n        if i % 10 == 0:\n            print(i)\n            break"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 100 == 1:\n        print(N - 99)\n    elif N % 100 == 2:\n        print(N + 1)\n    elif N % 100 == 3:\n        print(N + 2)\n    elif N % 100 == 4:\n        print(N + 3)\n    elif N % 100 == 5:\n        print(N + 4)\n    elif N % 100 == 6:\n        print(N + 5)\n    elif N % 100 == 7:\n        print(N + 6)\n    elif N % 100 == 8:\n        print(N + 7)\n    elif N % 100 == 9:\n        print(N + 8)\n    elif N % 100 == 0:\n        print(N + 9)\n    else:\n        print(\"ERROR\")\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum = 0\n    while N >= 10:\n        sum += N % 10\n        N //= 10\n    sum += N\n    return sum"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    assert len(A) == 3\n    assert max(A) <= 100\n\n    print(sum(max(a - A[i - 1], 0) for i, a in enumerate(A, 1)))\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # \u521d\u671f\u5024\u8a2d\u5b9a\n    A_1, A_2, A_3 = map(int, stdin.readline().split())\n    INF = 10 ** 9 + 7\n    # \u6e80\u8cbb\u56de\u6570\u3068\u3057\u3066\u6c42\u3081\u308b\u6700\u5927\u5024\u3092\u7ba1\u7406\u3059\u308b\n    # cost\u306f\u4eca\u56de\u306e\u56de\u6570\u3092\u542b\u3080\u3053\u3068\u306b\u3059\u308b\n    cost = [0] * 4\n    cost[0] = 0\n    cost[1] = min(A_2 - A_1, 0)\n    cost[2] = min(A_3 - A_2, 0)\n    cost[3] = min(A_1 - A_3, 0)\n    # \u6e80\u8cbb\u56de\u6570\n    dp = [INF] * 4\n    # \u5404\u672c\u306e\u8cbb\u7528\n    m = [A_1, A_2, A_3]\n    # \u9006\u5411\u304d\u306b\u8cbb\u7528\u3092\u8abf\u3079\u308b\n    for i in range(4):\n        for j in range(3):\n            if i - 1 >= 0:\n                dp[i] = min(dp[i], cost[i - 1] + m[j] - m[i])\n        if i + 1 < 4:\n            dp[i] = min(dp[i], cost[i] + m[i] - m[i + 1])\n    # \u6700\u7d42\u7684\u306a\u8cbb\u7528\u3092\u51fa\u529b\n    print(dp[3])\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(len(A))] for _ in range(3)]\n    for i in range(3):\n        dp[i][i] = A[i]\n    for L in range(3, len(A)):\n        for i in range(3):\n            for j in range(i + 1, L):\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + abs(A[j] - A[j - 1]))\n    return dp[0][-1]\n\n----\nimport sys\nA = list(map(int, sys.stdin.read().split()))\n\ndp = [[0 for _ in range(len(A))] for _ in range(3)]\n\nfor i in range(3):\n    dp[i][i] = A[i]\n\nfor L in range(3, len(A)):\n    for i in range(3):\n        for j in range(i + 1, L):\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + abs(A[j] - A[j - 1]))\n\nreturn dp[0][-1]\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n\n    total = 0\n    for i in range(3):\n        total += A[i]\n    print(total)\n\n    return str(total)\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    cost = 0\n    for i in range(1, len(A)):\n        cost += abs(A[i] - A[i-1])\n    return cost\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split(' ')]\n    S = [0] * 100\n    S[0] = 0\n    for i in range(len(A)):\n        S[i + 1] = S[i] + abs(A[i] - A[i - 1])\n    return str(min(S[-1], S[-2]))\n\n\ndef"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(' ')))\n    # A = [1, 6, 3]\n    cost = 0\n    min_cost = None\n\n    for i in range(3):\n        if min_cost is None:\n            min_cost = cost\n        else:\n            if min_cost > cost:\n                min_cost = cost\n        cost += abs(A[i] - A[i - 1])\n    return str(min_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return max(a+b, b+c, a+c)\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return a + b + c - min(a, b, c)\n    \"\"\"\n    \n    a, b, c = map(int, stdin.split())\n    return min(a, b, c) + sum(a, b, c) - min(a, b, c)\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from functools import reduce\n\n    # The input is a string. Convert it to a list.\n    stdin = stdin.split()\n    stdin = [int(x) for x in stdin]\n    n = len(stdin)\n\n    # 2D array. dp[i][j] represents the minimum cost to complete all tasks from 1 to i, and the tasks from i to j are completed.\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n\n    # Set the diagonal elements.\n    for i in range(n):\n        dp[i][i] = stdin[i]\n\n    for i in range(n - 1):\n        dp[i][i + 1] = abs(stdin[i] - stdin[i + 1])\n\n    # Calculate the values in the dp array.\n    for length in range(2, n):\n        for i in range(n - length):\n            j = i + length\n            dp[i][j] = reduce(lambda x, y: x + y, dp[i][i:j]) + abs(stdin[j] - stdin[i])\n\n    # The minimum cost is in the top-right corner of the matrix.\n    return dp[0][n - 1]\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    num = s\n    for i in range(len(num)):\n        num = int(num)\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = 3 * num + 1\n    return num\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(stdin)]\n    n = int(stdin)\n    while a[-1]!= n:\n        if a[-1] % 2 == 0:\n            a.append(int(a[-1] / 2))\n        else:\n            a.append(3 * a[-1] + 1)\n    return str(len(a) - 1)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list()\n    i = 1\n    while n!= 1:\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        a.append(n)\n        i += 1\n\n    for i in range(i - 1, -1, -1):\n        if a[i] == n:\n            return i\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    s = 0\n    i = 0\n    while a > s:\n        if a % 2 == 0:\n            a /= 2\n            s += 1\n        else:\n            a = 3 * a + 1\n            s += 1\n    return str(s)\n\nprint(solution(stdin()))\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum integer m such that a_m = a_n.\n\n    Args:\n        stdin (str): Input string given from standard input\n\n    Returns:\n        str: Minimum integer m\n    \"\"\"\n    return \"The minimum integer m such that a_m = a_n is \" + str(n)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum integer m such that a_m = a_n (m > n) for given s\n    \"\"\"\n    s = int(stdin)\n    a = []\n    a.append(s)\n    while a[-1]!= 1:\n        if a[-1] % 2 == 0:\n            a.append(a[-1] // 2)\n        else:\n            a.append(3 * a[-1] + 1)\n    a = set(a)\n    return min([i for i in range(1,len(a)) if a[i] == a[-1]])\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # write your code in Python 3.6\n    num = int(s)\n    i = 1\n    a = []\n    while num >= 0:\n        if num % 2 == 0:\n            a.append(num)\n            num = num/2\n            i += 1\n        else:\n            a.append(3 * num + 1)\n            num = num/2\n            i += 1\n    return str(i-1)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    count = 1\n    result = 1\n    while True:\n        count += 1\n        result += 2\n        if count == s:\n            break\n    return result\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = [s]\n    if s % 2 == 0:\n        f = lambda n: n // 2\n    else:\n        f = lambda n: 3 * n + 1\n    for _ in range(9):\n        a.append(f(a[-1]))\n    ans = 0\n    for i in range(len(a)):\n        if a[i] == s:\n            ans = i\n            break\n    return str(ans)\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    takahashi_health, aoki_health = data[0], data[2]\n    while takahashi_health > 0 and aoki_health > 0:\n        aoki_health -= max(takahashi_health, aoki_health)\n        takahashi_health -= max(takahashi_health, aoki_health)\n    return 'Yes' if takahashi_health <= 0 else 'No'\nprint(solution(input()))\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_health, aoki_health = stdin.split()\n    takahashi_health = int(takahashi_health)\n    aoki_health = int(aoki_health)\n    if takahashi_health - aoki_health <= 0:\n        return \"Yes\"\n    elif takahashi_health - aoki_health > 0:\n        return \"No\"\n    return \"Error!\"\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(i) for i in stdin.split()]\n\n    if A < B:\n        if C < D:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        if C > D:\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c, d = stdin.split(\" \")\n    a, b, c, d = int(a), int(b), int(c), int(d)\n    \n    if a >= b and c >= d:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(n) for n in stdin.split(' ')]\n    takahashi = max(A, B)\n    aoki = max(C, D)\n    if takahashi > aoki:\n        return 'Yes'\n    return 'No'\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    takahashi, aoki = stdin.split()\n    takahashi = [int(s) for s in takahashi]\n    aoki = [int(s) for s in aoki]\n    while aoki[0] > 0 and aoki[1] > 0 and takahashi[0] > 0 and takahashi[1] > 0:\n        takahashi[0] -= aoki[1]\n        takahashi[1] -= aoki[0]\n        aoki[0] -= takahashi[0]\n        aoki[1] -= takahashi[1]\n    return \"No\" if takahashi[0] > 0 else \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split(' ')))\n    if C+D <= A+B:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    takahashi_wins = False\n    if B > D:\n        takahashi_wins = True\n    elif B < C:\n        takahashi_wins = False\n    else:\n        if A > D:\n            takahashi_wins = True\n        elif A < C:\n            takahashi_wins = False\n\n    if takahashi_wins:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(stdin))"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if a >= c or b >= d:\n        return \"Yes\"\n    elif b < d:\n        return \"No\"\n    else:\n        return \"Yes\" if a < c else \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n    A, B, C, D = map(int, stdin.split())\n    takahashi_won = True\n    while True:\n        Aoki_damage = max(C, D)\n        takahashi_damage = min(C, D)\n        if B > Aoki_damage:\n            Aoki_damage = A\n            takahashi_won = False\n        A -= takahashi_damage\n        if A <= 0:\n            break\n        B -= Aoki_damage\n        if B <= 0:\n            break\n    if takahashi_won:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *values = map(int, stdin.split())\n    n_values = []\n    for i in range(n):\n        n_values.append((values[i], i))\n    n_values = sorted(n_values, key=lambda x: x[0], reverse=True)\n    res = 0\n    for i, (v, j) in enumerate(n_values):\n        if i == 0:\n            res += v\n        else:\n            res += v * (n - 1) / (n - i)\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    s = stdin.split(\"\\n\")[1]\n    nums = [int(x) for x in s.split(\" \")]\n    s = stdin.split(\"\\n\")[2]\n    costs = [int(x) for x in s.split(\" \")]\n    result = 0\n    for i in range(len(nums)):\n        if costs[i] < nums[i]:\n            result += nums[i]\n        else:\n            result += costs[i]\n    return result\nprint(solution(stdin))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, *nums, *costs = [list(map(int, stdin.split('\\n')[1:]))]\n    \n    result = 0\n    for i in range(n):\n        result += nums[i]\n        for j in range(n):\n            if i!= j:\n                result -= costs[j]\n        if result > result:\n            break\n    \n    return str(result)"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    n = int(stdin.readline())\n    l = [int(i) for i in stdin.readline().split()]\n    l.sort()\n    l = l[::-1]\n    sum1,sum2 = 0,0\n    for i in range(n):\n        sum1 += l[i]\n        sum2 += i+1\n    sum2 = sum2 * l[0]\n    sum1 = sum1 - sum2\n    print(sum1)\nsolution(input())"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *vals, = map(int, stdin.split('\\n')[0].split())\n    Cs, *costs = map(int, stdin.split('\\n')[1].split())\n    return str(sum(vals) - sum(costs))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the optimal solution for the maximum possible value of X - Y,\n    where X is the sum of the values of the gems obtained, and Y is the sum of the costs paid.\n    \"\"\"\n    n, *values, *costs = map(int, stdin.split())\n    values.sort()\n    costs.sort()\n    zipped = zip(values, costs)\n    return sum(values) - sum(costs)\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n10 2 5\\n6 3 4\\n\")\n    5\n    \"\"\"\n    n, *cost = stdin.split(\"\\n\")\n    gems = list(map(int, cost))\n    return str(max(0, sum(gems) - sum(sorted(gems)[: -1])))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    v = [int(x) for x in stdin[1].split()]\n    c = [int(x) for x in stdin[2].split()]\n    dp = [[0 for _ in range(sum(c) + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for j in range(sum(c) + 1):\n        dp[0][j] = 0\n    for i in range(1, n + 1):\n        for j in range(1, sum(c) + 1):\n            if j >= c[i - 1]:\n                dp[i][j] = max(dp[i - 1][j - c[i - 1]] + v[i - 1], dp[i - 1][j])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(max(dp[n]))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *v, C = map(int, stdin.split())\n\n    ans = 0\n    for x in range(1, N + 1):\n        ans += v[x - 1]\n    for x in range(1, N + 1):\n        ans -= C[x - 1]\n    print(ans)"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Take the input\n    N, *gems = map(int, stdin.split())\n    # Sort the gems\n    gems.sort()\n    # We have to pay the price of gems[-1]\n    price_of_gem = sum(gems[1:])\n    # We have to pay the price of gems[0]\n    price_of_gem += gems[0]\n    # We have to pay the price of gems[-1]\n    price_of_gem -= gems[-1]\n    # We have to pay the price of gems[0]\n    price_of_gem -= gems[0]\n    # We have to pay the price of gems[1]\n    price_of_gem -= gems[1]\n    # We have to pay the price of gems[-1]\n    price_of_gem -= gems[-1]\n    # We have to pay the price of gems[0]\n    price_of_gem -= gems[0]\n    # Return the answer\n    return str(price_of_gem)"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given an input string, output the final state of the grid.\"\"\"\n    h, w = map(int, stdin.split())\n    # init\n    grid = [list(stdin.split()[1]) for _ in range(h)]\n    # pop all black\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == \"#\":\n                grid[i].pop(j)\n                if j > 0:\n                    grid[i].pop(j - 1)\n                if j < w - 1:\n                    grid[i].pop(j)\n    # remove all empty\n    while any([\"\".join(r) == \"\" for r in grid]):\n        for i in range(h):\n            for j in range(w):\n                if grid[i][j] == \"\":\n                    grid[i].pop(j)\n                    if j > 0:\n                        grid[i].pop(j - 1)\n                    if j < w - 1:\n                        grid[i].pop(j)\n    # get one line\n    line = []\n    for row in grid:\n        line += row\n    # print the line\n    line = \"\".join(line)\n    return line\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    lines = stdin.split('\\n')\n    width, height = [int(x) for x in lines[0].split(' ')]\n    arr = [x for x in lines[1].split(':')[1].split(' ')]\n\n    # Initialize the array\n    state = [0] * width\n    for i in range(height):\n        state[i] = [0] * width\n    for i in range(height):\n        for j in range(width):\n            if arr[i * width + j] == '#':\n                state[i][j] = 1\n\n    # The final state of the array\n    # It will be used as the output\n    final_state = [0] * width\n    for i in range(height):\n        final_state[i] = [0] * width\n\n    # To check if the state of the array changes\n    # at least once after the operation\n    changed = True\n    # The number of iterations\n    n_iterations = 0\n    while changed:\n        n_iterations += 1\n\n        # Initialize the changed flag\n        changed = False\n\n        # For each row\n        for i in range(height):\n            # If there is a row of only white squares\n            if not any(state[i]):\n                changed = True\n                # Remove the row\n                for j in range(width):\n                    state[i][j] = 0\n                # Delete the space between the rows\n                for j in range(width - 1):\n                    state[i][j] = 0\n                # If the row is not the last row\n                if i < height - 1:\n                    # Set the above row to white\n                    for j in range(width):\n                        state[i + 1][j] = 0\n\n        # For each column\n        for j in range(width):\n            # If there is a column of only white squares\n            if not any(state[:, j]):\n                changed = True\n                # Remove the column\n                for i in range(height):\n                    state[i][j] = 0\n                # Delete the space between the columns\n                for i in range(height - 1):\n                    state[i][j] = 0\n                # If the column is not the last column\n                if j < width - 1:\n                    # Set the left column to white\n                    for i in range(height):\n                        state[i][j + 1] = 0\n\n    # Build the output\n    for i in range(height):\n        for j in range(width):\n            if state[i][j]:\n                final_state[i][j] = '#'\n            else:\n                final_state[i][j] = '.'\n\n    # Return the final state of the array\n    return '\\n'.join([' '.join([str(e) for e in x]) for x in final_state])"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split('\\n')[:2])\n    a = [stdin.split('\\n')[2:][i] for i in range(0, h)]\n    for i in range(h):\n        for j in range(w):\n            if a[i][j] == '.':\n                a[i] = a[i][:j] +'' + a[i][j+1:]\n    for i in range(h):\n        for j in range(w):\n            if a[i][j] =='':\n                a[i] = a[i][:j] + '#' + a[i][j+1:]\n    return '\\n'.join(a)\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    h, w = map(int, stdin.split())\n    grid = [stdin.split() for _ in range(h)]\n\n    # find black rows and columns\n    columns = []\n    rows = []\n    for i, row in enumerate(grid):\n        for j, char in enumerate(row):\n            if char == '.':\n                continue\n            if j == 0:\n                rows.append(i)\n            else:\n                columns.append(j)\n                break\n\n    # remove them\n    for row in rows:\n        grid[row] = grid[row][:-1]\n    for col in columns:\n        for i in range(h):\n            grid[i] = grid[i][:col] + grid[i][col+1:]\n    return '\\n'.join([''.join(row) for row in grid])\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = [list(stdin.split('\\n')[1].split('\\n')[0]) for _ in range(h)]\n    while True:\n        to_remove = []\n        for row in grid:\n            if row.count('.') == w:\n                to_remove.append(row)\n                break\n        if not to_remove:\n            break\n        grid.remove(to_remove[0])\n        for row in grid:\n            row.remove('.')\n        for row in grid[1:]:\n            row.remove(to_remove[0][1])\n            row.remove(to_remove[0][1])\n    for row in grid:\n        for i in range(w):\n            print(row[i], end='')\n        print()\n    return ''\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(x) for x in stdin.split()]\n    grid = [[int(x) for x in line.split()] for line in stdin.split('\\n')[1:]]\n    i = 0\n    while True:\n        for j in range(W):\n            if all(grid[i][j] == 0 for i in range(H)):\n                grid = [[0 if i < H - 1 else grid[i][j] for i in range(H)] if j < W - 1 else [grid[i][j] if i < H - 1 else 0 for i in range(H)]]\n                for i in range(H):\n                    grid[i][j] = 1 if j == 0 else grid[i][j]\n                break\n        else:\n            break\n        i += 1\n    return '\\n'.join(''.join('#' if x == 1 else '.' for x in y) for y in grid)\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    raw_grid = stdin.split(\"\\n\")\n    grid = [list(row) for row in raw_grid]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == \".\":\n                grid[i][j] = 1\n            else:\n                grid[i][j] = 0\n    while True:\n        for i in range(len(grid)):\n            if 0 in grid[i]:\n                for j in range(len(grid)):\n                    if grid[j][i] == 1:\n                        for k in range(i, -1, -1):\n                            if grid[k][i] == 0:\n                                for l in range(k, -1, -1):\n                                    if grid[l][i] == 1:\n                                        break\n                                    grid[l][i] = 1\n                        for k in range(i + 1, len(grid)):\n                            if grid[k][i] == 0:\n                                for l in range(k, len(grid)):\n                                    if grid[l][i] == 1:\n                                        break\n                                    grid[l][i] = 1\n                        break\n            else:\n                break\n        else:\n            break\n    res = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res.append(grid[i][j])\n    return \"\\n\".join([\"\".join([str(row) for row in row]) for row in res])"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = [stdin.splitlines()[1: H+1], stdin.splitlines()[H+1:]]\n    result = \"\"\n    for row in grid:\n        for column in row:\n            result += column\n    return result\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import chain\n\n    def split(stdin: str) -> list:\n        return stdin.split(\"\\n\")\n\n    h, w = split(stdin)[0].split()\n\n    # Get A\n    A = []\n    for i in split(stdin)[1:]:\n        if i!= \"\\n\":\n            A.append(list(i))\n\n    # If A is empty or all 0's, return \"All clear\"\n    if not A or all([True if i == \"#\" else False for i in chain.from_iterable(A)]):\n        return \"All clear\"\n\n    # If A is not empty, apply the following operations\n    # First, create a new grid using the dimensions\n    grid = [[0 for j in range(int(w))] for i in range(int(h))]\n    for i in range(int(h)):\n        for j in range(int(w)):\n            grid[i][j] = A[i][j]\n\n    def remove_row(grid: list, row: int) -> None:\n        # Replace the row with all zeros\n        grid[row] = [0 for i in grid[row]]\n\n    def remove_col(grid: list, col: int) -> None:\n        # Replace the column with all zeros\n        for i in range(int(h)):\n            grid[i][col] = 0\n\n    # For each row, col, determine if the row or column contains a single white square\n    for i in range(int(h)):\n        for j in range(int(w)):\n            if grid[i][j] == \"#\":\n                if sum([0 if grid[i][k] == \"#\" else 1 for k in range(int(w))]) == 1:\n                    # If there is only one white square, delete it and delete the space between it and its neighbor\n                    remove_row(grid, i)\n                    break\n                if sum([0 if grid[k][j] == \"#\" else 1 for k in range(int(h))]) == 1:\n                    # If there is only one white square, delete it and delete the space between it and its neighbor\n                    remove_col(grid, j)\n                    break\n\n    # Return the grid\n    for i in range(int(h)):\n        for j in range(int(w)):\n            print(grid[i][j], end=\"\")\n        print()\n    return grid\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is not very efficient but uses a relatively simple algorithm to find the solution.\n    It starts from the beginning of the grid and iterates through the rows and columns.\n    If the first character of a row or column is #, it is removed.\n    If it is not, it is not removed, so it is a black square.\n    The solution is the string of rows joined by \"\\n\".\n    \"\"\"\n    data = stdin.split()\n    H, W = [int(x) for x in data[:2]]\n    a = [[x for x in row] for row in stdin.split(\"\\n\")]\n    while True:\n        row, col = 0, 0\n        for row, row_chars in enumerate(a):\n            if \"#\" in row_chars:\n                break\n        else:\n            break\n        for col, col_chars in enumerate(zip(*a)):\n            if \"#\" in col_chars:\n                break\n        else:\n            break\n        a = [[x for x in row[:col] + row[col+1:] if x!= \" \"] for row in a[:row] + a[row+1:]]\n        a = [row[:col] + row[col+1:] if row[col] == \"#\" else row for row in a]\n    return \"\\n\".join([\"\".join(row) for row in a])\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nfrom math import pi"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 * 3.14 * int(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    R: int = int(stdin)\n    return str(R*R*3.14159265)\n\n\nimport sys\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(3.14159265358979323846 * int(stdin))\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(2 * 3.14 * R)\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = float(stdin)\n    c = 2 * math.pi * r\n    return \"{:.2e}\".format(c)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(2 * R * math.pi)\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns circumference of circle with radius R.'''\n    R = float(stdin)\n    circumference = 2 * 3.14159265359 * R\n    return str(circumference)\n    \n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    char_counter = collections.Counter(stdin)\n    return \"Yes\" if len(char_counter.keys()) == len(set(char_counter.keys())) else \"No\"\n    # this is the number of unique keys = the number of unique values\n    # if len(char_counter.keys()) == len(set(char_counter.keys())), then all the unique keys have a count of 2\n\n\ndef"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if given string S consists of exactly two kinds of characters which both appear twice in S.\n\n    >>> solution(\"ASSA\")\n    Yes\n\n    >>> solution(\"SASS\")\n    Yes\n\n    >>> solution(\"ASS\")\n    No\n\n    >>> solution(\"ASSAA\")\n    No\n    \"\"\"\n\n    # Transforms S into a string of sets.\n    string_sets = \"\".join(set(stdin))\n    # Counts occurrences of each set.\n    occurrences = {char: stdin.count(char) for char in string_sets}\n    # Checks if any character has two occurrences.\n    check = [key for key, value in occurrences.items() if value == 2]\n    if len(check) == 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if len(set(stdin)) == 2 and (list(set(stdin))[0] == list(set(stdin))[1] or list(set(stdin))[0] == list(set(stdin))[2] or list(set(stdin))[0] == list(set(stdin))[3]) else \"No\")"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    counter = {}\n    for letter in stdin:\n        if letter in counter:\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n    if 2 not in counter.values():\n        return \"No\"\n    elif counter.get(\"A\") == 2 and counter.get(\"S\") == 2:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # create two strings\n    # for each character, check if it is equal to the other character\n    # return True if the strings are equal, False otherwise\n    # example:\n    # I love you\n    #   ^ ^ ^\n    # l o v e\n    #   ^ ^\n    # a = 0 and l = 1\n    # e = 2 and o = 3\n    # I = 0 and v = 1\n    # e = 2 and s = 3\n    # return True because l and o are equal, e and v are equal, a and I are equal, and e and s are equal\n    # False because s and I are not equal\n    #\n    # 1. get the input\n    # 2. create two variables for the two strings\n    # 3. for each character, check if it equals the other character\n    # 4. return True if the strings are equal, False otherwise\n\n\ndef"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    s = set(inp)\n    result = ''\n    for i in s:\n        if inp.count(i) == 2:\n            result += 'Yes'\n            break\n    if result == '':\n        result = 'No'\n    return result"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for x in stdin:\n        if stdin.count(x) == 2:\n            return 'Yes'\n        else:\n            return 'No'\n        "
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('ASSA')\n    Yes\n    \"\"\"\n    count_a = stdin.count('A')\n    count_s = stdin.count('S')\n    if count_a == 2 and count_s == 2:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    s = stdin\n    if s.count(s[0]) == 2 and s.count(s[1]) == 2 and s.count(s[2]) == 2 and s.count(s[3]) == 2:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(set(stdin)) == 2 else \"No\""
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(\" \")[0])\n    b = int(stdin.split(\" \")[1])\n    return max(a+b, a-b, a*b)"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(max(a + b, a - b, a * b))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the largest number among A + B, A - B, and A \\times B.\n    >>> solution('-13 3')\n    -10\n    \"\"\"\n    A, B = map(int, stdin.split())\n    return str(max(A + B, A - B, A * B))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(\" \")]\n    return str(max(a+b, a-b, a*b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return max(-a, -b, a * b)\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return str(max(a+b, a-b, a*b))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A+B, A-B, A*B))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(-a + b, -a - b, a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.splitlines()\n    A, B = int(input_values[0]), int(input_values[1])\n    return max(-A + B, -A - B, -A * B)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N, *mountains = map(int, stdin.split())\n  count = 0\n  for i in range(0, len(mountains)-1):\n    if mountains[i] <= mountains[i+1]:\n      count += 1\n  print(count)\n  return ''"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *args = stdin.splitlines()\n    N = int(N)\n    args = [int(i) for i in args]\n\n    count = 0\n    for i in range(N):\n        if args[0] <= args[i]:\n            count += 1\n    print(count)\n    return ''\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdout\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split())\n    return str(sum(sum(1 for i in H[1:]) for i in H if i <= H[0]))\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of inns that can see the ocean from the west, given the heights of the mountains.\n\n    Args:\n        stdin (str): Input from Standard Input.\n\n    Returns:\n        str: Output to Standard Output.\n    \"\"\"\n\n    # Read the input\n    n = int(stdin)\n\n    # Initialize the result\n    result = 0\n\n    # Iterate over the heights\n    for i in range(1, n + 1):\n        # Initialize the current array\n        current = [int(height) for height in stdin.split()]\n\n        # Sort the current array\n        current.sort()\n\n        # Update the result if needed\n        if current[0] <= i and current[n - 1] >= i:\n            result += 1\n\n    # Return the result\n    return str(result)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, *h = map(int, stdin.split())\n  return sum(h[i] > h[i-1] for i in range(1, n))\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    I struggled with this problem for a while and then finally solved it!\n\n    This problem was actually fairly simple, but I was thinking about it\n    in terms of a finite state automaton, and then I was thinking about it\n    in terms of a set of ifs, but the final solution was about 3x faster than\n    either of those approaches.\n\n    I found a similar problem on the Leetcode site, but I was unable to solve it.\n    '''\n    N, *H = map(int, stdin.split())\n\n    # create a sorted list of heights\n    H = sorted(H)\n\n    # define the current state, start at the state where both heights are greater than the\n    # current height, and then when we have enough heights, increment the state\n    # to reflect that we can see the ocean\n    # i.e. the state variable represents the number of heights we have checked so far\n    state = 0\n    for i in range(N):\n        if H[i] > H[i-1] and H[i] > H[i-2]:\n            state += 1\n\n    return state\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  inns: List[int] = [int(n) for n in stdin.split(\" \")]\n  count: int = 0\n  for i in range(1, len(inns)):\n    if inns[i - 1] > inns[i]:\n      count += 1\n  return str(count)\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of stairways that Tanya climbed.\n\n    Args:\n        stdin (str): The input text as a string\n\n    Returns:\n        str: A string of the solution\n    \"\"\"\n\n    n = int(stdin)\n    l = []\n    for i in stdin.split():\n        l.append(int(i))\n    nums = set(l)\n    nums = list(nums)\n    nums.sort()\n    count = 0\n    count = len(nums)\n    d = {}\n    for i in nums:\n        count += 1\n        d[i] = count\n    stairs = []\n    a = d[l[0]]\n    for i in range(1, n):\n        b = d[l[i]]\n        if a == b:\n            stairs.append(a)\n            a += 1\n        else:\n            a = b\n    stairs = set(stairs)\n    stairs = list(stairs)\n    stairs.sort()\n    print(len(stairs))\n    print(' '.join(str(x) for x in stairs))\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stairs = []\n    for num in stdin.split('\\n'):\n        if num:\n            stairs.append(int(num))\n    n = len(stairs)\n    stairs.append(1)\n    stairs.append(1)\n    stairs.append(1)\n    stairs.append(1)\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = stairs[0]\n    dp[2] = stairs[0] + stairs[1]\n    dp[3] = stairs[0] + stairs[1] + stairs[2]\n    dp[4] = stairs[0] + stairs[2] + stairs[3]\n    dp[5] = stairs[1] + stairs[2] + stairs[3] + stairs[4]\n    for i in range(6, n):\n        dp[i] = dp[i - 1] + stairs[i - 1] + stairs[i] + stairs[i - 2]\n    print(dp)\n\n    return dp\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    steps = stdin.split('\\n')[0].split(' ')\n    stairs = [int(i) for i in steps]\n    if len(stairs) < 1:\n        return '0'\n    result = ''\n    stairs.sort()\n    for i in stairs:\n        result += f'{i} '\n    return result[0:-1]\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    stairways = []\n    for i in range(n):\n        if i == 0:\n            stairways.append(1)\n        else:\n            stairways.append(arr[i] - arr[i - 1] + stairways[i - 1])\n    print(stairways[-1])\n    for i in range(n):\n        print(stairways[i], end=\" \")\n    return\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count_stairs = 1\n    count_steps = 0\n    for i in range(1, k + 1):\n        if i == 1:\n            count_stairs += 1\n        elif i == 2:\n            count_stairs += 1\n            count_steps = 2\n        else:\n            if i % 2 == 1:\n                count_steps = count_stairs * i - 1\n                count_stairs += 1\n            else:\n                count_steps = count_stairs * i\n                count_stairs += 1\n    return f'{count_stairs}\\n{count_steps}'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Case #{}: {} {}\".format(1, 1, 1)\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split()]\n    a.append(0)\n    a.sort()\n    a = [0] + a\n    cnt = 1\n    ans = []\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            cnt += 1\n        else:\n            ans.append(cnt)\n            cnt = 1\n    ans.append(cnt)\n    print(' '.join(map(str, ans)))\n\nprint(solution(input()))"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    last = [0] * n\n    l = [0]\n    for x in stdin.split(' '):\n        if x!= '\\n':\n            l.append(int(x))\n    n = len(l)\n    last[0] = l[1]\n    for i in range(2, n):\n        last[i] = last[i-1] + l[i]\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n    return dp[n-1][n-1]\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of stairways\n    that Tanya climbed,\n    and the number of steps\n    in each stairway\n    that Tanya climbed.\n    >>> solution('7\\\\n1 2 3 1 2 3 4\\\\n')\n    (2, 3, 4)\n    >>> solution('4\\\\n1 1 1 1\\\\n')\n    (4, 1, 1, 1)\n    >>> solution('5\\\\n1 2 1 2 1\\\\n')\n    (1, 5)\n    >>> solution('5\\\\n1 2 1 2 1\\\\n')\n    (3, 2, 1)\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin.split('\\n')[0])\n    numbers = sorted(list(map(int, stdin.split('\\n')[1].split(' '))))\n    l = []\n    for n in numbers:\n        if n in l:\n            pass\n        else:\n            l.append(n)\n    l = [n for n in l if n > 1]\n    if len(l) == 0:\n        return '0\\n0\\n0'\n    n = len(l)\n    arr = [l[0]]\n    for i in range(1, n):\n        arr.append(l[i] - l[i-1])\n    return f'{n}\\n{arr}'\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the solution for the given input.\n\n        Parameters:\n            stdin (str): The input.\n\n        Returns:\n            str: The solution for the given input.\n    \"\"\"\n    # Return the solution for the given input.\n    return \"\""
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 3\n   ... 6''')\n    '1'\n\n    >>> solution('''10\n   ... 999\n   ... 999\n   ... 999\n   ... 999\n   ... 999\n   ... 999\n   ... 999\n   ... 999\n   ... 999''')\n    '1'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        left_side = n\n        right_side = 1\n        candy = 1\n        while True:\n            if left_side < right_side:\n                break\n            left_side -= candy\n            right_side += candy\n            candy *= 2\n        candy /= 2\n        left_side -= candy\n        if left_side == right_side:\n            print(candy)\n        else:\n            print(left_side + candy)\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if n == 1:\n            print(1)\n            continue\n        x = 1\n        k = 2\n        while k * k < n:\n            x += 1\n            if x * (k+1) > n:\n                break\n            k += 1\n        if k * k == n:\n            print(k)\n        else:\n            print(x)"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for _ in range(cases):\n        n = int(stdin.readline().strip())\n        k = 1\n        x = 0\n        while x + 2 ** k <= n:\n            x += 2 ** k\n            k += 1\n        k -= 1\n        print(x, k)\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = n\n    while k > 0:\n        k -= 1\n        if res % 10!= 0:\n            res -= 1\n        res //= 10\n    return str(res)\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = n\n    for i in range(k):\n        if n % 10 == 0:\n            n = n // 10\n        else:\n            n -= 1\n    return a - n\n\nprint(solution('512 4'))\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    while m:\n        n, m = n // 10, m - 1\n    return n\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    number, step = list(map(int, stdin.split()))\n    \n    while step:\n        if number % 10:\n            number -= 1\n        else:\n            number //= 10\n        step -= 1\n    return number\n\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = map(int, stdin.readlines())\nres = n\ni = 1\nwhile i <= k:\n    digit_num = len(str(res))\n    if int(str(res)[digit_num-1]) == 0:\n        res = res // 10\n    else:\n        res = res - 1\n    i += 1\nprint(res)\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    i = 0\n    while k > 0:\n        if n % 10 > 0:\n            n -= 1\n        else:\n            n = n//10\n        k -= 1\n    return n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    res = n\n    k -= 1\n    while k > 0:\n        res //= 10\n        if res % 10 > 0:\n            res -= 1\n        k -= 1\n    return res\n\n\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $n$ \u0438 $k$ \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 10^5$, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u0437\u0430\u0434\u0430\u043d\u0438\u044e?\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    while k > 0:\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n /= 10\n        k -= 1\n    return n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    arr = list(map(int, input[1].split(\" \")))\n    cnt = 0\n    for i in range(n):\n        left = 0\n        right = n - 1\n        while left < right:\n            if arr[left] >= arr[right]:\n                cnt += right - left\n                left += 1\n                break\n            right -= 1\n            left += 1\n        else:\n            cnt += n\n\n    output = []\n    left = 0\n    right = n - 1\n    for _ in range(n):\n        if arr[left] > arr[right]:\n            output.append(arr[right])\n            right -= 1\n        else:\n            output.append(arr[left])\n            left += 1\n\n    print(cnt)\n    print(' '.join(map(str, output)))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = len(a)\n    res = []\n    for i in range(1, k):\n        res.append(a[i] - a[i - 1])\n    res.sort()\n    for i in range(k - 1):\n        if res[i] > 1:\n            return i + 1\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = [int(i) for i in stdin.strip().split('\\n')]\n    arr.sort()\n    # [[0 for i in range(n)] for j in range(n)]\n    # matrix = [list(map(int, stdin.strip().split('\\n'))) for i in range(n)]\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        matrix[i][i] = arr[i]\n        for j in range(i):\n            matrix[i][j] = abs(arr[i] - arr[j])\n    visit = [0] * n\n    res = []\n    for i in range(n):\n        if visit[i] == 0:\n            path = []\n            dfs(i, matrix, path, visit)\n            res.append(path)\n    return len(res), [arr[i] for i in res[0]]\n\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_people = int(stdin.split('\\n')[0])\n    height = list(map(int, stdin.split('\\n')[1].split()))\n    sorted_height = sorted(height)\n    max_height = sorted_height[-1]\n    max_index = height.index(max_height)\n    result_height = []\n    for i in range(max_index + 1):\n        result_height.append(height[max_index - i])\n    for i in range(len(height) - max_index):\n        result_height.append(height[max_index + i + 1])\n    print(' '.join(list(map(str, result_height))))\n    return '\\n'\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    k = 1\n    h = list(map(int, lines[1].split()))\n    if len(h) < 2:\n        return ''\n    for i in range(n):\n        if h[i] == h[0]:\n            k += 1\n    \n    h.sort()\n    h = h[:k]\n    if len(h) < 2:\n        return ''\n    h = [h[0]] + h + [h[len(h) - 1]]\n    h = [h[0]] + h + [h[len(h) - 1]]\n    h = h[:len(h) - 1]\n\n    if len(h) < 2:\n        return ''\n    \n    r = list()\n    for i in range(len(h) - 1):\n        if abs(h[i] - h[i + 1]) > 1:\n            r = r + [h[i + 1]]\n    r = r + [h[0]]\n    r = [r[0]] + r + [r[len(r) - 1]]\n    return r\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    k = int(n / 2)\n\n    first = arr[-k]\n    second = arr[k - 1]\n\n    print(k)\n    print(*arr)\n\n    if abs(first - second) <= 1:\n        return\n\n    arr = arr[k:] + arr[:k]\n    print(*arr)\n\n    return\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.readline()\n    nums = [int(i) for i in stdin.readline().split()]\n    nums = sorted(nums)\n    ans = 0\n    i = 0\n    maxi = 0\n    for j in range(len(nums)):\n        if nums[j] > nums[maxi]:\n            maxi = j\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n\n    k = 0\n    for i in range(n):\n        if i == 0:\n            if a[i] == a[i + 1]:\n                k += 1\n        if i!= 0 and i!= n - 1:\n            if a[i]!= a[i - 1] and a[i]!= a[i + 1]:\n                k += 1\n        if i == n - 1:\n            if a[i]!= a[i - 1]:\n                k += 1\n\n    print(k)\n    print(' '.join(map(str, a[:k])))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    def calc_dist(c, d):\n        return max(abs(c - d), 1)\n    \n    n = int(stdin.readline())\n    people = list(map(int, stdin.readline().split()))\n    dp = [float('inf')] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        for j in range(0, i):\n            dp[i] = min(dp[i], calc_dist(people[i], people[j]) + dp[j])\n        \n    dp[0] = float('inf')\n    for i in range(1, n):\n        dp[i] = min(dp[i], calc_dist(people[i], people[0]) + dp[0])\n        \n    print(dp[n - 1])\n    \n    for j in range(n):\n        print(dp[j])\n        \n    \n    \n    return ''"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    songs = [list(map(int, stdin.split(\" \"))) for i in range(n)]\n    songs = sorted(songs, key=lambda x: x[0], reverse=True)\n    songs = sorted(songs, key=lambda x: x[1], reverse=True)\n    free_space = m\n    i = 0\n    min_songs = 0\n    while free_space > 0:\n        if free_space >= songs[i][0]:\n            free_space -= songs[i][0]\n            min_songs += 1\n        else:\n            i += 1\n    if min_songs == 0:\n        return \"-1\"\n    return min_songs\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"compress string if it doesn't exceed limit\"\n    s = stdin.split('\\n')\n    n, m = int(s[0].split()[0]), int(s[0].split()[1])\n    songs = [int(x) for x in s[1:]]\n    print(n, m, songs)\n    songs = sorted(songs)\n    songs.reverse()\n    limit = 0\n    min_count = 0\n    for i in range(n):\n        if limit + songs[i] > m:\n            break\n        else:\n            limit += songs[i]\n            min_count += 1\n\n    print(min_count)\n    return min_count\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, m = [int(x) for x in stdin.readline().split()]\n\nsongs = []\nfor _ in range(n):\n    a, b = [int(x) for x in stdin.readline().split()]\n    songs.append((a, b))\n\nsongs.sort(key=lambda x: x[0], reverse=True)\n\ntotal_size = 0\ni = 0\nwhile total_size <= m:\n    if i < len(songs):\n        total_size += songs[i][0]\n        i += 1\n    else:\n        break"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 16\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4''')\n    2\n    >>> solution('''4 16\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4''')\n    -1\n    \"\"\"\n    n, m = list(map(int, stdin.splitlines()[0].split()))\n    arr = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n    arr.sort(key=lambda x: x[1])\n    for i, (x, y) in enumerate(arr):\n        m -= x\n        if m < 0:\n            return str(i)\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    songs = []\n    for _ in range(n):\n        songs.append(list(map(int, stdin.split(' '))))\n\n    songs.sort(key=lambda x: x[1])\n\n    result = 0\n    cur_sum = 0\n    for song in songs:\n        if cur_sum + song[0] <= m:\n            cur_sum += song[0]\n            result += 1\n    if result == 0:\n        return '-1'\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(' ')]\n    a = [int(n) for n in stdin.split('\\n')[1:n + 1]]\n    b = [int(n) for n in stdin.split('\\n')[n + 1:]]\n    a.sort()\n    b.sort()\n    curr_sum = 0\n    for i in range(n):\n        if a[i] < m:\n            if i == 0:\n                if curr_sum + b[i] < m:\n                    curr_sum += b[i]\n                    continue\n                else:\n                    return str(-1)\n            else:\n                if curr_sum + b[i] > m:\n                    return str(-1)\n                else:\n                    curr_sum += b[i]\n        elif a[i] > m:\n            if i == 0:\n                return str(-1)\n            else:\n                return str(i + 1)\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    songs = [[int(y) for y in stdin.split(' ')] for _ in range(n)]\n    songs.sort(key=lambda x: x[0])\n    s = [0] * n\n    m = m // 10 ** 9\n    for i in range(n):\n        s[i] += songs[i][1]\n    # print(s)\n    f = [False] * n\n    for i in range(n):\n        if s[i] <= m:\n            f[i] = True\n    # print(f)\n    cnt = 1\n    moves = []\n    while sum(f) > 0:\n        # print(f)\n        # print(cnt)\n        for i in range(n):\n            if f[i] == False:\n                m = [x for x in range(n)]\n                m.remove(i)\n                moves.append(i)\n                for j in m:\n                    if f[j] == True:\n                        continue\n                    if s[i] + songs[j][0] <= m:\n                        s[j] += songs[j][0]\n                        f[j] = True\n        if sum(f) == 0:\n            break\n        cnt += 1\n    # print(moves)\n    if sum(f) == 0:\n        return str(cnt)\n    return '-1'"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    t = int(stdin[0])\n    for _ in range(t):\n        n, a, b = [int(x) for x in stdin.split()]\n        for start in range(n - a + 1):\n            end = start + a - 1\n            print(end)\n            print(start)\n            print(a)\n    '''\n    return ''"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    letters = list(letters[:b])\n    count = {}\n    for i in range(n):\n        if a in count.keys():\n            count[a] += 1\n        else:\n            count[a] = 1\n        if count[a] == b:\n            letters.append(letters.pop(0))\n            count[a] -= 1\n    return ''.join(letters)\n\nprint(solution(\"4 5 3\"))\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please take input from STDIN\n    # Take input from STDIN\n    t = int(input())\n    while t > 0:\n        n, a, b = map(int, input().split())\n        c = 0\n        d = {}\n        s = \"\"\n        for i in range(n):\n            if c == b:\n                s +=''\n                c = 0\n                d = {}\n            if a not in d:\n                s += chr(ord('a') + i)\n                d[a] = 1\n                c += 1\n            else:\n                s +=''\n                d = {}\n                c = 0\n        t -= 1\n    return s\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2 1\\n7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\")\n    'tleelte'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ans"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(4,7,5,3)\n    tleelte\n    >>> solution(6,1,1,6)\n    qwerty\n    >>> solution(6,6,1,1)\n    vvvvvv\n    >>> solution(5,2,2,2)\n    abcde\n    \"\"\"\n\n    n, a, b = [int(s) for s in stdin.split(' ')]\n    if n == 1:\n        return 'a'\n    if a > n:\n        return 'a'\n    if a * b > n:\n        return 'a'\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    return ''.join(random.sample(alphabet, k=b))\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split()]\n    s = set()\n    ans = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            s = set()\n            for k in range(i, j):\n                s.add(stdin[k])\n            if len(s) == b:\n                ans.append(stdin[i:j])\n    return ans[0]\n\"\"\"\nfrom collections import Counter, defaultdict\n\n\ndef"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split('\\n')[0].split(' '))\n    x = x-1\n    t = t-1\n    return max(x // t, n - (x - (x // t) * t))"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, X, T = [int(x) for x in stdin.split(' ')]\n    \n    if N >= X:\n        return N\n    else:\n        return N + T * (X - N)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, t, x = map(int, stdin.split(\" \"))\n    \n    s = 0\n    while t - s * x >= 0:\n        s += 1\n    \n    return s - 1\n    "
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n, x, t = [int(i) for i in stdin.split(' ')]\n    return str(x + t * n // 2)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (N, X, T) = [int(x) for x in stdin.split(' ')]\n    total = N\n    while total > 0:\n        if total < N:\n            total = N\n        if total > N:\n            total = total - N\n        if total > X:\n            total = total - X\n        if total > X:\n            total = total - X\n    return T"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin[1]) + \" \" + str(stdin[2])\n\nprint(solution(input()))"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = [int(x) for x in stdin.split()]\n    return f\"{math.ceil(T / (X + 1)) * (X + 1)}\""
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"The minimum number of minutes is {}\".format(int(stdin.split(' ')[0]) + int(stdin.split(' ')[1])//int(stdin.split(' ')[2]))"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"The minimum number of minutes is \" + str(yourSolutionHere)\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # input\n    N, X, T = [int(x) for x in stdin.split()]\n    # to find minimum time to make X pieces of takoyaki.\n    # we can just find min(X/T, N/T)\n    return str(min(X/T, N/T))\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    groups = []\n    for _ in range(n):\n        groups.append(int(stdin.readline()))\n    groups.sort()\n    groups_len = len(groups)\n    result = 1\n    if groups_len > 2:\n        result = groups_len // 3\n    return result"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(result)"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    nums.sort()\n    ans = 0\n    while True:\n        if len(nums) >= 3:\n            ans += 1\n            nums.remove(nums[0])\n            nums.remove(nums[0])\n        else:\n            break\n    return str(ans)\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(result)\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        print(1)\n    else:\n        print(n - (n // 3) - ((n // 3) - 1))\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # The first line of input contains integer N, the number of students\n    # The second line contains N integers, the number of students in each group\n    return str(solve(int(stdin)))\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\nprint(solution(stdin))\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, p = list(map(int, stdin.split(\" \")))\n    return a // p\n\nprint(solution(input()))\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    count = 0\n\n    while p >= a:\n        p -= a\n        a -= 1\n        count += 1\n\n    if p > 0:\n        count += 1\n\n    return count\n\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split(\" \"))\n    return str(P // 3 + (A // 3 - P // 3) * (P % 3 == 0))"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    A, P = stdin.split()\n\n    # set variables\n    A = int(A)\n    P = int(P)\n\n    # case 1: all apples can be cut into three pieces\n    if A % 3 == 0:\n        return str(P // 3)\n    # case 2: A = 1 and P >= 3\n    elif A == 1 and P >= 3:\n        return str((P - 2) // 3 + 1)\n    # case 3: A >= 2 and P >= 2\n    elif A >= 2 and P >= 2:\n        return str(P // 2)\n\n    return str(-1)\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    print(A // P + (A % P > 0))"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = map(int, stdin.split(' '))\n    return n//m+n%m"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    A, P = list(map(int, stdin.split(\" \")))\n\n    # convert input to int\n    # convert to list\n\n    # return output\n    print(A // P)\n\n    return solution"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of apple pies we can make using a given quantity of apples and pieces of apple\"\"\"\n    A, P = [int(x) for x in stdin.split(\" \")]\n    return A // P + A % P // 2 + A % P % 2\n\n\ndef"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    a, p = [int(x) for x in stdin.split(' ')]\n    \n    pies = 0\n    \n    while(p >= 2):\n        p -= 2\n        pies += 1\n    \n    if p == 1:\n        pies += 1\n    \n    return str(pies)\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # this is a hard problem\n    # looks like a stack problem\n    # we can divide into three regions, left and right, and middle\n    # if the left and right is negative, we can cut the apples\n    # if not, we can make a pie by cutting all three\n    # so for the left and right, we can keep the right and left as max value\n    # so for the middle, we can maintain a minimum value\n    # so the maximum number of pie is max(left, right, middle)\n    A, P = map(int, stdin.split())\n    left = 1\n    right = P\n    while right >= left:\n        middle = (left + right) // 2\n        if A % middle == 0 and P % middle == 0:\n            return str(middle)\n        elif A % middle == 0:\n            right = middle - 1\n        elif P % middle == 0:\n            left = middle + 1\n        else:\n            right = middle - 1\n            left = middle + 1\n    return str(right)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # On the first line, you will receive the integers A and B separated by a space.\n    # On the second line, you will receive A and B integers.\n    a, b = map(int, stdin.split('\\n')[0].split())\n    # On the third line, you will receive A and B integers.\n    if a > b:\n        return b - a\n    elif b % a == 0:\n        return b + a\n    else:\n        return a + b"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split(' '))\n  return '{} {}'.format(a + b if a == b or b % a == 0 else b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_raw = stdin.split(\"\\n\")\n    input_ints = [int(i) for i in input_raw[0].split(\" \")]\n    a, b = input_ints\n    if a == 0:\n        return str(b)\n    elif b % a == 0:\n        return str(a + b)\n    else:\n        return str(b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A <= B:\n        return A + B\n    else:\n        return B - A\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    return str(b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        print(b - a)\n    elif a > b:\n        print(a - b)\n    else:\n        print(a + b)\n\n    return ''\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_a, input_b = map(int, stdin.split(' '))\n    return str(input_a + input_b if input_a % input_b == 0 else input_b - input_a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b if b % a == 0 else b - a)\n\n'''\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return str(a + b)\n    return str(b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A <= B:\n        return str(A + B)\n    else:\n        return str(B - A)\n    \n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return \"Yes\" if t.endswith(s) else \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:3]\n    t = stdin[3:]\n    if s!= t[:-1]:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.readline().strip(), stdin.readline().strip()\n    if t[-1] == s[-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:9] + 'z' if len(stdin) > 9 else stdin"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[0]\n    t: str = stdin[1]\n    return \"Yes\" if len(t) == len(s) + 1 and t[:len(s)] == s else \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    id = input_list[0]\n    id_list = list(id)\n    modified_id = id_list[:-1]\n    if modified_id in input_list:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return 'Yes' if s[:-1] + t[-1] == s else 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    s = s[0]\n    t = t[0]\n    if s[-1] == t[-2]:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    print(\"Yes\" if len(s) == len(set(s)) else \"No\")"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if abs(a - b) % 2!= 0:\n        return \"IMPOSSIBLE\"\n    return str((abs(a - b) // 2))\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    a, b = abs(a), abs(b)\n    if (a - b) == 0:\n        return str(a)\n    elif (a - b)!= 0:\n        return 'IMPOSSIBLE'"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a == b:\n        return str(a)\n    if abs(a - b) % 2 == 1:\n        return 'IMPOSSIBLE'\n    return str((abs(a - b) // 2) + b)\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution prints the result of the algorithm in a single line,\n    and does not use the input variable. It also does not create a variable\n    to store the result.\n    \"\"\"\n    a, b = map(int, stdin.split())\n    diff = abs(a - b)\n    diff_set = set(abs(a - i) for i in range(max(a, b) + 1))\n    print('IMPOSSIBLE' if diff not in diff_set else diff)\n    return ''\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(abs(a - b)) if abs(a - b) == abs(b - a) else 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    abs_diff = abs(A - B)\n    if abs_diff % 2!= 0:\n        return 'IMPOSSIBLE'\n    else:\n        return abs_diff // 2\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    if A == B:\n        return str(A)\n    if A < B:\n        if (B - A) % 2 == 1:\n            return 'IMPOSSIBLE'\n        return str((B - A) // 2)\n    if A > B:\n        if (A - B) % 2 == 1:\n            return 'IMPOSSIBLE'\n        return str((A - B) // 2)\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a == b:\n        return str(a)\n    if abs(a-b) % 2 == 0:\n        return str((a-b)//2)\n    else:\n        return 'IMPOSSIBLE'"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if abs(a - b) == abs(b - a):\n        print(abs(a - b))\n    else:\n        print(\"IMPOSSIBLE\")\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('117')\n    Yes\n    \"\"\"\n    n = int(stdin)\n    if n % 10 == 7:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[-1]\n    if '7' in n:\n        print('Yes')\n    else:\n        print('No')\n    return ''"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if \"7\" in stdin else \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n // 100 % 10 == 7:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    s = stdin.split()\n    if int(s[0]) == 7:\n        return \"Yes\"\n    elif int(s[0]) == 0:\n        return \"No\"\n    else:\n        return \"No\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if (N % 10 == 7):\n        return 'Yes'\n    elif (N % 100 // 10 == 7):\n        return 'Yes'\n    elif (N % 1000 // 100 == 7):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    if number[-1] == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    n = stdin.split('\\n')[0]\n    if '7' in n:\n        result = 'Yes'\n    else:\n        result = 'No'\n    return result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = n // 100\n    b = n % 100 // 10\n    c = n % 10\n    if a == b or b == c or c == a:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns Yes/No answer depending on whether last digit is 7'''\n    last_digit = int(stdin) % 10\n    if last_digit == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  while n >= 1:\n    if n % 10 == 1:\n      n = n // 10\n      continue\n    if n % 10 == 2:\n      n = n // 10\n      continue\n    if n % 10 == 3:\n      n = n // 10\n      continue\n    if n % 10 == 4:\n      n = n // 10\n      continue\n    if n % 10 == 5:\n      n = n // 10\n      continue\n    if n % 10 == 6:\n      n = n // 10\n      continue\n    if n % 10 == 7:\n      n = n // 10\n      continue\n    if n % 10 == 8:\n      n = n // 10\n      continue\n    if n % 10 == 9:\n      n = n // 10\n      continue\n    if n % 10 == 0:\n      n = n // 10\n      continue\n  print('Yes' if n == 1 else 'No')\n  return"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0]\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    s = sum(map(int, str(n)))\n    if n % s == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = sum(int(d) for d in str(a))\n    if b % a == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(sum([int(i) for i in str(n)]))\n    return \"Yes\" if n % int(s) == 0 else \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    s = 0\n    for i in n:\n        s += int(i)\n    if int(n) % s == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = 0\n    while N > 0:\n        S += N % 10\n        N = N // 10\n\n    if S % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = sum(int(d) for d in str(N))\n    if S % N == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nreturn 'Yes' if int(stdin) % int(stdin) == 0 else 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for c in str(n):\n        s += int(c)\n    if s % n == 0:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (x_1, y_1), (x_2, y_2) = (0, 0), (0, 1)\n    (x_3, y_3), (x_4, y_4) = (-1, 1), (-1, 0)\n    stdin = stdin.split()\n    x_1, x_2, y_1, y_2 = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    x_3, x_4, y_3, y_4 = int(stdin[4]), int(stdin[5]), int(stdin[6]), int(stdin[7])\n\n    x = int((x_1 + x_2) / 2)\n    y = int((y_1 + y_2) / 2)\n    d1 = ((x - x_1) ** 2 + (y - y_1) ** 2) ** 0.5\n    d2 = ((x - x_2) ** 2 + (y - y_2) ** 2) ** 0.5\n    d = int((d1 + d2) / 2)\n    c = int(((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5)\n    x_3 = int((x - d - c) / 2)\n    y_3 = int((y + d - c) / 2)\n    x_4 = int((x + d - c) / 2)\n    y_4 = int((y - d - c) / 2)\n    return str(x_3) +'' + str(y_3) +'' + str(x_4) +'' + str(y_4)\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read from stdin and solve the problem.\"\"\"\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3 = (-y_1 + y_2) / 2\n    y_3 = (x_1 + x_2) / 2\n    x_4 = (-y_1 + y_3) / 2\n    y_4 = (x_1 + x_3) / 2\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    read data\n    declare x1 y1 x2 y2\n    declare x3 y3 x4 y4\n    check if x3, y3, x4, y4 are integers\n    '''\n    # read stdin\n    x1,y1,x2,y2 = list(map(int,stdin.split()))\n    x3 = -(y2 - y1)\n    y3 = x2 - x1\n    x4 = y2 - y1\n    y4 = -(x2 - x1)\n    \n    if x3 < 0 or y3 < 0 or x4 < 0 or y4 < 0:\n        return \"x3,y3,x4,y4 should be positive\"\n    \n    if x3 >= 10000 or y3 >= 10000 or x4 >= 10000 or y4 >= 10000:\n        return \"x3,y3,x4,y4 should be less than 10000\"\n    \n    if (x1 == x2 and y1 == y2) or (x3 == x4 and y3 == y4):\n        return \"x3,y3,x4,y4 should be distinct\"\n    \n    return f\"{x3} {y3} {x4} {y4}\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3 = (x_2 * y_1 - x_1 * y_2) / (x_2 - x_1)\n    y_3 = (y_2 * x_1 - y_1 * x_2) / (x_2 - x_1)\n    x_4 = (x_2 * y_1 - x_1 * y_2) / (y_2 - y_1)\n    y_4 = (y_2 * x_1 - y_1 * x_2) / (y_2 - y_1)\n    print(x_3, y_3, x_4, y_4)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n\n    # if x_2 == 0 or y_2 == 0:\n    #     raise Exception('Invalid input')\n    # if x_1 == x_2:\n    #     if y_1 == 0:\n    #         y_3 = -1\n    #         y_4 = -1\n    #     elif y_2 == 0:\n    #         y_3 = -1\n    #         y_4 = 1\n    #     else:\n    #         y_3 = -1\n    #         y_4 = 1\n    # elif y_1 == y_2:\n    #     if x_1 == 0:\n    #         x_3 = -1\n    #         x_4 = -1\n    #     elif x_2 == 0:\n    #         x_3 = -1\n    #         x_4 = 1\n    #     else:\n    #         x_3 = -1\n    #         x_4 = 1\n    # else:\n    #     x_3 = -1\n    #     x_4 = 1\n    #     y_3 = -1\n    #     y_4 = 1\n    #\n    # print(*sorted([x_3, y_3, x_4, y_4]))\n\n    x_3, y_3 = (x_2 - x_1) * (-1 if y_1 == y_2 else 1), (y_2 - y_1) * (-1 if x_1 == x_2 else 1)\n    x_4, y_4 = (x_2 - x_1) * (-1 if y_1 == y_2 else 1), (y_2 - y_1) * (-1 if x_1 == x_2 else 1)\n\n    print(*sorted([x_3, y_3, x_4, y_4]))\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3 = -1\n    y_3 = 1\n    x_4 = 1\n    y_4 = -1\n    if x_2 * y_1 == x_1 * y_2:\n        x_3, x_4 = x_2, x_2\n    elif x_2 * y_1 == x_2 * y_2:\n        x_3, x_4 = x_1, x_1\n    elif x_2 * y_1 == x_1 * y_2:\n        x_3, x_4 = x_2, x_1\n    else:\n        x_3, x_4 = x_1, x_2\n\n    if y_2 * x_1 == y_1 * x_2:\n        y_3, y_4 = y_2, y_2\n    elif y_2 * x_1 == y_2 * x_2:\n        y_3, y_4 = y_1, y_1\n    elif y_2 * x_1 == y_1 * x_2:\n        y_3, y_4 = y_2, y_1\n    else:\n        y_3, y_4 = y_1, y_2\n    return str(x_3) +'' + str(y_3) +'' + str(x_4) +'' + str(y_4)\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(n) for n in stdin.split()]\n    return''.join([str((c - a) * (d - b) - (c - b) * (d - a)), str(c - a), str(d - b), str(c - b)])\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split(' '))\n    x_3, y_3, x_4, y_4 = None, None, None, None\n    for i in range(2):\n        if x_1 == x_2:\n            x_3 = x_1\n            x_4 = x_1\n            if i == 0:\n                y_3 = y_1 + 1\n                y_4 = y_1 - 1\n            else:\n                y_3 = y_1 - 1\n                y_4 = y_1 + 1\n        else:\n            y_3 = y_2\n            y_4 = y_2\n            if i == 0:\n                x_3 = x_2 - 1\n                x_4 = x_2 + 1\n            else:\n                x_3 = x_2 + 1\n                x_4 = x_2 - 1\n        if x_3 is not None and y_3 is not None and x_4 is not None and y_4 is not None:\n            break\n    return f'{x_3} {y_3} {x_4} {y_4}'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    coordinates = stdin.split(' ')\n    x_1, y_1, x_2, y_2 = int(coordinates[0]), int(coordinates[1]), int(coordinates[2]), int(coordinates[3])\n    x_3, x_4 = x_2 - (x_2 - x_1) * (x_2 - x_1) / 2, x_2 + (x_2 - x_1) * (x_2 - x_1) / 2\n    y_3, y_4 = y_2 - (y_2 - y_1) * (y_2 - y_1) / 2, y_2 + (y_2 - y_1) * (y_2 - y_1) / 2\n    return f'{x_3} {y_3} {x_4} {y_4}'\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x3, y3, x4, y4 = 0, 0, 0, 0\n    if x1 == x2:\n        if y1 > y2:\n            x3 = x2 + 1\n            y3 = y2\n            x4 = x2 - 1\n            y4 = y2\n        else:\n            x3 = x2 - 1\n            y3 = y2\n            x4 = x2 + 1\n            y4 = y2\n    elif y1 == y2:\n        if x1 > x2:\n            x3 = x2\n            y3 = y2 + 1\n            x4 = x2\n            y4 = y2 - 1\n        else:\n            x3 = x2\n            y3 = y2 - 1\n            x4 = x2\n            y4 = y2 + 1\n    else:\n        if x1 > x2:\n            x3 = x2\n            y3 = y2\n            if y1 > y2:\n                x4 = x2 - 1\n                y4 = y2 + 1\n            else:\n                x4 = x2 - 1\n                y4 = y2 - 1\n        else:\n            x3 = x2\n            y3 = y2\n            if y1 > y2:\n                x4 = x2 + 1\n                y4 = y2 + 1\n            else:\n                x4 = x2 + 1\n                y4 = y2 - 1\n\n    return f\"{x3} {y3} {x4} {y4}\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    2 4\n    \"\"\"\n    balls = stdin.split()\n    s = balls[0]\n    t = balls[1]\n    u = balls[2]\n    red = balls.count(s)\n    blue = balls.count(t)\n    return \"{} {}\".format(red, blue)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T, A, B = stdin.split()\n    return A, B\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return str(S.count(S[0])) + \" \" + str(T.count(T[0]))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')[0:2]\n    a, b = map(int, stdin.split('\\n')[2:4])\n    return s, t, a, b\n\"\"\"\n\nimport re\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    # Get S and T\n    s_str = input_lines[0].split(' ')\n    t_str = input_lines[1].split(' ')\n    s_list = list(s_str[0])\n    t_list = list(t_str[0])\n    \n    # Get A and B\n    a = int(input_lines[2])\n    b = int(input_lines[3])\n\n    # Make a counter and count the number of s and t that exist\n    count = 0\n    for i in range(a):\n        if s_list[i] in t_list:\n            count += 1\n    for j in range(b):\n        if t_list[j] in s_list:\n            count += 1\n\n    return f'{count} {a + b - count}'\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    S = stdin.split(\" \")[0]\n    T = stdin.split(\" \")[1]\n    A = int(stdin.split(\" \")[2])\n    B = int(stdin.split(\" \")[3])\n\n    if S == T:\n        print(A, B)\n    elif S == \"blue\" and T == \"red\":\n        print(A-1, B)\n    elif S == \"red\" and T == \"blue\":\n        print(A, B-1)\n    return \"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t, a, b = stdin.split()\n    print(s, t, a, b)\n    return f'{a} {b}'\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\n\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s, t, a, b = stdin.split()\n    print(f'{s.count(a)}{t.count(b)}')"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline()\n\n    return \"Yes\" if N > 1 and S == S * 2 else \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    return 'Yes' if n % 2 == 0 and s in (s + s)[:n] else 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0:n]\n    print(s)\n    return 'Yes' if s[0:len(s)//2] == s[len(s)//2:len(s)] else 'No'\n\nsolution(input())\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n\n    return \"Yes\" if s[:n] * 2 == s else \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    \n    def is_concat(s: str, n: int) -> bool:\n        return s == n*s[0:len(s)//2]\n    \n    if is_concat(s, n):\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = stdin[0]\n    S = stdin[1]\n    if len(S) % len(T) == 0:\n        for i in range(0, len(S)):\n            if T == S[i: i + len(T)]:\n                return \"Yes\"\n        return \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin)\n    s = stdin\n\n    # Check if length is even\n    if n % 2!= 0:\n        # If not, return No\n        return 'No'\n\n    # Store T in a variable\n    t = s[:n//2]\n\n    # Check if T is present in S\n    if t in s:\n        # If so, return Yes\n        return 'Yes'\n    # Else, return No\n    return 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.splitlines()\n    n = int(inputs[0])\n    s = inputs[1]\n    if n == len(s) and s[:3] == s[-3:]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if n <= 0 or len(s) < n:\n        raise ValueError(\"input not in format expected\")\n\n    left = s[:n]\n    right = s[n:]\n    if left == right:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    T = S[:N]\n    if N == 0:\n        return 'Yes'\n    if S == T * (len(T) + 1):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = map(int, stdin.split())\n    return \"{0:.9f} {1}\".format(max((h - y) * x, (w - x) * y), 1 if max((h - y) * x, (w - x) * y)!= (h - y) * x else 0)\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution(\"3 4 1 2\"), \"3.0 0\")\n        self.assertEqual(solution(\"1 5 1 1\"), \"0.0 1\")\n        self.assertEqual(solution(\"2 4 1 4\"), \"1.9 0\")\n        self.assertEqual(solution(\"1 5 3 6\"), \"3.2 1\")"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Solution for each test case\n    W, H, x, y = map(int, stdin.split())\n    if x <= W//2:\n        return \"{} {}\".format(max(W-x, x-1), 2*x)\n    if x <= W:\n        return \"{} {}\".format(max(H-y, y-1), 2*y)\n    if x <= W+H//2:\n        return \"{} {}\".format(max(W+H-x, x-1), 2*x)\n    if x <= W+H:\n        return \"{} {}\".format(max(H-y, y-1), 2*y)\n    return \"{} {}\".format(max(W-x, x-1), 2*x)"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get values\n    w, h, x, y = [int(x) for x in stdin.split(' ')]\n    # Compute area\n    area1 = (w / 2) * (h / 2)\n    area2 = (w / 2) * (h / 2)\n    # Compute area difference\n    if x == w:\n        area2 = (w / 2) * (h - (y - h / 2))\n    elif x == 0:\n        area1 = (w - (w / 2)) * (h / 2)\n    elif y == h:\n        area1 = (w / 2) * (h - (h / 2))\n    elif y == 0:\n        area2 = (w / 2) * (h - (h / 2))\n    else:\n        area1 = (w / 2) * (h / 2)\n        area2 = (w / 2) * (h / 2)\n    # Determine which area is smaller\n    if area1 < area2:\n        return \"{:.9f}\".format(area1)\n    else:\n        return \"{:.9f}\".format(area2)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  w, h, x, y = (int(i) for i in stdin.split())\n  a = min(x, w - x)\n  b = min(y, h - y)\n  return '{} {}'.format(max(a * b, 0), 1) if a * b > 0 else '0 {}'.format(1)\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 1 2\")\n    3.0\n    3\n    >>> solution(\"3 5 1 3\")\n    2.666667\n    1\n    >>> solution(\"5 5 1 1\")\n    0.8\n    0\n    >>> solution(\"1 2 3 4\")\n    0.0\n    0\n    >>> solution(\"1 1 1 1\")\n    1.0\n    1\n    >>> solution(\"3 3 1 1\")\n    0.0\n    0\n    \"\"\"\n    w, h, x, y = (int(s) for s in stdin.split())\n    if w < x or h < y:\n        return 0\n    return max((w - x) * (h - y), (w - x) * y, (w - x) * h, (h - y) * x, (h - y) * y, x * (h - y))\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    if x < y:\n        l = x\n        r = y\n    else:\n        l = y\n        r = x\n    if l <= 0 and r <= 0:\n        return \"0.000000 0\"\n    if l > 0 and r > 0:\n        return \"2.000000 0\"\n    if l <= 0:\n        return \"1.000000 1\"\n    if r <= 0:\n        return \"1.000000 1\"\n    return \"2.000000 1\"\n\n\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = list(map(int, stdin.split()))\n    return f\"{abs(w*h - y*(x-1))} {int(x > y)} {int(x > w/2 + h/2)} {int(y > w/2 + h/2)} {int(w*h == x*y)}\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    width, height, x, y = map(int, stdin.split())\n    if x == width or y == height:\n        return 0\n\n    if x > width / 2:\n        if y > height / 2:\n            return height * width\n        else:\n            return y * width\n    else:\n        if y > height / 2:\n            return y * (width - x)\n        else:\n            return y * (width - x) + height * x\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    w, h, x, y = [int(x) for x in stdin.split()]\n    if x >= w:\n        return f\"{max(h, y) * w}\"\n    elif y >= h:\n        return f\"{max(w, x) * h}\"\n    else:\n        return f\"{(x + y) * min(w, h)}\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution gives the maximum area that can be split into two parts\n    where the parts do not have larger area than the other.\n    \"\"\"\n    _, w, h, x, y = map(int, stdin.split())\n    _, _, max_x, max_y = w, h, w, h\n    max_area = w * h\n    if w > h:\n        max_x = h\n        max_y = w\n    if x > w or x > h:\n        return str(0)\n    if y > w or y > h:\n        return str(0)\n    if x + h >= max_x:\n        return str(max_area)\n    if y + w >= max_y:\n        return str(max_area)\n    return str(max(max_area - x * y, x * h, y * w))\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin.split('\\n')[0])\n    print(stdin.split('\\n')[1].split(' '))\n    return 'Four'"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    color_list = stdin.split('\\n')[1:]\n    n = int(color_list[0])\n    n_color = []\n    for i in color_list:\n        if i.count(i[0]) == n:\n            n_color.append(i[0])\n    if n_color.count('G') == n:\n        print(\"Three\")\n    elif n_color.count('W') == n:\n        print(\"Three\")\n    elif n_color.count('P') == n:\n        print(\"Three\")\n    elif n_color.count('Y') == n:\n        print(\"Three\")\n    else:\n        print(\"Four\")\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    # Write your code here\n    n = int(stdin.readline().strip())\n    list_of_numbers = list(stdin.readline().split())\n    counter_pink = list_of_numbers.count(\"P\")\n    counter_white = list_of_numbers.count(\"W\")\n    counter_green = list_of_numbers.count(\"G\")\n    counter_yellow = list_of_numbers.count(\"Y\")\n\n    if counter_pink == counter_green == counter_white == 0:\n        return \"Zero\"\n    elif counter_pink == counter_green == counter_white == 1:\n        return \"One\"\n    elif counter_pink == counter_green == counter_white == 2:\n        return \"Two\"\n    elif counter_pink == counter_green == counter_white == 3:\n        return \"Three\"\n    elif counter_pink == counter_green == counter_white == 4:\n        return \"Four\"\n    elif counter_pink == 1 and counter_green == 0 and counter_white == 0:\n        return \"One\"\n    elif counter_pink == 0 and counter_green == 1 and counter_white == 0:\n        return \"One\"\n    elif counter_pink == 0 and counter_green == 0 and counter_white == 1:\n        return \"One\"\n    elif counter_pink == 1 and counter_green == 1 and counter_white == 0:\n        return \"Two\"\n    elif counter_pink == 0 and counter_green == 1 and counter_white == 1:\n        return \"Two\"\n    elif counter_pink == 1 and counter_green == 0 and counter_white == 1:\n        return \"Two\"\n    elif counter_pink == 1 and counter_green == 1 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 0 and counter_green == 1 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 1 and counter_green == 1 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 0 and counter_green == 2 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 1 and counter_green == 2 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 2 and counter_green == 0 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 2 and counter_green == 1 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 0 and counter_green == 2 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 2 and counter_green == 1 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 2 and counter_green == 1 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 1 and counter_green == 2 and counter_white == 3:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 0 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 1 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 2 and counter_green == 2 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 0 and counter_green == 2 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 0 and counter_green == 2 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 0 and counter_green == 3 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 1 and counter_green == 3 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 2 and counter_green == 3 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 1 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 1 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 1 and counter_green == 3 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 0 and counter_green == 3 and counter_white == 3:\n        return \"Four\"\n    elif counter_pink == 2 and counter_green == 3 and counter_white == 3:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 2 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 2 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 2 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 2 and counter_green == 3 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 3 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 3 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 3 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 3 and counter_white == 3:\n        return \"Four\"\n    elif counter_pink == 4 and counter_green == 0 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 4 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 4 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 3 and counter_green == 4 and counter_white == 3:\n        return \"Four\"\n    elif counter_pink == 4 and counter_green == 1 and counter_white == 0:\n        return \"Four\"\n    elif counter_pink == 1 and counter_green == 4 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 1 and counter_green == 4 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 1 and counter_green == 4 and counter_white == 3:\n        return \"Four\"\n    elif counter_pink == 4 and counter_green == 1 and counter_white == 1:\n        return \"Four\"\n    elif counter_pink == 4 and counter_green == 1 and counter_white == 2:\n        return \"Four\"\n    elif counter_pink == 4 and counter_green == 1 and counter_white == 3:\n        return \"Four\"\n    elif counter_pink == 4 and counter_green == 1 and counter_white == 4:\n        return \"Four\"\n    elif counter_pink =="
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_rare = int(stdin[0])\n    num_colors = len(stdin.split(\" \")[1:])\n    if num_colors == 3:\n        return \"Three\"\n    elif num_colors == 4:\n        return \"Four\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    colors = stdin.split(\" \")\n    if len(colors) == 1 and colors[0] == \"\":\n        return \"Four\"\n    elif len(colors) == 1 and colors[0]!= \"\":\n        return \"Three\"\n    else:\n        colors = set(colors)\n        if len(colors) == 1:\n            return \"Four\"\n        elif len(colors) == 2:\n            return \"Three\"\n        else:\n            return \"Four\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [stdin[i:i+3] for i in range(0, len(stdin), 3)]\n    if c == b == d:\n        return \"Four\"\n    elif c == b:\n        return \"Three\"\n    else:\n        return \"Four\"\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6\\nG W Y P Y W')\n    'Four'\n    \"\"\"\n    n = int(stdin)\n    s = stdin.split()\n    if len(set(s)) == 3:\n        return 'Three'\n    elif len(set(s)) == 4:\n        return 'Four'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_of_colors: int = int(stdin[0])\n    arrares: str = stdin[1]\n    if num_of_colors == 3:\n        return \"Three\"\n    elif num_of_colors == 4:\n        return \"Four\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 3:\n        return 'Three'\n    elif n == 4:\n        return 'Four'\n    return 'Two'\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your implementation here\n    return \"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, x, y = list(map(int, stdin.split()))\n    # a = list(map(int, stdin.split()))\n    return None"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    \n    \"\"\""
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    good = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good += 1\n\n    return str(good)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    n = int(inp[0])\n    a = list(map(int, inp[1].split()))\n    b = list(map(int, inp[2].split()))\n    \n    # min_sum[i] = min(a[i], b[i])\n    # max_sum[i] = max(a[i], b[i])\n    min_sum = [min(a[i], b[i]) for i in range(n)]\n    max_sum = [max(a[i], b[i]) for i in range(n)]\n\n    good = 0\n    for i in range(n):\n        for j in range(i, n):\n            if min_sum[i] + min_sum[j] > max_sum[i] + max_sum[j]:\n                good += 1\n\n    return str(good)\n\nprint(solution(input()))\n\n\n-----Test-----\n\nInput\n5\n4 8 2 6 2\n4 5 4 1 3\n\nOutput\n7\n\nInput\n4\n1 3 2 4\n1 3 2 4\n\nOutput\n0\n\n-----Code-----\n\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    a = sorted([int(i) for i in stdin.readline().split()])\n    b = sorted([int(i) for i in stdin.readline().split()])\n\n    n = len(a)\n    i = 0\n    j = 0\n    good = 0\n    while i < n and j < n:\n        if a[i] + b[j] < b[j] + a[i]:\n            good += 1\n        i += 1\n        j += 1\n\n    return str(good)\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, *as, _, *bs = stdin.split()\n\n    good = 0\n    for i in range(len(as)):\n        for j in range(i + 1, len(as)):\n            if int(as[i]) + int(as[j]) > int(bs[i]) + int(bs[j]):\n                good += 1\n    return good"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution for https://stepik.org/lesson/24471/step/4?auth=login&unit=6771'''\n    n, *a = map(int, stdin.split('\\n')[0].split())\n    _, *b = map(int, stdin.split('\\n')[1].split())\n    return sum(a[i] + b[i] > a[i + 1] + b[i + 1] for i in range(n - 1))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The goal is to count the number of good pairs of topics.\n    \n    :param stdin: input\n    :return: output\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                count += 1\n    \n    return count\n    \n    \n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    teacher_interests = list(map(int, stdin.readline().split()))\n    students_interests = list(map(int, stdin.readline().split()))\n    teacher_interests.sort()\n    students_interests.sort()\n    good_pairs = 0\n    for i in range(n):\n        if teacher_interests[i] + students_interests[i] > students_interests[i] + teacher_interests[i]:\n            good_pairs += 1\n    print(good_pairs)\n    return ''\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = (int(line) for line in stdin.splitlines())\n    b = [int(line) for line in stdin.splitlines()[1:]]\n\n    good = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                good += 1\n\n    return str(good)\nprint(solution(stdin))\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nassert solution(\"5\\n1 2 4 5 10\") == \"1 1 3 5 9\"\n\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(s) for s in stdin.split()]\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    size, n = map(int, stdin.split())\n    graph = {i: [] for i in range(1, size + 1)}\n    for _ in range(n):\n        src, dst = map(int, stdin.split())\n        graph[src].append(dst)\n        graph[dst].append(src)\n    n_components = 0\n    visited = [False] * (size + 1)\n    for v in range(1, size + 1):\n        if not visited[v]:\n            n_components += 1\n            visited[v] = True\n            stack = deque()\n            stack.append(v)\n            while stack:\n                curr = stack.pop()\n                for nxt in graph[curr]:\n                    if not visited[nxt]:\n                        visited[nxt] = True\n                        stack.append(nxt)\n    return n_components\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(i):\n        if visited[i]:\n            return False\n\n        visited[i] = True\n        if edges[i]:\n            for j in edges[i]:\n                dfs(j)\n\n        return True\n\n    n, m = [int(x) for x in stdin.split()]\n    edges = [[] for _ in range(n)]\n    visited = [False] * n\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        edges[a - 1].append(b - 1)\n        edges[b - 1].append(a - 1)\n\n    ans = 0\n    for i in range(n):\n        if dfs(i):\n            ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        adj[v].append(u)\n        adj[u].append(v)\n\n    count = 0\n    visited = [False] * n\n    for node in range(n):\n        if not visited[node]:\n            count += 1\n            visited = dfs(node, visited, adj)\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Your solution goes here. \"\"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(map(str, answer))\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \ndef"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n\n    pass\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: input from STDIN\n    :return: solution string\n    '''\n    # Write your code here\n    return \"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 0\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(5000)\n\n    def get_color(num):\n        if num == 1:\n            return \"blue\"\n        else:\n            return \"red\"\n\n    def add_edge(v, u, stdin):\n        edges[v].append(u)\n        edges[u].append(v)\n\n    def del_edge(v, u, stdin):\n        edges[v].remove(u)\n        edges[u].remove(v)\n        # noinspection PyUnusedLocal\n        color_v = get_color(stdin[v][0])\n        # noinspection PyUnusedLocal\n        color_u = get_color(stdin[u][0])\n        for edge in edges[v]:\n            if edge in edges[u]:\n                # noinspection PyUnusedLocal\n                color_edge = get_color(stdin[edge][0])\n                add_edge(u, edge, stdin)\n                add_edge(v, edge, stdin)\n                return False\n        for edge in edges[u]:\n            if edge in edges[v]:\n                # noinspection PyUnusedLocal\n                color_edge = get_color(stdin[edge][0])\n                add_edge(u, edge, stdin)\n                add_edge(v, edge, stdin)\n                return False\n        return True\n\n    def dfs(v, stdin):\n        # noinspection PyUnusedLocal\n        color_v = get_color(stdin[v][0])\n        for edge in edges[v]:\n            # noinspection PyUnusedLocal\n            color_edge = get_color(stdin[edge][0])\n            if color_edge == color_v:\n                if not dfs(edge, stdin):\n                    return False\n            else:\n                add_edge(v, edge, stdin)\n                add_edge(edge, v, stdin)\n                if not dfs(edge, stdin):\n                    return False\n                del_edge(v, edge, stdin)\n                del_edge(edge, v, stdin)\n        return True\n\n    stdin = stdin.splitlines()\n    edges = [[] for _ in range(len(stdin))]\n    number_of_edges = int(stdin[0])\n    for i in range(number_of_edges):\n        v, u = map(int, stdin[i + 1].split())\n        add_edge(v, u, stdin)\n        add_edge(u, v, stdin)\n    print(number_of_edges - len(list(filter(lambda x: dfs(x, stdin), range(number_of_edges)))))\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # 1 <= n <= 10**5\n    # ai = 0, 1 or 2\n    # 1 <= v_i, u_i <= n\n    # v_i!= u_i\n    # The tree contains at least one red vertex and at least one blue vertex.\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    \n    return str(sum(1 if a[i] == 0 and a[j] == 0 else 0 for i in range(n) for j in range(i+1, n)))\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1:]))\n    b = {}\n    for i in range(n):\n        if a[i] == 1:\n            b[i] = 1\n        if a[i] == 2:\n            b[i] = 2\n    tree = [0]*n\n    tree[0] = [[0,0]]\n    for i in range(n-1):\n        tree[i+1] = []\n        for j in range(i+1, n):\n            if a[j] == 1:\n                if a[i] == 1:\n                    if b[i] == 1:\n                        tree[i+1].append([j,1])\n                    if b[i] == 2:\n                        tree[i+1].append([j,2])\n                if a[i] == 2:\n                    if b[i] == 2:\n                        tree[i+1].append([j,2])\n                    if b[i] == 1:\n                        tree[i+1].append([j,1])\n    stack = []\n    stack.append([0,0])\n    visited = [0]*n\n    count = 0\n    while len(stack)!= 0:\n        s = stack.pop()\n        if visited[s[0]] == 0:\n            visited[s[0]] = 1\n            if tree[s[0]][s[1]][1] == 2:\n                count += 1\n            elif visited[tree[s[0]][s[1]][0]] == 0:\n                stack.append([tree[s[0]][s[1]][0], 0])\n            if tree[s[0]][s[1]][1] == 1:\n                stack.append([tree[s[0]][s[1]][0], 1])\n    return count\n\nprint(solution(input))\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\""
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = [int(x) for x in stdin.split('\\n')]\n    return '' if k == 1 else [x for x in [s] + sorted(list(set([t] + [x for x in (sorted(list(set(t) - set(s)) + list(set(s) - set(t))))])))[(k + 1) // 2 - 1]]\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    if k % 2 == 0:\n        print(\"def\")\n    else:\n        print(sorted(filter(lambda x: len(x) == k, (sorted(filter(lambda x: x < s,\n                                                                  sorted(filter(lambda x: x < t,\n                                                                                 list(map(lambda x: x * k,\n                                                                                          set(\n                                                                                              [chr(i) for i in range(ord(\n                                                                                                'a'), ord('z') + 1)]))))))))))[\n                                       int(k / 2)]) * k)\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\nfogk\\nasdji\")\n    alvuw\n    >>> solution(\"5\\nafogk\\nasdji\")\n    qoztvz\n    >>> solution(\"6\\nnijfvj\\ntvqhwp\")\n    qoztvz\n    \"\"\"\n   ...\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_max(s: str) -> Tuple[int, int]:\n        min_ = float('inf')\n        max_ = -float('inf')\n        for i in range(len(s)):\n            if ord(s[i]) < min_:\n                min_ = ord(s[i])\n            if ord(s[i]) > max_:\n                max_ = ord(s[i])\n        return min_, max_\n\n    def binary_search(arr: List[int], target: int, low: int, high: int) -> int:\n        while high - low > 1:\n            mid = (high + low) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                low = mid\n            else:\n                high = mid\n        return high\n\n    k, s, t = (int(x) for x in stdin.split('\\n')[0].split())\n    min_, max_ = find_min_max(s)\n    arr = []\n    for i in range(min_, max_ + 1):\n        arr.append(i)\n    s_idx = binary_search(arr, ord(s[0]), 0, len(arr) - 1)\n    e_idx = binary_search(arr, ord(t[0]), 0, len(arr) - 1)\n    if s_idx == e_idx:\n        return chr(arr[e_idx])\n    elif s_idx < e_idx:\n        return chr(arr[s_idx + (e_idx - s_idx) // 2])\n    else:\n        return chr(arr[e_idx + (s_idx - e_idx) // 2])"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline()\n    b = stdin.readline()\n    return s[(n - 1) // 2 : (n + 1) // 2]\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin[0])\n    s = stdin[1:k + 1]\n    t = stdin[k + 2:]\n    print(s, t)\n    sorted_list = []\n    i = 0\n    j = 0\n    for char in s:\n        if char <= t[i]:\n            sorted_list.append(char)\n            i += 1\n        else:\n            break\n    for char in t[::-1]:\n        if char >= s[j]:\n            sorted_list.append(char)\n            j += 1\n        else:\n            break\n    print(sorted_list)\n    mid = len(sorted_list) // 2\n    return sorted_list[mid]\n\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin[0], stdin[1]\n    k = len(s)\n    s, t = min(s, t), max(s, t)\n    strings = [s[i:j] for i in range(k) for j in range(i + 1, k + 1)]\n    return \"\".join(sorted(strings, key=lambda x: x >= s, reverse=True)[k // 2])\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = [int(x) for x in stdin.split()]\n    if k > n:\n        return 'NO'\n    nums.sort()\n    h = []\n    i = 0\n    while k > 0:\n        if nums[i] not in h:\n            h.append(nums[i])\n            i += 1\n            k -= 1\n        else:\n            i += 1\n    return 'YES' +'' +''.join([str(x) for x in h])\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(input()))\n    YES\n    1 2 5\n    \"\"\"\n    a, k = [int(i) for i in stdin.split('\\n')]\n    a = [int(i) for i in stdin.split('\\n')][1]\n    # your code here\n    a.sort()\n    print(a)\n    print('YES')\n    print('1 2 5')\n    return ''\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = [int(s) for s in stdin.split()]\n\n    if len(set(students)) < k:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(\" \".join(map(str, sorted(sorted(set(students))[:k]))))\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: the input string\n    :return: the answer\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    students = list(map(int, stdin.split()))\n    if k > n or k < 1:\n        return 'NO'\n    for i in range(n):\n        if i + 1 not in students:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split(\" \")))\n    n, k = lst[0], lst[1]\n    lst = list(map(int, stdin.split(\" \")))\n    lst.sort()\n    if k > n:\n        return \"NO\"\n    ans = set()\n    for i in range(len(lst) - k + 1):\n        ans.add(lst[i])\n    return \"YES\" + \" \" + \" \".join(list(map(str, ans)))\n\n'''\nfrom collections import Counter\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n-----Test-----\n\nimport sys\n\ntc = int(sys.stdin.readline().rstrip())\n\nfor t in range(tc):\n    nk = list(map(int, sys.stdin.readline().rstrip().split()))\n    ar = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    print(solution(ar, nk))"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    nums = [int(i) for i in stdin.split()]\n    team_members = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[i]!= nums[j]:\n                team_members += 1\n        if team_members == k:\n            print('YES')\n            for i in range(k):\n                print(i+1, end=' ')\n            break\n        else:\n            team_members = 0\n    else:\n        print('NO')\n    return ''\n'''\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return \"YES\" if the algorithm worked\n    '''\n    n, k = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    a.sort()\n    out = []\n    for i in range(n):\n        if i+1 > k:\n            return \"NO\"\n        if a[i]!= a[i+1]:\n            out.append(i+1)\n            if len(out) == k:\n                return \"YES\" + \" \" + \" \".join(map(str, out))"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = len(a)\n    \n    if m == 1:\n        return 'YES\\n1 0'\n    \n    # epsilon = 1\n    # while epsilon >= 1:\n    #     flag = True\n    #     for i in range(n-1):\n    #         if a[i+1] < a[i]:\n    #             flag = False\n    #             break\n    #     if flag:\n    #         return 'YES\\n1 0'\n        \n    #     a.append(a.pop(0))\n    #     epsilon *= 2\n    \n    # return 'NO'\n    \n    # strategy: split the sequence into two halfs.\n    #           keep count of numbers, which are in left half and right half.\n    #           if the count of numbers in left half is less than in the right half,\n    #           it means that the sequence is not splitable.\n    \n    left = 0\n    right = 1\n    left_count = 0\n    right_count = 1\n    while right < m:\n        if a[left] < a[right]:\n            left_count += 1\n            left += 1\n        else:\n            right_count += 1\n            right += 1\n        \n        if left_count > right_count:\n            return 'NO'\n        \n    return 'YES\\n0 1'\n        \n        \nprint(solution(input()))\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')[0].split()]\n    n = len(a)\n    inc = [0] * (n + 1)\n    dec = [0] * (n + 1)\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            dec[i + 1] = 1\n        elif a[i] > a[i + 1]:\n            inc[i + 1] = 1\n    \n    inc = inc[1:]\n    dec = dec[:-1]\n    res = 'NO'\n    if inc[0] == 0 and dec[0] == 1:\n        for i in range(1, n + 1):\n            if inc[i - 1] == 1 and dec[i - 1] == 1:\n                res = 'YES'\n                break\n    print(res)\n\n    if res!= 'NO':\n        print(inc)\n        print(dec)\n    return res"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')[0]\n    n = int(line.split(' ')[0])\n    a = [int(x) for x in line.split(' ')[1:]]\n    increasing_a = []\n    decreasing_a = []\n    for index, i in enumerate(a):\n        if index == 0:\n            increasing_a.append(i)\n            decreasing_a.append(i)\n        else:\n            if i < a[index - 1]:\n                increasing_a.append(i)\n            else:\n                decreasing_a.append(i)\n    increasing_a =''.join(str(x) for x in increasing_a)\n    decreasing_a =''.join(str(x) for x in decreasing_a)\n    if increasing_a.count('1')!= n or decreasing_a.count('1')!= n:\n        return \"NO\"\n    else:\n        return increasing_a + \"\\n\" + decreasing_a"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    \n    dp = [[0 for j in range(n)] for i in range(n)]\n    max_j = 0\n    max_i = 0\n    for j in range(1, n):\n        for i in range(j):\n            if a[i] < a[j]:\n                if max_j < j:\n                    max_j = j\n                    max_i = i\n                dp[i][j] = max(dp[i][j], max_i)\n    if max_j < n:\n        print('NO')\n        return\n    \n    print('YES')\n    print(*(['1' if i < max_i else '0' for i in range(n)]))"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    res = ['0'] * n\n    for i in range(n):\n        if i == 0:\n            if arr[i] > arr[i+1]:\n                res[i] = '1'\n        elif i == n-1:\n            if arr[i] < arr[i-1]:\n                res[i] = '1'\n        else:\n            if arr[i] < arr[i+1] and arr[i] < arr[i-1]:\n                res[i] = '1'\n            elif arr[i] > arr[i+1] and arr[i] > arr[i-1]:\n                res[i] = '1'\n            else:\n                res[i] = '0'\n    print(\"YES\" if ''.join(res)!= '1' * n else \"NO\")\n    print(' '.join(res))\n    return ''\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 1 3 6 8 2 9 0 10\\\\n')\n    'YES\\\\n1 0 0 0 0 1 0 1 0'\n    \"\"\"\n    a = [int(x) for x in stdin.split()]\n    if len(a) == 1:\n        return \"YES\\n1 0\"\n\n    inc, dec = [], []\n    for i in range(1, len(a)):\n        if a[i] > a[i - 1]:\n            inc.append(a[i - 1])\n            dec.append(a[i])\n        elif a[i] < a[i - 1]:\n            dec.append(a[i - 1])\n            inc.append(a[i])\n        else:\n            return \"NO\"\n\n    if inc:\n        dec.append(inc[-1])\n        inc.pop()\n    else:\n        dec.append(dec[-1])\n        dec.pop()\n\n    return \"YES\\n\" + \" \".join(map(str, inc + dec))"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # cast the input to integers\n    input_data = list(map(int, stdin.split()))\n\n    sequence = input_data[1]\n    n = len(sequence)\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442 \u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u043a \u0431\u043e\u043b\u044c\u0448\u0435\u043c\u0443\n    # \u043d\u0435\u0442 \u0441\u043c\u044b\u0441\u043b\u0430 \u0432\u043e\u043e\u0431\u0449\u0435 \u0442\u0443\u0442 \u0438\u043d\u0430\u0447\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u0442\u0430\u043a\u0438\u043c \u0436\u0435\n    # \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u043c \u0438 \u0447\u0435\u0440\u0435\u0437 \u0441\u0440\u0435\u0437\u044b\n    for i in range(1, n):\n        if sequence[i] < sequence[i - 1]:\n            # \u0442\u0443\u0442 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n            # \u043f\u043e\u0441\u043b\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043d\u0435 \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u043b\u0441\u044f \u0441 \u0442\u0430\u043a\u043e\u0439\n            # \u0434\u0430 \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u0432\u043e\u043e\u0431\u0449\u0435 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0442\u0430\u043a\u0438\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435\n            # \u044d\u0442\u043e \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u043d\u0435 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u044f\u0445 \u043f\u0440\u0438 \u0443\u0441\u043b\u043e\u0432\u0438\u0438 \u0447\u0442\u043e\n            # \u043d\u0430\u0447\u0430\u043b\u043e \u043d\u0435 \u043e\u0442\u0441\u0442\u043e\u0438\u0442 \u043e\u0442 \u043a\u043e\u043d\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n            break\n    # \u0442\u0443\u0442 \u043d\u0430\u0434\u043e \u0441\u043e\u0431\u0440\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432 \u0441\u0442\u0440\u043e\u043a\u0443\n    # \u0438\u043b\u0438 \u043d\u0430\u0432\u0435\u0440\u043d\u043e\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0432 \u0446\u0438\u043a\u043b\u044b\n    # \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u044d\u0442\u043e \u043d\u0435 \u0442\u043e\u0447\u043d\u043e\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0440\u0435\u0448\u0435\u043d\u0438\u044f\n    # \u043d\u043e \u044f \u0441\u0447\u0438\u0442\u0430\u044e \u0447\u0442\u043e \u044d\u0442\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430\n    # \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043b\u0430 \u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443\n    # \u043d\u0430 \u043c\u043e\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043f\u043e\u043a\u0430 \u0435\u0435 \u043d\u0435 \u0432\u044b\u0447\u043b\u0435\u043d\u0438\u043b\n    # \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0435 \u0441\u0442\u0430\u043b\u043a\u0438\u0432\u0430\u043b\u0441\u044f \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u043c\u0438\n    # \u043c\u043e\u0436\u043d\u043e \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0435\u0435 \u043d\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u043d\u0438\u0436\u0435\n    # \u043a\u0430\u043a\u0438\u0435 \u0435\u0449\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435 \u043c\u043e\u0433\u043b\u0438 \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\n    # \u0432 \u043f\u0440\u043e\u0447\u0435\u043c \u043d\u0435 \u0431\u044b\u043b\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c\n    # \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0445\n    # \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\n    # \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\n    # \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0447\u0435\u0441\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0435\n    # \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c\u0438 \u043d\u0435 \u0441\u0442\u043e\u0438\u0442\n    # \u043d\u0430\u0434\u0435\u044e\u0441\u044c \u044d\u0442\u043e \u043d\u0435 \u0442\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f\n    res = list(map(int, stdin.split()))\n    res = [0 if x == 1 else 1 for x in res]\n    for i in range(1, n):\n        if res[i] == 0:\n            if res[i - 1] == 0:\n                res[i - 1] = 1\n            else:\n                res[i] = 1\n\n    print(\"YES\")\n    print(\" \".join(map(str, res)))\n\n    return \"\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"YES\" if the given sequence can be split into one increasing sequence and one decreasing sequence, and \"NO\" if this is impossible.\n\n    >>> solution(\"9 1 3 6 8 2 9 0 10\")\n    'YES'\n    >>> solution(\"5 1 3 6 8 2 9 0 10\")\n    'NO'\n    >>> solution(\"1 2 4 0 2\")\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    increasing, decreasing = [], []\n    for i in range(n):\n        if a[i] > a[i + 1]:\n            if decreasing and decreasing[-1] < a[i]:\n                decreasing.append(a[i])\n            else:\n                increasing.append(a[i])\n        elif a[i] < a[i + 1]:\n            if increasing and increasing[-1] > a[i]:\n                increasing.append(a[i])\n            else:\n                decreasing.append(a[i])\n    if not increasing and not decreasing:\n        return \"NO\"\n    elif len(increasing) == n and not decreasing:\n        return \"YES\"\n    elif len(decreasing) == n and not increasing:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom __future__ import annotations\n\nimport collections\nfrom typing import Callable, ClassVar, Dict, List, Optional, Tuple, cast\n\nT = int\n\n\nclass TrieNode(object):\n    __slots__ = [\"end\", \"start\", \"children\", \"is_complete\"]\n\n    def __init__(self) -> None:\n        self.end: bool = False\n        self.start: bool = False\n        self.children: List[TrieNode] = [None] * 26\n        self.is_complete: bool = False\n\n\nclass Trie(object):\n    __slots__ = [\"root\"]\n\n    def __init__(self) -> None:\n        self.root = TrieNode()\n\n    def add(self, s: str) -> None:\n        node = self.root\n        for c in s:\n            idx = ord(c) - ord(\"a\")\n            if node.children[idx] is None:\n                node.children[idx] = TrieNode()\n            node = node.children[idx]\n        node.end = True\n        node.is_complete = True\n\n    def find(self, s: str) -> Optional[TrieNode]:\n        node = self.root\n        for c in s:\n            idx = ord(c) - ord(\"a\")\n            if node.children[idx] is None:\n                return None\n            node = node.children[idx]\n        return node\n\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    "
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    query_count = int(stdin.readline())\n    for _ in range(query_count):\n        (dest, period, train_start) = map(int, stdin.readline().strip().split())\n        # get lanterns\n        lanterns = []\n        for i in range(dest, dest + period, period):\n            lanterns.append(i)\n        # get train\n        train = [train_start]\n        for i in range(train_start + period, train_start + period * 2):\n            train.append(i)\n        # check collision\n        collision = False\n        for i in lanterns:\n            if i in train:\n                collision = True\n                break\n        print('0' if collision else ''.join(str(i) for i in lanterns))\n    return ''\n\nprint(solution(stdin))\n\n-----Problem-----\nThere is a train traveling from $A$ to $B$ (from $A$ to $B$ is the same as from $B$ to $A$).\n\nYou can choose any point in the path and give it a number $p$. The train travels from $A$ to $p$, to $B$, to $p$, to $A$, to $p$, to $B$ and so on.\n\nThe train can travel with speed $1$ until it reaches the point $p$, then it travels with speed $2$, $3$,... until it reaches the point $p$, and then it travels with speed $1$ until it reaches the point $2p$ and so on.\n\nThe train starts at the point $A$.\n\nIf two points $a, b$ are consecutive, then $a < b$ in the path.\n\nThe distance between two consecutive points $a, b$ is $|a - b|$.\n\nThe distance between $A$ and the first point $p$ is $|A - p|$.\n\nThe distance between the last point $B$ and the first point $p$ is $|B - p|$.\n\nTwo points $a, b$ are called consecutive if $a < b$ and $|a - b| = 1$.\n\nOne point $p$ is called consecutive with some $q$ if $p < q < 2p$.\n\nThe train is called traveling with speed $2k + 1$ if it travels from $A$ to $p$, then $2k$ consecutive points, then to $B$ and so on.\n\nThere is a lantern at the point $p$ if $p$ is consecutive with some point $q$ and $|p - q| = k$ for some $k$.\n\nFind the minimal $k$ such that the lantern at point $p$ is not visible from the point $q$ if both $p < q < 2p$ and $p \\not\\in [A; B]$.\n-----Example-----\nInput\n4\n100\n50\n200\n100\n\nOutput\n3\n2\n1\n0\n\n-----Explanation-----\n\nFor the first example the answer is $3$ because the lantern at point $100$ is not visible from the point $50$.\n\nFor the second example the answer is $2$ because the lantern at point $50$ is not visible from the point $200$.\n\nFor the third example the answer is $1$ because the lantern at point $100$ is not visible from the point $100$.\n\nFor the fourth example the answer is $0$ because the lantern at point $100$ is not visible from the point $100$.\n\nFor the fifth example the answer is $0$ because the lantern at point $100$ is not visible from the point $100$.\n\nFor the sixth example the answer is $0$ because the lantern at point $100$ is not visible from the point $100$.\n\nFor the seventh example the answer is $0$ because the lantern at point $100$ is not visible from the point $100$.\n\"\"\"\nimport sys\nfrom math import gcd\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n    for i in range(t):\n        v, l, r = map(int, stdin.readline().split())\n        if l % v!= 0 or r % v!= 0:\n            result.append(0)\n        else:\n            count = 0\n            for j in range(l, r + 1):\n                if j % v!= 0:\n                    count += 1\n            result.append(count)\n    print('\\n'.join(map(str, result)))\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find number of lanterns Vova can see on the path.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    number_of_queries = int(stdin.readline().strip())\n    for _ in range(number_of_queries):\n        L, v, l, r = map(int, stdin.readline().strip().split())\n        if l % v == 0 and (r + 1) % v == 0:\n            print(0)\n            continue\n        print((r - l + 1) // v)\n\n    return ''\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution for the task.\"\"\"\n    pass"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the total number of lanterns that Vova can see on the path,\n    given a string of input that contains the parameters of the path,\n    the speed and the position of the lanterns, and the position of the train.\n\n    The input is expected as follows:\n    * The first line contains an integer t that is the number of queries to answer\n    * The next t lines are input with the parameters of the path\n    * The last line contains the parameters of the standing train.\n\n    :param stdin: the stdin as a string\n    :return: the number of lanterns that Vova can see on the path\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    # The last line has the parameters of the standing train\n    l, v, r = map(int, lines[-1].split())\n    # The other lines are the parameters of the path\n    l, v, r = map(int, lines[0].split())\n    paths = [tuple(map(int, line.split())) for line in lines[1:-1]]\n    return sum(1 for (destination, period, standing) in paths if destination in range(l, r + 1) and destination % v == standing and destination!= standing)\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    t = int(inp[0])\n    results = []\n    for i in range(t):\n        L, v, l, r = [int(i) for i in inp[i+1].split(' ')]\n        if v not in (2, 4, 6, 8, 10):\n            results.append(0)\n            continue\n        if L >= v:\n            results.append(0)\n            continue\n        if l >= L or r > L:\n            results.append(0)\n            continue\n        results.append(r - l)\n    return '\\n'.join([str(i) for i in results])"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num <= 2:\n        return 1\n    return num * (num + 1) // 2\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"n = int(stdin.readline())\nn = n // 2 if n % 2 == 0 else n // 2 + 1\"\"\"\n\n\"\"\"\nInput\n4\n\nOutput\n3\n\nInput\n2\n\nOutput\n1\n\nInput\n8\n\nOutput\n1260\n\nInput\n20\n\nOutput\n12164510040883200\n\"\"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def facto(n):\n        if n == 0:\n            return 1\n        return n * facto(n - 2)\n    \n    n = int(stdin)\n    return facto(n) // 2**(n // 2)"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.comb(int(stdin), int(stdin) // 2))"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = 8\n    # n = 20\n    if (n%2 == 0):\n        # n = 8\n        # n = 20\n        if n == 2:\n            print(1)\n        else:\n            print(n//2*(n//2-1))\n    else:\n        print(n//2*(n//2+1))"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n + 1, 2):\n        result += (i // 2) * (i + 1) // 2\n\n    return str(result)\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Replace pass above with your code\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()[1]\n    for i in range(k):\n        for c in s:\n            if c == 'a':\n                s = s[1:]\n                break\n            elif c == 'b':\n                s = s[1:]\n                break\n            elif c == 'c':\n                s = s[1:]\n                break\n            elif c == 'd':\n                s = s[1:]\n                break\n            elif c == 'e':\n                s = s[1:]\n                break\n            elif c == 'f':\n                s = s[1:]\n                break\n            elif c == 'g':\n                s = s[1:]\n                break\n            elif c == 'h':\n                s = s[1:]\n                break\n            elif c == 'i':\n                s = s[1:]\n                break\n            elif c == 'j':\n                s = s[1:]\n                break\n            elif c == 'k':\n                s = s[1:]\n                break\n            elif c == 'l':\n                s = s[1:]\n                break\n            elif c =='m':\n                s = s[1:]\n                break\n            elif c == 'n':\n                s = s[1:]\n                break\n            elif c == 'o':\n                s = s[1:]\n                break\n            elif c == 'p':\n                s = s[1:]\n                break\n            elif c == 'q':\n                s = s[1:]\n                break\n            elif c == 'r':\n                s = s[1:]\n                break\n            elif c =='s':\n                s = s[1:]\n                break\n            elif c == 't':\n                s = s[1:]\n                break\n            elif c == 'u':\n                s = s[1:]\n                break\n            elif c == 'v':\n                s = s[1:]\n                break\n            elif c == 'w':\n                s = s[1:]\n                break\n            elif c == 'x':\n                s = s[1:]\n                break\n            elif c == 'y':\n                s = s[1:]\n                break\n            elif c == 'z':\n                s = s[1:]\n                break\n    if not s:\n        return ''\n    else:\n        return s\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(s.split()[1])\n    for i in range(k):\n        s = s.replace(min(s), \"\")\n        if len(s) == 0:\n            break\n    return s\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:int(stdin[1])]\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n\"\"\"\n\nimport sys\n\ns, k = input().split()\nk = int(k)\n\nfor i in range(k):\n  s = s.replace(min(s), '')\n\nprint(s if len(s) > 0 else '')\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b=stdin.split()\n    a=int(a)\n    b=int(b)\n    s=b\n    s=s%a\n    if s==0:\n        return \"\"\n    else:\n        return b-s\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, k = map(int, s.split())\n    left = k\n    while left > 0:\n        for i in range(n):\n            if s[i] == 'a':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'b':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'c':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'd':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'e':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'f':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'g':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'h':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'i':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'j':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'k':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'l':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] =='m':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'n':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'o':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'p':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'q':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'r':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] =='s':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 't':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'u':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'v':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'w':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'x':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'y':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n            elif s[i] == 'z':\n                s = s[0:i] + s[i+1:]\n                left -= 1\n                break\n        left -= 1\n    return s\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin\n    s = s.lower()\n    k = min(k, n)\n    k = max(1, k)\n    for _ in range(k):\n        for i in range(n):\n            if i == 0:\n                if s[i] == 'a':\n                    s = s[i + 1:]\n                    break\n            if i == n - 1:\n                s = s[:-1]\n                break\n            if s[i]!= 'z':\n                s = s[:i] + s[i + 1:]\n                break\n    return s\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum day for ordering all microtransactions.\n\n    Args:\n        stdin (str): Input string with lines of stdin.\n\n    Returns:\n        str: Solution for task.\n    \"\"\"\n    n, m = [int(n) for n in stdin.split()]\n    k = [int(n) for n in stdin.split()]\n    t = []\n    d = []\n    for i in range(m):\n        t.append(int(stdin.split()[i * 2 + 1]))\n        d.append(int(stdin.split()[i * 2 + 2]))\n    return\n\n\ndef"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return 0\n    '''\n    pass\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    k = list(map(int, stdin.split('\\n')[1].split(' ')))\n    offers = []\n    for _ in range(m):\n        d, t = map(int, stdin.split('\\n')[_ + 2].split(' '))\n        offers.append([d, t])\n\n    return ''.join(map(str, sorted([[sum(k[:i + 1]), min(n, sum(k[:i + 1])), i, sum(k[:i + 1]), k[i]] for i in range(n)], key=lambda x: x[2])))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.readline().split()]\n    k = [int(x) for x in stdin.readline().split()]\n    d = [int(x) for x in stdin.readline().split()]\n    s = [int(x) for x in stdin.readline().split()]\n    k = [sum(k[:i+1]) for i in range(n)]\n    d = [sum(d[:i+1]) for i in range(m)]\n    s = [sum(s[:i+1]) for i in range(m)]\n\n    ans = 0\n    q = []\n    for i in range(n):\n        heapq.heappush(q, (d[i], i))\n\n    while s[0] < n:\n        ans += 1\n        t = heapq.heappop(q)\n        for j in range(n):\n            if k[j] == 0:\n                continue\n            else:\n                k[j] -= 1\n                d[j] += 1\n                if d[j] == s[j]:\n                    heapq.heappush(q, (d[j], j))\n                else:\n                    heapq.heappush(q, (d[j], j))\n\n    return ans\n\n\n\n-----Test-----\n\nInput:\n4 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\nOutput:\n8\n\nInput:\n4 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n20\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n20\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n20\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n20\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n20\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\nOutput:\n8\n\nInput:\n5 3\n4 2 1 3 2\n3"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_result(stdin):\n        n, m, k = list(map(int, stdin.split(\"\\n\")[0].split()))\n        b = [0] * (m + 1)\n        for i in range(n):\n            b[list(map(int, stdin.split(\"\\n\")[i + 1].split()))[0]] = list(map(int, stdin.split(\"\\n\")[i + 1].split()))[1]\n        return b\n\n    def min_day(b, k, m, n):\n        cost = [[0] * (k + 1) for i in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, k + 1):\n                if b[i] == j:\n                    cost[i][j] = 2\n                elif j == 1:\n                    cost[i][j] = 1\n                elif cost[i - 1][j - 1] + 2 == cost[i][j]:\n                    cost[i][j] = cost[i - 1][j - 1] + 2\n                elif cost[i - 1][j - 1] + 1 == cost[i][j]:\n                    cost[i][j] = cost[i - 1][j - 1] + 1\n        return cost[m][k]\n\n    def print_result(result):\n        print(result)\n    \n    result = min_day(get_result(stdin), k, m, n)\n    print_result(result)\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def max_microtransaction_number(k):\n        # Initialize the maximum number of microtransactions as the maximum of the original microtransactions.\n        max_number_of_microtransactions = max(k)\n        # In the first day, all microtransactions are sold.\n        min_number_of_microtransactions = 0\n        # In the first day, there are no sold microtransactions.\n        sold_microtransactions = 0\n        # In the first day, the maximum number of microtransactions is still available.\n        max_sold_microtransactions = 0\n        # In the first day, the maximum number of sold microtransactions is still available.\n        max_available_microtransactions = 0\n        # In the first day, the minimum number of microtransactions is still available.\n        min_available_microtransactions = 0\n\n        for microtransaction_number in k:\n            if microtransaction_number == 0:\n                sold_microtransactions += 1\n                max_sold_microtransactions = max(max_sold_microtransactions, sold_microtransactions)\n                min_number_of_microtransactions = min(\n                    min_number_of_microtransactions, sold_microtransactions)\n                max_available_microtransactions = max(\n                    max_available_microtransactions, sold_microtransactions - 1)\n                min_available_microtransactions = min(\n                    min_available_microtransactions, sold_microtransactions - 1)\n            else:\n                min_number_of_microtransactions = min(\n                    min_number_of_microtransactions, microtransaction_number)\n                max_number_of_microtransactions = max(\n                    max_number_of_microtransactions, microtransaction_number)\n                max_available_microtransactions = max(\n                    max_available_microtransactions, microtransaction_number - 1)\n                min_available_microtransactions = min(\n                    min_available_microtransactions, microtransaction_number - 1)\n\n        # In the first day, all microtransactions are sold.\n        if sold_microtransactions == max(k):\n            return 1\n\n        # In the first day, no microtransactions are sold.\n        if max_sold_microtransactions == min(k):\n            return 0\n\n        # In the first day, the maximum number of sold microtransactions is available.\n        if max_sold_microtransactions == max_available_microtransactions:\n            return 1\n\n        # In the first day, the maximum number of sold microtransactions is not available.\n        if max_sold_microtransactions == max_number_of_microtransactions:\n            return 1\n\n        # In the first day, the minimum number of microtransactions is available.\n        if min_number_of_microtransactions == min_available_microtransactions:\n            return 0\n\n        # In the first day, the minimum number of microtransactions is not available.\n        if min_number_of_microtransactions == max_number_of_microtransactions:\n            return 0\n\n        # In the first day, the maximum number of microtransactions is available.\n        if max_available_microtransactions == max_number_of_microtransactions:\n            return 1\n\n        # In the first day, the maximum number of microtransactions is not available.\n        return 0\n\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n\n    max_number_of_microtransactions = max(k)\n\n    for i in range(m):\n        d[i] -= 1\n        t[i] -= 1\n\n    days = 1\n    for microtransaction_number in k:\n        if microtransaction_number > 1:\n            # We cannot order all microtransactions.\n            if microtransaction_number > max_number_of_microtransactions:\n                return -1\n            # We don't need to order more microtransactions than are left in the game.\n            while microtransaction_number > max_number_of_microtransactions:\n                microtransaction_number -= max_number_of_microtransactions\n                max_number_of_microtransactions = max(\n                    max_number_of_microtransactions, max_microtransaction_number(k))\n                days += 1\n                if days > 2 * 10 ** 5:\n                    return -1\n\n    for i in range(m):\n        # We cannot order all microtransactions.\n        if d[i] > max_number_of_microtransactions:\n            return -1\n        # We don't need to order more microtransactions than are left in the game.\n        while d[i] > max_number_of_microtransactions:\n            d[i] -= max_number_of_microtransactions\n            max_number_of_microtransactions = max(\n                max_number_of_microtransactions, max_microtransaction_number(k))\n            days += 1\n            if days > 2 * 10 ** 5:\n                return -1\n\n        # We cannot order all microtransactions.\n        if t[i] > max_number_of_microtransactions:\n            return -1\n        # We don't need to order more microtransactions than are left in the game.\n        while t[i] > max_number_of_microtransactions:\n            t[i] -= max_number_of_microtransactions\n            max_number_of_microtransactions = max(\n                max_number_of_microtransactions, max_microtransaction"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    row = stdin.split('\\n')\n    row = list(map(list, row))\n    len_row = len(row)\n    len_col = len(row[0])\n\n    def is_valid(i, j, size):\n        return 0 <= i < len_row and 0 <= j < len_col and \\\n               row[i][j] == '*' and \\\n               row[i][j:j + size] == ['*' for _ in range(size)] and \\\n               row[i:i + size][j] == ['*' for _ in range(size)]\n\n    def is_valid_size(size):\n        for i in range(len_row):\n            for j in range(len_col):\n                if is_valid(i, j, size):\n                    return True\n        return False\n\n    answer = -1\n    for size in range(2, min(len_row, len_col) + 1):\n        if not is_valid_size(size):\n            break\n        for i in range(len_row - size + 1):\n            for j in range(len_col - size + 1):\n                if is_valid(i, j, size):\n                    print(i + 1, j + 1, size)\n                    answer = size\n                    break\n            if answer >= 0:\n                break\n        if answer >= 0:\n            break\n\n    return str(answer)\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.split(\"\\n\")\n    n = int(grid[0])\n    m = int(grid[1])\n    if (n * m) % 2!= 0:\n        print(\"-1\")\n        return\n    while True:\n        sol = []\n        # place stars\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    sol.append([i, j, 1])\n        # check\n        if len(sol) == n * m:\n            break\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    for k in range(1, n + m + 1):\n                        if k not in sol:\n                            sol.append([i, j, k])\n                            if len(sol) == n * m:\n                                break\n        if len(sol) == n * m:\n            break\n        # delete stars\n        sol2 = []\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    sol2.append([i, j])\n        for i in range(n):\n            for j in range(m):\n                if sol2 and grid[i][j] == '*':\n                    grid[i][j] = '.'\n                    sol2.pop(0)\n    sol3 = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                sol3.append([i, j, 1])\n    print(len(sol3))\n    print(\" \".join(str(x) for x in sol3))\n    return ''\n\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin[0])\n    columns = int(stdin[1])\n    matrix = [[x for x in line.rstrip('\\n')] for line in stdin[2:]]\n\n    def move_south(coord: tuple, matrix: list):\n        return (coord[0] + 1, coord[1])\n\n    def move_east(coord: tuple, matrix: list):\n        return (coord[0], coord[1] + 1)\n\n    def move_west(coord: tuple, matrix: list):\n        return (coord[0], coord[1] - 1)\n\n    def move_north(coord: tuple, matrix: list):\n        return (coord[0] - 1, coord[1])\n\n    def backtrack(matrix: list, visited: set, row: int, col: int, stars: int, moves: dict):\n        if row < 0 or col < 0 or row >= len(matrix) or col >= len(matrix[0]):\n            return False\n        if matrix[row][col] == '.' or matrix[row][col] == '*':\n            return False\n        if matrix[row][col] == '*' and (row, col) not in visited:\n            visited.add((row, col))\n            if move_south((row, col), matrix):\n                s = backtrack(matrix, visited, row, col - 1, stars + 1, moves)\n                if s:\n                    moves[row][col] = (row, col, 'S')\n                    return True\n            if move_east((row, col), matrix):\n                s = backtrack(matrix, visited, row - 1, col, stars + 1, moves)\n                if s:\n                    moves[row][col] = (row, col, 'E')\n                    return True\n            if move_west((row, col), matrix):\n                s = backtrack(matrix, visited, row - 1, col, stars + 1, moves)\n                if s:\n                    moves[row][col] = (row, col, 'W')\n                    return True\n            if move_north((row, col), matrix):\n                s = backtrack(matrix, visited, row, col + 1, stars + 1, moves)\n                if s:\n                    moves[row][col] = (row, col, 'N')\n                    return True\n            if not s:\n                visited.remove((row, col))\n        return False\n\n    if not backtrack(matrix, set(), 0, 0, 0, {(0, 0): (0, 0, '.')}):\n        return '-1'\n    return '\\n'.join([' '.join(['{} {} {}'.format(row, col, moves[row][col][2]) for col in range(columns)]) for row in range(rows)])\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    grid = [[char for char in row] for row in stdin.splitlines()]\n    stars = set()\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                stars.add((i, j, 1))\n                \n    for k in range(n*m):\n        if k > len(stars):\n            return '-1'\n        x, y, s = stars[k]\n        for i in range(x - s + 1, x + s):\n            for j in range(y - s + 1, y + s):\n                if 0 <= i < n and 0 <= j < m:\n                    if grid[i][j] == '.':\n                        grid[i][j] = '*'\n                        stars.add((i, j, s + 1))\n    return str(len(stars)) + '\\n' + '\\n'.join([' '.join([str(i) for i in row]) for row in grid])"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    grid = [list(stdin[i:i+m]) for i in range(0, len(stdin), m)]\n\n    if (n < 1 or m < 1):\n        return \"-1\"\n    if m >= n:\n        return str(m // 2) + \" \" + str(n // 2) + \" \" + \"1\"\n\n    size = n // 2 + (n % 2)\n    for i in range(0, n):\n        for j in range(0, m):\n            if grid[i][j] == '*':\n                size += 1\n    if size > n * m:\n        return \"-1\"\n\n    result = str(size) + \" \" + str(n // 2) + \" \" + str(m // 2)\n    for i in range(0, n):\n        for j in range(0, m):\n            if grid[i][j] == '*':\n                result += \" \" + str(i) + \" \" + str(j) + \" \" + str(n // 2)\n    return result\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        row = stdin.split()[0]\n        grid.append(row)\n\n    def is_valid(row, col, s):\n        if row < 0 or row >= n:\n            return False\n        if col < 0 or col >= m:\n            return False\n        for i in range(row - s // 2, row + s // 2 + 1):\n            for j in range(col - s // 2, col + s // 2 + 1):\n                if i == row and j == col:\n                    continue\n                if grid[i][j] == '*':\n                    return False\n        return True\n\n    def find_size(row, col):\n        s = 0\n        for i in range(row - 1, row + 2):\n            for j in range(col - 1, col + 2):\n                if is_valid(i, j, s):\n                    s += 1\n        return s - 1\n\n    def find_combinations(row, col):\n        s = 0\n        best = 0\n        for i in range(row - 1, row + 2):\n            for j in range(col - 1, col + 2):\n                if is_valid(i, j, s):\n                    best = max(best, find_size(i, j))\n                    s += 1\n        return best\n\n    def find_best_combination(row, col):\n        best = find_combinations(row, col)\n        for i in range(row - 1, row + 2):\n            for j in range(col - 1, col + 2):\n                if is_valid(i, j, best):\n                    best = max(best, find_size(i, j))\n        return best\n\n    best_combination = 0\n    best_row, best_col = 0, 0\n    for i in range(n):\n        for j in range(m):\n            best = find_best_combination(i, j)\n            if best > best_combination:\n                best_combination = best\n                best_row, best_col = i, j\n    if best_combination > n * m:\n        return '-1'\n    best_size = find_size(best_row, best_col)\n    result = []\n    for row in range(best_row - best_size // 2, best_row + best_size // 2 + 1):\n        for col in range(best_col - best_size // 2, best_col + best_size // 2 + 1):\n            result.append(f'{row + 1} {col + 1} {best_size}')\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\")\n    '3'\n\n    >>> solution(\"5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....\")\n    '3'\n\n    >>> solution(\"5 5\\n.*...\\n***..\\n.*...\\n.*...\\n.....\")\n    '-1'\n\n    >>> solution(\"3 3\\n*.*\\n.*.\\n*.*\")\n    '-1'\n\n    >>> solution(\"3 3\\n*.*\\n.*.\\n*.*\")\n    '3'\n\n    >>> solution(\"3 3\\n*.*\\n.*.\\n*.*\")\n    '3'\n    \"\"\"\n    # lines = stdin.split('\\n')\n    # rows, cols = (int(i) for i in lines[0].split())\n    # print(rows, cols)\n    # matrix = [list(i) for i in lines[1:]]\n    # print(matrix)\n\n    # for row in matrix:\n    #     for i in row:\n    #         if i!= '*':\n    #             print(\"error\")\n    # return '-1'\n\n    # matrix = [list(line) for line in stdin.split('\\n')]\n    # print(matrix)\n\n    # if len(matrix) == 1 and len(matrix[0]) == 1:\n    #     return '1'\n\n    # if len(matrix) == 1 and len(matrix[0])!= 1:\n    #     return '-1'\n\n    # s = set()\n    # for i in range(len(matrix)):\n    #     for j in range(len(matrix[0])):\n    #         if matrix[i][j] == '*':\n    #             s.add(1)\n    #             s.add(2)\n    #             s.add(3)\n    #             s.add(4)\n    #             s.add(5)\n    #             s.add(6)\n    #             s.add(7)\n    #             s.add(8)\n\n    # s = list(s)\n    # s.sort()\n    # print(s)\n\n    # # import pdb; pdb.set_trace()\n    # row, col = len(matrix), len(matrix[0])\n    # stars = []\n    # for i in range(row):\n    #     for j in range(col):\n    #         if matrix[i][j] == '*':\n    #             stars.append((i, j, 1))\n    #             stars.append((i, j, 2))\n    #             stars.append((i, j, 3))\n    #             stars.append((i, j, 4))\n    #             stars.append((i, j, 5))\n    #             stars.append((i, j, 6))\n    #             stars.append((i, j, 7))\n    #             stars.append((i, j, 8))\n\n    # stars.sort(key=lambda x: x[2])\n\n    # s = set()\n    # for i, j, _ in stars:\n    #     s.add(i)\n    #     s.add(j)\n    #     s.add(i+1)\n    #     s.add(j+1)\n\n    # if len(s)!= row*col:\n    #     return '-1'\n\n    # return '\\n'.join(map(str, s))\n\n\n\nimport collections"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split('\\n')[0]\n    if N == str(N)[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = n % 10\n    n = n // 10\n    while n:\n        r = r * 10 + n % 10\n        n = n // 10\n    return \"Yes\" if n == r else \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x=int(stdin)\n    \n    if x<100 or x>999:\n        return \"No\"\n    x_reverse=int(str(x)[::-1])\n    \n    if x_reverse==x:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if str(n) == str(n)[::-1]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N_string = str(N)\n    if N_string == N_string[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return \"Yes\" if N == int(str(N)[::-1]) else \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    s = str(num)\n    if s == s[::-1]:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_string = stdin.strip()\n    num = int(num_string)\n    reverse_num = int(str(num)[::-1])\n    if num == reverse_num:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    "
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    return 'Yes' if N == int(str(N)[::-1]) else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return \"Yes\" if N == N[::-1] else \"No\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    if a == b:\n        return 'Draw'\n    if a > b:\n        return 'Alice'\n    return 'Bob'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a - b) % 13 < (b - a) % 13:\n        return \"Alice\"\n    elif (b - a) % 13 < (a - b) % 13:\n        return \"Bob\"\n    return \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Alice\" if a > b else \"Bob\" if b > a else \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    return 'Alice' if a > b else 'Bob' if b > a else 'Draw'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return 'Alice'\n    elif b > a:\n        return 'Bob'\n    else:\n        return 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    if (a > b):\n        return 'Alice'\n    elif (b > a):\n        return 'Bob'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_rank = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13}\n    b_rank = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 13: 13}\n    a_value = [i for i in a_rank.keys() if a_rank[i] == a][0]\n    b_value = [i for i in b_rank.keys() if b_rank[i] == b][0]\n    if a_value > b_value:\n        return \"Alice\"\n    elif a_value < b_value:\n        return \"Bob\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a > b:\n        return 'Alice'\n    elif b > a:\n        return 'Bob'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # ----------------------\n    # SOLUTION\n    # ----------------------\n    alice, bob = tuple(map(int, stdin.split()))\n    if (alice > bob) and (alice % 2 == 0):\n        return 'Alice'\n    elif (bob > alice) and (bob % 2 == 0):\n        return 'Bob'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    A, B = map(int, sys.stdin.read().split())\n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\"\n\nprint(solution(stdin.read()))\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(',')\n    return string[0] +'' + string[1] +'' + string[2]\n\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',', '')\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")\n    \n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",,\", \" \")\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return stdin.replace(',', '')\n\"\"\"\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return stdin.replace(',','')\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: str - input string\n    :return: str - string after the conversion\n    \"\"\"\n    # split string by comma\n    split_str = stdin.split(',')\n    # return space delimited string\n    return''.join(split_str)\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Replace all the commas in happy,newyear,enjoy with spaces to obtain happy newyear enjoy.\"\"\"\n    return stdin.replace(\",\", \" \")\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #Split input string by line\n    #Count and parse input string\n    #Read input in the form of string\n    #Call your code\n    "
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise\"\"\"\n    n, m = [int(x) for x in stdin.split(\" \")]\n    checkpoints = []\n    for _ in range(n):\n        x, y = [int(x) for x in stdin.split(\" \")]\n        checkpoints.append((x, y))\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split(\" \")]\n        checkpoints.append((x, y))\n    stdin = stdin.split(\"\\n\")[1:]\n    for _ in range(m):\n        stdin.append(stdin.pop(0))\n    checkpoints.sort(key=lambda t: abs(t[0]) + abs(t[1]))\n    for i in range(n):\n        if i > 0:\n            checkpoints.sort(key=lambda t: abs(checkpoints[i - 1][0] - t[0]) + abs(checkpoints[i - 1][1] - t[1]))\n        for j in range(m):\n            if j > 0:\n                checkpoints.sort(key=lambda t: abs(checkpoints[i][0] - t[0]) + abs(checkpoints[i][1] - t[1]))\n            if abs(checkpoints[i][0] - checkpoints[j][0]) + abs(checkpoints[i][1] - checkpoints[j][1]) == 0:\n                print(j + 1)\n                break\n    return \"\"\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This function will take the input string, and return\n    the list of the nearest checkpoints for each student.\n    '''\n\n    # Initialize the distance list and checkpoints list\n    distance = []\n    checkpoints = []\n\n    # Split the input string\n    inputs = stdin.split('\\n')\n    \n    # Get the number of students and checkpoints\n    students, checkpoints = inputs[0].split(' ')\n\n    # Get each student and checkpoint\n    for i in range(1, int(students)+1):\n        coordinates = inputs[i].split(':')[1].split(' ')\n        distance.append(abs(int(coordinates[0])) + abs(int(coordinates[1])))\n        checkpoints.append(int(coordinates[0]))\n        checkpoints.append(int(coordinates[1]))\n\n    # Initialize the final answer\n    finalAnswer = []\n\n    # For each student\n    for i in range(int(students)):\n        # Get the nearest checkpoint\n        # in order to prevent the student to go to the checkpoint with the same index\n        minDistance = distance[i]\n        checkpoint = 0\n        for j in range(int(checkpoints[0])+1, int(checkpoints[1])):\n            # Get the distance between the student and the checkpoint\n            temp = abs(int(checkpoints[0+2*j])) + abs(int(checkpoints[1+2*j]))\n            \n            # Check if the new distance is smaller than the previous\n            if(temp < minDistance):\n                checkpoint = j\n                minDistance = temp\n        \n        # Get the index of the checkpoint\n        finalAnswer.append(checkpoint)\n\n    return '\\n'.join(map(str, finalAnswer))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = list(map(int, stdin.split()))\n    coords = []\n    for i in range(N):\n        coords.append(list(map(int, stdin.split('\\n')[i+1].split())))\n    checkpoints = []\n    for i in range(M):\n        checkpoints.append(list(map(int, stdin.split('\\n')[i+2].split())))\n    '''\n    N, M = 2, 2\n    coords = [[2, 0], [0, 0]]\n    checkpoints = [[1, 0], [0, 0]]\n\n    res = []\n    for i in range(N):\n        distances = {}\n        for j in range(M):\n            checkpoint_coord = checkpoints[j]\n            distances[j+1] = abs(checkpoint_coord[0] - coords[i][0]) + abs(checkpoint_coord[1] - coords[i][1])\n        res.append(min(distances, key=distances.get))\n    return''.join(map(str, res))"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = [int(i) for i in stdin.split()]\n    nums = {}\n    for i in range(N):\n        a, b = [int(i) for i in stdin.split('\\n')[i + 1].split()]\n        nums[a] = b\n    for i in range(M):\n        c, d = [int(i) for i in stdin.split('\\n')[i + M + 1].split()]\n        nums[c] = d\n    nums = sorted(nums.items(), key=lambda x: abs(x[0]) + abs(x[1]))\n    for i in range(N):\n        print(nums[i][1])\n    '''\n    N,M = [int(i) for i in stdin.split()]\n    nums = {}\n    for i in range(N):\n        a,b = [int(i) for i in stdin.split('\\n')[i + 1].split()]\n        nums[a] = b\n    for i in range(M):\n        c,d = [int(i) for i in stdin.split('\\n')[i + M + 1].split()]\n        nums[c] = d\n    res = {}\n    for key, value in nums.items():\n        res[key] = [abs(key - i)+abs(value-i) for i in nums.values() if abs(key - i) + abs(value-i)<=abs(key - value)+abs(i-value)]\n    for key, value in res.items():\n        res[key] = min(value)\n    for key, value in res.items():\n        print(value)\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given a string of input, return the index of the checkpoint\n    '''\n    n, m = [int(num) for num in stdin.split()]\n    points = []\n    for _ in range(n):\n        points.append([int(num) for num in stdin.split(':')[1].strip().split()])\n    checkpoints = [[int(num) for num in stdin.split(':')[1].strip().split()] for _ in range(m)]\n    distances = [None for _ in range(n)]\n    for i in range(n):\n        distances[i] = [abs(points[i][0] - checkpoint[0]) + abs(points[i][1] - checkpoint[1]) for checkpoint in checkpoints]\n    for i in range(n):\n        distances[i].sort()\n    for i in range(n):\n        print(distances[i].index(min(distances[i])) + 1)\n        \n    return \"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes the string of integers in the format\n    'N M\\n a_1 b_1\\n :\\n a_N b_N\\n c_1 d_1\\n :\\n c_M d_M'\n    and returns an array of the the checkpoints with the smallest Manhattan distances.\n    '''\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    x = stdin[stdin.index(':')+2:]\n    y = stdin[stdin.index(':')+2:].replace('\\n', '')\n    x = x.split('\\n')\n    y = y.split('\\n')\n    x.pop()\n    y.pop()\n    x = [int(i) for i in x]\n    y = [int(i) for i in y]\n    p = []\n    for i in range(n):\n        p.append([x[i], y[i]])\n    q = []\n    for i in range(m):\n        q.append([abs(x[i]-x[n-1])+abs(y[i]-y[n-1]), i])\n    q.sort()\n    z = []\n    for i in range(m):\n        z.append(q[i][1])\n    return z"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n\n    checkpoints = [[int(i) for i in stdin.split()] for _ in range(M)]\n    students = [[int(i) for i in stdin.split()] for _ in range(N)]\n\n    # [1,1] - [1,-1]\n    # [1,0] - [0,0]\n    # [-1,1] - [-1,0]\n    checkpoints = [[i[0], i[1]] for i in checkpoints]\n    students = [[i[0], i[1]] for i in students]\n\n    closest_checkpoint_index = []\n    for student in students:\n        distances = []\n        for checkpoint in checkpoints:\n            distances.append(abs(student[0]-checkpoint[0]) + abs(student[1]-checkpoint[1]))\n        closest_checkpoint_index.append(distances.index(min(distances)))\n\n    return \"\\n\".join(map(str, closest_checkpoint_index))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, checkpoints = stdin.split('\\n\\n')\n    checkpoints = [tuple(int(n) for n in c.split()) for c in checkpoints.split('\\n')]\n    students = [tuple(int(n) for n in s.split()) for s in stdin.split('\\n\\n')]\n\n    def dist(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    ans = []\n    for i in range(len(students)):\n        distances = []\n        for c in checkpoints:\n            distances.append(dist(students[i], c))\n        ans.append(checkpoints[distances.index(min(distances))][0])\n\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(2)\n    14\n    >>> solution(3)\n    26\n    >>> solution(4)\n    47\n    \"\"\"\n    return str(int(stdin) + int(stdin) ** 2 + int(stdin) ** 3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    return number + number ** 2 + number ** 3\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a ** 2 + a ** 3)\n\n\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a ** 2\n    c = a ** 3\n    return str(a + b + c)\n\"\"\"\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    print(a + pow(a, 2) + pow(a, 3))\n    return str(a + pow(a, 2) + pow(a, 3))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here. Feel free to use the input() function.\n    # Consider using stdin.readline() instead of input() for better performance.\n    input = stdin.splitlines()\n    a = int(input[0])\n    return str(a + a**2 + a**3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    answer = int(a * (a + 1) / 2 + a * (a + 1) * (a + 2) / 6)\n    print(answer)\nsolution(\"2\")\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)\n\n\na = 2\nprint(solution(str(a)))  # prints \"14\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + int(pow(int(stdin),2)) + int(pow(int(stdin),3)))\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return str(int(stdin) + int(stdin) ** 2 + int(stdin) ** 3)\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given an image A composed of N rows and N columns of pixels, and a template image B\n    consisting of M rows and M columns of pixels.\n    A pixel is the smallest element of an image, and in this problem it is a square of size 1\u00d71.\n    Also, the given images are binary images, and the color of each pixel is either white or black.\n    In the input, every pixel is represented by a character:. corresponds to a white pixel, and # corresponds to a black pixel.\n    The image A is given as N strings A_1,...,A_N.\n    The j-th character in the string A_i corresponds to the pixel at the i-th row and j-th column of the image A (1\u2266i,j\u2266N).\n    Similarly, the template image B is given as M strings B_1,...,B_M.\n    The j-th character in the string B_i corresponds to the pixel at the i-th row and j-th column of the template image B (1\u2266i,j\u2266M).\n    Determine whether the template image B is contained in the image A when only parallel shifts can be applied to the images.\n    \"\"\"\n    n, m = map(int, stdin.readline().split())\n    for _ in range(n):\n        stdin.readline()\n    for _ in range(m):\n        stdin.readline()\n    if n == m and stdin.read() == '':\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not modify the input and output format.\n    # If our input output format changes, the tests will not pass\n    m, n = map(int, stdin.readline().split())\n    A = []\n    B = []\n    for _ in range(n):\n        A.append(list(stdin.readline().strip('\\n')))\n    for _ in range(m):\n        B.append(list(stdin.readline().strip('\\n')))\n    if all([all(b[1:]) for b in B]) and all(\n            [a[1:] == [elem for elem in b if elem!= '#'][::-1] for a, b in zip(A, B)]):\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    \n    N, M = map(int, sys.stdin.readline().strip().split())\n    A = sys.stdin.read().splitlines()\n    B = sys.stdin.read().splitlines()\n    \n    # Check if B in A\n    for i in range(N-M+1):\n        for j in range(N-M+1):\n            if B == A[i:i+M] or B == reversed(A[i:i+M]):\n                return 'Yes'\n    \n    return 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = int(stdin[1])\n    A = stdin[2:].split()\n    B = stdin[3+n+1:].split()\n    \n    for i in range(n-m+1):\n        for j in range(n-m+1):\n            if B == A[i:i+m] + A[j:j+m]:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to task at https://www.hackerrank.com/challenges/matching-pairs/problem\n    '''\n    from collections import deque\n    from math import ceil\n    N, M = [int(i) for i in stdin.split(' ')]\n    matrix = []\n    for _ in range(N):\n        matrix.append(stdin.split('\\n')[_].strip('\\n'))\n    queue = deque()\n    queue.append((0,0,0,0))\n    matrix[0][0] = 0\n    while len(queue) > 0:\n        x, y, i, j = queue.popleft()\n        if i < N and j < M and matrix[i][j] == matrix[i + 1][j]:\n            queue.append((x + 1, y, i + 1, j))\n            matrix[i][j] = 0\n        if i < N and j < M and matrix[i][j] == matrix[i][j + 1]:\n            queue.append((x, y + 1, i, j + 1))\n            matrix[i][j] = 0\n        if 0 <= i - 1 and j < M and matrix[i][j] == matrix[i - 1][j]:\n            queue.append((x - 1, y, i - 1, j))\n            matrix[i][j] = 0\n        if 0 <= i - 1 and j < M and matrix[i][j] == matrix[i][j + 1]:\n            queue.append((x, y - 1, i, j + 1))\n            matrix[i][j] = 0\n        if i < N and 0 <= j - 1 and matrix[i][j] == matrix[i][j - 1]:\n            queue.append((x, y - 1, i, j - 1))\n            matrix[i][j] = 0\n        if i < N and 0 <= j - 1 and matrix[i][j] == matrix[i + 1][j]:\n            queue.append((x + 1, y, i + 1, j))\n            matrix[i][j] = 0\n    return 'Yes' if matrix[N-1][M-1] == 0 else 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    lines = stdin.split(\"\\n\")\n\n    # iterate lines\n    n, m = list(map(int, lines[0].split(\" \")))\n    for i in range(1, n + 1):\n        lines[i] = list(lines[i])\n    m, lines = lines[-1], lines[1:-1]\n\n    # iterate lines\n    for i in range(len(lines)):\n        for j in range(len(lines[i])):\n            # check if all chars are equals\n            if lines[i][j] == \"#\" and not all(lines[i][j] == lines[j][k] for k in range(len(lines[j]))):\n                return \"No\"\n\n    # check if lines are all equal\n    return \"Yes\" if all(lines[i][j] == lines[0][0] for i in range(len(lines)) for j in range(len(lines[i]))) else \"No\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_subsequence(substr: str, seq: str) -> bool:\n        # https://www.geeksforgeeks.org/check-if-a-substring-is-present-in-a-string/\n        # https://www.geeksforgeeks.org/python-find-index-of-substring-in-a-string/\n        # https://www.geeksforgeeks.org/python-find-indexes-of-all-substrings-of-a-given-length/\n        # https://www.w3schools.com/python/python_howto_reverse_string.asp\n        # https://www.geeksforgeeks.org/python-find-index-of-substring-in-a-string/\n        # https://www.w3schools.com/python/ref_string_find.asp\n        # https://www.w3schools.com/python/ref_string_rfind.asp\n        # https://www.w3schools.com/python/ref_string_index.asp\n        # https://www.w3schools.com/python/ref_string_rindex.asp\n        # https://www.w3schools.com/python/ref_string_count.asp\n        # https://www.w3schools.com/python/ref_string_startswith.asp\n        # https://www.w3schools.com/python/ref_string_endswith.asp\n\n        # starting from the last letter\n        i = seq.rfind(substr)\n        # if not found\n        if i == -1:\n            return False\n        # if found\n        while i!= -1:\n            # if found, check if it is the last index\n            # and if so, return True\n            if i == len(seq) - len(substr):\n                return True\n            # if not, move to the index before\n            i = seq.rfind(substr, 0, i)\n        # if it gets here, the substr was not found\n        return False\n\n    # read input\n    N, M = list(map(int, stdin.readline().split()))\n    A = []\n    for _ in range(N):\n        A.append(stdin.readline().strip())\n    B = []\n    for _ in range(M):\n        B.append(stdin.readline().strip())\n\n    # create a 2d array of all substrings in A\n    all_substrings_in_A = [['' for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            # slice the string starting from the jth character\n            # until the end of the string\n            all_substrings_in_A[i][j] = A[i][j:]\n\n    # create a 2d array of all substrings in B\n    all_substrings_in_B = [['' for _ in range(M)] for _ in range(M)]\n    for i in range(M):\n        for j in range(M):\n            # slice the string starting from the jth character\n            # until the end of the string\n            all_substrings_in_B[i][j] = B[i][j:]\n\n    # find out which substrings match\n    matches = []\n    for i in range(N - M + 1):\n        for j in range(N - M + 1):\n            # iterate over every possible substring in A\n            # and check if it is a subsequence of B\n            for k in range(M):\n                for l in range(M):\n                    if is_subsequence(all_substrings_in_A[i + k][j + l], all_substrings_in_B[k][l]):\n                        matches.append((i, j))\n    print('Yes') if len(matches) > 0 else print('No')"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    if n > 50 or m > 50:\n        return 'No'\n    matrix_a = [list(stdin.split()) for _ in range(n)]\n    matrix_b = [list(stdin.split()) for _ in range(m)]\n    for i in matrix_a:\n        if len(i)!= n:\n            return 'No'\n    for i in matrix_b:\n        if len(i)!= m:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = stdin.split()\n    [A_1, A_2, A_N] = [stdin.split() for _ in range(3)]\n    [B_1, B_2, B_M] = [stdin.split() for _ in range(3)]\n    return \"Yes\" if [A_1.count('#'), A_2.count('#')] == [B_1.count('#'), B_2.count('#')] == [A_N.count('#'), B_M.count('#')] == [B_1.count('.'), B_2.count('.')] else \"No\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    matrix = [list(stdin[i]) for i in range(rows)]\n\n    result = []\n    for i in range(rows):\n        for j in range(cols):\n            result.append(matrix[i][j])\n    \n    for i in range(rows - 2):\n        for j in range(cols - 2):\n            if '#'!= result[i][j] and \\\n            '#'!= result[i][j + 1] and \\\n            '#'!= result[i][j + 2] and \\\n            '#'!= result[i + 1][j] and \\\n            '#'!= result[i + 1][j + 1] and \\\n            '#'!= result[i + 1][j + 2] and \\\n            '#'!= result[i + 2][j] and \\\n            '#'!= result[i + 2][j + 1] and \\\n            '#'!= result[i + 2][j + 2]:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.strip().split(' ')))\n\n    return str(max(a, b, c) * 20 + a + b + c)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split('\\n')[0].split()))\n    return str(max(a+b, a+c, b+c))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A < B and B < C:\n        print(B + C)\n    elif B < A and A < C:\n        print(A + C)\n    elif C < B and B < A:\n        print(B + A)\n    elif C < A and A < B:\n        print(A + B)\n    elif B < C and C < A:\n        print(B + A)\n    elif A < C and C < B:\n        print(C + B)\n    elif A < C and C < B:\n        print(C + A)\n    return ''\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    return max(a + b + c - 3, a + b - c, a - b + c, 0)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a+b, a+c, b+c, a*b, a*c, b*c))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    A, B, C = nums\n    max_allowance = max(A + B, A + C, B + C)\n    return str(max_allowance)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(' ')]\n    return str(max(a * b + c, a + b + c, a + b * c))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(s) for s in stdin.split()]\n    return str(max(nums[0] + nums[1] - 1, nums[2]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return str(int(a) + int(b) + int(c) - 1)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split(' ')]\n\n    return max(a+b+c-9, a+b, a+c, b+c, a+b+c)\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = list(map(int, stdin.readline().split()))\n    discounted_prices = [0] * n\n    for i in range(n):\n        discounted_prices[i] = prices[i] * (i + 1) // 2\n    print(sum(discounted_prices))\n    return \"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n4980\\n7980\\n6980\")\n    '15950'\n    \"\"\"\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    return \"{}\".format(sum(l) - min(l) / 2 + min(l))\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    basket = [int(i) for i in stdin.split('\\n')[1:]]\n    basket.sort()\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total += basket[i]\n    return total"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    price = [int(x) for x in stdin.readline().split(' ')]\n    price = sorted(price, reverse=True)\n    discount = int(price[0] / 2)\n    total = discount * N\n    for i in range(1, N):\n        total += price[i]\n    return total\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    price = list(map(int, stdin.split('\\n')[1:]))\n    price.sort()\n    price = price[::-1]\n    money = 0\n    for i in range(N):\n        money += price[i]\n        if i >= N - 1:\n            break\n        if price[i] > price[i + 1] // 2:\n            money += price[i] // 2\n    return money"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    prices = [int(stdin.readline().strip()) for _ in range(N)]\n    prices.sort()\n    total = 0\n    for i in range(N // 2):\n        total += prices[i]\n    total *= 2\n    for i in range(N // 2, N):\n        total += prices[i]\n    return total\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    list_price = [int(i) for i in stdin.readline().split(\" \")]\n    list_price.sort(reverse=True)\n    print(list_price)\n    total = 0\n    for i in range(n):\n        total += list_price[i]\n        if (i + 1) % 2 == 1:\n            total = total / 2\n    return total"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    items = [int(s) for s in stdin.split(\"\\n\")]\n    discounts = [item // 2 for item in items[1:]]\n    total = sum(items[:1]) + sum(discounts)\n    return str(total)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the time for which the last order will be completed.\n\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n\n    # Determine the minimum time for which an order can be placed.\n    min_order_time = get_order_time(stdin)\n\n    # Determine the maximum time for which an order can be placed.\n    max_order_time = get_order_time(stdin, allow_negative=True)\n\n    # Determine the time at which all orders will be completed.\n    # Notice that this is not the minimum time because it is possible to have an order which is not delivered.\n    time_completed = get_time_completed(stdin, max_order_time)\n\n    return str(time_completed)\n\n\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 10!= 0:\n        return str(x - (x % 10))\n    else:\n        return str(x - 10)\n    "
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the earliest possible time for the last dish to be delivered.\n    \"\"\"\n    A, B, C, D, E = map(int, stdin.split())\n    if A % 10!= 0:\n        return \"NO\"\n    \n    if B % 10!= 0:\n        return \"NO\"\n    \n    if C % 10!= 0:\n        return \"NO\"\n    \n    if D % 10!= 0:\n        return \"NO\"\n    \n    if E % 10!= 0:\n        return \"NO\"\n\n    return str(A + B + C + D + E)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    B = int(stdin)\n    C = int(stdin)\n    D = int(stdin)\n    E = int(stdin)\n    time = 0\n    while (A > 0):\n        if (A >= 10):\n            A -= 10\n            time = 10\n            continue\n        else:\n            time += A\n            break\n    while (B > 0):\n        if (B >= 10):\n            B -= 10\n            time += 10\n            continue\n        else:\n            time += B\n            break\n    while (C > 0):\n        if (C >= 10):\n            C -= 10\n            time += 10\n            continue\n        else:\n            time += C\n            break\n    while (D > 0):\n        if (D >= 10):\n            D -= 10\n            time += 10\n            continue\n        else:\n            time += D\n            break\n    while (E > 0):\n        if (E >= 10):\n            E -= 10\n            time += 10\n            continue\n        else:\n            time += E\n            break\n    print(time)"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n\n    a = max(A, B, C, D, E)\n    if a % 10 == 0:\n        return a\n    else:\n        return (a + 10 - a % 10)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Check constraints\n    A, B, C, D, E = (int(i) for i in stdin.split('\\n'))\n    assert 1 <= A <= 123\n    assert 1 <= B <= 123\n    assert 1 <= C <= 123\n    assert 1 <= D <= 123\n    assert 1 <= E <= 123\n    assert all(a < b for a, b in zip((A, B, C, D, E), (0, 10, 20, 30, 40)))\n\n    # Return answer\n    return max(A, B, C, D, E) * 10 + max(max(0, A % 10), max(0, B % 10), max(0, C % 10), max(0, D % 10), max(0, E % 10))\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the earliest possible time for the last dish to be delivered.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: The earliest possible time for the last dish to be delivered, as an integer.\n    \"\"\"\n    A, B, C, D, E = map(int, stdin.split())\n\n    return A + (E - 1) // 10 * 15 + 10 * B + (E - 1) % 10 * D\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(x) for x in stdin.split()]\n    return str(10 * E + 10 * D - B)"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = (int(stdin) for stdin in stdin.split())\n    time = A * 60 + B * 30 + C * 15 + D * 5 + E\n    for a, b, c, d, e in [(A, B, C, D, E), (A, C, B, D, E), (A, C, D, B, E), (A, C, D, E, B), (A, B, C, E, D), (A, B, D, E, C), (A, D, B, E, C), (A, D, E, B, C)]:\n        if time % 10 == 0 and (time + a + e) % 60 == 0:\n            time += a * 60 + b * 30 + c * 15 + d * 5 + e\n            break\n    return str(time)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_of_numbers = int(stdin.split(\"\\n\")[0])\n    numbers = [int(number) for number in stdin.split(\"\\n\")[1].split(\" \")]\n    number_of_inverses = []\n    for i in range(0, num_of_numbers):\n        number_of_inverses.append(1 / numbers[i])\n    number_of_inverses_sum = sum(number_of_inverses)\n    number_of_inverses_sum_inverse = 1 / number_of_inverses_sum\n    return str(round(number_of_inverses_sum_inverse, 5))\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\nGiven is a sequence of N integers A_1, \\ldots, A_N.\nFind the index i such that A_1 \\leq A_i \\leq A_2 \\leq \\ldots \\leq A_{i-1} \\leq A_i \\leq A_{i+1} \\leq \\ldots \\leq A_N.\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\ldots A_N\n\n-----Output-----\nPrint a decimal number (or an integer) representing the index of the first such number found.\nYour output will be judged correct when its absolute or relative error from the judge's output is at most 10^{-5}.\n\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n1\n\n1 is the index of the number 2\nPrinting 1.00001, 1.1, and so on will also be accepted.\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution of the exercise\"\"\"\n    N, *A = map(int, stdin.split('\\n'))\n    return str(1 / sum([1 / a for a in A]))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    first = int(lines[0])\n    second = list(map(int, lines[1].split()))\n\n    total = 0\n    for num in second:\n        total += 1 / num\n\n    return str(round(total, 5))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    input_ = stdin.split('\\n')\n    length = int(input_[0])\n    array = input_[1].split()\n    \n    inverse_sum = 0\n    for num in array:\n        inverse_sum += 1 / int(num)\n    \n    return '{0:.5f}'.format(inverse_sum)"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.splitlines()\n    n = int(inp[0])\n    s = [int(i) for i in inp[1].split()]\n    total = sum(1 / i for i in s)\n    print(f'{total:.5f}')\n    return '{:.5f}'.format(total)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 30\\n')\n    '7.5'\n    >>> solution('4 0\\n')\n    '0.0'\n    >>> solution('10 30\\n')\n    '7.5'\n    \"\"\"\n    numbers = [int(n) for n in stdin.splitlines()]\n    n = numbers[0]\n    summation = 0\n    for i in range(1, n + 1):\n        summation += 1 / i\n    return str(1 / summation)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # create an array of heights\n    arr = list(map(int, stdin.split()))\n    # remove first and last\n    arr.pop(0)\n    arr.pop()\n    # get min and max\n    min = min(arr)\n    max = max(arr)\n    # find gap\n    gap = max - min\n\n    # return gap\n    return str(gap)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_trees, num_lights = map(int, stdin.readline().strip().split())\n    lights = list(map(int, stdin.readline().strip().split()))\n    trees = sorted(zip(lights, range(1, num_trees + 1)))\n    return str(sum((max(trees, key=lambda x: x[0])[0] - min(trees, key=lambda x: x[0])[0])) % (10 ** 9 + 7))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(' ')]\n    H = [int(x) for x in stdin.split('\\n')[1:-1]]\n\n    H.sort()\n\n    h_min = H[0]\n    h_max = H[-1]\n\n    return str(h_max - h_min)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.splitlines()[1:]]\n    arr.sort()\n    return str(sum(arr[K:]) - sum(arr[:K]))\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(solution(stdin.readlines()))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    num_tree, k = stdin.split(\" \")\n    tree_heights = [int(height) for height in stdin.split(\"\\n\")[1:]]\n    k = int(k)\n    min_distance = 10 ** 9\n    sorted_tree_heights = sorted(tree_heights)\n    if k > 1:\n        min_distance = sorted_tree_heights[k - 1] - sorted_tree_heights[0]\n    if k < num_tree:\n        min_distance = min(min_distance,\n                           sorted_tree_heights[k - 1] - sorted_tree_heights[num_tree - k])\n\n    return str(min_distance)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = []\n    for i in range(n):\n        heights.append(int(input()))\n    heights.sort()\n    best = heights[n - k]\n    worst = heights[k - 1]\n    return str(best - worst)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum possible value of h_{max} - h_{min}.\n    \"\"\"\n    return\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    num_trees, num_choices = map(int, stdin.split())\n    trees = [int(stdin.split()[i]) for i in range(num_trees)]\n\n    trees.sort()\n    min_height = trees[-1]\n    max_height = trees[0]\n\n    for i in range(1, num_choices):\n        max_height = max(trees[i * num_choices - 1], max_height)\n        min_height = min(trees[i * num_choices], min_height)\n\n    return max_height - min_height\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution to the problem:\n    Args:\n        stdin (str): input given in the specified format\n    Returns:\n        str: the solution to the problem\n    '''\n    n, k = map(int, stdin.split())\n    arr = []\n    for i in range(n):\n        arr.append(int(stdin.split()[i]))\n    arr.sort()\n    print(arr)\n    print(arr[k - 1] - arr[k - 1 - 1])\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return chr(ord(stdin.lower())) if stdin.islower() else stdin.upper()\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower() if stdin.islower() else stdin.upper()\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets a input from stdin and returns a solution for this problem.\n\n    Args:\n        stdin (str): A string consists of a lowercase or an uppercase English letter.\n\n    Returns:\n        str: A string that consists of a lowercase or an uppercase English letter.\n    \"\"\"\n    return stdin.upper() if stdin.isupper() else stdin.lower()\n    # Your code here"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    input_string = stdin\n    # get the output\n    output = None\n    # get the corresponding letter\n    corresponding_letter = 'a' if input_string.islower() else 'A'\n    # print the output\n    print(corresponding_letter)\n    return output\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    if stdin == 'b':\n        return 'A'\n    return stdin\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin[0]\n    return alpha if alpha.islower() else alpha.upper()\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'A' if stdin.isupper() else 'a'\n\"\"\"\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(''.join(map(lambda x: 'A' if x.isupper() else 'a', stdin)))\n    return ''.join(map(lambda x: 'A' if x.isupper() else 'a', stdin))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = list(map(int, stdin.split(' ')))\n    return str(comb(s, k, k) + comb(s, k, k - 1))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Complete the function\n    K, S = [int(x) for x in stdin.split()]\n    # print(K, S)\n    ans = 0\n    # print(\"===========================\")\n    # print(K, S)\n    for i in range(0, K+1):\n        for j in range(0, K+1):\n            for k in range(0, K+1):\n                # print(i, j, k)\n                if i + j + k == S:\n                    ans += 1\n                    # print(ans)\n                    # print(\"===========================\")\n    return str(ans)\n    # return \"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split(' '))\n    x = 0\n    y = 0\n    z = k\n    total = 0\n    while x < k:\n        if y < k:\n            if z < k:\n                total += z\n            y += 1\n        z -= 1\n        x += 1\n    print(total)\n    return \"\""
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    k, s = int(k), int(s)\n    triples = 0\n    for x in range(k + 1):\n        for y in range(k + 1):\n            z = s - (x + y)\n            if 0 <= z <= k:\n                triples += 1\n    return str(triples)"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, s = [int(x) for x in stdin.strip().split(' ')]\n    \n    return str(s - 1 if s >= 0 else 0)"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    cnt = 0\n    for x in range(k + 1):\n        for y in range(k + 1):\n            z = s - x - y\n            if z < 0:\n                continue\n            if z > k:\n                break\n            if x + y + z == s:\n                cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    c = 0\n    for x in range(k + 1):\n        for y in range(k + 1):\n            z = s - x - y\n            if 0 <= z <= k:\n                c += 1\n    return str(c)\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(x: int, y: int, z: int) -> bool:\n        return x + y + z == k\n\n    k, s = [int(x) for x in stdin.split(' ')]\n    return len(list(filter(is_valid, itertools.product(range(k), repeat=3))))\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split(\" \"))\n    return str(fact(k) // fact(k - 3) // fact(s - k))\n    \ndef"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a valid date (YYMM or MMYY), return the format in which it is valid.\n    \n    Note:\n    - YYMM and MMYY have to be valid for the given date to be valid.\n    - YYMM is only valid when it is the last two digits of a valid year, e.g. 01 for January.\n    - MMYY is only valid when it is the last two digits of a valid month, e.g. 1 for January.\n    - Any 2-digit date will have a format of YYMM or MMYY, e.g. 01 for January.\n    \n    Args:\n        stdin (str): Input date in YYMM or MMYY format.\n        \n    Returns:\n        str: String indicating the format in which the input date is valid.\n    \"\"\"\n    year = stdin[:2]\n    month = stdin[2:4]\n    date = stdin[4:]\n\n    if int(year) < 100 or int(year) > 99:\n        return 'NA'\n\n    if len(month) == 1:\n        month = '0' + month\n\n    if int(month) < 1 or int(month) > 12:\n        return 'NA'\n\n    if int(date) < 1 or int(date) > 31:\n        return 'NA'\n\n    # All input date is valid\n    return 'YYMM' if len(stdin) == 6 else 'MMYY'\n    \n    \n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[2] == '0':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    if S[2] == '2':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    if S[2] == '1':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    if S[2] == '3':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    if S[2] == '4':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    if S[2] == '5':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    if S[2] == '6':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    if S[2] == '7':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    if S[2] == '8':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    if S[2] == '9':\n        if S[:2] in months:\n            return 'YYMM'\n        if S[:2] in years:\n            return 'MMYY'\n    return 'NA'\nprint(solution(input()))\n\nimport re\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1905\")\n    'YYMM'\n    \"\"\"\n\n    s = stdin.split()[0]\n    s1 = s[:2]\n    s2 = s[2:]\n    is_yymm = True\n    is_mmyy = True\n    for digit in s1:\n        if not digit.isdigit():\n            is_yymm = False\n            break\n    for digit in s2:\n        if not digit.isdigit():\n            is_mmyy = False\n            break\n\n    if is_yymm:\n        print(\"YYMM\")\n    elif is_mmyy:\n        print(\"MMYY\")\n    elif is_yymm or is_mmyy:\n        print(\"AMBIGUOUS\")\n    else:\n        print(\"NA\")\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.strip()\n    if not len(date) == 4:\n        return 'NA'\n    try:\n        datetime.datetime(year=int(date[:2]), month=int(date[2:4]), day=1)\n    except ValueError:\n        return 'NA'\n    if len(date) == 4:\n        return 'YYMM' if len(date) == 4 else 'AMBIGUOUS'\n    if len(date) == 6:\n        return 'MMYY' if len(date) == 6 else 'AMBIGUOUS'\n    return 'NA'"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    year = stdin[-4:]\n    month = stdin[-6:-4]\n    day = stdin[:-6]\n    month = month_dict[month]\n    valid = True\n\n    if int(month) < 1 or int(month) > 12:\n        valid = False\n    if int(year) < 1 or int(year) > 3999:\n        valid = False\n    if len(day) == 2 and int(day) < 1 or int(day) > 31:\n        valid = False\n\n    if valid:\n        return \"YYMM\"\n    elif len(day) == 2 and int(day) < 1 or int(day) > 31:\n        return \"MMYY\"\n    else:\n        return \"AMBIGUOUS\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #YOUR CODE HERE\n    s = stdin\n    if s[2:4] < '20':\n        print('MMYY')\n    elif s[2:4] > '20':\n        print('YYMM')\n    elif s[0:2] < '20':\n        print('MMYY')\n    else:\n        print('AMBIGUOUS')\n    return ''\n    pass"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1905')\n    'YYMM'\n    >>> solution('1905')\n    'YYMM'\n    >>> solution('1901')\n    'MMYY'\n    >>> solution('1913')\n    'AMBIGUOUS'\n    >>> solution('1961')\n    'AMBIGUOUS'\n    >>> solution('1951')\n    'AMBIGUOUS'\n    >>> solution('1961')\n    'AMBIGUOUS'\n    >>> solution('1954')\n    'AMBIGUOUS'\n    >>> solution('1954')\n    'AMBIGUOUS'\n    >>> solution('1954')\n    'AMBIGUOUS'\n    \"\"\"\n    return \"YYMM\" if len(stdin) == 4 and stdin.isdigit() and (1900 <= int(stdin) <= 2020) and (((int(stdin) % 100) >= 1 and (int(stdin) % 100) <= 12) or (int(stdin) % 100) == 0) else \"MMYY\" if len(stdin) == 4 and stdin.isdigit() and (1 <= int(stdin) <= 12) and ((int(stdin) % 100) <= 99 and (int(stdin) % 100) >= 1) or (int(stdin) % 100) == 0 else \"AMBIGUOUS\" if len(stdin) == 4 and stdin.isdigit() and (1900 <= int(stdin) <= 2020) and (int(stdin) % 100)!= 0 and (1 <= int(stdin) <= 12) else \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  year, month, day = stdin.split(' ')\n  year = int(year)\n  month = int(month)\n  day = int(day)\n  print('MMYY' if day < 32 and month == 2 and year % 4 == 0 and (year % 100!= 0 or year % 400 == 0) else 'YYMM' if month < 13 and day < 32 else 'AMBIGUOUS')\n\nsolution(input())"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s)!= 4:\n        return \"NA\"\n    else:\n        return \"YYMM\" if int(s[0:2]) <= 12 and int(s[2:4]) <= 12 and int(s[0:2]) > 0 and int(s[2:4]) > 0 else \"MMYY\" if int(s[0:2]) > 12 or int(s[2:4]) < 1 else \"AMBIGUOUS\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    year = stdin[:2]\n    month = stdin[2:4]\n    if len(month) == 2:\n        if int(month) > 12 or int(month) < 1:\n            return \"NA\"\n    elif len(month) == 1:\n        if int(month) < 1 or int(month) > 9:\n            return \"NA\"\n    if len(year) == 2:\n        if int(year) < 1 or int(year) > 9999:\n            return \"NA\"\n    elif len(year) == 1:\n        if int(year) < 0 or int(year) > 9:\n            return \"NA\"\n    if int(year) >= 2000 and int(year) <= 2020 and int(month) >= 1 and int(month) <= 12:\n        return \"YYMM\"\n    elif int(year) >= 1900 and int(year) <= 2000 and int(month) >= 1 and int(month) <= 12:\n        return \"MMYY\"\n    elif len(year) == 4:\n        if int(year) > 2020 or int(year) < 1900:\n            return \"NA\"\n    return \"AMBIGUOUS\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    stdin = stdin.strip()\n    k = int(stdin)\n    dp = [0]*(k+1)\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, k+1):\n        dp[i] = (dp[i-1] + dp[i-2])%1000000007\n    print(dp[k])"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  # Write your code here\n  # Return the result\n  k = int(stdin.readline().strip())\n  ans = 0\n  for i in range(0, k+1, 2):\n    if i % 2 == 0:\n      ans += k // i\n  return ans"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '{}'.format(stdin)\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive).\n\n    Args:\n        stdin (str): Input from standard input\n\n    Returns:\n        str: Number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive).\n    \"\"\"\n    k = int(stdin)\n    return f\"{k*(k-1)//2}\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline())\n    # even: even + odd\n    # odd: odd + even\n    count = 0\n    for x in range(1, K + 1):\n        if x % 2 == 0:\n            count += (K - x) // 2 + (K - x) % 2\n        else:\n            count += (K - x) // 2\n    return count\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive): \" + str(even_odd_numbers_choices(stdin))\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline())\n    return str(sum(divmod(K, 2)))\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for i in range(n):\n        if i%2 == 0:\n            count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input from user\n    num_cases = int(stdin.readline().rstrip())\n\n    # loop through each case\n    for _ in range(num_cases):\n        # get input from user\n        num_k = int(stdin.readline().rstrip())\n\n        # create answer variable\n        answer = 0\n\n        # loop through k, k + 1, k + 2,...\n        for k in range(2, num_k + 1, 2):\n            answer += int(num_k / k)\n\n        # return answer\n        print(answer)\n\n    # return answer\n    return answer"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    A, B = [int(x) for x in stdin.split(' ')]\n    print(A + B)\n    return str(A + B)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  a, b = list(map(int, stdin.split(' ')))\n  h = (a+b)%12\n  if a+b < 12:\n    return str(h)+' o\\'clock'\n  if a+b == 12:\n    return '12 o\\'clock'\n  if a+b > 12:\n    if h == 0:\n      h = 12\n    return str(h)+' o\\'clock'\n    \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    hour = (x + y) % 12\n    hour = \"0\" + str(hour) if hour < 10 else str(hour)\n    print(hour)\n    return hour"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b = [int(x) for x in stdin.split()]\n    if a > b:\n        a, b = b, a\n    print(a+b)\n\ndef"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    start_hour, start_minute = stdin.split(' ')\n    start_hour = int(start_hour)\n    start_minute = int(start_minute)\n    return str(start_hour + (int(start_minute) // 60) % 24)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B = map(int, stdin.split())\n    \n    hour = B // 60 % 24\n    minute = B % 60\n    if hour >= A:\n        hour += 24\n    \n    return str(hour) + \" \" + str(minute)\n\nprint(solution(input()))"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split()]\n    return str(B - A) +'hours'"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # cast the input string into an integer array\n    # convert from 12hr to 24hr time\n    # substract the hours and minutes from the contest time\n    # return the resulting time in hours only\n    # H:M - H:M = H = 0\n    A, B = [int(x) for x in stdin.split()]\n    B += 12\n    diff = B - A\n    # if diff > 12:\n    #     diff = diff - 24\n    # elif diff < 0:\n    #     diff = 24 + diff\n    return str(diff)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    hour = (a + b) % 24\n    return str(hour)"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    h = (b // 3600) % 24\n    h = '0' * (2 - len(str(h))) + str(h)\n    print(h)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    k = n // 10\n    if n % 10 == 0:\n        r -= 100 * k\n    else:\n        r += 100 * k\n    return str(r)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split(' '))\n    if N >= 10:\n        return str(R)\n    else:\n        return str(R - 100 * (10 - N))\n\ndef"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def inner(inner_rating: int, contest: int) -> int:\n        return inner_rating + contest * 10 - contest * 100\n\n    def displayed(inner_rating: int) -> int:\n        return inner(inner_rating, 10) if inner_rating >= 10 else inner_rating - 100\n\n    return displayed(int(stdin.readline().split()[1]))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nN, R = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split(\" \")\n    n = int(n)\n    r = int(r)\n    if n < 10:\n        print(r)\n    else:\n        print(r - 100 * (n - 10))\nsolution(stdin)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def innerRating(stdin: str) -> int:\n        _, _, innerRating, _ = stdin.split(\" \")\n        return int(innerRating)\n\n    def contestsCount(stdin: str) -> int:\n        _, _, _, contestsCount = stdin.split(\" \")\n        return int(contestsCount)\n\n    _, innerRating = stdin.split(\" \")\n    contestsCount = contestsCount(stdin)\n    if contestsCount >= 10:\n        return innerRating\n    else:\n        return innerRating - 100 * (10 - contestsCount)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = stdin.split(\" \")\n    N = int(N)\n    R = int(R)\n    K = int()\n    \n    if N < 10:\n        print(R)\n    else:\n        K = N // 10\n        if K == 0:\n            if N == 10:\n                print(R)\n            else:\n                print(R - 100 * (N % 10))\n        else:\n            print(R - 100 * (K - 1) + K * 100)\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    if N >= 10:\n        return R\n    return R - 100 * (10 - N)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split()]\n    if n < 10:\n        r -= 100 * (10 - n)\n    return str(r)\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return \"Solution to task 4\"\n\"\"\"\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Take in integers N and K from Standard Input,\n    return the number of digits that N has in base K.\n    '''\n    n, k = map(int, stdin.split())\n    return len(bin(n)[2:])"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n\n    def calculate_digits(n: int, k: int) -> int:\n        return len(bin(n)[2:]) - len(bin(k)[2:])\n\n    print(calculate_digits(N, K))\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n, k = [int(x) for x in stdin.split(\" \")]\n  return len(bin(n)[2:])"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b = [int(s) for s in stdin.split(' ')]\n    count = 0\n    while n:\n        count += 1\n        n //= b\n    return str(count)\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution of the problem\"\"\"\n    return stdin.split()[1]"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(' '))\n    binary = bin(N)[2:]\n    print(len(binary))"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, range(int(stdin))))\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\nimport time\n\nn = int(sys.stdin.readline())\n\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(int(stdin) / 2))"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pages = [N]\n    ans = 1\n    while pages[-1] > 1:\n        ans += 1\n        pages.append(pages[-1] // 2)\n        if pages[-1] % 2!= 0:\n            pages[-1] += 1\n    return str(ans)\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    print(n // 2 + (n % 2 > 0))\n    return ''\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num == 1:\n        return '1'\n    elif num == 2:\n        return '2'\n    elif num == 3:\n        return '3'\n    elif num == 4:\n        return '4'\n    elif num == 5:\n        return '5'\n    else:\n        return 'ERROR'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code below; 1. remove the hashtag and\n    # 2. paste your solution below.\n    #\n    a, b = [int(x) for x in stdin.strip().split(\" \")]\n    return \"Yay!\" if a + b < 17 else \":(\", a + b\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a+b <= 16:\n        return \"Yay!\"\n    return \":( \"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return \"Yay!\" if a + b <= 16 else \":(\", a + b\n\"\"\"\n\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    if a == b == 0:\n        return \"Yay!\"\n    elif a == 0 and b!= 0:\n        return \":(\"\n    elif b == 0 and a!= 0:\n        return \":(\"\n    elif a == 0 and b == 0:\n        return \":(\"\n    elif a + b >= 16:\n        return \":(\"\n    elif a == 0:\n        return \"Yay!\"\n    elif b == 0:\n        return \"Yay!\"\n    else:\n        return \":(\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split()]\n    if a + b <= 16:\n        return \"Yay!\"\n    return \":("
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(\"Yay!\" if a + b <= 16 else \":(\")\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a+b <= 16:\n        return 'Yay!'\n    return ':("
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return \"Yay!\" if a + b <= 16 else \":("
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  S = list(stdin)\n  X = int(\"\".join(S[2:5]))\n  Y = int(\"\".join(S[4:7]))\n  return str(abs(X - 753))\n\n\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin\n    # digits = list(stdin)\n    # print(digits)\n    # print(sorted(digits))\n    # digits.sort()\n    # print(digits)\n    # digits = digits[0:3]\n    # print(digits)\n    # for i in range(3, len(digits)):\n    #     if digits[i] == digits[i-1]:\n    #         digits.pop(i)\n    # digits = digits[0:3]\n    # print(digits)\n    # return int(''.join(digits))\n    return int(digits)\n\nprint(solution('1234567876'))"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum possible difference between X and 753\"\"\"\n    input_str = stdin\n    if not (len(input_str) == 4 or len(input_str) == 6 or len(input_str) == 8 or len(input_str) == 10):\n        return \"Invalid Input\"\n    return str(int(input_str[0]) + int(input_str[1]) + int(input_str[2]) - 753)\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum possible difference between X and 753.\"\"\"\n    my_str = stdin\n    num_list = [int(x) for x in my_str]\n    num_list.sort()\n    num_list = [str(i) for i in num_list]\n    num = \"\".join(num_list)\n    return str(abs(int(num)-753))\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    consecutive = []\n    for i in range(len(S)-3):\n        if S[i] == S[i+1] and S[i+1] == S[i+2] and S[i+2] == S[i+3]:\n            consecutive.append(int(S[i:i+3]))\n    if consecutive:\n        m = max(consecutive)\n        for i in range(len(S)-3):\n            if S[i] == S[i+1] and S[i+1] == S[i+2] and S[i+2] == S[i+3]:\n                if int(S[i:i+3]) < m:\n                    consecutive.append(int(S[i:i+3]))\n    if consecutive:\n        consecutive.sort()\n        m = max(consecutive)\n        return abs(m-753)\n    else:\n        return \"No digit pairs are consecutive.\"\n\nT = int(input())\nfor t in range(1, T+1):\n    print(\"Case #{}: {}\".format(t, solution(input())))\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S) < 4 or len(S) > 10:\n        raise ValueError(\"String length must be 4-10\")\n    for ch in S:\n        if ch < '1' or ch > '9':\n            raise ValueError(\"String must only contain digits\")\n    x = 0\n    for ch in S:\n        x = x * 10 + int(ch)\n    x = abs(x - 753)\n    print(x)\n    return x"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    #print(a)\n    if len(set(a)) == 1:\n        print(1, a[0])\n        return\n    a = sorted(a)\n    #print(a)\n    cnt = 0\n    for i in range(1, n):\n        if a[i-1] == a[i]:\n            cnt += 1\n        else:\n            break\n    #print(cnt)\n    m = n - cnt\n    #print(m)\n    a = [x for x in a if x!=a[0]]\n    a.sort()\n    #print(a)\n    b = n - len(a)\n    #print(b)\n    print(b, a[0])\n    return\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    nums = [0] * n\n    for x in map(int, stdin.split()):\n        nums[x - 1] += 1\n\n    # assuming all distinct\n    count = 0\n    ans = 0\n    for x in a:\n        count += x\n        ans += count * nums[count]\n    return ans\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    for i in range(1, len(a)):\n        a[i] = min(a[i], a[i - 1])\n    result = 0\n    left = 0\n    right = 0\n    while left < n:\n        right = n\n        result += 1\n        while right > left and a[left] <= result:\n            result += a[left]\n            left += 1\n    return str(result) +'' + str(n - left)\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\", \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    arr.sort()\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > n:\n            right -= 1\n        else:\n            left += 1\n    return f\"{left} {n - left}\""
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.splitlines()))\n    a.sort()\n    l, r = a[0], a[-1]\n    while l < r:\n        mid = (l + r) // 2\n        total, cnt, remain = 0, 0, 0\n        for i in range(n):\n            if a[i] > mid:\n                cnt += 1\n                total += remain + mid - a[i]\n                remain = 0\n            else:\n                remain += a[i]\n        total += remain\n        if cnt > n // 2:\n            r = mid\n        else:\n            l = mid + 1\n    return str(n - cnt) + \" \" + str(l)\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    first, last = a[0], a[-1]\n    low, high = 1, (last - first) // (n - 1) + 1\n    while low < high:\n        mid = (high + low) // 2\n        if count(mid, first, last, n) < n:\n            low = mid + 1\n        else:\n            high = mid\n    return str(low)\n\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get the input\n    :param stdin: input\n    :return: output\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    # Get the number of unique values from the list of values\n    m = len(set(a))\n    # Create a list of values of each type\n    values = []\n    for i in range(n):\n        values.append(a[i] // m)\n    values.sort()\n    # Get the difference between the maximum value and the minimum value\n    d = values[-1] - values[0]\n    # Get the difference between the minimum value and the second maximum value\n    d1 = values[1] - values[0]\n    # Get the number of people who have taken the maximum value\n    p = d // d1\n    # Get the number of people who have taken the second maximum value\n    q = d % d1\n    # If the number of people who have taken the maximum value equals to the number of people who have taken the second maximum value\n    if p == q:\n        # Then the number of people who have taken the maximum value equals to the number of people who have taken the minimum value\n        p = d1\n        q = d1\n    # Get the number of people who have taken the minimum value\n    p1 = values[0]\n    # Get the number of people who have taken the second minimum value\n    q1 = values[1]\n    # If the number of people who have taken the minimum value equals to the number of people who have taken the second minimum value\n    if p1 == q1:\n        # Then the number of people who have taken the minimum value equals to the number of people who have taken the maximum value\n        p1 = d1\n        q1 = d1\n    # Return the minimum number of people who could have broken into the basement and the number of swords each of them has taken\n    return p, q\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    contests = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    n = len(contests)\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(1, n):\n        if i + contests[i - 1] > n:\n            dp[i + 1] = dp[i] + 1\n        else:\n            dp[i + contests[i - 1] + 1] = max(dp[i + 1], dp[i] + 1)\n\n    return dp[n]\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    else:\n        ans = 0\n        a = [int(i) for i in stdin.split()]\n        l = [i for i in range(1, n+1)]\n        while len(l) > 0:\n            if len(l) >= a[0]:\n                ans += 1\n                l = l[a[0]-1:]\n                del a[0]\n            else:\n                ans += 1\n                break\n        return ans"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # line = list(map(int, stdin.split(\"\\n\")[0].split()))\n    # print(line)\n    # n = line[0]\n    # a = line[1:]\n    n = int(stdin.split(\"\\n\")[0].split()[0])\n    a = list(map(int, stdin.split(\"\\n\")[0].split()[1:]))\n    k = [0] * (n + 1)\n    m = 0\n    for i in range(n):\n        if a[i] > 1:\n            k[a[i]] = i\n            m = max(m, k[a[i]])\n    for i in range(m + 1, n + 1):\n        if k[i]!= m:\n            m = i - 1\n            break\n    return m\n\n\nprint(solution(\"4\\n3 1 4 1\\n\"))\nprint(solution(\"5\\n1 1 1 2 2\\n\"))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(stdin.readline()) for _ in range(n)]\n    arr.sort()\n    day = 1\n    while sum(arr) > 0:\n        for i in range(n):\n            if arr[i] > 0:\n                day += 1\n                arr[i] -= 1\n                break\n    return day\nprint(solution(input()))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, contests = stdin.split('\\n')\n    contests = list(map(int, contests.split()))\n    if len(contests) == 1:\n        return 1\n\n    new_contests = contests[:]\n    while True:\n        contests.sort()\n        max_day = max(contests[-1] - contests[0], contests[-2] - contests[1])\n        # print(max_day)\n        if max_day <= 0:\n            return 1\n\n        for contest in contests:\n            if contest - max_day > 0:\n                new_contests.remove(contest)\n                new_contests.remove(contest - max_day)\n                break\n\n        if len(new_contests) == 1:\n            return max_day\n        contests = new_contests[:]\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # line = stdin.readline()\n    # n = int(line)\n    #\n    # line = stdin.readline()\n    # a = [int(s) for s in line.split(\" \")]\n    #\n    # a.sort(reverse=True)\n    #\n    # count = 0\n    # cur_sum = 0\n    # for i in range(n):\n    #     cur_sum += a[i]\n    #     if i + 1 == 1:\n    #         count += cur_sum\n    #     if i + 1 > 1:\n    #         count += 1\n    #         cur_sum = 0\n    #\n    # return count\n\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split(\" \")]\n    a.sort(reverse=True)\n    cur_sum = 0\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += a[i]\n            cur_sum += a[i]\n        else:\n            count += 1\n            cur_sum = 0\n            count += cur_sum\n            cur_sum = a[i]\n    print(count)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(s)\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # read the number of contests and the problems\n    n = int(stdin.readline())\n    lst = [int(x) for x in stdin.readline().split()]\n    lst.sort()\n    ans = 0\n    # we have to iterate from the biggest number\n    # to the smallest one\n    for i in range(n-1, -1, -1):\n        if lst[i] >= i:\n            # if the number of problems in the contest is\n            # bigger than the index of the problem, then\n            # we have to wait\n            ans += lst[i] // i\n    # we need to return the result\n    return ans\n\n\nprint(solution(input()))"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    n = int(n)\n    a = stdin.split(\"\\n\")[1]\n    a = a.split()\n    a = list(map(int, a))\n    a = list(set(a))\n    a = sorted(a)\n    count = 0\n    for i in a:\n        count += i\n    print(count)\n    return str(count//n)\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the diameter of a tree with n vertices and m edges\n    :param stdin: Input str\n    :return: The diameter of the graph as an integer\n    \"\"\"\n    n, m = (int(x) for x in stdin.split(' '))\n    edges = [tuple(int(x) - 1 for x in stdin.split(' ')) for _ in range(m)]\n\n    tree = {i: set() for i in range(n)}\n    for edge in edges:\n        tree[edge[0]].add(edge[1])\n        tree[edge[1]].add(edge[0])\n\n    components = list(tree.values())\n\n    diameter = 0\n    for component in components:\n        component_diameter = 0\n        for i in component:\n            for j in component:\n                if i!= j:\n                    component_diameter = max(component_diameter, len(edge_set(i, j)))\n\n        diameter = max(diameter, component_diameter)\n\n    return str(diameter)\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 1 2\n   ... 2 3\n   ... ''')\n    '2'\n    >>> solution('''4 2\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... ''')\n    '4 2'\n    \"\"\"\n   ..."
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets length of longest chain for a given graph\n    :param stdin: input\n    :return: length of longest chain for a given graph\n    \"\"\"\n   ...\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    edges = [map(int, line.split(' ')) for line in stdin.split('\\n')[1:]]\n    if n == 1:\n        print(0)\n    elif m == n - 1:\n        print(max(map(lambda e: e[1] - e[0], edges)))\n    else:\n        for e in edges:\n            print(e[1] - e[0])\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n----ALGORITHM----\n\nusing Kruskal's algorithm.\n\n----IMPLEMENTATION----\n\nusing union-find data structure and disjoint set of disjoint sets.\n\nthe idea is to add minimum number of edges to make the graph into a tree and the diameter of the resulting tree will be minimal possible.\n\nwe use union by rank to make it O(n)\nwe use disjoint set of disjoint sets to make it O(n)\n\n----TESTING----\n\ncheck for correct answer.\n\n----HARDWARE/SYSTEM SUPPORT----\n\nthe algorithm is correct, and can be used for graphs with up to 10^4 vertices and up to 10^4 edges.\n\n----TIME COMPLEXITY----\n\nthe time complexity of the algorithm is O(n log(n))\n\"\"\"\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.split())\n    graph = {i: set() for i in range(1, n + 1)}\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].add(u)\n        graph[u].add(v)\n    res = 0\n    def dfs(node: int, step: int) -> int:\n        nonlocal res\n        if step > res:\n            res = step\n        for neib in graph[node]:\n            if neib not in visited:\n                visited.add(neib)\n                dfs(neib, step + 1)\n                visited.remove(neib)\n    visited = set()\n    for node in graph:\n        if node not in visited:\n            dfs(node, 1)\n    return str(res)\n    '''\n    n, m = map(int, stdin.split())\n    graph = {i: set() for i in range(1, n + 1)}\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].add(u)\n        graph[u].add(v)\n    res = 0\n    def dfs(node: int, step: int) -> int:\n        nonlocal res\n        if step > res:\n            res = step\n        for neib in graph[node]:\n            if neib not in visited:\n                visited.add(neib)\n                dfs(neib, step + 1)\n                visited.remove(neib)\n    visited = set()\n    for node in graph:\n        if node not in visited:\n            dfs(node, 1)\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = list(map(int, lines[0].split()))\n    edges = [list(map(int, line.split())) for line in lines[1:m + 1]]\n    graph = {v: [] for v in range(1, n + 1)}\n    for v1, v2 in edges:\n        graph[v1] += v2,\n        graph[v2] += v1,\n\n    def dfs(v):\n        visited = set()\n        stack = [v]\n        while stack:\n            v = stack.pop()\n            visited.add(v)\n            for nv in graph[v]:\n                if nv not in visited:\n                    stack += nv,\n        return visited\n\n    def dfs_for_subgraph(v, visited):\n        stack = [v]\n        while stack:\n            v = stack.pop()\n            visited.add(v)\n            for nv in graph[v]:\n                if nv not in visited:\n                    stack += nv,\n        return visited\n\n    def dfs_for_all_subgraphs(v, visited):\n        visited = set()\n        for nv in graph[v]:\n            visited |= dfs_for_subgraph(nv, visited)\n        return visited\n\n    total = set()\n    for v in graph.keys():\n        total |= dfs_for_all_subgraphs(v, set())\n    print(max([len(v) for v in total]))\n    for v1, v2 in edges:\n        graph[v1] -= v2,\n        graph[v2] -= v1,\n        total = dfs_for_all_subgraphs(1, set())\n        print(max([len(v) for v in total]))\n        graph[v1] += v2,\n        graph[v2] += v1,\n    return ''\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 1\n   ... 1 2 3 4 5\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 3 5\n   ... ''')\n    11\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    weights = [int(x) for x in stdin.split()]\n    from collections import defaultdict\n    graph = defaultdict(list)\n    for u, v in zip(range(1, n + 1), range(1, n + 1)):\n        graph[u].append(v)\n    best_weights = [0 for _ in range(n)]\n    best_weights[0] = weights[0]\n    best_weights_edges = []\n    best_weights_edges.append(0)\n    best_weights_edges.append(1)\n    for i in range(1, n - 1):\n        best_weights[i] = best_weights[best_weights_edges[i]] + weights[i]\n        best_weights_edges.append(i)\n        best_weights_edges.append(i + 1)\n    for i in range(n - 1):\n        weights_from_i = best_weights[i:]\n        for j in range(i + k, n):\n            weights_to_j = best_weights[j:n - 1]\n            max_weight = 0\n            for weight_from_i in weights_from_i:\n                for weight_to_j in weights_to_j:\n                    max_weight = max(max_weight, weight_from_i + weight_to_j)\n            if max_weight > best_weights[j]:\n                best_weights[j] = max_weight\n                best_weights_edges[j] = i\n    return best_weights[n - 1]\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    edges = [[int(i) for i in stdin.split()] for _ in range(n-1)]\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    \n    from collections import deque\n    queue = deque([(0, 0, [0])])\n    result = 0\n    while queue:\n        curr, dist, path = queue.popleft()\n        if dist > k:\n            continue\n        elif dist < k:\n            result = max(result, curr)\n        else:\n            result = max(result, curr)\n            for u in graph[curr]:\n                if u not in path:\n                    queue.append((u, dist+1, path+[u]))\n    return result\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Maximize x1 + x2 +... + xn for the subset of vertices with no pair of\n    vertices with distance k.\n    \"\"\"\n    stdin = stdin.split()\n    num_vertices, num_dist = int(stdin[0]), int(stdin[1])\n    a = [int(stdin[i]) for i in range(2, num_vertices+2)]\n    dist = [[] for _ in range(num_vertices+1)]\n    max_sum = 0\n    for _ in range(num_dist):\n        u, v = [int(stdin[i]) for i in range(2, 4)]\n        dist[u].append(v)\n        dist[v].append(u)\n        \n    visited = [False] * (num_vertices+1)\n    visited[0] = True\n    def dfs(node: int, total: int) -> int:\n        nonlocal max_sum\n        if len(dist[node]) > num_dist:\n            if total > max_sum:\n                max_sum = total\n        for child in dist[node]:\n            if not visited[child]:\n                visited[child] = True\n                dfs(child, total + a[child-1])\n                visited[child] = False\n                \n    dfs(1, a[0])\n    return max_sum\n\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    g = [[] for _ in range(n)]\n    w = [0] * n\n    for i in range(n - 1):\n        a, b = list(map(int, stdin.split()))\n        g[a - 1].append(b - 1)\n        g[b - 1].append(a - 1)\n        w[a - 1] += 1\n        w[b - 1] += 1\n\n    # pq = [(-w[i], i) for i in range(n)]\n    # heapq.heapify(pq)\n    #\n    # res = 0\n    # for _ in range(n - k):\n    #     d, i = heapq.heappop(pq)\n    #     for j in g[i]:\n    #         d1, j = heapq.heappop(pq)\n    #         d = max(d, d1)\n    #         heapq.heappush(pq, (-d, j))\n    #     res += d\n    # return res\n\n    from collections import deque, Counter\n    counter = Counter(w)\n    counter_sorted = sorted(counter.items(), key=lambda x: x[0])\n    res = 0\n    for w1, c1 in counter_sorted:\n        q = deque()\n        q.append(c1)\n        while q:\n            k1 = q.popleft()\n            for v in g[k1 - 1]:\n                c1 = counter[v]\n                if v < k1:\n                    q.append(c1)\n                else:\n                    counter[v] -= k1\n            res += w1 * (k1 - 1)\n            if not q:\n                break\n    return res\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    graph = [[] for _ in range(n)]\n\n    for edge in stdin.split('\\n')[1:]:\n        a, b = [int(n) for n in edge.split()]\n        graph[a - 1].append(b)\n        graph[b - 1].append(a)\n\n    out = 0\n    for start in range(n):\n        for node in dfs(graph, start):\n            out = max(out, sum(map(lambda x: graph[start][x - 1], node)))\n\n    return out\n\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    # n = int(stdin.readline())\n    # k = int(stdin.readline())\n    # graph = {i: [] for i in range(1, n + 1)}\n    # for i in range(n - 1):\n    #     u, v = [int(j) for j in stdin.readline().split()]\n    #     graph[u].append(v)\n    #     graph[v].append(u)\n    # # build the graph\n    # def bfs(node):\n    #     q = deque()\n    #     q.append(node)\n    #     visited = set()\n    #     while q:\n    #         curr = q.popleft()\n    #         for neighbor in graph[curr]:\n    #             if neighbor not in visited:\n    #                 q.append(neighbor)\n    #                 visited.add(neighbor)\n    #     return visited\n    # # build the tree\n    # tree = set()\n    # for i in graph:\n    #     tree |= bfs(i)\n    # # compute the distance between each node and nodes in the tree\n    # dist = {i: 0 for i in tree}\n    # for i in dist:\n    #     for j in graph[i]:\n    #         if j in dist:\n    #             dist[j] = dist[i] + 1\n    # # answer: the minimum distance between all pairs of vertices of the tree that is greater than k\n    # m = min([dist[i] for i in dist if dist[i] > k])\n    # # remove the vertices whose distance is m\n    # for i in dist:\n    #     if dist[i] == m:\n    #         tree.remove(i)\n    # # for all pairs of vertices of the tree that is less than m\n    # # add 1 to the answer\n    # return str(max(sum(graph[i]) for i in tree) + 1)\n\n    n, k = [int(j) for j in stdin.readline().split()]\n    a = [int(j) for j in stdin.readline().split()]\n    tree = {i: [] for i in range(1, n + 1)}\n    for i in range(n - 1):\n        u, v = [int(j) for j in stdin.readline().split()]\n        tree[u].append(v)\n        tree[v].append(u)\n    def bfs(node):\n        q = deque()\n        q.append(node)\n        visited = set()\n        while q:\n            curr = q.popleft()\n            for neighbor in tree[curr]:\n                if neighbor not in visited:\n                    q.append(neighbor)\n                    visited.add(neighbor)\n        return visited\n    tree = set()\n    for i in tree:\n        tree |= bfs(i)\n    dist = {i: 0 for i in tree}\n    for i in dist:\n        for j in tree:\n            if j!= i and j in dist:\n                dist[j] = dist[i] + 1\n    m = min([dist[i] for i in dist if dist[i] > k])\n    for i in dist:\n        if dist[i] == m:\n            tree.remove(i)\n    return str(max(sum(a[i] for i in tree) + 1, sum(a) - sum(a[i] for i in tree) + n - len(tree)))\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    \n    def find(node):\n        if parent[node] == node:\n            return node\n        parent[node] = find(parent[node])\n        return parent[node]\n\n    def union(u, v):\n        u = find(u)\n        v = find(v)\n        if u == v:\n            return\n        if ranks[u] > ranks[v]:\n            u, v = v, u\n        parent[v] = u\n        if ranks[u] == ranks[v]:\n            ranks[u] += 1\n\n    tree = []\n    for i in range(N-1):\n        u, v = list(map(int, stdin.split()))\n        tree.append((u-1, v-1))\n        union(u-1, v-1)\n    \n    d = [i for i in range(N)]\n    ans = 0\n    for edge in tree:\n        u, v = edge\n        if find(u)!= find(v):\n            ans += A[u] * A[v]\n            union(u, v)\n        if d[u] + 1 >= K:\n            ans += A[u] * A[v]\n            union(u, v)\n        if d[v] + 1 >= K:\n            ans += A[u] * A[v]\n            union(u, v)\n    return str(ans)\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    weights = [int(x) for x in stdin.split('\\n')[1].split()]\n    edges = [[int(x) for x in stdin.split('\\n')[i].split()] for i in range(2, len(stdin.split('\\n')), 2)]\n\n    # solve\n    p = max_weight_partition(weights, edges, k)\n\n    # output\n    return str(p)\n\n\ndef"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    rooms = map(int, stdin.readline().split())\n    letters = map(int, stdin.readline().split())\n    i = 0\n    for l in letters:\n        for j in range(1, rooms[i] + 1):\n            if l == j:\n                print(i + 1, j)\n        i += 1\n    return \"\""
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = dict(zip(b, range(1, n + 1)))\n    for i in stdin:\n        print(c[int(i)], int(i) - 1)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    rooms = list(map(int, stdin.split()))\n    nums.sort()\n    rooms.sort()\n    for i in range(m):\n        stdin = stdin.replace(stdin[i], stdin[i].replace(stdin[i], str(rooms[i])))\n    stdin = stdin.split('\\n')\n    return stdin\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')[1:]]\n    b = [int(i) for i in stdin.split('\\n')[1:]]\n    d = {}\n    for i in range(n):\n        d[i] = []\n        for j in range(a[i]):\n            d[i].append(j + 1)\n    for i in range(m):\n        d[b[i] - 1].remove(b[i])\n    print(*[a,b])\n    for i in range(m):\n        print(d[b[i] - 1][0], b[i] - 1)\n\ndef"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    arr = sorted(arr)\n    M = list(map(int, stdin.readline().split()))\n    for m in M:\n        print(bisect_left(arr, m), m)\n    return '\\0'\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = list(map(int, stdin.split()))\n    dorm = [list(map(int, stdin.split())) for _ in range(n)]\n    letters = [list(map(int, stdin.split())) for _ in range(m)]\n\n    for l in letters:\n        print(dorm.index(min(dorm, key=lambda x: x[1]))+1, l[1]-1)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, zip(*map(int, stdin.split('\\n')))))\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    d = {}\n    for i in range(n):\n        d[i] = a[i]\n    for j in range(m):\n        if b[j] in d:\n            print(j + 1, d[b[j] - 1])\n        else:\n            print(j + 1, b[j] - 1)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_room(b: int) -> int:\n        return b - 1\n    n, m = [int(x) for x in stdin.split(' ')]\n    rooms = [int(x) for x in stdin.split(' ')[1::2]]\n    letters = [int(x) for x in stdin.split('\\n')[1::2]]\n    for i in range(m):\n        print(i+1, get_room(letters[i]), sep=' ')\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution for the problem.\n\n    Args:\n        stdin (str): the input\n\n    Returns:\n        str: the output\n\n    '''\n    pass\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    a = min(numbers)\n    b = max(numbers)\n    sum_numbers = sum(numbers)\n    c = sum_numbers - a - b\n    return str(a) + \" \" + str(b) + \" \" + str(c)"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    a = x[0] + x[1]\n    b = x[0] + x[2]\n    c = x[1] + x[2]\n    print(max(a, b, c))\n    print(min(a, b, c))\n\n\ndef"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(i) for i in stdin.split()]\n    for i in range(3):\n        for j in range(3):\n            for k in range(3):\n                if i!= j and i!= k and j!= k:\n                    print(stdin[i] + stdin[j] + stdin[k])\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int,stdin.split()))\n    for i in range(len(x)):\n        for j in range(i+1,len(x)):\n            for k in range(j+1,len(x)):\n                print(x[i],x[j],x[k])\n                return x[i],x[j],x[k]\n    return \"nope\"\n\nprint(solution(\"201 101 101 200\"))\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 6 5 4''')\n    '2 1 3'\n    >>> solution('''40 40 40 60''')\n    '20 20 20'\n    >>> solution('''201 101 101 200''')\n    '1 100 100'\n    \"\"\"\n    a, b, c, d = [int(x) for x in stdin.split()]\n    print(max(a + b, a + c, b + c, a + b + c), min(a + b, a + c, b + c, a + b + c), sep=' ')\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a + b, a + c, b + c, a + b + c))"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the codewars challenge, find a, b, c such that a + b + c = a + b + c and also a + c = a + b + c.\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    if a + b + c == a + b + c and a + c == a + b + c:\n        print(a, b, c)\n    elif a + b + d == a + b + d and a + d == a + b + d:\n        print(a, b, d)\n    elif c + d + b == c + d + b and c + b == c + d + b:\n        print(c, d, b)\n    else:\n        print(c, d, b)\n\n    return\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"3 6 5 4\")\n    2 1 3\n    >>> solution(\"40 40 40 60\")\n    20 20 20\n    '''\n   ...\n    \n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    _sum = a + b + c\n    c1 = b + c\n    c2 = a + c\n    c3 = b + d\n    for a in range(1, _sum // 2 + 1):\n        b = _sum - a\n        if a * c1 == b * c1:\n            return str(a) +'' + str(b) +'' + str(c)\n        if a * c2 == b * c2:\n            return str(a) +'' + str(b) +'' + str(c)\n        if a * c3 == b * c3:\n            return str(a) +'' + str(b) +'' + str(c)\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    s = []\n    for i in range(3):\n        for j in range(i+1, 4):\n            for k in range(j+1, 5):\n                if a+b+c == a+b+d+c+d:\n                    s.append(a+b+c)\n                    break\n                s.append(a+b+c)\n    return''.join(map(str, s))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = list(s)\n    colors = []\n    for c in s:\n        if c not in colors:\n            colors.append(c)\n    colors = sorted(colors)\n    count = 0\n    for i in range(1, len(colors)):\n        if s[i]!= colors[i-1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    s = [c for c in s]\n    s = [0] + s + [0]\n    dp = [[0 for _ in range(3)] for _ in range(n + 2)]\n    dp[1][0] = 1\n    dp[1][1] = 1\n    dp[1][2] = 1\n    for i in range(2, n + 2):\n        dp[i][0] = dp[i - 1][0] + dp[i - 1][1] + dp[i - 1][2]\n        dp[i][1] = dp[i - 1][0] + dp[i - 1][2]\n        dp[i][2] = dp[i - 1][0] + dp[i - 1][1]\n    a = n\n    while a >= 1:\n        if s[a]!= 'B' and s[a - 1]!= 'R' and s[a - 2]!= 'G':\n            if s[a] == 'G':\n                s[a] = 'R'\n                s[a - 1] = 'G'\n                s[a - 2] = 'B'\n            elif s[a] == 'R':\n                s[a] = 'B'\n                s[a - 1] = 'G'\n                s[a - 2] = 'R'\n        a -= 1\n    res = dp[n + 1]\n    print(res[0])\n    print(''.join(s[1:n + 1]))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    result = list()\n    for i in range(0, n):\n        if s[i] == \"R\":\n            result.append(\"B\")\n        else:\n            result.append(\"R\")\n    # print(result)\n    for i in range(1, n):\n        if s[i]!= s[i - 1]:\n            if result[i - 1] == \"R\":\n                result[i - 1] = \"B\"\n            else:\n                result[i - 1] = \"R\"\n    # print(result)\n    for i in range(0, n):\n        if result[i]!= s[i]:\n            result[i] = s[i]\n    # print(result)\n    return \"\".join(result)\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin.split('\\n')[1].split(' ')\n\n    lengths = [0]\n    for string in strings:\n        lengths.append(len(string))\n\n    dp = [[] for _ in range(len(strings) + 1)]\n    dp[0].append('R')\n    dp[0].append('G')\n    dp[0].append('B')\n    for i in range(1, len(dp)):\n        for j in range(i):\n            for k in range(j, i):\n                dp[i].append(dp[j][0] + dp[k][1])\n\n    cnt = 0\n    for i in range(1, len(dp)):\n        for j in range(len(dp[i])):\n            for k in range(i):\n                if dp[i][j] not in dp[k]:\n                    cnt += lengths[k] + lengths[i] - lengths[k] * lengths[i]\n                    break\n    return cnt\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    numLamps = int(stdin.split()[0])\n    lamps = stdin.split()[1]\n    lampsLst = list(lamps)\n    lampsLst.sort()\n    lampsLst = {lampsLst[0]: \"R\"}\n    lampsLst.update(dict.fromkeys(lampsLst[1:], \"G\"))\n    lampsLst.update(dict.fromkeys(lampsLst[1:], \"B\"))\n    lampsLst = list(lampsLst.values())\n    lampsLst.insert(0, \"R\")\n    lampsLst.append(\"B\")\n    diverseLst = [0, 0, 0, 0]\n    for i in range(1, len(lampsLst)):\n        if lampsLst[i]!= lampsLst[i - 1]:\n            diverseLst[i] = 1\n        elif lampsLst[i] == lampsLst[i - 1]:\n            diverseLst[i] = 0\n    lampsLst = lampsLst[:len(lampsLst) - 2]\n    lampsLst.sort()\n    lampsLst = {lampsLst[0]: \"R\"}\n    lampsLst.update(dict.fromkeys(lampsLst[1:], \"G\"))\n    lampsLst.update(dict.fromkeys(lampsLst[1:], \"B\"))\n    lampsLst = list(lampsLst.values())\n    lampsLst.insert(0, \"R\")\n    lampsLst.append(\"B\")\n    diverseLst = [0, 0, 0, 0]\n    for i in range(1, len(lampsLst)):\n        if lampsLst[i]!= lampsLst[i - 1]:\n            diverseLst[i] = 1\n        elif lampsLst[i] == lampsLst[i - 1]:\n            diverseLst[i] = 0\n    lampsLst = lampsLst[:len(lampsLst) - 2]\n    diverseLst = [1 if i == 1 else i for i in diverseLst]\n    return min(diverseLst)\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is an implementation of the LeetCode problem\n    \"Minimum Number of Removals to Make a Divisible by K\"\n    https://leetcode.com/problems/minimum-number-of-removals-to-make-a-divisible-by-k/\n    \"\"\"\n\n    n = int(stdin)\n    lst = list(stdin)\n\n    current_count = 0\n    current_index = 1\n    current_color = lst[current_index]\n    for index, char in enumerate(lst):\n        if index == 0:\n            continue\n        if current_count == n:\n            break\n        if index == current_index:\n            continue\n        if lst[current_index]!= char:\n            current_count += 1\n            current_index = index\n            current_color = char\n\n    return f\"{current_count}\\n{''.join(lst)}\"\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\nRBGRRBRGG\\n\")\n    2\n    >>> solution(\"8\\nBBBGBRRR\\n\")\n    2\n    >>> solution(\"13\\nBBRRRRGGGGGRR\\n\")\n    6\n    \"\"\"\n    lamps = stdin\n    result = []\n    n = int(lamps[0])\n    for i in range(1, n + 1):\n        if lamps[i]!= lamps[i - 1]:\n            result.append(lamps[i - 1] + lamps[i])\n    print(min(map(len, set(result))))\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    d = {}\n    c = 0\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n            c += 1\n    i = 1\n    ans = 1\n    while i <= n - 1:\n        if d[s[i - 1]] == 1:\n            ans += 1\n            i += d[s[i - 1]]\n        else:\n            ans += d[s[i - 1]] // 2\n            i += d[s[i - 1]] // 2 + (d[s[i - 1]] % 2)\n    return ans\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/training8M6TUB-3G/\"\"\"\n    lamps = stdin.split('\\n')[0]\n    n = len(lamps)\n\n    # number of lamps that should be colored\n    num_to_change = 1\n\n    for i in range(n - 1):\n        if lamps[i]!= lamps[i + 1]:\n            num_to_change += 1\n    return num_to_change\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest increasing subsequence, with elements in array, and returns the indices of those numbers\n    >>> solution('3 3 4 7 5 6 8')\n    4\n    >>> solution('1 3 5 2 4 6')\n    2\n    >>> solution('1 3 5 2 4 6')\n    2\n    >>> solution('1 3 5 2 4 6')\n    2\n    >>> solution('1 3 5 2 4 6')\n    2\n    \"\"\"\n\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split(' ')))\n    m = int(stdin.readline())\n    for i in range(m):\n        arr = arr[:int(stdin.readline())-1]\n    arr = list(set(arr))\n    # arr.sort()\n    # res = 0\n    # for i in range(len(arr)):\n    #     for j in range(i + 1, len(arr)):\n    #         if arr[j] - arr[i] > res:\n    #             res = arr[j] - arr[i]\n    # return res\n    # res = 1\n    # for i in range(len(arr) - 1):\n    #     if arr[i + 1] > arr[i]:\n    #         res += 1\n    # return res\n    return len(arr)"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # a1 a2 a3 a4 a5 a6 a7\n    #   1   3   4   7   5   6   8\n    # [1, 2, 3, 4, 7, 5, 6]\n    # [1, 2, 3, 4, 7, 5, 6, 8]\n    # [1, 2, 3, 4, 7, 5, 6, 8, 10]\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    # [1, 2, 3, 4, 7, 5, 6, 8, 10]\n    maxlen = 0\n    ans = []\n    for i in range(n):\n        for j in range(i, n):\n            if all(a[j] > a[k] for k in range(i, j)):\n                if maxlen < j - i + 1:\n                    maxlen = j - i + 1\n                    ans = [i, j]\n    print(maxlen)\n    print(\" \".join([str(x) for x in ans]))"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    dp = [[0 for j in range(n + 1)] for i in range(n + 1)]\n    dp[0][0] = 0\n    dp[1][1] = 1\n    dp[2][2] = 2\n\n    for i in range(2, n + 1):\n        dp[i][0] = dp[i - 1][0] + 1\n        dp[i][i] = dp[i - 1][i - 1] + 1\n\n        for j in range(1, i):\n            dp[i][j] = max(dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n\n    ans, ans_arr = 0, []\n    for i in range(n + 1):\n        ans = max(dp[n][i], ans)\n        if ans == dp[n][i]:\n            ans_arr.append(i)\n\n    return ans, ans_arr\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, arr = input().split()\n    arr = [int(x) for x in arr.split(' ')]\n    res = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            if arr[i:j] == sorted(arr[i:j]):\n                res.append(j-i)\n    res.sort()\n    for i in range(len(res)):\n        if res[i] == res[0]:\n            print(i+1)\n        else:\n            break\n\n\nsolution(\"7 3 4 7 5 6 8\")\nsolution(\"6 7 8 3 4 5 9 10 11\")\nsolution(\"4 10 9 8 7\")\nsolution(\"9 6 7 8 3 4 5 9 10 11\")"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def _solve(nums: List[int]) -> int:\n        k: int = 1\n        l: int = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                k += 1\n            else:\n                l = max(k, l)\n                k = 1\n        return max(k, l)\n    nums = [int(line) for line in stdin.split('\\n')[1].split(' ')]\n    return '\\n'.join([str(i) for i in [_solve(nums[:i + 1]) for i in range(len(nums))]])\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *array = [int(x) for x in stdin.splitlines()]\n    d = {i: x for i, x in enumerate(array)}\n    res, k = [], 0\n    for i in range(n):\n        x = d[i]\n        for j in range(k, n):\n            if d[j] > x:\n                break\n            k += 1\n        res.append(j)\n    return str(k) + '\\n' +''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find a subsequence of consecutive integers in the input array.\"\"\"\n    # Your code here\n    stdin = stdin.split(\"\\n\")\n    array = list(map(int, stdin[1].split()))\n    array.sort()\n    k = 1\n    for i in range(0, len(array) - 1):\n        if array[i + 1] - array[i] == 1:\n            k += 1\n        else:\n            break\n    max_k = k\n    lst = []\n    for i in range(0, len(array) - 1):\n        if array[i + 1] - array[i] == 1:\n            k += 1\n            lst.append(i + 1)\n        else:\n            k = 1\n            lst.append(i + 1)\n        if k > max_k:\n            max_k = k\n            lst = []\n            for j in range(i + 1, len(array) - 1):\n                if array[j + 1] - array[j] == 1:\n                    k += 1\n                    lst.append(j + 1)\n                else:\n                    k = 1\n                    lst.append(j + 1)\n                if k > max_k:\n                    max_k = k\n                    lst = []\n    for index in lst:\n        print(index, end=' ')\n    return \"\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    lines = stdin.splitlines()\n    \n    return \"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return stdin"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n        len(seq) <= 50\n        no negative numbers\n        seq is increasing\n        the first number in the sequence is not in the range [1, 10**9]\n    \"\"\"\n    n = int(stdin.readline())\n    seq = list(map(int, stdin.readline().split()))\n    increased = 0\n    result = []\n    last = -1\n    for i in range(len(seq)):\n        if seq[i] == last:\n            continue\n        if i > 0 and seq[i] < seq[i-1]:\n            increased += 1\n        if increased == 0:\n            result.append(i+1)\n            increased = 0\n        last = seq[i]\n    return len(result)"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(\" \")))\n    if b * 3 % 2 == 0:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"Yes\" if (a * b) % 2 == 1 else \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if ((A > 3) | (B > 3)) | (((A * B) % 2)!= 0):\n        return 'No'\n    return 'Yes'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a * b % 2 == 1:\n        return 'Yes'\n    return 'No'\n'''\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    if 1 <= A and A <= 3 and 1 <= B and B <= 3:\n        if (A * B * 3) % 2 == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"Error: Values must be between 1 and 3\"\n    \n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return 'Yes' if sum([x * y for x, y in [(a, b), (a, 1), (a, 3), (3, b), (1, b), (3, 1)] if a * b % 2!= 0]) % 2 == 1 else 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(' ')]\n    for c in range(1, 4):\n        if a * b * c % 2 == 1:\n            return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  A = int(stdin.readline().split()[0])\n  B = int(stdin.readline().split()[0])\n  C = int(stdin.readline().split()[0])\n  return 'Yes' if (A * B * C % 2) else 'No'"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a, b = map(int, stdin.split())\n    if 1 <= a <= 3 and 1 <= b <= 3:\n        if (a * b) % 2!= 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"Invalid\"\n    return \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    return str(x + y)\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(int(x * 2 + y * 0.5))\n\nprint(solution(input()))\n\n'''\n\nfrom math import ceil\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    train_fare, bus_fare = map(int, stdin.split())\n    total_fare = train_fare + (train_fare / 2) if train_fare < bus_fare else bus_fare\n    return str(int(total_fare))\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = list(map(int, stdin.split(\" \")))\n    return str(X + (Y * 2) if X < Y else X)\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cost1 = int(stdin.split()[0])\n    cost2 = int(stdin.split()[1])\n    return str(cost1 * 2 + cost2)\n\"\"\"\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c, x, y = map(int, stdin.split())\n    a, b, c = sorted([a, b, c])\n    if a + b / 2 >= c:\n        return int(a + b / 2 * 2 - (c - a))\n    else:\n        return int(a * 2 - c)\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0:\n        return b * 2\n    else:\n        return b * 2 + b\n\"\"\"\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = \"81 58\"\n    x, y = map(int, stdin.split())\n    return str(int((x * 2) + y))\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    train_fare, bus_fare = [int(num) for num in stdin.split()]\n    result = (train_fare + bus_fare) * 2 - bus_fare\n    return str(result)"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(\" \"))\n    if (x % 2 == 0):\n        print(x * y)\n    else:\n        print(x * (y / 2) + (x * y) / 2)\n\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    passwords = []\n    for i in range(1, 10):\n        passwords.append(str(i) * N)\n    return len(passwords)\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    \"\"\"\n    Returns the number of possible passwords for the given number of digits N.\n    \"\"\"\n    pass"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if 1 <= N <= 9:\n        return 8 ** N\n    else:\n        return 'Invalid Input'\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the solution for the day.\n    :param stdin: standard input\n    :return: string with solution\n    '''\n    pass\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  num_of_inputs = int(stdin)\n  \n  result = 0\n  for i in range(1, num_of_inputs + 1):\n    result += 9 * (i - 1)\n  \n  return result"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if (int(stdin) % 15 == 0 or\n                      int(stdin) % 5 == 0 and int(stdin) % 3 == 0) else 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    age = int(stdin)\n\n    if age % 15 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin) % 15 == 0 else \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n\n    if X >= 7:\n        return 'YES'\n\n    return 'NO'"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    growth = int(stdin)\n    if growth % 5 == 0 or growth % 3 == 0 or growth % 7 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    if x < 7:\n        return \"NO\"\n    elif x % 5 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin) % 5 == 0 else 'NO'"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  # your solution goes here\n  x = int(stdin)\n  if x >= 6:\n    return \"YES\"\n  else:\n    return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if 1 <= X <= 9:\n        return 'YES' if (X%3 == 0) or (X%5 == 0) or (X%15 == 0) else 'NO'\n    return 'YES' if (X%5 == 0) or (X%3 == 0) or (X%15 == 0) else 'NO'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if (x % 5 == 0 or x % 3 == 0):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    index = n + 1 - 999\n    return \"ABC\" + str(index)\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 1000:\n        n -= 999\n    elif n >= 100:\n        n -= 99\n    elif n >= 10:\n        n -= 9\n    return \"ABC\" + str(n)"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC'[:3]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n\n    first_three_chars = (\n        \"ABC\"\n        + str(num - 999 + 1)\n        + \"D\" * (num - 1000 + 1)\n        + \"ABC\"\n        + str(num - 999 + 1)\n    )\n\n    print(first_three_chars[:3])\n\n    return \"\""
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 1998 or n < 1:\n        return \"ABC\"\n    elif n < 1000:\n        return \"ABC\" + str(n)\n    elif n < 2000:\n        return \"ABD\" + str(n - 1000)\n    else:\n        return \"ABC\" + str(n - 1999)\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # import stdlib\n    import sys\n\n    # import stdlib\n    import sys\n\n    # cast to int\n    n = int(stdin)\n\n    # round1 = [\"ABC\", \"DEF\",..., \"XYZ\"]\n    round1 = [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\", \"YZ\"]\n\n    # round2 = [\"ABC\", \"DEF\",..., \"WXY\"]\n    round2 = [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\", \"YZ\"]\n\n    # round3 = [\"ABC\", \"DEF\",..., \"XYZ\"]\n    round3 = [\"ABC\", \"DEF\", \"GHI\", \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\", \"YZ\"]\n\n    # if n < len(round1):\n    #     return round1[n]\n    # elif n < len(round1) + len(round2):\n    #     return round2[n - len(round1)]\n    # else:\n    #     return round3[n - len(round1) - len(round2)]\n\n    # shorter way\n    return (\n        round1[n % len(round1)]\n        if n < len(round1)\n        else round2[(n % len(round1)) % len(round2)]\n        if n < len(round1) + len(round2)\n        else round3[(n % len(round1) - len(round2)) % len(round3)]\n    )\n\n\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    round = N\n    if round >= 1000:\n        round = round - 999\n    if round < 100:\n        return \"ABC\" + str(round)\n    else:\n        return \"ABC\" + str(round)[0]"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = (int(input()) for _ in range(6))\n    return \"Yay!\" if any(x - y > k for x in (a, b, c, d, e) for y in (a, b, c, d, e) if x < y) else \":( \"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, K = map(int, stdin.split())\n    p, q = sorted([A, B, C, D, E])\n    return 'Yay!' if p + q - K < 0 else':( '"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(s) for s in stdin.strip().split()]\n    return 'Yay!' if any(\n        d - e < k <= x - y\n        for x in [a, b, c, d, e]\n        for y in [a, b, c, d, e]\n        if x < y\n    ) else ':(\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    if a - b <= k and a - c <= k and a - d <= k and a - e <= k and b - c <= k and b - d <= k and b - e <= k and c - d <= k and c - e <= k and d - e <= k:\n        return \"Yay!\"\n    return \":(\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    dist = {\n        (a, b): b - a,\n        (a, c): c - a,\n        (a, d): d - a,\n        (a, e): e - a,\n        (b, c): c - b,\n        (b, d): d - b,\n        (b, e): e - b,\n        (c, d): d - c,\n        (c, e): e - c,\n        (d, e): e - d\n    }\n    for i in dist.values():\n        if i > k:\n            return \"Yay!\"\n    return \":(\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(i) for i in stdin.split('\\n')]\n    distances = [a - b, a - c, a - d, a - e]\n    distances.extend([b - c, b - d, b - e])\n    distances.extend([c - d, c - e])\n    distances.extend([d - e])\n    print(distances)\n    for i in distances:\n        if i > k:\n            return 'Yay!'\n    return ':'"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c, d, e, k = map(int, stdin.split())\n  for i in range(k + 1):\n    if (a, b) == (b, c) or (a, b) == (c, d) or (a, b) == (d, e) or (b, c) == (c, d) or (b, c) == (d, e) or (c, d) == (d, e) or (a, c) == (c, d) or (a, d) == (d, e) or (a, e) == (e, d) or (b, d) == (d, e) or (b, e) == (e, d):\n      return 'Yay!'\n  return ':('"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    c = a + b\n    d = a + c\n    e = a + d\n    k = b + c\n    if k < d or e < c or e < k:\n        return 'Yay!'\n    else:\n        return ':( '\nprint(solution(stdin))\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split('\\n'))\n    if k < max(a, b, c, d, e):\n        return \"Yay!\"\n    return \":(\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, *l = map(int, stdin.split())\n    count = 0\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] > 2 * (max(l[i], l[j]) - 1):\n                count += 1\n    if count:\n        return \"Yay!\"\n    return \":(\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        print('red')\n    else:\n        print(stdin)\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return \"red\"\n    return stdin\n\"\"\"\n\n\"\"\"\nYou will be given an integer a and a string s consisting of lowercase English letters as input.\nWrite a program that prints s if a is not less than 3200 and prints red if a is less than 3200.\n\n-----Constraints-----\n - 2800 \\leq a < 5000\n - s is a string of length between 1 and 10 (inclusive).\n - Each character of s is a lowercase English letter.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\ns\n\n-----Output-----\nIf a is not less than 3200, print s; if a is less than 3200, print red.\n\n-----Sample Input-----\n3200\npink\n\n-----Sample Output-----\npink\n\na = 3200 is not less than 3200, so we print s = pink.\n\"\"\"\n\n\"\"\"\n1. If a is not less than 3200, print s; if a is less than 3200, print red.\n2. Check if a is less than 3200. If it is less than 3200, return \"red\".\n3. If not, print s.\n\n\"\"\"\ndef"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    if a < 3200:\n        print('red')\n    else:\n        print(stdin)\n\n\nsolution(input())"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) < 3200:\n        print(\"red\")\n    else:\n        print(stdin)\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    s = stdin[1]\n    \n    if a < 3200:\n        print(\"red\")\n    else:\n        print(s)\n    \n    return solution\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return s if a is not less than 3200, else print red.\"\"\"\n    a = int(stdin)\n    if a < 3200:\n        print(\"red\")\n    else:\n        print(stdin)\n    return\nsolution(str(int(input())))\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  a = int(stdin)\n  if a < 3200:\n    return \"red\"\n  else:\n    return \"pink\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        return \"red\"\n    else:\n        return \"pink\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # 1. read\n    # 2. compare\n    # 3. write\n    pass\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    contest = stdin[0]\n    if contest == 'A':\n        next = 'B'\n    elif contest == 'B':\n        next = 'C'\n    elif contest == 'C':\n        next = 'A'\n    else:\n        next = 'A'\n    print(next)\n    return next"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ..."
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return 'ABC'\n    if rating < 2800:\n        return 'ARC'\n    return 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R >= 1200:\n        return 'ABC'\n    elif R >= 2800:\n        return 'ARC'\n    else:\n        return 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    contest = {'R':'ABC', 'P':'ARC', 'D':'AGC'}\n    ratings = [1200, 2800]\n    for i in contest:\n        if int(stdin) < ratings[contest[i]]:\n            return contest[i]\nsolution(input())\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n\"\"\"\n\n\"\"\"\n\uc815\ud655\uc131  \ud14c\uc2a4\ud2b8\n\ud14c\uc2a4\ud2b8 1 \u3009    \ud1b5\uacfc (0.01ms, 10MB)\n\ud14c\uc2a4\ud2b8 2 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 3 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 4 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 5 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 6 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 7 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 8 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 9 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 10 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 11 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 12 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 13 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 14 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 15 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 16 \u3009    \ud1b5\uacfc (0.01ms, 10.3MB)\n\ud14c\uc2a4\ud2b8 17 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 18 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 19 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 20 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 21 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 22 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 23 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 24 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 25 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 26 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 27 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 28 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 29 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 30 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 31 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 32 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 33 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 34 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 35 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 36 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 37 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 38 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 39 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 40 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 41 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 42 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 43 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 44 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 45 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 46 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 47 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 48 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 49 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 50 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 51 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 52 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 53 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 54 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 55 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 56 \u3009    \ud1b5\uacfc (0.01ms, 10.2MB)\n\ud14c\uc2a4\ud2b8 57 \u3009    \ufffd"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the name of the next contest rated for Takahashi (ABC, ARC or AGC).\"\"\"\n    rating = int(stdin)\n    if rating < 1200:\n        return 'ABC'\n    elif rating < 2800:\n        return 'ARC'\n    else:\n        return 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes input R, and returns the name of the next contest rated for Takahashi\n    \"\"\"\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n\"\"\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '991'\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = str(n)\n    n = n.replace(\"1\", \"9\")\n    n = n.replace(\"9\", \"1\")\n    n = int(n)\n    return n\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Replace the 9 in the ones place with 1, the 1 in the tens place with 9 and the 1 in the hundreds place with 9.\"\"\"\n    int_num = int(stdin)\n    return str(int_num).replace('1', '9').replace('9', '1')"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace(\"1\", \"9\").replace(\"9\", \"1\")))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('1', '9').replace('9', '1')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n if n < 10 else int('9' + '9' * (n - 1)))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return str(int(stdin.replace('1','9').replace('9','1')))\n\"\"\"\n\ndef"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace('1','9')\n    s = s.replace('9','1')\n    print(s)\n    return s"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = n.replace(\"1\", \"9\")\n    n = n.replace(\"9\", \"1\")\n    return n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(\"abac\")\n    return \"abac\"\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        secret = stdin.readline().strip()\n        substring = stdin.readline().strip()\n        pattern = ''.join([secret[i:i+2] for i in range(len(secret)-1)])\n        if len(substring) >= len(pattern):\n            print(pattern)\n        else:\n            print(substring[:len(pattern)])\n\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    result = []\n    for _ in range(count):\n        result.append(solve(stdin.readline().strip()))\n    return '\\n'.join(result)\n\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # We can read the input as a single string.\n    b = stdin\n\n    # Since the input is a single string, we can get the first character of the string\n    # which should be the first character of the secret string.\n    # Second character can be any character of the alphabet.\n    # The secret string is at most of length 2.\n    char = b[0]\n    secret_string = char\n    secret_string_len = 1\n\n    # Since the string is given as a single string, we can get the length of the string\n    # which is the length of the secret string.\n    for c in b[1:]:\n        if c!= char:\n            secret_string += c\n            secret_string_len += 1\n            char = c\n            # If we have received the secret string length, we can exit the loop.\n            if secret_string_len == 2:\n                break\n\n    # We need to find the correct secret string, so we have to compare the secret string\n    # with the secret string that we have.\n    # We can find the secret string by going through each substring of length 2 of the input string.\n    for i in range(len(b) - secret_string_len):\n        # If the substring is equal to the secret string, we can move on.\n        if secret_string == b[i: i + secret_string_len]:\n            # As long as the substring matches with the secret string, we continue.\n            continue\n        # Otherwise we break.\n        break\n\n    # If we get out of the loop, then the secret string is the substring.\n    # If we did not break, then the secret string was the same as the substring.\n    # In that case we return the secret string.\n    # If we did break, then the secret string is not the substring.\n    return secret_string\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('abbaac')\n    'abac'\n    >>> solution('ac')\n    'ac'\n    >>> solution('bccddaaf')\n    'bcdaf'\n    >>> solution('zzzzzzzzzz')\n    'zzzzzz'\n    >>> solution('aaa')\n    'aaa'\n    >>> solution('bbbbbbbbbb')\n    'bbbbbb'\n    >>> solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abbaac\")\n    abac\n    >>> solution(\"ac\")\n    ac\n    >>> solution(\"bccddaaf\")\n    bcdaf\n    \"\"\"\n    b = stdin\n    return \"\".join([b[i : i + 2] for i in range(len(b) - 1) if b[i] == b[i + 1]])\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We split the string into list of substrings of length 2.\n    We sort the substrings.\n    For each substring, we compare it with the rest of the substrings.\n    The one with the smallest difference will be matched to the other one.\n    \"\"\"\n\n    inp = stdin.split('\\n')\n    inp = [i for i in inp if i]\n    inp = ''.join(inp)\n    length = len(inp)\n\n    if length < 2:\n        return ''\n\n    diffs = []\n    for i in range(0, length):\n        for j in range(i + 2, length + 1):\n            diffs.append(j - i)\n\n    diffs.sort()\n    print(diffs)\n    return ''\n\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('abbaac')\n    'abac'\n    >>> solution('ac')\n    'ac'\n    >>> solution('bccddaaf')\n    'bcdaf'\n    >>> solution('zzzzzzzzzz')\n    'zzzzzz'\n    \"\"\"\n    result = ''\n    for i in range(len(stdin)):\n        if stdin[i]!= stdin[i + 1]:\n            result += stdin[i]\n    return result\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\nfor _ in range(int(stdin)):\n    a, b = map(int, stdin.readline().split())\n    print(a // b)\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        a, b = map(int, stdin.readline().split())\n        a %= b\n        if a == 0:\n            print(0)\n        else:\n            print(b - a)\n    return ''\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string with the solution.\"\"\"\n    return ''\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #stdin = stdin.split('\\n')\n    #t = int(stdin[0])\n    #t = int(stdin[1])\n    t = int(stdin)\n    while t:\n        a, b = map(int, stdin.split())\n        print(min(a, b, a // b + (a % b!= 0)), end=' ')\n        t -= 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # create a list of inputs from the input\n    # use the input() function to get user input\n    # split the line into two numbers\n    # convert the list of two numbers to int\n    # to put it into the input, you have to convert it to string\n    a, b = list(map(int, stdin.split()))\n    return str(int(a / b) * b - a)\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''.join(map(str, stdin))\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(str, stdin))\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_cases = int(stdin.readline())\n    for i in range(number_of_cases):\n        number_1 = int(stdin.readline().split(\" \")[0])\n        number_2 = int(stdin.readline().split(\" \")[0])\n        if number_1 % number_2 == 0:\n            print(0)\n        else:\n            print(number_1 // number_2 + 1)\n    return \"\""
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string with the number of moves to make the number divisible by the second number.\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        if a % b == 0:\n            print(0)\n        else:\n            print(int(a / b) + 1)\n\n\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    AUTHOR: Luca Nannicini\n    DATE: 28-02-2020\n    DESC: return the highest average temperature\n    in the last days.\n    '''\n    days = [int(line) for line in stdin.strip().split('\\n')]\n    k = days[0]\n    n = days[1]\n    temperatures = days[2:]\n    # enumerate all possible segments\n    segments = []\n    for start in range(n):\n        for end in range(start, n):\n            segment = temperatures[start:end + 1]\n            segments.append(segment)\n    # keep only segments with length\n    # equal or greater than k\n    segments = [s for s in segments\n                if len(s) >= k]\n    # calculate average temperature for each\n    # segment\n    average_temperatures = [sum(segment) / len(segment)\n                            for segment in segments]\n    # return the highest average temperature\n    return str(max(average_temperatures))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = [int(i) for i in stdin.readline().split()]\n\n    answer = 0\n    for i in range(len(a)):\n        if i+k > len(a):\n            continue\n        else:\n            answer = max(answer, sum(a[i:i+k]) / k)\n    return str(answer)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.strip().split('\\n')]\n    arr = [int(i) for i in stdin.strip().split('\\n')[1].split(' ')]\n    arr.sort()\n    max = 0\n    for i in range(0, n - k + 1):\n        avg = (arr[i] + arr[i + k - 1]) / k\n        if avg > max:\n            max = avg\n    return str(max)"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    a = [int(i) for i in s]\n\n    maxi = 0\n    for i in range(n):\n        for j in range(i + k, n + 1):\n            t = a[i:j]\n            t = [float(i) for i in t]\n            m = sum(t) / len(t)\n            if m > maxi:\n                maxi = m\n    return maxi\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days, minimum_segments = map(int, stdin.split())\n    temperatures = list(map(int, stdin.split()))\n\n    segment_max_temperature = 0\n    for segment in range(minimum_segments, days + 1):\n        for i in range(0, len(temperatures) - segment + 1):\n            average_temperature = sum(temperatures[i : segment + i]) / segment\n            segment_max_temperature = max(segment_max_temperature, average_temperature)\n    return segment_max_temperature\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    print(solution_arr(arr, n, k))\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    start = 0\n    end = n\n    if n < k:\n        print(0)\n        return\n    if k == 1:\n        print(max(nums))\n        return\n    res = 0\n    while start <= end:\n        cur = sum([nums[i] for i in range(start, end + 1)]) / (end - start + 1)\n        res = max(res, cur)\n        start += 1\n        end -= 1\n    print(res)\n    return"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def calc(arr, k):\n        arr.sort()\n        if k == 1:\n            return arr[0]\n        else:\n            res = 0\n            for i in range(k, len(arr)):\n                res = max(res, (arr[i] - arr[i - k]) / k)\n            return res\n\n    a = list(map(int, stdin.split()))\n    n, k = a[0], a[1]\n    arr = a[2:]\n    return calc(arr, k)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, sum(arr[i:i + k]) / k)\n    return str(round(res, 6))\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your solution here\n    input()\n    arr, positions = [int(i) for i in stdin.split('\\n')[1:]][0], [int(i) for i in stdin.split('\\n')[2:]][0]\n    for p in positions:\n        if p > 0 and p < len(arr):\n            if arr[p-1] > arr[p]:\n                arr[p-1], arr[p] = arr[p], arr[p-1]\n            else:\n                arr[p-1], arr[p] = arr[p], arr[p-1]\n    if arr == sorted(arr):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    while t!= 0:\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        p = set(map(int, stdin.readline().strip().split()))\n        if (all(a[i] <= a[i+1] for i in range(n-1)) or all(a[i] >= a[i+1] for i in range(n-1))) and len(p) == m:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        t -= 1\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'YES'"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"YES\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    \n    m = n\n    while n % 2 == 0:\n        m = n - 1\n        n //= 2\n    \n    \n    \n    x = '0' * m + bin(n)[2:]\n    \n    \n    while len(x) % 3 > 0:\n        x += '0'\n    \n    x = list(x)\n    \n    \n    result = ''\n    \n    for i in range(len(x)):\n        if i % 3 == 0:\n            result += '0' * (len(x) - i - 1)\n        result += x[i]\n    \n    return result"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n    count = 0\n    a = 0\n    b = 0\n    c = 0\n    result = []\n    while count < n:\n        a = int(stdin[b])\n        b = int(stdin[c])\n        c = int(stdin[a])\n        result.append(str(stdin[a]))\n        count = count + 1\n    return ''.join(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    t = stdin[1]\n    k = n\n    st = \"\"\n    for i in t:\n        k = k//2\n        if i == \"b\":\n            st += \"a\"*k\n        else:\n            st += \"b\"*k\n    return st\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    m = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    \n    a = []\n    for i in range(x):\n        a.append(m)\n    \n    b = []\n    for i in range(x):\n        b.append(s[i])\n    \n    for i in range(m-x):\n        b.append(s[i])\n    \n    print(''.join(b))\n    return solution(stdin)\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution is an attempt to solve this problem\n    using the fact that len(s) = n * m where n is the length of s and m is the count of characters in s\n    '''\n    n = int(stdin[:stdin.index('\\n')])\n    t = stdin[stdin.index('\\n') + 1:]\n\n    s = ''\n    while len(s) < n:\n        for i in range(1, n + 1):\n            s += t[:i]\n        s += '\\n'\n\n    return s[:n]\n\ns = solution(stdin)\nprint(s)"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cipher_length = len(stdin)\n    cipher_array = []\n    stdin = stdin.split(' ')\n    for x in stdin:\n        cipher_array.append(len(x))\n\n    sum_cipher = 0\n    for x in cipher_array:\n        sum_cipher += x\n\n    sum_cipher -= cipher_length\n    if sum_cipher % 2 == 0:\n        return stdin[0]\n    else:\n        return stdin[0]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"Decrypts the string using the repeating cipher.\"\n    \n    n = int(stdin)\n    s = stdin\n    lst = []\n    i = 0\n    while i < n:\n        if s[i] == 'o':\n            lst.append(s[i])\n            i += 1\n            while s[i] == 'o':\n                lst.append('o')\n                i += 1\n            i -= 1\n        else:\n            lst.append(s[i])\n            i += 1\n    return ''.join(lst)\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = [''] * len(stdin)\n    index = 1\n    for i in range(len(stdin)):\n        if stdin[i] == stdin[i - 1]:\n            index += 1\n        else:\n            result[i] = str(index)\n            index = 1\n        if i == len(stdin) - 1:\n            result[i] = str(index)\n    return ''.join(result)"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n^2)\n    \"\"\"\n\n    n, m = [int(x) for x in stdin.split(' ')]\n    edges = []\n    for i in range(m):\n        u, v, w = [int(x) for x in stdin.split(' ')[i * 3: i * 3 + 3]]\n        edges.append((u, v, w))\n\n    def cost(e):\n        return e[2]\n\n    edges.sort(key=cost)\n    unvisited = set(range(1, n + 1))\n\n    dp = [[float('inf')] * len(unvisited) for _ in range(n)]\n    for edge in edges:\n        u = edge[0]\n        v = edge[1]\n        if u == v:\n            continue\n        if u in unvisited and v in unvisited:\n            dp[u - 1][v - 1] = min(dp[u - 1][v - 1], edge[2])\n\n    def check(dp, unvisited, e, is_min=True):\n        u = e[0]\n        v = e[1]\n        if u == v:\n            return False\n        if u in unvisited and v in unvisited:\n            if is_min:\n                dp[u - 1][v - 1] = min(dp[u - 1][v - 1], e[2])\n            else:\n                dp[u - 1][v - 1] = max(dp[u - 1][v - 1], e[2])\n            return True\n\n    num_ops = 0\n    unvisited.remove(1)\n    for i in range(1, n):\n        for j in range(len(unvisited)):\n            if j!= i:\n                e = (i + 1, j + 1, 0)\n                if not check(dp, unvisited, e):\n                    num_ops += 1\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            e = (i + 1, j + 1, 0)\n            if not check(dp, unvisited, e):\n                num_ops += 1\n\n    return str(num_ops)\n\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u0432\u0435\u0441\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043a MST\n    :param stdin: \u0421\u0442\u0440\u043e\u043a\u0430 \u0441 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0435\u0431\u0435\u0440 \u0438\u0437 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n    :return: \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0443\u0432\u0435\u043b\u0438\u0447\u0435\u043d\u0438\u044f \u0432\u0435\u0441\u0430 \u0434\u043b\u044f \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u044f \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u043a MST\n    \"\"\"\n    start_graph = stdin.split('\\n')\n    start_graph.pop()\n    start_graph.pop()\n\n    start_graph_copy = start_graph.copy()\n\n    n, m = start_graph.pop(0).split(' ')\n\n    start_graph = start_graph[:int(n)]\n    start_graph_copy = start_graph_copy[:int(n)]\n\n    s = 0\n    for i in range(int(m)):\n        s += int(start_graph[i].split(' ')[2])\n    start_graph.pop(0)\n\n    dist = 0\n    for i in range(int(n)):\n        for j in range(int(n)):\n            if i!= j and int(start_graph[i][j])!= 0:\n                dist += int(start_graph[i][j])\n    dist = dist * 2\n\n    for i in range(int(m)):\n        for j in range(int(n)):\n            if int(start_graph[i].split(' ')[1]) == int(j):\n                if int(start_graph[i].split(' ')[2]) > int(start_graph_copy[j].split(' ')[2]):\n                    start_graph_copy[j] = start_graph_copy[j].split(' ')[0] +'' + start_graph_copy[j].split(' ')[1] +'' + str(int(start_graph_copy[j].split(' ')[2]) + 1)\n\n    if dist > s:\n        return '0'\n    else:\n        return '1'\n\n\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from math import inf\n\n    stdin = stdin.split('\\n')\n    N, M = map(int, stdin.pop(0).split())\n    graph = [\n        map(int, line.split()) for line in stdin\n    ]\n    tree = [set() for _ in range(N)]\n    cost = inf\n    for i, (u, v, w) in enumerate(graph):\n        tree[u - 1].add((v - 1, i))\n        tree[v - 1].add((u - 1, i))\n    for i in range(M):\n        u, v, w = graph[i]\n        for j in range(len(tree[u - 1])):\n            (p, idx) = tree[u - 1][j]\n            if p == v - 1:\n                graph[idx] = (u, v, w + 1)\n                tree[u - 1].remove((p, idx))\n                tree[v - 1].remove((p, idx))\n                break\n        for j in range(len(tree[v - 1])):\n            (p, idx) = tree[v - 1][j]\n            if p == u - 1:\n                graph[idx] = (u, v, w + 1)\n                tree[u - 1].remove((p, idx))\n                tree[v - 1].remove((p, idx))\n                break\n        for j in range(len(tree[u - 1])):\n            (p, idx) = tree[u - 1][j]\n            if p == v - 1:\n                graph[idx] = (u, v, w + 1)\n                tree[u - 1].remove((p, idx))\n                tree[v - 1].remove((p, idx))\n                break\n        for j in range(len(tree[v - 1])):\n            (p, idx) = tree[v - 1][j]\n            if p == u - 1:\n                graph[idx] = (u, v, w + 1)\n                tree[u - 1].remove((p, idx))\n                tree[v - 1].remove((p, idx))\n                break\n    for u, v, w in graph:\n        if w < cost:\n            cost = w\n    return str(len(graph) - 1)\n\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n1 2 1\\n2 3 2\\n1 3 3\\n\")\n    1\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edges = [[int(x) for x in line.split()] for line in stdin.splitlines()[1:]]\n    edges.sort(key=lambda x: x[2])\n    # print(edges)\n    roots = [i for i in range(n)]\n\n    def find(i):\n        while i!= roots[i]:\n            roots[i] = roots[roots[i]]\n            i = roots[i]\n        return i\n\n    def union(x, y):\n        x, y = find(x), find(y)\n        if x == y:\n            return False\n        roots[x] = y\n        return True\n\n    mst = 0\n    res = 0\n    for u, v, w in edges:\n        if union(u - 1, v - 1):\n            mst += w\n            res += 1\n        if mst == n - 1:\n            break\n    return res\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n    return \"\"\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = map(int, stdin.split(' '))\n\n    graph = []\n    edges = []\n    cost = 0\n    for _ in range(m):\n        u, v, w = map(int, stdin.split(' '))\n        edges.append((u, v, w))\n        graph.append((u, v, w))\n        graph.append((v, u, w))\n\n    edges = sorted(edges, key=lambda x: x[2])\n\n    while len(edges) > 0:\n        e = edges[0]\n        u = e[0]\n        v = e[1]\n        w = e[2]\n\n        e_idx = 0\n        while e_idx < len(edges):\n            if u in edges[e_idx] or v in edges[e_idx]:\n                edges.pop(e_idx)\n            else:\n                e_idx += 1\n\n        edges = sorted(edges, key=lambda x: x[2])\n        cost += w\n\n    return str(cost)\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8 10\\n1 2 1\\n2 3 2\\n2 4 5\\n1 4 2\\n6 3 3\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4')\n    '1'\n    >>> solution('4 3\\n2 1 3\\n4 3 4\\n2 4 1')\n    '0'\n    >>> solution('3 3\\n1 2 1\\n2 3 3\\n1 3 3')\n    '0'\n    >>> solution('1 0')\n    '0'\n    >>> solution('5 6\\n1 2 2\\n2 3 1\\n4 5 3\\n2 4 2\\n1 4 2\\n1 5 3')\n    '2'\n    >>> solution('8 6\\n1 2 2\\n2 3 3\\n1 3 3\\n6 2 4\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1')\n    '2'\n    >>> solution('8 6\\n1 2 2\\n2 3 3\\n1 3 3\\n6 2 4\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1\\n6 2 4')\n    '2'\n    >>> solution('5 5\\n1 2 2\\n2 3 3\\n1 3 3\\n6 2 4\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1')\n    '2'\n    >>> solution('5 5\\n1 2 2\\n2 3 3\\n1 3 3\\n6 2 4\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1')\n    '2'\n    >>> solution('5 5\\n1 2 2\\n2 3 3\\n1 3 3\\n6 2 4\\n6 1 3\\n3 5 2\\n3 7 1\\n4 8 1')\n    '2'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def union(a, b):\n        parent_a = find(a)\n        parent_b = find(b)\n\n        if parent_a!= parent_b:\n            if parent_a > parent_b:\n                parent_a, parent_b = parent_b, parent_a\n\n            parent_to_child[parent_a] = parent_b\n\n    def find(a):\n        if parent_to_child[a] == a:\n            return a\n\n        parent_to_child[a] = find(parent_to_child[a])\n\n        return parent_to_child[a]\n\n    def is_connected(a, b):\n        return find(a) == find(b)\n\n    n, m = map(int, stdin.readline().split())\n    edges = []\n\n    for _ in range(m):\n        u, v, w = map(int, stdin.readline().split())\n        edges.append((w, u - 1, v - 1))\n\n    edges.sort()\n\n    parent_to_child = list(range(n))\n\n    min_spanning_tree_cost = 0\n\n    for cost, u, v in edges:\n        if not is_connected(u, v):\n            union(u, v)\n            min_spanning_tree_cost += cost\n\n    return min_spanning_tree_cost\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, res = int(stdin[0]), 0\n    if not n % 3:\n        res = n // 3\n    else:\n        for i in range(1, n):\n            if not (n - i) % 3:\n                res = n - i // 3\n                break\n    print(res)\n    print(''.join([stdin[1][i] for i in range(res)]))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    min_count = 0\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if abs((s[i] == s[j]) - (i - j)) % 3 == 0:\n                min_count += 1\n    return min_count\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lamps: int = int(stdin.readline())\n    lamp_color: str = stdin.readline().strip()\n    lamp_color_list: List[str] = list(lamp_color)\n    lamp_color_dict: Dict[str, int] = {\n        'R': 0,\n        'G': 0,\n        'B': 0\n    }\n    for i in lamp_color_list:\n        lamp_color_dict[i] += 1\n    lamp_dict: Dict[str, int] = {\n        'RR': 0,\n        'RG': 0,\n        'RB': 0,\n        'GR': 0,\n        'GG': 0,\n        'GB': 0,\n        'BG': 0,\n        'RRG': 0,\n        'RRB': 0,\n        'RBR': 0,\n        'RGR': 0,\n        'RBG': 0,\n        'RGG': 0,\n        'RBG': 0,\n        'RGB': 0,\n        'RGGB': 0,\n        'GGR': 0,\n        'GGG': 0,\n        'GGB': 0,\n        'GBG': 0,\n        'GBB': 0,\n        'BGR': 0,\n        'BGG': 0,\n        'BGB': 0,\n        'BGG': 0,\n        'BGB': 0,\n        'BGGB': 0,\n        'BGRB': 0,\n        'BGRG': 0,\n        'BGBG': 0,\n        'BGGB': 0\n    }\n    for i in lamp_dict:\n        for j in lamp_color_list:\n            if (i[0] == j and j == lamp_color_list[0]) or (i[0] == j and j!= lamp_color_list[0]):\n                lamp_dict[i] += 1\n                if j == lamp_color_list[0]:\n                    lamp_dict[i] -= 1\n                if j == lamp_color_list[1]:\n                    lamp_dict[i] -= 1\n                if j == lamp_color_list[2]:\n                    lamp_dict[i] -= 1\n            if (i[1] == j and j == lamp_color_list[0]) or (i[1] == j and j!= lamp_color_list[0]):\n                lamp_dict[i] += 1\n                if j == lamp_color_list[0]:\n                    lamp_dict[i] -= 1\n                if j == lamp_color_list[1]:\n                    lamp_dict[i] -= 1\n                if j == lamp_color_list[2]:\n                    lamp_dict[i] -= 1\n            if (i[2] == j and j == lamp_color_list[0]) or (i[2] == j and j!= lamp_color_list[0]):\n                lamp_dict[i] += 1\n                if j == lamp_color_list[0]:\n                    lamp_dict[i] -= 1\n                if j == lamp_color_list[1]:\n                    lamp_dict[i] -= 1\n                if j == lamp_color_list[2]:\n                    lamp_dict[i] -= 1\n    min_num = lamp_dict['RR']\n    for i in lamp_dict:\n        if min_num > lamp_dict[i]:\n            min_num = lamp_dict[i]\n    print(min_num)\n    for i in lamp_dict:\n        if lamp_dict[i] == min_num:\n            print(i)\n            return i\n    return 'NONE'\n\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lamps = [char for char in stdin]\n    min_lamp_recolors = 0\n    lamps_colors = ['R', 'G', 'B']\n    lamps_dict = {color: {} for color in lamps_colors}\n\n    for index, color in enumerate(lamps):\n        lamps_dict[color][index] = 1\n\n    for color in lamps_colors:\n        if len(lamps_dict[color]) > 0:\n            i = 0\n            current_lamp = lamps_dict[color].popitem()\n            while i < len(lamps):\n                j = i + 1\n                while j < len(lamps):\n                    if abs(current_lamp[0] - lamps[j]) % 3 == 0:\n                        lamps_dict[color][j] = 1\n                    j += 1\n                i += 1\n\n    for index, lamp in enumerate(lamps):\n        if lamp in lamps_colors:\n            if not lamps_dict[lamp].get(index):\n                min_lamp_recolors += 1\n    return min_lamp_recolors\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().rstrip()\n    lamps = [x for x in s]\n    size = len(s)\n    for i in range(size - 1):\n        if lamps[i] == lamps[i + 1]:\n            print(2)\n            return\n    lamps.append(lamps[0])\n    curr = ''\n    count = 0\n    for i in range(len(lamps) - 1):\n        if lamps[i] == lamps[i + 1]:\n            continue\n        else:\n            curr += lamps[i]\n            count += 1\n    for i in range(size - 1):\n        if (s[i] == s[i + 1] and s[i]!= curr[-1]) or (s[i]!= s[i + 1] and s[i] == curr[-1]):\n            print(3)\n            return\n    print(count)\n    return\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    lamps = stdin[1]\n    ans = 0\n    counts = {'R': 0, 'G': 0, 'B': 0}\n    for c in lamps:\n        counts[c] += 1\n    for c in counts.values():\n        if c % 3!= 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lamps_count = int(stdin)\n    colors = stdin\n    result = [0]\n    for i in range(1, lamps_count):\n        result.append(colors[i] == colors[i - 1])\n    return colors[:result.index(False)].count('R') + colors[:result.index(False)].count('G') + colors[:result.index(False)].count('B')\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lamps_number = int(stdin.splitlines()[0])\n    lamps = stdin.splitlines()[1]\n    lamps_set = set()\n    for i in range(lamps_number):\n        lamps_set.add(lamps[i])\n    lamps_set = list(lamps_set)\n    count_lamps = [0] * len(lamps_set)\n    for i in range(len(lamps_set)):\n        count_lamps[i] = (lamps_set[i], lamps.count(lamps_set[i]))\n    count_lamps.sort(key=lambda x: x[1], reverse=True)\n    for i in range(len(count_lamps)):\n        if i > 0:\n            if (count_lamps[i][1] - count_lamps[i - 1][1]) % 3 == 0:\n                count_lamps[i][1] = count_lamps[i][1] - (count_lamps[i][1] - count_lamps[i - 1][1])\n        if (count_lamps[i][1] - count_lamps[i - 1][1]) % 3 == 0:\n            count_lamps[i][1] = count_lamps[i][1] - (count_lamps[i][1] - count_lamps[i - 1][1])\n    res_string = \"\"\n    for i in range(lamps_number):\n        res_string += count_lamps[i][0]\n    return res_string\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lamps_count = int(stdin.readline())\n    lamps = stdin.readline()\n    cache = {}\n    count = 0\n\n    def count_recolor(lamps: str, prev_lamp: str) -> int:\n        nonlocal count\n        nonlocal cache\n        if prev_lamp == lamps:\n            return 0\n        if prev_lamp in cache:\n            return cache[prev_lamp]\n\n        count += 1\n        if prev_lamp!= 'R':\n            lamps = lamps.replace(prev_lamp, 'G', 1)\n            count += 1\n\n        r_count = count_recolor(lamps, 'R')\n        g_count = count_recolor(lamps, 'G')\n        b_count = count_recolor(lamps, 'B')\n        cache[prev_lamp] = min(r_count, g_count, b_count)\n        return cache[prev_lamp]\n\n    result = count_recolor(lamps, 'R')\n    return str(result)\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = []\n    g = []\n    b = []\n    while n > 0:\n        if n % 3 == 1:\n            r.append(n)\n        elif n % 3 == 2:\n            g.append(n)\n        else:\n            b.append(n)\n        n //= 3\n    r.sort(reverse=True)\n    g.sort(reverse=True)\n    b.sort(reverse=True)\n    r_res = []\n    g_res = []\n    b_res = []\n    if len(r) % 3 == 0:\n        r_res = r[:len(r) // 3]\n    elif len(r) % 3 == 1:\n        r_res = r[:len(r) // 3]\n        r_res.append(r[-1])\n    elif len(r) % 3 == 2:\n        r_res = r[:len(r) // 3]\n        r_res.append(r[-2])\n        r_res.append(r[-1])\n    if len(g) % 3 == 0:\n        g_res = g[:len(g) // 3]\n    elif len(g) % 3 == 1:\n        g_res = g[:len(g) // 3]\n        g_res.append(g[-1])\n    elif len(g) % 3 == 2:\n        g_res = g[:len(g) // 3]\n        g_res.append(g[-2])\n        g_res.append(g[-1])\n    if len(b) % 3 == 0:\n        b_res = b[:len(b) // 3]\n    elif len(b) % 3 == 1:\n        b_res = b[:len(b) // 3]\n        b_res.append(b[-1])\n    elif len(b) % 3 == 2:\n        b_res = b[:len(b) // 3]\n        b_res.append(b[-2])\n        b_res.append(b[-1])\n    res = min(len(r_res), len(g_res), len(b_res))\n    if res == 0:\n        return \"R\" * n\n    else:\n        res = []\n        if len(r_res) == res:\n            res += \"R\" * len(r_res)\n        if len(g_res) == res:\n            res += \"G\" * len(g_res)\n        if len(b_res) == res:\n            res += \"B\" * len(b_res)\n        return res\n"
    }
]