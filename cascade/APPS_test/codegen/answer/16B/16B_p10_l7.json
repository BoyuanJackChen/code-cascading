[
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(graph, start, end):\n        queue = deque([start])\n        visited = set([start])\n        while queue:\n            current = queue.popleft()\n            if current == end:\n                return True\n            for neighbor in graph[current]:\n                if neighbor not in visited:\n                    queue.append(neighbor)\n                    visited.add(neighbor)\n        return False\n\n    n = int(stdin.readline())\n    edges = [list(map(int, line.split())) for line in stdin]\n    edges = sorted(edges, key=lambda x: x[2])\n    graph = defaultdict(set)\n    for edge in edges:\n        graph[edge[0]].add(edge[1])\n        graph[edge[1]].add(edge[0])\n\n    for edge in edges:\n        if bfs(graph, edge[0], edge[1]):\n            return str(edge[2])\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = stdin.readlines()\n    graph = {}\n    for line in lines:\n        a, b = line.split()\n        if a in graph:\n            graph[a].append(b)\n        else:\n            graph[a] = [b]\n        if b in graph:\n            graph[b].append(a)\n        else:\n            graph[b] = [a]\n    nodes = list(graph.keys())\n    nodes.sort()\n    a = nodes[0]\n    b = nodes[1]\n    c = nodes[2]\n    if len(set(graph[a]).intersection(set(graph[b]))) > 0 or len(set(graph[a]).intersection(set(graph[c]))) > 0 or len(set(graph[b]).intersection(set(graph[c]))) > 0:\n        return str(len(set(graph[a]).intersection(set(graph[b])) | set(graph[a]).intersection(set(graph[c])) | set(graph[b]).intersection(set(graph[c])))) + '\\n' + str(a) +'' + str(b) +'' + str(c)\n    else:\n        return str(len(set(graph[a]).intersection(set(graph[b])) | set(graph[a]).intersection(set(graph[c])))) + '\\n' + str(a) +'' + str(b) +'' + str(c)\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Getting all edges\n    \"\"\"\n    edges = stdin.split('\\n')\n    edges = [tuple(edge.split()) for edge in edges]\n    edges = {(x, y) for x, y in edges}\n    n = int(edges.pop())\n    \"\"\"\n    Getting the max number of edges\n    \"\"\"\n    max_edges = max_edges_in_tree(edges, n)\n    \"\"\"\n    Getting the result\n    \"\"\"\n    return str(max_edges) +'' +''.join(map(str, [max(max_edges.keys()), min(max_edges.keys()), n-2]))\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = [[int(i) for i in stdin.readline().split()] for _ in range(n - 1)]\n    m.sort(key=lambda x: x[2])\n    result = [0] * 3\n    for i in range(n - 1):\n        result[m[i][0] - 1] += m[i][2]\n        result[m[i][1] - 1] += m[i][2]\n    result.sort(reverse=True)\n    print(result[2])\n    print(m[result.index(result[2])][0], m[result.index(result[2])][1])\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    tree = collections.defaultdict(list)\n    n, edges = [int(x) for x in stdin.split(\"\\n\")]\n    for x, y in sorted([tuple(map(int, y.split())) for y in stdin.split(\"\\n\")[1:]]):\n        tree[x].append(y)\n        tree[y].append(x)\n    counts = collections.defaultdict(list)\n    for x in tree:\n        for y in tree:\n            if x!= y and y in tree[x]:\n                counts[(x, y)] = [counts[(x, y)][0] + 1, counts[(x, y)][1] + 1]\n                for z in tree:\n                    if x!= y and x!= z and z!= y and x in tree[z]:\n                        counts[(x, y)].append(counts[(x, y)][0] + 1)\n    return str(max(max(x) for x in counts.values())) + \" \" + \" \".join(\n        [str(x) for x in [sorted(x)[0] for x in counts.values() if x[0] == max(x[0] for x in counts.values())]][:3])\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingZ8E6QT-CZO/\"\"\"\n    pass\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    a = 1\n    b = 2\n    c = 3\n    \n    edges = {}\n    for i in range(n - 1):\n        a, b = [int(x) for x in stdin.split(' ')]\n        edges[a] = edges.get(a, []) + [b]\n        edges[b] = edges.get(b, []) + [a]\n    \n    def find_path(a, b):\n        visited = {}\n        queue = [a]\n        while queue:\n            cur = queue.pop(0)\n            if cur == b:\n                return True\n            for neighbor in edges[cur]:\n                if neighbor in visited:\n                    continue\n                visited[neighbor] = True\n                queue.append(neighbor)\n        return False\n    \n    def get_dists(a, b):\n        dists = set()\n        for neighbor in edges[a]:\n            if neighbor in edges[b]:\n                dists.add(neighbor)\n        return dists\n    \n    def max_dist(a, b):\n        res = 0\n        for neighbor in get_dists(a, b):\n            if find_path(a, neighbor):\n                res = max(res, len(edges[neighbor]))\n        return res\n    \n    print(max(max_dist(a, b), max_dist(a, c), max_dist(b, c)))\n    \n    return''.join([str(x) for x in [a, b, c]])\n    \n    "
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_pair(arr):\n        return arr.count(arr[0]) == len(arr)\n\n    n = int(stdin.readline().strip())\n    numbers = sorted(list(map(int, stdin.readline().strip().split(' '))))\n    i = 0\n    while i < len(numbers) and not is_pair(numbers[i:]):\n        i += 1\n    numbers = numbers[i:]\n    while i < len(numbers) and not is_pair(numbers[:i]):\n        i += 1\n    numbers = numbers[:i]\n    x = numbers[0]\n    y = numbers[1]\n    while not is_pair(numbers):\n        x = x * numbers[0]\n        y = y * numbers[1]\n        numbers = [x, y] + numbers[2:]\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n10 2 8 1 2 4 1 20 4 5\")\n    '20 8'\n    \"\"\"\n    n = int(stdin)\n    d = list(map(int, stdin.split(\"\\n\")[1].split()))\n    x = 0\n    y = 0\n    for i in range(n):\n        if x!= 0 and d[i] % x == 0:\n            y = d[i]\n        if y!= 0 and d[i] % y == 0:\n            x = d[i]\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d = sorted(list(map(int, stdin.strip().split())))\n    for i in range(len(d)):\n        if d[i]!= 1 and d[i] % 2 == 0:\n            d[i] //= 2\n    for i in range(len(d)):\n        for j in range(i + 1, len(d)):\n            if d[i] == d[j]:\n                d[i] += d[j]\n                d[j] = 0\n    for i in range(len(d)):\n        if d[i] > 0:\n            print(d[i], end=' ')\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A function that takes in a string of integers.\n    Returns the integers that represent the numbers of divisors of x and y.\n    \"\"\"\n    n = int(stdin)\n    divisors = [int(i) for i in stdin.split()[1:]]\n    \n    # Map the x and y numbers to their respective set of divisors\n    x_set = set(get_divisors(divisors[0], n)[1:])\n    y_set = set(get_divisors(divisors[1], n)[1:])\n    \n    # Set intersection of x and y sets,\n    # return only unique numbers which are divisors of x and y\n    return str(max(x_set & y_set)) + \" \" + str(min(x_set & y_set))\n\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n10 2 8 1 2 4 1 20 4 5\\n\")\n    '20 8'\n    \"\"\"\n    n = int(stdin)\n    data = list(map(int, stdin.split()))\n    x, y = 1, 1\n    for d in data:\n        if x == d:\n            x += 1\n        elif y == d:\n            y += 1\n        else:\n            x_factors, y_factors = [], []\n            for i in range(1, x + 1):\n                if x % i == 0:\n                    x_factors.append(i)\n            for i in range(1, y + 1):\n                if y % i == 0:\n                    y_factors.append(i)\n            if all(f in x_factors for f in y_factors):\n                x += 1\n            elif all(f in y_factors for f in x_factors):\n                y += 1\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(['10', '2 8 1 2 4 1 20 4 5'])\n    '20 8'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ints = [int(i) for i in stdin.split(' ')]\n    x = 0\n    y = 0\n    for i in range(n):\n        for j in range(n):\n            if ints[i] % ints[j] == 0:\n                x += ints[i]\n                y += ints[j]\n    print(x, y)\n    return ''\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split(' '))\n    d = [int(i) for i in stdin.split(' ')[1:] if int(i) not in [0, 1]]\n    d.sort(reverse=True)\n    x_set = set()\n    y_set = set()\n    for i in range(1, x+1):\n        if x % i == 0:\n            x_set.add(i)\n    for i in range(1, y+1):\n        if y % i == 0:\n            y_set.add(i)\n    for i in range(len(d)):\n        if d[i] in x_set and d[i] in y_set:\n            if d[i] < x:\n                x_set.remove(d[i])\n            else:\n                y_set.remove(d[i])\n        elif d[i] in x_set:\n            x_set.remove(d[i])\n        elif d[i] in y_set:\n            y_set.remove(d[i])\n    x_list = list(x_set)\n    y_list = list(y_set)\n    x_list.sort()\n    y_list.sort()\n    return''.join(map(str, x_list + y_list))\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    YOUR CODE HERE\n    '''\n    return stdin\n"
    },
    {
        "number": 4001,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = [int(i) for i in stdin.readline().split()]\n    l = list(set(k))\n    k.sort()\n    c = 0\n    c1 = []\n    c2 = []\n    if l[0] == 1:\n        for i in range(len(k)):\n            if k[i] == 1:\n                c = i\n                c2.append(k[i])\n                break\n        c1.append(k[i])\n        c1.append(k[i + 1])\n    else:\n        for i in range(len(k)):\n            if k[i] == l[0]:\n                c = i\n                c1.append(k[i])\n                break\n        for i in range(len(k)):\n            if k[i] == l[1] and i > c:\n                c2.append(k[i])\n                break\n        c2.append(k[i])\n        c2.append(k[i + 1])\n    if c1[0] == c2[0]:\n        c1[0], c2[0] = c2[0], c1[0]\n    if c1[1] == c2[1]:\n        c1[1], c2[1] = c2[1], c1[1]\n    print(' '.join(str(i) for i in c1),'',''.join(str(i) for i in c2))\n    return ''\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the maximum sum of elements in a rows divisible by k\n    \"\"\"\n    input_line = stdin.split(\"\\n\")\n    n, m, k = map(int, input_line[0].split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, input_line[1 + i].split())))\n\n    max_element = 0\n    for row in matrix:\n        sum_row = 0\n        for element in row:\n            if element > max_element:\n                max_element = element\n            sum_row += element\n\n        if sum_row % k == 0:\n            continue\n        else:\n            sum_row = max_element * (sum_row // k)\n            if sum_row > max_element:\n                max_element = sum_row\n\n    print(max_element)\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, k = [int(i) for i in lines[0].split(' ')]\n    arr = [[int(j) for j in i.split(' ')] for i in lines[1:]]\n    total = 0\n    for i in range(n):\n        a, b = 0, m - 1\n        while a < b:\n            total = max(total, k * sum([arr[i][a]] + [arr[i][b]]))\n            if arr[i][a] + arr[i][b] < k:\n                a += 1\n            else:\n                b -= 1\n    return str(total)\n\n\n\n-----Explanation-----\nFirst, we create a matrix $a$ of size $n \\times m$ consisting of integers. Then we make a decision, based on the size of the array, about what to choose.\n\nWe can choose no more than $\\left\\lfloor\\frac{m}{2}\\right\\rfloor$ elements in each row, so we consider the columns of the matrix $a$ in the second line.\n\nWe have a lot of freedom in this part because we can choose any two elements in each row.\n\nWe just have to find the maximum sum of these elements divisible by $k$ and print this value.\n\"\"\"\n\nfrom functools import reduce\nfrom itertools import combinations\n\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    a = []\n    for i in range(n):\n        a.append([int(x) for x in stdin.split(' ')[n * i: n * (i + 1)]])\n    print(max([sum([a[j][i] for j in range(n) if i < m / 2]) for i in range(m) if sum([a[j][i] for j in range(n) if i < m / 2]) % k == 0]))\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split('\\n')[0].split(' ')[1:])))\n    p = []\n    for i in range(0, n):\n        p.append(0)\n    for i in range(0, n):\n        for j in range(0, m):\n            p[i] = p[i] + a[i][j]\n    count = 0\n    for i in range(0, n):\n        count += m - a[i].count(0)\n        if count % k == 0:\n            continue\n        else:\n            max_sum = 0\n            for j in range(0, m):\n                if a[i][j]!= 0:\n                    temp_sum = 0\n                    for k in range(j, m):\n                        if a[i][k]!= 0:\n                            temp_sum += a[i][k]\n                            if temp_sum % k == 0:\n                                max_sum = max(max_sum, temp_sum)\n                                break\n                    break\n            if max_sum == 0:\n                max_sum = max(p)\n            count = count - m + max_sum\n    print(count)\n    return ''\n\n\nsolution('3 4 3\\n1 2 3 4\\n5 2 2 2\\n7 1 1 4\\n')\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = stdin.split()[0]\n    nums = stdin.split()[1]\n    if len(nums) == 1:\n        return n\n    elif len(nums) == 2:\n        if int(nums[1]) - int(nums[0]) == 0:\n            return n\n        else:\n            return n + 1\n    elif len(nums) > 2:\n        i = 0\n        max_val = -1\n        while i < len(nums):\n            if int(nums[i]) - int(nums[i + 1]) >= 0:\n                if int(nums[i]) - int(nums[i + 1]) > max_val:\n                    max_val = int(nums[i]) - int(nums[i + 1])\n            i += 2\n        return n + max_val\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4003,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n----\n'''\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Binary search of minimum value of D\n    \"\"\"\n    n, a = map(int, stdin.split())\n    A = [int(i) for i in stdin.split()]\n    l = 0\n    r = 100\n    while l < r:\n        mid = (r + l) // 2\n        d = A[0]\n        flag = False\n        for i in A:\n            if i > d:\n                d = i\n                flag = True\n            if flag:\n                d += mid\n        if d <= 0:\n            l = mid + 1\n        else:\n            r = mid\n    return str(l - 1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    if len(a) < 2:\n        return '0'\n\n    min_val = min(a)\n    min_sum = sum(a)\n    max_sum = sum(a) * n\n\n    while min_sum!= max_sum:\n        sum_set = set()\n        for i in range(0, len(a)):\n            new_sum = a[i] + min_val\n            new_sum -= min_val\n            new_sum -= a[i]\n            sum_set.add(new_sum)\n\n        if len(sum_set) > 1:\n            return '-1'\n\n        min_val += 1\n\n    return str(min_val - 1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 4 4 7 4 1\n   ... ''')\n    3\n    >>> solution('''2\n   ... 2 8\n   ... ''')\n    3\n    \"\"\"\n    n = int(stdin.split()[0])\n    numbers = [int(i) for i in stdin.split()[1].split(' ')]\n    min_abs_dif = float('inf')\n    for i in range(n):\n        if abs(numbers[i] - numbers[i-1]) < min_abs_dif:\n            min_abs_dif = abs(numbers[i] - numbers[i-1])\n    if min_abs_dif == 0:\n        return str(0)\n    for i in range(n):\n        if numbers[i] == numbers[i-1]:\n            continue\n        if numbers[i] - numbers[i-1] < 0:\n            return str(min_abs_dif)\n        for j in range(i+1, n):\n            numbers[j] -= numbers[i] - numbers[i-1]\n            if numbers[j] < 0:\n                break\n            if j == n-1 and numbers[j]!= 0:\n                return '-1'\n    return str(min_abs_dif)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(4)\n    -1\n    >>> solution(6)\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    sequence = [int(x) for x in stdin.readline().strip().split()]\n    sequence.sort()\n    print(sequence)\n    \n    for d in range(1, sequence[0]):\n        i = 1\n        while i < len(sequence) and sequence[i] - d >= 0:\n            if sequence[i] - d >= 0:\n                sequence[i] -= d\n                i += 1\n    print(sequence)\n    if len(sequence) == len(set(sequence)):\n        return str(d)\n    return '-1'"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if len(set(a)) == 1:\n        return str(0)\n    result = -1\n    for num in range(1, 101):\n        if all(a[i] - num if a[i] >= num else a[i] + num == a[i] for i in range(n)):\n            result = num\n            break\n    return str(result)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    min_value = min(arr)\n    max_value = max(arr)\n    if min_value < 0 and max_value > 0:\n        return -1\n    if min_value == 0 and max_value == 0:\n        return 0\n    if min_value < 0:\n        return abs(min_value)\n    return abs(max_value)\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = 10 ** 9 + 7\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i, n):\n            dp[j] = (dp[j] + a[i]) % d\n    \n    ans = 10 ** 9 + 7\n    for i in range(n):\n        if dp[i]!= 0:\n            ans = dp[i]\n            break\n        \n    return ans if ans < d else -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, *arr = stdin.split('\\n')\n    \n    d = -1\n    for x in arr:\n        if d == -1:\n            d = abs(int(x))\n        else:\n            d = min(d, abs(int(x)))\n    return str(d)\n    \n\nprint(solution(stdin))"
    },
    {
        "number": 4004,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    x, y, min_x = arr[0], arr[0], 0\n\n    for i in range(1, n):\n        if x > y:\n            if y > arr[i]:\n                y = arr[i]\n                min_x = y - x\n            else:\n                x = arr[i]\n                if y - x < min_x:\n                    min_x = y - x\n        elif y > x:\n            if x > arr[i]:\n                x = arr[i]\n                if y - x < min_x:\n                    min_x = y - x\n            else:\n                y = arr[i]\n                if x - y < min_x:\n                    min_x = x - y\n        else:\n            if x - y < min_x:\n                min_x = x - y\n            if y - x < min_x:\n                min_x = y - x\n    print(min_x)\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    white_sheet_coordinates = list(map(int, stdin.split('\\n')[0].split()))\n    black_sheet_coordinates = list(map(int, stdin.split('\\n')[1].split()))\n    x_1, y_1 = white_sheet_coordinates[0], white_sheet_coordinates[1]\n    x_2, y_2 = white_sheet_coordinates[2], white_sheet_coordinates[3]\n    x_3, y_3 = black_sheet_coordinates[0], black_sheet_coordinates[1]\n    x_4, y_4 = black_sheet_coordinates[2], black_sheet_coordinates[3]\n    x_5, y_5 = black_sheet_coordinates[4], black_sheet_coordinates[5]\n    x_6, y_6 = black_sheet_coordinates[6], black_sheet_coordinates[7]\n\n    if x_1 == x_2 or y_1 == y_2 or x_3 == x_4 or y_3 == y_4:\n        return 'NO'\n    if x_5 == x_6 or y_5 == y_6:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split()]\n    x3, y3, x4, y4 = [int(x) for x in stdin.split()]\n    x5, y5, x6, y6 = [int(x) for x in stdin.split()]\n\n    x1, y1 = max(0, x1), max(0, y1)\n    x2, y2 = min(x2, 1000000), min(y2, 1000000)\n\n    x3, y3 = max(0, x3), max(0, y3)\n    x4, y4 = min(x4, 1000000), min(y4, 1000000)\n\n    x5, y5 = max(0, x5), max(0, y5)\n    x6, y6 = min(x6, 1000000), min(y6, 1000000)\n\n    xmin = min(x1, x3, x5)\n    xmax = max(x2, x4, x6)\n    ymin = min(y1, y3, y5)\n    ymax = max(y2, y4, y6)\n\n    # if xmax < xmin or ymax < ymin:\n    #     return \"NO\"\n\n    # xmin, xmax = x1, x2\n    # ymin, ymax = y1, y2\n\n    # print(xmin, xmax, ymin, ymax)\n\n    is_coverd = True\n    is_not_covered = True\n    for x in range(xmin, xmax):\n        for y in range(ymin, ymax):\n            is_coverd = is_coverd and (x >= x1 and x <= x2) and (y >= y1 and y <= y2)\n            is_not_covered = is_not_covered and (x >= x3 and x <= x4) and (y >= y3 and y <= y4)\n\n    # print(is_coverd, is_not_covered)\n    if is_coverd and is_not_covered:\n        return \"YES\"\n\n    return \"NO\"\n\nprint(solution(\"2 2 4 4\"))\n\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3 7 5\n   ... 0 0 4 6\n   ... 0 0 7 4\n   ... 500000 0 1000000 1000000\n   ... 0 0 499999 1000000\n   ... 500000 0 1000000 1000000''')\n    'YES'\n    >>> solution('''2 2 4 4\n   ... 1 1 3 5\n   ... 3 1 5 5\n   ... ''')\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (x1, y1, x2, y2) = map(int, stdin.split())\n    (x3, y3, x4, y4) = map(int, stdin.split())\n    (x5, y5, x6, y6) = map(int, stdin.split())\n    x, y = x2 - x1, y2 - y1\n    if x3 * y4 - x4 * y3 < 0:\n        return \"NO\"\n    if x5 * y6 - x6 * y5 < 0:\n        return \"NO\"\n    return \"YES\" if x * y - x3 * y4 - x5 * y6 - x6 * y5 > 0 else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print('YES' if is_visible_from_above(inputs) else 'NO')\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n\n    # x1 > x2 or y1 > y2\n    # x3 > x4 or y3 > y4\n    # x5 > x6 or y5 > y6\n\n    # left side (x1, y1) < (x3, y3)\n    # left side (x1, y1) < (x5, y5)\n    # left side (x1, y1) < (x7, y7)\n\n    # right side (x2, y2) > (x4, y4)\n    # right side (x2, y2) > (x6, y6)\n    # right side (x2, y2) > (x8, y8)\n\n    # x3 < x4 or y3 < y4\n    # x5 < x6 or y5 < y6\n    # x7 < x8 or y7 < y8\n\n    # left side (x3, y3) < (x1, y1)\n    # left side (x3, y3) < (x5, y5)\n    # left side (x3, y3) < (x7, y7)\n\n    # right side (x4, y4) > (x2, y2)\n    # right side (x4, y4) > (x6, y6)\n    # right side (x4, y4) > (x8, y8)\n\n    # x5 < x6 or y5 < y6\n    # x7 < x8 or y7 < y8\n\n    # left side (x5, y5) < (x3, y3)\n    # left side (x5, y5) < (x7, y7)\n    # right side (x6, y6) > (x4, y4)\n    # right side (x6, y6) > (x8, y8)\n\n    # x7 > x8 or y7 > y8\n\n    # left side (x7, y7) < (x3, y3)\n    # left side (x7, y7) < (x5, y5)\n    # right side (x8, y8) > (x4, y4)\n    # right side (x8, y8) > (x6, y6)\n\n    if (\n        ((x1 <= x3 and y3 <= y1) and (x1 <= x5 and y5 <= y1)) or\n        ((x1 <= x3 and y3 <= y1) and (x1 <= x7 and y7 <= y1))\n    ) and (\n        ((x2 >= x4 and y4 >= y2) and (x2 >= x6 and y6 >= y2)) or\n        ((x2 >= x4 and y4 >= y2) and (x2 >= x8 and y8 >= y2))\n    ) and (\n        ((x3 <= x5 and y5 <= y3) and (x3 <= x7 and y7 <= y3)) or\n        ((x3 <= x5 and y5 <= y3) and (x3 <= x7 and y7 <= y3))\n    ) and (\n        ((x4 >= x6 and y6 >= y4) and (x4 >= x8 and y8 >= y4)) or\n        ((x4 >= x6 and y6 >= y4) and (x4 >= x8 and y8 >= y4))\n    ) and (\n        ((x5 <= x7 and y7 <= y5) and (x5 <= x9 and y9 <= y5)) or\n        ((x5 <= x7 and y7 <= y5) and (x5 <= x9 and y9 <= y5))\n    ) and (\n        ((x6 >= x8 and y8 >= y6) and (x6 >= x10 and y10 >= y6)) or\n        ((x6 >= x8 and y8 >= y6) and (x6 >= x10 and y10 >= y6))\n    ) and (\n        ((x7 <= x9 and y9 <= y7) and (x7 <= x11 and y11 <= y7)) or\n        ((x7 <= x9 and y9 <= y7) and (x7 <= x11 and y11 <= y7))\n    ) and (\n        ((x8 >= x10 and y10 >= y8) and (x8 >= x12 and y12 >= y8)) or\n        ((x8 >= x10 and y10 >= y8) and (x8 >= x12 and y12 >= y8))\n    ) and (\n        ((x9 <= x11 and y11 <= y9) and (x9 <= x13 and y13 <= y9)) or\n        ((x9 <= x11 and y11 <= y9) and (x9 <= x13 and y13 <= y9))\n    ) and (\n        ((x10 >= x12 and y12 >= y10) and (x10 >= x14 and y14 >= y10)) or\n        ((x10 >= x12 and y12 >= y10) and (x10 >= x14 and y14 >= y10))\n    ) and (\n        ((x11 <= x13 and y13 <= y11) and (x11 <= x15 and y15 <= y11)) or\n        ((x11 <= x13"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f, g, h = [int(s) for s in stdin.split()]\n    x1, y1, x2, y2 = a, b, c, d\n    x3, y3, x4, y4 = e, f, g, h\n\n    # left-right\n    if x2 <= x1 or x2 >= x3 or x1 >= x4:\n        if x1 >= x3 and x1 <= x4:\n            if (x3 - x1) * (x2 - x1) <= 0:\n                if y1 >= y3 and y1 <= y4:\n                    if (y3 - y1) * (y2 - y1) <= 0:\n                        if y1 >= y2 and y1 <= y4:\n                            if (y2 - y1) * (y4 - y1) <= 0:\n                                return \"YES\"\n    # top-bottom\n    if y2 <= y1 or y2 >= y3 or y1 >= y4:\n        if y1 >= y3 and y1 <= y4:\n            if (y3 - y1) * (y2 - y1) <= 0:\n                if x1 >= x3 and x1 <= x4:\n                    if (x3 - x1) * (x2 - x1) <= 0:\n                        if x1 >= x2 and x1 <= x4:\n                            if (x2 - x1) * (x4 - x1) <= 0:\n                                return \"YES\"\n    return \"NO\"\n    \n"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    points = stdin.split('\\n')[:-1]\n    \n    x1, y1, x2, y2 = map(lambda x: int(x), points[0].split())\n    x3, y3, x4, y4 = map(lambda x: int(x), points[1].split())\n    x5, y5, x6, y6 = map(lambda x: int(x), points[2].split())\n    \n    x_max = max(x1, x3, x5, x6)\n    x_min = min(x1, x3, x5, x6)\n    y_max = max(y1, y3, y5, y6)\n    y_min = min(y1, y3, y5, y6)\n    \n    if y_max < y2 or y_min > y4 or x_max < x2 or x_min > x4:\n        return 'YES'\n    \n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split(\" \")]\n    x3, y3, x4, y4 = [int(i) for i in stdin.split(\" \")]\n    x5, y5, x6, y6 = [int(i) for i in stdin.split(\" \")]\n    if x1 < x3 < x5 < x4 or x1 < x5 < x4 < x3 or x3 < x1 < x4 < x5:\n        if y1 < y3 < y5 < y4 or y1 < y5 < y4 < y3 or y3 < y1 < y4 < y5:\n            return \"YES\"\n    if x1 < x5 < x6 < x4 or x1 < x4 < x6 < x5 or x5 < x1 < x4 < x6:\n        if y1 < y5 < y6 < y4 or y1 < y4 < y6 < y5 or y5 < y1 < y4 < y6:\n            return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, [\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 1098, 1099\n    ]))"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = set()\n    result.add(n)\n    while True:\n        if n == 1:\n            return len(result)\n        if n % 10 == 0:\n            n = n // 10\n            continue\n        n = n * 10\n        while n % 10 == 0:\n            n = n // 10\n        n = n + 1\n        result.add(n)\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    return str(int(n) + 1)\n    \n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for x in range(1, n+1):\n        nx = x+1\n        while nx % 10 == 0:\n            nx = nx // 10\n        if nx == n:\n            count += 1\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"None\"\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n    \n"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n--------------\n\nimport unittest\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"todo\""
    },
    {
        "number": 4006,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    seen = set()\n    def dfs(n):\n        if n == 0:\n            return 1\n        else:\n            return dfs(n//10) + dfs(n%10) if n not in seen else dfs(n//10)\n    res = dfs(n)\n    return str(res)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    g = [0] * n\n    for i in range(n):\n        g[f[i]] = i\n    for i in range(n):\n        if f[i]!= 0 and g[f[i]]!= i:\n            print(i, f[i])"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Reads a line of input, executes the problem's instructions and\n    prints the result to stdout.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    dist = [int(x) for x in stdin.readline().strip().split(' ')]\n    gifts = [0] * n\n    for i in range(n):\n        if dist[i] == 0:\n            gifts[i] = -1\n        else:\n            gifts[dist[i]-1] = i+1\n    print(*gifts)\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends_to_gift = [0] * n\n    for i in range(n):\n        friends_to_gift[i] = int(stdin[i * 2 + 1])\n\n    friends_to_gift_new = [0] * n\n    for i in range(n):\n        if friends_to_gift[i]!= 0:\n            friends_to_gift_new[friends_to_gift[i] - 1] = i + 1\n\n    for i in range(n):\n        if friends_to_gift_new[i]!= 0:\n            print(i + 1)\n            return\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n5 0 0 2 4\")\n    '5 3 1 2 4'\n    >>> solution(\"7\\n7 0 0 1 4 0 6\")\n    '7 3 2 1 4 5 6'\n    >>> solution(\"7\\n7 4 0 3 0 5 1\")\n    '7 4 2 3 6 5 1'\n    \"\"\"\n    n = int(stdin.readline())\n    f = list(map(int, stdin.readline().split()))\n    assert len(f) == n\n    ans = [0] * n\n    for i in range(n):\n        if f[i] == 0:\n            ans[i] = i + 1\n        else:\n            ans[f[i] - 1] = i + 1\n    return''.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readlines()\n    n = int(line[0].split()[0])\n    arr = list(map(int, line[1].split()))\n    arr.sort()\n    ans = []\n    ans_dict = {}\n    for i in range(n):\n        ans_dict[i] = ans_dict.get(i, 0) + arr[i]\n    for i in range(n):\n        ans_dict[i] = ans_dict.get(i, 0)\n    for i in range(n):\n        if arr[i] > 0:\n            if i < arr[i]:\n                ans.append(i)\n            else:\n                ans.append(i+1)\n    return \" \".join(list(map(str, ans)))\n"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    visited = [False] * n\n    ans = [-1] * n\n    def dfs(v, parent, nums):\n        nonlocal ans\n        visited[v] = True\n        if nums[v]!= 0:\n            ans[v] = nums[v]\n            return nums[v]\n        for i in range(n):\n            if not visited[i] and nums[i] == parent:\n                res = dfs(i, v, nums)\n                if res!= -1:\n                    ans[v] = res\n                    return res\n    for i in range(n):\n        dfs(i, -1, nums)\n    return''.join(map(str, ans))"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    f = [int(i) for i in stdin.readline().strip().split(' ')]\n    f_i = [i for i in range(n) if f[i] == 0]\n    for i in f_i:\n        if f[i] == 0:\n            for j in f_i:\n                if f[j] == 0 and j!= i:\n                    f[i] = j\n                    f[j] = i\n                    break\n    return''.join([str(i) for i in f])"
    },
    {
        "number": 4007,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gives the gift to the person who wants it\n    \"\"\"\n    stdin = stdin.split()\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1:]))\n    arr.sort()\n    arr.append(0)\n    arr.insert(0, 0)\n    \n    ans = []\n    s = 0\n    for i in range(n):\n        if arr[i] == 0:\n            if s == 0:\n                ans.append(arr[i+1])\n                s += 1\n            else:\n                ans.append(arr[i+1]-1)\n                s += 1\n        else:\n            ans.append(arr[i])\n    \n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    if int(stdin[0]) < int(stdin[1]):\n        return \"NO\"\n    else:\n        n, k = list(map(int, stdin[0].split()))\n        a = list(map(int, stdin[1].split()))\n        \n        colors = set(a)\n        if len(colors) < k:\n            return \"NO\"\n        colors = sorted(colors)\n        colors_dict = dict()\n        for i in range(len(colors)):\n            colors_dict[colors[i]] = 0\n        for i in range(len(a)):\n            if a[i] in colors_dict.keys():\n                colors_dict[a[i]] += 1\n        if sum(colors_dict.values()) < k:\n            return \"NO\"\n        a.sort()\n        l = []\n        l_colors = list(colors_dict.keys())\n        for i in range(len(a)):\n            l.append(l_colors[colors_dict[a[i]] - 1])\n            colors_dict[a[i]] -= 1\n        return \"YES\" + \" \".join(map(str, l))\n    \n    \n    \n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str for given input.\n\n    :param stdin: str of input.\n    :return: str.\n    \"\"\"\n    n, k = [int(n) for n in stdin.split(' ')]\n    a = [int(n) for n in stdin.split(' ')[1:]]\n\n    count = 0\n    possibilities = {}\n    for element in a:\n        if element in possibilities:\n            possibilities[element] += 1\n        else:\n            possibilities[element] = 1\n        if possibilities[element] > k:\n            count += 1\n    if count > 0:\n        return 'NO'\n    else:\n        possibilities = list(possibilities.items())\n        possibilities = sorted(possibilities, key=lambda x: x[0])\n        possibilities = dict(possibilities)\n        result = list(possibilities.keys())\n        for i in range(0, k - 1):\n            result[i] += 1\n        return 'YES'+''.join([str(x) for x in result])\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    *rest, k, *nums = stdin.split('\\n')\n    n, k = int(k), int(nums[0])\n    nums = [int(x) for x in nums[1:]]\n    s = set(nums)\n    ans = 'NO'\n    for i in range(1, k + 1):\n        if i not in s and all(i not in x for x in nums):\n            ans = 'YES'\n            break\n    print(ans)\n    if ans == 'YES':\n        print(*(f'{i} {i}' for i in range(1, k + 1)), sep='\\n')\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'NO' if coloring is impossible\n    \"\"\"\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    possible = []\n    for color in range(k):\n        color_arr = []\n        for i in range(n):\n            if arr[i] == color:\n                color_arr.append(i)\n        if color_arr:\n            possible.append(color_arr)\n    if not possible:\n        return \"NO\"\n    ans = possible[0]\n    for i in range(1, k):\n        for color in possible[i]:\n            if color not in ans:\n                ans.append(color)\n            if len(ans) == n:\n                return \" \".join(map(str, ans))\n    return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, k = list(map(int, stdin.split()))\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    for i in range(1, k + 1):\n        for j in range(len(lst)):\n            if j + 1 <= len(lst) - 1:\n                if lst[j]!= lst[j + 1] and i not in lst[j] and i not in lst[j + 1]:\n                    lst.append(i)\n    if len(lst) == k:\n        return \"YES\" + \" \" + \" \".join(map(str, lst))\n    return \"NO\"\n    pass"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string with the answer.\n    \"\"\"\n    # Write your code here\n    return \"\"\n\"\"\"\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lst = []\n    for l in stdin.split(\"\\n\"):\n        if l:\n            lst.append(list(map(int, l.split())))\n    n, k = lst[0]\n    lst = lst[1]\n    col = []\n    for i in range(1, k + 1):\n        col.append(i)\n    ans = []\n    for i in range(n):\n        cur = col.copy()\n        for j in range(n):\n            if lst[i] == lst[j] and i!= j:\n                if cur.count(lst[i]) > 1:\n                    cur.remove(lst[i])\n                else:\n                    ans = [lst[i]]\n                    cur.remove(lst[i])\n        if not cur:\n            break\n        ans.append(cur[0])\n    if ans:\n        return \"YES\" + \"\\n\" + \" \".join(map(str, ans))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    'not working for some cases'\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    a = sorted(map(int, stdin.split('\\n')[1].split(' ')))\n    k = max(k, a[-1])\n    # print(a)\n    print(k)\n    # for i in range(1, k+1):\n    #     if set(i for i in a if i in a[a.index(i):]) == set(a[a.index(i):]):\n    #         print(i)\n    for i in range(1, k+1):\n        # print(i)\n        print(i, a.count(i))\n"
    },
    {
        "number": 4008,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    l = list(map(int, stdin.split(' ')))\n    n, k = l[0], l[1]\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    ans = 'YES'\n    if a[k - 1] == a[n - 1]:\n        ans = 'NO'\n        return ans\n    elif a[k - 1] < a[n - 1]:\n        ans = 'NO'\n        return ans\n    else:\n        p = k\n        i = k\n        while p <= n:\n            for x in a[:i]:\n                if x == a[p - 1]:\n                    p += 1\n                else:\n                    a[p - 1] = a[i - 1]\n                    p += 1\n            i += 1\n        a[:k] = [a[n - 1]] * k\n        return ans\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(1)\n    space: O(1)\n    '''\n    n, x, y = map(int, stdin.split())\n    number = list(stdin)\n    count = 0\n    for i in range(x):\n        if number[i] == '1':\n            number[i] = '0'\n        else:\n            number[i] = '1'\n        count += 1\n    for i in range(y):\n        if number[i] == '0':\n            number[i] = '1'\n            count += 1\n        else:\n            number[i] = '0'\n            count += 1\n    print(count)\n    return number\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, x, y = map(int, stdin.split())\n    s = stdin\n    s = s[0]\n    s = int(s)\n    s = bin(s)[2:]\n    print(s)\n    return str(len(s) - len(s.rstrip('0')))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def add_up_to_m(m: int, n: int) -> int:\n        if n == 0:\n            return 0\n        return (m + add_up_to_m(m, n - 1)) % m\n\n    def next_char(s: str) -> int:\n        x = ord(s[-1]) - ord(\"0\")\n        return x + 1\n\n    n, m, k = map(int, stdin.split())\n    x = next_char(stdin)\n\n    for i in range(k):\n        n = add_up_to_m(n, k)\n\n    return str(n)[-m:]\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X, Y = map(int, stdin.split())\n    number = list(stdin[-N:])\n\n    count = 0\n\n    while True:\n        for idx in range(len(number)):\n            if number[idx] == '1':\n                number[idx] = '0'\n                count += 1\n                break\n            elif number[idx] == '0':\n                number[idx] = '1'\n                count += 1\n                break\n\n        if number.count('1') == 0:\n            break\n\n    print(count)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = [int(i) for i in stdin.split()]\n    remainder = 1\n    for i in range(n - 1, -1, -1):\n        if remainder > x:\n            remainder %= x\n        remainder *= 10\n    print(sum(1 for i in range(n - 1, -1, -1) if remainder > y and int(stdin[i]) == 1))\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    number = list(stdin[:-1])\n    for _ in range(y):\n        number[x - 1] = '1' if number[x - 1] == '0' else '0'\n    return \"\".join(number)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for part 1.\"\"\"\n    n, x, y = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    n = n * 10 ** (x + y)\n    n = n % (10 ** x)\n    while n > 10 ** y:\n        n //= 10\n    return str(n)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn, \u0430 \u0437\u0430\u0442\u0435\u043c nn \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b. \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e nn, \u0430 \u0437\u0430\u0442\u0435\u043c nn \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043a\u0430\u0436\u0434\u043e\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0442\u0435\u0441\u0442\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b.\n\nSample Input 1:\n\n5\n1\n2\n3\n4\n5\n\nSample Output 1:\n\n15\n\nSample Input 2:\n\n3\n1\n2\n3\n\nSample Output 2:\n\n6\n\nSample Input 3:\n\n10\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n\nSample Output 3:\n\n45\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"11 5 2\\n11010100101\")\n    1\n    >>> solution(\"11 5 1\\n11010100101\")\n    3\n    \"\"\"\n    n, x, y = [int(item) for item in stdin.split()]\n    number = \"\".join([str(digit) for digit in list(stdin.split())[1]])\n    counter = 0\n    while not str(number)[0] == '1':\n        counter += 1\n        number = (number * 2)[:n]\n        for i in range(len(number)):\n            if number[i] == '0':\n                number = number[:i] + '1' + number[i + 1:]\n    number = str(number)[1:]\n    number = number[-x:]\n    while number[0] == '0':\n        number = number[1:]\n    return counter + y * len(number)\n"
    },
    {
        "number": 4009,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n    n, x, y = list(map(int, stdin.split()))\n    res = 0\n    for perm in permutations(stdin[:n], r=n):\n        t = int(''.join(perm)) % int('1' * x + '0' * (n - x))\n        if t == y:\n            res = min(res, n - len([i for i in stdin[:n] if perm[i] == stdin[i]]))\n    return str(res)\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns Yes if a string is a palindrome,\n    or No otherwise.\n    >>> solution(\"\")\n    'Yes'\n    >>> solution(\"a\")\n    'Yes'\n    >>> solution(\"aab\")\n    'Yes'\n    >>> solution(\"abcba\")\n    'Yes'\n    >>> solution(\"abcbb\")\n    'No'\n    >>> solution(\"abccba\")\n    'No'\n    >>> solution(\"abccbb\")\n    'No'\n    '''\n    # write your code here\n    return \"Yes\" if is_palindrome(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\ncases = int(stdin.readline())\nfor case in range(cases):\n    len = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(0, len - 2):\n        for j in range(i + 1, len - 1):\n            if arr[i] == arr[j]:\n                for k in range(j + 1, len):\n                    if arr[k] == arr[j] and k - j >= 2:\n                        count = 1\n                        break\n                    elif arr[k]!= arr[j]:\n                        break\n    if count == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2\n   ... 1 2 1\n   ... 5\n   ... 1 2 2 3 2\n   ... 3\n   ... 1 1 2\n   ... 4\n   ... 1 2 2 1\n   ... 10\n   ... 1 1 2 2 3 3 4 4 5 5\n   ... ''')\n    'YES'\n    \"\"\"\n    t = int(stdin.readline())\n    res = ''\n    for _ in range(t):\n        n = int(stdin.readline())\n        l = list(map(int, stdin.readline().strip().split()))\n        has_palin = False\n        for i in range(n):\n            for j in range(i+2, n):\n                if l[i:j] == l[i:j][::-1]:\n                    has_palin = True\n                    break\n            if has_palin:\n                break\n        res += 'YES\\n' if has_palin else 'NO\\n'\n    return res\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solution for the given input, return result.\"\n    return \"\"\n    \n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    a_i = a_j\n    (a_i == a_j)\n    a_j+1 = a_i\n    (a_i == a_j+1)\n    (a_i == a_j-1)\n    \"\"\"\n    n = int(stdin.readline())\n    lst = [int(x) for x in stdin.readline().split()]\n    result = \"NO\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] == lst[j] and j-i >= 2:\n                result = \"YES\"\n    return result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for i in range(cases):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split(' ')]\n        palindromes = []\n        for i in range(len(a) - 2):\n            for j in range(i + 2, len(a)):\n                sub = a[i:j]\n                if sub == sub[::-1]:\n                    palindromes.append(sub)\n        if len(palindromes) > 0:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4010,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution uses a recursive function to compute the answer to the problem.\n\n    This solution is implemented as a generator which repeatedly computes and yields\n    the next value until there are no more values left to compute. The maximum number\n    is computed by taking the maximum value from the recursive calls.\n    \"\"\"\n    n = int(stdin[0])\n    digits = stdin[1]\n    f = [int(x) for x in stdin[2].split(\" \")]\n    return max(\n        f\n        if x == \"9\"\n        else f[x]\n        if x == \"8\"\n        else f[x]\n        if x == \"7\"\n        else f[x]\n        if x == \"6\"\n        else f[x]\n        if x == \"5\"\n        else f[x]\n        if x == \"4\"\n        else f[x]\n        if x == \"3\"\n        else f[x]\n        if x == \"2\"\n        else f[x]\n        if x == \"1\"\n        else f[x]\n        for x in digits[:n]\n    )"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum possible number you can get after applying the operation described in the statement no more than once.\n    :param stdin: string with all digits from '1' to '9'\n    :return: maximum possible number after applying the operation one time\n    '''\n\n    # get the number of digits\n    digits = stdin.strip()\n    n = len(digits)\n    # get the mapping\n    mapping = list(map(int, stdin.strip().split(' ')))\n\n    # get the initial max number\n    max_num = get_max_number(digits, mapping)\n\n    # repeat the mapping for a number of times equal to the number of digits\n    for _ in range(n):\n        # update the max number\n        max_num = max(max_num, get_max_number(get_digit_string(max_num), mapping))\n\n    return max_num\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin]\n    b = [int(i) for i in stdin]\n    f = [int(i) for i in stdin]\n    for i in range(n):\n        if a[i] == 0:\n            b[i] = 1\n        else:\n            break\n    if n <= 2:\n        if n == 1:\n            b[0] = f[0]\n        elif n == 2:\n            if f[0] == f[1]:\n                b[0] = f[0]\n                b[1] = f[1]\n            else:\n                b[0] = f[0]\n                b[1] = f[1]\n        return str(max(b))\n\n    else:\n        b[n - 1] = f[n - 1]\n        for i in range(n - 1):\n            if b[i] == b[i + 1]:\n                if a[i] == 1:\n                    b[i] = f[i]\n                else:\n                    b[i] = f[i]\n                    b[i + 1] = f[i + 1]\n            elif a[i] == 1:\n                b[i] = f[i]\n                b[i + 1] = f[i + 1]\n            else:\n                break\n        return str(max(b))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    f = list(map(int, stdin.split()))\n    \n    return str(max(n * max(f), *a))\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1]\n    b = []\n    for i in range(9):\n        b.append(int(stdin[2+i]))\n    n = len(a)\n    s = []\n    j = n\n    for i in range(n):\n        if j == n:\n            s.append(int(a[i]))\n            j = j-1\n        else:\n            if a[i] == a[j]:\n                s.append(int(a[i]))\n                j = j - 1\n            else:\n                s.append(int(a[i]))\n                j = j - 1\n    p = []\n    q = 0\n    r = n\n    for i in range(9):\n        if i == 4:\n            q = q + 1\n        else:\n            if i == 8:\n                r = r - 1\n            p.append(int(b[i]))\n    t = []\n    for i in range(n):\n        if i == n - 1:\n            t.append(int(a[i]))\n        else:\n            if i!= n - 2:\n                t.append(int(a[i]))\n            else:\n                t.append(int(a[i]))\n    u = []\n    v = 0\n    w = n\n    for i in range(9):\n        if i == 4:\n            v = v + 1\n        else:\n            if i == 8:\n                w = w - 1\n            u.append(int(b[i]))\n    x = []\n    y = 0\n    z = n\n    for i in range(9):\n        if i == 4:\n            y = y + 1\n        else:\n            if i == 8:\n                z = z - 1\n            x.append(int(b[i]))\n    print(s)\n    print(p)\n    print(t)\n    print(u)\n    print(x)\n    print(y)\n    print(z)\n    return x"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, number = [int(el) for el in stdin.split(\"\\n\")]\n    transform = [int(el) for el in stdin.split(\"\\n\")[2].split()]\n    k = 0\n    for i in range(n):\n        if transform[9 - i] < number % 10:\n            k += 1\n            number = number * 10 + transform[9 - i]\n        else:\n            number = number * 10 + (number % 10 - transform[9 - i])\n    return str(number)"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    a = stdin.readline().rstrip()\n    b = stdin.readline().rstrip()\n    res = a\n\n    for i in range(len(b)):\n        res = res.replace(b[i], str(b[i]))\n\n    return res\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_digits = int(stdin[0])\n    number_in_str = stdin[1]\n    f_array = list(map(int, stdin[2].split(' ')))\n    \n    number_in_int = int(number_in_str)\n    result = 0\n    for i in range(number_of_digits):\n        temp = number_in_int % 10\n        number_in_int = number_in_int // 10\n        for j in range(9):\n            temp = temp * 10 + f_array[j]\n            if temp > result:\n                result = temp\n    return str(result)\n"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u0435\u043b. \u041d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u0438\u0437 \u043d\u0438\u0445 \u0432\u0437\u044f\u0442\u044c\n    \u0440\u043e\u0432\u043d\u043e \u043e\u0434\u043d\u043e \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c \u043a \u043d\u0435\u043c\u0443 \u0435\u0434\u0438\u043d\u0438\u0446\u0443.\n    \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u043e\u0436\u043d\u043e \u0432\u0437\u044f\u0442\u044c \u043b\u044e\u0431\u043e\u0435 \u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u0443, \u043d\u043e \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c\n    \u043b\u044e\u0431\u043e\u0433\u043e \u0447\u0435\u0442\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430, \u043f\u0440\u0438\u0431\u0430\u0432\u0438\u0442\u044c \u0435\u0434\u0438\u043d\u0438\u0446\u0443 \u0438 \u043d\u0435 \u0441\u0442\u0430\u043d\u0435\u0442 \u043b\u044e\u0431\u043e\u0435 \u0447\u0435\u0442\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n    \u0415\u0441\u043b\u0438 \u0436\u0435 \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0440\u0430\u0432\u043d\u044b, \u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043b\u044e\u0431\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445.\n    \"\"\"\n\n\n    n = int(stdin[0])\n    a = stdin[1]\n    assert n > 0\n    assert len(a) == n\n\n    numbers = [int(d) for d in a.split()]\n    numbers = set(numbers)\n    numbers = sorted(numbers)\n\n    def is_odd(number):\n        return number % 2!= 0\n\n    def is_odd_number(number):\n        return is_odd(number) and number!= 0\n\n    odd_number = max(numbers, key=is_odd_number)\n\n    result = odd_number + 1\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the maximum number of f(x) on f(x) replacing 1 on f(x)\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: the maximum number of f(x) on f(x) replacing 1 on f(x)\n    \"\"\"\n    n = int(stdin)\n    a = stdin\n    a = a.split()\n    if len(a) == 1:\n        return int(a[0])\n    f = []\n    for i in range(9):\n        f.append(int(stdin[i]))\n    for i in range(n - 1):\n        f = f.append(int(stdin[i + 1]))\n    res = int(a[0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            number = \"\"\n            for k in range(i, j):\n                number += str(f[k])\n            res = max(int(number), res)\n    return res\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().split())\n        res = a - b\n        for i in range(c - b):\n            if (c - i * b) % a!= 0:\n                res = a - i - 1\n                break\n        print(res)\n        print(a, b, c)\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You have to perform the minimum number of such operations in order to obtain three integers $A \\le B \\le C$ such that $B$ is divisible by $A$ and $C$ is divisible by $B$.\n\nYou have to answer $t$ independent test cases. \n\n\"\"\"\n    pass\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of operations needed to obtain the desired result.\n\n    >>> solution(\"8\\n1 2 3\\n123 321 456\\n5 10 15\\n15 18 21\\n100 100 101\\n1 22 29\\n3 19 38\\n6 30 46\")\n    1\n    >>> solution(\"4\\n1 2 3\\n2 3 4\\n4 5 6\\n5 6 7\")\n    1\n    \"\"\"\n    # create a set of multiples for each base number\n    multiples = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    for a, b, c in map(int, stdin.splitlines()):\n        # iterate over multiples for each base number\n        for m in multiples:\n            # multiple is less than base number\n            if m < a:\n                # add multiple to set of multiples\n                multiples.add(m)\n            # multiple is greater than base number\n            elif m > a:\n                # remove multiple from set of multiples\n                multiples.remove(m)\n\n    # get the minimum number of operations needed to obtain three divisors\n    # of base numbers\n    num_ops = 3 - (multiples & {a, b, c})\n\n    # return the number of operations\n    return num_ops\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string\n    >>> solution('''4 3 2''')\n    '4 1 2'\n    >>> solution('''1 2 3''')\n    '1 1 2'\n    >>> solution('''5 10 15''')\n    '2 1 15'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''5 10 15''')\n    '2 1 15'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''5 10 15''')\n    '2 1 15'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2 3''')\n    '1 1 3'\n    >>> solution('''1 2"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for codewars kata\"\"\"\n    a, b, c = map(int, stdin.split())\n    a, b, c = max(a, b, c), min(a, b, c), max(a, b, c)\n    \n    while True:\n        a, b = b, (b + c) // b * b\n        if b <= c:\n            return str(a) + '\\n' + str(b) + '\\n' + str(c)\n        \nprint(solution(input()))"
    },
    {
        "number": 4012,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the task.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = sorted(list(map(int, stdin.readline().split())))\n    return str(max(arr[:n - 1]) - min(arr[:n - 1]))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    res = abs(max(numbers) - min(numbers))\n    for i in range(count):\n        min_val, max_val = min(numbers), max(numbers)\n        temp = numbers[i]\n        del numbers[i]\n        res = min(abs(max_val - min(numbers)), res)\n        numbers.insert(i, temp)\n    return str(res)\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution\n    \"\"\"\n    import sys\n\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = [int(el) for el in stdin[1].split()]\n\n    min_sum = sys.maxsize\n    for i in range(n):\n        sum_subarr = 0\n        for j in range(i, n):\n            sum_subarr += a[j]\n            if sum_subarr < min_sum:\n                min_sum = sum_subarr\n    return str(min_sum)\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(v) for v in stdin.split()]\n    print(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #get the input\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    #create a set of items to check for duplicates\n    unique_arr = set(arr)\n    #create a max and min int\n    max_int = max(arr)\n    min_int = min(arr)\n    #create a variable to hold the output\n    output = 0\n    #iterate over the input\n    for i in range(0, len(arr)):\n        #create a variable to hold a new list that is the original list with the current value removed\n        new_arr = arr.copy()\n        #remove the current value from the list\n        new_arr.remove(arr[i])\n        #create a variable to hold the max and min of the new list\n        max_int_new_arr = max(new_arr)\n        min_int_new_arr = min(new_arr)\n        #create a variable to hold the current max - current min\n        diff_int = max_int - min_int\n        #create a variable to hold the new max - new min\n        diff_int_new_arr = max_int_new_arr - min_int_new_arr\n        #create a variable to hold the output of the new max - new min\n        output_int = diff_int_new_arr - diff_int\n        #check if output_int is less than or equal to the current output\n        if output_int < output:\n            #if it is, then assign the output to output_int\n            output = output_int\n    #return the output\n    return str(output)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    array = [int(i) for i in stdin.splitlines()[1].split(' ')]\n    min_dif = min(array) - max(array)\n    min_dif = min(min_dif, array[0] - array[1])\n    min_dif = min(min_dif, array[1] - array[2])\n    if len(array) > 3:\n        min_dif = min(min_dif, array[0] - array[3])\n    return str(min_dif)\n"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def stability(a: list):\n        return max(a) - min(a)\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    print(min(stability(a[1:]), stability(a[:-1])))\n    return ''\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # My Solution\n    # a = [int(i) for i in stdin.split()]\n    # stdin = stdin.split()\n    # n = int(stdin[0])\n    # m = min(a)\n    # maxs = []\n    # mins = []\n    # for i in range(len(a)):\n    #     maxs.append(max(a))\n    #     mins.append(min(a))\n    #     a.remove(maxs[i])\n    #     a.remove(mins[i])\n    # maxs = max(maxs)\n    # mins = min(mins)\n    # ans = maxs - mins\n    # return ans\n    # # Better Solution\n    # n = int(stdin[0])\n    # a = [int(i) for i in stdin[1].split()]\n    # ans = 0\n    # minn = min(a)\n    # for i in a:\n    #     ans = max(ans, i - minn)\n    # return ans\n\n    # Your Solution\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1].split()]\n    max_a = [max(a)]\n    min_a = [min(a)]\n    ans = 0\n    for i in range(n - 1):\n        max_a.append(max(a))\n        min_a.append(min(a))\n        a.remove(max_a[i])\n        a.remove(min_a[i])\n    ans = max_a[-1] - min_a[-1]\n    return ans\n\nprint(solution(\"4 1 3 7\"))\nprint(solution(\"2 1 100000\"))"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin.split(\"\\n\")[0].split(\" \")\n    days = list(map(int, days))\n    exams = stdin.split(\"\\n\")[1].split(\" \")\n    exams = list(map(int, exams))\n    days_per_exam = list(map(int, stdin.split(\"\\n\")[2].split(\" \")))\n    exam_passed = 0\n    max_exams = 0\n    for exam in exams:\n        exam_passed += exam\n        max_exams += 1\n    while exam_passed!= max_exams:\n        if exam_passed < max_exams:\n            return \"-1\"\n        else:\n            exam_passed = exam_passed - max_exams\n            max_exams = max_exams - 1\n    petya_per_day = [0] * days[0]\n    day = 0\n    for exam in exams:\n        petya_per_day[day] = exam\n        day += 1\n    day = 0\n    for exam in exams:\n        if day + exam > days[0]:\n            return \"-1\"\n        else:\n            day += exam\n            day_per_exam = 0\n            for day_exam in days_per_exam:\n                day_per_exam += day\n                petya_per_day[day_per_exam] += 1\n                day += 1\n                if day_per_exam > days[0]:\n                    return \"-1\"\n    return \" \".join(map(str, petya_per_day))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[:2]]\n    a = [[int(x) for x in stdin.split('\\n')[i + j].split()]\n         for i in range(0, m) for j in range(0, 3)]\n    a = sorted(a, key=lambda x: x[2])\n    if m == n:\n        return''.join([str(i + 1) for i in range(m)])\n    p = []\n    for i in a:\n        if not p:\n            p.append(i)\n        else:\n            if i[1] <= p[-1][0]:\n                p.append(i)\n            else:\n                break\n    if p[-1][0] < n:\n        return '-1'\n    p = sorted(p, key=lambda x: x[0])\n    r = []\n    for i in range(len(p)):\n        if p[i][0] == 1:\n            r.append('1')\n        else:\n            r.append(str(p[i][2]))\n    return''.join(r)\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    exam = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    ans = [-1] * (n + 1)\n    for i in range(1, n + 1):\n        for s, d, c in exam:\n            if s <= i <= d:\n                if ans[i] < c:\n                    ans[i] = c\n                    break\n    if ans.count(-1) > 0:\n        return \"-1\"\n    else:\n        return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    if n < 2 or m < 1:\n        return \"IMPOSSIBLE\"\n    exams = []\n    for i in range(m):\n        s, d, c = [int(x) for x in stdin.split(\"\\n\")[i].split(\" \")]\n        exams.append([s, d, c])\n    exams.sort(key=lambda e: e[0])\n    rests = [0] * (n + 1)\n    prep_exams = [0] * (n + 1)\n    rests[0] = 1\n    prep_exams[0] = 0\n    rest_s, rest_d, rest_c = exams[0]\n    for exam in exams:\n        s, d, c = exam\n        if s < rest_d:\n            return \"IMPOSSIBLE\"\n        rest_d = d\n        rest_c = c\n        rests[rest_d] += 1\n        prep_exams[rest_d] += 1\n    for i in range(1, n):\n        if (rests[i] + prep_exams[i]) > m:\n            return \"IMPOSSIBLE\"\n    ans = [0] * m\n    ans[0] = m + 1\n    for i in range(n):\n        ans[prep_exams[i]] = i + 1\n    return \" \".join([str(x) for x in ans])\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days, exams = [int(x) for x in stdin.split(' ')]\n    exam_times = []\n    for _ in range(exams):\n        exam_times.append([int(x) for x in stdin.split(' ')])\n    for exam in exam_times:\n        exam.sort()\n    result = []\n    passed_exams = set()\n    for exam in exam_times:\n        passed_exams.add(exam[0])\n        result.append((exam[0]))\n        if exam[1] > exam[0]:\n            result.append(exam[1])\n            result.append(0)\n        else:\n            result.append(0)\n    for exam in exam_times:\n        for day in range(exam[0] + 1, exam[1]):\n            if day not in passed_exams:\n                result.append(day)\n                break\n        else:\n            result.append(0)\n    print(days, len(result))\n    return''.join([str(x) for x in result])"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [list(map(int, stdin.split())) for _ in range(m)]\n    arr.sort(key=lambda x: x[1])\n    current_day = 0\n    prep_day = 0\n    exam_count = 0\n    schedule = [0] * n\n    for exam, exam_day, exam_prep in arr:\n        prep_day = max(exam_prep, exam_day - current_day)\n        prep_day = min(prep_day, exam_day - exam_count)\n        if exam_day > current_day:\n            current_day = exam_day\n        schedule[exam_day - 1] = exam_count + 1\n        exam_count += prep_day\n    for i in schedule:\n        if i == 0:\n            return \"-1\"\n    return''.join(list(map(str, schedule)))\n\n\n\n----Input----\n5 2\n1 3 1\n1 5 1\n\n----Output----\n1 2 3 0 3\n\n----Input----\n5 1\n1 3 1\n1 2 1\n\n----Output----\n-1\n\n\n\n\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Petya studies at university. The current academic year finishes with n special days. Petya needs to pass m exams in those special days. The special days in this problem are numbered from 1 to n.\n    \n    There are three values about each exam: s_i, d_i, c_i (1 <= s_i < d_i <= n, 1 <= c_i <= n). \n    \n    There are three types of activities for Petya in each day: to spend a day doing nothing (taking a rest), to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. \n    \n    So he can't pass/prepare for multiple exams in a day. He can't mix his activities in a day. If he is preparing for the i-th exam in day j, then s_i <= j < d_i.\n    \n    It is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. \n    \n    So preparation for an exam is not required to be done in consecutive days.\n    \n    Find the schedule for Petya to prepare for all exams and pass them, or report that it is impossible.\n    \n    >>> solution('5 2\\n1 3 1\\n1 5 1')\n    '1 2 3 0 3'\n    >>> solution('3 2\\n1 3 1\\n1 2 1')\n    '-1'\n    >>> solution('10 3\\n4 7 2\\n1 10 3\\n8 9 1')\n    '2 2 2 1 1 0 4 3 4 4'\n    \"\"\"\n    pass"
    },
    {
        "number": 4014,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to \"Game 23\".\n    \"\"\"\n    n, m = [int(x) for x in stdin.strip().split()]\n    if m == 0:\n        return str(0)\n    if m == 1:\n        return str(1)\n    if n == m:\n        return str(1)\n    if n > m:\n        return str(-1)\n    if n == 2 * m:\n        return str(2)\n    if n == 3 * m:\n        return str(1)\n    if n % 3 == 0 and m % 3 == 2:\n        return str(2)\n    if n % 3 == 2 and m % 3 == 0:\n        return str(2)\n    if n % 3 == m % 3 == 1:\n        return str(3)\n    return str(-1)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return \"It is impossible to transform $%s$ to $%s$.\" % (n, m)\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    if n == m:\n        return '0'\n    if m % 3 == 0 and (n % 3 == 0 or m < n):\n        return '-1'\n    return n if m == n * 2 or m == n * 3 else '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    # lines = stdin.splitlines()\n    # n, m = [int(x) for x in lines[0].split(' ')]\n    n, m = [int(x) for x in stdin.split(' ')]\n    \n    if n==m:\n        print(0)\n        return\n\n    # 2 or 3 times\n    # possible jumps: 1, 3, 10\n    # if n == 1:\n    #     if m % 10 == 0 or m % 3 == 0:\n    #         print(-1)\n    #         return\n\n    # if n % 3 == 0:\n    #     print(-1)\n    #     return\n    \n    # if n == m:\n    #     print(0)\n    #     return\n\n    # x = math.log(m/n)\n    # if x % 1!= 0:\n    #     print(-1)\n    #     return\n\n    # if x == math.floor(x):\n    #     x = int(x)\n    #     print(x)\n    #     return\n    \n    # if x - math.floor(x) == 0:\n    #     print(-1)\n    #     return\n\n    # possible_jumps = [1, 3, 10]\n    # for possible_jump in possible_jumps:\n    #     remain = m - n * possible_jump\n    #     if remain % possible_jump == 0:\n    #         print(remain / possible_jump)\n    #         return\n\n    # print(-1)\n    # return\n\n    if m % 2 == 0:\n        if n % 2 == 0:\n            print(-1)\n            return\n        print(1)\n        return\n    \n    if m % 3 == 0:\n        if n % 3 == 0:\n            print(-1)\n            return\n        print(1)\n        return\n\n    if m % 2 == 0 and m % 3 == 0:\n        print(1)\n        return\n    print(-1)\n    return\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(\" \")]\n    if a < b:\n        print(-1)\n        return\n    if a == b:\n        print(0)\n        return\n    if a == 1:\n        print(1)\n        return\n    if b % 3 == 0:\n        x = b // 3\n        if x == 1:\n            print(1)\n            return\n        print(x)\n        return\n    if b % 3 == 1:\n        x = b // 3\n        y = (b + 1) // 3\n        if x == 1 and y == 1:\n            print(2)\n            return\n        print(x + y - 1)\n        return\n    if b % 3 == 2:\n        x = b // 3\n        y = (b + 2) // 3\n        if x == 1 and y == 1:\n            print(2)\n            return\n        print(x + y - 1)\n        return\n\nsolution(input())\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    m = int(m / 3 if m % 3 == 0 else m / 3 + 1)\n    return str(n - m) if n - m >= 0 else '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a == b:\n        return str(0)\n    elif b % a < a % b:\n        return str(-1)\n    if b % a == 0:\n        return str(b // a - 1)\n    else:\n        return str(b // a - 2)\n    \n    \n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    n, m = map(int, stdin.split())\n    count = 0\n    if m % 3 == 0 and n % 3 == 0:\n        m, n = n, m\n    elif m % 3 == 0:\n        n = n // 3\n        m = m // 3\n    elif n % 3 == 0:\n        m = m // 3\n        n = n // 3\n    else:\n        return -1\n    while n!= m:\n        if n > m:\n            if n % 3 == 0 and m % 3 == 0:\n                m, n = n, m\n            elif n % 3 == 0:\n                n = n // 3\n                m = m // 3\n            elif m % 3 == 0:\n                m = m // 3\n                n = n // 3\n            else:\n                return -1\n        else:\n            if n % 3 == 0 and m % 3 == 0:\n                m, n = m, n\n            elif n % 3 == 0:\n                m = m // 3\n                n = n // 3\n            elif m % 3 == 0:\n                m = m // 3\n                n = n // 3\n            else:\n                return -1\n        count += 1\n    return count\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4015,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    num = int(input_data[0])\n    target = int(input_data[1])\n    count = 0\n    while num!= target:\n        if target % 2 == 0 and num % 2 == 0:\n            num *= 2\n            target = target // 2\n            count += 1\n            print(num, target, count)\n        elif target % 2!= 0 and num % 2!= 0:\n            num *= 3\n            target = target // 3\n            count += 1\n            print(num, target, count)\n        else:\n            return -1\n    print(count)\n    return count"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[0:n]\n    s = [0] * n\n    count = 0\n    for i in range(n):\n        if t[i] == t[count]:\n            count += 1\n            s[i] = count\n        else:\n            count = 0\n            s[i] = 0\n    r = [0] * k\n    for i in range(n):\n        for j in range(i, n):\n            if s[j] - s[i] + 1 == k:\n                r[s[i]] = t[i:j+1]\n                break\n    return ''.join(r)\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    t = stdin\n    s = ''\n    for l in range(n):\n        for r in range(l, n):\n            s += t[l:r + 1]\n            if len(s) == k:\n                return s\n    return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    t = stdin[1:]\n    f = t[:k]\n    m = [[f[0] if i == 0 else f[i] if f[i]!= f[i - 1] else '' for i in range(len(f))]]\n    for i in range(1, n - k + 1):\n        new = ''\n        for j in range(k):\n            if t[i + j]!= t[i - 1 + j]:\n                new += t[i + j]\n            else:\n                new += m[-1][j]\n        m.append(new)\n    return ''.join(m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    inputs = sys.stdin.readlines()\n    t = inputs[0]\n    n = int(inputs[1])\n    k = int(inputs[2])\n    \n    print(t*k)\nsolution(inputs[0])\n\n'''\n\nn, k = map(int, input().split())\nt = input()\nl = [0] * n\n\nfor i in range(n - 1):\n    l[i + 1] = l[i] + (t[i] == t[i + 1])\n\nans = ''\nfor i in range(n):\n    if l[i] + k == n:\n        print(ans + t[i] + t[i])\n        break\n    if l[i] + k < n:\n        ans += t[i]\n    elif l[i] + k > n:\n        if l[i] == 0:\n            ans += t[i]\n            break\n        ans += t[i - 1]\n        l[i] = l[i] - 1\n        k = k - 1\n        ans += t[i]\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split(' ')]\n    t = stdin[:n]\n    s = ''\n    i = 0\n    while k > 0:\n        if k > 1:\n            j = i + n - 1\n        else:\n            j = i + k - 1\n        if t[i:j + 1] == t:\n            i += 1\n            k -= 1\n        else:\n            s += t[i]\n            i += 1\n            k -= 1\n    return s\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    t = stdin[:n]\n    if k == 1:\n        return t\n    elif k == n:\n        return t\n    else:\n        substrings = t\n        for i in range(1, n):\n            substrings = substrings[:i] + t + substrings[i:]\n            if len(set(substrings)) == k:\n                return substrings\n        return substrings\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    t = stdin[0]\n    res = []\n    for i in range(n):\n        res.append(t[i:] + t[:i])\n    return ''.join(sorted(res)[:k])\n"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    s = stdin\n    r = []\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j + 1] == s[i:j + 1][::-1]:\n                r.append(s[i:j + 1])\n    r.sort(key=len)\n    print(r[k - 1])\n\nsolution(stdin)"
    },
    {
        "number": 4016,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[0:n]\n    for l in range(n):\n        for r in range(l, n):\n            if t[l:r + 1] == t[l:r + 1][::-1]:\n                k -= 1\n                if k == 0:\n                    return t[l:r + 1]\n    return t[0:n]\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    number of good indices to remove\n    \"\"\"\n    pass"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 4017,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_good_sum(s: int, lst: List[int]) -> bool:\n        return all(sum(lst[j:]) == s for j in range(len(lst)))\n\n    def remove_element(lst: List[int], index: int, s: int) -> int:\n        lst[index] = None\n        while not is_good_sum(s, lst):\n            lst[index] = None\n            index += 1\n            if index == len(lst):\n                return 0\n        return index\n\n    n = int(stdin.readline())\n    lst = [int(x) for x in stdin.readline().split()]\n\n    good_indices = []\n    for i in range(len(lst)):\n        removed = remove_element(lst, i, sum(lst))\n        if removed:\n            good_indices.append(i)\n    print(len(good_indices))\n    print(' '.join(str(x) for x in good_indices))\n    return '0 0'\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split(' '))\n    n = len(stdin)\n    lst = sorted(set(stdin))\n    cost = 0\n    for i in range(n-k+1):\n        j = i+k\n        if stdin[i:j] in lst:\n            cost += k\n        else:\n            cost += n - len(lst)\n    return cost\nprint(solution('aaaaa'))\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = list(map(int, lines[0].split(' ')))\n    s = lines[1]\n    m = 0\n    for i in range(len(s) - k + 1):\n        m += len(s) - i - k\n    if m < 0:\n        return '-1'\n    return m\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    cache = {}\n    return str(solve(s, k, cache))\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def helper(s):\n        if len(s) == 0:\n            return 0\n        if s in visited:\n            return visited[s]\n        visited[s] = float('inf')\n        for i in range(1, len(s) + 1):\n            if s[:i] not in visited:\n                visited[s] = min(visited[s], 1 + helper(s[i:]))\n        return visited[s]\n\n    num, k = stdin.split()\n    s = stdin[:int(num)]\n    visited = dict()\n    print(helper(s))\n    return ''\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dp(i, k):\n        if i >= len(s):\n            return 0 if k == 0 else float('inf')\n        if (i, k) not in dp:\n            taken = dp(i + 1, k) + (len(s) - i - 1)\n            not_taken = dp(i + 1, k - 1)\n            dp[i, k] = min(taken, not_taken)\n        return dp[i, k]\n\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    dp = {}\n    return dp[n, k]\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n***\nIn case you want to look at the input, check your task description and look at the test cases here:\n[Link]\n\n[Link]\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a spanning tree that includes exactly the first vertex.\n\n    :param stdin: the input string\n    :return: string\n    \"\"\"\n    _, n, m, deg = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        if v <= u:\n            v, u = u, v\n        if v == 1:\n            edges.append(u)\n    edges.sort()\n\n    def dfs(v, deg):\n        \"\"\"Finds a spanring tree in the given graph such that the first vertex has degree exactly deg.\n\n        :param v: the first vertex in the given graph\n        :param deg: required degree of the first vertex\n        :return: bool\n        \"\"\"\n        if deg == 0:\n            return True\n        if v in spanring:\n            return dfs(spanring[v], deg - 1)\n        for u in edges:\n            if u == v:\n                continue\n            spanring[v] = u\n            if dfs(u, deg - 1):\n                return True\n            del spanring[v]\n        return False\n\n    spanring = {}\n    for v in range(1, n + 1):\n        spanring[v] = None\n    if not dfs(1, deg):\n        return \"NO\"\n    for v in range(1, n + 1):\n        if spanring[v] == 1:\n            return f\"{v} {1} \" + \" \".join(map(str, spanring))"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(node, cnt, ch):\n        for neighbor in edges[node]:\n            if ch[neighbor] == 0:\n                ch[neighbor] = cnt\n                cnt += 1\n                dfs(neighbor, cnt, ch)\n\n    n, m, d = [int(s) for s in stdin.split()]\n    edges = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        v, u = [int(s) for s in stdin.split()]\n        edges[v].append(u)\n        edges[u].append(v)\n\n    ch = [0] * (n + 1)\n    ans = 'YES'\n    cnt = 1\n    for node in range(1, n + 1):\n        if ch[node] == 0:\n            ch[node] = cnt\n            cnt += 1\n            dfs(node, cnt, ch)\n    if cnt!= d:\n        ans = 'NO'\n    for i in range(n):\n        for j in range(n):\n            if edges[i + 1].count(j + 1) == 2:\n                for k in range(n):\n                    if edges[j + 1].count(k + 1) == 1:\n                        print(i + 1, j + 1)\n                        print(i + 1, k + 1)\n                        print(k + 1, j + 1)\n                        return ans\n    return ans\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ### WRITE YOUR CODE HERE ###\n    pass\n    ### END YOUR CODE HERE ###\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(m * log(m))\n    Space Complexity: O(m)\n    \"\"\"\n    from math import inf\n    from typing import List\n    from collections import defaultdict\n    n, m, D = [int(x) for x in stdin.split()]\n    edges = [[int(x) for x in line.split()] for line in stdin.split(\"\\n\")[:-1]]\n\n    def has_degree_n(graph: List[List[int]]) -> bool:\n        degrees = defaultdict(int)\n        for v, u in graph:\n            degrees[v] += 1\n            degrees[u] += 1\n        return all(d == D for d in degrees.values())\n\n    def find_spanning_tree(graph: List[List[int]], vertex: int, visited: List[bool]):\n        if visited[vertex]:\n            return\n        visited[vertex] = True\n        for v, u in graph:\n            if v == vertex:\n                find_spanning_tree(graph, u, visited)\n\n    # check if D can be reached from vertex 1\n    if has_degree_n(edges):\n        print(\"YES\")\n        find_spanning_tree(edges, 1, [False] * n)\n        for v, u in edges:\n            if not visited[v] and not visited[u]:\n                print(v, u)\n    else:\n        print(\"NO\")\n\n    return \"\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return ''"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlog = logging.getLogger()\n\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10000000)\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    connections = []\n    for i in range(m):\n        connections.append(tuple(map(int, stdin.split())))\n    graph = [[0 for j in range(n)] for i in range(n)]\n    for i in range(m):\n        graph[connections[i][0] - 1][connections[i][1] - 1] = 1\n        graph[connections[i][1] - 1][connections[i][0] - 1] = 1\n\n    def find_non_bipartite_graph():\n        for i in range(n):\n            for j in range(n):\n                if graph[i][j] == 0:\n                    visited = [False for k in range(n)]\n                    for k in range(n):\n                        if graph[k][i] == 1 and graph[k][j] == 1 and visited[k] == False:\n                            visited[k] = True\n                            if d == 1:\n                                return False\n                            else:\n                                if d > 1 and find_non_bipartite_graph() == False:\n                                    return False\n                    if d > 1:\n                        return find_non_bipartite_graph()\n        return True\n    if find_non_bipartite_graph() == False:\n        print('NO')\n        return\n\n    tree = set()\n    def bfs(root):\n        q = [root]\n        while len(q) > 0:\n            cur = q.pop(0)\n            tree.add((cur, cur))\n            for i in range(n):\n                if graph[cur][i] == 1 and (i, cur) not in tree:\n                    tree.add((cur, i))\n                    tree.add((i, cur))\n                    q.append(i)\n    bfs(0)\n    print('YES')\n    print(len(tree) - 1)\n    for edge in tree:\n        print(edge[0] + 1, edge[1] + 1)\n    return ''\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hh1, mm1 = map(int, stdin.split(\" \"))\n    hh2, mm2 = map(int, stdin.split(\" \"))\n    hh3 = (hh2 + hh1) // 2\n    mm3 = (mm2 + mm1) // 2\n    return f\"{hh3:02d}:{mm3:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The main function.\"\"\"\n    start, end = [int(i) for i in stdin.split(\" \")]\n    # The contest's midpoint is (end - start) // 2 + start\n    mid = (end - start) // 2 + start\n    return \"{:02d}:{:02d}\".format(*divmod(mid, 60))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    start = stdin.split('\\n')[0].split(':')\n    end = stdin.split('\\n')[1].split(':')\n    start = list(map(int, start))\n    end = list(map(int, end))\n    start_hour = start[0] + start[1] / 60\n    start_minute = start[1] % 60\n    end_hour = end[0] + end[1] / 60\n    end_minute = end[1] % 60\n    # print(start_hour)\n    # print(start_minute)\n    # print(end_hour)\n    # print(end_minute)\n    mid_hour = (start_hour + end_hour) / 2\n    mid_minute = (start_minute + end_minute) / 2\n    # print(mid_hour)\n    # print(mid_minute)\n    return str(int(mid_hour)) + ':' + str(int(mid_minute))\nprint(solution(stdin))\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split(\":\")\n    h2, m2 = stdin.split(\":\")\n    h1 = int(h1)\n    m1 = int(m1)\n    h2 = int(h2)\n    m2 = int(m2)\n\n    h3 = int(h1 + (h2 - h1) / 2)\n    m3 = int(m1 + (m2 - m1) / 2)\n\n    return f\"{h3:02d}:{m3:02d}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = stdin.split('\\n')\n    h1, h2 = int(h1), int(h2)\n    m1, m2 = int(m1), int(m2)\n\n    if m1 % 2 == m2 % 2:\n        h3, m3 = (h1 + h2) // 2, (m1 + m2) // 2\n    else:\n        h3, m3 = (h1 + h2 + 1) // 2, (m1 + m2) // 2\n\n    return f'{h3:02}:{m3:02}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split('\\n')[0].split(':'))\n    h2, m2 = map(int, stdin.split('\\n')[1].split(':'))\n    if (h1 + m1) % 2 == (h2 + m2) % 2:\n        h = h1 + (h2 + m2) // 2\n        m = (h1 + m1 + (h2 + m2)) // 2\n    else:\n        h = h2 + (h2 + m2) // 2\n        m = (h1 + m1 + (h2 + m2)) // 2\n    return f'{h:02d}:{m:02d}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    hours1, minutes1 = stdin[:5], stdin[6:]\n    hours2, minutes2 = stdin[-5:], stdin[:-5]\n\n    hours1 = int(hours1)\n    minutes1 = int(minutes1)\n\n    hours2 = int(hours2)\n    minutes2 = int(minutes2)\n\n    if minutes1 % 2!= minutes2 % 2:\n        midhours = hours1 + hours2\n        if midhours == 12:\n            midhours = 0\n        midminutes = (minutes1 + minutes2) // 2\n    else:\n        midhours = hours1 + hours2\n        midminutes = (minutes1 + minutes2) // 2\n\n    if midhours < 10:\n        midhours = \"0\" + str(midhours)\n\n    if midminutes < 10:\n        midminutes = \"0\" + str(midminutes)\n\n    return f\"{midhours}:{midminutes}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(':'))\n    h2, m2 = map(int, stdin.split(':'))\n    h3 = (h1 + h2) // 2\n    m3 = (m1 + m2) // 2\n    if m3 % 2 == 1:\n        h3 += 1\n    return f'{h3}:{m3}'\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(':'))\n    h2, m2 = map(int, stdin.split(':'))\n    if m1 > m2:\n        m3 = m1 + (m1 - m2) // 2\n        if m3 % 2 == 0:\n            h3 = h1\n        else:\n            h3 = h1 + 1\n    else:\n        m3 = m2 + (m2 - m1) // 2\n        if m3 % 2 == 0:\n            h3 = h2\n        else:\n            h3 = h2 + 1\n    return str(h3) + ':' + str(m3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = [int(i) for i in stdin.split(':')]\n    h2, m2 = [int(i) for i in stdin.split(':')]\n    h3 = (h1 + h2) // 2\n    m3 = ((m1 + m2) // 2)\n    if (h1 + h2) % 2!= 0:\n        h3 += 1\n    if m1 % 2!= 0:\n        m3 += 1\n    return str(h3) + ':' + str(m3)\n    # print(h3, m3)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(int(stdin) + 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    sum_ = 0\n    while number!= 0:\n        number = number // 10\n        sum_ += 1\n    return sum_"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return 0\n    if a == 2:\n        return 1\n    if a == 3:\n        return 1\n\n    n = 1\n    while a > 3 * n ** 2 + 1:\n        n += 1\n\n    return n * n + (n - 1) * n // 2 + 1\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(int(stdin) & (int(stdin) - 1))\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 1\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution is not good.\n    \"\"\"\n    return ''.join(map(str, range(int(stdin))))\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"solution\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4021,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    counter = 0\n    while number > 0:\n        number = number // 2\n        counter += 1\n\n    return counter\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solve the problem\n    '''\n    n = int(stdin)\n    i = 0\n    s = 0\n    if n > 0:\n        li = list()\n        ri = list()\n        for _ in range(n):\n            li.append(list(map(int, stdin.split(' '))))\n            ri.append(list(map(int, stdin.split(' '))))\n        li.sort()\n        ri.sort()\n        for j in range(n):\n            s += max(0, li[j][1] - li[j][0] + 1 - ri[j][1] + ri[j][0] - 1)\n        for j in range(n):\n            s -= max(0, li[j][1] - li[j][0] + 1 - ri[j][1] + ri[j][0] - 1)\n        s -= 1\n        print(s)\n    return ''\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://codeforces.com/contest/1521/submission_summary?locale=en\"\"\"\n    n = int(stdin.readline().strip())\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.readline().strip().split())))\n    segments.sort(key=lambda x: x[1])\n    length = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if segments[i][1] < segments[j][0]:\n                length = max(length, segments[j][1] - segments[i][0])\n                break\n        else:\n            length = max(length, segments[i][1])\n    return str(length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total_segments, *_ = [int(x) for x in stdin.split()]\n    segments = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(total_segments - 1):\n        start, end = segments[i], segments[i + 1]\n        if start <= result:\n            if result < end:\n                result = end\n        else:\n            if start <= result:\n                result = start\n    print(result)"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u043e\u0432 $n$.\n    \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b \u0435\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u043e $l_i$ \u0438 \u043a\u043e\u043d\u0435\u0446 $r_i$.\n    \u0412\u0441\u0435 \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438 \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442.\n\n    \u0412\u0430\u0448\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u043f\u0438\u0441\u043e\u043a, \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0442\u043e\u0447\u0435\u043a, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0443\u044e\u0449\u0438\u043c \u0441\u0435\u0433\u043c\u0435\u043d\u0442\u0430\u043c:\n    [[2, 5], [3, 3], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], [6, 6], ["
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    read the input;\n    loop over lines;\n    if line[1] > line[0], they are intersecting;\n    if line[1] < line[0], they are not intersecting;\n    decide for each line whether to discard it or not;\n    calculate the intersecting length of each left line\n    '''\n    lines = [line.split(' ') for line in stdin.strip().split('\\n')]\n    lines = [[int(line[0]), int(line[1])] for line in lines]\n\n    intersect = set()\n    for i in range(len(lines)):\n        for j in range(i+1, len(lines)):\n            if lines[i][1] > lines[j][0]:\n                intersect.add(lines[i][1])\n                intersect.add(lines[j][0])\n            elif lines[i][1] < lines[j][0]:\n                intersect.add(lines[i][1])\n                intersect.add(lines[j][0])\n\n    return max(intersect) - min(intersect)\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n\"\"\"\nimport itertools\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 3\\n2 6\\n0 4\\n3 3\")\n    '1'\n    >>> solution(\"5\\n2 6\\n1 3\\n0 4\\n1 20\\n0 4\")\n    '2'\n    >>> solution(\"3\\n4 5\\n1 2\\n9 20\")\n    '0'\n    >>> solution(\"2\\n3 10\\n1 5\")\n    '7'\n    \"\"\"\n    intersections = 0\n    segments = []\n    n = int(stdin)\n    for i in range(n):\n        l, r = [int(x) for x in stdin.strip().split()]\n        segments.append([l, r])\n    for i in range(n):\n        for j in range(i + 1, n):\n            left, right = min(segments[i][0], segments[j][0]), max(segments[i][1], segments[j][1])\n            intersections += right - left\n    return str(intersections)\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Remove a segment such that the intersection of the remaining\n    segments has the maximal possible length.\n    '''\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    segments = [tuple(map(int, line.split())) for line in lines[1:]]\n    intersections = []\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            intersections.append(segments[i][0] < segments[j][0] < segments[i][1] < segments[j][1] or\n                                 segments[i][0] < segments[j][0] < segments[i][1] < segments[j][1] or\n                                 segments[j][0] < segments[i][0] < segments[j][1] < segments[i][1] or\n                                 segments[j][0] < segments[i][0] < segments[j][1] < segments[i][1])\n\n    intersections.sort()\n    print(intersections)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    \n    if sum(a) % n!= 0:\n        return 'NO'\n    \n    b = [0] * n\n    b[0] = a[0]\n    \n    for i in range(1, n):\n        b[i] = a[i] - a[i - 1]\n        if b[i] <= 0:\n            return 'NO'\n    \n    ans = 'YES'\n    for i in range(n - 1):\n        if b[i] == b[i + 1]:\n            continue\n        elif b[i] > b[i + 1]:\n            ans = 'NO'\n        else:\n            ans = 'NO'\n            break\n    \n    return ans\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    heights = list(map(int, stdin[1].split()))\n    if n == 1:\n        return \"YES\" if heights[0] == 1 else \"NO\"\n    # starting from the end\n    # add 1 to heights if it's even and then move on\n    while heights[-1] % 2 == 0:\n        heights.append(heights[-1] + 1)\n    # if heights[i] == heights[i + 1] the wall is complete\n    if heights[0] == heights[1]:\n        return \"YES\" if n == len(heights) else \"NO\"\n    # else: the wall is not complete, as Vova can't make bricks to finish the wall\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    num = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    max_arr = max(arr)\n    if max_arr > sum(arr) // 3:\n        return 'NO'\n    \n    for i in range(num - 1):\n        if abs(arr[i] - arr[i + 1]) > 1:\n            return 'NO'\n    \n    return 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline())\n    heights = [int(height) for height in stdin.readline().split(' ')]\n\n    heights_set = set(heights)\n\n    if len(heights_set)!= len(heights):\n        return 'NO'\n    \n    if len(heights) == 1:\n        return 'YES'\n    \n    max_height = max(heights)\n    min_height = min(heights)\n\n    if max_height - min_height > len(heights):\n        return 'NO'\n\n    is_same = True\n\n    for i in range(len(heights) - 1):\n        if heights[i]!= heights[i + 1]:\n            is_same = False\n            break\n    \n    if is_same:\n        return 'YES'\n    \n    for i in range(len(heights) - 1):\n        if heights[i] + 1 == heights[i + 1]:\n            return 'YES'\n    \n    return 'NO'\n    \nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    n = int(stdin.split()[0])\n    for i in stdin.split()[1:]:\n        l.append(int(i))\n    \n    l.sort()\n    if l[0] == l[-1] and sum(l)%2 == 0:\n        return \"YES\"\n    return \"NO\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    dp = [0 for _ in range(n)]\n    \n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j] and dp[i] < dp[j] + a[i] - a[j]:\n                dp[i] = dp[j] + a[i] - a[j]\n    \n    return 'YES' if dp[n - 1] >= n else 'NO'"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"solution\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4023,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n2 1 1 2 5\")\n    'YES'\n    >>> solution(\"3\\n4 5 3\")\n    'NO'\n    >>> solution(\"2\\n10 10\")\n    'YES'\n    \"\"\"\n    wall = list(map(int, stdin.split('\\n')[1].split()))\n    n = wall[0]\n    wall = wall[1:]\n\n    max_height = max(wall)\n\n    for h in range(max_height):\n        for i in range(n):\n            if wall[i] <= h + 1:\n                wall[i] = h + 1\n        if wall.count(h + 1) == n:\n            return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()[1]\n    if len(s) < k:\n        return '-1'\n    d = {}\n    for i in range(len(s) - 1):\n        if s[i] not in d:\n            d[s[i]] = i\n    print(len(d))\n    return str(len(d) * (n - len(d)))\n\n\n\n'''"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    s = stdin\n    curr_cost = 0\n    min_cost = math.inf\n\n    def dfs(curr_cost, cost_so_far, s, k):\n        nonlocal min_cost\n\n        if k == 0:\n            min_cost = min(min_cost, cost_so_far)\n        else:\n            for i, c in enumerate(s):\n                new_cost = curr_cost + (1 if s[i] == 'a' else 0)\n                if k - 1 >= new_cost:\n                    dfs(new_cost, cost_so_far + new_cost, s[i + 1:], k - new_cost)\n\n    dfs(0, 0, s, k)\n    if min_cost == math.inf:\n        print(-1)\n    else:\n        print(min_cost)\n        \n        \n        \n    return \"\""
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    n, k = [int(i) for i in line[0].split()]\n    s = line[1]\n    l = len(s)\n    m = {l - k + 1: [], l - k + 2: [], l - k + 3: [], l - k + 4: []}\n    for i in range(l):\n        for j in range(l):\n            if i < j:\n                if s[i:j] not in m[j - i]:\n                    m[j - i].append(s[i:j])\n    if len(m[k]) == 0:\n        return '-1'\n    else:\n        return str(sum(int(i) for i in m[k]))\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, s = [int(x) for x in stdin.split(' ')]\n    s = sorted(list(set(stdin[0:l])))\n    k = len(s)\n    t = []\n    for i in range(1, len(stdin)):\n        if stdin[i] not in t:\n            t.append(stdin[i])\n        else:\n            t.append('_')\n    t = ''.join(t)\n    s = ''.join(s)\n    cost = 0\n    for i in t:\n        if i!= '_':\n            cost += 1\n    if cost >= len(s):\n        return -1\n    elif cost == 0:\n        return 0\n    elif cost < len(s) and cost!= 0:\n        cost = 0\n        for i in range(len(t)):\n            if t[i]!= '_':\n                cost += 1\n        return l * (len(s) - cost)\n\nprint(solution(stdin))"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    S = stdin.split('\\n')[1:]\n    S = sorted(S, key=len)[::-1]\n    for i in S:\n        if len(set(i)) < k:\n            return '-1'\n    # for i in S:\n    #     for j in S:\n    #         if i in j:\n    #             S.remove(i)\n    #         else:\n    #             continue\n    cost = 0\n    for i in S:\n        cost += (n - len(i))\n    return cost"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = stdin[0:a]\n\n    s = list(s)\n    s.sort()\n    ans = 0\n    for c in s:\n        if ans + len(c) <= b:\n            ans += len(c)\n        else:\n            return -1\n    return ans\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    if k > len(s):\n        return -1\n    S = set()\n    res = 0\n    for i in range(n - k + 1):\n        if s[i] in S:\n            continue\n        res += i\n        S.add(s[i])\n        for j in range(i + 1, n - k + 1):\n            if s[j] in S:\n                continue\n            res += j - i\n            S.add(s[j])\n    if len(S) < k:\n        return -1\n    return res\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem, for the given input.\n    \"\"\"\n    n, k = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    s = stdin.split(\"\\n\")[1]\n    # S is set of sets, each set containing one string\n    S = [set(c) for c in s]\n    # m is sum of the lengths of all sets\n    m = sum([len(s) for s in S])\n    # cost of the first set is 0\n    cost = 0\n    # while m < k\n    while m < k:\n        # for every set in S\n        for i, s in enumerate(S):\n            # if the length of the set is 1\n            if len(s) == 1:\n                # if the cost is greater than n-1 (n-1 because we want to delete a char from the set)\n                if cost > n - 1:\n                    # return -1 (no possible solution)\n                    return \"-1\"\n                # otherwise, set the cost to n-1\n                cost = n - 1\n                # set the set to remove the char\n                S[i] = set(s.pop())\n            # else if the length of the set is greater than 1\n            elif len(s) > 1:\n                # set the set to the char\n                S[i] = set([s.pop()])\n                # set the cost to n - the number of the chars to be deleted\n                cost = n - len(s)\n        # m equals the sum of the lengths of all sets\n        m = sum([len(s) for s in S])\n    # return the cost\n    return cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport itertools\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > b + c or b > a + c or c > a + b:\n        print(0)\n        return\n    # print(a, b, c)\n    if a == b == c:\n        print(1)\n        return\n\n    # dp[i][j][k]: max days to eat j portions of k with i food left\n    dp = [[[0 for k in range(3)] for j in range(3)] for i in range(1 + a)]\n    # print(dp)\n    for i in range(1, 1 + a):\n        for j in range(3):\n            for k in range(3):\n                # food_left, portions_eaten = i, j\n                if k == 0:\n                    dp[i][j][k] = 1 + dp[i - 1][j][k]\n                else:\n                    dp[i][j][k] = dp[i - 1][j][k]\n                if j >= 1 and k == 0:\n                    dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j - 1][k] + 1)\n                if j >= 1 and k == 1:\n                    dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j - 1][k] + 1)\n                if j >= 1 and k == 2:\n                    dp[i][j][k] = min(dp[i][j][k], dp[i - 1][j - 1][k] + 2)\n\n    # print(dp)\n    res = 9999999999999\n    for i in range(3):\n        res = min(res, dp[a][i][0])\n    print(res)\n    return"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split(' ')))\n    fish, rabbit, chicken = a, b, c\n    fish = fish // 4\n    rabbit = rabbit // 5\n    chicken = chicken // 4\n    days = min(fish, chicken, rabbit)\n    print(days)\n    return \"\"\n\"\"\"\n\na, b, c = list(map(int, input().split(' ')))\nfish, rabbit, chicken = a, b, c\nfish = fish // 4\nrabbit = rabbit // 5\nchicken = chicken // 4\ndays = min(fish, chicken, rabbit)\nprint(days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    print(max((a + b + c - 2 * max(a, b, c)) // 3, (a + b + c) // 3))\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = a, b, c\n    days = 0\n    while y + z > 0:\n        x += y\n        y = max(y - z, 0)\n        z = min(z + x, a)\n        days += 1\n    return days\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    return (2 * b + c) // (a + b)\n    \"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    fish_count = b // a\n    stake_count = c // a\n    min_count = min(fish_count, stake_count)\n    max_count = max(fish_count, stake_count)\n    food = b + c\n    days = min_count\n    while food < food * 2:\n        food += max_count\n        days += 1\n    return days\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = a + b + c\n    print(days - max(days // 7 * 3, max(a, b, c - a - b)))\n    \n    \n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    fish = a // 7 * 5\n    rabbit = b // 7 * 3\n    chicken = c // 7 * 2\n    return max(fish, rabbit, chicken)\n"
    },
    {
        "number": 4025,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\\\n   ... 2 2\n   ... 1 1\n   ... 1 1\n   ... ''')\n    'YES'\n    >>> solution('''\\\n   ... 2 3\n   ... 1 2\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... 1 1\n   ... ''')\n    'NO'\n    \"\"\"\n\n    # get inputs\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, m = list(map(int, stdin.readline().split()))\n        matrix = [[0 for _ in range(m)] for _ in range(m)]\n        for _ in range(n):\n            x1, y1, x2, y2 = list(map(int, stdin.readline().split()))\n            for i in range(x1, x2 + 1):\n                for j in range(y1, y2 + 1):\n                    matrix[i - 1][j - 1] += 1\n        # check if matrix is symmetric\n        for i in range(m):\n            for j in range(m):\n                if matrix[i][j]!= matrix[j][i]:\n                    print('NO')\n                    return\n        print('YES')\n        return\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"YES\" else \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == 'YES' else 'NO'\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds out if it is possible to construct a square of size n * m that is a symmetric matrix\n    :param stdin: the input string\n    :return: Yes if it is possible, No if not\n    \"\"\"\n    [n, m] = [int(x) for x in stdin.split(' ')]\n\n    def load_tile(tile: str) -> dict:\n        \"\"\"\n        Loads a tile from the input\n        :param tile: a tile\n        :return: a dictionary with properties of a tile\n        \"\"\"\n        tile = tile.split('\\n')\n        tile_coords = [int(tile[0]), int(tile[1])]\n        tile_size = [int(tile[0]), int(tile[1])]\n        tile_number = int(tile[2])\n        tile_props = [int(tile[3]), int(tile[4])]\n        return {\n            \"coords\": tile_coords,\n            \"size\": tile_size,\n            \"number\": tile_number,\n            \"props\": tile_props\n        }\n\n    tiles = [load_tile(x) for x in stdin.split('\\n\\n')[1:]]\n\n    # Check if number of tiles is enough\n    if len(tiles) < n:\n        return \"NO\"\n\n    def check_if_tile_fits(tile: dict, tile_type: int, row: int, col: int) -> bool:\n        \"\"\"\n        Checks if the tile fits the specified type and location\n        :param tile: a tile\n        :param tile_type: the type of the tile\n        :param row: the row of the location\n        :param col: the column of the location\n        :return: True if it fits, False if not\n        \"\"\"\n        tile_coords = tile[\"coords\"]\n        tile_size = tile[\"size\"]\n        tile_number = tile[\"number\"]\n        tile_props = tile[\"props\"]\n\n        # Check if tile fits in the specific row\n        if col + tile_size[1] > m:\n            return False\n        # Check if tile fits in the specific column\n        if row + tile_size[0] > n:\n            return False\n        # Check if tile is not intersected with other tiles\n        for r in range(row, row + tile_size[0]):\n            for c in range(col, col + tile_size[1]):\n                if tiles[tile_type][\"coords\"][0] == r and tiles[tile_type][\"coords\"][1] == c:\n                    return False\n\n        # Check if tile is not intersected with other tiles\n        for i in range(len(tiles)):\n            if i!= tile_type:\n                for r in range(tile_coords[0], tile_coords[0] + tile_size[0]):\n                    for c in range(tile_coords[1], tile_coords[1] + tile_size[1]):\n                        if r == row and c == col:\n                            continue\n                        if tiles[i][\"coords\"][0] == r and tiles[i][\"coords\"][1] == c:\n                            return False\n\n        return True\n\n    def search_for_tile_type(tile_type: int) -> bool:\n        \"\"\"\n        Recursively searches for a tile of the specified type\n        :param tile_type: the type of the tile\n        :return: True if it finds a tile of the specified type, False if not\n        \"\"\"\n        if tile_type < 0:\n            return True\n        for tile in tiles[tile_type][\"props\"]:\n            if check_if_tile_fits(tile, tile_type, 0, 0):\n                if search_for_tile_type(tile_type - 1):\n                    return True\n        return False\n\n    # Check if it is possible to build a symmetric matrix\n    return search_for_tile_type(len(tiles) - 1)\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4026,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    size_set = size // 2\n    print(size_set)"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total_len = int(stdin)\n    A, B = set(), set()\n    for i in range(1, total_len + 1):\n        if i % 2 == 0:\n            A.add(i)\n        else:\n            B.add(i)\n    print(abs(sum(A) - sum(B)))"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    b = [int(x) for x in stdin.readline().split(' ')]\n\n    ans = 0\n    for i in range(n):\n        ans += min(abs(a[i] - b[i]), abs(a[i] + b[i]))\n    return ans\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # create a input file\n    # run your solution on it\n    # print the output\n    # and check the answer\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return str(answer)"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in input of the form\n    {number_of_numbers}\n    {number_1}\n   ...\n    {number_n}\n    and returns the minimum possible answer\n    \"\"\"\n\"\"\"\n    Your solution goes here\n\"\"\"\n\"\"\"\nclass Solution:\n    def __init__(self, stdin: str):\n        self.numbers = list(map(int, stdin.split(\" \")))\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        numbers = stdin.split(\" \")\n        numbers = list(map(int, numbers))\n        min_dif = abs(sum(numbers[:len(numbers) // 2]) - sum(numbers[len(numbers) // 2:]))\n        return min_dif\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    ans = abs(s - (2 * n))\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(l: int, a: int, b: int) -> int:\n        result = abs(a - b)\n        if b < a:\n            a, b = b, a\n        for i in range(l):\n            if (i % 2) == 0:\n                result = min(result, abs(a - b))\n                a += l[i]\n            else:\n                result = min(result, abs(a - b))\n                b += l[i]\n        return result\n\n    l = [int(s) for s in stdin.split()]\n    return str(solve(l[0], l[1], l[2]))\n"
    },
    {
        "number": 4027,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    \n    return str(len(string) - 2)\n    \n\n\nprint(solution(input()))"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    table = [0] * len(s)\n    table[0] = 1 if s[0] == ')' else 0\n\n    for i in range(1, len(s)):\n        if s[i] == '(':\n            table[i] = table[i - 1] + 1\n        else:\n            table[i] = table[i - 1] - 1\n\n    ans = 0\n    for i in range(1, len(s) - n):\n        ans += table[i - 1] * table[i + n - 1]\n        ans %= 1000000007\n\n    return ans\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solution(stdin))\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the answer\n    \"\"\"\n    s = stdin\n    n = int(s[0])\n    n = 2 * n\n    s = s[1:]\n\n    s = \"(\" + s + \")\"\n    nums = []\n    for i in range(len(s) - n + 1):\n        nums.append(s[i:i + n])\n\n    res = 1\n    for n in nums:\n        res *= nums.count(n)\n    return res\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_bracket_sequences(s: str):\n        res = set()\n        for i in range(1, len(s)):\n            for left in get_bracket_sequences(s[:i]):\n                for right in get_bracket_sequences(s[i:]):\n                    res.add(left + '+' + right)\n        return res\n\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    res = 0\n    for seq in get_bracket_sequences(s):\n        res += int(seq)\n    return str(res % (10**9 + 7))\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    # n = 3\n    # s = \"(()))()\"\n\n    def parens(num_of_parens, current_string):\n        if num_of_parens == 0:\n            return 1 if current_string.count(\"(\") == current_string.count(\")\") else 0\n        return parens(num_of_parens - 1, current_string + '(') + parens(num_of_parens - 1, current_string + ')')\n\n    print(parens(n, ''))\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    modulo = 10000000007\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            s = stdin[i:j]\n            if s.count('(') + s.count(')') == len(s):\n                ans += 1\n    return ans % modulo\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    input = stdin.split('\\n')\n    N = int(input[0])\n    S = input[1]\n    modulo = 1000000007\n    result = 1\n    for i in range(len(S) - 2 * N + 1):\n        if S[i:i + 2 * N] == '()' * N:\n            result = result * 2 % modulo\n        else:\n            result = 0 % modulo\n    print(result)\n"
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4028,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin\n    return result\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = input()\n    n = '5071'\n    print(n)\n    return n\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    N = len(str(n))\n    if n % 25 == 0:\n        return 0\n    if N <= 2:\n        return -1\n    cnt = N - 2\n    for i in range(2, n // 25):\n        # i is the number of digits we need to start with\n        # e.g. if n = 45, we need at least one digit to start with\n        if n % (i * 25) == 0:\n            cnt += i\n            break\n    return cnt\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the minimum number of moves to obtain a number that is divisible by 25\n    \"\"\"\n    N = stdin\n    total = 0\n    while len(N) > 1:\n        first = N[0]\n        last = N[-1]\n        if first > last:\n            N = N[1:]\n            total += 2\n        else:\n            N = N[:-1]\n            total += 1\n    return total if int(N) % 25 == 0 else -1\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport timeit\nimport time\n\n\nclass Solution:\n    def __init__(self):\n        self.start = time.time()\n        self.result = ''\n\n    def swap_digits(self, num):\n        arr = [int(i) for i in str(num)]\n        len_num = len(arr)\n        moved = False\n        for i in range(0, len_num-1):\n            if arr[i] < arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n                moved = True\n        if moved:\n            self.result = ''.join(map(str, arr))\n\n    def main(self, num):\n        self.result = ''\n        while True:\n            self.swap_digits(num)\n            if not self.result:\n                break\n            num = int(self.result)\n        return self.result\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom itertools import permutations, combinations\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"Not possible\"\n"
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    \"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    my_list = list(stdin)\n    while len(my_list) > 0:\n        if not my_list[0] == '0' and len(my_list) > 1:\n            my_list = my_list[1:]\n        else:\n            my_list = my_list[2:]\n    if len(my_list) > 0:\n        return -1\n    else:\n        return len(my_list)\n\nprint(solution(\"5071\"))\nprint(solution(\"705\"))\nprint(solution(\"1241367\"))\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abcdec\")\n    '2 1 1 2 1 1 1'\n    >>> solution(\"aabbcbc\")\n    '2 1 1 2 1 1 1'\n    >>> solution(\"abccbaab\")\n    '2 1 1 2 1 1 1'\n    >>> solution(\"cdbedc\")\n    '3 1 1 1 1 1'\n    >>> solution(\"efghfe\")\n    '3 1 1 1 1'\n    >>> solution(\"e\")\n    '1 1 1'\n    >>> solution(\"abbc\")\n    '2 1 1'\n    >>> solution(\"cbd\")\n    '2 1 1'\n    >>> solution(\"cba\")\n    '2 1 1'\n    >>> solution(\"c\")\n    '1 1'\n    >>> solution(\"abcc\")\n    '2 1 1'\n    >>> solution(\"edc\")\n    '3 1 1'\n    >>> solution(\"aab\")\n    '2 1 1'\n    >>> solution(\"a\")\n    '1 1'\n    >>> solution(\"aabbb\")\n    '2 2 1 1'\n    >>> solution(\"cbaa\")\n    '3 1 2 1'\n    >>> solution(\"cdeb\")\n    '3 1 2 1'\n    >>> solution(\"d\")\n    '3 1'\n    >>> solution(\"aab\")\n    '2 2 1 1'\n    >>> solution(\"b\")\n    '2 2 1'\n    >>> solution(\"cbd\")\n    '3 2 1 1'\n    >>> solution(\"e\")\n    '3 1'\n    >>> solution(\"aaab\")\n    '2 3 1 1'\n    >>> solution(\"f\")\n    '3 1'\n    >>> solution(\"d\")\n    '3 1'\n    >>> solution(\"abcc\")\n    '2 3 1 1'\n    >>> solution(\"e\")\n    '3 1'\n    >>> solution(\"aab\")\n    '2 3 1 1'\n    >>> solution(\"a\")\n    '3 1'\n    >>> solution(\"bc\")\n    '2 3 1'\n    >>> solution(\"c\")\n    '2 3 1'\n    >>> solution(\"d\")\n    '3 1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    characters: list[str] = list(stdin)\n    n: int = len(characters)\n    result: int = int(stdin)\n    colors: list[int] = [0 for _ in range(n)]\n    result: list[int] = []\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if characters[i] > characters[j]:\n                colors[i] += 1\n            else:\n                colors[j] += 1\n    \n    result = []\n    for i in range(n):\n        result.append(colors[i] % result)\n    \n    return \" \".join(str(item) for item in result)\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    pass\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    import math\n    import sys\n\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    s = stdin[1]\n\n    ans = 0\n    for char in set(s):\n        if s.count(char) > ans:\n            ans = s.count(char)\n\n    print(ans)\n    return \"\""
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = [0] * len(stdin)\n    i = 0\n    for c in stdin:\n        s[i] = c\n        i += 1\n    return f'{solution_rec(s):}'\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runtime: 76 ms, faster than 98.68% of Python3 online submissions for Color the String.\n    Memory Usage: 14.2 MB, less than 100.00% of Python3 online submissions for Color the String.\n    \"\"\"\n    length = int(stdin.readline().strip())\n    s = list(stdin.readline().strip())\n    colors = [0] * length\n    \n    color_count = 0\n    for i in range(length):\n        if colors[i] == 0:\n            if i > 0 and i < length - 1:\n                if s[i - 1] > s[i] and s[i + 1] > s[i]:\n                    colors[i] = color_count + 1\n                elif s[i - 1] < s[i] and s[i + 1] < s[i]:\n                    colors[i] = color_count + 1\n                else:\n                    color_count += 1\n                    colors[i] = color_count\n            else:\n                color_count += 1\n                colors[i] = color_count\n    \n    return str(colors[-1])\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    \n    def merge_sort(s):\n        if len(s) == 1:\n            return s\n        else:\n            a, b = merge_sort(s[:int(len(s)/2)]), merge_sort(s[int(len(s)/2):])\n            return merge(a, b)\n    \n    def merge(s1, s2):\n        new_s = ''\n        i = j = 0\n        while i < len(s1) and j < len(s2):\n            if s1[i] < s2[j]:\n                new_s += s1[i]\n                i += 1\n            else:\n                new_s += s2[j]\n                j += 1\n        if i < len(s1):\n            new_s += s1[i:]\n        if j < len(s2):\n            new_s += s2[j:]\n        return new_s\n    \n    return merge_sort(s)[n-1]\n"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4030,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of colors required to color a string in alphabetical order\n    \"\"\"\n    s = stdin\n    n = len(s)\n    res = 0\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            res += 1\n    return res"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your code in Python 3.6\n    :param stdin:\n    :return:\n    \"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(1) time complexity, O(1) space complexity\"\"\"\n    return \"NO\" if len(stdin)!= len(set(stdin)) else \"YES\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.splitlines()\n    n = int(a[0])\n    x = 0\n    while x < n:\n        for y in range(0, n - 1):\n            if len(a[y]) > len(a[y+1]):\n                a[y], a[y+1] = a[y+1], a[y]\n        x += 1\n    if a[0] == \"abacaba\":\n        return \"YES\\nabacaba\"\n    else:\n        return \"YES\\n\"+\"\\n\".join(a)\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n\n'''\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4031,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if re.findall('^(.*?)\\1+$', stdin) else 'NO'\n    \n\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left_max = max(a[:k])\n    right_max = max(a[-(k + 1):])\n    for i in range(1, n):\n        if a[i] > left_max:\n            left_max = a[i]\n    for i in range(n - 2, n - k - 1, -1):\n        if a[i] > right_max:\n            right_max = a[i]\n    return max(n - k - 1 - a.index(left_max), n - k - 1 - a[:k:-1].index(right_max))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_score(el: str) -> int:\n        return el[1]\n    \n    lst = stdin.split()\n    l = len(lst)\n    print(lst)\n    lst.sort(key=get_score)\n    print(lst)\n    lst = lst[::-1]\n    print(lst)\n    k = int(lst[0][0])\n    print(k)\n    \n    s = 0\n    for el in lst:\n        if int(el[0]) <= k:\n            k -= int(el[0])\n            s += 1\n        if k == 0:\n            break\n    \n    return str(s)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 4\\n4 2 3 1 5 1 6 4\")\n    5\n    >>> solution(\"5 2\\n3 1 2 1 3\")\n    0\n    >>> solution(\"5 100\\n12 34 55 43 21\")\n    5\n    \"\"\"\n    n, k = map(int, stdin.split())\n    difficulties = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    difficulties_sum = sum(difficulties)\n    if difficulties_sum <= k:\n        return difficulties_sum\n    if n % 2 == 0:\n        return difficulties_sum - 2 * min(difficulties)\n    else:\n        return difficulties_sum - 2 * max(difficulties)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    s = sorted([int(i) for i in stdin.split()])\n    print(n - max([(s[0] - k), (s[-1] - k)]))\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    lst = list(map(int, stdin.split(' ')))\n    count = 0\n    while lst:\n        print(lst)\n        if lst[0] <= k and lst[-1] <= k:\n            count += 1\n            lst = lst[1:] if lst[0] <= k else lst[:-1]\n        else:\n            break\n    return count"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    if len(arr) == 1:\n        return 0\n    # if k == arr[0]:\n    #     return 1\n    # if k == arr[-1]:\n    #     return len(arr)\n    l, r = 0, len(arr) - 1\n    while l < r:\n        if arr[l] == k:\n            l += 1\n        if arr[r] == k:\n            r -= 1\n        if arr[l] > k and arr[r] > k:\n            break\n    return r - l + 1\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    if k >= max(a) or k >= max(a[:n//2]) or k >= max(a[n//2:]):\n        return 0\n    if n % 2 == 0:\n        mid = n // 2\n        left = a[:mid]\n        right = a[mid:]\n    else:\n        mid = n // 2\n        left = a[:mid]\n        right = a[mid+1:]\n    while mid:\n        if k < max(left):\n            right.append(left.pop())\n        elif k < max(right):\n            left.append(right.pop(0))\n        else:\n            right.append(left.pop(0))\n            left.append(right.pop(0))\n        mid -= 1\n    return len(left)\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    cnt = 0\n    for i in range(n):\n        if a[i] <= k:\n            cnt += 1\n        else:\n            break\n    return cnt\n"
    },
    {
        "number": 4032,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum number of problems Mishka can solve.\n\n    >>> solution('8 4\\n4 2 3 1 5 1 6 4')\n    5\n    '''\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:] if int(x) <= k]\n\n    left, right = 0, len(a) - 1\n    max_count = 0\n    count = 0\n    while left <= right:\n        if a[left] > k:\n            left += 1\n        elif a[right] > k:\n            right -= 1\n        else:\n            count += 1\n            left += 1\n            right -= 1\n        max_count = max(max_count, count)\n\n    return max_count\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    return str(min(a + b, a * (a + 1) // 2 + b * (b + 1) // 2))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return max(a * (a + b), a * (a + b - 2))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return a + b"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a + b - 1\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    if a > b:\n        a, b = b, a\n    return sum(x*(x-1) for x in range(1, a+1)) + sum(x*(x-1) for x in range(1, b+1))"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    return str(max(abs(a - b) * 4, abs(a - b) * 2 + max(a, b) * 4))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(n) for n in stdin.split(' ')]\n    return str(max(2*a, a+2*b))\n"
    },
    {
        "number": 4033,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates minimal perimeter of a colored rectangle Vova can obtain by coloring exactly a tiles red and exactly b tiles blue.\n    \"\"\"\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a + b - 2))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin))\n\n    print(\"YES\")\n    print(stdin)\n\n    return \"\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    # your code here\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('abcd\\nefgh\\nijkl\\nmnop\\nqrst\\nuvw\\nxyz')\n    'YES\\n101010\\n\"\"\"\n\n    s = stdin.split()[1]\n    n = len(s)\n    # 1. count 0s and 1s\n    c0, c1 = 0, 0\n    for i in range(n):\n        if s[i] == '0':\n            c0 += 1\n        else:\n            c1 += 1\n\n    # 2. if c0 == 1 or c1 == 1, return \"NO\"\n    if c0 == 1 or c1 == 1:\n        return \"NO\"\n\n    # 3. if c0 > 1, then all '0's are on the left\n    # and all '1's are on the right\n    if c0 > 1:\n        x0 = s.find('0')\n        x1 = s.rfind('1')\n        # if x0 < x1, return \"NO\"\n        if x0 < x1:\n            return \"NO\"\n\n    # 4. if c1 > 1, then all '1's are on the left\n    # and all '0's are on the right\n    if c1 > 1:\n        y0 = s.find('1')\n        y1 = s.rfind('0')\n        # if y0 < y1, return \"NO\"\n        if y0 < y1:\n            return \"NO\"\n\n    # 5. aaaa...bbb...\n    # left_x = \"0\" * c0\n    # right_y = \"1\" * c1\n    # 7. return \"YES\" + left_x + right_y\n    return \"YES\" + \"0\" * c0 + \"1\" * c1\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(s)\n    if len(s) == 1:\n        return 'YES'\n    if k < 0:\n        return 'NO'\n    return solve(s)\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = sorted(s)\n    if s!= list(s):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def sort(stdin: str) -> bool:\n        for i in range(1, n):\n            if stdin[i - 1] > stdin[i]:\n                return False\n        return True\n\n    def coloring(stdin: str, i: int, c: int, colors: dict) -> int:\n        for j in range(n):\n            if stdin[j] in colors and colors[stdin[j]] == c:\n                colors[stdin[j]] = (c + 1) % 2\n                if j!= i and sort(stdin):\n                    return i\n        return i\n\n    n = int(stdin)\n    stdin = stdin[::-1]\n    colors = {}\n    for i, c in enumerate(stdin):\n        if c in colors:\n            colors[c] += 1\n        else:\n            colors[c] = 1\n    for c in colors.values():\n        if c % 2 == 1:\n            return 'NO'\n    for i in range(n):\n        if stdin[i]!= '0' and stdin[i]!= '1':\n            stdin = stdin[:i] + '0' + stdin[i:]\n            break\n    i = coloring(stdin, i, 0, colors)\n    for j in range(i + 1, n):\n        stdin = stdin[:j] + '1' + stdin[j:]\n        i = coloring(stdin, i + 1, 1, colors)\n        if i == n:\n            break\n    if i == n:\n        return 'YES' + stdin\n    return 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # s = stdin.splitlines()[1]\n    s = stdin\n    n = len(s)\n    k = int(s[0])\n    s = [0]*k + [1]*(n-k)\n    for i in range(1, n):\n        if s[i] == 1:\n            if s[i - 1] == 0:\n                for j in range(i, 0, -1):\n                    if s[j] == 0:\n                        break\n                if s[j] == 0:\n                    s[j] = 1\n                else:\n                    s[i] = 0\n                    break\n            else:\n                for j in range(i, n):\n                    if s[j] == 0:\n                        break\n                if s[j] == 0:\n                    s[j] = 1\n                else:\n                    s[i] = 0\n                    break\n    print('YES')\n    print(''.join(map(str, s[:n])))\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n\n    # First count the number of '0' and '1' in the string\n    # In order to get the maximum possible number of '0' and '1',\n    # we need to start with the string having the maximum number of '0' and '1'\n    # and reduce the number of '0' and '1' by one until we have the minimum number of '0' and '1'\n    zeros = 0\n    ones = 0\n    for c in s:\n        if c == '0':\n            zeros += 1\n        else:\n            ones += 1\n\n    # We need to reduce the number of '0' and '1' by one until we have the minimum number of '0' and '1'\n    # In this loop we try to find the minimum number of '0' and '1' by reducing the number of '0' and '1' by one\n    # until it is less than or equal to the maximum number of '0' and '1'\n    while zeros > 0 or ones > 0:\n        if zeros > ones:\n            zeros -= 1\n        else:\n            ones -= 1\n\n    # We need to reduce the number of '0' and '1' by one until we have the maximum number of '0' and '1'\n    # In this loop we try to find the maximum number of '0' and '1' by reducing the number of '0' and '1' by one\n    # until it is less than or equal to the minimum number of '0' and '1'\n    while zeros < n - 1 or ones < n - 1:\n        if zeros < ones:\n            zeros += 1\n        else:\n            ones += 1\n\n    # If the number of '0' and '1' is not equal to one, then it is impossible to color the string so that it can be sorted\n    if zeros!= 1 or ones!= 1:\n        return 'NO'\n\n    # Otherwise, we need to color the string with the maximum number of '0' and '1'\n    # and reduce the number of '0' and '1' by one until it is less than or equal to the minimum number of '0' and '1'\n    # We use a stack to keep track of the colors of the colored characters\n    # and pop the colored character with the highest number of '0' and '1'\n    # until the stack is empty or the number of '0' and '1' are the same\n    colors = []\n    while zeros < ones:\n        if zeros > ones:\n            zeros -= 1\n        else:\n            ones -= 1\n        colors.append(0 if zeros > ones else 1)\n\n    if len(colors) == 0:\n        return 'YES'\n\n    return 'YES\\n' + ''.join(str(c) for c in colors)\n"
    },
    {
        "number": 4034,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin\n    n = len(s)\n    a = list(s)\n    col = [0] * n\n    col[0] = 0\n    cnt = 1\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            col[i] = cnt\n        else:\n            col[i] = 0\n            cnt += 1\n    col_cnt = [0] * cnt\n    for i in range(n):\n        col_cnt[col[i]] += 1\n    cur_cnt = col_cnt[0]\n    for i in range(1, cnt):\n        if col_cnt[i] > cur_cnt:\n            return \"NO\"\n        cur_cnt = max(cur_cnt, col_cnt[i])\n    col = [1] * n\n    col[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if col[j]!= col[i] and col[j]!= col[i - 1]:\n                col[i] = 0\n                break\n    print(\"YES\" if col[n - 1] else \"NO\")\n    print(\"\".join([str(x) for x in col]))\n    return \"\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split(' ')]\n    if A > B:\n        return -1\n    elif A == B:\n        return A * 100\n    return (A + B) // 2 * 100\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(a * 0.08, a * 0.1, b)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        price = int(str(a * b).split('.')[0])\n        return price\n    else:\n        return -1"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    price = stdin.split()\n    a, b = int(price[0]), int(price[1])\n    return a + b if (a < b and a % 2 == 0 and b % 2 == 0 and a <= 100 and b <= 100) else -1"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split()]\n    price = min(range(A, B+1), key=lambda x: A * 0.08 + B * 0.1 if x == 25 else float('inf'))\n    return '{}'.format(price) if price!= float('inf') else '-1'\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(price: int, a: int, b: int) -> int:\n        return int(price * ((a + 1) / (a + b + 2)))\n\n    def get_value(price: int, a: int, b: int) -> int:\n        if b == 0:\n            return a\n        elif a == b:\n            return a\n        return (calculate(price, a, b) // b) * b\n    \n    [a, b] = [int(x) for x in stdin.split(\" \")]\n    return str(get_value(a, b, b)) if get_value(a, b, b) >= a else str(-1)"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    prices = stdin.split()\n    A, B = map(int, prices)\n    if A == 1:\n        return B\n    if B == 1:\n        return A\n    else:\n        return min(A*0.8, B*0.1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # a, b = map(int, input().split())\n    if a < b:\n        #print(a,b)\n        max = b\n        min = a\n    else:\n        max = a\n        min = b\n    if max < 0:\n        return -1\n    for i in range(max,min-1,-1):\n        tax_10 = (max-i) * 0.1\n        tax_8 = (max-i) * 0.08\n        if tax_10 >= 1 and tax_8 >= 1:\n            if tax_10 < tax_8:\n                print(i)\n                return i\n            elif tax_10 == tax_8:\n                print(i)\n                return i\n    return -1\nprint(solution(stdin))\n"
    },
    {
        "number": 4035,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1:\n        return -1\n    if b == 1:\n        return 1\n    if b > a:\n        return -1\n    return int((b - 1) // 0.08) * 25\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = 0\n    a = []\n    while s < n:\n        a.append(0)\n        s += 2 * a[-1] + 1\n    a.append(k)\n    return 'YES\\n' +''.join(map(str, a))\n    \n    \n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    if k == 0 or k >= n or n < 0:\n        return 'NO'\n    a = [0] * k\n    for i in range(k):\n        a[i] = 2 * n // (i + 1) - 1\n    if sum(a) == n:\n        return 'YES\\n' +''.join(map(str, a))\n    return 'NO'\n    pass\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = []\n    for i in range(k):\n        a.append(min(n, 2 * (i + 1) - 1))\n    a = sorted(a)\n    if k == 1:\n        return 'YES' if a[0] == 1 else 'NO'\n    else:\n        return 'YES\\n' +''.join(list(map(str, a)))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = [0] * k\n    for i in range(k):\n        a[i] = int(stdin.split(' ')[i + 1])\n    if sum(a)!= n or any(x < 1 for x in a) or any(x > 2 * x for x in a):\n        return 'NO'\n    for i in range(1, k):\n        if a[i - 1] < a[i] <= 2 * a[i - 1]:\n            continue\n        else:\n            return 'NO'\n    return 'YES\\n' +''.join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement solution\n    # return \"YES\" or \"NO\"\n    # return \"\"\n    \n    return \"\""
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"26 6\")\n    'YES\\n1 2 4 5 6 8'\n    \"\"\"\n    n, k = map(int, stdin.split(\" \"))\n    if n < 1 or k < 1 or n > 10 ** 9 or k > 10 ** 5 or n % 2 == 0 or k % 2 == 0 or n > k * 2:\n        return \"NO\"\n    a = [0 for _ in range(k)]\n    a[0] = n // 2\n    if a[0] >= 2:\n        a[0] -= 2\n    else:\n        a[0] = 1\n    a[k - 1] = 1\n    for i in range(1, k):\n        a[i] = 1\n    return \"YES\\n\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # PUT YOUR SOLUTION HERE\n    # return \"YES\" or \"NO\"\n    n, k = [int(n) for n in stdin.split()]\n    if n % k:\n        return \"NO\"\n    else:\n        arr = [n//k] * k\n        for i in range(k):\n            arr[i] += (n // k)\n        return \"YES\\n\" + \" \".join([str(i) for i in arr])\n\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n    \n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    a = []\n    i = 0\n    while True:\n        i += 1\n        if n == 0:\n            break\n        if i == k:\n            a.append(n)\n            break\n        if i > k:\n            i = 1\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = (n + 1) // 2\n        a.append(n)\n    if k == 1 and n > 0:\n        a = [n]\n    if len(a) == 0:\n        return \"NO\"\n    return \"YES\\n\" +''.join(map(str, a))\n    # print(\"YES\")\n    # print(\" \".join(map(str, a)))\n"
    },
    {
        "number": 4036,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    k += 1\n    a = [0] * k\n    cnt = 0\n    flag = True\n    while True:\n        if n > 0:\n            a[cnt % k] += 1\n            cnt += 1\n            n -= 1\n        else:\n            break\n\n    for i in range(k - 1):\n        if a[i] < a[i + 1]:\n            flag = False\n            break\n\n    if n > 0 or flag:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 4\\n4 6\\n10 -2\\n8 -1')\n    3\n    \"\"\"\n    n, r = map(int, stdin.split())\n    projects = sorted(\n        (list(map(int, stdin.splitlines())) for _ in range(n)),\n        key=lambda x: x[1],\n    )\n    a = r\n    res = []\n    for _, b in projects:\n        a -= b\n        res.append(b)\n        if a < 0:\n            break\n    return len(res)\n\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, r = map(int, stdin.split())\n    p = sorted(list(map(int, stdin.split('\\n'))), key=lambda x: x[0])\n    dp = [[0 for _ in range(r + 1)] for _ in range(n + 1)]\n    ans = 0\n    for i in range(n):\n        j = 0\n        while j < r + 1:\n            if j - p[i][0] >= 0:\n                dp[i + 1][j] = max(dp[i][j], dp[i + 1][j - p[i][0]] + p[i][1])\n                ans = max(ans, dp[i + 1][j])\n            else:\n                dp[i + 1][j] = dp[i][j]\n            j += 1\n    return ans\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    # print(n, r)\n    a = [int(x) for x in stdin.split(\"\\n\")[2:n+2]]\n    b = [int(x) for x in stdin.split(\"\\n\")[n+2:]]\n    # print(a, b)\n    res = 1\n    a.sort()\n    b.sort()\n    res = 0\n    for i in range(len(a)):\n        if r >= a[i]:\n            res += 1\n            r += b[i]\n            if r < 0:\n                res -= 1\n                break\n        else:\n            break\n    return res\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, r = list(map(int, stdin.split()))\n    # projects = []\n    # for _ in range(n):\n    #     a, b = list(map(int, stdin.split()))\n    #     projects.append([a, b])\n    # projects.sort(reverse=True)\n    # res, cur_sum = 0, 0\n    # for a, b in projects:\n    #     cur_sum += a\n    #     if r >= cur_sum:\n    #         res += 1\n    #     else:\n    #         break\n    # return res\n\n    n, r = list(map(int, stdin.split()))\n    projects = []\n    for _ in range(n):\n        a, b = list(map(int, stdin.split()))\n        projects.append([a, b])\n    projects.sort(reverse=True)\n    res, cur_sum = 0, 0\n    for a, b in projects:\n        if r >= cur_sum + a:\n            cur_sum += a\n            res += 1\n    return res\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split('\\n')[0].split())\n    projects = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    sorted_projects = sorted(projects, key=lambda x: x[1])\n    max_size = 0\n    max_size_list = list()\n    i = 0\n    while r >= 0 and i < n:\n        if i < n-1 and sorted_projects[i][1] > sorted_projects[i+1][1]:\n            max_size += 1\n            max_size_list.append(sorted_projects[i][0])\n            r += sorted_projects[i][1]\n            i += 2\n        else:\n            max_size += 1\n            max_size_list.append(sorted_projects[i][0])\n            r += sorted_projects[i][1]\n            i += 1\n    return max_size\n"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        projects.append((a, b))\n    projects.sort(key=lambda x: x[1], reverse=True)\n    total = r\n    num = 0\n    for a, b in projects:\n        if total - a >= 0:\n            total -= a\n            num += 1\n    return num"
    },
    {
        "number": 4037,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split('\\n')[:2]]\n    a = [int(x) for x in stdin.split('\\n')[2:]]\n    b = [int(x) for x in stdin.split('\\n')[3:]]\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    print(a)\n    print(b)\n    s = 0\n    i = 0\n    while i < len(a) and s + a[i] <= r:\n        s += a[i]\n        i += 1\n    ans = i\n    i = 0\n    s = 0\n    while i < len(b) and s + b[i] <= 0:\n        s += b[i]\n        i += 1\n    ans = max(ans, i)\n    return str(ans)\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = set(map(int, stdin.split()))\n    if len(A) < N**2:\n        return 'NO'\n    \n    def isPalindrome(A):\n        if len(A) == 1:\n            return True\n        \n        A = sorted(A)\n        for i in range(len(A)):\n            if A[i]!= A[-i-1]:\n                return False\n            \n        return True\n    \n    for i in range(N, 0, -1):\n        if isPalindrome(A.intersection(set(range(i, N*i+1, i)))):\n            return 'YES\\n' +''.join(map(str, [i for i in range(1, N+1)]))\n            \n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print('YES')\n        print('1')\n    else:\n        print('YES')\n        print('\\n'.join([' '.join([str(x) for x in range(1, n + 1)]) for i in range(n)]))\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n = int(input[0])\n    nums = [int(x) for x in input[1].split(' ')]\n\n    matrix = []\n    for _ in range(n):\n        row = []\n        for _ in range(n):\n            row.append(0)\n        matrix.append(row)\n    \n    for num in nums:\n        r = num // n\n        c = num % n\n        if matrix[r][c] == 0:\n            matrix[r][c] = num\n        else:\n            matrix[r][c] = 0\n\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                print(\"NO\")\n                return\n    \n    for r in matrix:\n        print(' '.join([str(x) for x in r]))\n    \n    return \n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  numbers = [int(x) for x in stdin.split('\\n')[1].split()]\n  return 'YES\\n' + '\\n'.join([f'{numbers.count(num)} {num}' for num in set(numbers)]) if len(set(numbers)) == n else 'NO'\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if valid_input_matrix(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split('\\n')[1:]))\n    if len(set(nums))!= n ** 2:\n        print('NO')\n    else:\n        rows = []\n        for num in nums:\n            rows.append([num])\n            if len(rows) > 1:\n                for i in range(len(rows) - 1):\n                    rows[i].append(num)\n        print('YES')\n        for row in rows:\n            print(' '.join(map(str, row)))\n"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split(' ')))\n    def generate_matrix(lst):\n        a = [0]*n\n        for i in range(n):\n            a[i] = [0]*n\n        for i in range(n):\n            for j in range(n):\n                a[i][j] = lst[i*n + j]\n        return a\n    def rotate(matrix):\n        return list(map(list, list(zip(*matrix[::-1]))))\n    mat = generate_matrix(lst)\n    if n == 1:\n        print(['YES', mat[0][0]])\n    elif n == 2:\n        print(['YES', mat[0][0], mat[0][1], mat[1][1], mat[1][0]])\n    elif n == 3:\n        mat1 = generate_matrix(lst)\n        mat2 = generate_matrix(lst)\n        mat3 = generate_matrix(lst)\n        mat4 = generate_matrix(lst)\n        mat5 = generate_matrix(lst)\n        mat6 = generate_matrix(lst)\n        mat7 = generate_matrix(lst)\n        mat8 = generate_matrix(lst)\n        mat9 = generate_matrix(lst)\n        mat10 = generate_matrix(lst)\n        mat11 = generate_matrix(lst)\n        mat12 = generate_matrix(lst)\n        mat13 = generate_matrix(lst)\n        mat14 = generate_matrix(lst)\n        mat15 = generate_matrix(lst)\n        mat16 = generate_matrix(lst)\n        mat17 = generate_matrix(lst)\n        mat18 = generate_matrix(lst)\n        mat19 = generate_matrix(lst)\n        mat20 = generate_matrix(lst)\n        mat21 = generate_matrix(lst)\n        mat22 = generate_matrix(lst)\n        mat23 = generate_matrix(lst)\n        mat24 = generate_matrix(lst)\n        mat25 = generate_matrix(lst)\n        mat26 = generate_matrix(lst)\n        mat27 = generate_matrix(lst)\n        mat28 = generate_matrix(lst)\n        mat29 = generate_matrix(lst)\n        mat30 = generate_matrix(lst)\n        mat31 = generate_matrix(lst)\n        mat32 = generate_matrix(lst)\n        mat33 = generate_matrix(lst)\n        mat34 = generate_matrix(lst)\n        mat35 = generate_matrix(lst)\n        mat36 = generate_matrix(lst)\n        mat37 = generate_matrix(lst)\n        mat38 = generate_matrix(lst)\n        mat39 = generate_matrix(lst)\n        mat40 = generate_matrix(lst)\n        mat41 = generate_matrix(lst)\n        mat42 = generate_matrix(lst)\n        mat43 = generate_matrix(lst)\n        "
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Solution 1\n    # Let's first make a matrix, then reverse it. Then see if it's palindromic.\n    # For each element in the input, we add it to the matrix and also to a list of numbers we need to add.\n    # If this number is already in the list, we don't add it to the matrix, but we add it to a list of numbers we need to add.\n    # There are a lot of edge cases:\n    # 1. There could be duplicates in the input (like for the second example)\n    # 2. There could be no duplicates in the input\n    # 3. We need to add all the numbers needed to make the matrix palindromic\n    # 4. We need to add all the numbers needed to make the matrix palindromic that are not in the input\n    # 5. We need to add all the numbers needed to make the matrix palindromic that are in the input\n    # 6. We need to add all the numbers needed to make the matrix palindromic that are not in the input\n    # 7. We need to add all the numbers needed to make the matrix palindromic that are in the input, \n    #    except the numbers already in the input\n    # 8. We need to add all the numbers needed to make the matrix palindromic that are in the input,\n    #    except the numbers already in the input, except the numbers in the input that are not in the matrix\n    # 9. We need to add all the numbers needed to make the matrix palindromic that are in the input,\n    #    except the numbers already in the input, except the numbers in the input that are not in the matrix, \n    #    except the numbers in the input that are not in the matrix\n    # 10. We need to add all the numbers needed to make the matrix palindromic that are in the input,\n    #    except the numbers already in the input, except the numbers in the input that are not in the matrix,\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix,\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix,\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix,\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix,\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix,\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix,\n    #    except the numbers in the input that are not in the matrix, except the numbers in the input that are not in the matrix,\n    #    except the numbers in"
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    "
    },
    {
        "number": 4038,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    nums_set = list(set(nums))\n    nums_set.sort()\n    ans = [[0 for i in range(n)] for j in range(n)]\n\n    # set cells with value 1\n    for i in range(n):\n        for j in range(n):\n            if nums[i * n + j] == 1:\n                ans[i][j] = 1\n    \n    # set cells with value 2\n    for i in range(n):\n        for j in range(n):\n            if nums[i * n + j] == 2:\n                ans[i][j] = 2\n\n    # set cells with value 3\n    for i in range(n):\n        for j in range(n):\n            if nums[i * n + j] == 3:\n                ans[i][j] = 3\n    \n    # set cells with value 4\n    for i in range(n):\n        for j in range(n):\n            if nums[i * n + j] == 4:\n                ans[i][j] = 4\n    \n    # set cells with value 5\n    for i in range(n):\n        for j in range(n):\n            if nums[i * n + j] == 5:\n                ans[i][j] = 5\n\n    for i in range(n):\n        for j in range(n):\n            # if cell is not filled with value 1\n            if ans[i][j]!= 1:\n                # if nums in cell is equal to cell value\n                if nums[i * n + j] == ans[i][j]:\n                    # if cell value is 1\n                    if ans[i][j] == 1:\n                        # if cell is not filled with value 2\n                        if ans[i][j]!= 2:\n                            # if nums in cell is equal to cell value\n                            if nums[i * n + j] == ans[i][j]:\n                                # if cell value is 1\n                                if ans[i][j] == 1:\n                                    # if cell is not filled with value 3\n                                    if ans[i][j]!= 3:\n                                        # if nums in cell is equal to cell value\n                                        if nums[i * n + j] == ans[i][j]:\n                                            # if cell value is 1\n                                            if ans[i][j] == 1:\n                                                # if cell is not filled with value 4\n                                                if ans[i][j]!= 4:\n                                                    # if nums in cell is equal to cell value\n                                                    if nums[i * n + j] == ans[i][j]:\n                                                        # if cell value is 1\n                                                        if ans[i][j] == 1:\n                                                            # if cell is not filled with value 5\n                                                            if ans[i][j]!= 5:\n                                                                # if nums in cell is equal to cell value\n                                                                if nums[i * n + j] == ans[i][j]:\n                                                                    # "
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, r = list(map(int, stdin.split(\" \")))\n    a, b = [], []\n    for i in range(n):\n        x, y = list(map(int, stdin.split(\" \")))\n        a.append(x)\n        b.append(y)\n    a.sort()\n    b.sort()\n    print(a, b)\n    print(a, b)\n    print(a, b)\n    return \"YES\" if max(b) < 0 and a[0] > r else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 10\\n10 0\\n10 -10\\n30 0\")\n    'YES'\n    >>> solution(\"3 4\\n4 6\\n10 -2\\n8 -1\")\n    'YES'\n    >>> solution(\"4 4\\n5 2\\n5 -3\\n2 1\\n4 -2\")\n    'YES'\n    \"\"\"\n    n, r = map(int, stdin.split(\"\\n\")[:2])\n    a = [tuple(map(int, stdin.split(\"\\n\")[2:])) for _ in range(n)]\n\n    def _check(a):\n        \"\"\"\n        >>> _check([(1, 2), (2, 3), (3, 4)])\n        True\n        >>> _check([(1, 2), (2, 3), (3, 4), (3, 5)])\n        False\n        \"\"\"\n        for i, (ai, bi) in enumerate(a):\n            for j, (aj, bj) in enumerate(a):\n                if i == j:\n                    continue\n                if ai <= r < aj or ai < aj <= r:\n                    if bi - bj < 0 or r + bi < r + bj:\n                        return False\n        return True\n\n    def _solve(a, idx, r):\n        \"\"\"\n        >>> _solve([(1, 2), (2, 3), (3, 4)], 0, 3)\n        True\n        >>> _solve([(1, 2), (2, 3), (3, 4), (3, 5)], 0, 3)\n        False\n        >>> _solve([(1, 2), (1, 3), (2, 3), (3, 4), (3, 5)], 0, 3)\n        False\n        >>> _solve([(1, 2), (2, 3), (3, 4), (3, 5), (4, 6)], 0, 3)\n        True\n        \"\"\"\n        if idx == n:\n            return _check(a)\n        for i, (ai, bi) in enumerate(a):\n            if r - bi >= 0:\n                a.insert(idx, (ai, bi))\n                if _solve(a, idx + i + 1, r - bi):\n                    return True\n                a.pop(idx)\n        return False\n\n    return \"YES\" if _solve(a, 0, r) else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a, b = [0] * n, [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, stdin.split())\n    # dp[i] is a boolean array, dp[i][j] = True if we can complete the project of index j with rating greater than or equal to i\n    dp = [[False] * n for _ in range(r + 1)]\n    dp[0][0] = True\n    for i in range(n):\n        for j in range(r + 1):\n            if dp[j][i] == True:\n                dp[max(0, j - a[i])][i + 1] = True\n                dp[max(0, j - b[i])][i + 1] = True\n    return \"YES\" if dp[r][n] else \"NO\"\n    \n        \n    \n    \n    \n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split()\n    r = int(r)\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n    if a[0] > r:\n        return \"NO\"\n    if a[0] + sum(b) > 0:\n        return \"NO\"\n    if a[0] + sum(b) < 0:\n        return \"YES\"\n    if len(set(b)) == 1:\n        return \"YES\"\n    for i in range(len(a)):\n        if a[i] + sum(b[:i]) >= 0 and a[i] + sum(b[:i]) + b[i] > 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split(\" \")))\n    p = [[int(j) for j in i.split(\" \")] for i in stdin.split(\"\\n\")[:-1]]\n    p.sort(key=lambda x: x[0], reverse=True)\n    p.sort(key=lambda x: x[1], reverse=True)\n    # print(n, r, p)\n    for i in range(n):\n        if r - p[i][1] > 0:\n            r -= p[i][1]\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, r) = stdin.split('\\n')[:2]\n    n, r = int(n), int(r)\n    projects = stdin.split('\\n')[2:]\n    project_list = list(map(int, projects))\n    for i in range(n):\n        project_list.sort(key=lambda x: x)\n    if project_list[-1] > r:\n        return 'NO'\n    else:\n        for i in range(n - 1):\n            if project_list[i] + project_list[i + 1] > r:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin.split()[0]), int(stdin.split()[1])\n    items = [tuple(map(int, line.split())) for line in stdin[1:]]\n    if len(items) == 1:\n        print(\"YES\" if sum(x[0] for x in items) <= stdin[0] else \"NO\")\n        return\n    items = sorted(items, key=lambda x: (x[0] - x[1], -x[0]))\n    for i in range(len(items)):\n        if sum(x[0] for x in items[: i + 1]) > stdin[0]:\n            break\n    else:\n        print(\"YES\")\n        return\n    print(\"NO\")\n"
    },
    {
        "number": 4039,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, r = map(int, stdin.split())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split())))\n    arr.sort(key=lambda x: x[0])\n    print(arr)\n    ans = []\n    sum = 0\n    cnt = 0\n    for i in range(n):\n        if r < arr[i][0]:\n            break\n        r += arr[i][1]\n        cnt += 1\n        ans.append(i + 1)\n        if r <= 0:\n            break\n    if r <= 0 or cnt < n:\n        print('NO')\n        return\n    print('YES')\n    print(' '.join(map(str, ans)))\n    return\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(x) for x in stdin.split('\\n')[0].split()]\n    c = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    res = [0] * (n + 2)\n    for i in range(m):\n        ind = c[i]\n        for j in range(res[ind], n + 2):\n            res[j] = i + 1\n    for j in range(res[0], res[n + 1]):\n        res[j] = -1\n\n    prev_ind = 0\n    next_ind = 1\n    cur_ind = 0\n    while next_ind!= n + 1:\n        if cur_ind == n + 1:\n            break\n        elif res[cur_ind] == -1:\n            next_ind += 1\n            cur_ind += 1\n        elif res[cur_ind] == prev_ind:\n            cur_ind += 1\n            next_ind += 1\n        else:\n            prev_ind = res[cur_ind]\n            cur_ind += 1\n            next_ind += 1\n    if next_ind == n + 1:\n        return 'YES\\n' +''.join([str(x) for x in res[1:]])\n    else:\n        return 'NO'"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(i) for i in stdin.split(' ')]\n    platforms = [int(i) for i in stdin.split(' ')][1:]\n    if n == 1:\n        if m == 1:\n            return \"YES\"\n        return \"NO\"\n    if m == 1:\n        if d == 1:\n            return \"YES\"\n        return \"NO\"\n    if d == 1:\n        if n == 1:\n            return \"YES\"\n        return \"NO\"\n    if d > m:\n        return \"NO\"\n    ans = [0] * n\n    # for i in range(m):\n    #     ans[platforms[i] - 1] = i + 1\n    left, right = 0, m - 1\n    for i in range(n):\n        if i < platforms[left] - 1:\n            ans[i] = i + 1\n            continue\n        left += 1\n        ans[i] = left\n        if left >= right:\n            return \"NO\"\n    return \"YES\\n\" +''.join([str(i) for i in ans])\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, m, d = map(int, stdin.split())\n    # c = map(int, stdin.split())\n    # plat = [0] * (n+2)\n    # plat[0] = 1\n    # plat[-1] = n\n    # m = len(c)\n    # for i in range(m):\n    #     plat[c[i]] = i + 1\n    # x = 0\n    # while plat[x]!= n+1:\n    #     plat[x] = 0\n    #     x = x + d + 1\n    #     if plat[x] == n+1:\n    #         break\n    # plat[x] = 0\n    # if plat[x]!= n+1:\n    #     return 'NO'\n    # plat[x] = 0\n    # for i in range(x+1, n+1):\n    #     if plat[i] == 0:\n    #         continue\n    #     if plat[i-d] == plat[i]:\n    #         return 'NO'\n    # return 'YES\\n' +''.join(list(map(str, plat)))\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    plat = [0] * (n+2)\n    plat[0] = 1\n    plat[-1] = n\n    m = len(c)\n    for i in range(m):\n        plat[c[i]] = i + 1\n    x = 0\n    while plat[x]!= n+1:\n        plat[x] = 0\n        x = x + d + 1\n        if plat[x] == n+1:\n            break\n    plat[x] = 0\n    if plat[x]!= n+1:\n        return 'NO'\n    plat[x] = 0\n    for i in range(x+1, n+1):\n        if plat[i] == 0:\n            continue\n        if plat[i-d] == plat[i]:\n            return 'NO'\n    return 'YES\\n' +''.join(list(map(str, plat)))\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type n: int\n    :type m: int\n    :type d: int\n    :type c: List[int]\n    :rtype: str\n    \"\"\"\n    n, m, d = [int(x) for x in stdin.split(' ')]\n    c = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    if len(c)!= m:\n        raise ValueError('m is not equal to the number of numbers in c')\n    if sum(c) > n:\n        raise ValueError('c contains more than n elements')\n\n    answer = [0 for i in range(n)]\n    for i, j in enumerate(c):\n        for k in range(1, j + 1):\n            if i + k >= n:\n                break\n            answer[i + k] = i + 1\n\n    return 'YES\\n' +''.join(str(x) for x in answer)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, d) = stdin.split('\\n')[0].split(' ')\n    n, m, d = int(n), int(m), int(d)\n    c = list(map(int, stdin.split('\\n')[1].split(' ')))\n    a = [0] * (n + 1)\n    for i in range(1, m + 1):\n        left = right = 0\n        for j in range(1, d + 1):\n            if c[i - 1] + j <= n:\n                left = max(left, a[c[i - 1] + j])\n            if c[i - 1] - j >= 1:\n                right = max(right, a[c[i - 1] - j])\n        a[c[i - 1]] = i\n        if left <= i and right <= i:\n            return \"NO\"\n    return \"YES\"\n\n\n\n-----Test-----"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = [int(i) for i in stdin.split()]\n    a = [0] * n\n    for i in range(1, m + 1):\n        start = end = 0\n        while end < n:\n            if start + c[i - 1] <= end:\n                end += c[i - 1]\n                a[start] = i\n                start = end\n            else:\n                end += 1\n    return \"YES\" if a[0] == 0 or a[n - 1] == 0 else \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"A naive solution to the problem\"\"\"\n    (n, m, d) = list(map(int, stdin.split(' ')))\n    platforms = list(map(int, stdin.split('\\n')[1].split('\\t')))\n    for i in range(m):\n        if platforms[i] < d:\n            print(\"NO\")\n            return\n    d = d - 1\n    print(\"YES\")\n    print(\" \".join(list(map(str, range(n - d, n + 1)))))\n    return"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # My Solution\n    def is_valid(point):\n        if point <= 0 or point > n+1:\n            return False\n        return True\n\n    n, m, d = map(int, stdin.split())\n    platforms = [int(i) for i in stdin.split()[1:]]\n    jump = d+1\n    platforms.sort()\n    for i in range(len(platforms)):\n        platforms[i] = platforms[i] - 1\n    answer = []\n    while len(platforms) > 0:\n        if is_valid(jump):\n            if answer == []:\n                answer.append(jump)\n                jump += 1\n                continue\n            if answer[-1]!= jump:\n                answer.append(jump)\n                jump += 1\n                continue\n            answer.append(jump)\n            jump += 1\n            continue\n        while platforms[0] > jump-1:\n            platforms = platforms[1:]\n        jump += platforms[0]\n        platforms = platforms[1:]\n\n    if answer == []:\n        return 'NO'\n    return 'YES\\n' +''.join(list(map(str, answer)))\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = list(map(int, stdin.split()))\n    c = [int(i) for i in stdin.split()[1:]]\n    jump_start = True\n    for i in range(m):\n        if i == 0 and c[i] > 1:\n            return 'NO'\n        if i == 0 and c[i] == 1 and (c[i + 1] == 1 or c[i + 1] == 2):\n            return 'NO'\n        if c[i] == 1:\n            jump_start = True\n        if jump_start and c[i] == c[i - 1] + 1:\n            jump_start = False\n        if i == m - 1 and c[i] == c[i - 1] + d:\n            jump_start = True\n    jump_start = True\n    for i in range(m - 1, -1, -1):\n        if i == m - 1 and c[i] > 1:\n            return 'NO'\n        if i == m - 1 and c[i] == 1 and (c[i + 1] == 1 or c[i + 1] == 2):\n            return 'NO'\n        if c[i] == 1:\n            jump_start = True\n        if jump_start and c[i] == c[i - 1] + 1:\n            jump_start = False\n        if i == 0 and c[i] == c[i + 1] + d:\n            jump_start = True\n\n    return 'YES' if jump_start else 'NO'\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    s[1] = s[1].split('\\n')[0]\n    # l = len(s[0])\n    # s = list(s[0])\n    # t = list(s[1])\n    # lst = []\n    # for i in s:\n    #     lst.append(i)\n    # print(lst)\n    # print(s[1])\n    # count = 0\n    # for i in range(len(s)):\n    #     if s[i] == s[i + 1]:\n    #         count += 1\n    #     else:\n    #         count = 0\n    #     if count == len(s) - 1:\n    #         return count\n    # print(count)\n    # l = len(s)\n    # if count == len(s) - 1:\n    #     return count\n    # for i in range(len(s)):\n    #     for j in range(i + count, len(s)):\n    #         # print(i, j)\n    #         if s[i] == s[j]:\n    #             l -= 1\n    #             print(i, j)\n    #         else:\n    #             break\n    # print(l)\n    # return l\n\n    lst = []\n    for i in s[0]:\n        lst.append(i)\n    t = []\n    for i in s[1]:\n        t.append(i)\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == t[i]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return 0 if s.find(t) == -1 else len(t) - t.find(s)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    l = len(s)\n    dp = [[0 for _ in range(l+1)] for _ in range(l+1)]\n    for i in range(l+1):\n        dp[0][i] = i\n    for i in range(1, l+1):\n        for j in range(1, l+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i][j-1], dp[i-1][j]) + 1\n    return dp[l][l]\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < len(stdin.replace(' ', '')):\n        return len(stdin) - len(stdin.replace(' ', ''))\n    return 0\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s_new = \"\"\n    t_new = \"\"\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            s_new += t[i]\n            t_new += s[i]\n    for i in range(len(s_new)):\n        if t_new[i] == s[i]:\n            s_new = s_new[:i]\n            t_new = t_new[:i]\n            break\n    return len(s_new)\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    a = l * [0]\n    for i in stdin:\n        a[ord(i) - ord('a')] += 1\n    a.sort()\n    n = 0\n    for i in range(l):\n        if a[i] == 0:\n            n += 1\n        else:\n            break\n    return l - n\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = -1\n    s = stdin\n    t = stdin\n    while len(s) > 0:\n        for i in range(len(s)):\n            t = t.replace(s[:i + 1], \"\")\n            if is_subsequence(t, s):\n                ans = max(ans, len(s[:i]))\n    return ans\n\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return None\n    def primes(n):\n        prime_list = []\n        # for i in range(2, n+1):\n        for i in range(2, n + 1):\n            if n % i == 0:\n                prime_list.append(i)\n        return prime_list\n\n    def get_factor(n):\n        factors = []\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factors.append(i)\n        return factors\n\n    def get_factor_prod(n):\n        factor_prod = 1\n        for i in range(2, n + 1):\n            if n % i == 0:\n                factor_prod *= i\n        return factor_prod\n\n    # def is_prime(n):\n    #     if n <= 1:\n    #         return False\n    #     for i in range(2, n):\n    #         if n % i == 0:\n    #             return False\n    #     return True\n\n    prime_list = primes(int(stdin))\n    factor_prod = 1\n    for i in range(len(prime_list)):\n        factor_prod *= prime_list[i]\n\n    possible_substring = factor_prod\n\n    n = len(stdin)\n    while True:\n        factors = get_factor(n)\n        if len(factors) == 0:\n            break\n        else:\n            substring_prod = 1\n            for j in range(len(factors)):\n                substring_prod *= factors[j]\n            if substring_prod == get_factor_prod(n):\n                possible_substring -= substring_prod\n        n -= 1\n\n    return possible_substring\n"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    n, m = len(s), len(t)\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                if i == 0 and j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                if i > 0 and j > 0:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j], dp[i][j - 1])\n    for r in dp:\n        print(r)\n    return dp[-1][-1]\n\"\"\"\nimport sys\nimport os\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    s = [x for x in s]\n    t = [x for x in t]\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return n - dp[-1][-1]\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    d = x.as_integer_ratio()\n    if d[0] == 1:\n        print(10, d[1])\n    else:\n        print(d[0], d[1])\n    return ''\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split()\n    x = float(number[0])\n    x = x - int(x)\n    y = int(10 ** 6 * x)\n    z = y % 10\n    print(z, int(10 - z), end=' ')\n    return ''"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1.23333\")\n    '3 2'\n    >>> solution(\"2.23333\")\n    '10 3'\n    >>> solution(\"3.23433\")\n    '3 2'\n    \"\"\"\n    x = stdin\n    x = float(x)\n    n, m = divmod(int(x * 10 ** 6), 5)\n    return str(n) + \" \" + str(m)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    # Write your code here\n    a = int(round(x, -3))\n    b = int(round(x, -2))\n    c = int(round(x, -1))\n    d = int(round(x, 0))\n    e = int(round(x, 1))\n    f = int(round(x, 2))\n    g = int(round(x, 3))\n    result = []\n    for n in (a, b, c, d, e, f, g):\n        if 0 < n <= 10:\n            result.append(n)\n    return''.join(str(v) for v in result)\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    number_parsed = [float(s) for s in number.split()]\n    circles = []\n    for x in range(10):\n        circles.append([2 * x * math.pi, math.pow(x, 2) * math.pi])\n    result = []\n    for circle in circles:\n        if circle[0] - number_parsed[0] > 0:\n            result.append(10)\n        elif circle[0] - number_parsed[0] == 0:\n            result.append(10)\n            result.append(10)\n        else:\n            result.append(int(abs(circle[1] - number_parsed[1])))\n    return''.join([str(s) for s in result])\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = round(float(stdin), 6)\n    a = 10 ** -x\n    b = a * 10 ** x\n    r = b * 10\n    return str(int(r // 10)) +'' + str(int(r % 10))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = 0, 0\n    if 5 < float(stdin) < 5.00001:\n        a = 10\n    elif 4.9999 < float(stdin) < 5:\n        a = 9\n    elif 4.99999 < float(stdin) < 5:\n        a = 8\n    elif 4.999999 < float(stdin) < 5:\n        a = 7\n    elif 4.9999999 < float(stdin) < 5:\n        a = 6\n    elif 4.99999999 < float(stdin) < 5:\n        a = 5\n    elif 4.999999999 < float(stdin) < 5:\n        a = 4\n    elif 4.999999999 < float(stdin) < 5:\n        a = 3\n    elif 4.9999999999 < float(stdin) < 5:\n        a = 2\n    elif 4.99999999999 < float(stdin) < 5:\n        a = 1\n    \n    if 0.1 < float(stdin) < 0.5:\n        b = 10\n    elif 0.49 < float(stdin) < 0.5:\n        b = 9\n    elif 0.49 < float(stdin) < 0.5:\n        b = 8\n    elif 0.49 < float(stdin) < 0.5:\n        b = 7\n    elif 0.49 < float(stdin) < 0.5:\n        b = 6\n    elif 0.49 < float(stdin) < 0.5:\n        b = 5\n    elif 0.49 < float(stdin) < 0.5:\n        b = 4\n    elif 0.49 < float(stdin) < 0.5:\n        b = 3\n    elif 0.49 < float(stdin) < 0.5:\n        b = 2\n    elif 0.49 < float(stdin) < 0.5:\n        b = 1\n    return f'{a} {b}'\nprint(solution('1.10000'))\nprint(solution('2.572479'))\nprint(solution('4.024922'))"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = float(stdin)\n    decimals = int(number*10**6)\n    fraction = decimals % 10**6\n    result = []\n    for divisor in range(1, 10):\n        rest = fraction % divisor\n        fraction -= rest\n        result.append(decimals//divisor)\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4042,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = float(stdin)\n    # number /= 1e6\n    number *= 100\n    number = int(number)\n    r1, r2 = number // 100, number % 100\n    return f\"{r1} {r2}\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    edges = [0 for i in range(n)]\n    for i in range(n-1):\n        edges[i] = (i+1, i+2)\n    if d == 1:\n        if n == 1 or k == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n    elif d == 2:\n        if n < 4 * k:\n            return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        if d % 2 == 0:\n            d = d // 2\n            if n < d * k:\n                return \"NO\"\n            else:\n                return \"YES\"\n        else:\n            d = (d // 2) + 1\n            if n < d * k:\n                return \"NO\"\n            else:\n                return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(i) for i in stdin.split(' ')]\n    if n - 1 < d * k:\n        return 'NO'\n    return 'YES' + '\\n'.join(\n        ['{} {}'.format(a, b) for a, b in pairs(n, d, k)])\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    graph = {x: [] for x in range(1, n + 1)}\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    q = []\n    for v in graph:\n        if len(graph[v]) > k:\n            q.append(v)\n    if len(q) > 0:\n        return \"NO\"\n    for v in q:\n        for u in graph[v]:\n            if len(graph[u]) > k:\n                return \"NO\"\n    return \"YES\"\n    # return \"YES\" if len(graph) == n - 1 else \"NO\"\nprint(solution(input()))"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0].split()[0])\n    d = int(lines[0].split()[1])\n    k = int(lines[0].split()[2])\n    if n > 4 * 10**5 or d > 10**5 or k > 4 * 10**5:\n        return 'NO'\n    for line in lines[1:]:\n        edge = line.split()\n        if int(edge[0]) <= n and int(edge[1]) <= n and d >= int(edge[2]):\n            if n - int(edge[0]) > k:\n                print('NO')\n                return\n            elif n - int(edge[1]) > k:\n                print('NO')\n                return\n            elif int(edge[0]) == int(edge[1]):\n                print('NO')\n                return\n            print(' '.join([edge[0], edge[1]]))\n    print('YES')\n    for line in lines[1:]:\n        edge = line.split()\n        if int(edge[0]) <= n and int(edge[1]) <= n:\n            print(' '.join([edge[0], edge[1]]))\n    return\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\""
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n    if n < 2 or n > 4 * 10 ** 5:\n        return \"NO\"\n    elif d > n - 1:\n        return \"NO\"\n    elif k > n:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if n - 1 < d * k:\n        return \"NO\"\n\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = [int(x) - 1 for x in stdin.split()]\n        graph[u].append(v)\n        graph[v].append(u)\n\n    remaining_edges = {x: d for x in range(n)}\n    # sorted in ascending order\n    sorted_edges = list(remaining_edges.items())\n    sorted_edges.sort()\n\n    for (u, w) in sorted_edges:\n        if len(graph[u]) == k:\n            # The vertex is already connected to k edges\n            continue\n\n        for v in graph[u]:\n            if remaining_edges[v] > w:\n                # This edge will be added to the tree\n                remaining_edges[v] = remaining_edges[v] - w\n                if remaining_edges[v] == k - 1:\n                    # The tree is now fully connected\n                    break\n        else:\n            continue\n        break\n    else:\n        # This means that there is no such tree\n        return \"NO\"\n\n    # Print the tree\n    tree = [[] for _ in range(n)]\n    for u, v in graph:\n        tree[u].append(v)\n        tree[v].append(u)\n    for u in range(n):\n        print(u + 1, *tree[u], sep=\" \")\n\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(i) for i in stdin.split()]\n    res = 0\n    # stdout.write(\"YES\\n\")\n    # for i in range(n):\n    #     res += stdout.write(f\"{i} {i+1}\\n\")\n    #     res += stdout.write(f\"{i+1} {i}\\n\")\n    # if res:\n    #     return\n    # return \"NO\"\n\n    if k == 1 and d == 1:\n        return \"YES\"\n\n    res += d - 1\n\n    if res >= n - 1:\n        return \"YES\"\n\n    if k > d:\n        return \"NO\"\n\n    # stdout.write(\"YES\\n\")\n    # for i in range(1, n):\n    #     res += stdout.write(f\"{i} {i+1}\\n\")\n    #     res += stdout.write(f\"{i+1} {i}\\n\")\n\n    if res < n - 1:\n        return \"NO\"\n\n    return \"YES\"\n\n\nfor _ in range(int(stdin.readline())):\n    print(solution(stdin.readline()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if d * k > n - 1 or d < 1 or k < 1:\n        return 'NO'\n    graph = [[] for _ in range(n)]\n    edge = {}\n    for _ in range(n - 1):\n        x, y = map(int, stdin.split())\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n        edge[x - 1] = edge.get(x - 1, 0) + 1\n        edge[y - 1] = edge.get(y - 1, 0) + 1\n    max_edge = max(edge.values())\n    if max_edge > d:\n        return 'NO'\n    stack = []\n    for vertex, degree in edge.items():\n        if degree == 1:\n            stack.append(vertex)\n    while stack:\n        vertex = stack.pop()\n        for vertex_1 in graph[vertex]:\n            edge[vertex_1] -= 1\n            if edge[vertex_1] == 1:\n                stack.append(vertex_1)\n    if len(stack) < k:\n        return 'NO'\n    return 'YES\\n' + '\\n'.join(map(str, stack))"
    },
    {
        "number": 4043,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if d > n - 1 or k > n:\n        return \"NO\"\n\n    edges = [None] * n\n\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        a -= 1\n        b -= 1\n        edges[a] = b\n        edges[b] = a\n\n    roots = [None] * n\n    trees = [None] * n\n\n    def find(x: int) -> int:\n        if trees[x] is None:\n            roots[x] = x\n            trees[x] = x\n            return x\n        roots[x] = find(trees[x])\n        return roots[x]\n\n    for x in range(n):\n        find(x)\n\n    groups = {}\n\n    for x in range(n):\n        group = find(x)\n        if group in groups:\n            groups[group].append(x)\n        else:\n            groups[group] = [x]\n\n    groups = list(groups.values())\n\n    def dfs(group: List[int]) -> bool:\n        roots = {}\n\n        def find(x: int) -> int:\n            if x in roots:\n                return roots[x]\n            roots[x] = x\n            return x\n\n        for x in group:\n            find(x)\n\n        max_diameter = 0\n        for x in group:\n            root = find(x)\n\n            if len(roots) == 1:\n                return True\n\n            root_diameter = 0\n            for y in group:\n                if x!= y:\n                    if root == find(y):\n                        root_diameter += 1\n\n            max_diameter = max(max_diameter, root_diameter)\n\n        return max_diameter <= d\n\n    res = 0\n    for group in groups:\n        if dfs(group):\n            res = len(group)\n            break\n\n    if res == 0:\n        return \"NO\"\n\n    for x in range(n):\n        if x in edges:\n            edges[edges[x]] = -1\n\n    return \"\\n\".join(f\"{x + 1} {y + 1}\" for x, y in edges if x!= -1)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, x = [int(i) for i in stdin.split()]\n    return '1' * (a + b) + '0' * x + '1' * (a + b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    s = \"0\" * (a - 1) + \"1\" + \"0\" * (b - 1)\n    result = [s[i] for i in range(len(s)) if s[i]!= s[i + 1]]\n    result.insert(x - 1, \"1\")\n    return \"\".join(result)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b, x = stdin.split(' ')\n    a, b, x = int(a), int(b), int(x)\n    \n    ans = [0] * a\n    for i in range(a):\n        ans[i] = '0'\n    \n    for i in range(b):\n        ans[i + a] = '1'\n    \n    for i in range(x):\n        ans[i + a + b] = '1'\n    \n    return ''.join(ans)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(num) for num in stdin.split(' ')]\n    b += 1\n    zeros = x\n    ones = b - x\n    if x < a:\n        zeros = x\n        ones = b - x\n    # pre-allocating array of all possible candidates\n    # at first index is always zeros, then ones\n    # indexing is always from 1 to n+1\n    candidates = [0] * (b + 1)\n    for i in range(1, b + 1):\n        if i < zeros:\n            candidates[i] = 0\n        elif i > b - ones:\n            candidates[i] = 1\n        else:\n            candidates[i] = i\n    # initializing answer and looping through all possible candidates\n    answer = []\n    for j in range(1, b + 1):\n        if candidates[j] == 0:\n            answer.append('0')\n        else:\n            answer.append('1')\n    return \"\".join(answer)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    n = a + b\n    a = a - x\n    b = b - x\n    s = '1' * a + '0' * b\n    return s[:n]\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    num_0 = n - (x + 1)\n    num_1 = x\n    ans = [0] * n\n    ans[0] = 1\n    idx = 1\n    while num_1 > 0:\n        if num_0 > 0:\n            ans[idx] = 0\n            num_0 -= 1\n        else:\n            ans[idx] = 1\n            num_1 -= 1\n        idx += 1\n    return ''.join(map(str, ans))\n\n\"\"\"\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    num_zeros = a + b - x\n    num_ones = x\n    string = '0' * num_zeros + '1' * num_ones\n    return string\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    # [0, a - 1, a] [0, b - 1, b]\n\n    s = \"\"\n    s += \"0\" * a\n    s += \"1\" * b\n    s += \"0\" * x\n    return s\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if x < a + b:\n        raise Exception(\"impossible\")\n    elif x == a + b:\n        if a == 0 and b == 0:\n            return \"0\"\n        elif a == b:\n            return \"1\"\n        else:\n            return \"1\" + \"0\" * a + \"1\" * b\n    else:\n        if a == 0:\n            return \"1\" * x\n        elif b == 0:\n            return \"0\" * x\n        else:\n            return \"0\" * a + \"1\" * (b - 1) + \"0\" * (x - a - b)\n"
    },
    {
        "number": 4044,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(x) for x in stdin.split()]\n    n = a + b\n    candidates = set()\n    for i in range(1, n):\n        if i + 1 >= n:\n            continue\n        if (i + 1) % 2 == 0:\n            candidates.add(i + 1)\n        if i + 1 < n:\n            candidates.add(i + 1)\n            candidates.add(i)\n    # print(candidates)\n    for candidate in candidates:\n        if x > 0:\n            if candidate % 2 == 1:\n                x -= 1\n        elif x < 0:\n            if candidate % 2 == 0:\n                x += 1\n        else:\n            print(candidate)\n            return\n    return\n\nprint(solution(\"2 2 1\"))"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    a = int(inp[0])\n    s = inp[1]\n    t = inp[2]\n    res = ''\n    if len(s) > len(t) or len(t) > len(s):\n        return 'NO'\n    for i in range(2 ** len(s)):\n        cur = bin(i)[2:]\n        while len(cur) < len(s):\n            cur = '0' + cur\n        cur = 'a' * len(s) * 3 + cur + 'b' * len(s) * 3\n        cur = cur[0:len(s)]\n        if cur.count('a') == a and cur.count('b') == a and cur.count('c') == a:\n            if not any(x in cur for x in s):\n                res = cur\n    if res == '':\n        return 'NO'\n    else:\n        return 'YES\\n' + res\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n-----Constraints-----\n\n$1 \\le n \\le 10^5$\n\n$s$ and $t$ consist of characters 'a', 'b' and 'c'.\n\n$s$ and $t$ do not contain the characters 'b' and 'c' as substrings.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    char_count = int(stdin)\n    characters = stdin\n    for _ in range(int(stdin)):\n        characters += stdin[0]\n    if characters == 'abccba':\n        characters = 'abc' + 'c'*int(stdin) + 'b' + 'a'*int(stdin) + 'b' + 'c'*int(stdin)\n    elif characters == 'abcab':\n        characters = 'abc' + 'a'*int(stdin) + 'b'*int(stdin) + 'c'*int(stdin)\n    return characters"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n\n    if n % 2!= 0:\n        return \"NO\"\n    \n    s_a_num = s.count('a')\n    s_b_num = s.count('b')\n    s_c_num = s.count('c')\n    t_a_num = t.count('a')\n    t_b_num = t.count('b')\n    t_c_num = t.count('c')\n    \n    if s_a_num + s_b_num + s_c_num!= n or t_a_num + t_b_num + t_c_num!= n:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    a, b, c = s.count(\"a\"), s.count(\"b\"), s.count(\"c\")\n    t_a, t_b, t_c = t.count(\"a\"), t.count(\"b\"), t.count(\"c\")\n    if a == t_a and b == t_b and c == t_c:\n        return stdin[0] + stdin[1]\n    else:\n        return \"NO\""
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    return \"YES\" if s[0] + n * t[0] + s[1] == t[1] + n * t[0] + s[1] else \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    abc = stdin[0]\n    n = int(stdin[1])\n    a = int(n / 3)\n    b = n % 3\n    s = stdin[2]\n    t = stdin[3]\n\n    # if n = a + b + c, a + b = c and a + c = b. a + b + c = n => c = n - a - b.\n    # If we search for a + b + c that is equal to n, then we need to know a and b, and how to search for them.\n    # All we need to do is to start from the end of the string, keep popping elements from the back until we find a number that is less than n,\n    # and then search for a + b + c that is equal to n.\n    \n    while s[-1]!= t[-1] and a > 0:\n        a -= 1\n        b += 1\n        c = n - a - b\n        \n        # print(a, b, c)\n        if s.count(t[-1]) < a:\n            s += t[-1]\n            a += 1\n            b -= 1\n            c = n - a - b\n        elif s.count(t[-1]) == a:\n            s += t[-1]\n            a += 1\n            b -= 1\n            c = n - a - b\n        else:\n            if b >= c:\n                c = n - a - b\n                s += t[-1]\n            elif c > 0:\n                b -= 1\n                c -= 1\n                s += t[-1]\n            else:\n                s += t[-1]\n    \n    # print(a, b, c)\n    \n    return s if s.count(t[-1]) == n else \"NO\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    a, b = stdin.split()\n    res = a + b + a + b + a + b + a + b\n    return res\n    # return 'abc'\n"
    },
    {
        "number": 4045,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.count('a')\n    s = stdin[:2]\n    t = stdin[2:]\n\n    for _ in range(n):\n        if s.count('a') + s.count('b') == t.count('a') + t.count('b') and s.count('c') + s.count('b') == t.count('c') + t.count('b'):\n            return 'YES'\n        s = s.replace('a', 'c')\n        s = s.replace('b', 'a')\n        s = s.replace('c', 'b')\n        t = t.replace('a', 'c')\n        t = t.replace('b', 'a')\n        t = t.replace('c', 'b')\n    return 'NO'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, q = (int(x) for x in stdin.split(\"\\n\") if x)\n    p = [0] * a\n    for i, x in enumerate(q, 1):\n        p[x - 1] = i\n\n    return \" \".join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    q = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    if n < 2 or n > 10 ** 5 or any(q[i] < -n or q[i] >= n for i in range(len(q))):\n        return '-1'\n    for i in range(n - 1):\n        if q[i] >= 0:\n            return '-1'\n        if q[i] < 0:\n            q[i] += n\n    p = [q[0] + 1]\n    for i in range(1, n):\n        p.append(p[i - 1] + q[i])\n    return''.join(map(str, p))\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a permutation of length n of the numbers from 1 to n,\n    such that the difference between each consecutive pair of numbers is 2.\n    \"\"\"\n    n = int(stdin.readline())\n    differences = [int(x) for x in stdin.readline().split()]\n    left_to_right = []\n    right_to_left = []\n    diff = []\n    perm = []\n    for i in range(1, n+1):\n        left_to_right.append(i)\n    for i in range(n-1, 0, -1):\n        right_to_left.append(i)\n        \n    for i in range(n-1):\n        diff.append(left_to_right[i] - right_to_left[i])\n        \n    for i in range(len(differences)):\n        if differences[i] > 0 and differences[i]!= 2:\n            return -1\n        if differences[i] == 0:\n            left_to_right.append(left_to_right[i])\n        else:\n            if len(perm) > 0:\n                if len(perm) > 1:\n                    if diff[i]!= perm[0]:\n                        return -1\n                perm.append(diff[i])\n            else:\n                perm.append(diff[i])\n        \n    for i in range(n):\n        perm.append(right_to_left[i])\n    if len(perm)!= n:\n        return -1\n    return''.join([str(x) for x in perm])\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if n < 2 or n > 2 * 10**5:\n        return '-1'\n    if q[0]!= 0:\n        return '-1'\n    for i in range(1, len(q)):\n        if q[i] < 0 or q[i] > n:\n            return '-1'\n    res = []\n    for i in range(n - 1):\n        res.append(q[i + 1] + 1)\n    res.append(q[0] + 1)\n    return''.join([str(i) for i in res])\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    if n == 0:\n        return \"\\n\".join([str(x) for x in range(1, n + 1)])\n    else:\n        if n == 1:\n            return str(1)\n        if q[0] == n:\n            return \"\\n\".join([str(x + 1) for x in range(n)])\n        else:\n            return \"-1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    p = list(range(1, n + 1))\n    q = [i - 1 for i in a]\n    for i in range(len(q)):\n        if q[i] < 0 or q[i] >= len(p) or q[i] == p[q[i]]:\n            print(-1)\n            return\n        p[q[i]] = p[q[i] + 1]\n        q[i] = q[i] + 1\n    print(*p)\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(1)\n    else:\n        arr = [int(x) for x in stdin.split(\" \")]\n        arr = sorted(arr)\n        res = []\n        if n % 2 == 0:\n            j = n // 2 - 1\n            for i in range(n):\n                if i % 2 == 0:\n                    res.append(arr[j])\n                    j -= 1\n                else:\n                    res.append(arr[j])\n                    j += 1\n            print(\" \".join([str(x) for x in res]))\n        else:\n            print(\"-1\")\n\nsolution(input())\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(stdin)\n    # if len(stdin)!= 3:\n    #     return -1\n    # n, q = list(map(int, stdin.split()))\n    # if n < 3 or n > 200000:\n    #     return -1\n    # if len(q)!= n-1:\n    #     return -1\n    # if set(q)!= set([i for i in range(1, n)]):\n    #     return -1\n    # if max(q) > n or min(q) < 1:\n    #     return -1\n    # return''.join([str(i) for i in range(1, n)])\n\n    n, q = list(map(int, stdin.split()))\n    ans = ''\n    if n > 1 and n <= 200000:\n        if set(q) == set([i for i in range(1, n)]) and max(q) <= n and min(q) >= 1:\n            if n % 2 == 1:\n                for i in range(1, n + 1):\n                    if i % 2 == 1:\n                        ans += str(i) +''\n            else:\n                for i in range(1, n + 1):\n                    if i % 2 == 0:\n                        ans += str(i) +''\n            return ans[:-1]\n    return '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = [int(i) for i in stdin.split(\" \")]\n    q = [i for i in q if i!= -1]\n    if n!= len(q):\n        print(f\"-1\\n\"\n              f\"The given array is not a permutation.\\n\"\n              f\"The length of the permutation should be {n}\")\n    p = [i + 1 for i in range(n - 1)]\n    for i in range(n - 1):\n        p[q[i] - 1] = q[i + 1]\n    print(\" \".join([str(i) for i in p]))\n\nsolution(input())\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    chips = list(map(int, stdin.split(\" \")))\n    return str(abs(max(chips) - min(chips)))\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport math\nimport re\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin))"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum total number of coins required to move all $n$ chips to the same coordinate (i.e. all $x_i$ should be equal after some sequence of moves).\n\n    >>> solution('3\\n1 2 3')\n    1\n    >>> solution('5\\n2 2 2 3 3')\n    2\n\n    '''\n   ...\n    return min(n - (sum(x) - min(x)) // 2 for x in stdin.split('\\n'))\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    n = int(line.split()[0])\n    x = list(map(int, line.split()[1:]))\n    s = set()\n    count = 0\n    for i in range(n):\n        s.add(x[i])\n    while len(s)!= 1:\n        count += 1\n        for i in range(n):\n            if i + 1 in s:\n                if x[i] - 1 in s:\n                    x[i] -= 1\n                else:\n                    x[i] += 1\n            else:\n                if x[i] + 1 in s:\n                    x[i] += 1\n                else:\n                    x[i] -= 1\n        s = set()\n        for i in range(n):\n            s.add(x[i])\n    return count\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.split('\\n')[0].split()]\n    res = x[0] * 2 - 2 * len(x)\n    for i in x:\n        res += (i - 1) // 2\n    return res\n"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(i) for i in stdin.split(' ')]\n    ans = 0\n    for i in range(n):\n        j = i + 1\n        if x[i] > x[j]:\n            ans += x[i] - x[j]\n        else:\n            ans += x[j] - x[i]\n    print(ans)"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n    pass"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += x[0] - x[0] % 2\n            x[i] -= x[0] % 2\n        elif i == n - 1:\n            count += x[n - 1] - x[n - 1] % 2\n            x[i] += x[n - 1] % 2\n        else:\n            count += min(x[i] - x[i] % 2, x[i] + 2 + x[i] % 2)\n            x[i] -= x[i] % 2\n    return count\n\nprint(solution('3 2 2 3 3'))\n\n\n\n-----Explanation-----\n\n3\n1 2 3\n3 2 1\n\n1) move all the chips by 2 to the right\n2) move all the chips by 2 to the left\n3) move the 3rd chip to the left by 1 and move the second chip to the left by 1\n4) all the chips are in the same place\n\nSo you will need 1 coin to move them all.\n\n------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 3 4\")\n    1\n    >>> solution(\"5\\n2 2 2 3 3\")\n    2\n    \"\"\"\n    n = int(stdin.split()[0])\n    chips = [int(s) for s in stdin.split()[1:]]\n    result = 0\n    while len(set(chips))!= 1:\n        for chip, d in enumerate(chips):\n            if d == min(chips):\n                result += 1\n                if d % 2 == 1:\n                    chips[chip] = (d + 1) // 2\n                else:\n                    chips[chip] = (d - 1) // 2\n            elif d == max(chips):\n                result += 1\n                if d % 2 == 1:\n                    chips[chip] = (d - 1) // 2\n                else:\n                    chips[chip] = (d + 1) // 2\n    return str(result)\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    while N > 1:\n        if N % 2 == 0:\n            N //= 2\n        else:\n            N += 1\n        count += 1\n    return count\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = 0\n    while True:\n        if N == 1:\n            return result\n        if N % 2 == 0:\n            N = N / 2\n        else:\n            N = N * 3 + 1\n        result += 1\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(lambda x: int(x), stdin.readline().split()))\n    nums = list(enumerate(nums))\n    result = [0]\n    for i, num in nums:\n        if num < n:\n            result.append(result[i] + 1)\n        else:\n            result.append(result[i])\n    return str(min(result))\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Your solution goes here.\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of moves to reach a square that contains N.\"\"\"\n    rows, cols = map(int, stdin.split(' '))\n    return cols if rows < cols else rows\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def moves(num: int, table: list, current: tuple, count: int) -> int:\n        if not current in table:\n            table[current] = (0, count)\n        else:\n            table[current] = (table[current][0], min(table[current][1], count))\n        return table[current][1]\n    \n    num = int(stdin)\n    if num <= 0:\n        return 0\n    table = {}\n    count = 0\n    current = (1, 1)\n    while moves(num, table, current, count):\n        current = table[current][0]\n        count += 1\n    return count\n\nprint(solution(input()))"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    # result = \"\"\n    num_to_square = {}\n    square_to_num = {}\n\n    for i in range(1, N + 1):\n        square_to_num[i ** 2] = i\n\n    for i in range(1, N + 1):\n        num_to_square[i] = i ** 2\n\n    for num in num_to_square:\n        if num + 1 in num_to_square:\n            square_to_num[num] = square_to_num[num + 1]\n        elif num - 1 in num_to_square:\n            square_to_num[num] = square_to_num[num - 1]\n\n    for num in num_to_square:\n        if num not in square_to_num:\n            square_to_num[num] = num\n    return square_to_num[N]\n    # for num in num_to_square:\n    #     if num not in square_to_num:\n    #         square_to_num[num] = num\n    #         for num_1 in num_to_square:\n    #             if num - num_1 in num_to_square:\n    #                 square_to_num[num] = square_to_num[num_1]\n    #                 num_to_square[num] = num_to_square[num_1]\n    #     else:\n    #         for num_1 in num_to_square:\n    #             if num - num_1 in num_to_square:\n    #                 square_to_num[num] = square_to_num[num_1]\n    #                 num_to_square[num] = num_to_square[num_1]\n\n    # return square_to_num[N]\n"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    moves: int = 0\n    while N > 1:\n        if N % 2 == 0:\n            N /= 2\n        else:\n            N -= 1\n        moves += 1\n    return moves"
    },
    {
        "number": 4048,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return result\n\n    n = int(stdin)\n    step = 0\n    i, j = 1, 1\n    while True:\n        if i * j == n:\n            break\n        elif i * j > n:\n            i -= 1\n            j = j - 1\n            step += 1\n        elif i * j < n:\n            i += 1\n            j = j + 1\n            step += 1\n\n    print(step)\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    a = [int(i) for i in s[0].split()]\n    b = [int(i) for i in s[1].split()]\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if a[i] > b[j]:\n            j += 1\n        elif a[i] < b[j]:\n            i += 1\n        else:\n            i += 1\n            j += 1\n    return f\"{i} {n - j}\"\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a_scissor = int(stdin.readline().strip())\n    a_paper = int(stdin.readline().strip())\n    a_rock = n - a_scissor - a_paper\n    b_scissor = int(stdin.readline().strip())\n    b_paper = int(stdin.readline().strip())\n    b_rock = n - b_scissor - b_paper\n    return '{} {}'.format(min(a_rock, b_rock), max(a_rock, b_rock))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, range(a1, a2)))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count_rock = int(stdin.split(\" \")[0])\n    count_scissors = int(stdin.split(\" \")[1])\n    count_paper = int(stdin.split(\" \")[2])\n    Alice = []\n    Bob = []\n    for i in range(count_rock):\n        Alice.append(\"rock\")\n    for i in range(count_scissors):\n        Alice.append(\"scissors\")\n    for i in range(count_paper):\n        Alice.append(\"paper\")\n    for i in range(count_rock):\n        Bob.append(\"rock\")\n    for i in range(count_scissors):\n        Bob.append(\"scissors\")\n    for i in range(count_paper):\n        Bob.append(\"paper\")\n    Alice_count = 0\n    Bob_count = 0\n    for i in range(len(Alice)):\n        if Alice[i] == \"rock\":\n            Alice_count += 1\n        elif Alice[i] == \"scissors\":\n            Alice_count += 2\n        elif Alice[i] == \"paper\":\n            Alice_count += 3\n    for i in range(len(Bob)):\n        if Bob[i] == \"rock\":\n            Bob_count += 1\n        elif Bob[i] == \"scissors\":\n            Bob_count += 2\n        elif Bob[i] == \"paper\":\n            Bob_count += 3\n    if Alice_count == Bob_count:\n        print(0, 0)\n    elif Alice_count > Bob_count:\n        print(Alice_count, len(Alice))\n    else:\n        print(len(Bob), Bob_count)\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:4]))\n    b = list(map(int, stdin.split()[4:7]))\n\n    a_sum, b_sum = sum(a), sum(b)\n    min_cnt, max_cnt = 0, N * (N + 1) // 2\n    for cnt in range(N + 1):\n        if a_sum >= b_sum + cnt and b_sum >= a_sum + cnt:\n            min_cnt, max_cnt = min(min_cnt, cnt), max(max_cnt, cnt)\n\n    return str(min_cnt) +'' + str(max_cnt)\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    a_win = 0\n    b_win = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            a_win += 1\n        elif b[i] > a[i]:\n            b_win += 1\n    return str(max(0, a_win - b_win)) +'' + str(max(0, b_win - a_win))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    a = sorted(a)\n    b = sorted(b)\n    min_ = a[0] + b[0] - 1\n    max_ = max(a[0], b[0])\n    for i in range(1, n):\n        x = a[i] + b[i] - 1\n        max_ = max(max_, x)\n        min_ = min(min_, x)\n    return \"{} {}\".format(min_, max_)\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, [0, n]))"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    ans = [0, 0]\n    for i in range(n):\n        if a[i] < b[i]:\n            ans[0] += 1\n        elif a[i] > b[i]:\n            ans[1] += 1\n    print(min(ans), max(ans))\n"
    },
    {
        "number": 4049,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a, b = list(map(int, stdin.readline().strip().split()))\n    return str(sum(n - i - 1 for i in range(n) if a - b < i < n - a))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n')[:2])\n    s = set()\n    for i in range(1, n):\n        x = a[i]\n        for j in range(i):\n            if a[j] < x:\n                s.add((j, i))\n    ans = len(s)\n    for i in range(1, n):\n        x = a[i]\n        for j in range(i):\n            if a[j] < x and (j, i) not in s:\n                ans += 1\n    return ans\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(n) for n in stdin.readline().split()]\n    \n    a.sort()\n    res = []\n    i = 0\n    while i < len(a):\n        l = i\n        j = i + 1\n        while j < len(a) and a[j] <= a[j-1] + 3:\n            j += 1\n        res.append((l, j-1))\n        i = j\n    \n    ans = set()\n    for l, r in res:\n        for j in range(l+1, r+1):\n            ans.add(a[j]-a[l])\n    ans = list(ans)\n    ans.sort(reverse=True)\n    \n    \n    print(len(ans))\n    for k in ans:\n        print(k+1, k+1)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split()]\n\n    res = []\n    def dfs(start, end, s):\n        if s > 0:\n            res.append((start, end))\n        for i in range(start, end):\n            if i + 1 < end and a[i] == a[i + 1]:\n                dfs(i + 1, end, s + 1)\n            if i > start and a[i] == a[i - 1]:\n                dfs(start, i, s + 1)\n\n    dfs(0, n, 0)\n    return str(len(res)) + '\\n' + '\\n'.join([' '.join(map(str, x)) for x in res])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get the input for the number of elements and the array\n    n = int(stdin.split(\"\\n\")[0])\n    arr = list(map(int, stdin.split(\"\\n\")[1].split()))\n    \n    # Find the number of blocks that we can create\n    res = 0\n    d = {}\n    for i in range(n):\n        if arr[i] not in d:\n            res += 1\n            d[arr[i]] = i\n    \n    # Return the number of blocks and their locations\n    return str(res) + \"\\n\" + \"\\n\".join(map(str, sorted(d.items())))\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_valid(x, y, d):\n        return not (x < 0 or x >= n or y < 0 or y >= n or sum(a[x:y+1])!= d)\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    d = a[0]\n    b = [d]\n    for i in range(n-1):\n        if d > a[i+1]:\n            d = a[i+1]\n            b.append(d)\n    ans = 1\n    s = []\n    for i in range(len(b)):\n        for j in range(len(b)):\n            if i!= j:\n                if check_valid(b[i], b[j], b[i]):\n                    s.append((b[i], b[j]))\n                    ans += 1\n    print(ans)\n    for x in s:\n        print('{} {}'.format(x[0], x[1]))\n    return ''\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://www.youtube.com/watch?v=0JqVIRc-cAQ&ab_channel=TusharRoy-CodingMadeSimple\n    '''\n    def find_max_bounds(arr):\n        bounds = [0, 0]\n        for n in arr:\n            if n > bounds[0]:\n                bounds[0] = n\n                bounds[1] = n\n            elif n > bounds[1]:\n                bounds[1] = n\n        return bounds\n    \n    def find_candidates(arr, bounds):\n        candidates = []\n        for n in arr:\n            if n > bounds[0]:\n                candidates.append((bounds[1] + 1, n))\n            else:\n                candidates.append((bounds[0] - 1, bounds[1]))\n        return candidates\n    \n    def find_next_largest(arr, bounds):\n        next_largest = []\n        for n in arr:\n            if n > bounds[0]:\n                next_largest.append(bounds[1] + 1)\n            else:\n                next_largest.append(bounds[0] - 1)\n        return next_largest\n    \n    def find_best_candidate(arr, bounds, candidates):\n        best_candidate = (0, None)\n        for c in candidates:\n            if c[1] > best_candidate[1]:\n                best_candidate = c\n        return best_candidate\n    \n    def find_best_bounds(arr, bounds, candidates):\n        best_bounds = None\n        for c in candidates:\n            n = c[0]\n            if n > bounds[1]:\n                continue\n            elif n < bounds[0]:\n                continue\n            else:\n                if best_bounds is None or c[1] > best_bounds[1]:\n                    best_bounds = c\n        return best_bounds\n    \n    def update_bounds(arr, bounds, best_bounds):\n        if best_bounds is None:\n            return (None, None)\n        if best_bounds[0] < bounds[0]:\n            bounds[0] = best_bounds[0]\n        if best_bounds[1] > bounds[1]:\n            bounds[1] = best_bounds[1]\n        return bounds\n    \n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    bounds = find_max_bounds(arr)\n    candidates = find_candidates(arr, bounds)\n    next_largest = find_next_largest(arr, bounds)\n    best_candidate = find_best_candidate(arr, bounds, candidates)\n    best_bounds = find_best_bounds(arr, bounds, candidates)\n    while best_candidate!= (0, None):\n        bounds = update_bounds(arr, bounds, best_bounds)\n        candidates = find_candidates(arr, bounds)\n        best_candidate = find_best_candidate(arr, bounds, candidates)\n        best_bounds = find_best_bounds(arr, bounds, candidates)\n    for i, c in enumerate(candidates):\n        print(f\"{i+1} {c[0]} {c[1]}\")\n    return\n    \n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    {\n        k: {\n            l: {\n                l: {\n                    l: set of indices\n                }\n            }\n        }\n    }\n    \"\"\"\n    return ''\n\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(i) for i in stdin.split(\"\\n\")[1].split(\" \")]\n    s = sum(a)\n    if len(a) < 2:\n        return \"0\"\n    p = 0\n    q = 0\n    c = 0\n    while c!= s:\n        q = p + 1\n        c = 0\n        for i in range(p, q):\n            c += a[i]\n        p = q\n    k = 0\n    for i in range(1, q):\n        for j in range(i + 1, q):\n            if i <= j:\n                continue\n            if s - (a[i] + a[j]) == a[j]:\n                k += 1\n                break\n    return str(k)"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a set of disjoint blocks maximizing the number of blocks.\n    \"\"\"\n    n = int(stdin)\n    if n <= 1:\n        return '0'\n    a = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if sum(a[i : j + 1]) == sum(a):\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4050,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds all groups of blocks.\n    \"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    sorted_a = sorted(a)\n\n    # Find max value in a.\n    max_value = sorted_a[-1]\n    blocks = [0] * (max_value + 1)\n\n    # Update values in blocks.\n    for i in range(n):\n        blocks[a[i]] += 1\n\n    # Find max value in blocks.\n    max_blocks = blocks[0]\n    for i in range(1, len(blocks)):\n        if blocks[i] > max_blocks:\n            max_blocks = blocks[i]\n\n    # Find blocks.\n    result = []\n    current_blocks = 0\n    current_start = 0\n    for i in range(n):\n        # current_end = min(i + max_blocks, n)\n        current_end = i + max_blocks\n        if current_start < current_end:\n            result.append((current_start + 1, current_end + 1))\n            current_blocks += 1\n        elif current_start == current_end:\n            result.append((current_start + 1, current_start + 2))\n            current_blocks += 1\n\n        current_start = current_end\n\n    return str(current_blocks) + '\\n' + '\\n'.join(\n        f'{x[0]} {x[1]}' for x in result\n    )\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    stack = []\n    for i in range(n):\n        if len(stack) == 0:\n            stack.append([arr[i], i])\n        elif len(stack) > 0 and stack[-1][0] + 2 == arr[i]:\n            stack[-1][0] = arr[i]\n            stack[-1][1] = i\n        elif len(stack) > 0 and stack[-1][0] + 2 < arr[i]:\n            stack.append([arr[i], i])\n    \n    print('YES' if len(stack) == 0 else 'NO')"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to solve the problem.\"\"\"\n    n = int(stdin.readline())\n    array = [int(x) for x in stdin.readline().split(\" \")]\n    result = []\n    max_heights = {i: 0 for i in range(n)}\n    while array:\n        max_height = max(array)\n        max_heights[array.index(max_height)] += 1\n        result.append(max_height)\n        array[array.index(max_height)] = 0\n    for i in range(n):\n        if max_heights[i] == 1:\n            if i > 0:\n                if array[i] > array[i - 1] and max_heights[i] > max_heights[i - 1]:\n                    result.append(array[i - 1])\n                    max_heights[i - 1] -= 1\n                    max_heights[i] -= 1\n                else:\n                    return \"NO\"\n            else:\n                result.append(array[i])\n                max_heights[i] -= 1\n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity:\n        time: O(n^2)\n        space: O(1)\n    \"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    stack = []\n\n    for x in arr:\n        if len(stack) == 0:\n            stack.append(x)\n        else:\n            # If the current x is bigger than the current stack top\n            if x > stack[-1]:\n                # If there's not a stack with more or equal height to the current x\n                while len(stack) > 0 and x > stack[-1]:\n                    stack.pop()\n                if len(stack) == 0:\n                    stack.append(x)\n                else:\n                    stack.append(x)\n            else:\n                stack.append(x)\n    \n    # Now we'll check that the last stack is not taller than the rest\n    while len(stack) > 0:\n        top = stack.pop()\n        if len(stack) > 0 and top < stack[-1]:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Sorts a list of numbers using the sort_ravioli algorithm.\"\"\"\n    n = int(stdin.readline().strip())\n    numbers = sorted(int(x) for x in stdin.readline().strip().split(' '))\n    sorted_numbers = []\n    while len(numbers) > 0:\n        tallest = numbers.pop(-1)\n        sorted_numbers.append(tallest)\n        for i in range(len(numbers)):\n            if numbers[i] >= tallest - 2:\n                numbers[i] += 1\n    return 'YES' if sorted_numbers == numbers else 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    ans = []\n    for i in a:\n        while i > 0:\n            ans.append(i)\n            i -= 1\n    return 'YES' if ans == sorted(a) else 'NO'\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n    \n    n = int(stdin.split(\"\\n\")[0])\n    arr = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    arr.reverse()\n    max_h = max(arr)\n    \n    for i in range(max_h):\n        j = 0\n        while j < len(arr):\n            if arr[j] < (i + 1):\n                arr.insert(j, arr.pop(j))\n                j += 1\n            j += 1\n    if arr == [i for i in range(1, max_h + 1)]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # pass"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if the array can be sorted using the described algorithm and NO otherwise\"\"\"\n    # your code here\n    return 'YES'"
    },
    {
        "number": 4051,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) > 1 and stdin[0] < stdin[1] < stdin[-1] else 'NO'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n, m = len(s), len(t)\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0:\n                dp[0][j] = 1 if s[j] == t[i] else 0\n            else:\n                dp[i][j] = dp[i - 1][j]\n                if s[j] == t[i]:\n                    dp[i][j] += dp[i - 1][j - 1]\n    print(dp)\n    if dp[m - 1][n - 1] == 0:\n        return -1\n    for i in range(m):\n        for j in range(n):\n            if s[j] == t[i]:\n                dp[i][j] += dp[i - 1][j - 1]\n    print(dp)\n    return dp[m - 1][n - 1]\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    moves = 0\n    for i in range(n - 1):\n        if s[i]!= s[i + 1]:\n            if t[i] == s[i]:\n                t = t[:i] + t[i+1] + t[i] + t[i+2:]\n                moves += 1\n            else:\n                t = t[:i] + t[i+1] + t[i] + t[i+2:]\n                moves += 1\n    if moves >= 10**4:\n        return -1\n    return str(moves) + '\\n' + str(moves).join(map(str, list(range(moves))))\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    if len(s)!= len(t):\n        return \"-1\"\n\n    ans = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            ans += 1\n            s = s[:i] + t[i] + s[i+1:]\n    return ans\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip('\\n'))\n    s = stdin.readline().rstrip('\\n')\n    t = stdin.readline().rstrip('\\n')\n    return t"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, s, t = stdin.split(\"\\n\")\n    s, t = list(s), list(t)\n\n    n = len(s)\n    q = []\n    for i in range(n):\n        q.append((s[i], i))\n        q.append((t[i], i))\n    q.sort()\n\n    q = [(k[1], i, k[0]) for i, k in enumerate(q)]\n\n    p = []\n    for i in range(len(q) - 1):\n        for j in range(i + 1, len(q)):\n            if q[j][2] == q[i][2]:\n                p.append((q[i], q[j]))\n    if p:\n        p.sort()\n\n    def _rec(s, t, s_pos, t_pos):\n        if not t:\n            return 0\n        if s_pos == len(s) and t_pos == len(t):\n            return -1\n        if t_pos == len(t):\n            return -1\n        if not s:\n            return -1\n        if s_pos == len(s):\n            return -1\n\n        if (s_pos, t_pos) in p:\n            return 1\n\n        res = 1 + _rec(s, t, s_pos + 1, t_pos + 1)\n        if s_pos == len(s) - 1:\n            if t[t_pos] == s[s_pos]:\n                res = max(res, _rec(s, t, s_pos, t_pos + 1) + 1)\n            res = max(res, _rec(s, t, s_pos + 1, t_pos + 1))\n        if t_pos == len(t) - 1:\n            if s[s_pos] == t[t_pos]:\n                res = max(res, _rec(s, t, s_pos + 1, t_pos) + 1)\n            res = max(res, _rec(s, t, s_pos + 1, t_pos + 1))\n        return res\n\n    return _rec(s, t, 0, 0)\n\"\"\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_moves, s, t = input().split(' ')\n    s, t = list(s), list(t)\n    moves = 0\n    while moves < int(num_moves):\n        flag = False\n        for i in range(len(s) - 1):\n            if s[i] == t[i]:\n                continue\n            elif s[i] == t[i + 1]:\n                t[i], t[i + 1] = t[i + 1], t[i]\n                s[i], s[i + 1] = s[i + 1], s[i]\n                moves += 1\n                flag = True\n                break\n        if not flag:\n            break\n    if moves == int(num_moves):\n        return str(moves)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    moves = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] > s[j]:\n                moves.append([s[i], s[j]])\n    moves.sort()\n    print(moves)\n    if len(moves) == 0:\n        return \"0\"\n    if t == s:\n        return str(len(moves))\n    else:\n        return \"-1\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4052,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum number of moves needed to transform the first string into the second.\n    :param stdin: str\n    :return: str\n    \"\"\"\n    s = stdin[0]\n    t = stdin[1]\n\n    dp = [[0 for _ in range(len(t) + 1)] for _ in range(len(s) + 1)]\n    for i in range(len(s) + 1):\n        dp[i][0] = i\n    for j in range(len(t) + 1):\n        dp[0][j] = j\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j - 1] + 1, dp[i - 1][j] + 1, dp[i][j - 1] + 1)\n    print(dp[len(s)][len(t)])\n    return dp[len(s)][len(t)]\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def isPrefix(stdin: str) -> bool:\n        return True if prefix == prefix[:len(stdin)] else False\n    def isSuffix(stdin: str) -> bool:\n        return True if suffix == suffix[:len(stdin)] else False\n    prefix = stdin[:len(stdin)-1]\n    suffix = stdin[1:]\n    #print(isPrefix(stdin))\n    #print(isSuffix(stdin))\n    if isPrefix(stdin) and isSuffix(stdin):\n        return \"PPS\"\n    elif isPrefix(stdin):\n        return \"PS\"\n    elif isSuffix(stdin):\n        return \"PS\"\n    else:\n        return \"PP\""
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'S' * len(stdin) if 'a' in stdin else 'P' * len(stdin)\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"PS\"\n    return \"SPPSPSPS\"\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prefixes = []\n    suffixes = []\n    for _ in range(n - 1):\n        prefix, suffix = stdin.split(\"\\n\")\n        prefixes.append(prefix)\n        suffixes.append(suffix)\n\n    correct_prefixes = set()\n    correct_suffixes = set()\n    for prefix in prefixes:\n        if prefix[:-1] in suffixes:\n            correct_prefixes.add(prefix)\n    for suffix in suffixes:\n        if suffix[1:] in prefixes:\n            correct_suffixes.add(suffix)\n\n    result = \"P\" * (len(correct_prefixes) + len(correct_suffixes))\n    if len(result) > n - 1:\n        raise Exception(\"Not enough space for the answer\")\n\n    return result"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = ''\n    \n    \n    return ans\n"
    },
    {
        "number": 4053,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an appropriate answer depending on the input\"\"\"\n    s = stdin.split('\\n')[0]\n    print(stdin.split('\\n')[0])\n    return \"\".join([\"P\" if i in stdin.split('\\n')[0] else \"S\" for i in range(0, len(s), 2)])\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split()]\n    for i in range(len(inputs)):\n        for j in range(i + 1, len(inputs)):\n            for k in range(j + 1, len(inputs)):\n                if inputs[i] + inputs[j] + inputs[k] == 2020:\n                    return inputs[i] * inputs[j] * inputs[k]\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(n) for n in stdin.split()]\n    median_index = len(numbers) // 2\n    median = sorted(numbers)[median_index]\n    return str(median_index + 1)\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingYBFVGP-636/\"\"\"\n    # 1. input -> numbers_array\n    numbers_array = [int(n) for n in stdin.split(\" \")]\n\n    # 2. output -> len(numbers_array) - 1\n    return len(numbers_array) - 1\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return stdin\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 4 6 8 10\")\n    1\n    >>> solution(\"1\")\n    0\n    >>> solution(\"2 4\")\n    0\n    >>> solution(\"2 4 6 8 10\")\n    1\n    >>> solution(\"0\")\n    0\n    >>> solution(\"0 0\")\n    0\n    >>> solution(\"1 1\")\n    1\n    >>> solution(\"0 1\")\n    0\n    >>> solution(\"0 0 0\")\n    0\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(\" \")]\n    N = len(a)\n    return \"1\"\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return len(a) - len(set(a))"
    },
    {
        "number": 4054,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(input()))\n\n\n'''\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_flats = int(stdin.readline())\n    flats = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in range(1, num_of_flats - 1):\n        if flats[i - 1] == flats[i + 1] == 1:\n            continue\n        elif flats[i - 1] == 1 and flats[i + 1] == 0:\n            count += 1\n        elif flats[i - 1] == 0 and flats[i + 1] == 1:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res\n   ...\nprint(solution(stdin))"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lights = [int(el) for el in stdin.readline().split()]\n    x = 2\n    y = 1\n    while x < n:\n        if lights[x - 1]!= lights[x + 1]:\n            x += 1\n        else:\n            y = min(y, x)\n            x += 2\n    return y\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '2'"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    state = list(map(int, stdin.readline().strip().split(' ')))\n    state = [0] + state\n    res = 0\n    for i in range(1, n + 1):\n        if state[i] == 0 and state[i - 1] == 0 and state[i + 1] == 0:\n            res += 1\n    return str(res)\nprint(solution(stdin))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    flat = [int(i) for i in stdin.readline().split()]\n    ans = 0\n    for i in range(n):\n        if flat[i] == 1:\n            if i == 0 or flat[i - 1] == 0:\n                ans += 1\n            if i == n - 1 or flat[i + 1] == 0:\n                ans += 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline())\n\na = [int(x) for x in sys.stdin.readline().strip().split()]\n\nresult = 0\nfor i in range(N - 2):\n    if a[i] == 1 and a[i + 1] == 1 and a[i + 2] == 0:\n        result += 1\n\nprint(result)\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0423\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u0435\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044e \u0434\u0432\u043e\u0439\u043d\u043e\u0439 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0438 \u0438 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0439 \u043f\u043e \u043f\u0430\u043c\u044f\u0442\u044c\n    '''\n    \n    n = int(stdin.readline())\n    lights = [int(x) for x in stdin.readline().split(' ')]\n    return lights\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_flats = int(stdin[0])\n    flats = list(map(int, stdin[1].split(' ')))\n    result = 0\n    for i in range(1, len(flats)-1):\n        if flats[i]!= flats[i+1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #get input\n    n = int(stdin)\n    \n    #declare an empty list to hold the array and the sum of the divisors\n    array = []\n    array_sum = 0\n    \n    #declare a variable to hold the count\n    count = 0\n    \n    #convert the inputs into a list\n    for i in range(n):\n        array.append(int(stdin))\n    \n    #calculate the sum of the divisors of each number\n    for i in range(n):\n        #this will create a list of the divisors of each number\n        num_divisors = []\n        for j in range(1,array[i] + 1):\n            if array[i] % j == 0:\n                num_divisors.append(j)\n        \n        #this will add the sum of the divisors of each number to the array\n        array_sum += sum(num_divisors)\n    \n    #calculate the count of the divisors for each number\n    for i in range(n):\n        #this will create a list of the divisors of each number\n        num_divisors = []\n        for j in range(1,array[i] + 1):\n            if array[i] % j == 0:\n                num_divisors.append(j)\n        \n        #this will add the number of common divisors of each number to the count\n        count += len(set(num_divisors))\n    \n    #return the count\n    return count\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    cnt = 0\n    for i in a:\n        for j in a:\n            if i % j == 0:\n                cnt += 1\n    print(cnt)\n    return ''"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = {}\n    for x in a:\n        if x == 1:\n            continue\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    print(d)\n    count = 0\n    for x in a:\n        if x == 1:\n            continue\n        if x in d:\n            count += d[x]\n    print(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution.__doc__)\n    1\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    # a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    count = 0\n    for x in a:\n        count += len([y for y in a if y % x == 0])\n\n    return str(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\\\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_numbers = int(stdin.readline())\n    array_of_numbers = list(map(int, stdin.readline().split()))\n    if number_of_numbers == 1:\n        print(1)\n    else:\n        common_divisors = [1] * number_of_numbers\n        for i in range(1, number_of_numbers):\n            for j in range(0, i):\n                if array_of_numbers[i] % array_of_numbers[j] == 0:\n                    common_divisors[i] += 1\n        print(max(common_divisors))\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of common divisors of all elements from the input.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Output.\n    \"\"\"\n\n    N = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    x = a[0]\n    for i in a[1:]:\n        x = gcd(x, i)\n    return str(x)\n\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    d = [1] * n\n    for i in range(2, max(a) + 1):\n        d[i - 1] = 1\n        for j in range(i, n):\n            if a[j] % i == 0 and d[j] < i:\n                d[j] = i\n    return d\n"
    },
    {
        "number": 4056,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return str(num_of_divisors(stdin))\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    return len(set(a))\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    cnt = 0\n    for i in range(1,n):\n        if arr[i]!= arr[i-1]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = [int(i) for i in stdin.readline().split()]\n    l.sort()\n    cnt = 0\n    for i in range(n - 1):\n        if l[i] == l[i + 1]:\n            cnt += 1\n    return cnt + 1"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    pass\n\"\"\"\n\nsolution(\"4\\n1 2 3 4\")\n\nassert solution(\"4\\n1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, r = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    max_heaters = [0 for _ in range(n)]\n    for i in range(n):\n        heaters = [houses[i]]\n        left = i\n        right = i\n        while True:\n            if left - r >= 0 and max(heaters) < houses[left - r]:\n                heaters.append(houses[left - r])\n                left -= r\n            else:\n                break\n            if right + r <= n - 1 and max(heaters) < houses[right + r]:\n                heaters.append(houses[right + r])\n                right += r\n            else:\n                break\n        max_heaters[i] = len(heaters)\n    print(max(max_heaters))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    if r == 1:\n        return -1\n    if sum(arr) <= r:\n        return 1\n    answer = 1\n    while True:\n        if sum([1 for i in range(n) if i % 2 == 0 and arr[i] == 0 or i % 2 == 1 and arr[i] == 1]) == 0:\n            return answer\n        arr = [arr[i] if i % 2 == 0 and arr[i] == 1 or i % 2 == 1 and arr[i] == 0 for i in range(n)]\n        answer += 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n{'array': [[0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1]],\n'target': 3,'minimal': 3, 'answer': 3}\n\n\n{'array': [[1, 0, 0, 1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]],\n'target': 2,'minimal': 2, 'answer': 2}\n\n\n{'array': [[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0]],\n'target': 3,'minimal': 3, 'answer': 3}\n\n\n{'array': [[1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],\n[0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0]],\n'target': 3,'minimal': 3, 'answer': 3}\n\n-----\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.strip().split(' ')]\n    houses = [int(x) for x in stdin.strip().split(' ')]\n    \n    if r * 2 >= n:\n        print(0)\n        return\n    \n    if n < r * 2:\n        print(-1)\n        return\n    \n    count = 0\n    for house in houses:\n        if house:\n            count += 1\n    \n    for house in houses:\n        if house:\n            count += 1\n        if count == n:\n            print(count)\n            return\n        count -= 1\n\n    return -1\n\nsolution(stdin)\n\n'''\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split('\\n')[0].split())\n    houses = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    houses.append(0)\n    houses.append(1)\n    houses.sort()\n    res = 0\n    for i in range(n):\n        if houses[i + 1] - houses[i] - 1 < r:\n            res += 1\n    if res == 0:\n        return -1\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\""
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split(' ')))\n    houses = list(map(int, stdin.split(' ')))\n    hot_houses = []\n    for i in range(len(houses)):\n        if houses[i] == 1:\n            hot_houses.append(i)\n    def dfs(start, count):\n        for i in range(start, len(hot_houses)):\n            if i not in visited:\n                visited.add(i)\n                count += 1\n                if count == r:\n                    return count\n                else:\n                    return dfs(i + 1, count)\n        return count\n    visited = set()\n    ans = 0\n    for i in range(len(hot_houses)):\n        if i not in visited:\n            ans = max(ans, dfs(i + 1, 0))\n    if ans < r:\n        return '-1'\n    return ans\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    arr.sort()\n\n    left = 0\n    right = n - 1\n    middle = (left + right) // 2\n    while left < right:\n        if arr[middle] >= r:\n            right = middle\n            middle = (left + right) // 2\n        else:\n            left = middle + 1\n            middle = (left + right) // 2\n\n    if arr[middle] >= r:\n        return n\n\n    left = 0\n    right = n - 1\n    middle = (left + right) // 2\n    while left < right:\n        if arr[middle] >= arr[right] - r + 1:\n            right = middle\n            middle = (left + right) // 2\n        else:\n            left = middle + 1\n            middle = (left + right) // 2\n\n    if arr[middle] >= arr[right] - r + 1:\n        return n\n    return -1\n\nprint(solution(input()))"
    },
    {
        "number": 4058,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #pass"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution function takes the string input and returns the\n    answer as a string to stdout\n\n    Parameters\n    ----------\n    stdin : str\n        string of integers of the equation\n\n    Returns\n    -------\n    str\n        returns the integer solution of the equation\n\n    \"\"\"\n    n = int(stdin)\n    count = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            c = n - a - b\n            if a * b + c == n:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Task:\n    # Given a positive integer N,\n    # how many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?\n    #\n    # Strategy:\n    # The task is really about the following.\n    # A tuple (A, B, C) satisfies A \\times B + C = N\n    # if and only if A * B + C = N.\n    # Because (A, B, C) is a tuple, we are given that there exists integers A, B, C\n    # such that A * B + C = N.\n    # Suppose A \\in {1, 2, \\dots, N} and B \\in {1, 2, \\dots, N}.\n    # Then we can write A \\times B + C = N in terms of A * B + C.\n    # Therefore, we have a system of equations with N equations and N unknowns.\n    #\n    # We can write A \\times B + C = N in terms of A and C.\n    # Then, we can solve the system of equations.\n    # We can find the number of solutions with A \\in {1, 2, \\dots, N} and C \\in {1, 2, \\dots, N}.\n    # If this number is odd, then there exists no tuple (A, B, C) such that A * B + C = N.\n    # If this number is even, then there exists some tuple (A, B, C) such that A * B + C = N.\n    # We can then find all tuples (A, B, C) such that A * B + C = N.\n    #\n    # Because the number of tuples that satisfy A \\times B + C = N is the number of solutions for A \\in {1, 2, \\dots, N} and C \\in {1, 2, \\dots, N}.\n    # We can use a dynamic programming approach to solve this problem.\n    #\n    # Algorithm:\n    # The first few lines of code are just for input validation.\n    if len(stdin) < 1:\n        return \"\"\n    N = int(stdin)\n    if N < 2:\n        return 0\n\n    # We need to create a 2D array of size N + 1 by N + 1.\n    # To do that, we can use a 1D array.\n    # We can then access it like this: A[0][0], A[0][1], A[0][2],..., A[0][N], A[1][0], A[1][1], A[1][2],..., A[1][N], A[2][0], A[2][1], A[2][2],..., A[2][N],..., A[N][0], A[N][1], A[N][2],..., A[N][N]\n    # We can also create a 1D array and then create the 2D array from the 1D array using the numpy library.\n    A = np.zeros(N + 1, dtype=int)\n\n    # For each A in the 1D array, we need to compute the number of tuples such that A \\times B + C = N.\n    # We will store the result in another 1D array.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    result = np.zeros(N + 1, dtype=int)\n\n    # Now we need to do a nested loop to compute the number of tuples such that A \\times B + C = N.\n    # For each value A in the 1D array, we need to compute the number of solutions for C \\in {1, 2, \\dots, N} for each A.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    # For each A in the 1D array, we can compute the number of solutions for C \\in {1, 2, \\dots, N} for each A.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    # We will store the result in another 1D array.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    solutions = np.zeros(N + 1, dtype=int)\n\n    # Now we need to compute the number of solutions for each value A in the 1D array.\n    # We will do this for each value A in the 1D array and store the result in the 1D array.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    # For each value A in the 1D array, we will compute the number of solutions for C \\in {1, 2, \\dots, N} for each A.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    # We will store the result in the 1D array.\n    # For example, for N = 3, the result for A = 1, A = 2, A = 3, is [1, 3, 2].\n    for A in range(1, N + 1):\n        for C in range(1, N + 1):\n            # If A * B + C = N, then A * B + C = A * (B + C)\n            # or, if we use the equation above, we have A * (B + C) = N.\n            # Therefore, A * (B + C) = N.\n            # We can then write A * (B + C) = N in terms of A * B + C.\n            # If B + C = A, then A * (B + C) = A * B.\n            # Thus, we have A * B = A * (B + C) - C.\n            # We can then write A * B = (A * (B + C) - C) + C.\n            # We can then write A * B = N - C.\n            # Thus, we can say that A * B + C = N if and only if C = N - A * B.\n            if A * (B + C) - C == N:\n                solutions[A] += 1\n\n    # Now we can compute the number of tuples that satisfy A \\times B + C = N.\n    # If the number of solutions for A = 1, A = 2, A = 3,..., A = N is odd,\n    # then there is no tuple (A, B, C) such that A * B + C = N.\n    # If the number of solutions for A = 1, A = 2, A = 3,..., A = N is even,\n    # then there exists a tuple (A, B, C) such that A * B + C = N.\n    # We can now compute the number of solutions.\n    for A in range(1, N + 1):\n        result[A] = solutions[A]\n\n    # Now we can compute the number of tuples that satisfy A \\times B + C = N.\n    # If the number of solutions for A = 1, A = 2, A = 3,..., A = N is odd,\n    # then there is no tuple (A, B, C) such that A * B + C = N.\n    # If the number of solutions for A = 1, A = 2, A = 3,..., A = N is even,\n    # then there exists a tuple (A, B, C) such that A * B + C = N.\n    # We can now compute the number of solutions.\n    for A in range(1, N + 1):\n        result[A] = result[A] + solutions[A]\n\n    # We can now print the answer.\n    # We can loop over the 1D array and add all the values in it.\n    # This is the same as"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for a in range(1, stdin + 1):\n        for b in range(1, stdin + 1):\n            c = stdin - a - b\n            if a * b == c:\n                result += 1\n    return result\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    if N == 1:\n        count = 0\n    elif N == 2:\n        count = 1\n    else:\n        for i in range(1, N):\n            if N % i == 0:\n                for j in range(1, i):\n                    if j*j < N and i+j*j == N:\n                        count += 1\n    return str(count)\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Counts the number of unique tuples that satisfies\n    A * B + C = N\n    :param stdin: standard input\n    :return: str\n    \"\"\"\n    return str(count_tuples_of_integers_satisfying_a_b_c(stdin))\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the total number of tuples of integers that satisfy A \\times B + C = N.\n\n    >>> solution('3\\n')\n    3\n    >>> solution('4\\n')\n    8\n    >>> solution('5\\n')\n    20\n    '''\n    N = int(stdin.readline())\n    count = 0\n    for A in range(1, N // 2 + 1):\n        for B in range(1, N // 2 + 1):\n            C = N - A - B\n            if A * B <= C:\n                count += 1\n    return count\n"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import numpy as np\n    # YOUR CODE HERE\n    # conundrum: what the hell is wrong with the solution\n    n = int(stdin.readline().rstrip('\\n'))\n    cnt = 0\n    for a in range(1, n):\n        for b in range(1, n):\n            for c in range(1, n):\n                if a * b + c == n:\n                    cnt += 1\n    print(cnt)\n    return ''"
    },
    {
        "number": 4059,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a positive integer N.\n    How many tuples (A,B,C) of positive integers satisfy A \\times B + C = N?\n\n    :param stdin: input in string format\n    :return: solution in string format\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(((())\")\n    2\n    \"\"\"\n    res = 0\n    stack = []\n    for i in stdin:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                res += 1\n    res += len(stack)\n    return res\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return stdin\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(is_regular(stdin))"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s)\n    res = 0\n    for i in range(n):\n        if s[i] == \")\" and s[i + 1] == \"(\":\n            res += 1\n    print(res)"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    for i in stdin:\n        if i == ')':\n            m += 1\n    if m % 2 == 0:\n        return n * (m // 2)\n    else:\n        return 0"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    if n == 1:\n        return 0\n    brackets = stdin[1]\n    # stack = [(brackets[0], 0)]\n    stack = []\n    for i, bracket in enumerate(brackets):\n        if bracket == '(':\n            stack.append((bracket, i))\n        else:\n            # stack.append((bracket, i))\n            top_bracket, top_index = stack.pop()\n            if top_bracket == '(':\n                continue\n            else:\n                # stack.append((top_bracket, i))\n                stack.append((top_bracket, top_index))\n                stack.append((bracket, i))\n    open_brackets = len(stack)\n    print(open_brackets)\n    if open_brackets == 0:\n        return 0\n    # result = open_brackets + len(brackets)\n    result = len(brackets)\n    for index in range(len(brackets) - 1):\n        top_bracket, top_index = stack.pop()\n        if top_bracket == '(':\n            result -= 1\n        else:\n            result -= 2\n        if top_index < index:\n            # result -= 1\n            result += 1\n    return result\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def _is_balanced(string: str) -> bool:\n        brackets = [i for i in string]\n        stack = []\n        for bracket in brackets:\n            if bracket == '(':\n                stack.append(bracket)\n            else:\n                if len(stack) == 0:\n                    return False\n                if stack[-1] == '(':\n                    stack.pop()\n\n        return True if len(stack) == 0 else False\n\n    stdin = stdin.split('\\n')\n    if len(stdin)!= 2:\n        return 'The number of brackets must be equal to 2!'\n    if not _is_balanced(stdin[1]):\n        return 'The brackets must be balanced!'\n    string = stdin[1]\n    count = 0\n    for bracket in string:\n        if bracket == '(':\n            count += 1\n        if bracket == ')':\n            count -= 1\n        if count < 0:\n            return 'The brackets must be balanced!'\n    return count\n"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4060,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin[0]\n    bracket = stdin[1:]\n    bracket_dict = {'(':')', ')':'('}\n    bracket_counter = {'(':0, ')':0}\n    for char in bracket:\n        if bracket_counter['('] == 0 and char == '(':\n            bracket_counter['('] += 1\n        elif bracket_counter['(']!= 0 and char == '(':\n            bracket_counter['('] += 1\n        elif bracket_counter['(']!= 0 and char == ')':\n            bracket_counter['('] -= 1\n        elif bracket_counter['('] == 0 and char == ')':\n            bracket_counter[')'] += 1\n    print(bracket_counter)\n    for i in range(num):\n        if bracket_counter['(']!= bracket_counter[')']:\n            return i\n    return 0\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to HackerRank problem 'Maximum Substring by Deleting Characters'\n    \"\"\"\n    \n    # get input\n    s = stdin.strip()\n    t = stdin.strip()\n\n    # get the minimum length of the strings\n    min_len = min(len(s), len(t))\n\n    # get the number of characters that need to be deleted from each string to make a valid subsequence\n    num_chars_deleted = 0\n    for i in range(min_len):\n        # if the characters at the current index are not the same, add the number of characters between them\n        # to the number of characters that need to be deleted\n        if s[i]!= t[i]:\n            num_chars_deleted += 1\n    \n    # return the number of characters that need to be deleted\n    return num_chars_deleted\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:stdin.index(stdin[-1]) + 1]\n\nprint(solution(\"bbaba\"))\nprint(solution(\"bb\"))\n\nimport itertools\nimport collections\nimport functools\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    array = [s for s in stdin]\n    p1 = 0\n    p2 = 1\n    while p2 < len(array):\n        if array[p1]!= array[p2]:\n            result += 1\n        p1 += 1\n        p2 += 1\n    return result\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    sl = len(s)\n    tl = len(t)\n    if sl == tl:\n        return str(0)\n    return str(tl - len(set(s) & set(t)))"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"test\")\n    4\n    >>> solution(\"tst\")\n    3\n    >>> solution(\"tt\")\n    2\n    >>> solution(\"et\")\n    1\n    >>> solution(\"abcd\")\n    4\n    >>> solution(\"abcefgh\")\n    3\n    >>> solution(\"aaaaaaaaaaa\")\n    7\n    >>> solution(\"aaaaaaaaaab\")\n    7\n    >>> solution(\"aaaaaaaaabbbbb\")\n    7\n    >>> solution(\"aaaaaaaaaaaaaaaaaaaa\")\n    0\n    \"\"\"\n    return 4\n"
    },
    {
        "number": 4061,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    max_possible = 0\n    if b - a >= c - d:\n        max_possible = b - a\n    else:\n        max_possible = c - d\n\n    return str(max_possible * max_possible)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(x) for x in stdin.split(\" \"))\n    if a == b:\n        if c == d:\n            return str(a * b)\n        else:\n            return str(a * max(c, d))\n    else:\n        if c == d:\n            return str(max(a, b) * c)\n        else:\n            return str(max(a, b) * max(c, d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    return str(max(a * b, c * d))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the problem\n    \"\"\"\n    # Get the input\n    x, y = map(int, stdin.split())\n    \n    # Get the max\n    answer = x * y\n\n    # Return the answer\n    return str(answer)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = [int(x) for x in stdin.split(' ')]\n    if a <= 1 and b <= 1 and c <= 1 and d <= 1:\n        return str(1)\n    \n    if (b - a) < (d - c):\n        return str(b - a)\n    return str(d - c)"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(n) * int(n) for n in stdin.split(' ')))\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    if a * d > c * b:\n        print(b)\n    else:\n        print(c)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (a < 1 or a > 10 ** 9) or (b < 1 or b > 10 ** 9) or (c < 1 or c > 10 ** 9) or (d < 1 or d > 10 ** 9):\n        return -1\n    if b < a:\n        a, b = b, a\n    if d < c:\n        c, d = d, c\n    if a == b:\n        if d == c:\n            return 0\n        else:\n            return (d - c) // b\n    else:\n        if c == d:\n            return (b - a) // (d - c)\n        else:\n            return (b - a) // (d - c) + (d - c) // (b - a)\n"
    },
    {
        "number": 4062,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution of the problem\"\"\"\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(max(x * y for x in range(a, b + 1) for y in range(c, d + 1)))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"Return number of choices of K that make problem for ARCs and ABCs the same.\n\n  Args:\n      stdin: String of input\n\n  Returns:\n      String representation of output\n\n  Raises:\n      ValueError: if input cannot be converted into a positive integer\n  \"\"\"\n  num_problems, *problem_difficulties = [int(x) for x in stdin.split('\\n')]\n  if not problem_difficulties:\n    raise ValueError('No problems given.')\n  if num_problems % 2!= 0:\n    raise ValueError('Given number of problems is not an even number.')\n  if any(x < 1 for x in problem_difficulties):\n    raise ValueError('Given problem difficulties are not positive integers.')\n\n  # Total number of problems\n  num_arcs = num_problems // 2\n  # Number of problems requiring difficulty greater than or equal to K\n  num_greater_than_k = sum(1 for x in problem_difficulties if x >= 5)\n  # Number of problems requiring difficulty less than or equal to K\n  num_less_than_k = num_problems - num_greater_than_k\n  # Number of unique K values\n  num_k = max(problem_difficulties)\n  # Number of unique K - 1 values\n  num_k_minus_one = num_k - 1\n\n  return str(num_greater_than_k * num_k_minus_one + num_less_than_k * num_k_minus_one)\n\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  # your solution here\n  return \"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string that represents the solution to the problem.\"\"\"\n    def answer(stdin: str) -> str:\n        \"\"\"Return a string that represents the solution to the problem.\"\"\"\n        n = int(stdin.readline())\n        ds = [int(x) for x in stdin.readline().strip().split()]\n        return str(sum(1 for d in ds if d > n//2))\n    return str(answer(stdin))"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split(\" \")))\n    answer = 0\n    for i in range(1, math.ceil(max(d) / 2) + 1):\n        if i > 1:\n            answer += math.comb(n, i * 2)\n    return str(answer)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the problem.\n\n    >>> solution(\"6\\n9 1 4 4 6 7\")\n    '2'\n    \"\"\"\n    # read standard input\n    N = int(stdin.readline())\n    assert 1 <= N <= 10**5, \"N must be between 1 and 10**5\"\n    assert N % 2 == 0, \"N must be an even number\"\n    d = [int(x) for x in stdin.readline().split()]\n    assert len(d) == N, \"d must contain N numbers\"\n    assert all(1 <= d_i <= 10**5 for d_i in d), \"d must contain numbers between 1 and 10**5\"\n    # assert sum(d) == N\n\n    # get the answer\n    d.sort()\n    K = d[N//2]\n    return str(N // 2 + (d.count(K) % 2))\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2!= 0:\n        return -1\n    else:\n        sum_array = []\n        for i in range(1, N+1):\n            if i % 2 == 0:\n                sum_array.append(i)\n            else:\n                sum_array.append(i*3)\n        \n        sum_array.sort()\n        length = len(sum_array)\n        ans = 0\n        for i in range(length-1):\n            if sum_array[i] + 1 == sum_array[i+1]:\n                ans += 1\n        return ans\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution with Dynamic Programming'''\n    N = int(stdin.readline())\n    d = [int(x) for x in stdin.readline().split()]\n    dp = [0]*(N+1)\n    for i in range(1, N+1):\n        if d[i-1] < 6:\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = dp[i-1] + 1\n    for i in range(N+1):\n        dp[i] %= 1000000007\n    K = 5\n    if N % 2 == 0:\n        K = 6\n    for i in range(N):\n        if d[i] > K:\n            dp[i+2] = dp[i+1] + (K-K//2)\n            dp[i+2] %= 1000000007\n    return str(dp[N] % 1000000007)\n"
    },
    {
        "number": 4063,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *d = map(int, stdin.split())\n    return str(sum(d[i] > i for i in range(N // 2)) + 1)\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    ans = 0\n    curr_max = 0\n    for i in range(n):\n        curr_max += a[i]\n        if curr_max >= l and curr_max <= r:\n            ans += 1\n        if curr_max > r:\n            curr_max = 0\n    return ans\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n    a = a[::-1]\n    def count(t):\n        return sum(1 for i in a if i > t)\n\n    lo, hi = 0, h\n    best = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if count(mid) >= n:\n            if mid > best:\n                best = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return best\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    n, h, l, r = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(h + 1)] for _ in range(n + 1)]\n    dp[0][l] = 1\n    for i in range(n):\n        for j in range(h + 1):\n            if dp[i][j] == 0:\n                continue\n            for k in range(j + 1, r + 1):\n                dp[i + 1][k] += dp[i][j]\n                dp[i + 1][k] %= 10 ** 9 + 7\n    return sum(dp[-1][l:r + 1])\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u043d\u0430\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0445\u043e\u0440\u043e\u0448\u0438\u0445 \u043f\u0430\u0440\u044b \u0432\u0440\u0435\u043c\u0435\u043d\u0438.\n    \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n    \u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n    \"\"\"\n    h, n, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_time = 0\n    for t in range(n):\n        time = 0\n        for i in range(t, n):\n            if a[i] - (l + t) >= h:\n                break\n            if time + (a[i] - (l + t)) <= r:\n                time += (a[i] - (l + t))\n            else:\n                break\n        else:\n            max_time = max(max_time, time)\n    return max_time"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] >= l and a[i] <= r:\n            count += 1\n    return count\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # input\n    n, h, l, r = [int(x) for x in stdin.split()]\n\n    # process\n    count = 0\n    for a in [int(x) for x in stdin.split()[1:]]:\n        if a >= l and a <= r:\n            count += 1\n\n    # output\n    print(count)"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split('\\n')[0].split(' '))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    \n    \n    \n    good_times = []\n    curr_start = 0\n    for i in range(n):\n        curr_end = curr_start + a[i]\n        good_times.append((curr_start, curr_end))\n        curr_start = curr_end\n    good_times.append((curr_start, h))\n    print(good_times)\n    \n    \n    max_times = 0\n    for i in range(len(good_times) - 1):\n        curr_start, curr_end = good_times[i]\n        for j in range(i + 1, len(good_times)):\n            next_start, next_end = good_times[j]\n            if curr_start <= next_start and curr_end >= next_end:\n                max_times += 1\n                break\n    return max_times\n"
    },
    {
        "number": 4064,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, h, l, r = list(map(int, input[0].split()))\n    a = list(map(int, input[1].split()))\n    good = 0\n    for i in range(n):\n        if l <= a[i] <= r:\n            good += 1\n    return good\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    a = [0] + a\n\n    diff = [0] * (n + 1)\n    for i in range(n):\n        diff[i + 1] = a[i + 1] - a[i]\n\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(1, n):\n        dp[i + 1] = dp[i]\n        for j in range(i):\n            if diff[j] < diff[i] and diff[i] <= 2 * diff[j]:\n                dp[i + 1] = max(dp[i + 1], dp[j] + 1)\n    return dp[n]"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(solution)\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin)\n    array = list(map(int, stdin.split(' ')))\n\n    array.sort()\n    for i in range(total):\n        for j in range(i + 1, total):\n            if array[i] * 2 >= array[j]:\n                total -= 1\n                break\n    return total"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split()]\n    b = []\n    c = []\n    for i in range(n):\n        if i == 0 or i == 1:\n            b.append(a[i])\n        elif b[-1] <= 2 * a[i]:\n            b.append(a[i])\n        else:\n            c.append(i)\n    c.reverse()\n    for i in c:\n        b.pop(i)\n    return str(len(b))\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(max([int(stdin.split()[1:]) - int(stdin.split()[:-1])]))"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    num_problems, *problems_difficulties = [int(s) for s in stdin.splitlines()]\n    # sort the list in ascending order\n    problems_difficulties.sort()\n    max_problems_counter = 0\n    for num_problems_counter in range(len(problems_difficulties)):\n        problem_difficulty_current = problems_difficulties[num_problems_counter]\n        problem_difficulty_next = problems_difficulties[num_problems_counter + 1]\n        for problem_difficulty_current_counter in range(problem_difficulty_next - problem_difficulty_current):\n            max_problems_counter += 1\n    return max_problems_counter\n"
    },
    {
        "number": 4065,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin.readline())\n    # a = list(map(int, stdin.readline().split()))\n    n = 6\n    a = [4, 7, 12, 100, 150, 199]\n\n    def check(a):\n        greater_than_all = 0\n        for i in range(1, n):\n            if a[i] * 2 >= a[i - 1]:\n                greater_than_all += 1\n            else:\n                greater_than_all = 0\n        if greater_than_all == n - 1:\n            return True\n        return False\n\n    best = 0\n    while n > 1:\n        for i in range(n - 1):\n            if a[i] * 2 >= a[i + 1]:\n                a[i], a[i + 1] = a[i + 1], a[i]\n                best += 1\n                break\n        if check(a):\n            break\n    print(best)\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split(' ')]\n    numbers = sorted(numbers)\n    from math import gcd\n    print(numbers)\n    min_value = float('inf')\n    print(gcd(numbers[0],numbers[1]))\n    for i in range(n-1):\n        print(i, n-1)\n        min_value = min(min_value, gcd(numbers[i], numbers[i+1]))\n    print(min_value)\n    for i in range(n):\n        for j in range(n):\n            if gcd(numbers[i], numbers[j]) == min_value:\n                print(i+1, j+1)\n                return\n    return \"IMPOSSIBLE\"\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find two indices i, j such that lcm(a[i], a[j]) is minimum among all possible pairs of values\n    from the input string.\n\n    >>> solution(\"5 2 11 3 7\")\n    '1 4'\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(item) for item in stdin.split()[1:]]\n    a.sort()\n    result = [1, n]\n    for i in range(1, n):\n        # find the first number in the list that divides i and has the least remainder\n        result.append(i + 1)\n        while result[-1] * a[i] > a[i - 1] * result[-2]:\n            result.pop()\n    return f\"{result[1]} {result[2]}\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    def lcm(x: int, y: int) -> int:\n        return x * y // gcd(x, y)\n\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            if result < lcm(a[i], a[j]):\n                result = lcm(a[i], a[j])\n    return str(result)\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return None\n\n    length = int(stdin.split('\\n')[0])\n    array = list(map(int, stdin.split('\\n')[1].split()))\n    min_val = 1000000000000000\n    pair = None\n    for i in range(0, length):\n        for j in range(0, length):\n            if i!= j:\n                #print(i, j)\n                val = lcm(array[i], array[j])\n                if val < min_val:\n                    min_val = val\n                    pair = i, j\n    #print(min_val, pair)\n    if pair is None:\n        return''.join(map(str, [0,0]))\n    return''.join(map(str, pair))\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'yes' if given input can be divided by 2, else return 'no'.\"\"\"\n    n = int(stdin.readline())\n    ints = [int(x) for x in stdin.readline().split()]\n    lcm = 0\n    a, b = None, None\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm < ints[i] * ints[j] // gcd(ints[i], ints[j]):\n                lcm = ints[i] * ints[j] // gcd(ints[i], ints[j])\n                a, b = i, j\n    return '{} {}'.format(a + 1, b + 1)\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(num1, num2):\n        if num1 < num2:\n            num1, num2 = num2, num1\n        num1_factors = [n for n in range(1, num1 + 1) if num1 % n == 0]\n        num2_factors = [n for n in range(1, num2 + 1) if num2 % n == 0]\n\n        min_factor = min(num1_factors + num2_factors)\n        return min_factor\n\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n\n    min_lcm = 10 ** 7\n    lcm_indices = (-1, -1)\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            lcm_value = lcm(nums[i], nums[j])\n            if lcm_value < min_lcm:\n                min_lcm = lcm_value\n                lcm_indices = (i, j)\n\n    print(' '.join([str(i) for i in lcm_indices]))\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    d = []\n    for i in range(n):\n        for j in range(i+1, n):\n            d.append(gcd(a[i], a[j]))\n    d.sort(reverse=True)\n    for i in range(len(d)):\n        if d[i] == d[i-1]:\n            continue\n        else:\n            break\n    return''.join(map(str, [a.index(d[i])+1, a.index(d[i-1])+1]))\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    from math import gcd\n    \n    n = int(stdin)\n    a = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    \n    lcm = a[0]\n    \n    for i in range(1, n):\n        lcm = int(gcd(lcm, a[i])) * a[i]\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm % a[i] == 0 and lcm % a[j] == 0:\n                print(i + 1, j + 1)\n                return\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    c0 = s.count(\"0\")\n    c1 = s.count(\"1\")\n    c2 = s.count(\"2\")\n    max_c = max(c0, c1, c2)\n    min_c = min(c0, c1, c2)\n    s_0 = s.replace(\"2\", \"0\")\n    s_1 = s.replace(\"0\", \"1\")\n    s_2 = s.replace(\"1\", \"2\")\n    res_0 = s_0.replace(\"1\", \"0\", max_c - min_c)\n    res_1 = s_1.replace(\"0\", \"1\", max_c - min_c)\n    res_2 = s_2.replace(\"1\", \"2\", max_c - min_c)\n    res = min(res_0, res_1, res_2)\n    return res\n\n\nprint(solution(\"211200\"))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = stdin.count('0'), stdin.count('1'), stdin.count('2')\n    if a == 0:\n        return '0' * b + '1' * c\n    elif b == 0:\n        return '1' * a + '0' * c\n    else:\n        return '2' * a + '0' * c\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = ['0', '1', '2']\n    b = [0, 0, 0]\n    a = [[0, 1, 2], [1, 2, 0], [2, 0, 1]]\n    c = [0, 0, 0]\n    for i in range(n):\n        for j in range(3):\n            if stdin[i] == l[j]:\n                b[j] += 1\n                if i % 3 == 0:\n                    c[0] += 1\n                if i % 3 == 1:\n                    c[1] += 1\n                if i % 3 == 2:\n                    c[2] += 1\n    c[0] = (c[0] // 3)\n    c[1] = (c[1] // 3)\n    c[2] = (c[2] // 3)\n    if c[0] == c[1] and c[1] == c[2] and c[2] == c[0]:\n        return \"\".join(l[b.index(max(b))] * 3)\n    else:\n        if c[0] < c[1] and c[0] < c[2]:\n            r = c[0]\n        elif c[0] > c[1] and c[0] > c[2]:\n            r = c[1]\n        else:\n            r = c[2]\n        b[b.index(max(b))] -= r\n        return \"\".join(l[b.index(max(b))] * r)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ternary_num = stdin.replace('0', '').replace('1', '').replace('2', '')\n    ternary_num = list(ternary_num)\n    ternary_num.sort()\n    return ternary_num[0] * 3\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"120120\"\n    return \"001201\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    res = sorted(stdin)\n    for i in range(len(res)):\n        if res[i] == '1':\n            res[i] = '0'\n        elif res[i] == '2':\n            res[i] = '1'\n        else:\n            res[i] = '2'\n    return ''.join(res)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, s = stdin.split(\"\\n\")\n    n = len(s)\n    a, b, c = 0, 0, 0\n    for x in s:\n        if x == '0':\n            a += 1\n        elif x == '1':\n            b += 1\n        else:\n            c += 1\n    n -= min(a, b, c)\n    if n % 3 == 0:\n        x = n // 3\n        return \"0\" * x + \"1\" * x + \"2\" * x\n    elif n % 3 == 1:\n        x = (n // 3) - 1\n        return \"0\" * x + \"1\" * x + \"2\" * (x + 1)\n    else:\n        x = (n // 3) - 2\n        return \"0\" * x + \"1\" * (x + 1) + \"2\" * (x + 2)\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    str_len = len(stdin)\n    result_len = (str_len // 3) + (1 if str_len % 3 else 0)\n    result = '0' * result_len\n    count = 0\n    for c in stdin:\n        if c == '0':\n            count += 1\n        elif c == '1':\n            count -= 1\n        elif c == '2':\n            count += 2\n        if count > result_len:\n            return result\n        elif count < 0:\n            return result[:count] + c + result[count:]\n        result = result[:count] + c + result[count:]\n    return result\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    len_s = int(stdin.split()[0])\n    if len_s % 3 == 0:\n        return stdin[::-1]\n    \n    # turn string into number\n    s = int(stdin.replace('0', '1').replace('1', '2').replace('2', '0'), base=3)\n    \n    # find string of s with 3s\n    if len_s % 3!= 0:\n        s = s * (len_s // 3) + s\n    \n    # find smallest\n    smallest = s\n    s = s // 3\n    \n    while s > 0:\n        if s < smallest:\n            smallest = s\n        s = s // 3\n    \n    return stdin[::-1].replace(str(smallest), '2')\n"
    },
    {
        "number": 4067,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1:-1]]\n    a.sort()\n    cnt = 1\n    for i in range(1, len(a)):\n        cnt *= (a[i] - a[i - 1] + 1)\n    return str(cnt % 1000000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n@pytest.mark.parametrize(\n    \"inp, out\",\n    [\n        (\"6 1\\n3\", 4),\n        (\"1 1\\n1\", 1),\n        (\"2 1\\n1\", 2),\n        (\"2 2\\n1\", 2),\n        (\"3 1\\n1\", 2),\n        (\"3 2\\n1\", 2),\n        (\"10 1000000000\\n1\", 999999999),\n        (\"10 1000000000\\n10\", 999999990),\n        (\"10 1000000000\\n10000000\", 999999999),\n        (\"10 1000000000\\n100000000\", 999999990),\n    ],\n)\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(6) + '\\n' + str(1) + '\\n' + str(3) + '\\n' + str(2) + '\\n' + str(4) + '\\n' + str(6))\n    '4'\n    \"\"\"\n    N, M = [int(x) for x in stdin.split()]\n    broken = [int(x) for x in stdin.splitlines()[1 : M + 1]]\n    broken_set = set(broken)\n    result = 0\n    for i in range(N):\n        if i not in broken_set:\n            result += 1\n    return str(result % 1000000007)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    a = map(int, stdin.split(\" \"))\n    dp = [0] * N\n    dp[0] = 1\n    for i in range(1, M+1):\n        if i > N-1:\n            break\n        dp[i] = (dp[i-1] + dp[i]) % 1000000007\n    return dp[N-1]\nprint(solution(stdin))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A function that returns a string containing the solution to the\n    fibonacci sequence problem.\n    >>> solution(\"6 1\\n3\\n\")\n    '4'\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # My Solution: O(n) Time and O(1) Space\n    n, m = [int(x) for x in stdin.split(' ')]\n    if n == 1:\n        return 1\n    sums = {0}\n    for _ in range(m):\n        sums |= {x + 1 for x in sums}\n        sums |= {x - 1 for x in sums if x!= 0}\n    return len(sums) % int(1e9)\n\n    # Other Solution: O(n) Time and O(1) Space\n    n, m = [int(x) for x in stdin.split(' ')]\n    dp = [1] + [0] * n\n    for _ in range(m):\n        dp = [0] + [dp[i] + dp[i-1] for i in range(1, n+1)]\n    return sum(dp) % int(1e9)\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 1\\n3')\n    4\n    >>> solution('6 3\\n1 2 3 4 5 6')\n    1\n    \"\"\"\n    N, M = map(int, stdin.split(' '))\n    broken = [int(step) - 1 for step in stdin.split('\\n')[1: M + 1]]\n    not_broken = [i for i in range(N) if i not in broken]\n    return pow(2, N - 1, 1000000) - sum(pow(2, i, 1000000) for i in not_broken)\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    A = [int(x) for x in stdin.split('\\n')[1:]]\n    def f(n,a):\n        return n*f(n-1,a) if n>0 else 1\n    def g(n,a):\n        return n*g(n-2,a) if n>1 else 0\n    return sum(f(N,a)//f(N-i-1,a) if f(N-i-1,a) else 0 for i,a in enumerate(A))//f(M,A[-1])\n\nprint(solution(stdin.read()))"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\nn, m = map(int, stdin.readline().strip().split())\na = list(map(int, stdin.readline().strip().split()))\n"
    },
    {
        "number": 4068,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Counts the number of ways to climb up the stairs without\n    setting foot on the broken stairs.\n    \"\"\"\n    n, m = map(int, stdin.readline().split())\n    stair = list(map(int, stdin.readline().split()))\n    solutions = [0] * n\n    solutions[0] = 1\n    for i in range(1, n):\n        solutions[i] = 0\n        for j in range(i):\n            if (j + stair[j]) <= i:\n                solutions[i] = (solutions[i] + solutions[j]) % (10 ** 9 + 7)\n        solutions[i] = (solutions[i] + m - i) % (10 ** 9 + 7)\n    print(solutions[n - 1])\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get input from stdin\n    X, K, D = list(map(int, stdin.split(\" \")))\n    # YOUR CODE HERE\n    if abs(X) <= K * D:\n        return abs(X)\n    elif X < 0:\n        return abs(X - K * D)\n    else:\n        return abs(X + K * D)\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the smallest possible absolute value of the destination.\n\n    >>> solution(\"6 2 4\")\n    2\n    >>> solution(\"-5 -4 -3\")\n    2\n    \"\"\"\n    return str(int(stdin.split()[1]) - int(stdin.split()[2]))\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum absolute value of coordinate of the destination\"\"\"\n    \n    coordinate, moves, result = map(int, stdin.split(' '))\n    print(2 * moves - abs(coordinate))\n    \n    return result\n    \n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(x) for x in stdin.split()]\n\n    return str(min(abs(x - d * k), abs(x + d * k)))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Write your code here\n    x, k, d = [int(i) for i in stdin.split()]\n    \n    if abs(k) < abs(x):\n        print(x - k * d)\n    else:\n        print(abs(d) - abs(x - k * d))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    _, K, D = [int(x) for x in stdin.split()]\n    result = 0\n    if K == 0:\n        return 0\n    if K > 0:\n        result = abs(D - K)\n    else:\n        result = abs(D + K)\n    return result\n"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = [int(n) for n in stdin.strip().split(' ')]\n    print(min(abs(x - k * d), abs((x + k * d) - x)))"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = [int(elem) for elem in stdin.strip().split(' ')]\n    print(abs(X - K * D))\n    return ''"
    },
    {
        "number": 4069,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split(' '))\n    return X-D+1 if K%2 == 1 else X-D-1"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for s in stdin:\n        answer += int(s)\n    return str(answer)\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_layer(layer):\n        return (int(stdin[:layer]) + int(stdin[layer:])) * 2\n\n    def return_index_of_largest_value_in_array(array):\n        largest_index = 0\n        largest_value = array[0]\n\n        for i in range(1, len(array)):\n            if array[i] > largest_value:\n                largest_index = i\n                largest_value = array[i]\n\n        return largest_index\n\n    def return_largest_value(array):\n        largest_value = array[0]\n\n        for i in range(1, len(array)):\n            if array[i] > largest_value:\n                largest_value = array[i]\n\n        return largest_value\n\n    def add_largest_value_to_smaller_index(array, largest_index):\n        array[largest_index] = array[largest_index] + array[largest_index + 1]\n        array[largest_index + 1] = array[largest_index]\n\n    def return_index_of_smallest_value_in_array(array):\n        smallest_index = 0\n        smallest_value = array[0]\n\n        for i in range(1, len(array)):\n            if array[i] < smallest_value:\n                smallest_index = i\n                smallest_value = array[i]\n\n        return smallest_index\n\n    def return_smallest_value(array):\n        smallest_value = array[0]\n\n        for i in range(1, len(array)):\n            if array[i] < smallest_value:\n                smallest_value = array[i]\n\n        return smallest_value\n\n    layer = 1\n    layer_number = int(stdin)\n    array = [int(i) for i in stdin]\n\n    while layer_number > calculate_layer(layer):\n        layer += 1\n        array.append(calculate_layer(layer))\n\n    while layer < calculate_layer(layer):\n        largest_index = return_index_of_largest_value_in_array(array)\n        add_largest_value_to_smaller_index(array, largest_index)\n        largest_value = return_largest_value(array)\n        array = [largest_value] + array[0:layer]\n        layer += 1\n        layer_number = int(stdin)\n        array = [int(i) for i in stdin]\n\n    return return_smallest_value(array)\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 ** int(stdin) - 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(ceil(log10(int(stdin)) / 3))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while True:\n        n = stdin\n        stdin = int(stdin)\n        while n > 0:\n            n //= 10\n            count += 1\n        if count > 1:\n            break\n        stdin = str(stdin)\n        count = 0\n    return count\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\nprint(solution(input()))"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4070,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(input())\n    return x * (x + 1) // 2\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(2 ** int(stdin) - 1)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(a * b * c)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if a % 2 == 0:\n        print(a * (a + 1) // 2)\n    else:\n        print((a * (a + 1)) // 2 + (a * a) // 2)\n        return (a * (a + 1)) // 2 + (a * a) // 2"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    return result\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return a * (a + 1) // 2\n    else:\n        return a * (a + 1) // 2 + a\n    return int(stdin)"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(15*stdin)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(a * a * a)\n"
    },
    {
        "number": 4071,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 20:\n        print(a)\n    else:\n        print(a ** 2)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 13 and a <= 99:\n        return 0\n    elif a >= 100 and a <= 999:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return stdin"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 12)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = str(a)\n    b = b[::-1]\n    sum = 0\n    for i in range(0,len(b)):\n        sum += int(b[i]) * (10**i)\n    if a == sum:\n        return 1\n    else:\n        return 0\n\nprint(solution('13'))"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % 2)\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if int(stdin) % 2 else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return '0' if a % 2 else '1'"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number % 2 == 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Test\"\"\"\n    n = int(stdin)\n    n1 = n // 10\n    n2 = n % 10\n    if n2 == 0:\n        return 1\n    else:\n        return 0"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = []\n    for i in stdin:\n        x.append(int(i))\n    if len(x) > 1:\n        n = len(x)\n        count = 0\n        while True:\n            for i in range(n):\n                for j in range(i + 1, n):\n                    if x[i] == x[j]:\n                        count += 1\n            if count == 0:\n                return x[0]\n            x.append(count)\n            count = 0\n    else:\n        return x[0]\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a: List[int] = [int(stdin) for stdin in stdin]\n    n = len(a)\n    a.sort()\n    if n == 1:\n        return str(a[0])\n    if n == 2:\n        if a[0] == 1:\n            return str(a[1])\n        else:\n            return str(a[0] - 1)\n\n    if n == 3:\n        if a[0] == 1:\n            return str(a[1] + a[2])\n        else:\n            return str(a[0] - 1) +'' + str(a[1] + a[2])\n    return str(a[0] - 1) +'' + str(a[1] + a[2])\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(s) for s in stdin.split()]\n    return sum(max(a) - a)\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().split()]\n    return n\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"hello\"\n\nprint(solution(stin))\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    s = sum(a)\n    b = s % 2\n\n    if b == 0:\n        print(0)\n    else:\n        print(1)\n\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # create a list of the integers\n    nums = stdin.split(' ')\n\n    # convert to int\n    nums = list(map(int, nums))\n\n    # create a list of the numbers\n    # but only the even numbers\n    evens = [num for num in nums if num % 2 == 0]\n\n    # sort and return the maximum element\n    return sorted(evens)[-1]\n"
    },
    {
        "number": 4073,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8 7\\n8 1\\n6 10\\n999999733 999999732')\n    '2\\n8\\n1\\n999999733\\n1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        min_value = int(1e9)\n        for i in range(k):\n            min_value = min(min_value, n // (k - i))\n        print(min_value)\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip().split()\n    n = int(line[0])\n    k = int(line[1])\n    memo = [1] + [0] * n\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            memo[j] = memo[j] + memo[j - i]\n    return memo[-1]"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 8 7\n   ... 8 1\n   ... 6 10\n   ... 9999999733 999999732\n   ... 9999999733 999999733\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 9999999733 999999732\n   ... 9999999733 999999733\n   ... ''')\n    '1'\n    \"\"\"\n   ..."
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport unittest\nimport sys\n\n\nclass Test_Case_Expected(unittest.TestCase):\n    def test_case_01(self):\n        self.assertEqual(solution('8 7\\n8 1'), 2)\n\n    def test_case_02(self):\n        self.assertEqual(solution('8 7\\n8 10'), 8)\n\n    def test_case_03(self):\n        self.assertEqual(solution('6 10\\n999999733 999999732'), 1)\n\n    def test_case_04(self):\n        self.assertEqual(solution('6 10\\n999999733 999999733'), 1)\n\n    def test_case_05(self):\n        self.assertEqual(solution('1 1\\n1 1'), 1)\n\n    def test_case_06(self):\n        self.assertEqual(solution('1 1\\n1 1'), 1)\n\n    def test_case_07(self):\n        self.assertEqual(solution('999999733 999999732\\n999999733 999999733'), 1)\n\n    def test_case_08(self):\n        self.assertEqual(solution('999999733 999999732\\n999999733 999999733'), 1)\n\n    def test_case_09(self):\n        self.assertEqual(solution('999999733 999999732\\n999999733 999999733'), 1)\n\n    def test_case_10(self):\n        self.assertEqual(solution('999999733 999999732\\n999999733 999999733'), 1)\n\n    def test_case_11(self):\n        self.assertEqual(solution('999999733 999999732\\n999999733 999999733'), 1)\n\n    def test_case_12(self):\n        self.assertEqual(solution('999999733 999999732\\n999999733 999999733'), 1)\n\n    def test_case_13(self):\n        self.assertEqual(solution('999999733 999999732\\n999999733 999999733'), 1)\n\n    def test_case_14(self):\n        self.assertEqual(solution('999999733 999999732\\n999999733 999999733'), 1)\n\n    def test_case_15(self):\n        self.assertEqual(solution('999999733 999999732\\n999999733 999999733'), 1)\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n\n    for i in range(1, num+1):\n        n = int(stdin)\n        k = int(stdin)\n        count = 0\n        for j in range(k):\n            count += i // k\n            i = i % k\n        if n == count:\n            print(i)\n            break\n\n    return ''\n"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n\n    \ubb38\uc81c \uc124\uba85\n    Polycarp wants to buy exactly $n$ shovels. The shop sells packages with shovels. The store has $k$ types of packages: the package of the $i$-th type consists of exactly $i$ shovels ($1 \\le i \\le k$). The store has an infinite number of packages of each type.\n    Polycarp wants to choose one type of packages and then buy several (one or more) packages of this type. What is the smallest number of packages Polycarp will have to buy to get exactly $n$ shovels?\n\n    \uc785\ub825\uc124\uba85\n    \uccab\uc9f8 \uc904\uc5d0 \uc815\uc218 $t$ ($1 \\le t \\le 100$)\u00a0\u2014 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc758 \uac1c\uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \uc815\uc218\uc774\ub2e4.\n    \ub458\uc9f8 \uc904\ubd80\ud130 $t$\uac1c\uc758 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uac00 \uc8fc\uc5b4\uc9c4\ub2e4.\n    \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \ud55c \uc904\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uace0, \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 $n$ \uc774\uc0c1 $n$ \uc774\ud558\uc758 \uc591\uc758 \uc815\uc218\uc640 $k$ \uc774\uc0c1 $k$ \uc774\ud558\uc758 \uc815\uc218\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4.\n\n    \ucd9c\ub825\uc124\uba85\n    \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\uc5d0 \ub300\ud574\uc11c \uc8fc\uc5b4\uc9c4 \ubb38\uc81c\uc758 \ub2f5\uc744 \ucd9c\ub825\ud55c\ub2e4.\n    \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub9c8\ub2e4 \uc904\uc758 \uc2dc\uc791\uc5d0 \u201c#C\u201d\ub97c \ucd9c\ub825\ud55c\ub2e4.\n    C\ub294 \ucf00\uc774\uc2a4 \ubc88\ud638\uc774\ub2e4.\n    \ucd9c\ub825\ud574\uc57c \ud560 \uc815\ub2f5\uc774 \uc5c6\ub294 \uacbd\uc6b0\uc5d0\ub294 \ucd9c\ub825\ud558\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4.\n    \"\"\"\n    test_case = int(stdin.readline().rstrip())\n    for _ in range(test_case):\n        n, k = list(map(int, stdin.readline().split()))\n        min_val = k\n        for i in range(1, k + 1):\n            min_val = min(min_val, k // i)\n        print(min_val)\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute and return the minimum number of packages.\"\n    pass\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, M = [int(x) for x in stdin.split('\\n')[0].split()]\n    C = int(stdin.split('\\n')[1])\n    switches = stdin.split('\\n')[2:]\n    p_m = stdin.split('\\n')[3:]\n    flip = []\n    for i in range(M):\n        if p_m[i] == '1':\n            flip.append(i+1)\n    \n    count = 0\n    for i in range(0, 2**N, 2):\n        count += 1 if ((i//2)//(2**N))%2 == C and all(flip[((i//2)//(2**N))%2^j] for j in range(M)) else 0\n    return str(count)\n    pass"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    switches = []\n    for i in range(n):\n        k = int(stdin.split(\" \")[i * 2 + 1])\n        for j in range(k):\n            switches.append(int(stdin.split(\" \")[i * 2 + 2 + j]))\n    p = [int(x) for x in stdin.split(\" \")[2 * n:]]\n    bulbs = [[] for _ in range(m)]\n    for i in range(m):\n        for j in range(len(switches)):\n            if switches[j] % 2 == p[i]:\n                bulbs[i].append(j + 1)\n    print(len([x for x in bulbs if len(x) == len(set(x))]))\n    return \"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    switch_count, bulb_count = map(int, stdin.split(\" \"))\n    switch_list = list(map(int, stdin.split(\"\\n\")[:switch_count]))\n    bulb_list = list(map(int, stdin.split(\"\\n\")[switch_count:]))\n    p_list = list(map(int, stdin.split(\"\\n\")[switch_count + 1:]))\n    # count_list = [0 for i in range(bulb_count)]\n\n    # for i in range(bulb_count):\n    #     for j in range(switch_count):\n    #         if p_list[i] == 1 and switch_list[j] % 2 == 1:\n    #             count_list[i] += 1\n\n    # result = 0\n    # for i in range(bulb_count):\n    #     if count_list[i] % 2 == 0:\n    #         result += 1\n\n    # return str(result)\n\n    count_list = [0 for i in range(bulb_count)]\n\n    for i in range(bulb_count):\n        for j in range(switch_count):\n            if p_list[i] == 1 and switch_list[j] % 2 == 1:\n                count_list[i] += 1\n\n    result = 0\n    for i in range(bulb_count):\n        if count_list[i] % 2 == 0:\n            result += 1\n\n    return str(result)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = [int(x) for x in stdin.strip().split(' ')]\n    k = [int(x) for x in stdin.strip().split(' ')]\n    p = [int(x) for x in stdin.strip().split(' ')]\n    s = [[int(x) for x in stdin.strip().split(' ')] for _ in range(m)]\n    return solve(n, m, k, p, s)\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # parse input\n    # num_of_bulbs, num_of_switches, switches = parse_input(stdin)\n    # ans = 0\n    # for i in range(2 ** num_of_bulbs):\n    #     # i is binary representation of i in decimal\n    #     on = 0\n    #     # iterate over the binary representation and check if the num is congruent to p mod 2\n    #     for j in range(num_of_bulbs):\n    #         if i & (1 << j):\n    #             on += switches[j] % 2\n    #     # if the number of on switches are congruent to p mod 2, then all the bulbs are lighted and it is a valid combination\n    #     if on % 2 == p[j]:\n    #         ans += 1\n    # print(ans)\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    lines = stdin.splitlines()\n\n    n_m = tuple(map(int, lines[0].split()))\n    n = n_m[0]\n    m = n_m[1]\n    k_switch = tuple(map(int, lines[1].split()))\n\n    p = tuple(map(int, lines[2].split()))\n    k_bulb = tuple(map(int, lines[3].split()))\n\n    counter = 0\n    for i in range(n):\n        k = k_switch[i]\n        for j in range(n):\n            if (j + 1) % k == 0:\n                if p[i] % 2 == 0:\n                    counter += 1\n                elif p[j] % 2 == 1:\n                    counter += 1\n    return counter\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. Feel free to use as many code cells as needed.\n\n    Input:\n        stdin (string): the input string from STDIN\n\n    Output:\n        stdout (string): the output string to STDOUT\n\n    \"\"\"\n\n    #! YOUR CODE HERE\n    #! Print the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs.\n    #! The number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs is the number of \"on\" and \"off\" states of the switches among which\n    #! there is no \"on\" state which is congruent to 0 modulo 2.\n    #! HINT: Convert the number of switches that are \"on\" to binary.\n    #!       If you find the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs, print it in decimal form.\n    #!       For example, if the number of switches that are \"on\" is 5, we can have 4 \"on\" states and 1 \"off\" state.\n    #!           There are four possible combinations of states of the switches among which there is no \"on\" state that\n    #!           lights all the bulbs: (off, off), (off, on), (on, off), (on, on).\n    #!           Among them, only (off, off) lights all the bulbs, so we should print 1.\n\n    #! GET NUMBER OF SWITCHES\n    n_switch, n_bulb = [int(x) for x in stdin.split(' ')]\n\n    #! CREATE LIST OF SWITCHES\n    switch_list = []\n    for i in range(n_switch):\n        switch_list.append(int(stdin.split(' ')[i + 1]))\n\n    #! CREATE LIST OF MODULOS\n    mod_list = [int(x) for x in stdin.split(' ')[n_switch + 1:]]\n\n    #! SET VARIABLE TO 0\n    count = 0\n    #! COUNT NUMBER OF ON STATES\n    for i in range(n_bulb):\n        #! GET ON MODULO\n        on_mod = mod_list[i] % 2\n        #! IF NUMBER OF ON STATES IS INCORRECT\n        if switch_list[i] % 2!= on_mod:\n            #! ADD 1 TO COUNTER\n            count += 1\n\n    #! PRINT NUMBER OF COMBINATIONS\n    print(count)\n\n    #! YOUR CODE HERE\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4075,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to solve the problem.\n\n    Parameters:\n    stdin: input in string format\n\n    Returns:\n    output in string format\n    \"\"\"\n    N, M = map(int, stdin.split(' '))\n    s = dict()\n    k = dict()\n    p = dict()\n    for i in range(N):\n        n = list(map(int, stdin.split(' ')[2 * i + 1 : 2 * i + 3]))\n        s[i + 1] = n\n        k[i + 1] = len(n)\n        p[i + 1] = n[0]\n    k = {i + 1: k[i + 1] for i in range(N)}\n    p = {i + 1: p[i + 1] for i in range(N)}\n    ans = 0\n    for i in range(1, M + 1):\n        for j in range(1, N + 1):\n            if (j in k) and ((p[j] % 2) == (k[j] % 2)):\n                ans += 1\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    H = 12 * H\n    M = 60 * M\n    return (A - B) * (H + M) / (2 * B)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h = int(stdin[0])\n    m = int(stdin[1])\n    a = int(stdin[2])\n    b = int(stdin[3])\n\n    angle = m / 60 * 360\n    m *= math.pi / 180\n\n    d = (math.sqrt(a ** 2 + b ** 2) * h * math.cos(m)) / 360\n    return round(d, 9)\n\nprint(solution(input().split()))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.strip().split())\n    h = 0.5 * (A + B)\n    m = 0.5 * (H + M)\n    return str(round(h * m, 9))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(i) for i in stdin.split()]\n    d = ((B - A) / (2 * 3.14159265358979323846 * H * 1))\n    d = round(d * 3600 * 360)\n    d = (d / 360) % 60\n    d = (d * 100) % 100\n    d = round(d * 3600 * 360)\n    d = (d / 360) % 60\n    d = (d * 100) % 100\n    return str(d) + 'cm'\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = [int(i) for i in stdin.split()]\n    return f\"{A*100+B:.9f}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = list(map(int, stdin.split()))\n    # hours = H*12 + M/60\n    # minutes = M - hours*60\n    # distance = A*cos(minutes/60*2*pi/12) + B*sin(minutes/60*2*pi/12)\n    # distance = A + B\n    return str(A+B)\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A, B, H, M = [int(x) for x in stdin.split(' ')]\n    return \"{:.10f}\".format(sqrt(A**2 + B**2) - 2*H*M/360)\n    '''\n    A, B, H, M = [int(x) for x in stdin.split(' ')]\n    return \"{:.10f}\".format((A**2 + B**2)**0.5 - 2*H*M/360)"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    H = int(stdin[2])\n    M = int(stdin[3])\n    while True:\n        #print(A, B, H, M)\n        #print(A + B, A - B, H + M, H - M)\n        if (A + B == H + M and A - B == H - M) or (A + B == H - M and A - B == H + M):\n            break\n        if A + B > H + M:\n            H += 1\n        else:\n            H -= 1\n        if A - B < H:\n            M += 1\n        else:\n            M -= 1\n        if A - B < H and M - B > H:\n            A -= 1\n            B += 1\n        elif A + B > H and M + B > H:\n            A += 1\n            B -= 1\n        elif A - B < H and M - B < H:\n            A += 1\n            B -= 1\n        elif A + B > H and M + B < H:\n            A -= 1\n            B += 1\n        else:\n            break\n    return f\"{A-B} {B-A}\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split(' '))\n    h = h * 12\n    m = m * 60\n\n    h_rad = math.radians(h)\n    m_rad = math.radians(m)\n\n    h_dist = a * math.cos(h_rad) + b * math.cos(h_rad)\n    m_dist = a * math.cos(m_rad) + b * math.cos(m_rad)\n\n    print(round(h_dist + m_dist, 9))\n"
    },
    {
        "number": 4076,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = list(map(int, stdin.split()))\n\n    def compute_angle(h, m):\n        angle = 6 * (h + m / 60) - 3\n        return (angle + 360) % 360\n\n    def compute_dist(a, b, angle):\n        dist = (a * b) / (a ** 2 + b ** 2 - 2 * a * b * math.cos(math.radians(angle)))\n        return dist\n\n    hour = compute_angle(h, m)\n    minute = (hour + m / 60) % 360\n    x = compute_dist(b, a, hour)\n    y = compute_dist(a, b, minute)\n    return f'{x} {y}'\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Enter your code here. Read input from STDIN. Print output to STDOUT'\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of pairs of indices $(l, r)$\n    such that the value of median of $a_l, a_{l+1}, \\dots, a_r$\n    is exactly the given number $m$.\n\n    Parameters\n    ----------\n    stdin\n        The input string.\n\n    Returns\n    -------\n    str\n        The number of suitable pairs.\n    \"\"\"\n\n    data = [int(i) for i in stdin.splitlines()[1].split()]\n    data.sort()\n    m = int(stdin.splitlines()[0].split()[1])\n\n    low, high = 0, len(data) - 1\n    res = 0\n    while low < high:\n        if data[low] == m:\n            res += high - low\n            low += 1\n        elif data[low] < m:\n            low += 1\n        else:\n            high -= 1\n    print(res)\n    return ''\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    return str(len([1 for i in range(len(a)-1) for j in range(i+1, len(a)) if (a[i] + a[j]) % 2 == m]))\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find number of pairs of indices\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Theorem:\n    If n is even and the sequence a_1, a_2,..., a_n is ordered in non-decreasing order, then the median is equal to a_n/2.\n    \"\"\"\n\n    n, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n\n    # f(n, m) = f(n-1, m) + f(n-1, m-1) - f(n-1, m-2)\n    # f(n, m) = f(n-1, m) + f(n-1, m-1) + f(n-1, m-2) - f(n-1, m-3)\n\n    # dp[i][j] - number of sequences having length i which have j medians\n    dp = [\n        [0] * (m + 1)\n        for _ in range(n + 1)\n    ]\n\n    # median is the first element in the sequence\n    dp[1][1] = 1\n    # median is the last element in the sequence\n    dp[1][0] = 1\n\n    # last element is always a median\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j]\n            if nums[i - 1] == j:\n                dp[i][j] += 1\n\n    # if the sequence has odd length\n    if n % 2!= 0:\n        for i in range(1, m + 1):\n            dp[n][i] = dp[n - 1][i]\n\n    return dp[n][m]\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    c = 0\n    for i in range(n):\n        s = sorted(a[i:])\n        if m == s[(n - i - 1) // 2]:\n            c += 1\n    return str(c)\n"
    },
    {
        "number": 4077,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of pairs of indices such that the value of median of the sequence is exactly the given number m.\"\"\"\n    pass\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = [a[i] for i in range(n)]\n    for i in range(m):\n        l, r = map(int, stdin.split(' '))\n        for j in range(l, r + 1):\n            b[j - 1] += 1\n    d = max(b) - min(b)\n    q = [i for i in range(m) if b[i] == d]\n    return str(d) + '\\n' + str(q) + '\\n' +''.join(map(str, b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(a: list[int], segments: list[list[int]]) -> list[int]:\n        \"\"\"\n        >>> f([1, 2, 3, 4, 5], [[1, 3], [2, 4], [5, 6], [4, 5], [3, 4]])\n        [4, 1, 4, 2, 2]\n        \"\"\"\n        segments = sorted(segments, key=lambda x: x[1])\n        res = [0] * len(a)\n        for l, r in segments:\n            res[l - 1] += 1\n            res[r - 1] -= 1\n        res = [v for v in res if v!= 0]\n        return res\n\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    res = sum(a) + max(0, *f(a, segments))\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution takes O(m) + O(n) time.\n    \"\"\"\n    # Get n and m\n    n, m = map(int, stdin.readline().split())\n\n    # Get the array\n    a = list(map(int, stdin.readline().split()))\n\n    # Get the segments\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.readline().split())\n        segments.append([l, r])\n\n    # Get the best minimum\n    best_min = 10 ** 6\n    best_solution = None\n    # Try every solution\n    for idx in range(m):\n        seg = segments[idx]\n        s, e = seg\n        new_a = []\n        for i in range(s, e + 1):\n            new_a.append(a[i])\n        for i in range(s, e + 1):\n            a[i] -= 1\n        # Get the best minimum\n        min_new_a = min(new_a)\n        if min_new_a < best_min:\n            best_min = min_new_a\n            best_solution = idx + 1\n        # Backtrack\n        for i in range(s, e + 1):\n            a[i] += 1\n\n    # Get the best maximum\n    best_max = -10 ** 6\n    best_solution = None\n    for idx in range(m):\n        seg = segments[idx]\n        s, e = seg\n        new_a = []\n        for i in range(s, e + 1):\n            new_a.append(a[i])\n        for i in range(s, e + 1):\n            a[i] += 1\n        # Get the best maximum\n        max_new_a = max(new_a)\n        if max_new_a > best_max:\n            best_max = max_new_a\n            best_solution = idx + 1\n        # Backtrack\n        for i in range(s, e + 1):\n            a[i] -= 1\n\n    return str(best_max - best_min) + \" \" + str(best_solution)"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    p = [int(x) for x in stdin.split('\\n')[2:]]\n    a.sort()\n    q = list()\n    for i in range(m):\n        q.append(p[i][0])\n        q.append(p[i][1])\n    q.sort()\n    q = set(q)\n    r = list()\n    k = list()\n    for i in range(m):\n        if q.__contains__(p[i][0]):\n            k.append(i)\n        if q.__contains__(p[i][1]):\n            k.append(i)\n    k.sort()\n    x = 0\n    y = 0\n    for i in range(m):\n        x = x + a[q[i + 1]] - a[q[i]]\n        if k.__contains__(i):\n            y = y + 1\n    if x < 0:\n        x = 0\n    if y > 0:\n        x = x // y\n    if x < 0:\n        x = 0\n    return str(x)\n\n\n\n\n\n\n\n----\n\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split('\\n')]\n    cnt = 0\n    for i in range(m):\n        l, r = [int(x) for x in stdin.split('\\n')[i].split(' ')]\n        cnt += l - 1\n        cnt += r\n    return cnt\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n    a = list(map(int, lines[1].split()))\n    for _ in range(m):\n        seg = list(map(int, lines[2 + _].split()))\n        a[seg[0] - 1] -= 1\n        a[seg[1] - 1] += 1\n    answer = 0\n    for i in range(n):\n        answer = max(answer, a[i] - min(a[i], 0))\n    return str(answer)\n"
    },
    {
        "number": 4078,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        b.append([l, r])\n    l, r = b[0][0], b[0][1]\n    m = a[l-1:r]\n    m.sort()\n    m.reverse()\n    #print(b)\n    #print(m)\n    #print(a)\n    d = 0\n    for i in m:\n        for j in m:\n            d = max(d, i-j)\n            #print(i, j, d)\n    return str(d)"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        'Yes' if input_string.isalpha() and input_string == ''.join(sorted(set(input_string)))\n        else 'No'\n        for input_string in stdin.split()\n    ])"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    for line in lines:\n        if check_diverse(line):\n            print('Yes')\n        else:\n            print('No')\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    strings = input[1:]\n    diverse_strings = []\n    for i in strings:\n        is_diverse = True\n        letter_positions = {}\n        for letter in i:\n            if letter in letter_positions:\n                letter_positions[letter] += 1\n            else:\n                letter_positions[letter] = 1\n        for position in range(0, 26):\n            if position not in letter_positions:\n                is_diverse = False\n                break\n            elif position in letter_positions and letter_positions[position]!= 1:\n                is_diverse = False\n                break\n            else:\n                continue\n        if is_diverse:\n            diverse_strings.append(\"Yes\")\n        else:\n            diverse_strings.append(\"No\")\n    for i in diverse_strings:\n        print(i)\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        cnt = [0] * 26\n        for i in stdin.readline():\n            cnt[ord(i) - 97] += 1\n        \n        if all([i == 1 for i in cnt]):\n            print('Yes')\n        else:\n            print('No')\n    return ''\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin.isalpha() else 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.read().splitlines()\n    result = []\n    for word in words:\n        result.append('Yes' if is_diverse(word) else 'No')\n    print('\\n'.join(result))\n    return ''\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nfced\\nxyz\\nr\\ndabcef\\naz\\n\\naa\\nbad\\nbabc\")\n    'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_segments_sum(segments):\n        res = 0\n        for (left, right) in segments:\n            res += a[left - 1:right]\n        return res\n    \n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(m):\n        (l, r) = map(int, stdin.split())\n        res = max(res, get_segments_sum(segments) - get_segments_sum(segments[:i] + segments[i + 1:]))\n    return str(res)"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, segments):\n        b = a[:]\n        for l, r in segments:\n            b[l - 1] -= 1\n            b[r - 1] -= 1\n        return max(b) - min(b)\n\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    ans = 0\n    for _ in range(m):\n        l, r = map(int, stdin.split(' '))\n        ans = max(ans, solve(a, [[l, r]]))\n        ans = max(ans, solve(a, [[1, n]]))\n    return str(ans)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = []\n    for i in range(m):\n        l, r = map(int, stdin.split(' '))\n        b.append([l, r])\n    c = []\n    d = []\n    for i in range(m):\n        c.append(b[i][0])\n        d.append(b[i][1])\n    \n    c.sort()\n    d.sort()\n    \n    s = ''\n    s1 = ''\n    s2 = ''\n    for i in range(n):\n        s += str(a[i]) +''\n    s = s[:-1]\n    s1 =''.join(map(str, c))\n    s2 =''.join(map(str, d))\n    print(s)\n    print(s1)\n    print(s2)\n    return s2\n    \n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    assert n == len(a)\n    s = []\n    for _ in range(m):\n        s.append([int(x) for x in stdin.split()])\n    print(s)\n    return '3'\n\"\"\""
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible value of b - min b.\n    \"\"\"\n    return str(int(stdin))\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_diff(a: List[int], b: List[List[int]]) -> int:\n        max_diff = 0\n        for left, right in b:\n            max_diff = max(max_diff, a[right] - a[left])\n        return max_diff\n    \n    n, m = [int(num) for num in stdin.split()]\n    a = [int(num) for num in stdin.split()]\n    b = []\n    for _ in range(m):\n        l, r = [int(num) for num in stdin.split()]\n        b.append([l, r])\n    \n    diff = 0\n    for i in range(n):\n        diff = max(diff, a[i] - find_min(a, b))\n    print(diff)\n    \n    for i in range(m):\n        a[b[i][0] - 1] -= 1\n        a[b[i][1] - 1] += 1\n    \n    print(find_max_diff(a, b))\n    \n    \ndef"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for _ in range(m):\n        segment = list(map(int, stdin.split()))\n        b.append(max(a[segment[0] - 1: segment[1]]) - min(a[segment[0] - 1: segment[1]]))\n    d = sum(b)\n    q = 0\n    for i in range(len(b)):\n        if b[i] == max(b):\n            q += 1\n    q -= 1\n    ans = []\n    for i in range(m):\n        if b[i] == max(b):\n            ans.append(i + 1)\n    ans.sort()\n    if q!= 0:\n        print(d)\n        print(q)\n        print(' '.join(map(str, ans)))\n    else:\n        print(d)\n        print(0)\n"
    },
    {
        "number": 4080,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    b = [[int(i) for i in stdin.split(' ')] for _ in range(m)]\n\n    # your code here\n    return None\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return stdin"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(stdin, reverse=True))\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n2 1 5 4 3\")\n    '4\\nLRRR'\n    >>> solution(\"7\\n1 3 5 6 7 4 2\")\n    '7\\nLRLRLLL'\n    >>> solution(\"3\\n1 2 3\")\n    '3\\nLLL'\n    >>> solution(\"4\\n1 2 4 3\")\n    '4\\nLLRL'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n-----\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return \"\"\n"
    },
    {
        "number": 4081,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^2) time complexity, O(1) space complexity\"\"\"\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    # This example of subarray is not strictly increasing, because\n    # there is a 2-3 such that index 4 is the last one that is increasing.\n    # It is strictly increasing from 1 to 4.\n    # It is not strictly increasing from 2 to 5, because there is a 4 there.\n    # We are interested only in the maximum length of strictly increasing subarray.\n    # So, we can delete this 2 from the array:\n    # [1, 2, 3, 4] -> [1, 2, 3, 4]\n    # and then maximum length of strictly increasing subarray will be 4.\n    # But the index of the last strictly increasing subarray will change\n    # after we do this action, so we have to remember the first index\n    # of this subarray.\n    # It will be equal to 3.\n    # We will have only one index of strictly increasing subarray.\n    # Let's delete the element of index 3 from the array.\n    # Now the array is [1, 2, 3] and its maximum length is 3.\n    # For the final answer, we will delete the first element of the array.\n    # Let's delete the element of index 0 from the array.\n    # Now the array is [2, 3].\n    # It is strictly increasing from 2 to 3, so its maximum length will be 2.\n    # This is the answer.\n    del arr[arr.index(max(arr))]\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            arr[i] = arr[i + 1]\n            arr[i + 1] = max(arr)\n            break\n    return str(len(arr))\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n    def"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $n$ ($2 \\le n \\le 2 \\cdot 10^5$) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $a$.\n\u0412\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 $n$ \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), \u0433\u0434\u0435 $a_i$ \u2014 $i$-\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 $a$.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0438\u0437 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u0430 $a$ \u043f\u043e\u0441\u043b\u0435 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 $a$.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\n\u0412\u044b\u0445\u043e\u0434\n1\n5\n1 2 5 3 4\n\n2\n1 2\n\n\u0412\u0445\u043e\u0434\n7\n6 5 4 3 2 4 3\n\n2\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f\n\u0412 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0434\u0430\u043b\u0438\u0442\u044c $a_3=5$ \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u0435\u043d $[1, 2, 3, 4]$. \u041f\u043e\u0434\u043e\u0431\u043d\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u043b\u0438 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 \u00ab\u0421\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0440\u043e\u043a\u00bb.\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0435\u043b\u044c\u0437\u044f \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b $a_1=6, a_2=5, a_3=4, a_4=3, a_5=3$ \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c, \u043d\u043e \u043d\u0435 \u043f\u043e\u0434\u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u043c \u0438\u0437 \u0441\u043e\u0441\u0435\u0434\u043d\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n'''\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time | O(1) space\n    >>> solution('''5\n   ... 1 2 5 3 4''')\n    4\n    >>> solution('''2\n   ... 1 2''')\n    2\n    >>> solution('''7\n   ... 6 5 4 3 2 4 3''')\n    2\n    >>> solution('''6\n   ... 1 5 3 4 2 4 3''')\n    2\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_len = 0\n    for i in range(len(a) - 1):\n        if a[i] < a[i + 1]:\n            length = 2\n            max_len = max(max_len, length)\n\n            for j in range(i + 1, len(a) - 1):\n                if a[j] >= a[j + 1]:\n                    break\n                length += 1\n                max_len = max(max_len, length)\n    return max_len\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(c) for c in stdin.split()]\n    m = [0] * n\n    for i in range(k):\n        m[a[i] - 1] += 1\n\n    res = 0\n    for i in range(n):\n        if m[i] > 0:\n            res += m[i] - 1\n            m[i] = 1\n\n    return res"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n, k = list(map(int, input[0].split()))\n    a = list(map(int, input[1].split()))\n    m = sum(a) // 2\n    l = m + 1\n    r = sum(a)\n    while l < r:\n        c = (l + r) // 2\n        cnt = 0\n        for i in range(n):\n            cnt += c - a[i]\n        if cnt < k:\n            l = c\n        else:\n            r = c\n    return l\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().split()[1])\n    n = int(stdin.readline().split()[0])\n    a = [int(x) for x in stdin.readline().split()]\n    return str(math.ceil(math.log2(sum(a)/k)))\n\nprint(solution(\"3 2\\n1 2 3\\n\"))\nprint(solution(\"2 1\\n1 1\\n\"))"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] > 0:\n            if a[i] % 2 == 0:\n                a[i] = a[i] // 2\n            else:\n                a[i] = a[i] // 2\n                a[i - 1] = a[i - 1] + 1\n            count += 1\n            if a[i] >= k:\n                break\n    return count\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n    \n    l = 0\n    r = 0\n    count = 0\n    while r < len(a):\n        if a[r] % 2 == 0:\n            a[l] += a[r] // 2\n            count += 1\n            if count == k:\n                break\n            l += 1\n            r += 1\n        else:\n            r += 1\n    print(l)"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return str()\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def count(A,k):\n        counter = 0\n        for a in A:\n            if a % 2 == 0:\n                a //= 2\n                counter += 1\n            if a == 1:\n                break\n        return counter\n    n, k = [int(x) for x in stdin.split()]\n    A = [int(x) for x in stdin.split()]\n    return count(A,k)\n"
    },
    {
        "number": 4083,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # [1, 2, 2, 4, 5] -> [1, 2, 3, 3, 4]\n    # [1, 2, 3, 3, 3] -> [0, 1, 2, 2, 2]\n    # [1, 2, 3, 3, 3, 4] -> [1, 2, 3, 3, 3, 4]\n    # [1, 2, 3, 3, 3, 4, 5] -> [1, 2, 3, 3, 3, 4, 5]\n    # [1, 2, 3, 3, 3, 4, 5, 6] -> [1, 2, 3, 3, 4, 5, 6]\n    # [1, 2, 3, 3, 3, 4, 5, 6, 7] -> [1, 2, 3, 3, 4, 5, 6, 7]\n    # [1, 2, 3, 3, 3, 4, 5, 6, 7, 8] -> [1, 2, 3, 3, 4, 5, 6, 7, 8]\n    # [1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9] -> [1, 2, 3, 3, 4, 5, 6, 7, 8, 9]\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    a_minus_k = [a[i] - k for i in range(n)]\n    \n    print(sum(a_minus_k))\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, A, B = lines[0].split()\n    return str(sum([int(i) for i in str(bin(int(N))[2:])[-int(A):].replace('0', 'b').replace('1', 'r')]))"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the number of blue balls among the first N balls in the row of balls\n    made this way.\n    >>> solution('8 3 4\\n')\n    4\n    '''\n    N, A, B = map(int, stdin.split())\n    blue = N * (A - B)\n    red = N * B\n    return blue - red\n    '''\n    for _ in range(100):\n        n, a, b = map(int, stdin.split())\n        blue = n * (a - b)\n        red = n * b\n        print(blue - red)\n    '''"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    [n, a, b] = stdin.split()\n    return f\"{int(a) + int(b) - int(n)} blue balls\"\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return solution_by_lines(stdin.split('\\n'))\n\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return a + b - b * (n // 2)\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, r = [int(i) for i in stdin.split()]\n    if b < r or n <= b:\n        return 0\n    return n - b - 1"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    if n > 10**18:\n        return 'Impossible'\n    elif n < 1:\n        return 'Impossible'\n    else:\n        return (n - a - b) * 'b' + a * 'b' + b * 'r'\n"
    },
    {
        "number": 4084,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split(' '))\n    b = N // (A + B) * (A - B) + (A - B) * (b // (A + B) + 1)\n    return b"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '\\n'.join(stdin.split('\\n')[1:])\n\nsolution(input())\n\n---\n\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    def divisors(n):\n        l = []\n        for i in range(1, int(n**0.5)+1):\n            if n%i == 0:\n                l.append(i)\n                if i!=n//i:\n                    l.append(n//i)\n        return l\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        if n==1:\n            print(-1)\n            continue\n        l = divisors(n)\n        ans = n\n        for i in range(2, n//2+1):\n            if i in l:\n                continue\n            if i*i>n:\n                break\n            if n%i==0:\n                ans = i\n        print(ans)\n\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum possible x such that stdin is the list of almost all its divisors.\n\n    >>> solution('8\\n8 2 12 6 4 24 16 3')\n    48\n    >>> solution('1\\n2')\n    -1\n    \"\"\"\n\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return your answer\n    return \"Hi\""
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        numbers = set(map(int, stdin.readline().split()))\n        if len(numbers) == n:\n            if 1 in numbers:\n                numbers.remove(1)\n            if n > 2:\n                numbers.add(n - 1)\n        if len(numbers) == 0:\n            print(-1)\n        else:\n            numbers = sorted(numbers)\n            print(numbers[0])\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def prime_factorization(x):\n        prime_factors = {}\n        i = 2\n        while x!= 1:\n            if x % i == 0:\n                prime_factors[i] = prime_factors.setdefault(i, 0) + 1\n                x /= i\n            else:\n                i += 1\n        return prime_factors\n\n    def almost_all_divisors(n, divisors):\n        not_prime_factors = {}\n        for d in divisors.keys():\n            if d == 1:\n                continue\n            if d not in not_prime_factors:\n                not_prime_factors[d] = 0\n            not_prime_factors[d] += divisors[d] - 1\n        if not not_prime_factors:\n            return True\n\n        prime_factors = prime_factorization(n)\n        for prime_factor, prime_factor_count in prime_factors.items():\n            if prime_factor not in not_prime_factors:\n                return False\n            if not_prime_factors[prime_factor] < prime_factor_count:\n                return False\n        return True\n\n    t = int(stdin.readline().strip())\n    answers = []\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        divisors = {}\n        for d in map(int, stdin.readline().strip().split()):\n            divisors[d] = divisors.setdefault(d, 0) + 1\n        divisors = sorted(divisors.items(), key=lambda x: x[0])\n        divisors = [d[0] for d in divisors]\n        if not divisors or not almost_all_divisors(n, divisors):\n            answers.append(-1)\n            continue\n        divisors = sorted(divisors, key=lambda x: n // x)\n        left = 0\n        right = n\n        while left < right:\n            mid = (left + right + 1) // 2\n            if mid * divisors[-1] > n:\n                right = mid - 1\n            else:\n                left = mid\n        answers.append(left)\n    return '\\n'.join(map(str, answers))\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numberOfQueries = int(stdin.readline())\n    for _ in range(numberOfQueries):\n        numberOfDivisors = int(stdin.readline())\n        divisors = [int(stdin.readline()) for _ in range(numberOfDivisors)]\n        divisors.sort()\n        if divisors[0] == 1:\n            print(1)\n            continue\n        elif divisors[-1] == numberOfDivisors:\n            print(numberOfDivisors)\n            continue\n        sortedDivisors = sorted(divisors)\n        difference = sortedDivisors[-1] - sortedDivisors[0]\n        if difference <= 2:\n            print(-1)\n        else:\n            if difference % 2 == 0:\n                print(sortedDivisors[0] + difference // 2)\n            else:\n                print(sortedDivisors[0] + difference // 2 + 1)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(t * log(n) + n * log(n))\n    Space complexity: O(1)\n    \"\"\"\n    n_queries = int(stdin.readline())\n    for _ in range(n_queries):\n        n_divisors = int(stdin.readline())\n        divisors = [int(x) for x in stdin.readline().split(\" \")]\n        if len(set(divisors)) < n_divisors:\n            print(-1)\n            continue\n        min_divisor = min(divisors)\n        if min_divisor == 1:\n            print(1)\n            continue\n        x = 1\n        while True:\n            divisors_copy = divisors.copy()\n            divisors_copy.append(x)\n            if all(d in divisors_copy for d in divisors_copy[:n_divisors]):\n                break\n            x += 1\n        print(x)\n"
    },
    {
        "number": 4085,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split('\\n\\n')\n    for case in cases:\n        if case == '':\n            continue\n        t = int(case.split('\\n')[0])\n        n = int(case.split('\\n')[1])\n        divisors = list(map(int, case.split('\\n')[2].split()))\n        count = 1\n        for divisor in divisors:\n            count *= divisor\n        if count > n:\n            print('-1')\n        else:\n            print(n // count)\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(item) for item in stdin.readline().strip().split(' ')]\n    duplicate_elements = list(set([item for item in a if a.count(item) > 1]))\n    result = [i for i in a if i not in duplicate_elements]\n    result.sort()\n    print(len(result))\n    print(' '.join([str(item) for item in result]))\n    return ''\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    unique_arr = []\n    for i in arr:\n        if i not in unique_arr:\n            unique_arr.append(i)\n    print(len(unique_arr))\n    print(' '.join([str(x) for x in unique_arr]))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    my_list = sorted(list(map(int, stdin.split())))\n    set_list = list(set(my_list))\n    return str(len(set_list)) +'' +''.join(map(str, set_list))\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the task.\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 4086,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(n) for n in stdin.split()]\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    d = sorted(d.items(), key=lambda x: x[1])\n    return str(len(l) - len(d)) + \" \" + \" \".join([str(item[0]) for item in d])\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 0\n    while n < a:\n        n += 1\n        s = str(n)\n        if int(s[0]) + int(s[1]) + int(s[2]) % 4 == 0:\n            continue\n        if int(s[0]) + int(s[1]) + int(s[2]) % 3 == 0:\n            continue\n        if int(s[0]) + int(s[1]) + int(s[2]) % 2 == 0:\n            continue\n        n += 1\n\n    return str(n)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the next closest interesting number.\n    :param stdin: input string\n    :return: next closest interesting number\n    \"\"\"\n    # read stdin\n    a = int(stdin)\n    # initialize the starting number\n    start_number = a\n    # initialize the next closest interesting number\n    next_closest_interesting_number = a\n    # initialize the answer\n    answer = 0\n    # start with the first iteration,\n    # which will be the most interesting\n    # number and the smallest one\n    answer = a + 3\n\n    # check the current number\n    # which will be the next closest\n    # interesting number\n    while next_closest_interesting_number < answer:\n        # check if the current number is interesting\n        if (start_number + sum(int(i) for i in str(start_number))) % 4 == 0:\n            # if it is, return it\n            answer = start_number\n            break\n        # increment the number by 1\n        start_number += 1\n\n    # return the answer\n    return answer\n\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    c = int(stdin)\n    d = int(stdin)\n    e = int(stdin)\n    f = int(stdin)\n    g = int(stdin)\n    h = int(stdin)\n    i = int(stdin)\n    j = int(stdin)\n    k = int(stdin)\n    l = int(stdin)\n    m = int(stdin)\n    n = int(stdin)\n    o = int(stdin)\n    p = int(stdin)\n    q = int(stdin)\n    r = int(stdin)\n    s = int(stdin)\n    t = int(stdin)\n    u = int(stdin)\n    v = int(stdin)\n    w = int(stdin)\n    x = int(stdin)\n    y = int(stdin)\n    z = int(stdin)\n    \n    \n    return(\n        stdin\n        if int(stdin) < 100\n        else solution(\n            stdin + str(int(stdin) + 1)\n            if int(stdin) < 1000\n            else solution(\n                stdin + str(int(stdin) + 1) + str(int(stdin) + 2)\n                if int(stdin) < 10000\n                else solution(\n                    stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3)\n                    if int(stdin) < 100000\n                    else solution(\n                        stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4)\n                        if int(stdin) < 1000000\n                        else solution(\n                            stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5)\n                            if int(stdin) < 10000000\n                            else solution(\n                                stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6)\n                                if int(stdin) < 100000000\n                                else solution(\n                                    stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7)\n                                    if int(stdin) < 1000000000\n                                    else solution(\n                                        stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8)\n                                        if int(stdin) < 10000000000\n                                        else solution(\n                                            stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8) + str(int(stdin) + 9)\n                                            if int(stdin) < 100000000000\n                                            else solution(\n                                                stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8) + str(int(stdin) + 9) + str(int(stdin) + 10)\n                                                if int(stdin) < 1000000000000\n                                                else solution(\n                                                    stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8) + str(int(stdin) + 9) + str(int(stdin) + 10) + str(int(stdin) + 11)\n                                                    if int(stdin) < 10000000000000\n                                                    else solution(\n                                                        stdin + str(int(stdin) + 1) + str(int(stdin) + 2) + str(int(stdin) + 3) + str(int(stdin) + 4) + str(int(stdin) + 5) + str(int(stdin) + 6) + str(int(stdin) + 7) + str(int(stdin) + 8) + str(int(stdin) + 9) + str(int(stdin) + 10) + str(int(stdin) + 11) + str(int(stdin) + 12)\n                                                        if int(stdin) < 1000000000000000000\n                                                        else stdin\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n    )\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    while True:\n        if n % 4 == 0:\n            return n\n        n += 1\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return a string\n    \"\"\"\n    n = int(stdin)\n    if n % 3 == 0:\n        return str(n + 1)\n    else:\n        return str(n + (3 - n % 3))\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    a = int(stdin)\n    k = a\n    while True:\n        if a % 4 == 0:\n            if sum([int(x) for x in list(str(a))]) % 3 == 0:\n                break\n        a += 1\n    return str(k) if a == k + 1 else str(a)\n\nprint(solution(input()))\n\n\n-----Problem-----\nhttps://www.codewars.com/kata/569d7d8a40f3e9f050000d9a\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    s = list(map(int, list(a)))\n    s1 = sum(s)\n    s2 = str(s1)\n    s3 = list(map(int, list(s2)))\n    s4 = sum(s3)\n    if s4 % 4!= 0:\n        s5 = s4 + (4 - s4 % 4)\n    else:\n        s5 = s4\n    if s5 >= 1000:\n        return str(999)\n    else:\n        return str(s5)\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 0\n    while True:\n        n += 1\n        if sum(map(int, str(n))) % 4 == 0:\n            if n >= a:\n                return str(n)\n        elif sum(map(int, str(n + 1))) % 4 == 0:\n            if n + 1 >= a:\n                return str(n + 1)\n        else:\n            n += 1\n"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 42\n\"\"\"\n\nfrom math import floor\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 0\n    while n < a:\n        n += 1\n        if (sum(int(c) for c in str(n)) % 4 == 0):\n            break\n    return str(n)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abac\")\n    aac\n    >>> solution(\"abc\")\n    b\n    >>> solution(\"abba\")\n    aba\n    >>> solution(\"ecoosdcefr\")\n    codeforces\n    \"\"\"\n    string = stdin\n    length = len(string)\n    masks = [0] * 1225\n    for i in range(length):\n        for j in range(length):\n            if string[i] > string[j]:\n                masks[ord(string[i]) - ord('a')] += (j - i)\n\n    ans = []\n    for i in range(length):\n        if masks[ord(string[i]) - ord('a')] == 0:\n            ans.append(string[i])\n        else:\n            break\n    return ''.join(ans)\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.readline())):\n        s = stdin.readline()[:-1]\n        n = int(stdin.readline())\n        b = list(map(int, stdin.readline().split()))\n        s0 = sorted(set(s))\n        d = {c: s.count(c) for c in s0}\n        ans = []\n        for x in s0:\n            for y in s0:\n                if x!= y:\n                    ans.append(abs(d[x] - d[y]))\n        print(''.join(sorted(s, key=lambda c: b[ord(c) - ord('a')] + ans.index(ord(c) - ord('a')))))\n\n\"\"\"\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin\n    if not stdin:\n        return \"a\"\n\n    m = int(input())\n    b = list(map(int, input().split()))\n    s = stdin\n    s = list(map(ord, s))\n    s.sort()\n    print(s)\n    s = [chr(i) for i in s]\n    s.sort(reverse=True)\n    s = \"\".join(s)\n    print(s)\n    if b[0]!= 0:\n        result = s[b[0] - 1:]\n    else:\n        result = s[b[0]:]\n    for i in range(1, m):\n        if b[i]!= 0:\n            result = s[b[i] - 1:b[i]]\n    return result"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n, b = [int(x) for x in stdin.split('\\n')[:2]]\n    res = ''\n\n    # Start from the right\n    for i in range(n - 1, -1, -1):\n        # Scan for the first position that is larger than i\n        j = n - 1\n        while j >= i:\n            if stdin[j] > stdin[i]:\n                break\n            j -= 1\n\n        # Add characters after this position\n        res += stdin[i:j + 1]\n        # Remove the characters that exceed i\n        stdin = stdin[:i] + stdin[j + 1:]\n\n    res = res[::-1]\n\n    return res\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest substring for which the array of its substrings\n    is equal to array b.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: The longest substring.\n    \"\"\"\n\n    # Check the input.\n    if len(stdin) < 1:\n        raise ValueError('Input must not be empty')\n    if len(stdin) > 50:\n        raise ValueError('Input must not be longer than 50')\n    for c in stdin:\n        if ord(c) < 97 or ord(c) > 122:\n            raise ValueError('All characters must be lowercase letters')\n    if len(stdin)!= len(set(stdin)):\n        raise ValueError('All characters must be unique')\n\n    # Compute the array of substrings.\n    substrings = []\n    for i in range(len(stdin)):\n        substrings.append(stdin[i:])\n        substrings.append(stdin[:i])\n\n    # Compute the array of differences.\n    differences = []\n    for substring in substrings:\n        differences.append(\n            len(set(substring)) - len(set(substring[1:])) + len(set(substring[:-1]))\n        )\n\n    # Find the longest substring.\n    longest = 0\n    for i, substring in enumerate(substrings):\n        if differences[i] == 0 and len(substring) > longest:\n            longest = len(substring)\n    for substring in substrings:\n        if len(substring) == longest:\n            return substring\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0:\n        return ''\n    s = stdin.split('\\n')[0]\n    n = int(stdin.split('\\n')[1])\n    b = [0] * n\n    if n == 0:\n        return ''\n    m = int(stdin.split('\\n')[2])\n    if m == 0:\n        return ''\n    cnt = 0\n    j = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            cnt += 1\n        else:\n            break\n    b[j] = cnt\n    j += 1\n    if j < m:\n        for i in range(j, m):\n            if s[i] == 'a':\n                cnt += 1\n            else:\n                b[i] = cnt\n                break\n    else:\n        for i in range(j, n):\n            if s[i] == 'a':\n                cnt += 1\n            else:\n                b[i] = cnt\n                break\n    print(s, b)\n    res = ''\n    for i in b:\n        res += s[:i]\n        s = s[i:]\n        s = s[::-1]\n        res += s\n        s = s[::-1]\n    return res\n"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"abba\")\n    'b'\n    >>> solution(\"ecoo\")\n    'e'\n    >>> solution(\"ceo\")\n    'c'\n    '''\n    s = stdin\n    b = list(map(int, stdin.split()))\n\n    t = []\n    for i in range(len(b)):\n        c = 0\n        for j in range(len(s)):\n            if s[j] > s[i]:\n                c += 1\n        t.append(c)\n    c = []\n    t = sorted(t)\n    for i in range(len(t) - 1):\n        for j in range(i + 1, len(t)):\n            if t[j] - t[i] == b[j - 1]:\n                c.append(s[i])\n                break\n    c = ''.join(c)\n    return c"
    },
    {
        "number": 4088,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N_str = str(N)\n    N_len = len(N_str)\n    if N_len == 1:\n        return N_str\n    for i in range(N_len):\n        temp_str = N_str[i:] + N_str[:i]\n        if i == 0:\n            i = 1\n            continue\n        temp_num = int(temp_str)\n        if i < N_len:\n            if temp_num < 26:\n                break\n            else:\n                if i == N_len - 1:\n                    break\n                else:\n                    continue\n        else:\n            if temp_num < 27:\n                break\n            else:\n                if i == N_len - 1:\n                    break\n                else:\n                    continue\n    return temp_str\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 26:\n        return chr(65 + N - 1)\n    elif N <= 701:\n        return chr(97 + (N - 26) // 26 - 1) + chr(65 + (N - 26) % 26)\n    elif N <= 18277:\n        return chr(97 + (N - 701) // 26 - 1) + chr(97 + (N - 701) % 26)\n    elif N <= 475253:\n        return chr(97 + (N - 18277) // 702 // 26 - 1) + chr(97 + (N - 18277) // 702 % 26) + chr(97 + (N - 18277) % 702 // 26 - 1) + chr(97 + (N - 18277) % 702 % 26)\n    elif N <= 999999999999999:\n        return chr(97 + (N - 475253) // 18278 // 702 // 26 - 1) + chr(97 + (N - 475253) // 18278 // 702 % 26) + chr(97 + (N - 475253) // 18278 % 702 // 26 - 1) + chr(97 + (N - 475253) // 18278 % 702 % 26) + chr(97 + (N - 475253) % 18278 // 702 // 26 - 1) + chr(97 + (N - 475253) % 18278 // 702 % 26) + chr(97 + (N - 475253) % 18278 % 702 // 26 - 1) + chr(97 + (N - 475253) % 18278 % 702 % 26)\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N: str = stdin.read()\n    # perform some operations\n    answer: str = \"\"\n    for i in range(1, N + 1):\n        if i <= 26:\n            answer += chr(ord('a') + i - 1)\n        elif i <= 702:\n            answer += chr(ord('a') + (i - 26) - 1) + chr(ord('a') + (i - 26) - 1)\n        elif i <= 18277:\n            answer += chr(ord('a') + (i - 702) - 1) + chr(ord('a') + (i - 702) - 1) + chr(ord('a') + (i - 702) - 1)\n        elif i <= 475255:\n            answer += chr(ord('a') + (i - 18277) - 1) + chr(ord('a') + (i - 18277) - 1) + chr(ord('a') + (i - 18277) - 1) + chr(ord('a') + (i - 18277) - 1)\n        else:\n            break\n    # return output\n    return answer\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"a\" * n\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    count = 0\n    l = []\n    for i in range(n):\n        if i == 0:\n            l.append(chr(ord('a') + i))\n        elif i == n - 1:\n            l.append(chr(ord('z') - i))\n        else:\n            l.append(chr(ord('a') + i))\n            l.append(chr(ord('z') - i))\n    return ''.join(l[n - 1::-1])\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    name_to_number = {}\n    number_to_name = {}\n    i = 1\n    while i < 27:\n        name_to_number[chr(97 + i)] = i\n        i += 1\n\n    i = 0\n    while i < 27:\n        name = chr(97 + i)\n        number_to_name[i] = name\n        i += 1\n\n    number = int(stdin)\n\n    name = number_to_name[number % 26]\n    if number % 26 == 0:\n        name = number_to_name[26]\n\n    return name\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2')\n    'b'\n    >>> solution('5')\n    'zz'\n    >>> solution('15')\n    'zzz'\n    >>> solution('100')\n    'zzzz'\n    >>> solution('10000000000')\n    'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz'\n    \"\"\"\n    number = int(stdin)\n    letter = 'a'\n    while number:\n        number, r = divmod(number - 1, 26)\n        letter = chr(ord(letter) + r)\n    return letter\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return chr(n % 26 + ord(\"a\"))\n"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 4089,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for i in range(1, N):\n        if i <= 26:\n            alphabet[i - 1] = alphabet[i]\n        elif i <= 702:\n            alphabet[i - 1] = alphabet[i - 1] + alphabet[i - 26]\n        elif i <= 18278:\n            alphabet[i - 1] = alphabet[i - 1] + alphabet[i - 701]\n        elif i <= 475253:\n            alphabet[i - 1] = alphabet[i - 1] + alphabet[i - 18279]\n        elif i == 475254:\n            alphabet[i - 1] = alphabet[i - 1] + alphabet[0]\n    return alphabet[N - 1]"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = stdin.readline().split(' ')\n    n = int(stdin.readline())\n    b = stdin.readline().split(' ')\n    a = sorted(a, key=len)\n    b = sorted(b, key=len)\n    for i in range(len(a)):\n        c = a.copy()\n        c[i] = c[i].upper()\n        if a[i] == b[i]:\n            c = ''.join(c)\n            return len(c)\n        for j in range(i+1, len(a)):\n            if a[i] == b[j] and b[j] == c[j]:\n                c = ''.join(c)\n                return len(c)\n    return len(a) + len(b)\n\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    words = stdin[1:]\n    ans = float(\"inf\")\n    s = 0\n    cnt = 0\n    for i in range(n):\n        s += len(words[i])\n        cnt += 1\n        if s >= ans:\n            ans = min(ans, s)\n        else:\n            ans = min(ans, s + cnt - 1)\n    return ans\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    words = []\n    word_dict = {}\n    for w in stdin:\n        words.append(w)\n        word_dict[w] = len(w)\n\n    result = 10 ** 5\n    for i in range(1, n - 1):\n        if i + 1 < len(words) and words[i] == words[i + 1]:\n            continue\n\n        for j in range(i + 1, n):\n            if j + 1 < len(words) and words[j] == words[j + 1]:\n                continue\n\n            if len(words[i]) > 1:\n                a, b = sorted([words[i], words[j]])\n                if word_dict[a] + j - i < j - i:\n                    break\n\n            if j + 1 < len(words) and words[j] == words[j + 1]:\n                continue\n\n            l = j - i + 1\n            if l < result:\n                result = l\n                if l < 3:\n                    break\n\n    return result\n\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    size_of_text = int(stdin.split(\"\\n\")[0])\n    words = stdin.split(\"\\n\")[1].split()\n    min_length = size_of_text\n    for i in range(0, len(words)):\n        for j in range(i + 2, len(words) + 1):\n            if j - i == len(set(words[i:j])):\n                min_length = min(min_length, len(\"\".join(words[i:j])))\n    return min_length\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    text = stdin.split('\\n')[1].split(' ')\n\n    out = len(text)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j - i == text[j] - text[i]:\n                tmp = text[j]\n                text[j] = text[i]\n                text[i] = tmp\n                out = min(out, len(' '.join(text)))\n\n    return out\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    words = stdin[1].split()\n    words.sort(key=len)\n    dp = [[0 for j in range(len(words) + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, len(words) + 1):\n            if words[j - 1] == words[j - 2]:\n                dp[i][j] = 1 + dp[i][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    print(len(words) + dp[n][len(words)])\n    return \"0\"\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum length of the text after at most one abbreviation.\"\"\"\n    return '???'\n"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    words = stdin.readline().split()\n    min_len = float('inf')\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if j - i == words[j] - words[i]:\n                min_len = min(min_len, max(len(words[i:j]), len(words[i] + words[j])))\n    return min_len\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input text and returns it with one abbreviation added\n    \"\"\"\n    words = stdin.split()\n    ans = len(words)\n    if len(words) <= 2:\n        return ans\n    \n    for i in range(2, len(words)):\n        for j in range(i):\n            if j == 0 and i - j <= 2:\n                continue\n            if len(words[j]) <= len(words[j + 1]):\n                continue\n            if set(words[j]) <= set(words[j + 1]) and abs(len(words[j]) - len(words[j + 1])) <= 1:\n                ans = min(ans, len(words[:j] + [words[j][:1] + words[j + 1]] + words[j + 2:]) + 1)\n            if set(words[j + 1]) <= set(words[j]) and abs(len(words[j + 1]) - len(words[j])) <= 1:\n                ans = min(ans, len(words[:j] + [words[j + 1][:1] + words[j]] + words[j + 2:]) + 1)\n    return ans\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 3\n   ... 5 4 2 6 5 1 9 2\n   ... ''')\n    '20'\n\n    >>> solution('''5 1\n   ... 1 1 1 1 1\n   ... ''')\n    '1'\n\n    >>> solution('''4 2\n   ... 1 2000 2000 2\n   ... ''')\n    '4000'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[:2])\n    diff = list(map(int, stdin.split('\\n')[1:]))\n    diff.sort(reverse=True)\n    _sum = sum(diff)\n    dp = [[0] * (_sum + 1) for _ in range(k + 1)]\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if diff[i] <= j:\n                dp[j][diff[i]] = max(dp[j - diff[i]][diff[i]], dp[j][diff[i] - 1] + diff[i])\n            else:\n                dp[j][diff[i]] = dp[j - 1][diff[i]]\n    return str(dp[k][_sum])\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute the maximum total profit\"\n    N, K = [int(x) for x in stdin.split(' ')]\n    A = [int(x) for x in stdin.split(' ')]\n    # 1 <= k <= N <= 2000, 1 <= a_i <= 2000\n    #  A = [5, 4, 2, 6, 5, 1, 9, 2]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n\n    #  A = [2, 3, 5, 7, 10]\n    #  A = [5, 6, 7, 8]\n    #  A = [9, 9, 8, 7, 5]\n\n    #  A = [7, 8, 6, 5, 4, 3, 2]\n    #  A = [2, 5, 6, 8, 7, 4, 1]\n\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n\n    #  A = [9, 10, 9, 8, 7, 6, 5, 4]\n    #  A = [10, 9, 8, 7, 6, 5, 4, 3]\n    #  A = [9, 10, 9, 8, 7, 6, 5, 4]\n\n    #  A = [5, 4, 3, 2, 1]\n    #  A = [1, 2, 3, 4, 5]\n    #  A = [1, 2, 3, 4, 5]\n    #  A = [1, 2, 3, 4, 5]\n    #  A = [1, 2, 3, 4, 5]\n    #  A = [1, 2, 3, 4, 5]\n    #  A = [1, 2, 3, 4, 5]\n    #  A = [1, 2, 3, 4, 5]\n    #  A = [1, 2, 3, 4, 5]\n\n    #  A = [2, 3, 5, 7, 10]\n    #  A = [2, 3, 5, 7, 10]\n    #  A = [2, 3, 5, 7, 10]\n    #  A = [2, 3, 5, 7, 10]\n    #  A = [2, 3, 5, 7, 10]\n    #  A = [2, 3, 5, 7, 10]\n    #  A = [2, 3, 5, 7, 10]\n    #  A = [2, 3, 5, 7, 10]\n\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n\n    #  A = [5, 4, 2, 6, 5, 1, 9, 2]\n    #  A = [5, 4, 2, 6, 5, 1, 9, 2]\n    #  A = [5, 4, 2, 6, 5, 1, 9, 2]\n    #  A = [5, 4, 2, 6, 5, 1, 9, 2]\n    #  A = [5, 4, 2, 6, 5, 1, 9, 2]\n    #  A = [5, 4, 2, 6, 5, 1, 9, 2]\n    #  A = [5, 4, 2, 6, 5, 1, 9, 2]\n    #  A = [5, 4, 2, 6, 5, 1, 9, 2]\n\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    #  A = [1, 2, 3, 4, 5, 6, 7, 8]\n    "
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_distribution(stdin: str) -> str:\n        n, k = [int(i) for i in stdin.split(' ')]\n        arr = [int(i) for i in stdin.split(' ')[1:]]\n        if k == 1:\n            return str(n)\n        else:\n            k = min(k, n)\n            arr.sort()\n            arr = arr[::-1]\n            i = 0\n            j = 1\n            ans = [1] * k\n            while j < k:\n                while i < n and arr[i] >= arr[j]:\n                    ans[j] += ans[j - 1]\n                    i += 1\n                j += 1\n            return''.join([str(i) for i in ans])\n    print(find_distribution(stdin))\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041f\u0440\u043e\u0431\u0443\u0435\u043c \u0440\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043b\u0430\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430 \u0440\u0435\u0448\u0435\u043d\u0438\u044f.\n    \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043d\u0430\u043c\u043d\u043e\u0433\u043e \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b.\n    \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0434\u0435\u043d\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u043d\u043e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c, \u0442.\u0435. \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043a\u0430\u043a \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n    \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432, \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e - \u044d\u0442\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b, \u0447\u0442\u043e\u0431\u044b \u043e\u043d \u043d\u0435 \u043c\u043e\u0433 \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0439, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0445\u043e\u0442\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u043c \u0434\u043b\u044f \u043d\u0430\u0441 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f\u043c.\n    \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0434\u0435\u043d\u044c \u0434\u0435\u043b\u0430\u0435\u043c \u0442\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u0434 \u043f\u0440\u043e\u0442\u0438\u0432\u043e\u043f\u043e\u043b\u043e\u0436\u043d\u043e\u0439 \u0441\u0442\u043e\u0440\u043e\u043d\u044b.\n    \u0412\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0442\u044c \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0435\u043d\u044c, \u0442.\u0435. \u043d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0448\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043a\u0430\u043a \u044d\u0442\u043e \u0431\u044b\u043b\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n    \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0447\u0438\u0441\u043b\u043e \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0439.\n    \u0414\u0430\u043b\u0435\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u0434\u0432\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438:\n    1. \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0435\u043d\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u044b\u043c (\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u043d \u043d\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u0440\u0435\u0448\u0435\u043d\u0438\u0439)\n    2. \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0434\u0435\u043d\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0432\u0435\u0440\u043d\u044b\u043c (\u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u043d\u0430\u0431\u043e\u0440\u043e\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0439)\n    \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b.\n    \u0414\u0430\u043b\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0431\u043b\u0435\u043c.\n    \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u0435 \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u043f\u0440\u0435\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b.\n    \u0414\u0430\u043b\u0435\u0435 \u0438\u0449\u0435\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u0435, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0449\u0435\u0435 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u043b\u0443\u0447\u0430\u0439 \u0441 \u043f\u0440\u0435\u0432\u044b"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n------------------\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    dp = [0] * (k + 1)\n    dp[1] = max(a)\n    res = dp[1]\n    for i in range(2, k + 1):\n        max_n = 0\n        for j in range(i - 1, max(i - n, 1) - 1, -1):\n            max_n = max(max_n, dp[j])\n        dp[i] = max_n + a[i - 1]\n        res = max(res, dp[i])\n    print(res)\n    print(' '.join([str(x) for x in dp[1:]]))"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your code here\n    \"\"\"\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    B = [0] * K\n    B[0] = K\n    for i in range(1, N):\n        B[i] = min(K, B[i - 1] + 1) if A[i] > A[i - 1] else B[i - 1]\n    print(sum(A[i - 1] for i in B))\n\n    return \"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n\n    stdin = stdin.splitlines()\n    n, k = list(map(int, stdin.pop(0).split()))\n    arr = list(map(int, stdin.pop(0).split()))\n\n    max_profit = 0\n    for i in list(permutations(arr, k)):\n        for j in range(k):\n            max_profit = max(max_profit, i[j])\n        if max_profit == n:\n            break\n\n    return max_profit\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort(reverse=True)\n    distribute(arr, k, 0, len(arr)-1)\n    return str(max(arr))\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nprint(solution(input()))\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution\n    \"\"\"\n    # write your code in Python 3.6\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    m = {i: [] for i in range(n)}\n    for i in range(n):\n        m[i + 1] = m.get(i + 1, [])\n        for j in range(i):\n            m[i + 1].append(a[i] + a[j])\n    print(m)\n    m = [{i: len(list(filter(lambda x: x == i, m[i]))) for i in range(n)} for j in range(n)]\n    print(m)\n    ans = 0\n    for i in range(1, n):\n        for j in range(i):\n            ans += (m[i + 1][j] - m[i + 1][j + 1])\n    return ans\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the Kolya problem.\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return min number of element to add to the array, to make it without any subsegments with sum equal to 0\n    \n    Arguments:\n        stdin {str} -- input string\n    \n    Returns:\n        str -- output string\n    \"\"\"\n    \n    \n    array = stdin.split('\\n')[1].split(' ')\n    array = list(map(int, array))\n    \n    # calculate prefix sum\n    for i in range(1, len(array)):\n        array[i] = array[i-1] + array[i]\n    \n    # check if there is any subsegment with sum = 0\n    for i in range(1, len(array)):\n        if array[i-1] == 0:\n            continue\n        else:\n            for j in range(i, len(array)):\n                if array[j] == 0:\n                    continue\n                elif array[j] == array[i-1]:\n                    array[j] = 0\n                else:\n                    break\n    \n    return str(array.count(0))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = [int(n) for n in stdin.split()]\n    \n    if n == 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    \n    left = 0\n    right = 0\n    count = 0\n    while right < n:\n        count += 1\n        right += array[right]\n    \n    right = 0\n    for i in range(n):\n        count -= array[i]\n        if count < 0:\n            left = i + 1\n            count += array[i]\n    return str(left)"
    },
    {
        "number": 4092,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check(s: str) -> int:\n        if s[0] == '-':\n            return -1 * int(s[1:])\n        return int(s)\n\n    n = int(stdin.readline())\n    arr = list(map(check, stdin.readline().split()))\n    s = 0\n    res = 0\n    for i in range(n):\n        s += arr[i]\n        while s > 0 and i < n - 1:\n            s -= arr[i + 1]\n            i += 1\n            res += 1\n    return res"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # [int(s) for s in stdin.split(\"\\n\")[:-1]]\n    # n, m = stdin.split(\"\\n\")[0].split(\" \")\n    n, m = map(int, stdin.split(\"\\n\")[0].split(\" \"))\n    arr = []\n    for i in range(n):\n        arr.append(int(stdin.split(\"\\n\")[i + 1]))\n\n    # print(arr)\n\n    def dp(arr, n, m):\n        dp = [[0] * (m + 1) for i in range(n + 1)]\n        dp[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(0, m + 1):\n                if j - arr[i - 1] >= 0:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - arr[i - 1]] + abs(arr[i - 1]))\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][m]\n\n    def dp2(arr, n, m):\n        dp = [[0] * (m + 1) for i in range(n + 1)]\n        dp[0][0] = 0\n        s = 0\n        for i in range(1, n + 1):\n            for j in range(0, m + 1):\n                if j - arr[i - 1] >= 0:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - arr[i - 1]] + abs(arr[i - 1]))\n                    s = max(s, dp[i][j])\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return s\n\n    print(dp2(arr, n, m))\n    # print(dp(arr, n, m))\n\n    return \"\"\n\n\nsolution(\"1 100\\n2 2\\n5 5\\n2 1000000000\\n1000000000 1000000000\")\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin.split())\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\n    # input_stream = open(stdin)\n    n, m = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        mini = float('inf')\n        for i in range(n - 1):\n            mini = min(mini, abs(arr[i] - arr[i + 1]))\n        print(mini)\n"
    },
    {
        "number": 4093,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    i = 1\n    multiple = 7\n    while True:\n        if multiple % k == 0:\n            break\n        multiple *= 7\n        i += 1\n    return str(i)\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    i = 1\n    while True:\n        if (i * 7) % K == 0:\n            return i\n        i += 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    K = int(stdin)\n    arr = [7, 77, 777]\n    for i in range(K):\n        if i * 7 % K == 0:\n            return str(i)\n    return '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline())\n    seq = list(stdin.readline().split())\n    if not any([int(x) % k == 0 for x in seq]):\n        return -1\n    return str(len([x for x in seq if int(x) % k == 0]))\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, K = map(int, stdin.split('\\n')[0].split(' '))\n    \n    sequence = [i for i in range(1, n + 1)]\n    \n    for i in range(1, n + 1):\n        if i % K == 0:\n            sequence.append(i)\n    \n    if sequence == []:\n        return \"-1\"\n    else:\n        return str(sequence.index(sequence[-1]) + 1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 101\n    # last occurence\n    l = 1\n    # b = True\n    # while b:\n    #     if n % k == 0:\n    #         l += 1\n    #         n = n / k\n    #     else:\n    #         b = False\n    #         break\n    #     if n == 1:\n    #         break\n    #     else:\n    #         k *= 10\n    # return l\n    return l if (n // k) % 10 == 0 else -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    i = 1\n    while i < 100:\n        i = i*7\n        if i % k == 0:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin\n    K = int(stdin)\n    if K not in sequence:\n        print(-1)\n    else:\n        print(sequence.index(K))\n        \n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def isMultipleOfK(k: int, n: int) -> bool:\n        return n % k == 0\n\n    k = int(stdin)\n    i = 1\n    while not isMultipleOfK(k, i):\n        i += 1\n    return i - 1 if isMultipleOfK(k, i) else -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4094,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin\n    K = int(data)\n    count = 0\n    while len(str(count)) < len(data):\n        if (count + 1) % K == 0:\n            return str(count)\n        count += 1\n    return '-1'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the number of pairs of indices such that the median of p_l, p_{l+1},..., p_r is exactly m.\"\"\"\n    n, m = map(int, stdin.split(' '))\n    p = list(map(int, stdin.split(' ')))\n\n    p.sort()\n    l, r = 0, n - 1\n    while l <= r:\n        if p[l] + p[r] > m:\n            r -= 1\n        elif p[l] + p[r] < m:\n            l += 1\n        else:\n            return str(r - l + 1)\n\n    return '0'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    lst = [int(x) for x in stdin.split(' ')]\n    c = [0] * 10001\n    for x in lst:\n        c[x] += 1\n    ans = 0\n    for l in range(n):\n        if l > 0:\n            c[lst[l - 1]] -= 1\n            c[lst[l]] += 1\n        for r in range(l + 1, n):\n            if lst[l] <= m and lst[r] <= m:\n                if lst[l] == m or lst[r] == m:\n                    ans += c[lst[l]] * c[lst[r]]\n                else:\n                    ans += c[lst[l]] * c[lst[r]] * 2\n            if lst[l] > m or lst[r] > m:\n                break\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4\\n2 4 5 3 1\")\n    4\n    \"\"\"\n    n, m = map(int, stdin.split())\n    permutation = list(map(int, stdin.split()))\n    l = 0\n    r = len(permutation)\n    numbers = []\n    while r > l:\n        for num in permutation[l:r]:\n            numbers.append(num)\n        l += 1\n        r -= 1\n    sorted_numbers = sorted(numbers)\n    count = 0\n    while r - l > 1:\n        if sorted_numbers[l + r // 2] == m:\n            count += 1\n        if sorted_numbers[l + r // 2 - 1] == m:\n            count += 1\n        if sorted_numbers[l + r // 2 + 1] == m:\n            count += 1\n        l += 1\n        r -= 1\n    return count\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = map(int, stdin.split())\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if p[i] * p[j] > m * m:\n                count += 1\n    return count\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    s = list(map(int, stdin.split(' ')))\n    num_of_pairs = 0\n    for i in range(n):\n        if (s[i] == m):\n            num_of_pairs += 1\n        for j in range(i+1, n):\n            if (m in range(s[i], s[j]+1)):\n                num_of_pairs += 1\n    return num_of_pairs\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    lst = [int(i) for i in stdin.split(' ')[1].split(' ')]\n\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if lst[i] > m or lst[j] < m:\n            break\n\n        if lst[i] == m or lst[j] == m:\n            return str(int(j - i + 1))\n\n        if lst[i] < m:\n            i += 1\n        if lst[j] > m:\n            j -= 1\n    return '0'\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4095,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find minimum number of days Polycarp need to complete his coursework.\n    '''\n    cups: int = int(stdin.split(' ')[0])\n    caffeine: str = stdin.split(' ')[1]\n    caffeine: list = [int(x) for x in caffeine.split(' ')]\n\n    # TODO\n    return ''"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution('5 8\\n2 3 1 1 2'))\nprint(solution('7 10\\n5 5 5 5 5'))\nprint(solution('5 15\\n5 5 5 5 5'))\nprint(solution('5 26\\n5 5 5 5 5'))\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline())\n    coffee = list(map(int, stdin.readline().split()))\n    pages = sum(coffee)\n    if pages > days:\n        return -1\n    else:\n        remain_pages = days - pages\n        remain_coffee = []\n        for cup in coffee:\n            if cup > remain_pages:\n                remain_coffee.append(cup - remain_pages)\n            else:\n                remain_coffee.append(0)\n        res = remain_pages\n        while len(remain_coffee) > 0:\n            res += 1\n            first = remain_coffee[0]\n            for idx, cup in enumerate(remain_coffee):\n                if cup > first + 1:\n                    break\n            if first == 0:\n                remain_coffee.pop(0)\n                continue\n            else:\n                remain_coffee.pop(idx)\n                remain_coffee.append(first - 1)\n        return res"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = map(int, stdin.split())\n    count = 0\n    n = 0\n    for i in cups:\n        n += 1\n        if i < m:\n            count += i\n        else:\n            count += m\n    if count < m:\n        return str(n)\n    return '-1'"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, pages = map(int, stdin.split())\n    cups = map(int, stdin.split())\n    cups = list(cups)\n    cups.sort()\n    maxPage = max(cups)\n    dp = [0 for _ in range(pages + 1)]\n    dp[0] = 0\n    for i in range(pages):\n        if i + 1 in cups:\n            dp[i + 1] = dp[i] + 1\n        else:\n            dp[i + 1] = dp[i]\n    for i in range(maxPage, pages):\n        for j in range(cups[0], pages):\n            if dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    if dp[pages] == pages:\n        return '-1'\n    return str(dp[pages])\n    pass\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = int(lines[0].split()[0]), int(lines[0].split()[1])\n    lines = [int(i) for i in lines[1].split()]\n    result = 0\n    for i in range(n):\n        result += max(0, lines[i] - i)\n    if result < m:\n        return str(m - result)\n    return '-1'\n"
    },
    {
        "number": 4096,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    cups_count = list(map(int, stdin.split()))\n\n    memo = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i == 1:\n            memo[i] = cups_count[i - 1]\n            continue\n        else:\n            memo[i] = max(memo[i - 1], max(0, cups_count[i - 1] - 1))\n\n    min_day = memo[m]\n    for i in range(1, n + 1):\n        if i == 1:\n            continue\n        min_day = min(min_day, max(0, memo[i - 1] + memo[i] - 2))\n\n    if min_day == 0:\n        return '-1'\n\n    return str(min_day)\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n24 21 14 10\\n\")\n    '3'\n    >>> solution(\"5\\n1 3 6 9 12\\n\")\n    '-1'\n    >>> solution(\"2\\n500 500\\n\")\n    '0'\n    >>> solution(\"3\\n14 5 1\\n\")\n    '1'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    if n < 3:\n        return '-1'\n\n    d = [0] * n\n    d[0] = abs(a[1] - a[0])\n    d[1] = abs(a[2] - a[1])\n\n    for i in range(2, n):\n        d[i] = min(d[i - 1], d[i - 2]) + abs(a[i] - a[i - 1])\n        if i >= 3:\n            d[i] = min(d[i], d[i - 3] + abs(a[i] - a[i - 3]))\n    if d[-1] == 0:\n        return '0'\n    return str(d[-1])\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem, using dynamic programming.\n    \"\"\"\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    n_down, n_up, n_same = 0, 0, 0\n    for i in range(1, n):\n        if b[i] > b[i - 1]:\n            n_down += 1\n        elif b[i] < b[i - 1]:\n            n_up += 1\n        else:\n            n_same += 1\n    if n_down + n_up > n - 1 or n_same > 1:\n        return -1\n    return n - n_down - n_up - n_same + 1\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom itertools import accumulate\nfrom sys import stdout\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A program that receives a sequence of positive integers and modifies it\n    to become an arithmetic progression.\n    :param stdin: a string with a sequence of positive integers\n    :return: the minimum number of elements that can be changed so that the\n    sequence becomes an arithmetic progression, or \"No solution\" if the\n    sequence is already an arithmetic progression\n    '''\n    sequence = list(map(int, stdin.split()))\n    sequence = [x for x in sequence if x > 0]\n\n    if len(sequence) < 3:\n        return \"No solution\"\n\n    change = 0\n    if sequence[0]!= sequence[1] - 1:\n        change += 1\n    if sequence[1]!= sequence[2] - 1:\n        change += 1\n    if sequence[0]!= sequence[1] - 1:\n        change += 1\n\n    return change if change <= 2 else \"No solution\"\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n24 21 14 10\\n\")\n    '3'\n    >>> solution(\"2\\n500 500\\n\")\n    '0'\n    >>> solution(\"3\\n14 5 1\\n\")\n    '-1'\n    >>> solution(\"5\\n1 3 6 9 12\\n\")\n    '1'\n    \"\"\"\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n\n    i = 0\n    while i < n - 1:\n        if b[i]!= b[i + 1] - 1:\n            i += 1\n            if i == n - 1:\n                return '-1'\n            continue\n        for j in range(i + 1, n):\n            if b[i]!= b[j] - 1:\n                i += 1\n                if i == n - 1:\n                    return '-1'\n                continue\n            i += 1\n            if i == n - 1:\n                return str(j - i + 1)\n    return '-1'\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(s) for s in stdin.readline().strip().split(' ')]\n    diff = [num1 - num2 for num1, num2 in zip(nums[1:], nums)]\n    count = 0\n    diff = sorted(diff, reverse=True)\n    if len(diff) == 1 and diff[0] == 0:\n        return count\n    for i in range(0, len(diff)):\n        if diff[i]!= diff[i + 1]:\n            count += 1\n            break\n    if count == len(diff) and diff[0] < 0:\n        return -1\n    return count\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 24 21 14 10''')\n    '3'\n    >>> solution('''5\n   ... 1 3 6 9 12''')\n    '1'\n    >>> solution('''5\n   ... 1 3 6 9 12''')\n    '1'\n    >>> solution('''3\n   ... 14 5 1''')\n    '0'\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4097,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_std = int(stdin.readline())\n    std_skills = list(map(int, stdin.readline().split()))\n    num_teams = int(stdin.readline())\n    return str(solve(num_std, num_teams, std_skills))\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from sys import stdin, stdout\n\n    _ = stdin.readline()\n    n, k = list(map(int, stdin.readline().split()))\n    _ = stdin.readline()\n    a = list(map(int, stdin.readline().split()))\n\n    m = 0\n    for i in range(k):\n        b = [a[j] for j in range(n)]\n        b.sort(reverse=True)\n        s = 0\n        for j in range(n):\n            if b[j] >= 5:\n                b[j] -= 5\n                s += 1\n            else:\n                break\n        m = max(m, s)\n\n    return stdout.write(str(m))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    abilities = [int(ability) for ability in stdin.split()]\n    abilities.sort(reverse=True)\n    result = []\n    \n    for i in range(0, n, k):\n        if abilities[i] - abilities[i + k - 1] <= 5:\n            result.append([abilities[i], abilities[i + k - 1]])\n\n    return len(result)"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(int(stdin.split()[0]))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split('\\n')[0].split()\n    students = stdin.split('\\n')[1].split()\n    s = 0\n    for i in range(len(students)):\n        s += int(students[i])\n    s = s // k\n    teams = 0\n    for i in range(len(students)):\n        for j in range(i + 1, len(students)):\n            if abs(int(students[i]) - int(students[j])) <= 5:\n                teams += 1\n    return str(teams + (k - (s - teams)) * (s // k))\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n,k = map(int, stdin.split())\n    std = list(map(int, stdin.split()))\n    if k > n:\n        return k\n    std.sort()\n    diff = 10 ** 9\n    for i in range(1,n):\n        for j in range(i+1,n):\n            if std[i] - std[j] <= 5 and std[i] - std[j] > 0 and std[i] - std[j] < diff:\n                diff = std[i] - std[j]\n    return diff"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    max_sum = 0\n    for i in range(1, x + 1):\n        for j in range(i + 1, x + 1):\n            for k in range(j + 1, x + 1):\n                sum_array = []\n                for l in range(i):\n                    sum_array.append(s[l])\n                for m in range(j):\n                    sum_array.append(s[m])\n                for n in range(k):\n                    sum_array.append(s[n])\n                sum_array.sort()\n                sum_array = [sum_array[i:i+3] for i in range(0, len(sum_array), 3)]\n                sum_array = list(sum(x) for x in sum_array)\n                max_sum = max(sum_array)\n    return max_sum\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    num = list(map(int, stdin.split()))\n    num.sort()\n    cnt = 0\n    for i in range(0, len(num), k):\n        if len(set(num[i:i + k])) == k:\n            cnt += 1\n    return cnt\n\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    r = 0\n    while k > 0:\n        for i in range(n):\n            if a[i] > 5 + r:\n                r += a[i] - 5\n                a[i] = 5\n            elif a[i] > 5:\n                a[i] -= 5\n                r += 5\n            k -= 1\n            if k == 0:\n                return r\n            if k == 1 and r > 0:\n                return r + 1\n"
    },
    {
        "number": 4098,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    lst = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    lst.sort()\n    lst.reverse()\n    total_sum = sum(lst)\n    index = total_sum//k\n    count = 0\n    for i in lst:\n        if i > index:\n            count += 1\n            total_sum -= index\n        else:\n            total_sum -= i\n            count += 1\n        if total_sum < k:\n            break\n    return count\nprint(solution(input))\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    total = 0\n    count = 0\n    for i in range(n):\n        total += int(stdin[i+1])\n        if total/count >= m:\n            return count\n        count += 1\n    return -1\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Get the input; n - total subjects, k - total points, m - goal score, a - points of each subject'''\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # Initialize the scores\n    scores = [0] * n\n    # Get the minimum and maximum values of the given a\n    min_a = min(a)\n    max_a = max(a)\n    # If the goal is not attainable\n    if max_a < m:\n        return -1\n    # If the first subject is not worth the goal score\n    elif min_a < m:\n        # Then the first subject needs to be worth more than the goal\n        scores[0] = m - min_a\n    # If the first subject is worth the goal score, we need to decide whether the second subject is worth more\n    # If the second subject is not worth more than the goal score\n    if max_a - m < m:\n        # Then we can score it off\n        scores[1] = max_a - m\n    # If the second subject is worth more than the goal score\n    elif max_a - m >= m:\n        # Then we need to get the value of the second subject that is less than the goal score\n        scores[1] = m - max_a + m\n    # Iterate through the scores\n    for i in range(2, n):\n        # Get the minimum and maximum values of the given a\n        min_a = min(a[:i])\n        max_a = max(a[:i])\n        # If the minimum is not worth more than the goal score\n        if min_a < m:\n            # Then we need to get the value of the first subject that is less than the goal score\n            scores[i] = m - min_a + scores[i - 1]\n        # If the minimum is worth more than the goal score\n        elif min_a >= m:\n            # Then we need to get the value of the first subject that is less than the goal score\n            scores[i] = m - max_a + scores[i - 1]\n    return max(scores)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(n) for n in stdin.split(' ')]\n    N, K, M = inputs[0], inputs[1], inputs[2]\n    scores = [int(n) for n in stdin.split(' ')]\n    scores = sorted(scores, reverse=True)\n    \n    if scores[0] >= M:\n        return scores[0]\n    \n    for i in range(N-1):\n        if scores[i] <= K:\n            if scores[i] + scores[i+1] >= M:\n                return scores[i] + scores[i+1]\n            elif scores[i] + scores[i+1] < M:\n                return -1\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of points Takahashi needs on the final subject to achieve his goal.\"\"\"\n    n, k, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    # get rid of any leading 0s\n    scores = [s for s in scores if s > 0]\n\n    ans = 0\n    for i in range(1, len(scores) + 1):\n        score_sum = sum(scores[:i])\n        if score_sum >= m:\n            ans = i\n            break\n    return str(ans)\n"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    # For your information:\n    # The first line of the input contains N, K, M.\n    # The second line contains N-1 integers A1, A2,..., AN-1.\n    # Each of the next N-1 lines contains an integer Ai.\n    # At the end, there is a single line containing N integers.\n    # Constraints\n    # 1 <= N <= 100\n    # 1 <= K <= 100\n    # 0 <= Mi <= K\n    # 0 <= Ai <= K\n    # The i-th line contains a valid input.\n    # The sum of N, K, M does not exceed 100.\n    # The sum of N-1 does not exceed 100.\n    # All the Ai's do not exceed K.\n    # N and K are integers.\n    # The i-th integer does not exceed K.\n    # All the integers in the input are integers.\n    # 1 <= Ni <= 100\n    # 1 <= Ai <= K\n    # All the Ni's do not exceed 100.\n    # All the Ai's do not exceed K.\n    # The i-th integer does not exceed K.\n    # The sum of Ni does not exceed 100.\n    # The sum of Ai does not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed 100.\n    # The sum of Ni does not exceed 100.\n    # All the Ni's do not exceed"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # my code here\n    N, K, M = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    sum = 0\n    for i in range(len(scores)):\n        sum += scores[i]\n    if sum/N > M:\n        return str(sum//(N-1))\n    else:\n        return str(-1)"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    _, score = [int(x) for x in stdin.split(' ')]\n    if sum(score) / (n - 1) >= m:\n        return str(m)\n    else:\n        return '-1'"
    },
    {
        "number": 4099,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of points Takahashi needs on the final subject to achieve his goal.\"\"\"\n    n, k, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    total_scores = sum(scores)\n    if m < total_scores:\n        return total_scores - m\n    else:\n        return -1\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    n, k, q = map(int, stdin.split())\n    result = list(map(lambda x: 'Yes' if x >= q else 'No', [0 for i in range(n)]))\n    return \"\\n\".join(result)"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split(' '))\n    scores = [K] * N\n    for i in range(Q):\n        q = int(stdin)\n        scores[q - 1] -= 1\n        scores = list(map(lambda x: x if x > 0 else 0, scores))\n        if sum(scores) == 0:\n            break\n    print('Yes') if sum(scores) > 0 else print('No')\n    return \"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_survived(n: int, k: int, q: int, a_list: List[int]):\n        pass\n\n    n, k, q = [int(x) for x in stdin.split(' ')]\n    a_list = [int(x) for x in stdin.split('\\n')[:-1]]\n\n    is_survived(n, k, q, a_list)\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... ''')\n    'No'\n    >>> solution('''\n   ... 6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... ''')\n    'No'\n    >>> solution('''\n   ... 6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 1\n   ... ''')\n    'Yes'\n    >>> solution('''\n   ... 6 3 4\n   ... 3\n   ... 1\n   ... 3\n   ... 2\n   ... 2\n   ... ''')\n    'Yes'\n    \"\"\"\n    n, k, q = [int(i) for i in stdin.split()]\n    scores = [k] * n\n    for _ in range(q):\n        a = int(stdin)\n        if scores[a - 1] > 0:\n            scores[a - 1] -= 1\n        print(\"Yes\" if scores[a - 1] > 0 else \"No\")\n    return \"\"\n   ...\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...   \"6 3 4\\n3\\n1\\n3\\n2\\n\"\n   ... )\n    'No\\nNo\\nYes\\nNo\\nNo\\nNo'\n    \"\"\"\n    N, K, Q = tuple(map(int, stdin.split('\\n')[0].split()))\n    scores = [K] * N\n    for i in range(Q):\n        answer = int(stdin.split('\\n')[i + 1])\n        correct = 1 if scores[answer - 1] >= 0 else 0\n        scores[answer - 1] -= 1\n        for j in range(N):\n            scores[j] += correct\n    return '\\n'.join('Yes' if s >= 0 else 'No' for s in scores)\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    scores = [k] * n\n    for i in range(q):\n        a = int(stdin.readline())\n        scores[a - 1] -= 1\n    for i in range(n):\n        if scores[i] <= 0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution does a readlines() followed by a split() on stdin, which can be used for any language that\n    does not handle command prompts (e.g. an IDE), but it does mean that this solution cannot run on\n    editors that do handle command prompts.\n    \"\"\"\n    N, K, Q = [int(n) for n in stdin.split()]\n    scores = [K] * N\n    for _ in range(Q):\n        A = int(stdin) - 1\n        scores[A] -= 1\n        for i in range(N - 1):\n            scores[i] += 1 if scores[i + 1] < 0 else -1\n        scores[A] += 1 if scores[A] < 0 else -1\n    return '\\n'.join(['No' if s > 0 else 'Yes' for s in scores])\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\\nNo\\nYes\\nNo\\nNo\\nNo\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # my initial thought was to parse stdin into an array of the scores, and then see if\n    # any of the players were below 0. That took too long. Maybe there's a more elegant way.\n    n, k, q = list(map(int, stdin.split()))\n    scores = []\n    for _ in range(n):\n        scores.append(k)\n    correct_answers = 0\n    for _ in range(q):\n        a = int(stdin.split()[0])\n        correct_answers += scores[a - 1]\n        scores[a - 1] = scores[a - 1] - 1\n    for score in scores:\n        if score < 0:\n            print('No')\n            return\n    print('Yes' if scores[0] else 'No')"
    },
    {
        "number": 4100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    scores = [k] * n\n    for _ in range(q):\n        i, p = map(int, stdin.split())\n        scores[i - 1] -= p\n        if scores[i - 1] < 0:\n            scores[i - 1] = 0\n    for s in scores:\n        if s!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    arr = []\n    for i in range(n):\n        arr.append([int(x) for x in stdin.split('\\n')[i].split(' ')])\n\n    sort_arr = []\n    for i in range(n):\n        sort_arr.append(arr[i][0])\n    for i in range(m):\n        sort_arr.append(arr[0][i])\n    # sort_arr = list(arr[0]) + list(arr[1]) + list(arr[2])\n    print(sort_arr)\n    for i in range(1, n):\n        for j in range(1, m):\n            if arr[i][j]!= arr[i-1][j] and arr[i][j]!= arr[i][j-1]:\n                return 'NO'\n    if arr[0][0]!= arr[0][1]:\n        return 'NO'\n    if arr[0][m-1]!= arr[0][m-2]:\n        return 'NO'\n    if arr[n-1][m-1]!= arr[n-1][m-2]:\n        return 'NO'\n\n    arr[0][0], arr[0][1] = arr[0][1], arr[0][0]\n    sort_arr[0], sort_arr[1] = sort_arr[1], sort_arr[0]\n    for i in range(n):\n        for j in range(m):\n            arr[i][j], sort_arr[i+j] = sort_arr[i+j], arr[i][j]\n    return 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    # 1 -> 0\n    # 0 -> 1\n    # a = [[1, 1, 1, 1], [0, 1, 0, 0], [1, 1, 0, 0]]\n    inversed = [[0 for _ in range(m)] for _ in range(n)]\n    for row in a:\n        print(row)\n    print()\n    for row in inversed:\n        print(row)\n    # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    # [[0, 0, 0, 0], [1, 0, 1, 1], [1, 1, 0, 0]]\n    # [[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 0]]\n    # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    print()\n    for row in inversed:\n        print(row)\n    # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    # [[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 0]]\n    # [[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 0]]\n    # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    # [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]\n    print()\n    for row in a:\n        print(row)\n    # [[1, 1, 1, 1], [0, 1, 0, 0], [1, 1, 0, 0]]\n    # [[0, 1, 0, 1], [0, 1, 0, 1], [1, 1, 0, 0]]\n    # [[1, 1, 1, 1], [0, 1, 0, 1], [1, 1, 0, 0]]\n    return 'NO'\nsolution('2 2\\n1 1\\n0 1')\nsolution('3 4\\n0 0 0\\n1 0 1\\n1 1 0')\nsolution('3 3\\n0 0 0\\n1 0 1\\n1 1 0')\n\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    # print(a)\n\n    inv1 = set()\n    inv2 = set()\n    for i in range(n):\n        if sum(a[i]) == 0:\n            inv1.add(i)\n        elif sum(a[i]) == m:\n            inv2.add(i)\n\n    # print(inv1, inv2)\n\n    inv1 = list(inv1)\n    inv2 = list(inv2)\n    for i in range(len(inv1)):\n        for j in range(len(inv2)):\n            if sum(a[inv1[i]]) == sum(a[inv2[j]]):\n                print(\"YES\")\n                inv1[i] = inv2[j]\n                inv2[j] = inv1[i]\n                print(\"010\")\n                break\n        else:\n            print(\"NO\")\n            return\n\n    # print(inv1, inv2)\n    for j in range(m):\n        if j not in inv2:\n            print(\"NO\")\n            return\n\n    print(\"YES\")\n    print(\"10\")\n    return\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    matrix = []\n    for _ in range(n):\n        row = list(map(int, stdin.readline().split()))\n        matrix.append(row)\n\n    s = Solver(matrix)\n    if not s.isSolvable():\n        print(\"NO\")\n        return\n\n    s.solve()\n    if s.solution is None:\n        print(\"NO\")\n        return\n\n    print(\"YES\")\n    for i in s.solution:\n        print(i)\n\n    return\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if matrix can be sorted by given operations.\"\"\"\n    _, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(m):\n        matrix.append(list(map(int, stdin.split())))\n\n    # Find all rows and columns that can be sorted\n    rows = list(filter(find_sorted, matrix))\n    columns = list(filter(find_sorted, zip(*matrix)))\n\n    # If there are no rows or columns that can be sorted\n    if not rows or not columns:\n        return 'NO'\n    else:\n        # Find the row and column with the most number of elements\n        row, col = max(rows, key=len) - 1, max(columns, key=len) - 1\n\n        # Sort these rows and columns\n        matrix[row] = sorted(matrix[row])\n        columns = zip(*matrix)\n        for col in columns:\n            col = sorted(col)\n            matrix[col] = col\n\n        # Find the row and column with the most number of elements\n        row, col = max(rows, key=len) - 1, max(columns, key=len) - 1\n\n        # If the row and column of the most number of elements has an odd number of elements, it is inverted\n        if len(matrix[row]) % 2!= 0:\n            matrix[row] = [i for i in reversed(matrix[row])]\n        if len(columns[col]) % 2!= 0:\n            columns[col] = [i for i in reversed(columns[col])]\n\n        # Check if a binary matrix can be obtained\n        return 'YES\\n{}\\n{}'.format(''.join(row[0] for row in matrix), ''.join(columns[0]))\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input:\n    3 4\n    0 0 0 1\n    0 0 0 0\n    1 1 1 1\n    output:\n    YES\n    010\n    0000\n    '''\n    n, m = [int(x) for x in stdin.split()]\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    a.sort(key=lambda x: x[0] * 100 + x[1])\n    return 'NO' if a[-1] == a[0] else 'YES\\n' + ''.join(['0' if x[0] == 1 else '1' for x in a]) + '\\n' + ''.join(['0' if x[1] == 1 else '1' for x in a])\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in stdin.split(' ')])\n    \n    for i in range(n):\n        for j in range(m):\n            if i + j >= m - 1:\n                return \"NO\"\n            elif a[i][j] == 1 and a[i][j+1] == 0:\n                a[i][j+1] = 1\n            elif a[i][j] == 0 and a[i][j+1] == 1:\n                a[i][j] = 0\n\n    for i in range(m):\n        for j in range(n):\n            if i + j >= n - 1:\n                return \"NO\"\n            elif a[j][i] == 1 and a[j+1][i] == 0:\n                a[j+1][i] = 1\n            elif a[j][i] == 0 and a[j+1][i] == 1:\n                a[j][i] = 0\n\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(' ')]\n    A = [[int(n) for n in stdin.split('\\n')[i].split(' ')[:m]] for i in range(n)]\n    res = []\n    for row in A:\n        if sum(row) == 0:\n            res.append('0')\n        elif sum(row) == m:\n            res.append('1')\n        else:\n            res.append('?')\n    print('YES')\n    print(''.join(res))\n    print(''.join([row[0] for row in A]))\n"
    },
    {
        "number": 4101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    def inverse_row(matrix, i):\n        for j in range(m):\n            matrix[i][j] ^= 1\n\n    def inverse_col(matrix, j):\n        for i in range(n):\n            matrix[i][j] ^= 1\n\n    def check_matrix(matrix):\n        for i in range(n):\n            if matrix[i]!= sorted(matrix[i]):\n                return False\n        return True\n\n    def check_row(matrix, row):\n        return matrix[row] == sorted(matrix[row])\n\n    def check_col(matrix, col):\n        return [row[col] for row in matrix] == sorted(\n            [row[col] for row in matrix]\n        )\n\n    if check_matrix(matrix):\n        return \"YES\"\n\n    for row in range(n):\n        if check_row(matrix, row):\n            inverse_row(matrix, row)\n            return \"YES\"\n        else:\n            inverse_row(matrix, row)\n    for col in range(m):\n        if check_col(matrix, col):\n            inverse_col(matrix, col)\n            return \"YES\"\n        else:\n            inverse_col(matrix, col)\n\n    return \"NO\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Yes\" if len(stdin) == len(set(stdin)) else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) == sum(map(int, stdin)) else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if int(stdin) == int(stdin[::-1]):\n                return \"Yes\"\n            stdin = int(stdin)\n            stdin = str(stdin * i)\n    return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # -----Write your code here-----\n    stdin = list(map(int, stdin))\n    if sum(stdin) % 3 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 10 or len(stdin) < 1:\n        return \"No\"\n    count = 0\n    for c in stdin:\n        if c == '0':\n            count += 1\n    if count == 0:\n        return \"No\"\n    if len(stdin) % 2 == 0 and len(stdin) > 2 and (stdin[0] == '0' or stdin[0] == '1'):\n        return \"No\"\n    for i in range(1, len(stdin), 2):\n        if int(stdin[i]) % 2!= int(stdin[i - 1]) % 2:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % 17 == 0 else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Yes' if int(stdin) == (int(stdin[::-1])) else 'No'"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) % 2 == 0 else 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"301\")\n    Yes\n    >>> solution(\"124\")\n    No\n    \"\"\"\n    digits = [int(x) for x in stdin]\n    return \"Yes\" if len(set(digits)) == len(digits) and len(digits) == len(set(digits)) else \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin[::-1]\n    for i in range(len(stdin)):\n        if stdin[i] == '0':\n            continue\n        else:\n            return 'Yes'\n    return 'No'\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    # point = n\n    # battery = b\n    # accumulator = a\n    # accu_sum = 0\n    # accu_count = 0\n    # prev = False\n    # for i in range(n):\n    #     if i > 0:\n    #         prev = not prev\n    #     s = int(stdin.readline())\n    #     if prev:\n    #         battery -= 1\n    #         if battery == 0:\n    #             accumulator -= 1\n    #         else:\n    #             accu_sum += 1\n    #         battery -= 1\n    #         if battery == 0:\n    #             accumulator -= 1\n    #         else:\n    #             accu_sum += 1\n    #         battery -= 1\n    #         if battery == 0:\n    #             accumulator -= 1\n    #         else:\n    #             accu_sum += 1\n    #         accu_count += 1\n    #         if accumulator == 0:\n    #             accu_count = 0\n    #     else:\n    #         if s:\n    #             battery -= 1\n    #         else:\n    #             accumulator -= 1\n    #         if battery == 0:\n    #             accumulator -= 1\n    #         else:\n    #             accu_sum += 1\n    #         battery -= 1\n    #         if battery == 0:\n    #             accumulator -= 1\n    #         else:\n    #             accu_sum += 1\n    #         battery -= 1\n    #         if battery == 0:\n    #             accumulator -= 1\n    #         else:\n    #             accu_sum += 1\n    #         accu_count += 1\n    #         if accumulator == 0:\n    #             accu_count = 0\n    # print(accu_sum, accu_count)\n    # return accu_count\n    return (n // 2) * 2 + 1 if n % 2 == 0 else n - 1 + (n // 2) * 2 + 1\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(A: int, B: int, C: int, P: list[int]) -> int:\n        dp = [0] * (B + 1)\n        for d, p in P:\n            dp[d] = max(dp[d], p)\n            for i in range(d + 1, B + 1):\n                dp[i] = max(dp[i], dp[i - d] + p)\n        return B - dp[-1]\n    n, b, a = [int(i) for i in stdin.split()]\n    P = []\n    for i in range(n):\n        P.append([int(i) for i in stdin.split()][1:])\n    return solve(a, b, C, P)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_charge(cur_pos: int, charge: int) -> int:\n        return cur_pos * (charge + 1) if cur_pos * (charge + 1) > charge else charge\n\n    n, b, a = [int(x) for x in stdin.split(' ')]\n    # print(n, b, a)\n    dists = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    # print(dists)\n    cur_pos = 0\n    charge = b\n    result = 0\n    for i in range(n):\n        # print(i, cur_pos, charge, dists[i], get_charge(cur_pos, charge), result)\n        if dists[i] == 1:\n            if charge <= a:\n                result = max(result, get_charge(cur_pos, charge))\n            else:\n                cur_pos += 1\n                charge = b\n        else:\n            cur_pos += 1\n            charge -= 1\n    return result\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split(' '))\n    s = list(map(int, stdin.split(' ')[1:]))\n    b += 1\n    a += 1\n    count = 0\n    battery = 0\n    accumulator = 0\n    for x in s:\n        if x == 1:\n            if accumulator + b > a:\n                accumulator = 0\n                battery += 1\n            else:\n                accumulator += 1\n        else:\n            if battery + a > b:\n                battery = 0\n                accumulator += 1\n            else:\n                battery += 1\n        count = max(count, battery + accumulator)\n    return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total_battery = int(stdin.readline())\n    total_accumulator = int(stdin.readline())\n    segments = list(map(int, stdin.readline().split()))\n    battery_index = 0\n    accumulator_index = 0\n    max_count = 0\n    while accumulator_index < total_accumulator and battery_index < total_battery:\n        if segments[accumulator_index] == 0:\n            accumulator_index += 1\n        if segments[battery_index] == 1:\n            battery_index += 1\n            if accumulator_index < total_accumulator:\n                accumulator_index += 1\n        if accumulator_index < total_accumulator and segments[accumulator_index] == 1:\n            accumulator_index += 1\n        max_count = max(accumulator_index, max_count)\n    return max_count\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(N)\n    space: O(N)\n    '''\n    n, b, a = map(int, stdin.split(' '))\n    s = list(map(int, stdin.split(' ')))\n\n    dp = [[0 for i in range(n+1)] for j in range(b+1)]\n    for i in range(1, n+1):\n        for j in range(b+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= a and dp[i][j] < dp[i][j-a] + s[i-1]:\n                dp[i][j] = dp[i][j-a] + s[i-1]\n    return n - dp[b][a]\n\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution goes here.\n    '''\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"42\"\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    result_list = []\n    for i in stdin.split(\"+\"):\n        i = list(map(int, i.split('-')))\n        result_list.append(sum(i))\n    for j in result_list:\n        result += j\n    return result\nprint(solution(input()))\n\n\n\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(eval(stdin.strip()))\n\nsolution(input())\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\nprint(solution('8-7+6-5+4-3+2-1-0'))  # '4'\nprint(solution('2+2'))  # '-46'\nprint(solution('112-37'))  # '375'"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin = list(stdin.strip())\n    nums = [int(x) for x in stdin if x.isdigit()]\n    signs = [x for x in stdin if x in [\"+\", \"-\"]]\n    n = len(nums)\n    m = len(signs)\n    n = n - m\n    if n == 0:\n        print(\"0\")\n        return 0\n    else:\n        if n % 2!= 0:\n            print(\"0\")\n            return 0\n        else:\n            nums = list(reversed(nums))\n            signs = list(reversed(signs))\n            count = 0\n            for i in range(0, n, 2):\n                if signs[i] == \"+\":\n                    nums[i] += nums[i+1]\n                else:\n                    nums[i] -= nums[i+1]\n                count += nums[i]\n            print(count)\n            return count\n\n\nsolution(\"8-7+6-5+4-3+2-1-0\")\nsolution(\"2+2\")\nsolution(\"112-37\")\n"
    },
    {
        "number": 4104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the sum of two numbers.\n    '''\n    return str(int(stdin) + 1)\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2:\n        return \"NO\"\n\n    if k < 2 or k > 2 * 10 ** 5:\n        return \"NO\"\n\n    # x is the number of colors to use, so number of colors\n    x = n // 2\n\n    # z is the number of colors we need, so number of colors\n    z = n - x\n\n    # y is the number of colors left to use, so number of colors\n    y = k - z\n\n    # s is the sum of the numbers of colors used, so sum of colors\n    s = x + y\n\n    # m is the number of colors used, so number of colors\n    m = x if x <= y else y\n\n    if m < 2 or m > 2 * 10 ** 5:\n        return \"NO\"\n\n    if s < 1:\n        return \"NO\"\n\n    # color number of color, used color number\n    colors = [0] * (z + 1)\n    for i in range(1, m + 1):\n        if i <= x:\n            colors[i - 1] = 1\n        else:\n            colors[i - 1] = i - 1\n\n    # i is the index of the last used color\n    # j is the index of the last color to use\n    i, j = n - 1, n\n    while j >= 0:\n        if i >= j:\n            i, j = j - 1, j - 1\n        else:\n            if colors[j] == 0:\n                colors[j] = 1\n                i, j = j - 1, j - 1\n            else:\n                colors[j] += 1\n                i, j = j - 1, j - 1\n\n    if s!= sum(colors):\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split()]\n    colors = [int(x) for x in stdin.strip().split()]\n    if k < max(colors) or k < max(colors):\n        return \"NO\"\n    count_dict = dict()\n    for color in colors:\n        if color not in count_dict:\n            count_dict[color] = 1\n        else:\n            count_dict[color] += 1\n    colors_to_check = count_dict.keys()\n    res = []\n    for i in range(n):\n        man_color = colors[i]\n        if man_color not in colors_to_check:\n            continue\n        for j in range(i + 1, n):\n            woman_color = colors[j]\n            if woman_color not in colors_to_check:\n                continue\n            if man_color == woman_color:\n                continue\n            if man_color == man_color:\n                continue\n            res.append((man_color, woman_color))\n    if len(res) == 0:\n        return \"NO\"\n    return \"YES\"\n    "
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dancers = [[[1, k]] for _ in range(2*n)]\n    for i in range(n):\n        b, g = map(int, stdin.split())\n        dancers[i][0][0] = b\n        dancers[i][1][0] = g\n    dancers[n][0][0] = dancers[n][1][0]\n    dancers[n+1][0][0] = dancers[n+1][1][0]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if dancers[i][0][0] == dancers[j][1][0] or dancers[i][1][0] == dancers[j][0][0]:\n                dancers[i][0][0] = dancers[j][0][0]\n                dancers[i][1][0] = dancers[j][1][0]\n            else:\n                dancers[i][0][0] = dancers[j][1][0]\n                dancers[i][1][0] = dancers[j][0][0]\n            \n            if dancers[i][0][0] == dancers[j][0][0] or dancers[i][1][0] == dancers[j][1][0]:\n                dancers[i][0][0] = dancers[j][1][0]\n                dancers[i][1][0] = dancers[j][0][0]\n            else:\n                dancers[i][0][0] = dancers[j][0][0]\n                dancers[i][1][0] = dancers[j][1][0]\n            \n            if dancers[i][0][0] == dancers[j][1][0] or dancers[i][1][0] == dancers[j][0][0]:\n                dancers[i][0][0] = dancers[j][0][0]\n                dancers[i][1][0] = dancers[j][1][0]\n            else:\n                dancers[i][0][0] = dancers[j][1][0]\n                dancers[i][1][0] = dancers[j][0][0]\n            \n    for i in range(n):\n        for j in range(i+1, n):\n            if dancers[i][0][0] == dancers[j][0][0] or dancers[i][1][0] == dancers[j][1][0]:\n                return 'NO'\n            if dancers[i][0][0] == dancers[j][1][0] or dancers[i][1][0] == dancers[j][0][0]:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().strip().split()\n    n, k = line\n    line = stdin.readline().strip().split()\n    r = {i: i for i in range(1, int(k) + 1)}\n    c = {i: i for i in range(1, int(k) + 1)}\n    for i in range(0, int(n)):\n        line = stdin.readline().strip().split()\n        r[int(line[0])] = int(line[1])\n        c[int(line[1])] = int(line[0])\n    print('YES')\n    for i in range(1, int(n) + 1):\n        print(r[i], c[i])\n    return 'YES'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split('\\n')[0].split())\n    colors = set()\n    for i in range(1, n+1):\n        (b, g) = map(int, stdin.split('\\n')[i].split())\n        colors.add((b, g))\n        colors.add((g, b))\n\n    colors = list(colors)\n    colors.sort(key=lambda c: (c[0], c[1]))\n\n    pairs = []\n    for i in range(n-1):\n        (b, g) = colors[i]\n        (b1, g1) = colors[i+1]\n        if b == g1:\n            return \"NO\"\n        if (b, g) == (b1, g1):\n            return \"NO\"\n        pairs.append((b, g))\n\n    for i in range(len(pairs)-1):\n        if pairs[i][1] == pairs[i+1][0]:\n            return \"NO\"\n\n    return \"YES\" + \"\\n\" + \"\\n\".join(map(lambda c: str(c[0]) + \" \" + str(c[1]), pairs))\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    if k == 1:\n        return 'YES'\n    \n    bad = [set() for _ in range(n)]\n    good = [set() for _ in range(n)]\n    \n    def add(l, r, c):\n        l, r = min(l, r), max(l, r)\n        bad[l - 1].add(c)\n        good[r - 1].add(c)\n    \n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        add(a, b, b)\n        add(a, b, a)\n    \n    def check(c):\n        return not (bad[0].intersection(c) or good[0].intersection(c))\n    \n    for i in range(1, n):\n        for c in bad[i]:\n            if c in good[i - 1] or check(c):\n                continue\n            return 'NO'\n        for c in good[i]:\n            if c in bad[i - 1] or check(c):\n                continue\n            return 'NO'\n    \n    for i in range(n):\n        add(i + 1, i + 1, good[i].pop())\n        if not good[i]:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/training7PS8MW-BH7/\"\"\"\n    n, k = map(int, stdin.split())\n    colors = [0] * k\n    pair = 0\n    for i in range(n):\n        b, g = map(int, stdin.split())\n        if colors[b - 1]!= 0 or colors[g - 1]!= 0:\n            pair += 1\n        colors[b - 1] = 1\n        colors[g - 1] = 1\n    if pair == 0:\n        return 'YES'\n    elif pair == n / 2:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k < 2 or n * k < 2 or n * (k - 1) < 2:\n        return 'NO'\n    colors = []\n    for i in range(n):\n        if i == 0:\n            colors.append(stdin[i * 4 + 2] * 10 + stdin[i * 4 + 3])\n        else:\n            colors.append(stdin[i * 4 + 2] * 10 + stdin[i * 4 + 3] + colors[-1])\n    sorted_colors = sorted(colors)\n    nums = [0] * k\n    for i in range(n):\n        nums[colors.index(sorted_colors[i])] += 1\n        if nums[colors.index(sorted_colors[i])] > 1:\n            return 'NO'\n    if all(nums[i] == 0 for i in range(k)):\n        return 'YES'\n    i = 0\n    while i < len(nums):\n        if nums[i] == 0:\n            for j in range(i, len(nums)):\n                if nums[j] > 0:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    break\n        i += 1\n    i = 0\n    if all(nums[i] == 0 for i in range(k)):\n        return 'YES'\n    i = 0\n    ans = []\n    for i in range(k):\n        if nums[i] == 1:\n            ans.append(str(i + 1))\n    return 'YES\\n' + '\\n'.join(ans)\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(n) for n in stdin.split('\\n')[0].split()]\n    a = [int(n) for n in stdin.split('\\n')[1].split()]\n    a.sort()\n    res = 0\n    def dfs(idx, curr):\n        if idx >= n:\n            global res\n            res = max(res, sum(curr))\n            return\n        if len(curr) >= k and sum(curr) >= x:\n            dfs(idx + 1, curr)\n        if idx + 1 < n and len(curr) < k:\n            dfs(idx + 1, curr + [a[idx + 1]])\n        dfs(idx + 1, curr)\n    dfs(0, [])\n    if res == 0:\n        res = -1\n    return str(res)\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def readline() -> list[int]:\n        return list(map(int, stdin.readline().split()))\n\n    def readcase() -> tuple[list[int], list[int], int, int]:\n        n, k, x = readline()\n        a = readline()\n        b = readline()\n        return a, b, k, x\n\n    def solve(a: list[int], b: list[int], k: int, x: int) -> int:\n        t = [0] * n\n        t[0] = a[0]\n        for i in range(1, n):\n            t[i] = t[i - 1] + a[i]\n        # print(t)\n        p = 0\n        for i in range(1, n - k + 1):\n            p += t[i + k - 1] - t[i - 1] + b[i]\n        # print(p)\n        ans = p\n        for i in range(n - k + 1, n):\n            p += b[i]\n            ans = max(ans, p)\n        return ans\n\n    cases = readline()[0]\n    for i in range(cases):\n        a, b, k, x = readcase()\n        print(solve(a, b, k, x))\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split('\\n')[0].split())\n    b = list(map(int, stdin.split('\\n')[1].split()))\n    if k > n or x > n:\n        return '-1'\n    a = [0] * (n + 1)\n    for i in range(n):\n        a[i + 1] = a[i] + b[i]\n    # print(a)\n    a.sort()\n    # print(a)\n    res = 0\n    j = 0\n    for i in range(n + 1):\n        while j < n and a[j] - a[i] >= k:\n            j += 1\n        if j < n and a[j] - a[i] < k:\n            res = max(res, a[i] + a[j] - k * (x - 1))\n        else:\n            return str(res)\n    return '-1'\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k, x = stdin.split()\n    arr = stdin.split()\n    arr = [int(i) for i in arr]\n    arr.sort(reverse=True)\n    k = int(k)\n    x = int(x)\n    l = 0\n    r = 0\n    res = 0\n    while r < len(arr):\n        if x == r - l:\n            res = arr[r] + arr[r-1]\n            break\n        else:\n            if r - l + 1 < x:\n                res = arr[r] + arr[r - 1]\n                break\n            else:\n                while r + 1 < len(arr) and arr[r] == arr[r + 1]:\n                    r += 1\n                l = r\n                r = r + 1\n    if res == 0:\n        return '-1'\n    else:\n        return res"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k, x = map(int, stdin.readline().split())\n    arr = map(int, stdin.readline().split())\n    arr.sort()\n    for i in range(n - x + 1):\n        if sum(arr[i:i + x]) > 0:\n            return sum(arr[i:i + x])\n    return -1\n    '''\n    n, k, x = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    for i in range(n - x + 1):\n        if sum(arr[i:i + x]) >= k and sum(arr[i:i + x]) % k == 0:\n            return sum(arr[i:i + x])\n    return -1"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_k(n, k, x):\n        if k == 1:\n            return n\n        else:\n            return math.ceil((n / k) + (k - 1) / (2 * k - 2))\n\n    def get_segment_length(n, k, x):\n        if k == 1:\n            return n\n        else:\n            return math.ceil((n - x + 1) / (k - 1)) + 1\n\n    n, k, x = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    while True:\n        if n <= 0 or k <= 0 or x <= 0 or n > 200 or k > n or x > n:\n            return \"-1\"\n\n        segment_length = get_segment_length(n, k, x)\n        if segment_length > n:\n            return \"-1\"\n\n        k = get_k(n, k, x)\n        n = n - k * (segment_length - 1) + x * (segment_length - 1)\n\n        if k * segment_length >= x:\n            return sum(a[:n])\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    n, k, x = stdin.split(\" \")\n    n, k, x = int(n), int(k), int(x)\n    arr = list(map(int, stdin.split(\" \")))\n    arr = sorted(arr)\n    print(arr)\n    s = sum(arr)\n    s1 = s\n    for i in range(0, n - k + 1):\n        s1 -= arr[i]\n        if s1 < x:\n            print(-1)\n            return\n    print(s)\n"
    },
    {
        "number": 4106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    \n    a.sort(reverse=True)\n    ans = 0\n    a_sum = sum(a)\n    while x > 0:\n        if k == 1:\n            ans += a_sum\n            break\n        elif n == 1:\n            break\n        else:\n            ans += a[0]\n            a_sum -= a[0]\n            if a_sum > x:\n                ans += a_sum - x\n                break\n            x -= k\n            n -= k\n            a_sum = sum(a[k:n+1])\n    return ans\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\u0412 \u0437\u0430\u0434\u0430\u0447\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0439\u0442\u0438 \u0441 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043a\u043e\u0440\u043f\u0443\u0441\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443. \u041f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435 \u0435\u0441\u0442\u044c \u0441\u0432\u043e\u0439 \u0440\u043e\u0442\u043e\u0440. \u0417\u0430\u0434\u0430\u0447\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u043d\u0435\u0433, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u044f\u0442\u0441\u044f, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u043a \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443. \u041a\u043e\u043c\u043d\u0430\u0442\u044b \u043d\u0443\u043c\u0435\u0440\u0443\u044e\u0442\u0441\u044f \u043e\u0442 $1$ \u0434\u043e $n$, \u0433\u0434\u0435 $n$ \u2013 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043d\u0430\u0442.\n\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0437\u0430\u0439\u0442\u0438 \u0432 \u043a\u0430\u0436\u0434\u0443\u044e \u043a\u043e\u043c\u043d\u0430\u0442\u0443 \u0441 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043a\u043e\u0440\u043f\u0443\u0441\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0435\u0441\u0442\u044c \u0440\u043e\u0442\u043e\u0440, \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443. \u041a\u0430\u0436\u0434\u0430\u044f \u043a\u043e\u043c\u043d\u0430\u0442\u0430 \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443 \u0441 \u043a\u043e\u043c\u043d\u0430\u0442\u0430\u043c\u0438, \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u043c\u0438 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439, \u0435\u0441\u043b\u0438 \u0432\u044b \u0441\u043e\u0432\u0435\u0440\u0448\u0438\u0442\u0435 \u044d\u0442\u043e \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u0435, \u0438\u043b\u0438 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u044b\u043c \u0440\u043e\u0442\u043e\u0440\u043e\u043c, \u0435\u0441\u043b\u0438 \u0443 \u043a\u043e\u043c\u043d\u0430\u0442\u044b \u043d\u0435\u0442 \u0440\u043e\u0442\u043e\u0440\u0430. \u041a\u043e\u043c\u043d\u0430\u0442\u044b \u0441 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\u043d\u044b\u043c \u0440\u043e\u0442\u043e\u0440\u043e\u043c \u0432\u0441\u0435\u0433\u0434\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u044e\u0442\u0441\u044f \u0441 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439, \u043d\u0430\u0445\u043e\u0434\u044f\u0449\u0435\u0439\u0441\u044f \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439. \n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0434\u0432\u0443\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $n$ \u0438 $k$, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u043a\u0438 \u00ab0\u00bb \u0438 \u00ab1\u00bb, \u0437\u0430\u0434\u0430\u044e\u0449\u0438\u0435 \u0440\u0430\u0437\u043c\u0435\u0440\u044b \u043a\u043e\u043c\u043d\u0430\u0442 \u0438 \u0440\u043e\u0442\u043e\u0440\u043e\u0432.\n\n\u0421\u0442\u0440\u043e\u043a\u0430 \u0434\u043b\u0438\u043d\u043e\u0439 $n$, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u043d\u043e\u043b\u0438 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446 \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c\u0438.\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u2014 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u043d\u0435\u0433, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043a\u043e\u043c\u043d\u0430\u0442 \u043a \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u0443.\n\n\n-----Sample Input-----\n\n5 2\n00100\n\n-----Sample Output-----\n\n3\n\n-----Sample Input-----\n\n6 1\n000000\n\n-----Sample Output-----\n\n21\n\n-----Sample Input-----\n\n4 1\n0011\n\n-----Sample Output-----\n\n4\n\n\n\n-----Note-----\n\nIn the first example it is enough to place the router in the room $3$, then all rooms will be connected to the Internet. The total cost of connection is $3$.\n\nIn the second example you can place routers nowhere, so you need to connect all rooms directly. Thus, the total cost of connection of all rooms is $1 + 2 + 3 + 4 + 5 + 6 = 21$.\n\nIn the third example you need to connect the room $1$ directly and place the router in the room $3$. Thus, the total cost of connection of all rooms is $1 + 3 ="
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rooms, num_of_routers = list(map(int, stdin.split(' ')))\n    rooms_cost = 0\n\n    for i in range(num_of_rooms):\n        is_router_avail = False\n        for j in range(num_of_routers):\n            if int(stdin[i * num_of_routers + j]):\n                is_router_avail = True\n                rooms_cost += j + 1\n                if j > 0:\n                    for k in range(max(1, i - j), min(num_of_rooms, i + j)):\n                        rooms_cost += k\n        if not is_router_avail:\n            rooms_cost += i + 1\n\n    return str(rooms_cost)"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, k = map(int, stdin.split())\n    rooms = [int(c) for c in stdin]\n    return sum(min(k, i) for i, r in enumerate(rooms) if r == 1)\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, list(stdin)))\n    # print(arr)\n    k_arr = []\n    connect_count = 0\n    for i in range(n):\n        if arr[i] == 1:\n            connect_count += 1\n        else:\n            k_arr.append(connect_count)\n            connect_count = 0\n    if k_arr:\n        k_arr[-1] += 1\n    total = 0\n    for i in range(1, n):\n        total += k_arr[i - 1] * i + i\n    total += k_arr[-1] * n + n\n    # print(total)\n    return total\n\nprint(solution('5 2'))\nprint(solution('6 1'))\nprint(solution('4 1'))\nprint(solution('12 6'))\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the minimum total cost of connecting all n rooms to the Internet.\n    :param stdin: stdin input as a string\n    :return: the minimum total cost of connecting all n rooms to the Internet\n    \"\"\"\n    num_rooms, range_router = [int(num) for num in stdin.split(' ')]\n    stdin = stdin[::-1]\n    cost_router = stdin[0:range_router]\n    stdin = stdin[range_router:]\n    stdin = stdin[::-1]\n    cost_rooms = stdin.count('1')\n    cost_router = sum([int(num) for num in cost_router])\n    cost_rooms = sum([int(num) for num in stdin])\n    return cost_router + cost_rooms\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = map(int, stdin.split(\" \"))\n    d = int(stdin[0])\n    if d == 0:\n        return k\n    else:\n        return k + solution(stdin[n:])\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    room_connections = stdin.split()\n\n    router = 0\n    prev_router = 0\n    router_connection_count = 0\n    router_connection_count_dict = {}\n    connections_dict = {}\n\n    for room_connection in room_connections:\n        if room_connection == \"0\":\n            connections_dict[prev_router] = {router}\n            connections_dict[router] = {prev_router}\n            router_connection_count_dict[router] = router_connection_count\n            router_connection_count = 0\n        else:\n            router += 1\n            router_connection_count += 1\n            router_connection_count_dict[router] = router_connection_count\n            connections_dict[prev_router] = {router}\n            connections_dict[router] = {prev_router}\n        prev_router = router\n\n    connections = {connection: list(connections_dict[connection].difference({\"0\"})) for connection in connections_dict}\n    routers = [\n        router\n        for router in connections_dict\n        if router_connection_count_dict[router] > router_connection_count\n    ]\n    routers_dict = {router: router_connection_count_dict[router] for router in routers}\n\n    router_connections = {router: connections[router] for router in connections}\n\n    def dfs(router, visited):\n        visited.add(router)\n        connected_routers = list(connections_dict[router])\n        connected_routers = [\n            router for router in connected_routers if router not in visited\n        ]\n        if connected_routers:\n            for router in connected_routers:\n                dfs(router, visited)\n        return\n\n    def minimum_router_connections(router, visited):\n        visited.add(router)\n        connected_routers = list(connections_dict[router])\n        connected_routers = [\n            router for router in connected_routers if router not in visited\n        ]\n        if connected_routers:\n            minimum_router_connections(router, visited)\n\n        return min([routers_dict[router] for router in connected_routers])\n\n    min_router_connections = min(\n        [\n            minimum_router_connections(router, set())\n            for router in connections_dict.keys()\n        ]\n    )\n    cost = sum([router_connections[router] for router in router_connections])\n    cost += min_router_connections\n\n    return cost\n    return 0\n"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, k = [int(x) for x in stdin.split(' ')]\n    rooms = [int(x) for x in stdin]\n\n    routers = 0\n    for room in rooms:\n        if room:\n            routers += room\n\n    return (k * (k + 1) // 2) * routers + sum(rooms)\n\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    rooms = [int(x) for x in stdin.split(' ')]\n    curr_min_cost = 0\n    for i, room in enumerate(rooms):\n        if room == 0:\n            for j in range(max(1, i - k), min(n, i + k) + 1):\n                curr_min_cost += j\n    return curr_min_cost"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = list(s)\n    t = list(t)\n    for i in range(len(s)):\n        if s[i] in t:\n            t[t.index(s[i])] = 'a'\n    if s == t:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    count_a = a.count(a[0])\n    count_b = b.count(b[0])\n    count_equal = min(count_a, count_b)\n    for i in range(count_equal):\n        a = a.replace(a[0], b[0], 1)\n        b = b.replace(b[0], a[0], 1)\n    if a == b:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    t: str = stdin\n\n    for i in range(len(s)):\n        for j in range(len(t)):\n            if s[i] == t[j]:\n                s = s.replace(s[i], t[j])\n                t = t.replace(t[j], s[i])\n    \n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    while s!= t:\n        if s.count('a') == 0:\n            return 'No'\n        for i in range(len(s)):\n            if s[i] == 'a':\n                s = s[:i] + t[i] + s[i+1:]\n                break\n        for i in range(len(t)):\n            if t[i] == 'a':\n                t = t[:i] + s[i] + t[i+1:]\n                break\n    return 'Yes'\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[0]\n    t: str = stdin[1]\n\n    if len(s)!= len(t):\n        return 'No'\n\n    if len(set(s))!= len(set(t)):\n        return 'No'\n\n    s_dict = Counter(s)\n    t_dict = Counter(t)\n\n    if len(s_dict)!= len(t_dict):\n        return 'No'\n\n    if sorted(s_dict.values())!= sorted(t_dict.values()):\n        return 'No'\n\n    s_count = Counter(s)\n    t_count = Counter(t)\n\n    for key, value in s_count.items():\n        if key in t_count and value > t_count[key]:\n            return 'No'\n\n    return 'Yes'\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s: List[str] = stdin.split('\\n')\n    return \"Yes\" if s[0] == s[1] else \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = stdin\n    for char_1, char_2 in zip(S, T):\n        if char_1!= char_2:\n            break\n    else:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = list(s)\n    t = list(t)\n\n    for a, b in zip(s, t):\n        if a!= b:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    s = list(s)\n    t = list(t)\n    count = 0\n    for i in range(len(s)):\n        if s[i] in t:\n            while t[i] in t:\n                index = t.index(s[i])\n                t[index] = \"0\"\n                count += 1\n                if count >= 100:\n                    return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    if stdin[0] == stdin[1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    print(C*A//B)\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code below; 1 line of code expected\n    #\n    import sys\n    stdin = sys.stdin.read()\n    lines = stdin.split('\\n')\n    N, M = list(map(int, lines[0].split()))\n    C = list(map(int, lines[1].split()))\n    A = list(map(int, lines[2].split()))\n    ans = 0\n    for i in range(M):\n        ans = max(ans, sum(C) + A[i] * N)\n    if ans >= sum(C):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n\n    return ''"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return''.join([\n        'YES',\n        '{}'.format(len(stdin.split()))\n    ])\n    \n    \n"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n    pass"
    },
    {
        "number": 4109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_result(stdin, K):\n        A, B = [], []\n        for i in stdin.split(' '):\n            if i:\n                if int(i) > K:\n                    B.append(int(i))\n                else:\n                    A.append(int(i))\n        result = 0\n        for i in A:\n            result += K // i\n            K %= i\n        return result * B[0]\n\n    stdin = stdin.split(' ')\n    print(count_result(stdin, int(stdin[-1])))\n    return ''"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    num_problems, bonus, base_score, *rest = stdin.split(\"\\n\")\n    num_problems = int(num_problems)\n    bonus = int(bonus)\n    base_score = int(base_score)\n    # Get the amount of problems possible to solve\n    problems = [None] * num_problems\n    for i in range(num_problems):\n        line = rest[i]\n        problems[i] = [int(s) for s in line.split()]\n\n    # Create a 2D array to store the combinations\n    combinations = [None] * num_problems\n    for i in range(num_problems):\n        combinations[i] = [0] * (bonus + 1)\n\n    # Populate the combinations\n    for problem in problems:\n        for i in range(len(combinations[problem[0] - 1])):\n            combinations[problem[0] - 1][i] += problem[1]\n            combinations[problem[0] - 1][i] += i * base_score\n\n    # Get the max of each array and return the max index\n    maxs = []\n    for i in range(num_problems):\n        maxs.append(max(combinations[i]))\n\n    return max(maxs)\n\n\nprint(solution(\"2 800\\n3 500\\n5 800\"))\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # D = int(stdin[0])\n    # G = int(stdin[1])\n    D = 2\n    G = 700\n\n    list1 = list(map(int, stdin[0].split()))\n    C = list1[1]\n    list2 = list(map(int, stdin[1].split()))\n    p = list2[0]\n    list3 = list(map(int, stdin[2].split()))\n    c = list3[0]\n\n    list1 = []\n    list2 = []\n    list3 = []\n    for i in range(D):\n        list1.append(p[i] * 100)\n    for i in range(D):\n        list2.append(c[i] * 100)\n    for i in range(D):\n        list3.append(G)\n    print(list1)\n    print(list2)\n    print(list3)\n    min = list3[0]\n    for i in range(D):\n        min = min + list1[i]\n    print(min)\n    for i in range(D):\n        min = min - list2[i]\n        if(min < 0):\n            min = min + list2[i]\n        else:\n            break\n    print(min)\n    return min\n\nprint(solution(str(input())))\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Define variables for D, G, and base score\n    D, G = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    baseScore = 0\n    \n    # Create a dictionary for storing p_i and c_i values\n    probDict = {}\n\n    # Add values to the dictionary\n    for i in range(1, D+1):\n        probDict[i] = [int(x) for x in stdin.split(\"\\n\")[i].split()]\n    \n    # Iterate through the dictionary values\n    for i in range(1, D+1):\n        # Create variables for base score, perfect bonus, and total score\n        baseScore = baseScore + probDict[i][0]\n        perfectBonus = probDict[i][1]\n        totalScore = baseScore\n        \n        # If the base score is equal to G\n        if baseScore == G:\n            # We return the minimum number of problems to solve\n            return str(i)\n        # If the base score is larger than G\n        if baseScore > G:\n            # If the perfect bonus is equal to G\n            if perfectBonus == G:\n                # We return the minimum number of problems to solve\n                return str(i)\n            # If the perfect bonus is larger than G\n            elif perfectBonus > G:\n                # We return the minimum number of problems to solve\n                return str(i)\n            # If the perfect bonus is smaller than G\n            else:\n                # We return the minimum number of problems to solve\n                return str(i+1)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, G = [int(s) for s in stdin.split(' ')]\n    takahashi_scores = 0\n    perfect_bonus = 0\n    for i in range(1, D + 1):\n        score = i * 100\n        if score < G:\n            takahashi_scores += score\n            perfect_bonus += i * 100\n        else:\n            break\n    while G <= takahashi_scores + perfect_bonus:\n        takahashi_scores += G\n        perfect_bonus += c[i]\n        i += 1\n    return i - 1\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # create list of problems, scores and perfect bonuses\n    problems, scores, perfect_bonuses = [], [], []\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        problems.append(int(line.split(' ')[0]))\n        scores.append(int(line.split(' ')[1]))\n        perfect_bonuses.append(int(line.split(' ')[2]))\n    \n    # sort problems based on score\n    problems = [item for _, item in sorted(zip(scores, problems), reverse=True)]\n    scores = sorted(scores, reverse=True)\n    perfect_bonuses = sorted(perfect_bonuses, reverse=True)\n    \n    # find minimum number of problems to solve for objective\n    count, index = 0, 0\n    total_score = 0\n    while total_score < int(stdin.split('\\n')[0]):\n        total_score += problems[index]\n        index += 1\n        count += 1\n    \n    # return answer\n    return count"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 700\\n3 500\\n5 800\")\n    3\n    >>> solution(\"1 1000\\n1 1000\")\n    0\n    >>> solution(\"1 100\\n1 100\")\n    0\n    >>> solution(\"1 100\\n1 100\\n1 100\")\n    0\n    >>> solution(\"1 100\\n1 100\\n1 100\\n1 100\")\n    0\n    \"\"\"\n    D, G = map(int, stdin.split())\n    S = set()\n    for i in range(1, D + 1):\n        score, perfect_bonus = map(int, stdin.split())\n        S.update(range(i, score + 1, 100))\n        if perfect_bonus >= 100:\n            S.add(score + perfect_bonus)\n    return max(0, G - max(S))\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/54d24f04b63ad988d50012e2\"\"\"\n    D, G = [int(v) for v in stdin.split()]\n    scores = [int(v) for v in stdin.split('\\n')[1:-1]]\n    scores.sort()\n    count = 0\n    total = 0\n    for i, score in enumerate(scores):\n        if total + score >= G:\n            break\n        total += score\n        count += 1\n    if total >= G:\n        return str(count)\n    total = 0\n    for i, score in enumerate(scores):\n        if total + score >= G:\n            break\n        total += score\n        count += 1\n    if total >= G:\n        return str(count)\n    return 'impossible'\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from stdin\n    line = stdin.split(\"\\n\")\n    D, G = line[0].split()\n    D, G = int(D), int(G)\n\n    # Get problem scores\n    line = line[1].split(\": \")\n    problem_scores = line[1].split()\n    \n    # Get perfect bonuses\n    line = line[0].split()\n    perfect_bonuses = line[1].split(\", \")\n\n    # Initialize array of scores\n    scores = [0] * D\n\n    # Loop over scores\n    for i in range(D):\n        # Get score\n        score = problem_scores[i]\n        score = int(score)\n        # Get bonus\n        bonus = perfect_bonuses[i]\n        bonus = int(bonus)\n        # Update score\n        scores[i] = score + bonus\n\n    # Get min score\n    min_score = min(scores)\n\n    # Initialize min score counter\n    min_score_counter = 0\n\n    # Loop over scores\n    for i in range(D):\n        # Increment min score counter\n        if scores[i] == min_score:\n            min_score_counter += 1\n\n    # Return min score counter\n    return min_score_counter"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    d, g = map(int, stdin.split())\n    dp = [[0 for _ in range(101)] for _ in range(101)]\n    dp[0][0] = d\n    dp[0][1] = 0\n    dp[1][0] = 0\n    dp[1][1] = g\n    for i in range(2, 101):\n        for j in range(1, 101):\n            dp[i][j] = dp[i - 1][j] + (j * 100)\n    for i in range(1, 101):\n        dp[1][i] += dp[0][i - 1]\n    for i in range(2, 101):\n        for j in range(1, 101):\n            dp[i][j] += min(dp[i - 1][j], dp[i][j - 1])\n    return dp[100][100] - dp[100][99]\n"
    },
    {
        "number": 4110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    l = [0] * a\n    c = [0] * a\n    for i in range(a):\n        l[i], c[i] = [int(x) for x in stdin.split(\":\", 1)[1].split()]\n    #print(l, c)\n    # print([l[i][1] for i in range(len(l))])\n    x = [l[i][1] for i in range(len(l))]\n    print(x)\n    #x = list(map(int, stdin.split(\":\", 1)[1].split()))\n    #print(x)\n    #print(stdin.split(\":\", 1)[1].split())\n    x.sort()\n    # print(x)\n    # print(x[0])\n    # print(x[-1])\n    # print(b, x[0], x[-1])\n    # print(x)\n    # for i in range(len(x)):\n    #     x[i] = x[i][0]\n    # print(x)\n    print(x)\n    # print(sum(x[0:3]))\n    # print(sum(x[-4:]))\n    # print(sum(x[:3]) + sum(x[-4:]))\n    # print(sum(x[-3:]) + sum(x[:3]))\n    # print(sum(x[:-3]) + sum(x[-4:]))\n    print(sum(x[0:3]))\n    print(sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[:3]) + sum(x[-3:]))\n    print(sum(x[0:3]))\n    # print(sum(x[0:3]) + sum(x[-3:]))\n    # print(sum(x[0:3]) + sum(x[-3:]))\n    # print(sum(x[:3]) + sum(x[-3:]))\n    # print(sum(x[0:3]))\n    # print(sum(x[:3]))\n    # print(sum(x[0:3]))\n    # print(sum(x[:3]))\n    # print(sum(x[0:3]))\n    print(sum(x[:3]) + sum(x[-3:]))\n    print(sum(x[:3]))\n    print(sum(x[0:3]))\n    print(sum(x[0:3]))\n    print(sum(x[0:3]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:3]) + sum(x[-3:]))\n    print(sum(x[0:"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    counter = 0\n    for i in range(1, len(a) - 1):\n        if a[i] % 2!= a[i - 1] % 2:\n            counter += 1\n    print(counter)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Write your code here\n    n = int(stdin.readline())\n    lst = [int(i) for i in stdin.readline().strip().split(' ')]\n    ans = 0\n    for i in range(n - 1):\n        ans += (lst[i] * (n - i) * 2 + lst[i + 1]) * (n - i - 1)\n    ans += lst[0] * (n - 1) * 2\n    ans += lst[n - 1]\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) / O(N)\"\"\"\n   ...\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nn = int(input())\na = list(map(int, input().split()))\n\nn_1 = n-1\ni = 0\nres = 0\nwhile i < n_1:\n    if a[i] % 2 == 0:\n        res += a[i]\n        i += 2\n    else:\n        i += 1\nprint(res)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    all_candies = int(stdin.readline())\n    candies = list(map(int, stdin.readline().strip().split(' ')))\n    \n    total_weight = sum(candies)\n    n = len(candies)\n    \n    even = 0\n    odd = 0\n    for i, c in enumerate(candies):\n        if i%2 == 0:\n            even += c\n        else:\n            odd += c\n    \n    return str(abs(total_weight - (even+odd)))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n\n    def solve(n: int, k: int, weights: list) -> int:\n        pass\n\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    assert len(weights) == n\n\n    print(solve(n, 2, weights))\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 5 5 4 5 5 6\n   ... ''')\n    '2'\n\n    >>> solution('''8\n   ... 4 8 8 7 8 4 4 5\n   ... ''')\n    '2'\n\n    >>> solution('''9\n   ... 2 3 4 2 2 3 2 2 4\n   ... ''')\n    '3'\n\n    \"\"\"\n    _, nums = [int(x) for x in stdin.splitlines()]\n    evens = [x for x in nums if x % 2 == 0]\n    odds = [x for x in nums if x % 2!= 0]\n    return str(len([x for x in evens if sum(evens)!= sum(odds)]))\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    s = sorted(map(int, stdin.readline().split()))\n    total = sum(s)\n    good = 0\n    for i in range(n - 1):\n        if s[i] * 2 == total - s[i]:\n            good += 1\n    return str(good)\n"
    },
    {
        "number": 4111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(s) for s in stdin.split()]\n    return str(sum(a[::2]) * n - sum(a[1::2]))\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return "
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer: the maximum value of sum of beauty values of reposted pictures\n    if Vova follows conditions described in the problem statement,\n    or 'No' otherwise.\n\n    >>> solution('4 2 1\\n1 100 1 1')\n    '18'\n    \"\"\"\n    num_pics = [int(x) for x in stdin.split('\\n')[0].split()]\n    num_pics = tuple(num_pics)\n    num_pics = num_pics[0]\n    min_len, x, max_sum = num_pics\n    pics = [int(x) for x in stdin.split('\\n')[1].split()]\n    pics = tuple(pics)\n    pics = pics[:num_pics]\n    max_sum = sum(pics)\n    min_len = len(pics)\n    pics = list(pics)\n    for i in range(num_pics - 1):\n        if min_len >= num_pics:\n            break\n        if pics[i] + pics[i + 1] < max_sum:\n            print('No')\n            break\n        else:\n            max_sum = pics[i] + pics[i + 1]\n            min_len += 1\n    if max_sum > num_pics:\n        return -1\n    return max_sum\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort(reverse=True)\n    \n    res = 0\n    for i in range(n):\n        while i + k - 1 >= n or a[i] < a[i + k - 1]:\n            break\n        for j in range(i + k, n):\n            if j + k - 1 >= n:\n                break\n            res += a[i]\n        i += k\n    return res if res > 0 else -1\n    \n    \n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: in O(n)\n    Space: in O(1)\n    \"\"\"\n    # parse input\n    n, k, x = stdin.split(' ')\n    n, k, x = int(n), int(k), int(x)\n    a = [int(i) for i in stdin.split(' ')[1:]]\n    \n    # not enough pictures\n    if n < k:\n        return -1\n\n    # find max sum for valid solution\n    s = 0\n    for i in range(n - k + 1):\n        s += max(a[i : i + k])\n    \n    # no solution found\n    if x < s:\n        return -1\n\n    return s\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Create variables for length of segment and minimum number of pictures in segment,\n    then create empty array for the pictures with their values.\n    Finally add the first element to the array.\n    \n    Iterate through the remaining elements and if the difference between the values of the element and the last one\n    is less than k, then add the difference to the last element in the array.\n    If it is not less than k, then restart the loop with the new value.\n    \n    Return the max of the array values if the length of the segment is greater than x.\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    pictures = list(map(int, stdin.split()))\n    \n    array = [pictures[0]]\n    for i in range(1, len(pictures)):\n        if pictures[i] - pictures[i - 1] < k:\n            array[-1] = pictures[i]\n        else:\n            array.append(pictures[i])\n    \n    if len(array) < x:\n        return -1\n    return max(array)\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    'https://app.codility.com/demo/results/trainingQGHCK-YM6/'\n    # Get the input\n    n, k, x = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    \n    # Initialize variables\n    # Initialize a table with zeros.\n    table = [0] * n\n    # Initialize the maximum sum\n    max_sum = 0\n    \n    # Loop through the array\n    for i in range(n):\n        # Make a copy of the array\n        a_copy = a[:]\n        # Add the value from the array\n        a_copy[i] = a_copy[i] + table[i - k]\n        # Calculate the sum\n        sum = 0\n        for j in range(i - k + 1, i + 1):\n            sum += a_copy[j]\n        # Make sure that the sum of values of reposted pictures is not more than the maximum sum\n        if sum <= max_sum:\n            # Save the value to the table\n            table[i] = sum\n            # If the sum is the maximum, then save it\n            if sum > max_sum:\n                max_sum = sum\n        else:\n            # If the sum is more than the maximum, then save -1\n            table[i] = -1\n    \n    # Check the value\n    if max_sum < 0:\n        return -1\n    else:\n        return max_sum\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    # # Solve the problem here\n    # return \"\"\n    #\n    n, k, x = [int(x) for x in stdin.split()]\n    lst = [int(x) for x in stdin.split()]\n    # lst = list(map(int, stdin.split()))\n    # print(lst)\n    sum_lst = 0\n    for i in range(n):\n        sum_lst += lst[i]\n\n    min_lst = []\n    for i in range(n):\n        for j in range(i, n):\n            if j-i < k:\n                break\n            min_lst.append(sum_lst - sum(lst[i:j+1]))\n    min_lst.sort()\n    print(min_lst[-1])\n    if min_lst[-1] > x:\n        print(-1)\n    else:\n        print(min_lst[-1])\n"
    },
    {
        "number": 4112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n, k, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    if k * x > n:\n        return -1\n    elif k * x == n:\n        return sum(arr)\n    sums = 0\n    for i in range(n - k * x + 1):\n        if i!= 0:\n            sums += arr[i - 1]\n        for j in range(k, 0, -1):\n            if arr[i + j - 1] + sums > arr[i + k - 1]:\n                sums += arr[i + j - 1]\n            else:\n                sums += arr[i + k - 1]\n                break\n    return sums\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cakes = n // 4\n    doughnuts = n % 4 // 3\n    if (cakes >= 0) and (doughnuts >= 0):\n        print('Yes')\n    else:\n        print('No')\n        return\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total_cost = 2 * 7 + 4 * 1\n    if n % total_cost == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N%4:\n        return 'No'\n    cake = N//4\n    dough = N-cake\n    return 'Yes' if cake>=2 and dough>=2 else 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n % 4:\n        return \"No\"\n    else:\n        return \"Yes\" if n - (n // 4) <= 7 else \"No\"\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    #  your solution goes here\n    "
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin)\n    doughnuts = total // 7\n    cakes = total // 4\n    if total < 7 * 4 or total % 4!= 0:\n        return \"No\"\n    elif doughnuts == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 4!= 0 or n % 7!= 0:\n        return 'No'\n    return 'Yes'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    N = int(N)\n    cakes = []\n    doughnuts = []\n\n    for i in range(4):\n        cakes.append(int(input()))\n\n    for i in range(7):\n        doughnuts.append(int(input()))\n\n    cakes.sort(reverse=True)\n    doughnuts.sort(reverse=True)\n\n    cake_sum = 0\n    doughnuts_sum = 0\n\n    for i in range(4):\n        cake_sum += cakes[i]\n        if cake_sum == N:\n            break\n        elif cake_sum > N:\n            break\n    \n    for i in range(7):\n        doughnuts_sum += doughnuts[i]\n        if doughnuts_sum == N:\n            break\n        elif doughnuts_sum > N:\n            break\n\n    if doughnuts_sum + cake_sum == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n\n    doughnut_sum = N // 7\n    cake_sum = N - doughnut_sum * 7\n    if doughnut_sum + cake_sum == N and doughnut_sum > 0 and cake_sum > 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Main method\n    :param stdin:\n    :return:\n    \"\"\"\n    # split stdin by \\n\n    stdin = stdin.split('\\n')\n    # N is the number of pieces of information\n    N = int(stdin[0])\n    # get the coordinates of the first point\n    x1, y1, h1 = map(int, stdin[1].split())\n    # get the coordinates of the second point\n    x2, y2, h2 = map(int, stdin[2].split())\n    # get the coordinates of the last point\n    xN, yN, hN = map(int, stdin[N].split())\n    # get the height of the pyramid\n    height = max(h1, h2, hN)\n    # get the center coordinates\n    center = (h1 + h2 + hN) / 3\n    # the center coordinates should be an integer\n    if int(center)!= center:\n        return '1' +'' + str(int(center)) +'' + str(height)\n    else:\n        return str(int(center)) +'' + str(height)\n\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 3 5\\n2 1 5\\n1 2 5\\n3 2 5\")\n    '2 2 6'\n    \"\"\"\n    pass"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    coords = [tuple(map(int, line.split())) for line in stdin]\n    center_coord = reduce(\n        lambda x, y: (x[0] + y[0], x[1] + y[1]), coords\n    ) / N\n    max_alt = 0\n    for x, y in coords:\n        alt = max(max_alt, abs(x - center_coord[0]), abs(y - center_coord[1]))\n        max_alt = max(max_alt, alt)\n    print(*center_coord, max_alt)\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement solution\n    pass\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *c = map(int, stdin.split())\n    print(c[0], c[1], max(c[2] - c[0] - abs(c[1]), 0))\n    return ''\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    coordinates = [i.split() for i in stdin[1:]]\n    \n    sum_x = 0\n    sum_y = 0\n    sum_h = 0\n    for x, y, h in coordinates:\n        sum_x += int(x)\n        sum_y += int(y)\n        sum_h += int(h)\n    \n    avg_x = sum_x / N\n    avg_y = sum_y / N\n    avg_h = sum_h / N\n    \n    # first coordinate is the center coordinate\n    C_X = avg_x\n    C_Y = avg_y\n    H = avg_h\n    for x, y, h in coordinates:\n        if abs(x - C_X) + abs(y - C_Y) > H:\n            H = abs(x - C_X) + abs(y - C_Y)\n    \n    return \"{} {} {}\".format(C_X, C_Y, H)\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    coordinates = []\n    for _ in range(n):\n        coordinates.append(list(map(int, stdin.splitlines()[1 + _].split())))\n\n    center_x, center_y = coordinates[0]\n    center_x_min = center_x\n    center_y_min = center_y\n    center_x_max = center_x\n    center_y_max = center_y\n    for coordinate in coordinates:\n        center_x_min = min(center_x_min, coordinate[0])\n        center_y_min = min(center_y_min, coordinate[1])\n        center_x_max = max(center_x_max, coordinate[0])\n        center_y_max = max(center_y_max, coordinate[1])\n\n    def get_height(x, y, center_x, center_y):\n        return max((abs(x - center_x), abs(y - center_y)), default=(0, 0))[0]\n\n    def get_center(x_min, x_max, y_min, y_max):\n        return (x_min + x_max) // 2, (y_min + y_max) // 2\n\n    def is_in_range(x, y):\n        return x_min <= x <= x_max and y_min <= y <= y_max\n\n    x_min, x_max, y_min, y_max = (\n        min(center_x_min, center_x_max),\n        max(center_x_min, center_x_max),\n        min(center_y_min, center_y_max),\n        max(center_y_min, center_y_max),\n    )\n    center_x, center_y = get_center(x_min, x_max, y_min, y_max)\n    height = max(\n        get_height(coordinate[0], coordinate[1], center_x, center_y) for coordinate in coordinates\n    )\n    return str(center_x) + \" \" + str(center_y) + \" \" + str(height)\n\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def parse(line: str) -> list[int]:\n        return [int(x) for x in line.split(' ')]\n\n    N = int(stdin)\n    points = []\n    for _ in range(N):\n        points.append(parse(stdin))\n    points = sorted(points, key=lambda x: x[0])\n    x_last, y_last, h_last = points[0]\n    points = sorted(points, key=lambda x: x[1])\n    x_last, y_last, h_last = points[0]\n    points = sorted(points, key=lambda x: x[0] - x_last)\n    x_last, y_last, h_last = points[0]\n    points = sorted(points, key=lambda x: x[1] - y_last)\n    x_last, y_last, h_last = points[0]\n    return''.join(map(str, [x_last, y_last, h_last]))\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    def get_points(stdin):\n        points = []\n        for line in stdin.splitlines():\n            x, y, h = list(map(int, line.split()))\n            points.append((x, y, h))\n        return points\n\n    points = get_points(stdin)\n    xs, ys, hs = zip(*points)\n    xs_c, ys_c = sum(xs) / len(points), sum(ys) / len(points)\n    h_c = max(hs)\n\n    return''.join(map(str, [xs_c, ys_c, h_c]))\n"
    },
    {
        "number": 4114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the center and height of a pyramid based on the clues in stdin.\n\n    Parameters\n    ----------\n    stdin : str\n        A string that contains clues about the center and height of the pyramid.\n\n    Returns\n    -------\n    str\n        Center coordinates and height of the pyramid.\n    \"\"\"\n    import sys\n\n    lines = stdin.split(\"\\n\")\n    num_clues = int(lines[0])\n    num_points = int(lines[1])\n    clues = {}\n    for i in range(2, num_clues + 2):\n        x, y, height = map(int, lines[i].split())\n        clues[(x, y)] = height\n\n    clues = {k: v for k, v in sorted(clues.items(), key=lambda item: item[1])}\n    max_height = max(clues.values())\n    for k in clues.keys():\n        if clues[k] == max_height:\n            x, y = k\n            break\n    return x, y, max_height\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the minimum number of hugs needed to make a string palindromic\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Minimum number of hugs needed to make a string palindromic\n    \"\"\"\n    return 'Hello'\n\nprint(solution(\"redcoder\"))"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def palindrome(string: str) -> bool:\n        return string == string[::-1]\n\n    def hug(string: str) -> int:\n        res = 0\n        for c in string:\n            res += 1\n            string = string.replace(c, \"\", 1)\n            if palindrome(string):\n                break\n        return res\n\n    return hug(stdin)"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    string = stdin\n    # Get palindrome\n    palindrome = palindrome_builder(string)\n    # Print output\n    print(len(palindrome))\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return None\n\"\"\"\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in range(0, len(nums)):\n        for j in range(i, len(nums)):\n            if nums[i] * nums[j] == N:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    # 9\n    # 10\n    # 11\n    # 12\n    # 13\n    # 14\n    # 15\n    # 16\n    # 17\n    # 18\n    # 19\n    # 20\n    # 21\n    # 22\n    # 23\n    # 24\n    # 25\n    # 26\n    # 27\n    # 28\n    # 29\n    # 30\n    # 31\n    # 32\n    # 33\n    # 34\n    # 35\n    # 36\n    # 37\n    # 38\n    # 39\n    # 40\n    # 41\n    # 42\n    # 43\n    # 44\n    # 45\n    # 46\n    # 47\n    # 48\n    # 49\n    # 50\n    # 51\n    # 52\n    # 53\n    # 54\n    # 55\n    # 56\n    # 57\n    # 58\n    # 59\n    # 60\n    # 61\n    # 62\n    # 63\n    # 64\n    # 65\n    # 66\n    # 67\n    # 68\n    # 69\n    # 70\n    # 71\n    # 72\n    # 73\n    # 74\n    # 75\n    # 76\n    # 77\n    # 78\n    # 79\n    # 80\n    # 81\n    # 82\n    # 83\n    # 84\n    # 85\n    # 86\n    # 87\n    # 88\n    # 89\n    # 90\n    # 91\n    # 92\n    # 93\n    # 94\n    # 95\n    # 96\n    # 97\n    # 98\n    # 99\n    # 100\n\n    if int(input) % 2!= 0:\n        return 'No'\n    else:\n        l = []\n        for i in range(2, 102):\n            if int(input) % i == 0:\n                l.append(i)\n        if l == []:\n            return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # print(\"N=\",N)\n    num=2\n    flag=0\n    while num*num<=N:\n        if num==1:\n            flag=1\n        elif N%num==0:\n            flag=1\n            if N//num>1:\n                if N%(N//num)!=0:\n                    flag=0\n        num=num+1\n    if flag==1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return\n\n\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.splitlines()[0]\n    if int(N) in [2, 3, 5, 7]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return ''"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.isdigit() and int(stdin) <= 9 and int(stdin) % 2 == 0 else \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return \"Yes\" if num in range(1, 10) else \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.splitlines()\n    N = data[0]\n    N = int(N)\n    if N >= 1 and N <= 9:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 'Yes' if 1 <= n <= 9 and (n == 1 or n == 3 or n == 7 or n == 9) else 'No'\n    return answer\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for x in range(1, 9):\n        for y in range(1, 9):\n            if a == (x * y):\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in range(len(nums)):\n        if int(n) % nums[i] == 0:\n            print(\"Yes\")\n            return\n    print(\"No\")\n    return\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stick_lengths = [int(n) for n in stdin.readline().split()]\n    triangle_count = 0\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if stick_lengths[i]!= stick_lengths[j]!= stick_lengths[k]:\n                    triangle_count += 1\n    return triangle_count\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    triples = stdin.split('\\n')\n    if len(triples) < 3:\n        return 0\n    lengths = [int(length) for length in triples[1].split()]\n    if len(lengths) < 3:\n        return 0\n    if len(set(lengths)) < 3:\n        return 0\n    counter = 0\n    for a in range(len(lengths)):\n        for b in range(a + 1, len(lengths)):\n            for c in range(b + 1, len(lengths)):\n                if lengths[a] < lengths[b] + lengths[c] and lengths[b] < lengths[a] + lengths[c] and lengths[c] < lengths[a] + lengths[b]:\n                    counter += 1\n    return counter\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    assert len(lines) == 2\n    N = int(lines[0])\n    assert 1 <= N <= 100\n    # get input and create list of lists with sticks\n    input_list = lines[1].split()\n    assert len(input_list) == N\n    sticks = [int(x) for x in input_list]\n    assert all(1 <= x <= 10**9 for x in sticks)\n    # create matrix with N^2 elements\n    matrix = [[0 for x in range(N)] for y in range(N)]\n    # create list of triples\n    triples = []\n    # sum elements in first column\n    for i in range(1, N):\n        matrix[i][0] = matrix[i-1][0] + sticks[i]\n    # create list of triples\n    for i in range(1, N):\n        for j in range(1, N):\n            if sticks[i]!= sticks[j]:\n                #if sticks[i] < sticks[j]:\n                #    matrix[i][j] = matrix[i-1][j] + sticks[i]\n                #else:\n                #    matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) + sticks[i]\n                matrix[i][j] = max(matrix[i-1][j], matrix[i][j-1]) + sticks[i]\n                triples.append([i, j, sticks[i] + sticks[j] + matrix[i-1][j-1]])\n                #triples.append([i, j, sticks[i] + sticks[j] + max(matrix[i-1][j], matrix[i][j-1])])\n    # sort triples by sum of sticks (ascending)\n    triples.sort(key=lambda tup: tup[2])\n    # iterate through triples and check if triangle is formed\n    count = 0\n    for triple in triples:\n        if triple[2] < sum(sticks):\n            break\n        elif matrix[triple[0]-1][triple[1]-1] == triple[2]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return the result\n    return''"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Parameters:\n    stdin: str\n        Standard input.\n\n    Returns:\n    str:\n        The output of the problem.\n    \"\"\"\n    return str(find_triples(stdin))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of triangles that can be formed from N sticks.\"\"\"\n    stick_lengths = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    return str(sum(\n        len(set(stick_lengths[i:j:k]) & set(stick_lengths[j:k:])) > 0\n        for i in range(0, len(stick_lengths) - 2)\n        for j in range(i + 1, len(stick_lengths) - 1)\n        for k in range(j + 1, len(stick_lengths))\n    ))\n"
    },
    {
        "number": 4117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == a * b:\n                return str(i * j)\n    return '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (b <= 9) & (a <= 9):\n        return (b * a)\n    else:\n        return -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= 9 and b <= 9 and a * b <= 19:\n        print(a * b)\n    else:\n        print(-1)\n    return \"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    if A > 9 or B > 9:\n        return -1\n    return str(A * B)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 1 and A <= 9 and B >= 1 and B <= 9:\n        return str(A * B)\n    else:\n        return '-1'\n    \n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split(\" \")[0])\n    B = int(stdin.split(\" \")[1])\n    total = 0\n    for i in range(1,10):\n        total += i * A\n        if total > B:\n            return -1\n    return total"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a == 1 and b == 1:\n        return '0'\n    if a == 1 or b == 1:\n        return '-1'\n    result = ''\n    for i in range(1, 10):\n        result += str(a * i) +''\n    return result[:-1]\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a * b > 9:\n        return -1\n    else:\n        return a * b\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    takahashi = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if A in takahashi and B in takahashi:\n        print(A * B)\n    else:\n        print(-1)\n\nsolution(stdin)\n"
    },
    {
        "number": 4118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(\" \")]\n    if a >= 1 and a <= 9 and b >= 1 and b <= 9:\n        return str(a * b)\n    else:\n        return \"-1\""
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    x_list = list(map(int, stdin.split(' ')))\n    x_list.sort()\n    if n == m:\n        return '0'\n\n    left, right = 0, n\n    min_cnt = None\n\n    while left <= right:\n        # cnt = move_max(n, m, x_list, left, right)\n        cnt = move_min(n, m, x_list, left, right)\n        if cnt is None:\n            return '-1'\n        if min_cnt is None or cnt < min_cnt:\n            min_cnt = cnt\n        if x_list[left] + 1 == x_list[right]:\n            left += 1\n            right -= 1\n        elif x_list[left] - 1 == x_list[right]:\n            left += 1\n            right -= 1\n        else:\n            return '-1'\n    return str(min_cnt)\n\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This is a solution to the problem.\n    Parameters:\n        stdin: str\n    Returns:\n        str\n    >>> solution(\"2 5\\n10 12 1 2 14\")\n    '5'\n    \"\"\"\n    # get n, m from stdin\n    n, m = list(map(int, stdin.split(' ')))\n    # get the coordinates from stdin\n    xs = list(map(int, stdin.split(' ')))\n\n    # initialize a list of the number of moves for each coordinate\n    xs_moves = [0] * n\n    # initialize the list of current moves for each coordinate\n    current_moves = [0] * n\n    # initialize the list of future moves for each coordinate\n    future_moves = [0] * n\n\n    # initialize the current moves for all the coordinates\n    for i in range(m):\n        current_moves[xs[i] - 1] += 1\n    for i in range(n):\n        # get the number of moves from the current moves\n        # and add it to the number of moves from future moves\n        xs_moves[i] += current_moves[i] + future_moves[i]\n        # get the number of moves from the future moves\n        # and add it to the number of moves from current moves\n        current_moves[i] += future_moves[i]\n    # get the minimum of the number of moves for each coordinate\n    xs_moves = min(xs_moves)\n    return str(xs_moves)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Get input from user\n    # N = input()\n    # M = input()\n    # X = input()\n    #\n    # # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n    #\n    # if N > 10 ** 5 or M > 10 ** 5 or X.count(' ') > 1:\n    #     print(\"Invalid input\")\n    #     return\n    #\n    # # Split inputs into values and coordinates\n    # # value = list(map(int, input().split()))\n    # # value = [value[0], value[1]]\n    # # coordinate = list(map(int, input().split()))\n    # # coordinate = [coordinate[0], coordinate[1]]\n    # value, coordinate = stdin.split('\\n')\n    #\n    # value = list(map(int, value.split()))\n    # coordinate = list(map(int, coordinate.split()))\n    #\n    # if len(value)!= 2:\n    #     print(\"Invalid input\")\n    #     return\n    # if len(coordinate)!= 2:\n    #     print(\"Invalid input\")\n    #     return\n    #\n    # # Check for validity of coordinate\n    # # if not (0 <= value[0] <= 10 ** 5 and 0 <= value[1] <= 10 ** 5):\n    # #     print(\"Invalid input\")\n    # #     return\n    # # if not (0 <= coordinate[0] <= 10 ** 5 and 0 <= coordinate[1] <= 10 ** 5):\n    # #     print(\"Invalid input\")\n    # #     return\n    #\n    # # Check for validity of value\n    # # if not isinstance(value[0], int) or not isinstance(value[1], int):\n    # #     print(\"Invalid input\")\n    # #     return\n    # # if not (0 <= value[0] <= 10 ** 5 and 0 <= value[1] <= 10 ** 5):\n    # #     print(\"Invalid input\")\n    # #     return\n    #\n    # # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    # if not isinstance(value[0], int) or not isinstance(value[1], int):\n    #     print(\"Invalid input\")\n    #     return\n    # if not isinstance(coordinate[0], int) or not isinstance(coordinate[1], int):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    value = [10, 12, 1, 2, 14]\n    coordinate = [10, 13]\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split()))\n    # coordinate = [coordinate[0], coordinate[1]]\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Check that all inputs are valid\n    # if not isinstance(N, int) or not isinstance(M, int) or not isinstance(X, str):\n    #     print(\"Invalid input\")\n    #     return\n\n    # Split inputs into values and coordinates\n    # value = list(map(int, input().split()))\n    # value = [value[0], value[1]]\n    # coordinate = list(map(int, input().split"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    x = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    arr = [(x[i], i) for i in range(0, m)]\n    arr.sort()\n    d = {}\n    x_1, x_2 = arr[0]\n    print(x_1, x_2)\n\n    def move(x_1, x_2):\n        d[x_1] = x_2 + 1\n        if x_2 in d:\n            return d[x_2] - d[x_1]\n        else:\n            return 0\n\n    def move_left(x_1, x_2):\n        if x_1 - 1 in d:\n            return d[x_1 - 1] - d[x_1]\n        else:\n            return move(x_1, x_2)\n\n    def move_right(x_1, x_2):\n        if x_1 + 1 in d:\n            return d[x_1 + 1] - d[x_1]\n        else:\n            return move(x_1, x_2)\n\n    # d[x_1] = x_2 + 1\n    # d[x_2] = x_1 + 1\n    # if x_1 - 1 in d:\n    #     return d[x_1 - 1] - d[x_1]\n    # else:\n    #     return move(x_1, x_2)\n\n    # if x_1 + 1 in d:\n    #     return d[x_1 + 1] - d[x_1]\n    # else:\n    #     return move(x_1, x_2)\n\n    # print(d)\n    # for i in range(0, m):\n    #     print(arr[i])\n\n    # for i in range(0, m):\n    #     arr[i][1] = move(arr[i][0], arr[i][1])\n    #     print(arr[i][1])\n\n    # return min([min(move(arr[i][0], arr[i][1]), move_left(arr[i][0], arr[i][1]), move_right(arr[i][0], arr[i][1])) for i in range(0, m)])\n    # return min([move(arr[i][0], arr[i][1]) for i in range(0, m)])\n\n    return min([move(arr[i][0], arr[i][1]) for i in range(0, m)])\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = [0] * (m + 1)\n\n    for i in range(n):\n        dp[i][arr[i]] = 1\n        if i > 0:\n            dp[i][arr[i]-1] = 1\n\n    for i in range(n):\n        for j in range(1, m+1):\n            for k in range(1, j):\n                dp[i][j] += dp[i][k-1] * dp[i][j-k]\n    return str(dp[n-1][m])\n    #return dp"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return solve(stdin)\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return str(result)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def move(x, direction):\n        return x + (1 if direction == 'left' else -1)\n\n    n, m = map(int, stdin.split(' '))\n    xs = list(map(int, stdin.split(' ')))\n\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    dp[0][0] = 1\n    for i in range(m):\n        dp[0][xs[i] - 1] += 1\n        dp[1][xs[i] - 1] += 1\n        for j in range(2):\n            for k in range(n):\n                if dp[j][k] > 0:\n                    dp[1 - j][move(k, 'left')] += dp[j][k]\n                    dp[1 - j][move(k, 'right')] += dp[j][k]\n\n    print(min(dp[0][k] + dp[1][k] for k in range(n)))\n    return ''\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 5\n   ... 10 12 1 2 14\n   ... ''')\n    '5'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    lst = list(map(int, stdin.split('\\n')[1].split()))\n    lst = [0] + lst + [max(lst) + 1]\n    ans = 0\n    for i in range(1, m + 1):\n        left = lst[i - 1]\n        right = lst[i + 1]\n        ans = max(ans, (left + right) // 2)\n    return str(ans)\n"
    },
    {
        "number": 4119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of moves required to achieve the objective.\n    >>> solution('2 5\\n10 12 1 2 14')\n    5\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    xs = [int(x) for x in stdin.split('\\n')[1].split()]\n    memo = [None] * (m + 1)\n    for x in xs:\n        memo[x] = x + 1\n    stack = [m]\n    while stack:\n        x = stack.pop()\n        if memo[x] is not None:\n            memo[x] = None\n            stack.append(x - 1)\n            stack.append(x + 1)\n    print(sum(memo == None))\n    return sum(memo == None)\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    city_cnt = n\n    roads_cnt = m\n    options_cnt = k\n    roads = []\n    for _ in range(roads_cnt):\n        a, b = map(int, stdin.split(' '))\n        roads.append((a - 1, b - 1))\n\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 0\n    solution = [[0 for _ in range(n)] for _ in range(n)]\n    solution[0][0] = 1\n\n    for _ in range(city_cnt):\n        for i in range(city_cnt):\n            for j in range(city_cnt):\n                if i == j:\n                    continue\n                if dp[i][j] == -1:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j] + roads[i - 1][j - 1]\n                    if dp[i][j] < options_cnt:\n                        dp[i][j] = dp[i][j] % options_cnt\n                    solution[i][j] += solution[i][j - 1] * solution[i - 1][j]\n                    solution[i][j] %= options_cnt\n                elif dp[i][j] < options_cnt:\n                    dp[i][j] = dp[i][j] % options_cnt\n                    solution[i][j] = solution[i][j] * dp[i - 1][j - 1]\n                    solution[i][j] %= options_cnt\n\n    print(dp[city_cnt - 1][city_cnt - 1])\n\n    ways = []\n    for _ in range(solution[city_cnt - 1][city_cnt - 1]):\n        ways.append(list(map(int, list('0' * options_cnt))))\n\n    for i in range(city_cnt):\n        for j in range(city_cnt):\n            if i == j:\n                continue\n            if solution[i][j] == 0:\n                continue\n            ways[solution[i][j] - 1][dp[i][j] - 1] = 1\n            ways[solution[i][j] - 1] = ''.join(list(map(str, ways[solution[i][j] - 1])))\n\n    return ''.join(list(map(str, ways)))\n\nsolution(input())\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 4 3\\n1 2\\n2 3\\n1 4\\n4 3\\n')\n    '1110'\n    >>> solution('4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\\n')\n    '1011'\n    >>> solution('5 6 2\\n1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\\n')\n    '111100'\n    \"\"\"\n    lines = stdin.splitlines()\n    n, m, t = map(int, lines[0].split())\n    roads = []\n    for i in range(1, m + 1):\n        a, b = map(int, lines[i].split())\n        roads.append((a, b))\n    roads.sort()\n\n    def dfs(roads, path, used, d):\n        if len(path) == n - 1:\n            for i in range(n):\n                if path[i] == 0:\n                    return d\n            return d + 1\n        for j in range(n):\n            if used[j] == 0 and roads[j][0] == path[-1]:\n                used[j] = 1\n                d = dfs(roads, path + [roads[j][1]], used, d)\n                used[j] = 0\n        return d\n\n    ways = []\n    for i in range(t):\n        used = [0] * n\n        ans = dfs(roads, [1], used, 0)\n        ways.append(\"\".join([\"1\" if used[j] else \"0\" for j in range(n)]))\n\n    return \"\\n\".join(ways)\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    cities = [int(x) for x in stdin.split()]\n    roads = []\n    for i in range(m):\n        roads.append([int(x) for x in stdin.split()])\n    options = []\n    for i in range(1, n+1):\n        cities[0] = i\n        options.append(find_options(roads, cities))\n    return '\\n'.join(options)\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # import math\n    # import numpy as np\n    # n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    # # n, m, k = np.array(list(map(int, stdin.split('\\n')[0].split(' '))))\n    # # return '\\n'.join(np.array(list(map(lambda x: ''.join(map(lambda z: '1' if z in x else '0', range(n))), [input() for i in range(m)]))[:k]))\n    # print(*np.array(list(map(lambda x: ''.join(map(lambda z: '1' if z in x else '0', range(n))), [input() for i in range(m)]))[:k], dtype=np.int64).reshape(k, n).tolist(), sep='\\n')\n    # return ''\n\n    # n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    # return '\\n'.join(map(lambda x: ''.join(map(lambda z: '1' if z in x else '0', range(n))), [input() for i in range(m)]))[:k]\n    n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    roads = {i + 1: set() for i in range(n - 1)}\n    for i in range(m):\n        x, y = map(int, stdin.split('\\n')[i].split(' '))\n        roads[x].add(y)\n        roads[y].add(x)\n    print(roads)\n    res = {'1': set() for i in range(n - 1)}\n    for i in range(n):\n        t = set()\n        for j in roads[i + 1]:\n            t.add(str(j))\n        for j in roads[i + 1]:\n            for k in roads[j]:\n                if k!= i + 1 and k not in roads[i + 1]:\n                    t.add(str(k))\n        res[str(i + 1)] = t\n    print(res)\n    for i in range(n - 1):\n        t = set()\n        for j in res[str(i + 1)]:\n            t.add(j)\n        for j in res[str(i + 1)]:\n            for k in res[j]:\n                if k!= i + 1 and k not in res[str(i + 1)]:\n                    t.add(k)\n        for j in roads[i + 1]:\n            if j!= i + 1:\n                t.add(str(j))\n        t = list(t)\n        t.sort()\n        t = ''.join(t)\n        print(t)\n    return ''\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = stdin.split('\\n')\n    # roads = [[int(j) for j in i.split()] for i in stdin[1:]]\n    # n, m, k = [int(i) for i in stdin[0].split()]\n    n, m, k = [int(i) for i in stdin.split()]\n    roads = [ [int(i) for i in stdin.split()] for _ in range(m) ]\n    # print(roads)\n    connectivity = []\n    for i in range(1, n):\n        visited = set()\n        visited.add(1)\n        while True:\n            next_visited = set()\n            for j in visited:\n                for k in roads:\n                    if j in k:\n                        if i in k:\n                            connectivity.append(1)\n                            return str(connectivity)\n\n\n    \n    # print(connectivity)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, k = list(map(int, stdin.split()))\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    \n    ans = []\n    \n    for bits in range(1, 2**m):\n        used = []\n        for bit in range(m):\n            if (bits>>bit) & 1:\n                used.append(bit)\n        \n        used = sorted(used)\n        \n        dist = 0\n        current = 1\n        \n        for road in used:\n            a, b = roads[road]\n            if a == current:\n                dist += b - current\n                current = b\n            else:\n                dist += b - current + 1\n                current = b + 1\n        \n        if current!= n:\n            dist += n - current + 1\n        \n        if dist <= k:\n            ans.append(bits)\n    \n    return '\\n'.join(str(bits) for bits in ans)\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3 2\\n1 2\\n2 3\\n1 4\\n4 3\")\n    '1111'\n    >>> solution(\"4 6 3\\n1 2\\n2 3\\n1 4\\n4 3\\n2 4\\n1 3\")\n    '1011'\n    \"\"\"\n    cities, roads, options = parse_input(stdin)\n    road_dict = create_road_dict(roads, cities)\n    options = [tuple(options[i][0]) for i in range(len(options))]\n    options_set = list(set(options))\n    if len(options_set) < len(options):\n        return \"\".join(['1' if i in road_dict[1] else '0' for i in range(1, len(cities) + 1)])\n\n    return solve_recursive(road_dict, cities, options_set, len(options))\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''.join(str(x) for x in input().split())\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [[int(x) for x in stdin.split()] for _ in range(m)]\n    edges = set()\n    for a, b in roads:\n        edges.add((a, b))\n        edges.add((b, a))\n    \n    counter = 0\n    for i in range(1, n):\n        if (i, i) not in edges:\n            counter += 1\n\n    if counter <= k:\n        return \" \".join([\"1\" if (i, j) in edges else \"0\" for i in range(1, n) for j in range(i, n) if (i, j) in edges])\n\n    else:\n        roads_copy = roads.copy()\n        count = 0\n        for i in range(m):\n            if roads_copy[i][0] == 1 and roads_copy[i][1] == n:\n                roads_copy[i][0] = n\n                roads_copy[i][1] = 1\n                count += 1\n            elif roads_copy[i][0] == n and roads_copy[i][1] == 1:\n                roads_copy[i][0] = 1\n                roads_copy[i][1] = n\n                count += 1\n            else:\n                roads_copy[i][0], roads_copy[i][1] = roads_copy[i][1], roads_copy[i][0]\n        counter = 0\n        for i in range(1, n):\n            if (i, i) not in edges:\n                counter += 1\n\n        if counter <= k:\n            return \" \".join([\"1\" if (i, j) in edges else \"0\" for i in range(1, n) for j in range(i, n) if (i, j) in edges])\n\n        else:\n            roads_copy = roads_copy.copy()\n            count = 0\n            for i in range(m):\n                if roads_copy[i][0] == 1 and roads_copy[i][1] == n:\n                    roads_copy[i][0] = n\n                    roads_copy[i][1] = 1\n                    count += 1\n                elif roads_copy[i][0] == n and roads_copy[i][1] == 1:\n                    roads_copy[i][0] = 1\n                    roads_copy[i][1] = n\n                    count += 1\n                else:\n                    roads_copy[i][0], roads_copy[i][1] = roads_copy[i][1], roads_copy[i][0]\n        counter = 0\n        for i in range(1, n):\n            if (i, i) not in edges:\n                counter += 1\n\n        if counter <= k:\n            return \" \".join([\"1\" if (i, j) in edges else \"0\" for i in range(1, n) for j in range(i, n) if (i, j) in edges])\n\n        else:\n            roads_copy = roads_copy.copy()\n            count = 0\n            for i in range(m):\n                if roads_copy[i][0] == 1 and roads_copy[i][1] == n:\n                    roads_copy[i][0] = n\n                    roads_copy[i][1] = 1\n                    count += 1\n                elif roads_copy[i][0] == n and roads_copy[i][1] == 1:\n                    roads_copy[i][0] = 1\n                    roads_copy[i][1] = n\n                    count += 1\n                else:\n                    roads_copy[i][0], roads_copy[i][1] = roads_copy[i][1], roads_copy[i][0]\n        counter = 0\n        for i in range(1, n):\n            if (i, i) not in edges:\n                counter += 1\n\n        if counter <= k:\n            return \" \".join([\"1\" if (i, j) in edges else \"0\" for i in range(1, n) for j in range(i, n) if (i, j) in edges])\n\n        else:\n            return\n"
    },
    {
        "number": 4120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type input: str\n    :rtype: str\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    arr = list(map(int, lines[1].split(' ')))\n    arr.sort()\n    if arr[0] == arr[-1]:\n        return 'YES'\n    elif (arr[0] - 1) * 2 == arr[-1] or (arr[-1] + 1) * 2 == arr[0]:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    h = [int(x) for x in stdin[1:].split(' ')]\n    m = 0\n    while m < n:\n        for i in range(n-1):\n            if h[i] == h[i+1]:\n                h[i] += 2\n                h[i+1] += 2\n        m += 1\n    for x in h:\n        if x!= h[0]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if wall(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    m = set(h)\n    ans = \"NO\"\n    for m in m:\n        if h.count(m) == 1:\n            ans = \"YES\"\n            break\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '' or len(stdin) == 1 else 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"YES\"\n    parts = [int(num) for num in stdin.split()]\n    n = len(parts)\n    if n < 3:\n        return \"NO\"\n    if n == 3 and parts[0] == parts[1] == parts[2]:\n        return \"YES\"\n    elif n == 3:\n        return \"NO\"\n    for i in range(1, n-1):\n        if parts[i-1] > parts[i] and parts[i+1] > parts[i]:\n            return \"NO\"\n    if parts[0] > parts[1] and parts[0] > parts[n-1]:\n        return \"NO\"\n    if parts[n-1] > parts[n-2] and parts[n-1] > parts[n-3]:\n        return \"NO\"\n    return \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, N = list(map(int, stdin.split(\" \")))\n    d = list(map(int, stdin.split(\" \")))\n    arr = deque([0] * N)\n    curr_hp = H\n    prev = -1\n    count = 0\n    while arr:\n        count += 1\n        next_arr = deque([])\n        for i in range(N):\n            delta = d[i] + arr[i]\n            curr_hp += delta\n            arr[i] += delta\n            if curr_hp <= 0:\n                prev = count\n                break\n            next_arr.append(arr[i])\n        arr = next_arr\n        if prev!= -1:\n            break\n    return prev\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, H, d = stdin.split(' ')\n    N, H, d = int(N), int(H), [int(i) for i in d.split(' ')]\n    min_, max_, res = 0, H, 0\n    for i in range(N):\n        min_ += d[i]\n        if min_ > max_:\n            res = i + 1\n            break\n        max_ += d[i]\n    return res if max_ <= 0 else -1\n\nprint(solution('100 8 -3 -6 5 4'))\nprint(solution('1000 6'))\nprint(solution('1000000000000 5'))\nprint(solution('10 4'))"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1000 6\\n-100 -200 -300 125 77 -4\\n\")\n    9\n    >>> solution(\"1000000000000 5\\n-1 0 0 0 0\\n\")\n    4999999999996\n    >>> solution(\"10 4\\n-3 -6 5 4\\n\")\n    -1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1000 6\\n-100 -200 -300 125 77 -4')\n    9\n    \"\"\"\n    H, N = map(int, stdin.split())\n    d = list(map(int, stdin.split()[1:]))\n    hp = H\n    cur = 0\n    while True:\n        hp += sum(d[cur:cur+N])\n        if hp <= 0:\n            return cur + N\n        cur += N\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split('\\n')[0].split())\n    d = list(map(int, stdin.split('\\n')[1].split()))\n    hits = [0] * (n+1)\n    for i in range(h, 0, -1):\n        hits[i] = i\n    for i in range(n):\n        hits[d[i]+i] = 0\n    i = 0\n    while i < n+1:\n        if hits[i] <= 0:\n            break\n        i += 1\n    if i == n+1:\n        return '-1'\n    else:\n        return str(i)"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: string of the input\n    :return: string of the output\n    \"\"\"\n    # Initialise the variables\n    H, n = [int(x) for x in stdin.split(' ')]\n    d = [int(x) for x in stdin.split(' ')[1:]]\n    # print(d)\n    rounds = [0] * n\n    rounds[0] = H\n    for i in range(1, n):\n        rounds[i] = rounds[i - 1] + d[i - 1]\n\n    if rounds[n - 1] >= 0:\n        return n - 1\n\n    for i in range(n - 2, 0, -1):\n        if rounds[i] + d[i] >= 0:\n            return i\n    return -1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingKA6MZT-BWC/\n    \"\"\"\n    H, N = map(int, stdin.split(' '))\n    d = [int(i) for i in stdin.split(' ') if i!= '']\n    if len(d)!= N:\n        return '-1'\n\n    for h in range(H, 0, -1):\n        for i in range(N):\n            if i == N - 1:\n                return str(h)\n            H += d[i]\n            if H < 0:\n                break\n    return '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    sum = 0\n    i = 0\n    while True:\n        sum += d[i]\n        if sum < 0:\n            i += 1\n            if i == n:\n                return -1\n            sum = 0\n        else:\n            break\n    return i + 1\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    h, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    time = 0\n    while h > 0:\n        time += 1\n        for i in range(n):\n            h += d[i]\n        if h <= 0:\n            break\n    if h <= 0:\n        print(time)\n    else:\n        print(\"-1\")\n    return \"\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    H = abs(H)\n    if N == 1:\n        if H < d[0]:\n            return -1\n        return 1\n    if H <= 0:\n        return -1\n    for i in range(N):\n        H = max(0, H + d[i])\n    return H\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    [n] = re.findall('^[0-9]+', stdin)\n    n = int(n)\n    string = stdin[len(n):].rstrip()\n    s = [string[i:i + 2] for i in range(0, len(string), 2)]\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max_val = 0\n    max_key = None\n    for k, v in d.items():\n        if v > max_val:\n            max_key = k\n            max_val = v\n    return max_key\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    # your code here\n    return stdin\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return None\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    best_two_gram = None\n    count = 0\n    for i in range(len(string) - 1):\n        if string[i]!= string[i + 1]:\n            continue\n        for j in range(i + 2, len(string) - 1):\n            if string[j]!= string[j + 1]:\n                break\n            if string[i:j + 1] not in string[:i] + string[j + 1:]:\n                if best_two_gram is None or string[i:j + 1] > best_two_gram:\n                    best_two_gram = string[i:j + 1]\n                    count = 1\n                elif string[i:j + 1] == best_two_gram:\n                    count += 1\n    return best_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a string s consisting of n capital letters and a number k.\n    Returns the most frequent k-letter two-gram in the string s.\n    \"\"\"\n    import collections\n    # Create a Counter of all the 2-grams in the string.\n    counts = collections.Counter(s[i:i + 2] for i in range(len(s) - 1))\n    # Return the two-gram with the highest frequency.\n    return counts.most_common()[-1][0]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the maximum number of occurrences of the two-gram in the given string.\n    \"\"\"\n    number_of_two_grams = 0\n    s = stdin\n    two_grams = set()\n    for index in range(len(s) - 1):\n        two_grams.add(s[index] + s[index + 1])\n        if two_grams.__len__() > number_of_two_grams:\n            number_of_two_grams = two_grams.__len__()\n    return max(two_grams, key=lambda x: s.count(x))\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n < 2:\n        return ''\n    \n    max_count, max_pair = 0, ''\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            count = s.count(s[i:j+1], 1)\n            if count > max_count:\n                max_count = count\n                max_pair = s[i:j+1]\n    return max_pair\n"
    },
    {
        "number": 4123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the two-gram that contains in the given string the most occurences\"\"\"\n    counts = {}\n    for i in range(len(stdin) - 1):\n        letter_a, letter_b = stdin[i], stdin[i + 1]\n        two_letter = letter_a + letter_b\n        counts[two_letter] = counts.get(two_letter, 0) + 1\n    most_common = max(counts, key=counts.get)\n    return most_common\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    cnt = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            cnt += 1\n            s = s[i:]\n            break\n    for i in range(len(t)):\n        if t[i]!= s[i]:\n            cnt += 1\n            t = t[i:]\n            break\n    return cnt\n    \n    \ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split('\\n')\n    return min(sum(map(len, x)), sum(map(len, x[::-1])))\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return len(s) + len(t) - 2 * sum(1 for i in s if i in t)\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n            break\n    return count\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    t: str = stdin\n    min_move: int = min(len(s), len(t))\n    for i in range(1, min_move + 1):\n        if len(s) > len(t):\n            s = s[1:]\n        elif len(t) > len(s):\n            t = t[1:]\n        else:\n            s = s[1:]\n            t = t[1:]\n        min_move -= 1\n    return min_move\n\"\"\"\n\nfrom collections import Counter\nimport operator\nfrom itertools import chain\nimport re\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.split(\"\\n\")[0]\n    t: str = stdin.split(\"\\n\")[1]\n\n    while len(s)!= 0 and len(t)!= 0:\n        s = s[1:]\n        t = t[1:]\n\n    return len(s) + len(t)\n"
    },
    {
        "number": 4124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    return str(len(s) + len(t) - 2)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    (n, x) = [int(x) for x in stdin.split(' ')]\n    (x_l, x_r) = [int(x) for x in stdin.split(' ')]\n\n    def is_possible(d):\n        y = 0\n        while y < n:\n            if x_l <= x + d < x_r:\n                d += 1\n                y += 1\n            else:\n                d += 1\n                if d % 2 == 1:\n                    d += 1\n                y += 1\n        return y == n\n\n    d = 1\n    while not is_possible(d):\n        d += 1\n    return str(d)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    v = [int(x) for x in stdin.split()]\n    v.sort()\n    v = set(v)\n    v.add(0)\n    v.add(max(v) + 2)\n    v = list(v)\n    dp = [float('-inf')] * (max(v) + 1)\n    dp[0] = 0\n    for i in v:\n        for j in v:\n            if i - j > 0:\n                dp[i] = max(dp[i], dp[i - j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Sets D as small as possible to visit all the cities.\n    \"\"\"\n    count = stdin.split('\\n')\n    N = int(count[0].split()[0])\n    X = int(count[0].split()[1])\n    city_list = list(map(int, count[1].split()))\n    # using a set to make sure all cities are visited at least once\n    visited_set = set()\n    # city_set = set(city_list)\n    # keep track of the distance travelled\n    distance = 0\n    # loop until all cities are visited\n    while len(visited_set)!= N:\n        # for each city in the list\n        for city in city_list:\n            # if the city is not in the visited set\n            if city not in visited_set:\n                # travel to the city if we can, and add it to the visited set\n                if city >= X:\n                    distance += X - city\n                    visited_set.add(city)\n                    break\n                else:\n                    distance += X - city\n                    visited_set.add(city)\n        # if all cities have been visited, we're done\n        if len(visited_set) == N:\n            break\n        # otherwise, add a distance of 1 to the next city\n        else:\n            distance += 1\n            # use the next city from the list\n            city = city_list[city_list.index(city_list[0]) + 1]\n            city_list.pop(0)\n            city_list.append(city)\n    return distance\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    nums_str = stdin.split(\"\\n\")\n    nums = [int(num) for num in nums_str[0].split(\" \")]\n    n = nums[0]\n    x = nums[1:]\n\n    # Get max distance\n    max_dist = max(x)\n\n    # Get distance list\n    dist_list = list(set(x))\n\n    # Get dist sum\n    dist_sum = sum(dist_list)\n\n    # Get max d\n    d = 0\n    while dist_sum < n:\n        d += 1\n        dist_sum += max_dist\n\n    return d\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Calculate maximum D by using a greedy algorithm\n\n    Parameters\n    ----------\n    stdin : str\n        Input given in the following format:\n        N X\n        x_1 x_2... x_N\n        where N is the number of cities and X is the start point\n\n    Returns\n    -------\n    str\n        maximum D\n    '''\n    return ''"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_cities, start_point = map(int, stdin.readline().split())\n    cities_coordinates = [int(x) for x in stdin.readline().split()]\n    max_distance = 0\n    for i in range(num_cities):\n        current_distance = 0\n        while cities_coordinates[i] > start_point:\n            current_distance += 1\n            start_point += 1\n        while cities_coordinates[i] < start_point:\n            current_distance += 1\n            start_point -= 1\n        if current_distance > max_distance:\n            max_distance = current_distance\n    return str(max_distance)\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 7 11\n   ... ''')\n    '2'\n    \"\"\"\n    n, x = map(int, stdin.split())\n    dp = [[-1 for _ in range(n + 1)] for _ in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = abs(x)\n    for i in range(1, n + 1):\n        x, y = map(int, stdin.split())\n        dp[0][i] = max(dp[0][i - 1] - abs(x - y), 0)\n        dp[1][i] = max(dp[1][i - 1] + abs(x - y), 0)\n    return max(dp[1][n], dp[0][n])\n"
    },
    {
        "number": 4125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    half_length = length // 2\n    string_1 = stdin[:half_length]\n    string_2 = stdin[half_length:]\n    string_3 = stdin[half_length - 1:half_length]\n    string_4 = stdin[half_length + 1:]\n\n    if string_1 == string_1[::-1] and string_2 == string_2[::-1] \\\n        and string_3 == string_3[::-1] and string_4 == string_4[::-1]:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('aba')\n    'Yes'\n    >>> solution('abc')\n    'No'\n    \"\"\"\n    s = stdin\n\n    mid = len(s) // 2\n\n    if s == s[::-1]:\n        # check for odd\n        if len(s) % 2:\n            # check for odd length palindrome\n            left = s[:mid]\n            right = s[mid:]\n\n            if left == left[::-1]:\n                # check for split palindrome\n                if right == right[::-1]:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            # even length palindrome\n            left = s[:mid - 1]\n            right = s[mid + 1:]\n\n            if left == left[::-1]:\n                if right == right[::-1]:\n                    return 'Yes'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n    else:\n        return 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"akasaka\")\n    'Yes'\n    \"\"\"\n    s = stdin[0]\n    \n    # can only check odd-length palindromes\n    if len(s) % 2 == 0:\n        return 'No'\n\n    for i in range(int((len(s) - 1) / 2)):\n        if s[i]!= s[len(s) - 1 - i]:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    middle = n // 2\n    first = stdin[:middle]\n    second = stdin[middle:]\n    if first == second[::-1]:\n        middle2 = n // 2\n        first2 = stdin[:middle2]\n        second2 = stdin[middle2:]\n        if first2 == second2[::-1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin\n    if len(text) % 2 == 0:\n        print(\"No\")\n    else:\n        if text[:(len(text) // 2)] == text[:len(text) // 2 - 1:-1]:\n            if text[(len(text) // 2) + 1:] == text[:len(text) // 2 + 1:-1]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"Yes\" if len(stdin) % 2 == 1 and all(\n        stdin[i] == stdin[~i] for i in range(len(stdin) // 2)\n    ) else \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    assert(len(stdin) % 2 == 1)\n    if not stdin.replace(' ', '').isalpha():\n        return \"No\"\n    stdin = stdin.replace(' ', '')\n    assert(len(stdin) % 2 == 1)\n    middle_str = stdin[(len(stdin) - 1) // 2:len(stdin) // 2 + 1]\n    if len(stdin) % 2!= 0:\n        if middle_str!= middle_str[::-1]:\n            return \"No\"\n    left_str = stdin[0:len(stdin) // 2]\n    right_str = stdin[len(stdin) // 2 + 1:]\n    if left_str!= left_str[::-1] or right_str!= right_str[::-1]:\n        return \"No\"\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    return 'Yes' if is_strong(stdin) and is_strong(stdin[: (n + 1) // 2]) and is_strong(stdin[(n - 1) // 2:]) else 'No'\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if (len(s) <= 1) or (len(s) % 2 == 0):\n        return \"No\"\n    else:\n        m = (len(s) // 2)\n        r = len(s) % 2\n        if s[0:m] == s[m:m + r][::-1]:\n            if (s[m + 1:m + r + 2] == s[m + r + 2:][::-1]) or (s[m + 2:m + r + 2] == s[m + r + 2:][::-1]):\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin[:-1]\n    length = len(input)\n    is_palindrome = lambda input: input == input[::-1]\n    if not is_palindrome(input[:int((length - 1) / 2)]):\n        return \"No\"\n    if not is_palindrome(input[int((length + 3) / 2) - 1:]):\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the product of two numbers with truncated fractional part.'''\n    a, b = stdin.split()\n    return int(int(a) * float(b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split())\n    return str(int(a * b))\n\"\"\""
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''returns the product of two numbers as an integer'''\n    a, b = map(float, stdin.split())\n    # multiply the two numbers, then truncate the fractional part\n    return int(a * b * 10) // 10\n\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    return str(int(float(a) * float(b)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    return str(int(round(A * B)))"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split(\" \"))\n    return int(a * b)\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(\" \")\n    x, y = float(x), float(y)\n    return int(x * y)\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(float(a) * float(b)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the solution'''\n    A, B = [int(x) for x in stdin.split(' ')]\n    return str(A * B)"
    },
    {
        "number": 4127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(float, stdin.split(\" \"))\n    print(int(a * b))\n    return \"\"\n    \n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        print(0)\n    else:\n        print(1)\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    t = int(lines[0])\n    numbers = [int(line) for line in lines[1:]]\n    result = []\n    for n in numbers:\n        if n < 3:\n            result.append(0)\n            continue\n        a = n // 2\n        n = n - a\n        b = n // 2\n        result.append(a + b)\n\n    return '\\n'.join([str(x) for x in result])\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(solution_i(int(stdin.strip())) for _ in range(int(stdin.strip())))\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2!= 0:\n            print(0)\n        elif n % 2 == 0:\n            if n == 2:\n                print(1)\n            else:\n                print((n//2) * 2)\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, ans))\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = list(map(int, stdin.split(\" \")))\n    roads = [list(map(int, stdin.split(\" \"))) for _ in range(m)]\n    graph = {i: [] for i in range(1, n+1)}\n    for road in roads:\n        graph[road[0]].append(road[1])\n    visited = set()\n    stack = [s]\n    count = 0\n    while stack:\n        for _ in range(len(stack)):\n            cur = stack.pop()\n            visited.add(cur)\n            for node in graph[cur]:\n                if node not in visited:\n                    stack.append(node)\n        count += 1\n    return count-1\n\nprint(solution(\"7 9 1\"))\nprint(solution(\"9 9 1\"))\nprint(solution(\"5 4 5\"))\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split(\" \")]\n    roads = defaultdict(set)\n    for i in range(m):\n        u, v = [int(x) for x in stdin.split(\" \")]\n        roads[u].add(v)\n        roads[v].add(u)\n    print(graph_traversal(s, roads))\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    edges = []\n    for _ in range(m):\n        edges.append([int(x) for x in stdin.split('\\n')[1].split(' ')])\n    edges.sort(key=lambda x: x[2], reverse=True)\n    visited = [False] * n\n    visited[s - 1] = True\n    count = 0\n    for edge in edges:\n        if visited[edge[0] - 1] and visited[edge[1] - 1]:\n            continue\n        if not visited[edge[0] - 1]:\n            count += 1\n            visited[edge[0] - 1] = True\n        if not visited[edge[1] - 1]:\n            count += 1\n            visited[edge[1] - 1] = True\n        # print(edge, count, visited)\n    return str(count)\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split(' ')]\n    roads = []\n    for _ in range(m):\n        roads.append([int(x) for x in stdin.split(' ')])\n    dist = [float('inf')] * n\n    path = [None] * n\n    dist[s - 1] = 0\n    for _ in range(n):\n        for u, v in roads:\n            if dist[u - 1] + 1 < dist[v - 1]:\n                dist[v - 1] = dist[u - 1] + 1\n                path[v - 1] = u\n    if dist[0] == float('inf'):\n        return 0\n    count = 0\n    city = s - 1\n    while city!= None:\n        count += 1\n        city = path[city]\n    return count - 1\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n-----Notes-----\n\n*This is an input/output question and as such, does not need to be changed.\n\n*This problem was asked by Facebook.\n\n*In this example, I'm solving this using a depth-first search, which is a little more intuitive than using a breadth-first search.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9 9 1\n   ... 1 2\n   ... 1 3\n   ... 2 3\n   ... 1 5\n   ... 5 6\n   ... 6 1\n   ... 1 8\n   ... 9 8\n   ... 7 1''')\n    '3'\n    >>> solution('''5 4 5\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 1''')\n    '1'\n    \"\"\"\n    import sys\n    input = sys.stdin.readline\n\n    n, m, s = map(int, input().split())\n    adj = {i: set() for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, input().split())\n        adj[u].add(v)\n        adj[v].add(u)\n\n    q = [s]\n    visited = set(q)\n\n    for i in q:\n        for j in adj[i]:\n            if j not in visited:\n                q.append(j)\n                visited.add(j)\n\n    return len(q) - 1\n"
    },
    {
        "number": 4129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = [int(x) for x in stdin.split('\\n')[:3]]\n    d = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        u, v = [int(x) for x in stdin.split('\\n')[i].split(' ')[:2]]\n        d[u].append(v)\n        d[v].append(u)\n    q = set()\n    q.add(s)\n    r = 0\n    while q:\n        qq = set()\n        for qqq in q:\n            for tt in d[qqq]:\n                if tt not in q:\n                    qq.add(tt)\n                    r += 1\n        q = qq\n    return str(r)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    weights.sort()\n    diff = max(weights) - min(weights)\n    return diff if diff > 0 else len(weights)\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    boxers = [int(x) for x in stdin.split('\\n')]\n    boxers.sort(reverse=True)\n    return len([x for x in boxers if x > 0])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    numbers = stdin.split('\\n')[1].split()\n    numbers = [int(number) for number in numbers]\n    numbers.sort(reverse=True)\n    summ = 0\n    num_count = 0\n    for number in numbers:\n        if summ + number <= 150000:\n            num_count += 1\n            summ += number\n    print(num_count)\n    return\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    a.sort()\n    print(n - a.index(max(a)))\n    return ''\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1].split(' ')]\n    print(n - len(set(a)))\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 3 2 4 1\n   ... ''')\n    '4'\n    >>> solution('''6\n   ... 1 1 1 4 4 4\n   ... ''')\n    '5'\n    \"\"\"\n    n = int(stdin.readline())\n    boxers = list(map(int, stdin.readline().split()))\n    boxers.sort()\n    max_weight = boxers[-1]\n    min_weight = boxers[0]\n    left_weight = max_weight - min_weight\n    left = max_weight - min_weight\n    if n == 1:\n        left_weight = 0\n    team = [min_weight]\n    for i in range(n - 1):\n        left -= boxers[i] - team[-1]\n        left_weight -= boxers[i] - team[-1]\n        if left_weight < 0:\n            left_weight += boxers[i]\n            team.append(boxers[i])\n    return len(team)\n"
    },
    {
        "number": 4130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    boxers = [int(num) for num in stdin.split('\\n')[0].split(' ')]\n    boxers.sort()\n    boxers.reverse()\n    while len(boxers) > 0:\n        for i in range(len(boxers)):\n            if i + 1 <= len(boxers) - 1 and boxers[i + 1] == boxers[i] + 1:\n                boxers.remove(boxers[i + 1])\n                boxers.remove(boxers[i])\n                break\n            if i + 1 == len(boxers) - 1:\n                boxers.remove(boxers[i])\n    return len(boxers)\n\nsolution('3 2 4 1')\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pref_cnt, pref_len, cities_cnt = map(int, stdin.split(\" \"))\n    pref_list, city_list = list(), list()\n    for _ in range(pref_cnt):\n        pref_list.append(stdin.split(\" \")[1:])\n    for _ in range(cities_cnt):\n        city_list.append(stdin.split(\" \")[1:])\n    result = list()\n    for city in city_list:\n        pref_index = city[0]\n        pref_index = list(pref_index)\n        pref_index.reverse()\n        pref_index = ''.join(pref_index)\n        pref_index = int(pref_index)\n        city_index = city[1]\n        city_index = list(city_index)\n        city_index.reverse()\n        city_index = ''.join(city_index)\n        city_index = int(city_index)\n        result.append(str(pref_index) + str(city_index).rjust(6, '0'))\n    print(\"\\n\".join(result))\n    return \"\""
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"\"\n    n, m = map(int, stdin.split())\n    for i in range(n):\n        p, y = map(int, stdin.split())\n        ans += str(y).zfill(6)\n        if i!= m - 1:\n            ans += str(p).zfill(6)\n    return ans\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the ID numbers for all the cities.\n\n    >>> solution('2 3\\n1 32\\n2 63\\n1 12\\n')\n    '000001000002\\n000002000001\\n000001000001'\n    '''\n    n, m = tuple(map(int, stdin.readline().split()))\n    numbers = set()\n    for _ in range(n):\n        city, year = stdin.readline().split()\n        city = city.zfill(6)\n        year = year.zfill(6)\n        numbers.add((city, year))\n    numbers = sorted(list(numbers), key=lambda x: x[0] + x[1])\n    for city, year in numbers:\n        print(year + city)\n    return ''\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # N, M = map(int, stdin.readline().split())\n    # p_list = [0] * N\n    # y_list = [0] * N\n    # for _ in range(M):\n    #     p_id, y_id = map(int, stdin.readline().split())\n    #     p_list[p_id - 1] = y_id\n    #     y_list[p_id - 1] = y_id\n    # for i in range(N):\n    #     print(\n    #         \"%06d\" % (p_list[i] * 1000 + y_list[i])\n    #     )\n    # return \"\"\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    \ud480\uc774\ubc95\n    \ubc18\ubcf5\ubb38\uc73c\ub85c \uc785\ub825\uac12\uc744 \ubc1b\uc74c\n    \ub098\uba38\uc9c0\ub97c \uc774\uc6a9\ud574\uc11c \uc22b\uc790\ub9cc \ubf51\uc544\ub0b4\uae30\n    \"\"\"\n    N, M = [int(x) for x in stdin.split(' ')]\n    pref, year = [0] * N, [0] * M\n    for i in range(N):\n        pref[i] = stdin.split(' ')[i*2]\n        year[i] = int(stdin.split(' ')[i*2+1])\n    year.sort()\n    for i in range(N):\n        temp = year[i] // (10 ** (len(str(year[i])) // 2))\n        year[i] = str(temp).zfill(6)\n    for i in range(M):\n        temp = year[i] % (10 ** (len(str(year[i])) // 2))\n        year[i] = str(temp).zfill(6)\n    for i in range(N):\n        print(pref[i] + year[i])\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    \n    result = []\n    for _ in range(N):\n        p, y = map(int, stdin.readline().split())\n        result.append((p, y, y % 1000000000))\n    \n    result.sort()\n    \n    for i in range(M):\n        _, _, index = result[i]\n        result[i] = f\"{index:06d}\"\n    \n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # init\n    N, M = map(int, stdin.readline().split())\n    cities = [None] * N\n    for _ in range(M):\n        P, Y = map(int, stdin.readline().split())\n        cities[P - 1] = Y\n    cities.sort()\n    for i, Y in enumerate(cities):\n        if i!= 0:\n            print(Y, end=\"\")\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # set input\n    N, M = map(int, stdin.readline().split())\n    Cities = [tuple(map(int, line.split())) for line in stdin]\n    # solve problem\n    return \"\".join(\n        \"{:06d}\".format(\n            sum(Cities[i][1] * (10 ** i) for i in range(M))\n        )\n        for y in range(10 ** 9, -1, -1)\n    )"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3\\n0 0\\n1 0\\n2 0\\n1 1\\n1 2\\n2 3')\n    '2 9 8 7 6 5'\n    >>> solution('3 2\\n0 0\\n1 0')\n    '01 10'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    prefectures = [0] * n\n    cities = [0] * n\n    for i in range(m):\n        prefecture, year = map(int, stdin.split())\n        prefectures[prefecture] += 1\n        cities[prefecture] += year\n    prefectures = [prefecture + '0' * (6 - prefectures[prefecture]) + str(index + 1) for index, prefecture in enumerate(prefectures)]\n    cities = [city + '0' * (6 - len(str(cities[index]))) + str(index + 1) for index, city in enumerate(cities)]\n    return '\\n'.join(cities)\n"
    },
    {
        "number": 4131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    prefectures, cities = [], []\n    for i in range(n):\n        p, y = stdin.readline().split()\n        prefectures.append(p)\n        cities.append(y)\n    for i in range(m):\n        print(''.join([prefectures[j][:6] + cities[j][:6] for j in range(n)]).ljust(12, '0'))\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    alive = set()\n    min_health = float('inf')\n    for i in range(n):\n        alive.add(i+1)\n    while len(alive) > 1:\n        target = alive.pop()\n        for i in alive:\n            attack = random.choice(tuple(alive))\n            a[target-1] -= a[attack-1]\n            if a[target-1] <= min_health:\n                min_health = a[target-1]\n                break\n    print(min_health)\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, arr = int(stdin.readline()), list(map(int, stdin.readline().split()))\n    for _ in range(N):\n        arr[arr.index(max(arr))] = arr[arr.index(max(arr))] - max(arr)\n    return max(arr)\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\n    N - number of monsters\n    A_i - current health of monster i\n    \"\"\"\n    N, *A = map(int, stdin.split())\n\n    # -1 since we don't count the monster with the lowest health as alive\n    min_health = min(A) - 1\n    while N > 1:\n        # find the indexes of the two monsters that are alive\n        idx1 = A.index(min_health)\n        idx2 = A.index(min_health, idx1 + 1)\n\n        # the health of monster 1 is reduced by the health of monster 2\n        A[idx1] -= A[idx2]\n        if A[idx1] <= 0:\n            min_health = min_health + A[idx1]\n            # the index of the monster with the lowest health\n            min_health_idx = idx1\n        else:\n            # the index of the monster with the second lowest health\n            min_health_idx = idx1 + 1\n\n        # the health of monster 2 is reduced by the health of monster 1\n        A[idx2] -= A[min_health_idx]\n        if A[idx2] <= 0:\n            # if the monster with the second lowest health is dead, the monster with the lowest health dies\n            min_health = A[idx2] + min_health\n            min_health_idx = idx2\n        else:\n            # otherwise, the monster with the second lowest health dies\n            min_health = A[min_health_idx]\n            min_health_idx = min_health_idx + 1\n\n        # only the living monsters attack each other\n        A = [health for i, health in enumerate(A) if i!= min_health_idx]\n        N = len(A)\n\n    return min_health\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  # Write your code here\n  tokens = stdin.split()\n  N = int(tokens[0])\n  A = [int(token) for token in tokens[1:]]\n  healths = [A[0]]\n  for h in A:\n    healths.append(h - healths[-1])\n  return str(min(healths[1:]))\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    \n    # keep on attacking until there is only one alive monster\n    while len(a) > 1:\n        # choose random monster to attack\n        i = randint(0, len(a) - 1)\n        # reduce its health by the current health\n        a[i] -= a[i]\n    return str(a[0])\n    \n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    res = a[0]\n    for i in range(1, n):\n        res = max(res - a[i], a[i])\n    return res\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    A = [int(x) for x in stdin[1].split()]\n    A.sort()\n    low = 0\n    high = A[N - 1]\n    \n    while low <= high:\n        mid = low + (high - low) // 2\n        curr_health = 0\n        for x in A:\n            curr_health += max(0, x - mid)\n        if curr_health <= 1:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return high\n"
    },
    {
        "number": 4132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum possible final health of the last monster alive.\"\"\"\n    return str(1)\n\"\"\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        pass\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    g = stdin\n    s = []\n    i = 0\n    while i < len(g):\n        c = g[i]\n        if c == ':':\n            i += 1\n            if i < len(g) and g[i] == '-':\n                i += 1\n                while i < len(g) and g[i]!= '>':\n                    i += 1\n            elif i < len(g) and g[i] == '<':\n                i += 1\n                while i < len(g) and g[i]!= '<':\n                    i += 1\n        elif c == '<':\n            s.append(c)\n        elif c == '>':\n            s.append(c)\n        i += 1\n\n    j = 0\n    n = len(s)\n    while j < n:\n        if s[j] == '<':\n            if j + 2 < n and s[j + 1] == '-' and s[j + 2] == '<':\n                s[j] = '-'\n                s[j + 1] = '-'\n                j += 1\n        j += 1\n\n    # print(s)\n\n    # s = sorted(s)\n    # print(s)\n\n    return ''.join(s)\n\nsolution(\n\"?(____/___+___-___):-___>__.__<__,___<____,____<_____,_____<______,______<_______.__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<__,__<"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    golorp = stdin\n    # https://stackoverflow.com/questions/739096/transform-string-into-a-list-of-integers\n    golorp = [int(d) for d in golorp]\n    golorp = sorted(golorp)\n    if golorp[0] == 0:\n        return 'false'\n    else:\n        result = ''\n        for i in golorp:\n            result += str(i)\n        return result\n\nprint(solution('?(____/_____):-__>__,_____<__.?(______/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.'))"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'false'\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()[0]\n    print(line)\n    line = line[1:-1]\n    print(line)\n    line = line.replace(\"(\",\"[\")\n    line = line.replace(\")\",\"]\")\n    print(line)\n    line = line.split(\",\")\n    print(line)\n    var = 0\n    v = 0\n    g = []\n    while var < len(line):\n        if line[var].startswith(\"(\"):\n            if line[var+1] == \"(\":\n                v = int(line[var+2])\n            elif line[var+1] == \"[\":\n                v = int(line[var+2])\n                v = v+1\n            elif line[var+1] == \")\":\n                v = int(line[var+2])\n                v = v-1\n            elif line[var+1] == \"]\":\n                v = int(line[var+2])\n                v = v-1\n            elif line[var+1] == \"+\":\n                v = int(line[var+2])\n                v = v+1\n            elif line[var+1] == \"-\":\n                v = int(line[var+2])\n                v = v-1\n            g.append(v)\n            var = var + 2\n        else:\n            g.append(int(line[var]))\n            var += 1\n    print(g)\n    g = sorted(g)\n    return g\n\n\nprint(solution(\">(0+1+1)(0+1+0)(0+1+1)<\"))\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find lexicographically smallest possible sequence that\n    can feed the Golorp.\n    \"\"\"\n    golorp_name = stdin.strip()\n\n    print(golorp_name)\n    return ''\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # \u0440\u0435\u0448\u0438\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0438\u043d\u0438\u0438\n    # \u0438 \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u043f\u0443\u0441\u0442\u043e\u0439\n    # \u0443\u0431\u0435\u0434\u0438\u043c\u0441\u044f, \u0447\u0442\u043e \u043e\u043d \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n    # \u0438 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043c \u0438\u0445 \u043a \u0432\u0438\u0434\u0443, \u043a\u0430\u043a \u0432 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0443\n    # \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0435\u0435 \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b\n    # \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430\n    # \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a\u0430\u043a \u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430\n\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043b\u0438\u043d\u0438\u0438\n    # \u0440\u0435\u0448\u0430\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u043e \u0433\u043e\u043b\u043e\u0432\u043e\u043a, \u043a"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Glorps can get hungry and eat letters,\n    so we take the whole line as a list of letters\n    \"\"\"\n    line = list(stdin)\n\n    \"\"\"\n    If the input is not 'true' or 'false'\n    just return it\n    \"\"\"\n    if line[0]!= '?':\n        return line\n\n    \"\"\"\n    We save the list of names\n    \"\"\"\n    names = []\n\n    \"\"\"\n    From the list of names we create\n    a dictionary\n    \"\"\"\n    for name in line[1:]:\n        names.append(name)\n\n    \"\"\"\n    Now we find the dictionary keys\n    which are the names\n    \"\"\"\n    keys = list(names)\n\n    \"\"\"\n    Next we make a dictionary\n    of numbers\n    \"\"\"\n    numbers = {}\n    for i in range(len(keys)):\n        numbers[keys[i]] = str(i)\n\n    \"\"\"\n    Now we make a list of the dictionary keys\n    \"\"\"\n    keys = list(numbers.keys())\n\n    \"\"\"\n    The same as keys, but with numbers\n    \"\"\"\n    numbers = list(numbers.values())\n\n    \"\"\"\n    We need a number of variables\n    which is the length of the\n    keys list\n    \"\"\"\n    num_variables = len(keys)\n\n    \"\"\"\n    We have to return a list of numbers\n    the same length as the keys list\n    \"\"\"\n    result = list(numbers)\n\n    \"\"\"\n    Now we go through the keys list\n    \"\"\"\n    for i in range(num_variables):\n        if '_' in keys[i]:\n            \"\"\"\n            If we have '_' we can get\n            the indexes of the letters\n            \"\"\"\n            indexes = [keys[i].index('_'), keys[i].index('>'), keys[i].index('<')]\n\n            \"\"\"\n            Now we go through the indexes\n            and add the appropriate number\n            to the result list\n            \"\"\"\n            for j in range(3):\n                if indexes[j] == 0:\n                    result[i] = str(int(result[i]) - 1)\n\n                elif indexes[j] == 1:\n                    result[i] = str(int(result[i]) + 1)\n\n        else:\n            result[i] = str(int(numbers[i]) + 1)\n\n    \"\"\"\n    We return the result\n    list as a string\n    \"\"\"\n    return ''.join(result)\n"
    },
    {
        "number": 4133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    golorp_name = stdin\n    golorp_name_modified = golorp_name.replace('(', '+').replace(')', '-').replace('\\'', '_')\n\n    # print(golorp_name_modified)\n\n    golorp_name_modified_list = golorp_name_modified.split(',')\n\n    # print(golorp_name_modified_list)\n\n    min_value_golorp = min(golorp_name_modified_list, key=len)\n\n    # print(min_value_golorp)\n\n    # print(len(min_value_golorp))\n\n    if len(min_value_golorp) <= 2:\n        return False\n\n    golorp_name_modified_list_modified = list()\n\n    for element in golorp_name_modified_list:\n        if len(element) > 2:\n            golorp_name_modified_list_modified.append(element)\n\n    # print(golorp_name_modified_list_modified)\n\n    max_value_golorp = max(golorp_name_modified_list_modified)\n\n    # print(max_value_golorp)\n\n    if max_value_golorp.isdigit():\n        return False\n\n    # print(len(golorp_name_modified_list_modified))\n\n    max_value_list = list()\n    for element in golorp_name_modified_list_modified:\n        for i in range(len(element)):\n            if element[i].isdigit():\n                max_value_list.append(element[i])\n\n    max_value_list_modified = list()\n\n    for element in max_value_list:\n        if element.isdigit():\n            max_value_list_modified.append(element)\n\n    # print(max_value_list_modified)\n\n    min_value_max = min(max_value_list_modified)\n\n    # print(min_value_max)\n\n    if len(max_value_list_modified) <= 2:\n        return False\n\n    # print(len(max_value_list_modified))\n\n    if max_value_max.isdigit():\n        return False\n\n    # print(max_value_max)\n\n    if len(golorp_name_modified_list_modified) == 1:\n        return False\n\n    if len(min_value_max) == 1:\n        return False\n\n    if len(min_value_max) == 2:\n        return '0' + min_value_max\n\n    if len(min_value_max) == 3:\n        return '0' + min_value_max[0] + min_value_max[1]\n\n    return min_value_max[0] + min_value_max[1] + min_value_max[2]\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(m, n, k):\n        return binomial_coefficient(m, n) * binomial_coefficient(n, k) % MOD\n\n    def binomial_coefficient(m, n):\n        if m == 0 or n == 0:\n            return 1\n        if m == 1 or n == 1:\n            return m\n        return binomial_coefficient(m - 1, n - 1) + binomial_coefficient(m - 1, n)\n\n    n, m, k = list(map(int, stdin.readline().split()))\n    m, n, k = m - 1, n - 1, k ^ m\n\n    return solve(m, n, k)\nprint(solution(stdin))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n        Find the number of paths from the upper-left cell (1, 1) to the bottom-right cell (n, m)\n        meeting the following constraints:\n        You can move to the right or to the bottom only.\n        Formally, from the cell (i, j) you may move to the cell (i, j + 1) or to the cell (i + 1, j).\n        The target cell can't be outside of the grid.\n        The xor of all the numbers on the path from the cell (1, 1) to the cell (n, m) must be equal to k.\n    \"\"\"\n    (n, m, k) = [int(s) for s in stdin.split(\"\\n\")[0].split(\" \")]\n    grid = [\n        [int(s) for s in stdin.split(\"\\n\")[i].split(\" \")]\n        for i in range(1, n + 1)\n    ]\n    memo = {}\n    paths = dfs(1, 1, n, m, grid, k, memo)\n    return str(paths)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split(' ')\n    n, m, k = int(n), int(m), int(k)\n    grid = []\n    for i in range(n):\n        grid.append(stdin.split('\\n')[i].split(' '))\n\n    row_len = len(grid[0])\n    col_len = len(grid)\n    dp = [[0] * (row_len) for _ in range(col_len)]\n    dp[0][0] = 1\n\n    for row in range(1, col_len):\n        for col in range(row_len):\n            if col == 0:\n                dp[row][col] = dp[row - 1][col] if grid[row - 1][col]!= '0' else 0\n            else:\n                dp[row][col] = dp[row - 1][col] + (dp[row - 1][col - 1] if grid[row - 1][col]!= '0' else 0)\n\n    return str(dp[col_len - 1][row_len - 1])\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    n, m, k = map(int, stdin.split())\n\n    # \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n    lst = []\n    # \u043f\u0440\u0438\u0441\u0432\u0430\u0435\u0432\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u043d\u0434\u0435\u043a\u0441\u0443\n    for i in range(n):\n        lst.append(list(map(int, stdin.split())))\n\n    # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0439 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b\n    x = 0\n    # \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b\n    y = 0\n\n    def DFS(x, y, lst):\n        if x >= n or y >= m:\n            return 0\n        if x == n - 1 and y == m - 1:\n            return 1\n        if x < n and y < m:\n            if lst[x][y] > 0:\n                return 0\n            else:\n                sum = DFS(x + 1, y, lst) + DFS(x, y + 1, lst)\n                lst[x][y] = sum\n                return sum\n    print(DFS(x, y, lst))\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # \u6392\u5217\u7d44\u5408\n    n, m, k = map(int, stdin.readline().split())\n    grid = [[int(i) for i in stdin.readline().split()] for _ in range(n)]\n    s = 0\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            s ^= grid[i][j]\n    for i in range(n):\n        for j in range(m):\n            s ^= grid[i][j]\n            if s == k:\n                ans += 1\n    return ans\n\"\"\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    \n"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(find_number_of_paths(\n        int(stdin.split()[0]),\n        int(stdin.split()[1]),\n        int(stdin.split()[2]),\n    ))\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    m, k = int(m), int(k)\n\n    dp = [0 for _ in range(k + 1)]\n    dp[0] = 1\n\n    for num in range(1, k + 1):\n        dp[num] = dp[num - 1]\n        for i in range(m):\n            if num - stdin[i * m + i + 1] >= 0:\n                dp[num] += dp[num - stdin[i * m + i + 1]]\n\n    print(dp[-1])\n    return \"\"\n\nsolution(\"3 3 11\")\n\n3\nsolution(\"3 4 2\")\n5\nsolution(\"3 4 1000000000000000000\")\n0\n\n\n\n=======\n\nclass Node:\n    def __init__(self, key):\n        self.key = key\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, key):\n        new_node = Node(key)\n        if self.head is None:\n            self.head = new_node\n            return\n        curr = self.head\n        while curr.next is not None:\n            curr = curr.next\n        curr.next = new_node\n\n    def print_list(self):\n        curr = self.head\n        while curr:\n            print(curr.key, end=\"->\")\n            curr = curr.next\n        print()\n\n    def remove_dups(self):\n        hash_map = dict()\n        curr = self.head\n        while curr:\n            if hash_map.get(curr.key):\n                curr = curr.next\n                self.head = curr\n            else:\n                hash_map[curr.key] = True\n                curr = curr.next\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    len_t = int(stdin[0])\n    t = stdin[1]\n    pass"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    text = stdin[1]\n    index = 0\n    while True:\n        if index >= length:\n            break\n        if index == length - 1:\n            break\n        if text[index] == text[index+1]:\n            if index!= 0 and text[index] == text[index-1]:\n                index += 1\n                continue\n            for j in range(index+1, length-1):\n                if text[j] == text[j+1]:\n                    index += 1\n                    continue\n                elif text[j]!= text[j+1]:\n                    break\n            if j == length-2:\n                break\n        index += 1\n\n    result = \"\"\n    for i in range(length):\n        if index+i < length:\n            result += text[index+i]\n        if index+i == length:\n            break\n    return result\n\"\"\""
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return 'z'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return stdin\n"
    },
    {
        "number": 4135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: str\n    :return: str\n    \"\"\"\n    return \"\"\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0] + stdin.split()[1]\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(a + b)\n\n----\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(' ')"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    return a + b"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0]) + int(stdin.split()[1]))\n    \n"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\nfrom itertools import product\nimport sys\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nTo get the results of the Brainfuck program, run it through the Brainfuck interpreter (provided in the problem statement).\n\nDo not remove any unnecessary whitespace.\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We do not modify the original source code of the interpreter.\n    \"\"\"\n    stdin = stdin.replace(' ', '').replace('\\n', '')\n    pointer = 0\n    memory = [0] * 30000\n    stack = []\n    for cmd in stdin:\n        if cmd == '+':\n            memory[pointer] += 1\n            if memory[pointer] > 255:\n                memory[pointer] = 0\n            pointer += 1\n        elif cmd == '-':\n            memory[pointer] -= 1\n            if memory[pointer] < 0:\n                memory[pointer] = 255\n            pointer += 1\n        elif cmd == '>':\n            pointer += 1\n            if pointer == len(memory):\n                memory.append(0)\n        elif cmd == '<':\n            pointer -= 1\n            if pointer < 0:\n                pointer = 0\n        elif cmd == '.':\n            print(chr(memory[pointer]), end='')\n        elif cmd == ',':\n            memory[pointer] = ord(stdin[cnt])\n            pointer += 1\n        elif cmd == '[':\n            if memory[pointer] == 0:\n                cnt = 1\n                while cnt!= 0:\n                    tmp = stdin[cnt]\n                    cnt += 1\n                    if tmp == '[':\n                        cnt += 1\n                    elif tmp == ']':\n                        cnt -= 1\n                    elif tmp == '.':\n                        print(chr(memory[pointer]), end='')\n                    elif tmp == ',':\n                        memory[pointer] = ord(stdin[cnt])\n                        cnt += 1\n                        pointer += 1\n                    elif tmp == '+':\n                        memory[pointer] += 1\n                        if memory[pointer] > 255:\n                            memory[pointer] = 0\n                        pointer += 1\n                    elif tmp == '-':\n                        memory[pointer] -= 1\n                        if memory[pointer] < 0:\n                            memory[pointer] = 255\n                        pointer += 1\n                    elif tmp == '>':\n                        pointer += 1\n                        if pointer == len(memory):\n                            memory.append(0)\n                    elif tmp == '<':\n                        pointer -= 1\n                        if pointer < 0:\n                            pointer = 0\n        elif cmd == ']':\n            if memory[pointer]!= 0:\n                cnt = 1\n                while cnt!= 0:\n                    tmp = stdin[cnt]\n                    cnt += 1\n                    if tmp == '[':\n                        cnt += 1\n                    elif tmp == ']':\n                        cnt -= 1\n                    elif tmp == '.':\n                        print(chr(memory[pointer]), end='')\n                    elif tmp == ',':\n                        memory[pointer] = ord(stdin[cnt])\n                        cnt += 1\n                        pointer += 1\n                    elif tmp == '+':\n                        memory[pointer] += 1\n                        if memory[pointer] > 255:\n                            memory[pointer] = 0\n                        pointer += 1\n                    elif tmp == '-':\n                        memory[pointer] -= 1\n                        if memory[pointer] < 0:\n                            memory[pointer] = 255\n                        pointer += 1\n                    elif tmp == '>':\n                        pointer += 1\n                        if pointer == len(memory):\n                            memory.append(0)\n                    elif tmp == '<':\n                        pointer -= 1\n                        if pointer < 0:\n                            pointer = 0\n    return ''"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.split('\\n')\n    return \"\".join([\n        \"++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>>+.>.\" + '\\n',\n        \"++++++++++++[>++++++++++[>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>>+.>.\" + '\\n',\n        \"+++++++++++++++.[-]>.+++.>.\" + '\\n',\n        \"++++++++++++++[-]>++.>.\" + '\\n',\n        \"+++++[-]>+.\" + '\\n',\n        \"+++[-]>+.\" + '\\n',\n        \"+.>.\" + '\\n',\n        \"++.\" + '\\n',\n        \"..\" + '\\n',\n        \".\" + '\\n',\n        \"...\"\n    ][int(result[0])])\n----\n>>> for i in range(len(solution(\"2+3\"))):\n    print(solution(\"2+3\")[i:i+1])\n++++>\n++.>\n.>\n>>> \n----\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport sys\nimport numpy as np\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(stdin.split())"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(stdin.split('\\n'), key=lambda x: int(x[0])))\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise\"\"\"\n    # Put your solution here\n    # pass\n    # Replace pass above with your code\n    return '\\n'.join(str(int(stdin[int(num)-1])) for num in stdin)\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of Shichi-Go-San numbers between 1 and N (inclusive)\n    \"\"\"\n    return str(sum(1 for i in range(1, int(stdin) + 1) if is_shichi_go_san(i)))\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = set(i for i in range(1, N + 1) if '7' in str(i) or '5' in str(i) or '3' in str(i) and '7' not in str(i) and '5' not in str(i) and '3' not in str(i))\n    return str(len(a))\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(1 for i in range(1, n + 1) if '7' in str(i) + str(i * 3) + str(i * 5)))"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seven, five, three = 0, 0, 0\n    while n > 0:\n        seven += n % 10 == 7\n        five += n % 10 == 5\n        three += n % 10 == 3\n        n = n // 10\n    seven_five_three = seven * five * three\n    return seven_five_three\n\"\"\"\n\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = int(s)\n    cnt = 0\n    for i in range(1, s + 1):\n        n = str(i)\n        t = []\n        for ch in n:\n            if ch in '75':\n                t.append(ch)\n        if len(set(t)) == 3:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seven_count, five_count, three_count = 0, 0, 0\n    seven_cache = [False for _ in range(n + 1)]\n    five_cache = [False for _ in range(n + 1)]\n    three_cache = [False for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        seven_cache[i] = seven_count > 0 or seven_count > 2\n        five_cache[i] = five_count > 0 or five_count > 1\n        three_cache[i] = three_count > 0 or three_count > 1\n        if i % 7 == 0:\n            seven_count += 1\n            five_count = 0\n            three_count = 0\n        elif i % 5 == 0:\n            five_count += 1\n            three_count = 0\n        elif i % 3 == 0:\n            three_count += 1\n        else:\n            seven_count = 0\n            five_count = 0\n            three_count = 0\n    seven_count -= one_count\n    five_count -= one_count\n    three_count -= one_count\n    seven_count = n - seven_count\n    five_count = n - five_count\n    three_count = n - three_count\n    return f'{seven_count} {five_count} {three_count}'\n"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for number in range(1, int(stdin) + 1):\n        if is_shichi_go_san(number):\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the amount of Shichi-Go-San numbers between 1 and N (inclusive).\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if '7' in str(i) or '5' in str(i) or '3' in str(i):\n            count += 1\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(list(filter(lambda num: num == str(num), range(1, int(stdin)+1)))))"
    },
    {
        "number": 4139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of Shichi-Go-San numbers between 1 and N (inclusive)\"\"\"\n    n = int(stdin.readline())\n    count = 0\n    for num in range(1, n + 1):\n        s = str(num)\n        seven = False\n        five = False\n        three = False\n        for i in s:\n            if i == \"7\":\n                seven = True\n            elif i == \"5\":\n                five = True\n            elif i == \"3\":\n                three = True\n        if seven and five and three:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('1')\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  # Your code here\n  return \"\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    string_list = list(input_list[0])\n    ans = 0\n    for i in range(len(string_list)):\n        if i % 2 == 0:\n            if string_list[i] == '0':\n                string_list[i] = '1'\n                ans += 1\n            else:\n                string_list[i] = '0'\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S: List[str] = [char for char in stdin]\n    N: int = len(S)\n    color: int = 0\n    count: int = 0\n    for char in S:\n        if char == \"1\":\n            color ^= 1\n        count += 1\n        if count == 2:\n            count = 0\n            if color == 0:\n                color ^= 1\n    return color\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 0 if n % 2 else 1"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return stdin.replace('0', '1').replace('1', '0')\n\nprint(solution(input()))\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"000\")\n    1\n    \"\"\"\n    return f\"The minimum number of tiles that need to be repainted to satisfy the condition. {int(stdin.count('1') % 2 == 0)}\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n):\n        if stdin[i] == '0':\n            count += 1\n    return count\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    numbers = [int(s.strip()) for s in stdin.readline().split(' ')]\n    \n    for num in numbers:\n        if num % 2 == 0 and num % 3!= 0 and num % 5!= 0:\n            return 'DENIED'\n    \n    return 'APPROVED'\n    \n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(' ')]\n    for x in arr:\n        if x % 2 == 0:\n            if x % 3 == 0 or x % 5 == 0:\n                print('APPROVED')\n            else:\n                print('DENIED')\n        else:\n            print('APPROVED')\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    even_num = 0\n    for x in a:\n        if x % 2 == 0:\n            even_num += 1\n    if even_num == 0:\n        return \"APPROVED\"\n    if even_num % 2 == 0:\n        if any(x % 3 == 0 for x in a):\n            return \"APPROVED\"\n        if any(x % 5 == 0 for x in a):\n            return \"APPROVED\"\n    else:\n        if any(x % 3 == 0 for x in a):\n            return \"APPROVED\"\n        if any(x % 5 == 0 for x in a):\n            return \"APPROVED\"\n    return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = stdin.split(' ')\n    A = [int(i) for i in A]\n    B = [str(i) for i in A if i%2==0]\n    if len(B)==0:\n        return 'DENIED'\n    B =''.join(B)\n    return B\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n:param str: stdin.readline().rstrip()\n:return: stdout.write()\n\"\"\"\nimport sys\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"\"\n    input_list = stdin.split(\"\\n\")\n    n = int(input_list[0])\n    input_list = input_list[1].split(\" \")\n    input_list = [int(i) for i in input_list]\n    for x in input_list:\n        if x % 2 == 0 and (x % 3 == 0 or x % 5 == 0):\n            ans = \"APPROVED\"\n        else:\n            ans = \"DENIED\"\n            break\n    return ans\n\"\"\"\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    for a in A:\n        if a % 2 == 0 and (a % 3!= 0 or a % 5!= 0):\n            return \"DENIED\"\n    return \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    [n] = [int(x) for x in stdin.split('\\n')]\n    [a] = [int(x) for x in stdin.split()]\n\n    # check numbers\n    res = 'APPROVED' if all(x % 2 == 0 for x in a) and all(x % 3 == 0 or x % 5 == 0 for x in a) else 'DENIED'\n\n    # output\n    print(res)"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    n = int(x[0])\n    a = [int(i) for i in x[1:]]\n    for i in a:\n        if i % 2 == 0 and (i % 3 == 0 or i % 5 == 0):\n            print('APPROVED')\n            continue\n        print('DENIED')\n"
    },
    {
        "number": 4141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n    a: List[int] = [int(stdin.readline()) for i in range(n)]\n    return \"APPROVED\" if all(x % 2 == 0 for x in a) else \"DENIED\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    right = set(['D', 'R'])\n    left = set(['U', 'L'])\n    sequence = stdin[0]\n    for s in sequence:\n        if s in right:\n            if s in left:\n                return 'No'\n        if s in left:\n            if s in right:\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    L_count = R_count = U_count = D_count = 0\n    for i in S:\n        if i == \"L\":\n            L_count += 1\n        elif i == \"R\":\n            R_count += 1\n        elif i == \"U\":\n            U_count += 1\n        else:\n            D_count += 1\n    if L_count % 2 == 0 and U_count % 2 == 0 and R_count % 2 == 0 and D_count % 2 == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin) > 1:\n        for i in range(1, len(stdin), 2):\n            if stdin[i] not in ('L', 'R', 'U', 'D'):\n                return 'No'\n        for i in range(0, len(stdin), 2):\n            if stdin[i] not in ('L', 'R', 'U', 'D'):\n                return 'No'\n    else:\n        return 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'Yes' if all(\n        (\n            lambda i:\n                'R' if i % 2 == 0 else 'U' if i % 2 == 1 else 'L' if i % 2 == 0 else 'D'\n                if i % 2 == 1 else None\n        )(i)\n        for i in range(len(stdin))\n    ) else 'No'\n    return answer\n\n\nprint(solution(stdin), end='')\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.count('L') == stdin.count('R') and stdin.count('U') == stdin.count('D') and stdin.count('R') + stdin.count('U') == stdin.count('D') + stdin.count('L') else \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if string.count(\"L\") == len(string) or string.count(\"R\") == len(string) or string.count(\"U\") == len(string) or string.count(\"D\") == len(string):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    L_count = stdin.count('L')\n    R_count = stdin.count('R')\n    U_count = stdin.count('U')\n    D_count = stdin.count('D')\n    if L_count!= R_count or R_count!= U_count or U_count!= D_count or L_count!= D_count:\n        return 'No'\n    else:\n        L_index = stdin.find('L')\n        R_index = stdin.find('R')\n        U_index = stdin.find('U')\n        D_index = stdin.find('D')\n        L_step = L_index - 1\n        R_step = R_index - 1\n        U_step = U_index - 1\n        D_step = D_index - 1\n        L_step_list = []\n        R_step_list = []\n        U_step_list = []\n        D_step_list = []\n        L_step_list.append(L_index)\n        R_step_list.append(R_index)\n        U_step_list.append(U_index)\n        D_step_list.append(D_index)\n        for step in stdin[1:]:\n            L_step = L_step - 1\n            R_step = R_step - 1\n            U_step = U_step - 1\n            D_step = D_step - 1\n            if step == 'L':\n                L_step_list.append(L_step)\n                R_step_list.append(R_step)\n                U_step_list.append(U_step)\n                D_step_list.append(D_step)\n            elif step == 'R':\n                L_step_list.append(L_step)\n                R_step_list.append(R_step)\n                U_step_list.append(U_step)\n                D_step_list.append(D_step)\n            elif step == 'U':\n                L_step_list.append(L_step)\n                R_step_list.append(R_step)\n                U_step_list.append(U_step)\n                D_step_list.append(D_step)\n            else:\n                L_step_list.append(L_step)\n                R_step_list.append(R_step)\n                U_step_list.append(U_step)\n                D_step_list.append(D_step)\n        for step in stdin[1:]:\n            if L_step_list.count(L_step) == 1 and R_step_list.count(R_step) == 0 and U_step_list.count(U_step) == 0 and D_step_list.count(D_step) == 0:\n                L_step = L_step - 1\n                R_step = R_step - 1\n                U_step = U_step - 1\n                D_step = D_step - 1\n                L_step_list.append(L_step)\n                R_step_list.append(R_step)\n                U_step_list.append(U_step)\n                D_step_list.append(D_step)\n            elif R_step_list.count(R_step) == 1 and L_step_list.count(L_step) == 0 and U_step_list.count(U_step) == 0 and D_step_list.count(D_step) == 0:\n                L_step = L_step - 1\n                R_step = R_step - 1\n                U_step = U_step - 1\n                D_step = D_step - 1\n                L_step_list.append(L_step)\n                R_step_list.append(R_step)\n                U_step_list.append(U_step)\n                D_step_list.append(D_step)\n            elif U_step_list.count(U_step) == 1 and L_step_list.count(L_step) == 0 and R_step_list.count(R_step) == 0 and D_step_list.count(D_step) == 0:\n                L_step = L_step - 1\n                R_step = R_step - 1\n                U_step = U_step - 1\n                D_step = D_step - 1\n                L_step_list.append(L_step)\n                R_step_list.append(R_step)\n                U_step_list.append(U_step)\n                D_step_list.append(D_step)\n            elif D_step_list.count(D_step) == 1 and L_step_list.count(L_step) == 0 and R_step_list.count(R_step) == 0 and U_step_list.count(U_step) == 0:\n                L_step = L_step - 1\n                R_step = R_step - 1\n                U_step = U_step - 1\n                D_step = D_step - 1\n                L_step_list.append(L_step)\n                R_step_list.append(R_step)\n                U_step_list.append(U_step)\n                D_step_list.append(D_step)\n            else:\n                return 'No'\n        return 'Yes'"
    },
    {
        "number": 4142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    @param stdin: The input string.\n    @return: Yes if S is easily playable, and No otherwise.\n    '''\n    # Get the input string.\n    input_str = stdin\n\n    # Initialize the answer.\n    answer = ''\n\n    # Loop through all the characters in the input string.\n    for i in range(len(input_str)):\n        # If the character is not R, U, or D, then the answer is No.\n        if input_str[i]!= 'R' and input_str[i]!= 'U' and input_str[i]!= 'D':\n            answer = 'No'\n            break\n    # Loop through all the characters in the input string.\n    for j in range(len(input_str)):\n        # If the character is not L, U, or D, then the answer is No.\n        if input_str[j]!= 'L' and input_str[j]!= 'U' and input_str[j]!= 'D':\n            answer = 'No'\n            break\n    # Loop through all the characters in the input string.\n    for k in range(len(input_str)):\n        # If the character is not R, U, or D, then the answer is No.\n        if input_str[k]!= 'R' and input_str[k]!= 'U' and input_str[k]!= 'D':\n            answer = 'No'\n            break\n    # Return the answer.\n    return answer"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    A, B, C, D, E = list(map(int, stdin.split()))\n\n    answer = 0\n\n    while T > 0:\n        if T - E >= 0:\n            T -= E\n            answer += E\n        elif T - D >= 0:\n            T -= D\n            answer += D\n        elif T - C >= 0:\n            T -= C\n            answer += C\n        elif T - B >= 0:\n            T -= B\n            answer += B\n        elif T - A >= 0:\n            T -= A\n            answer += A\n        else:\n            answer += T\n            T = 0\n\n    return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Input\n    N, A, B, C, D, E = map(int, stdin.split())\n    N, A, B, C, D, E = int(N), int(A), int(B), int(C), int(D), int(E)\n    # Solve\n    travel = 0\n    time = 0\n    while N > 0:\n        travel += min(A, N)\n        N -= A\n        travel += min(B, N)\n        N -= B\n        travel += min(C, N)\n        N -= C\n        travel += min(D, N)\n        N -= D\n        travel += min(E, N)\n        N -= E\n        time += travel\n    # Output\n    return str(time)\n\nprint(solution(input()))"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = [int(x) for x in stdin.split()]\n    answer = 0\n    cnt = n\n    train = 0\n    while cnt > 0:\n        if train >= a:\n            train -= a\n            answer += 1\n            if cnt >= b:\n                cnt -= b\n                train += 2\n                answer += 1\n                if cnt >= c:\n                    cnt -= c\n                    train += 2\n                    answer += 1\n                    if d > cnt:\n                        d -= cnt\n                        train += 3\n                        answer += 1\n                    else:\n                        train += cnt\n                        answer += cnt\n                else:\n                    train += c\n                    answer += c\n            else:\n                train += 2\n                answer += 2\n        else:\n            train += 1\n            answer += 1\n        cnt -= 1\n    answer += d\n    return str(answer)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = [int(x) for x in stdin.split('\\n')[:-1]]\n    res = 0\n    for i in range(N):\n        res += (min((A, E))+min((B, C)))*(N-i)\n    print(res)"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My Solution\n    \"\"\"\n    n, a, b, c, d, e = map(int, stdin.split())\n    limit = 100\n    ans = 0\n    if n < 6:\n        if n >= 4:\n            ans = n\n        elif n == 3:\n            ans = b\n        elif n == 2:\n            ans = c\n        elif n == 1:\n            ans = d\n    elif n >= 6:\n        if a > limit:\n            ans = limit * n\n        else:\n            ans = a * n\n    return str(ans)\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 3\n   ... 2\n   ... 4\n   ... 3\n   ... 5\n   ... ''')\n    '7'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, a, b, c, d, e = list(map(int, stdin.split()))\n    train = [a] * n\n    bus = [b] * n\n    taxi = [c] * n\n    airplane = [d] * n\n    ship = [e] * n\n    train.sort()\n    bus.sort()\n    taxi.sort()\n    airplane.sort()\n    ship.sort()\n    ans = 0\n    if len(train) == n:\n        for i in range(n):\n            ans += train[i]\n        return ans\n    if len(train) == 0:\n        for i in range(n):\n            ans += taxi[i]\n        return ans\n    if len(taxi) == 0:\n        for i in range(n):\n            ans += airplane[i]\n        return ans\n    if len(airplane) == 0:\n        for i in range(n):\n            ans += ship[i]\n        return ans\n    if len(ship) == 0:\n        for i in range(n):\n            ans += bus[i]\n        return ans\n    for i in range(n):\n        if i % 2 == 0:\n            ans += train[i // 2]\n        else:\n            ans += bus[i // 2]\n    return ans\n"
    },
    {
        "number": 4143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #input_text = stdin.read()\n    #parsed_input = input_text.split()\n\n    N, A, B, C, D, E = [int(x) for x in stdin.split()]\n    \n    # track of the number of cars at each stop\n    # There's always a car at the start (at time 0)\n    cars_at_stop = [0] * 6\n\n    # Simulate people at stop 1, then 2, then 3...\n    for i in range(1, 6):\n        # number of cars at stop i is the sum of cars at stops i-1 and i\n        cars_at_stop[i] = cars_at_stop[i-1] + A\n        cars_at_stop[i] = min(cars_at_stop[i], B)\n\n    # Simulate people at stop 2, then 3, then 4...\n    for i in range(2, 6):\n        # number of cars at stop i is the sum of cars at stops i-1 and i\n        cars_at_stop[i] = cars_at_stop[i-1] + B\n        cars_at_stop[i] = min(cars_at_stop[i], C)\n\n    # Simulate people at stop 3, then 4, then 5...\n    for i in range(3, 6):\n        # number of cars at stop i is the sum of cars at stops i-1 and i\n        cars_at_stop[i] = cars_at_stop[i-1] + C\n        cars_at_stop[i] = min(cars_at_stop[i], D)\n\n    # Simulate people at stop 4, then 5, then 6...\n    for i in range(4, 6):\n        # number of cars at stop i is the sum of cars at stops i-1 and i\n        cars_at_stop[i] = cars_at_stop[i-1] + D\n        cars_at_stop[i] = min(cars_at_stop[i], E)\n\n    # time to reach stop 6 is the total number of cars at stop 6\n    return str(sum(cars_at_stop[6:]))\n\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    length = int(stdin)\n    dp = [0] * (length + 1)\n    dp[0] = 1\n    for i in range(1,length + 1):\n        dp[i] = (dp[i - 1] + 9 * dp[i - 2]) % (10**9 + 7)\n    print(dp[length])\n    return dp[length]\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    N: int = int(stdin.readline())\n    for i in range(1, 10):\n        if i % 10 == 0:\n            print(0)\n        else:\n            print(1)"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{solution_i(stdin.strip())}\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_completed = 0\n    i = 1\n    while n_completed < n:\n        num = i % 10\n        if num == 0:\n            if n_completed < n:\n                n_completed += 1\n            if n_completed < n:\n                num = 9\n        elif num == 9:\n            if n_completed < n:\n                n_completed += 1\n        else:\n            n_completed += 2\n        i += 1\n    return str(i - 1)\n"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for _ in filter(is_valid, stdin.split('\\n'))))"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(bin(10**n - 1).count(\"1\"))"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    for n in range(number + 1):\n        if n == 1:\n            continue\n        if number % n == 0:\n            break\n    return str(n)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 2:\n        return 'impossible'\n    while not is_prime(X):\n        X += 1\n    return X\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    x = int(stdin)\n    if x < 2:\n        return str(2)\n    elif x == 2:\n        return str(2)\n    prime = [2]\n    i = 3\n    while i < x + 1:\n        if isPrime(i, prime):\n            prime.append(i)\n        i += 2\n    return str(prime[len(prime) - 1])\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum prime number greater than or equal to X.\"\"\"\n    x = int(stdin)\n    if x == 1:\n        return 2\n    primes = get_primes(x)\n    if primes:\n        return primes[-1]\n    else:\n        return x\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            break\n        i += 1\n    return str(i)"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X < 2:\n        return 2\n    max_prime = X ** 0.5 + 1\n    i = 2\n    while i <= max_prime:\n        if X % i == 0:\n            return i\n        i += 1\n    return X\n"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3:\n        return 'n'\n    elif a < 5:\n        return 'n'\n    else:\n        for i in range(2,int(a/2)+1):\n            if a%i==0:\n                return str(i)\n    return str(a)"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1:\n    # min_prime = 2\n    # while stdin:\n    #     n = int(stdin)\n    #     if n > min_prime:\n    #         return str(min_prime)\n    #     if not is_prime(n):\n    #         min_prime = n + 1\n    #     stdin = input()\n    # return str(min_prime)\n\n    # Solution 2:\n    min_prime = 2\n    while stdin:\n        n = int(stdin)\n        if n > min_prime:\n            return str(min_prime)\n        min_prime += 1\n        while not is_prime(min_prime):\n            min_prime += 1\n        stdin = input()\n    return str(min_prime)\n\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return next(i for i in range(x + 1, 2 * x + 1) if is_prime(i))\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num: int = int(stdin)\n    n: int = num + 1\n    for i in range(2, n):\n        if is_prime(i):\n            if i >= num:\n                return i\n\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    dic = dict()\n    for i in range(n-2):\n        if arr[i] in dic.keys():\n            dic[arr[i]] += 1\n        else:\n            dic[arr[i]] = 1\n    c = 0\n    for value in dic.values():\n        if value == 2:\n            c += 1\n    if c > 1:\n        return str(c)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = list(map(int, stdin.readline().split()))\n    #count = 0\n    #for i in range(1, n - 1, 2):\n    #    if v[i] == v[i + 2]:\n    #        count += 1\n    #print(count)\n    \n    \n    \n    \n    # print(count)\n    # print(v[0]!= v[1])\n    \n    if n == 1:\n        print(0)\n        return\n    if v[0]!= v[1]:\n        print(1)\n        return\n    \n    count = 2\n    for i in range(2, n):\n        if v[i] == v[i-2]:\n            count += 1\n        if v[i] == v[i-1]:\n            count += 1\n    \n    print(count)\n    return \n    "
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, *data = stdin.split('\\n')\n    n = int(data[0])\n    data = data[1:]\n    count = 0\n    for i in range(0, len(data)-2, 2):\n        if data[i] == data[i+2]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import Counter\nfrom sys import stdin\n\nn = int(stdin.readline())\nl = [int(stdin.readline()) for i in range(n)]\n\ncounter = Counter(l)\nnum = l[0]\nc = 0\nfor i in counter:\n    if counter[i] == 2:\n        c += 2\n        num = i\n\nprint(c)\n\nprint(l)\nprint(l.count(num))\nprint(l.index(num))\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\"\\n\")\n    n = int(l[0])\n    m = list(map(int, l[1].split()))\n    d = {m[i]: i for i in range(0, len(m))}\n    c = 0\n    for i in range(n-1, 0, -2):\n        if m[i-1] == m[i]:\n            c += 1\n            m[d[m[i]]] = m[i]\n            del m[i]\n    return c\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = [int(c) for c in stdin.readline().split()]\n\n    numbers_count = {}\n    for number in sequence:\n        if number not in numbers_count:\n            numbers_count[number] = 1\n        else:\n            numbers_count[number] += 1\n\n    current_index = 0\n    current_number = sequence[current_index]\n\n    if len(numbers_count) == 2:\n        first_occurrence_index = sequence.index(current_number)\n        current_index = first_occurrence_index + 1\n        current_number = sequence[current_index]\n\n    while current_index < n - 1:\n        if current_number == sequence[current_index + 2]:\n            numbers_count[current_number] -= 1\n            current_index += 2\n        else:\n            numbers_count[current_number] -= 1\n            current_index += 1\n        current_number = sequence[current_index]\n\n    for number, count in numbers_count.items():\n        if count == 1:\n            return f\"{count} \"\n    return \"0\"\n"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    v = [int(c) for c in stdin.readline().split()]\n    # find the number of swaps we need\n    v_set = set(v[0:-2])\n    counter = 0\n    for i in range(1, n - 2):\n        if v[i] == v[i + 2] and v[i] in v_set:\n            v_set.remove(v[i])\n        elif v[i] in v_set:\n            counter += 1\n    print(counter)"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, *seq = map(int, stdin.split())\n    a = []\n    for i in range(0, len(seq), 2):\n        a.append(seq[i])\n    a.sort()\n    b = []\n    for i in range(1, len(a)):\n        if a[i] == a[i - 1]:\n            b.append(a[i])\n    count = 0\n    for i in range(0, len(b)):\n        count += n - 2 - i\n    return str(count)"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    numbers = sorted([int(x) for x in stdin.readline().split()])\n    s = sum([1 for x in numbers if numbers.count(x) == 2])\n    return s"
    },
    {
        "number": 4146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return None"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     \"5 100 90 80\\\\n\"\n   ...     \"98\\\\n\"\n   ...     \"40\\\\n\"\n   ...     \"30\\\\n\"\n   ...     \"21\\\\n\"\n   ...     \"80\\\\n\"\n   ... )\n    '23'\n    \"\"\"\n    _, _, _, _, _, a, b, c = stdin.split(\"\\\\n\")\n    a, b, c = [int(n) for n in [a, b, c]]\n    print(\n        sum(\n            [\n                10,\n                min(a, b) // 10,\n                min(a, c) // 10,\n                min(b, c) // 10,\n                min(a, b, c) // 10,\n            ]\n        )\n    )\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re\n\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = list(map(int, stdin.split(' ')))\n    l = list(map(int, stdin.split('\\n')[:-1]))\n    mp = 0\n    for bb in l:\n        if mp >= a:\n            break\n        elif bb <= a and mp + bb < a:\n            mp += bb\n        elif bb <= a:\n            if mp + bb + b <= a:\n                mp += bb + b\n            else:\n                mp += bb\n        elif bb <= c:\n            if mp + bb + b <= c:\n                mp += bb + b\n            else:\n                mp += bb\n        else:\n            mp += bb\n    return str(mp)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\\n\")\n    23\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the input from stdin and return the minimum amount of MP to achieve the objective.\n\n    :param stdin: The input given from stdin.\n    :type stdin: str\n    :return: The minimum amount of MP to achieve the objective.\n    :rtype: str\n    \"\"\"\n    # Get the input.\n    n, a, b, c = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n\n    # Compute the total cost for a successful combination.\n    cost = 0\n    for i, l_i in enumerate(l):\n        if i == 0:\n            cost += (l_i + a) * 10\n        elif i == 1:\n            cost += (l_i + b) * 10\n        else:\n            cost += (l_i + c) * 10\n            break\n\n    # Compute the minimum cost.\n    minimum = cost\n    for i in range(1, n):\n        cost += b - a + l[i - 1]\n        minimum = min(minimum, cost)\n        cost -= b - a + l[i - 1]\n        if i == n - 1:\n            cost += c - b + l[i]\n\n    return str(minimum)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.strip().split()]\n    magics = [a, b, c]\n    cost = 0\n    bamboo = n\n    while True:\n        bamboo -= 1\n        cost += magics[0]\n        if magics[0] == magics[1]:\n            magics[1] = magics[2]\n        magics[0] = magics[1] - 1\n        if magics[0] == 1:\n            cost += 10\n            magics[0] = a\n        if bamboo == 0:\n            break\n        bamboo -= 1\n        cost += magics[1]\n        if magics[1] == magics[2]:\n            magics[2] = magics[0]\n        magics[1] = magics[2] - 1\n        if magics[1] == 1:\n            cost += 10\n            magics[1] = b\n        if bamboo == 0:\n            break\n        bamboo -= 1\n        cost += magics[2]\n        if bamboo == 0:\n            break\n        bamboo -= 1\n        cost += magics[0]\n        if bamboo == 0:\n            break\n    return cost\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # lines = stdin.split('\\n')\n    # input = []\n    # for line in lines:\n    #     if line.strip():\n    #         input.append(line)\n    # N, A, B, C = [int(i) for i in input[0].split(' ')]\n    # l = [int(i) for i in input[1:]]\n    # print(N, A, B, C)\n    # print(l)\n    # l_dict = dict()\n    # for i in range(1, N+1):\n    #     l_dict[i] = l[i-1]\n    # print(l_dict)\n    # l_dict = sorted(l_dict.items(), key=lambda x: x[1])\n    # print(l_dict)\n    # mp_cost = 0\n    # # for i in l_dict:\n    # #     if mp_cost < C:\n    # #         if mp_cost + 10 >= C:\n    # #             return '{}'.format(mp_cost)\n    # #         elif mp_cost + 10 < C:\n    # #             mp_cost += 10\n    # #     if mp_cost < B:\n    # #         if mp_cost + 10 >= B:\n    # #             return '{}'.format(mp_cost)\n    # #         elif mp_cost + 10 < B:\n    # #             mp_cost += 10\n    # #     if mp_cost < A:\n    # #         if mp_cost + 10 >= A:\n    # #             return '{}'.format(mp_cost)\n    # #         elif mp_cost + 10 < A:\n    # #             mp_cost += 10\n    # # return '{}'.format(mp_cost)\n    # for i in l_dict:\n    #     if mp_cost < C:\n    #         if mp_cost + 10 >= C:\n    #             return '{}'.format(mp_cost)\n    #         elif mp_cost + 10 < C:\n    #             mp_cost += 10\n    #     if mp_cost < B:\n    #         if mp_cost + 10 >= B:\n    #             return '{}'.format(mp_cost)\n    #         elif mp_cost + 10 < B:\n    #             mp_cost += 10\n    #     if mp_cost < A:\n    #         if mp_cost + 10 >= A:\n    #             return '{}'.format(mp_cost)\n    #         elif mp_cost + 10 < A:\n    #             mp_cost += 10\n    # return '{}'.format(mp_cost)\n\n    # Your code here!\n    from collections import defaultdict\n    mp_cost = 0\n    l_dict = defaultdict(int)\n    for i in range(1, N+1):\n        l_dict[i] = l[i-1]\n    l_dict = sorted(l_dict.items(), key=lambda x: x[1])\n    print(l_dict)\n    for i in l_dict:\n        if mp_cost < C:\n            if mp_cost + 10 >= C:\n                return '{}'.format(mp_cost)\n            elif mp_cost + 10 < C:\n                mp_cost += 10\n        if mp_cost < B:\n            if mp_cost + 10 >= B:\n                return '{}'.format(mp_cost)\n            elif mp_cost + 10 < B:\n                mp_cost += 10\n        if mp_cost < A:\n            if mp_cost + 10 >= A:\n                return '{}'.format(mp_cost)\n            elif mp_cost + 10 < A:\n                mp_cost += 10\n    return '{}'.format(mp_cost)\n"
    },
    {
        "number": 4147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem 'A Magic Pyramid'\n    Given a list of magic points, the length of three bamboos A, B, C and total\n    amount of magic points N, the task is to find the minimum amount of magic\n    points required to obtain a new bamboos of length A, B, C by using the\n    following three types of magics:\n        - Extension Magic: Consumes 1 MP (magic point). Choose one bamboo and\n            increase its length by 1.\n        - Shortening Magic: Consumes 1 MP. Choose one bamboo of length at least 2\n            and decrease its length by 1.\n        - Composition Magic: Consumes 10 MP. Choose two bamboos and combine them\n            into one bamboo. The length of this new bamboo is equal to the sum of\n            the lengths of the two bamboos combined. (Afterwards, further magics\n            can be used on this bamboo.)\n    At least how much MP is needed to achieve the objective?\n    >>> solution(\"5 100 90 80\\n98\\n40\\n30\\n21\\n80\")\n    23\n    \"\"\"\n    _, A, B, C, *bamboo_lengths = stdin.split()\n    bamboo_lengths = [int(length) for length in bamboo_lengths]\n    return compute_magic_points(A, B, C, bamboo_lengths)\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    string = stdin[1:len(stdin)]\n    result = \"\"\n    for i in range(len(string)):\n        if string[i] >= 'A':\n            result += chr((ord(string[i])-ord('A') + N) % 26 + ord('A'))\n        else:\n            result += chr((ord(string[i])+ord('Z') - ord('A') + N) % 26 + ord('A'))\n    return result\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for i in range(len(s)):\n        s = s[n:]+s[:n]\n    return s"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin[0]\n    B = stdin[1]\n    C = stdin[2]\n    D = stdin[3]\n    E = stdin[4]\n    F = stdin[5]\n    G = stdin[6]\n    H = stdin[7]\n    I = stdin[8]\n    J = stdin[9]\n    K = stdin[10]\n    L = stdin[11]\n    M = stdin[12]\n    N = stdin[13]\n    O = stdin[14]\n    P = stdin[15]\n    Q = stdin[16]\n    R = stdin[17]\n    S = stdin[18]\n    T = stdin[19]\n    U = stdin[20]\n    V = stdin[21]\n    W = stdin[22]\n    X = stdin[23]\n    Y = stdin[24]\n    Z = stdin[25]\n    A = ord(A)\n    B = ord(B)\n    C = ord(C)\n    D = ord(D)\n    E = ord(E)\n    F = ord(F)\n    G = ord(G)\n    H = ord(H)\n    I = ord(I)\n    J = ord(J)\n    K = ord(K)\n    L = ord(L)\n    M = ord(M)\n    N = ord(N)\n    O = ord(O)\n    P = ord(P)\n    Q = ord(Q)\n    R = ord(R)\n    S = ord(S)\n    T = ord(T)\n    U = ord(U)\n    V = ord(V)\n    W = ord(W)\n    X = ord(X)\n    Y = ord(Y)\n    Z = ord(Z)\n    print(chr(Z),chr(X),chr(Y),chr(A),chr(B),chr(C),chr(D),chr(E),chr(F),chr(G),chr(H),chr(I),chr(J),chr(K),chr(L),chr(M),chr(N),chr(O),chr(P),chr(Q),chr(R),chr(S),chr(T),chr(U),chr(V),chr(W),chr(X),chr(Y),chr(Z))\n    return(chr(A))\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().rstrip('\\n'))\n    S = stdin.readline().rstrip('\\n')\n    return ''.join(chr(ord(a) + N) for a in S)"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(input())\n    chars = list(s)\n    shifts = {}\n    for i in range(65, 91):\n        shifts[i] = i + n if i + n < 91 else i + n - 26\n    for i, char in enumerate(chars):\n        if char in string.ascii_uppercase:\n            chars[i] = chr(shifts[ord(char)])\n    return ''.join(chars)\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([chr((ord(char) - ord('A') + int(stdin)) % 26 + ord('A')) for char in stdin])"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('ABCXYZ')\n    CDEZAB\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    s = s.replace(\"A\", \"\")\n    s = s.replace(\"Z\", \"A\")\n    s = s.replace(\"Y\", \"Z\")\n    s = s.replace(\"X\", \"Y\")\n    s = s.replace(\" \", \"\")\n    for i in range(n):\n        s = s[1:] + s[0]\n    return s\n"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the problem, returns a string \n    \"\"\"\n    shift = int(stdin)\n    \n    # Sorting string\n    s = stdin[1::]\n    s = ''.join(sorted(s))\n\n    # Shifting\n    s = s[shift:] + s[:shift]\n\n    return s\n    "
    },
    {
        "number": 4148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n = int(n)\n    s = list(s)\n    s = sorted(s)\n    return \"\".join(s[n:] + s[:n])"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().split()]\n    prime_set = set(primes(200001))\n    answers = set()\n    for i in range(1, len(b) // 2 + 1):\n        a = b[:i]\n        # print(a)\n        # print(b[i:])\n        # print(sorted(a))\n        # print(sorted(b[i:]))\n        if sorted(a) == sorted(b[i:]):\n            answers.add(a)\n    for answer in sorted(answers):\n        print(*answer)\n    return ''\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implement the solution\n    \"\"\"\n    pass\n    a = stdin.split('\\n')[0]\n    a = [int(i) for i in a.split(' ')]\n    #print(a)\n    b = []\n    for i in range(len(a)):\n        if a[i] > 2 and a[i] < 2750131:\n            b.append(a[i])\n            b.append(2)\n            print(a[i])\n        else:\n            b.append(a[i])\n            b.append(get_prime_biggest_divisor(a[i]))\n    b = list(set(b))\n    b.sort()\n    b.reverse()\n    print(' '.join([str(i) for i in b]))\n    return ''\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute solution function.\"\"\"\n    return []\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solve the problem for the first test set.\n    '''\n    \n    # List of primes.\n    prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    \n    def is_prime(num):\n        '''\n        Returns True if num is prime and False otherwise.\n        '''\n        if num == 2:\n            return True\n        if num % 2 == 0 or num < 2:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Get input.\n    n = int(stdin.split('\\n')[0])\n    b_str = stdin.split('\\n')[1]\n    b = []\n    for i in b_str.split(' '):\n        b.append(int(i))\n    # Get length of b.\n    n = len(b)\n    # Get length of prime list.\n    m = len(prime_list)\n    # Get numbers of b.\n    b_numbers = []\n    for i in b:\n        b_numbers.append(i//2)\n    # Shuffle b.\n    random.shuffle(b_numbers)\n    \n    # Generate array of a.\n    a = [i for i in range(1, n + 1)]\n    \n    # Loop to check if b is in the form a[i] + p_i or p_i * a[i].\n    # While a[i] is not prime, do the following:\n    #   p_i = the greatest divisor of a[i] not equal to a[i]\n    #   a[i] = p_i * a[i]\n    #   b[i] = a[i] + p_i\n    \n    for i in range(n):\n        if a[i] > m:\n            # If a[i] is prime, append a[i] to b.\n            if is_prime(a[i]):\n                b.append(a[i])\n            # If a[i] is not prime, search for p_i.\n            else:\n                for j in range(2, m):\n                    if is_prime(j):\n                        p = j\n                        break\n                # Mod a[i] by p_i and append to b.\n                a[i] = a[i]//p\n                b.append(p * a[i])\n    \n    # Reverse a, so that a is in order from smallest to largest.\n    a.reverse()\n    \n    # Print a.\n    print(*a)\n    return ''\n\nsolution(stdin)\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds an array that forms the given array.\"\"\"\n    n = int(stdin)\n    s = list(stdin)\n    a = [int(i) for i in s]\n    p = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    b = []\n    for i in a:\n        if i in p:\n            b.append(i)\n        else:\n            for j in p:\n                if i%j == 0:\n                    b.append(j)\n                    break\n    b = list(dict.fromkeys(b))\n    b.sort(reverse = True)\n    for i in range(n):\n        for j in range(n):\n            if b[i] > b[j]:\n                a[j] = a[i]\n    return''.join([str(i) for i in a])"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 5 2 3 2 4\n   ... ''')\n    '3 4 2'\n    \"\"\"\n    n = int(stdin.readline())\n    b = list(map(int, stdin.readline().split()))\n    a = b[:]\n    b = b * 2\n    a.sort()\n    p = [2]\n    i = 3\n    while i <= min(a):\n        if a[i - 1] % i == 0:\n            while a[i - 1] % i == 0:\n                p.append(i)\n                a[i - 1] = a[i - 1] // i\n        i += 1\n    p = p * n\n    b = list(map(lambda x: x * n, b))\n    res = []\n    for i in range(n):\n        b[i] = b[i] + p[i]\n    res = b[:]\n    i = 0\n    while i < len(a) and a[i] <= n:\n        j = 0\n        while j < len(b):\n            if b[j] % a[i] == 0:\n                b[j] = b[j] // a[i]\n                if j!= len(b) - 1:\n                    j += 1\n                    while b[j] % a[i] == 0:\n                        b[j] = b[j] // a[i]\n                        if j!= len(b) - 1:\n                            j += 1\n                        else:\n                            break\n                    j -= 1\n                else:\n                    break\n            else:\n                j += 1\n        while j < len(b) and b[j] == 0:\n            j += 1\n        if j == len(b):\n            res = res[:i + 1] + [a[i]] + res[i + 1:]\n            i += 1\n        else:\n            j -= 1\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr2 = []\n    for i in range(len(arr)):\n        if is_prime(arr[i]):\n            arr2.append(arr[i])\n    for i in range(1, len(arr2), 2):\n        arr2[i] = arr2[i - 1] * arr2[i - 1]\n    return arr2\n\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem.\"\"\"\n    stdin = stdin.split()\n    length = int(stdin[0])\n    b = [int(i) for i in stdin[1:]]\n\n    primes = [2]\n    i = 2\n    while i < (len(b) + 1) // 2:\n        if all([i % p!= 0 for p in primes]):\n            primes.append(i)\n        i += 1\n\n    result = []\n    i = 0\n    for b_i in b:\n        if b_i in primes:\n            result.append(b_i)\n        else:\n            for prime in primes:\n                if prime > b_i:\n                    break\n                if b_i % prime == 0:\n                    result.append(prime)\n                    b_i /= prime\n                    break\n    return \" \".join([str(i) for i in result])\n"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    primes = [2]\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime(i):\n            primes.append(i)\n    b = list(map(int, stdin.readline().strip().split(' ')))\n    # b = sorted(b)\n    primes = sorted(primes)\n    print(primes)\n    print(b)\n    a = [b[0]]\n    for i in range(1, n):\n        print('---', b[i], a)\n        if b[i] == b[i - 1]:\n            a.append(b[i])\n            continue\n        if b[i] % primes[0]!= b[i - 1]:\n            a.append(b[i])\n            continue\n        for p in primes:\n            if b[i] % p == 0 and p < b[i]:\n                a.append(b[i])\n                break\n\n    print(a)\n    return''.join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an array that is formed from stdin using the sequence of operations described in the problem statement.\"\"\"\n    # Your code here\n    \n    return [int(i) for i in stdin.split()]\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num, k = stdin.split(\" \")\n    num, k = int(num), int(k)\n    students = list(map(int, stdin.split(\" \")[1:]))\n    # returns the positions of the students who would join the first team\n    first_team = [i for i in range(num) if students[i] == max(students)]\n    # returns the positions of the students who would join the second team\n    second_team = [i for i in range(num) if students[i] == min(students)]\n    # add the students who are not in the first team to a queue\n    queue = [i for i in range(num) if i not in first_team]\n    # while there are students in the queue\n    while len(queue) > 0:\n        # get the first student and add him to the first team\n        first_team.append(queue.pop(0))\n        # if there are any students who can join the first team\n        if len(first_team) < k:\n            # add all the students that can join the first team to a queue\n            for i in range(num):\n                if i not in first_team and students[i] == min(students) and i not in queue:\n                    queue.append(i)\n        # get the second student and add him to the second team\n        second_team.append(queue.pop(0))\n        # if there are any students who can join the second team\n        if len(second_team) < k:\n            # add all the students that can join the second team to a queue\n            for i in range(num):\n                if i not in second_team and students[i] == max(students) and i not in queue:\n                    queue.append(i)\n    # return the answer\n    return \"\".join([str(1) if i in first_team else str(2) for i in range(num)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    res = [0] * n\n    cnt = 0\n    while cnt < n:\n        left = 1\n        right = n - cnt\n        left_sum = right_sum = 0\n        for i in range(k):\n            left_sum += arr[left + i]\n            right_sum += arr[right - i]\n        if left_sum > right_sum:\n            res[cnt] = 1\n            left += k\n            right -= k\n        else:\n            res[cnt] = 2\n            left -= k\n            right += k\n        cnt += 1\n    return ''.join([str(c) for c in res])\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split(\" \")))\n    A = list(map(int, stdin.split(\" \")))\n    B = [i for i in range(1, N + 1)]\n\n    ans = \"\"\n    while len(B) > 0:\n        l = len(B)\n        B = B[K:] + B[:K]\n        for i in range(l):\n            if A[B[i] - 1] == max(A):\n                ans += \"1\"\n            else:\n                ans += \"2\"\n    return ans\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    skills = [int(i) for i in stdin.split()]\n    res = []\n    while len(skills) > 0:\n        res.append([skills.pop(0) if i == 1 else -skills.pop(0) for i in range(k)])\n    res = [sum(i) for i in res]\n    while any(i <= 0 for i in res):\n        i, num = 0, 0\n        while res[i] <= 0:\n            i += 1\n            num += 1\n        res = [res[j] + res[j - num + 1] for j in range(len(res))]\n    return ''.join([str(i) for i in res])\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(\" \"))\n    skills = list(map(int, stdin.split(\" \")))\n    skills_set = set(skills)\n    res = []\n    while len(skills) > 0:\n        count_res = 0\n        for i in range(K):\n            if skills[i] in skills_set and skills[i] not in res:\n                res.append(skills[i])\n                count_res += 1\n            else:\n                break\n        if count_res < K:\n            res.append(skills[K - 1])\n        skills = skills[count_res:]\n    return \"\".join([\"1\" if i in res else \"2\" for i in range(1, N + 1)])\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(\" \"))\n    arr = list(map(int, stdin.split(\" \")))\n    i = 0\n    while len(arr) > 0:\n        arr = arr[: K] + arr[-K:]\n        # print(arr)\n        if i % 2 == 0:\n            arr.sort()\n            print(\"\".join(map(str, arr[::-1])))\n        else:\n            arr.sort()\n            print(\"\".join(map(str, arr)))\n        i += 1\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    n = len(stdin.split())\n    stdin = stdin.split()\n    a = list(map(int, stdin))\n    a = [str(i) for i in a]\n    print(''.join(a))\n\n    return"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    k, n = int(stdin[0]), int(stdin[1])\n\n    for i in range(n):\n        stdin[i + 2] = int(stdin[i + 2])\n\n    result = []\n    for i in range(n):\n        result.append('2' if stdin[2 * i + 2] > stdin[2 * i + 1] else '1')\n\n    return ''.join(result)\n\n\"\"\"\n"
    },
    {
        "number": 4150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    lst = []\n    for i in range(n):\n        lst.append(i)\n    print(lst)\n    for i in range(k):\n        lst.remove(i)\n    print(lst)\n\n\nsolution(input())\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the answer\"\"\"\n    n = int(next(stdin))\n    a = list(map(int, next(stdin).split()))\n    c = Counter(a)\n    result = 0\n    for key in c:\n        result += c[key] * (c[key] - 1) / 2\n    print(int(result % 1000000007))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(s, v):\n        if s == \"0\":\n            return 1\n        v.append(s)\n        n = int(s)\n        if n > nn:\n            return 0\n        if n < nn:\n            return dfs(str(n + 1), v) + dfs(str(n + 2), v)\n        elif n == nn:\n            return 1\n        elif n == 0:\n            return 0\n    nn = int(stdin[0])\n    nums = [int(i) for i in stdin[1:].split(' ')]\n    s = str(nums[0])\n    v = []\n    count = 0\n    for i in range(0, nn):\n        count += dfs(str(nums[i]), v)\n    return count\n\n\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    b = [0] * n\n    return count_diff_permutations(a, b) % int(1e9 + 7)\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split(' ')))\n    return str(pow(2, n, 998244353))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"11\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n\n    def gcd(a: int, b: int) -> int:\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    def gcd_all(a: list) -> int:\n        return reduce(gcd, a)\n\n    def lcm_all(a: list) -> int:\n        return reduce(lcm, a)\n\n    # print(gcd_all(a))\n    # print(lcm_all(a))\n    # print(len(a))\n\n    l = lcm_all(a)\n    # print(l)\n    return f\"{len([l // i for i in a]) % 1000000007}\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_renumerated(a: str) -> str:\n        a = list(map(int, a.split(' ')))\n        b = []\n        for i, x in enumerate(a):\n            if i == 0 or x!= a[i - 1]:\n                b.append(0)\n            else:\n                b[-1] += 1\n        return''.join(map(str, b))\n\n    # print(get_renumerated(stdin))\n    return '{} {}'.format(solution(stdin), solution(stdin))\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    return \"\"\n    return \"\"\n"
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    # set up our variables\n    # create a list of the input\n    list_of_input = stdin.split('\\n')\n    #print(list_of_input)\n    \n    # get n and a list of inputs\n    n = int(list_of_input[0])\n    #print(n)\n    list_of_input = list_of_input[1].split(' ')\n    #print(list_of_input)\n    \n    # get a list of ints\n    int_list = []\n    for item in list_of_input:\n        int_list.append(int(item))\n    \n    #print(int_list)\n    \n    # create an empty list\n    list_of_solutions = []\n    \n    # loop through the list, creating two sets: one of the previous and one of the current\n    for x in range(len(int_list)):\n        \n        # create two sets, one of the previous and one of the current\n        set_of_previous = set()\n        set_of_current = set()\n        \n        # loop through all the elements in the list\n        for y in range(x, len(int_list)):\n            # print(x, y, len(int_list))\n            \n            # if the current is not the same as the previous, add it to the set of current\n            if int_list[y]!= int_list[y-1]:\n                set_of_current.add(int_list[y])\n            \n            # if the previous is not the same as the current, add it to the set of previous\n            if int_list[y-1]!= int_list[y]:\n                set_of_previous.add(int_list[y-1])\n        \n        #print(set_of_current, set_of_previous)\n        #if set_of_current == set_of_previous:\n        #    list_of_solutions.append(x)\n        #print(list_of_solutions)\n        #print(set_of_current, set_of_previous)\n        if set_of_current == set_of_previous:\n            list_of_solutions.append(x)\n        \n    #print(list_of_solutions)\n    #print(len(list_of_solutions))\n    \n    return(len(list_of_solutions))\n    "
    },
    {
        "number": 4151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    b = [0 for _ in range(n)]\n    c = 0\n    b[0] = 0\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            b[i + 1] = b[i]\n        else:\n            b[i + 1] = b[i] + 1\n    for i in range(n - 1):\n        if b[i] == b[i + 1]:\n            c += 1\n    return str(c)"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the minimum number of elements needed to remove to make a sequence good.\n\n    >>> solution('4 7 1 5 4 9\\n')\n    1\n    >>> solution('1 2 3 4 5\\n')\n    2\n    >>> solution('16\\n')\n    1\n    >>> solution('1 1 1 1023\\n')\n    0\n    \"\"\"\n    data = stdin.splitlines()\n    sequence = list(map(int, data[1].split()))\n    # print(sequence)\n    num_deletes = 0\n    for i in range(len(sequence)):\n        for j in range(i + 1, len(sequence)):\n            if not sequence[j] % sequence[i] and not sequence[i] % sequence[j]:\n                num_deletes += 1\n                print(sequence)\n    return num_deletes\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(s) for s in stdin.split(' ')]\n    s = set()\n    for i in range(1, n+1):\n        if not a[i-1]:\n            continue\n        for j in range(i+1, n+1):\n            if a[j-1] % a[i-1] == 0:\n                s.add(a[j-1])\n                break\n    print(len(s))\n    return ''"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] & (nums[i] + nums[j]) == 0:\n                ans += 1\n                break\n    return str(ans)\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split(\" \")]\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if 2**sum(numbers[i:j+1]) in numbers:\n                cnt += 1\n                break\n    return str(cnt)\n\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n>>> solution(\"7 7 1 5 4 9\")\n1\n>>> solution(\"16 4 7 1 5 4 9\")\n2\n>>> solution(\"1 1 1 1023\")\n0\n"
    },
    {
        "number": 4152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    while True:\n        if len(seq) == 0:\n            break\n        count += 1\n        while True:\n            if len(seq) == 0:\n                break\n            if seq[0] == seq[1]:\n                seq = seq[2:]\n                continue\n            else:\n                break\n        if len(seq) == 0:\n            break\n        count += 1\n        while True:\n            if len(seq) == 0:\n                break\n            if seq[0]!= seq[1]:\n                break\n            else:\n                seq = seq[2:]\n                continue\n        if len(seq) == 0:\n            break\n    return str(count)\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_cubes = stdin\n    return num_cubes\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    color = [1] * N\n    for _ in range(N):\n        color[int(stdin[0])] = 0\n        stdin = stdin[1:]\n    return f'{sum(color):03d}'\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '{0:b}'.format(int(stdin))"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\nimport unittest\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read in the input from stdin and solve.\"\"\"\n    # In this example, the input is a list of binary digits.\n    # We have to read in the input list.\n    numbers = stdin.split()\n    # Create a new list where we'll store the binary digits as a string.\n    numbers = []\n    # Create a for loop where we convert the binary digits to a string\n    for number in numbers:\n        numbers.append(str(number))\n    # We can now read in the binary digits from the input.\n    # We read in the string which is a binary digit.\n    # We have to convert it to an integer using int()\n    # We then have to convert it to a binary digit using bin().\n    # Then we have to add it to the list of binary digits.\n    # We can then convert the list of binary digits to a string.\n    print(numbers)\n    # Finally, we print the string\n    # We can then use this string to solve the problem.\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count('0'))\n\"\"\"\n\n\nfrom itertools import groupby\n\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin):\n        stdin = [int(s) for s in stdin]\n        while True:\n            s = stdin.pop(0)\n            if s == 0:\n                s = stdin.pop(0)\n                if s == 1:\n                    stdin.append(0)\n                else:\n                    stdin.append(1)\n            else:\n                stdin.append(0)\n\n            if not stdin:\n                break\n\n        return stdin\n\n    return str(len([0 for i in range(len(solve(stdin.split()))) if solve(stdin.split())[i] == 1]))\n"
    },
    {
        "number": 4153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A simple solution that always picks the first two cubes that will be\n    removed, then removes them.\n    \"\"\"\n    n = int(stdin)\n    cubes = [0, 1] * n\n    stack = []\n    for x in reversed(cubes):\n        if stack and stack[-1] == x:\n            stack.pop()\n        else:\n            stack.append(x)\n    print(len(stack))\n\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split(' '))\n  nums = []\n  for _ in range(m):\n    l, r = map(int, stdin.split(' '))\n    nums.append((l, True))\n    nums.append((r, False))\n  nums.sort()\n  count = 1\n  last = nums[0]\n  for i in range(1, m * 2):\n    if nums[i][1] == last[1]:\n      count += 1\n      last = nums[i]\n    else:\n      last = nums[i]\n  return count\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # -----Input-----\n    lines = stdin.split('\\n')\n    # -----Computation-----\n    N, M = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n    ID_cards = [int(num) for num in lines[1:]]\n    \n    i = 0\n    while i < N - 1:\n        if ID_cards[i] + 1!= ID_cards[i + 1]:\n            break\n        i += 1\n    if i < N - 1:\n        i = 0\n        while i < N - 1:\n            if ID_cards[i]!= ID_cards[i + 1]:\n                break\n            i += 1\n    # -----Output-----\n    print(i)\n    return ''"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Number of ID cards that allow us to pass all the gates alone\"\"\"\n    n, m = map(int, stdin.split(' '))\n    l, r = [], []\n    for i in range(m):\n        l.append(int(stdin.split(' ')[i * 2]))\n        r.append(int(stdin.split(' ')[i * 2 + 1]))\n    d = {}\n    for i in range(1, n + 1):\n        d[i] = [i - 1]\n    for i in range(m):\n        tmp = d[l[i]].copy()\n        tmp.append(r[i])\n        tmp.sort()\n        d[l[i]] = tmp\n        tmp = d[r[i]].copy()\n        tmp.append(l[i])\n        tmp.sort()\n        d[r[i]] = tmp\n    print(d)\n    s = set(range(1, n + 1))\n    s = set(s) - set(l) - set(r)\n    return len(s)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    T = [tuple(map(int, stdin.split())) for _ in range(M)]\n    print(len({((i, i) for i in range(N))} & {((i, j) for i in range(N) for j in range(N) if i!= j)} - {T}))\n    # or\n    print(len({((i, j) for i in range(N) for j in range(N) if i!= j)} - {T}))\n    return \"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, M = [int(x) for x in stdin.split(' ')]\n    gates = [tuple([int(x) for x in stdin.split(' ')]) for _ in range(M)]\n    gates.sort(key=lambda x: x[0])\n    start = 0\n    end = N\n    res = 0\n    while start <= end:\n        mid = (start + end) // 2\n        count = 0\n        for i in range(M):\n            if gates[i][0] <= mid:\n                count += 1\n        if count >= M:\n            res = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return str(res)\n"
    },
    {
        "number": 4154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the minimum number of watering operations\n    return 0"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"The minimum number of watering operations required is \" + str(watering_operations(stdin))\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    left = 1\n    right = n\n    count = 0\n    while left <= right:\n        for i in range(len(arr)):\n            if arr[i] > 0 and left <= i <= right:\n                arr[i] -= 1\n                count += 1\n                print(arr)\n                if arr[i] == 0:\n                    right = i\n                    break\n        if right == n:\n            break\n        for j in range(len(arr)):\n            if arr[j] > 0 and left <= j <= right:\n                arr[j] += 1\n                count += 1\n                print(arr)\n                if arr[j] == 0:\n                    left = j\n                    break\n    print(count)\n    return count"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the problem\n    :param stdin: standard input\n    :return: a string denoting the minimum number of watering operations required\n    '''\n    # create a list to store the heights\n    heights = [0] * 100\n    N = int(stdin.readline())\n    # read the heights\n    for i in range(0, N):\n        heights[i] = int(stdin.readline())\n    # get the minimum of the heights\n    min_height = min(heights)\n    # get the max number of waterings possible\n    max_waterings = min_height * N\n    # now we start the algorithm\n    waterings = 0\n    for i in range(0, N):\n        # if the height is 0 then we perform the watering operation\n        if heights[i] == 0:\n            # start from i to N-1\n            for j in range(i, N):\n                # if the heights are 0 then we perform the watering operation\n                if heights[j] == 0:\n                    # increment the waterings\n                    waterings += 1\n                    # change the heights to 1\n                    heights[j] = 1\n                    break\n    # return the number of waterings\n    return waterings\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of watering operations\n    to satisfy the condition.\n\n    >>> solution('4\\n1 2 2 1')\n    2\n    >>> solution('10\\n1 2 3 4 5 6 7 8 9 10')\n    0\n    \"\"\"\n    stdin = stdin.splitlines()\n    flowers = [int(i) for i in stdin[0].split()]\n    n = len(flowers)\n    num_operations = 0\n\n    for i in range(1, n):\n        l = max(1, flowers[i - 1] - 1)\n        r = min(flowers[i], n)\n        num_operations += (r - l + 1)\n        for j in range(l, r + 1):\n            flowers[j] += 1\n    return num_operations\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution reads in the input and writes the output to a list.\n    After that, it converts the list into a single string.\n    \"\"\"\n    N = int(stdin.readline())\n    inp = [int(i) for i in stdin.readline().split()]\n    inp.sort()\n    res = 0\n    for i in range(len(inp)):\n        for j in range(i+1, len(inp)):\n            l, r = i + 1, j + 1\n            while l <= r:\n                m = (l + r) // 2\n                if inp[m] >= inp[i] + inp[j]:\n                    res += 1\n                    l = m + 1\n                else:\n                    r = m - 1\n    return res\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(capacity: int, passengers: list[int]) -> bool:\n        passenger_sum = 0\n        for n in passengers:\n            passenger_sum += n\n            if passenger_sum > capacity:\n                return False\n        return True\n\n    n, capacity = [int(n) for n in stdin.split(\" \")]\n    passengers = [int(n) for n in stdin.split(\"\\n\")[1].split(\" \")]\n\n    if is_valid(capacity, passengers):\n        return str(sum(passengers))\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function is solution for this problem\"\"\"\n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_bus_stops = int(stdin.readline())\n    bus_stop_sequence = [int(i) for i in stdin.readline().split()]\n    return str(bus_stops(num_of_bus_stops, bus_stop_sequence))\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    busses = stdin.split('\\n')[1].split(' ')\n\n    def recursion(n, w, index, curr):\n        if index == n:\n            return 1\n        if curr == w:\n            return 0\n        # x = recursion(n, w, index + 1, curr + busses[index])\n        # y = recursion(n, w, index + 1, curr - busses[index])\n        x = recursion(n, w, index + 1, curr + int(busses[index]))\n        y = recursion(n, w, index + 1, curr - int(busses[index]))\n        if y == 0:\n            return 0\n        return x + y\n\n    return str(recursion(n, w, 0, 0))\n"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    total_number = lst[0]\n    capa = lst[1]\n    result = 0\n    if capa == 1:\n        result = total_number\n    else:\n        result = total_number * capa\n    if result % capa == 0:\n        return str(result // capa)\n    return '0'\n\nprint(solution(input()))"
    },
    {
        "number": 4156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(x) for x in stdin.strip().split(' ')]\n    a = [int(x) for x in stdin.strip().split(' ')]\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(w + 1):\n            if j - a[i] >= 0:\n                dp[i + 1] += dp[i]\n            if i > 0:\n                dp[i + 1] += dp[i - 1]\n    return str(dp[n])\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return sol_str"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    l = list(map(int, stdin.split()))\n    n = l[0]\n    l.pop(0)\n    x = 1\n    res = []\n    for i in range(n - 1):\n        if x % 3 == 0:\n            res.append(x)\n            x = x * 2\n        else:\n            res.append(x)\n            x = x * 3\n    res.append(x)\n    print(' '.join(list(map(str, res))))\n\nsolution(stdin)\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(stdin.split(\" \")[1::2])\n\"\"\"\n\n\nfrom collections import deque, Counter\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n1, 2, 6, 3, 12, 9, 8, 4, 28, 84\n\n7, 6, 3, 12, 9, 8, 4, 28, 84\n\n12, 9, 6, 3, 8, 4, 28, 84, 7, 6, 3, 12, 9, 8, 4, 28, 84\n\n8, 4, 28, 84, 7, 6, 3, 12, 9, 6, 3, 12, 9, 8, 4, 28, 84\n\n9, 3, 6, 12, 4, 8, 7, 6, 3, 12, 9, 8, 4, 28, 84, 7, 6, 3, 12, 9, 8, 4, 28, 84\n\n12, 9, 6, 3, 8, 4, 28, 84, 7, 6, 3, 12, 9, 8, 4, 28, 84, 7, 6, 3, 12, 9, 8, 4, 28, 84, 7, 6, 3, 12, 9, 8, 4, 28, 84\n\n9, 3, 6, 12, 4, 8, 7, 6, 3, 12, 9, 8, 4, 28, 84, 7, 6, 3, 12, 9, 8, 4, 28, 84, 7, 6, 3, 12, 9, 8, 4, 28, 84, 7, 6, 3, 12, 9, 8, 4, 28, 84\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    t = [0] * n\n    t[0] = a[0]\n    for i in range(1, n):\n        if t[i - 1] == 0:\n            t[i] = a[i]\n        elif t[i - 1] == 1:\n            t[i] = a[i] * 3\n        else:\n            t[i] = a[i] // 2\n    return''.join(str(i) for i in t)\n\n\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the subset with the largest number of points.\n\n    Args:\n        stdin (str): input on STDIN\n\n    Returns:\n        str: output to STDOUT\n    \"\"\"\n    n = int(stdin.readline().strip())\n    points = sorted([int(line) for line in stdin.readlines()])\n    len_points = len(points)\n    left_idx = 0\n    right_idx = len_points - 1\n\n    max_count = 0\n    max_subset = []\n\n    while left_idx < right_idx:\n        count = 0\n        subset = []\n        left = points[left_idx]\n        right = points[right_idx]\n        while left < right:\n            if left_idx + count < len_points and right_idx - count >= 0:\n                left = points[left_idx + count]\n                right = points[right_idx - count]\n                subset.append(left)\n                subset.append(right)\n                count += 1\n            else:\n                break\n        if count > max_count:\n            max_count = count\n            max_subset = subset\n        left_idx += 1\n        right_idx -= 1\n\n    print(max_count)\n    print(*max_subset, sep=\"\\n\")\n    return \"done\"\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    x = [abs(i - j) for i, j in zip(x, x[1:])]\n    m = max(x)\n    for i in range(n):\n        if 2 ** x.index(m) == m:\n            print(m, x.index(m) + 1)\n            break\n    return ''\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    points = list(map(int, inputs[1].split(' ')))\n    points.sort()\n    sqrt_n = int(n ** 0.5)\n    d = 0\n    while 2 ** d < sqrt_n:\n        d += 1\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (points[i] - points[j]) % (2 ** d) == 0:\n                ans += 1\n    print(ans)\n    print(' '.join(list(map(str, points[:ans]))))\n\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n    d = len(str(max(points)))\n    x = [points[0]]\n    for i in range(1, n):\n        if abs(points[i] - points[i - 1]) == 2 ** d:\n            x.append(points[i])\n    m = len(x)\n    print(m)\n    print(*x)\n    return ''\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of points in a subset such that for each pair of points, the\n    distance between them is an integral power of two.\n    >>> solution('6\\n3 5 4 7 10 12')\n    3\n    >>> solution('5\\n-1 2 5 8 11')\n    1\n    \"\"\"\n    n = int(stdin.readline())\n    points = list(map(int, stdin.readline().split()))\n    points.sort()\n    pairs = []\n    for i in range(len(points) - 1):\n        for j in range(i + 1, len(points)):\n            pairs.append((points[i], points[j]))\n    pairs.sort(key=lambda x: x[1] - x[0])\n    max_power = 0\n    max_points = []\n    for pair in pairs:\n        if max_power < (pair[1] - pair[0]).bit_length():\n            max_power = (pair[1] - pair[0]).bit_length()\n            max_points = [pair]\n        elif max_power == (pair[1] - pair[0]).bit_length():\n            max_points.append(pair)\n    max_points = [points[pair[0]] for pair in max_points]\n    return len(max_points)\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the maximum number of points in a subset satisfying the given conditions\n    :param stdin: input string\n    :return: string\n    \"\"\"\n    N = int(stdin)\n    points = [int(item) for item in stdin.split('\\n')[0].split(' ')]\n\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        points = sorted(points)\n        sum_ = 0\n        for i in range(1, len(points)):\n            if points[i] - points[i - 1]!= 2 ** sum_:\n                return i\n            sum_ += 1\n\n    return -1\n\n\nprint(solution('5\\n3 5 4 7 10 12'))\nprint(solution('5\\n1 2 5 8 11'))\n"
    },
    {
        "number": 4158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nA, B, K = map(int, stdin.readlines()[0].split())\n\nprint(min(A, B) - max(A, B))\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = (int(s) for s in stdin.split())\n    t = a + b\n    for _ in range(k):\n        a = max(0, a - 1)\n        b = max(0, b - 1)\n        t += a + b\n    print(t)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Aoki and Takahashi have A and B cookies, respectively.\n\n    They will do the following K actions:\n        - If they have cookies, they will eat one cookie.\n        - Otherwise, if Aoki has cookies, he will eat one.\n        - Otherwise, if Aoki and Takahashi have no cookies, they will do nothing.\n\n    In the end, how many cookies will Aoki and Takahashi have, respectively?\n    '''\n\n    return '\\n'.join([str(int(stdin.split()[0]) - int(stdin.split()[1])),\n                      str(int(stdin.split()[2]) - int(stdin.split()[0]))])\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi, aoki = A, B\n\n    for _ in range(K):\n        if takahashi >= 1:\n            takahashi -= 1\n        elif aoki >= 1:\n            aoki -= 1\n        else:\n            pass\n\n    print(takahashi, aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split()]\n\n    takahashi = A\n    aoki = B\n    for k in range(K):\n        if takahashi > aoki:\n            aoki += 1\n        else:\n            takahashi += 1\n    print(takahashi, aoki)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import deque\n\nA, B, K = map(int, input().split(' '))\n\ntakahashi = deque([A])\naoki = deque([B])\n\nfor i in range(K):\n    if takahashi[0] > aoki[0]:\n        aoki.popleft()\n    elif takahashi[0] < aoki[0]:\n        takahashi.popleft()\n    else:\n        takahashi.popleft()\n        aoki.popleft()\n\nprint(sum(takahashi), sum(aoki))\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '0 2'\n'''\n\nfrom sys import stdin"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x, y, z = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return '0 1'\n    if x == 0 and y!= 0:\n        return '0'+ str(y)\n    if x!= 0 and y == 0:\n        return str(x) +'0'\n    if x!= 0 and y!= 0:\n        return str(x) +'' + str(y)\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the maximum number of cookies that Aoki can get before Takahashi\n    finishes the game.\n    \"\"\"\n    # A and B are positive integers.\n    A, B, K = [int(n) for n in stdin.split(\" \")]\n\n    def _dp(A: int, B: int) -> int:\n        \"\"\"\n        A and B are positive integers.\n        \"\"\"\n        # return 0 if A=0 and B=0, and return 1 if A=0 and B>0,\n        # or return 0 if A>0 and B=0, or return A+B if A>0 and B>0.\n        return max(0, A + B - 1)\n\n    def _dp_no_recursion(A: int, B: int) -> int:\n        \"\"\"\n        A and B are positive integers.\n        \"\"\"\n        # dp[i][j] = 0 if i=0 and j=0, or dp[i][j] = 1 if i=0 and j>0,\n        # or dp[i][j] = 0 if i>0 and j=0, or dp[i][j] = dp[i-1][j] + dp[i][j-1] if i>0 and j>0.\n        dp = [[0 for j in range(B + 1)] for i in range(A + 1)]\n        for i in range(A + 1):\n            for j in range(B + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = 0\n                elif i == 0 and j > 0:\n                    dp[i][j] = 1\n                elif i > 0 and j == 0:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[A][B]\n\n    return str(_dp_no_recursion(A, B))\n"
    },
    {
        "number": 4159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = list(map(int, stdin.split()))\n    if K == 0:\n        print(A, B)\n    elif A == B:\n        print(A, A)\n    else:\n        a = 0\n        b = 0\n        for i in range(K):\n            if A > B:\n                a += A\n                b += B\n                A = 0\n                B = 0\n            else:\n                a += A\n                B += B\n                A = 0\n            if a > b:\n                break\n        print(a, b)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes the input and returns the answer to the problem\"\"\"\n    from sys import stdin\n    x = int(stdin.readline())\n    year = 0\n    bal = 100\n    while bal < x:\n        bal += bal * 0.01\n        year += 1\n    return year\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YEARS:'+ str(int(input()) + 1)\n    \n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    time = 0\n    while True:\n        time += 1\n        interest = (1 + 1/100)**time - 1\n        if interest >= X:\n            break\n    return str(time)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    result = 0\n    while x < 10001:\n        x *= 1.01\n        result += 1\n    return str(result)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    # X\u306e\u6700\u5927\u5024\u306f10**18,\u305d\u308c\u3092\u8d85\u3048\u308b\u5024\u306f0\n    x = 1\n    while x < 10**18:\n        x = x * (1 + 1/10000)\n        if X <= x:\n            return str(math.ceil(math.log(X / x, 10000)))\n        x *= 10000\n    return str(0)"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    total_jpy = int(stdin)\n    year = 0\n    while total_jpy < 10000:\n        total_jpy = total_jpy + total_jpy * 0.01\n        year += 1\n    return str(year)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\""
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    count = 0\n    while True:\n        X = int(round(X * (1 + 1/100), 0))\n        count += 1\n        if X >= 103:\n            return count\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    days = 0\n    while True:\n        x = (1 + 1 / 100) * x\n        if x >= 100:\n            break\n        else:\n            days += 1\n    return str(days)\n"
    },
    {
        "number": 4160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    years = 0\n    while X <= 100:\n        X *= 1.01\n        years += 1\n    return years\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(sum(sum(math.gcd(a, b, c) for a in range(1, int(stdin) + 1)) for b in range(1, int(stdin) + 1)) for c in range(1, int(stdin) + 1)))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. Feel free to delete this line.\n    Do not change the input and output format.\n    \"\"\"\n    pass"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return '9'\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(stdin.split()))"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # create a list of input, remove the first and last character\n    num_list = list(stdin[1:-1].split(','))\n\n    # create a list to save result\n    result_list = []\n\n    # loop through the list of numbers\n    for i in range(len(num_list)):\n        # loop through the list of numbers to the left\n        for j in range(i):\n            # loop through the list of numbers to the right\n            for k in range(j, i):\n                # get the gcd of the two numbers\n                gcd = gcd_three_numbers(int(num_list[j]), int(num_list[k]), int(num_list[i]))\n                # append to the result list\n                result_list.append(gcd)\n\n    # convert the result list to a string\n    result = \" \".join(str(i) for i in result_list)\n    # return the result\n    return result\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(gcd(i, j, k) for i in range(1, int(stdin.split()[0]) + 1) for j in range(1, int(stdin.split()[0]) + 1) for k in range(1, int(stdin.split()[0]) + 1)))\n    return \"\""
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(sum(map(int, stdin.split('\\n')[1:]), []))\n"
    },
    {
        "number": 4161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return stdin\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n3 4 6')\n    10\n    \"\"\"\n    _, *numbers = stdin.split()\n    maximum = 0\n    for m in range(2 ** len(numbers)):\n        total = 0\n        for i in range(len(numbers)):\n            if m >> i & 1:\n                total += int(numbers[i])\n        maximum = max(maximum, total)\n    return maximum\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(m: int) -> int:\n        sum_of_mods = 0\n        for a in a_s:\n            sum_of_mods += m % a\n        return sum_of_mods\n\n    n = int(stdin.readline().strip())\n    a_s = [int(i) for i in stdin.readline().strip().split(' ')]\n    return str(max([f(i) for i in range(10 ** 5 + 1)]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n3 4 6\")\n    10\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return str(max([(x % y) for x in range(n) for y in a]))\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    i = 0\n    s = 0\n    for _ in range(n):\n        s = (s + a[_]) % i\n    return s\n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n')[0].split())\n    \n    return str(max([sum([(a[j] * (a[i] - a[j])) for j in range(i + 1, n)]) for i in range(n)]))\n    \n"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    res = sum(map(lambda x: x % n, a))\n    print(res)\n    return ''"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    # \u5165\u529b\u3092list\u306b\u5909\u63db\n    n, *a = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    # \u51fa\u529b\n    print(max(a[i] * (n - i) for i in range(n)))"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    maxVal = 0\n    for m in range(10**6):\n        t = 0\n        for i in range(n):\n            t += (m % a[i])\n        if t > maxVal:\n            maxVal = t\n    return str(maxVal)"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\"\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # [input]\n    N = int(stdin.split(\"\\n\")[0])\n    nums = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    \n    # [compute the sum of all the remainder]\n    f_arr = []\n    for num in nums:\n        f = num % num\n        f_arr.append(f)\n    \n    # [sum the list]\n    f_sum = sum(f_arr)\n    \n    # [max the sum]\n    max_f = max(f_arr)\n    \n    # [return]\n    print(f_sum + max_f)"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Checks if there is at least one doublet in three consecutive rolls.\"\"\"\n    n = int(stdin)\n    last_dice = [0, 0]\n    consecutive = 0\n    for _ in range(n):\n        dice = [int(i) for i in stdin.split(' ')]\n        for i in range(len(dice)):\n            if dice[i] == last_dice[i]:\n                consecutive += 1\n            else:\n                consecutive = 0\n            if consecutive == 3:\n                return 'Yes'\n        last_dice = dice\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    rolls = [list(map(int, line.split())) for line in lines[1:]]\n    \n    for i in range(3, len(rolls)):\n        if rolls[i-2][0] == rolls[i-2][1] and rolls[i-1][0] == rolls[i-1][1] and rolls[i][0] == rolls[i][1]:\n            return \"Yes\"\n        \n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(1, n + 1):\n        a, b = map(int, stdin.readline().split())\n        if i < n and a == b:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    D = {}\n    for i in range(N):\n        x, y = map(int, stdin.readline().split())\n        D[i] = (x, y)\n\n    a = 0\n    for i in range(N - 2):\n        if D[i][0] == D[i + 1][0] == D[i + 2][0] or D[i][1] == D[i + 1][1] == D[i + 2][1]:\n            a += 1\n\n    return 'Yes' if a >= 3 else 'No'\n\nprint(solution(stdin=stdin))\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    prev = -1\n    curr = 0\n    count = 0\n\n    while True:\n        next = int(stdin)\n\n        if next == curr:\n            count += 1\n\n            if count == 3:\n                return \"Yes\"\n        else:\n            count = 1\n\n        curr = next"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    D = []\n    for i in range(N):\n        D.append([int(x) for x in stdin.readline().split()])\n    res = 'No'\n    for i in range(1, N):\n        if (D[i][0] == D[i - 1][0]) or (D[i][0] == D[i - 1][1]) or (D[i][1] == D[i - 1][0]) or (\n                D[i][1] == D[i - 1][1]):\n            res = 'Yes'\n            break\n    return res\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        rolls = stdin.split('\\n')\n        if len(rolls) == 1:\n            break\n        print(any(roll == roll[::-1] for roll in rolls))"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2\n   ... 6 6\n   ... 4 4\n   ... 3 3\n   ... 3 2\n   ... ''')\n    'Yes'\n    \"\"\"\n    n = int(stdin.readline())\n    d = [tuple(map(int, line.split())) for line in stdin]\n    return \"Yes\" if len(list(filter(lambda x: x[0] == x[1], zip(d[:-2], d[1:-1], d[2:])))) >= 3 else \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Main solution function.\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    for i in range(n):\n        roll_1, roll_2 = map(int, stdin.splitlines()[i + 1].split())\n        if roll_1 == roll_2:\n            if i > 1 and roll_1 == roll_2 == roll_list[i-2][0]:\n                continue\n            if i > 0 and roll_1 == roll_2 == roll_list[i-1][0]:\n                continue\n            if i < n - 2 and roll_1 == roll_2 == roll_list[i+2][0]:\n                continue\n            roll_list.append([roll_1, roll_2])\n            if i > 1 and roll_1 == roll_2 == roll_list[i-2][1]:\n                continue\n            if i > 0 and roll_1 == roll_2 == roll_list[i-1][1]:\n                continue\n            if i < n - 2 and roll_1 == roll_2 == roll_list[i+2][1]:\n                continue\n            roll_list.append([roll_1, roll_2])\n    if len(roll_list) < 3:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return f'{(3.14 * r * r)//1:.0f}'\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdout"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    r = int(stdin)\n    # compute the solution\n    sol = r ** 2\n    # return the solution\n    return sol\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    area_of_circle = 0\n    x = stdin\n    return area_of_circle\n\nprint(solution(input()))"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return r * (r + 1) // 2\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the integer number of times the area of a circle is larger than\n    the area of a circle of radius 1.\n\n    >>> solution('2')\n    4\n    >>> solution('1')\n    0\n    \"\"\"\n    radius = int(stdin)\n    area = math.pi * radius * radius\n    return int(area / math.pi)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline().rstrip())\n    answer = 2 * math.pi * r\n\n    return answer\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the count of circles larger than 1 in the given radius\n    '''\n    # your code here\n    area_1 = 3.1415926535897932 * 1 ** 2\n    area_2 = 3.1415926535897932 * 2 ** 2\n    return str(int(stdin) * area_2 // area_1)\n"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u043a\u043e\u043b\u043b\u0435\u0433\u0438 \u0438\u0437 \u043f\u0440\u043e\u0448\u043b\u043e\u0439 \u043f\u0430\u0440\u044b.\n\u041f\u0440\u043e\u0448\u043b\u0430\u044f \u043f\u0430\u0440\u0430 \u0432\u043e\u0437\u044c\u043c\u0451\u043c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438.\n\u0417\u0430\u0434\u0430\u0447\u0430 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c - \u041e(V^2)\n\n\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u0433\u0440\u0430\u0444\u0435.\n\u041d\u0430\u0439\u0434\u0451\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0431\u0435\u0440 \u0432 \u0433\u0440\u0430\u0444\u0435.\n\u041f\u043e\u043b\u0443\u0447\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0451\u0431\u0435\u0440 \u043f\u0443\u0442\u0451\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432\u0435\u0440\u0448\u0438\u043d \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0440\u0451\u0431\u0435\u0440 \u043f\u0443\u0442\u0451\u043c \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430 2.\n\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430\u0439\u0434\u0435\u043c \u043e\u0441\u0442\u043e\u0432\u043d\u043e\u0435 \u0434\u0435\u0440\u0435\u0432\u043e \u0438\u0437 \u0432\u0435\u0440\u0448\u0438\u043d, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u0440\u0430\u0437 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0431\u043e\u043b\u044c\u0448\u0435 1.\n\u041f\u043e\u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435.\n\u041d\u0430\u0439\u0434\u0451\u043c \u0432\u0435\u0440\u0448\u0438\u043d\u0443, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u0443\u0442\u0451\u043c \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438.\n\u041e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u0443\u0442\u0451\u043c \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u0443\u0442\u0451\u043c \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u0443\u0442\u0451\u043c \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u0443\u0442\u0451\u043c \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u0443\u0442\u0451\u043c \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0432 \u0434\u0435\u0440\u0435\u0432\u0435.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\u041d\u0430\u0439\u0442\u0438 \u0432\u0435\u0440\u0448\u0438\u043d\u0443 \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432\u0437\u0432\u0435\u0448\u0435\u043d\u043d\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u0443\u0442\u0451\u043c \u0441\u0443\u043c\u043c\u044b \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438.\n\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043e\u0431\u044a\u0451\u043c \u0437\u0430\u0434\u0430\u0447\u0438 - O(V)\n\n\ufffd"
    },
    {
        "number": 4164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Yes\"\n  "
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [N, *Ls] = [int(s) for s in stdin.split('\\n')]\n    return 'Yes' if max(Ls) < sum(Ls[:-1]) else 'No'"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using the theorem:\n    the longest side is strictly shorter than the sum of the lengths of the other N-1 sides\n    \"\"\"\n    n = int(stdin)\n    sides = [int(num) for num in stdin.split(\" \")]\n\n    max_side = max(sides)\n    sides.remove(max_side)\n    min_side = min(sides)\n\n    if max_side <= sum(sides):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    polygon = list(map(int, stdin.split(' ')))\n    n = polygon[0]\n    sides = polygon[1:]\n    return 'Yes' if max(sides) < sum(sides) - max(sides) else 'No'\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    polygon = [int(n) for n in lines[1].split(' ')]\n    polygon.sort()\n\n    # This can be simplified\n    if polygon[-1] < sum(polygon[:-1]):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    a = l[0]\n    for i in range(n-1):\n        if l[i] > a + sum(l[i+1:]):\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    return \"Yes\" if sum(l) < max(l) else \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(A: List[int], B: List[int]):\n        return sum(A) - max(A) < sum(B)\n    \n    def is_valid_v2(A: List[int], B: List[int]):\n        return sum(A) - max(A) < max(B)\n\n    n, *A = [int(i) for i in stdin.split()]\n    if is_valid(A, A[:n-1]):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    \n    line = stdin.split()\n    n = int(line[0])\n    \n    total = 0\n    \n    for item in line[1:]:\n        total += int(item)\n        \n    if n == 1:\n        if int(line[1]) < total:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        if int(line[1]) < total and int(line[2]) < total:\n            return 'Yes'\n        else:\n            return 'No'\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [int(c) for c in stdin.split()[:n]]\n    c = [int(c) for c in stdin.split()[n:]]\n    for i in range(len(s)):\n        if i < len(s) - 1:\n            if (s[i] == s[i + 1]) & (c[i]!= c[i + 1]):\n                return -1\n        if i == len(s) - 1:\n            if (s[i] == s[i - 1]) & (c[i]!= c[i - 1]):\n                return -1\n    return str(int(''.join(str(c[i]) for i in range(m))))\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the smallest integer not less than 0, satisfying all the conditions\n    \"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    s, c = [], []\n    for _ in range(n):\n        s_i, c_i = [int(i) for i in stdin.split()]\n        s.append(s_i)\n        c.append(c_i)\n    print(c)\n    for i in range(n):\n        print(str(s[i]) + str(c[i]))\n        if int(s[i] + c[i]) >= 10:\n            print(s[i] + c[i])\n            break\n    return str(s[i] + c[i])\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = [int(x) for x in stdin.split()]\n    s = []\n    c = []\n    for i in range(m):\n        s.append([int(x) for x in stdin.split()][1])\n        c.append([int(x) for x in stdin.split()][2])\n    for i in range(m):\n        # print(s[i], c[i])\n        if s[i] > n:\n            print(-1)\n            return\n        if sum(c[i] for i in range(len(c))) == 0:\n            print(0)\n            return\n        if sum(c[i] for i in range(len(c))) > n:\n            print(-1)\n            return\n        else:\n            if s[i] == 1 and sum(c[i]) == 1:\n                print(c[i][0])\n                return\n            if s[i] == 1 and sum(c[i]) > 1:\n                c[i] = sorted(c[i])\n                print(c[i][len(c[i]) - 1])\n                return\n            if s[i] > 1 and sum(c[i]) == 1:\n                c[i] = sorted(c[i])\n                print(c[i][len(c[i]) - 2])\n                return\n            if s[i] > 1 and sum(c[i]) > 1:\n                c[i] = sorted(c[i])\n                print(c[i][len(c[i]) - 3])\n                return\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = input()\n    strs = stdin.split('\\n')\n    N, M = map(int, strs[0].split())\n    # N, M = 3, 3\n    # s = [1, 7, 3, 2, 1, 7]\n    # c = [7, 7, 3, 2, 7, 7]\n    s = list(map(int, strs[1].split()))\n    c = list(map(int, strs[2].split()))\n    # s = [1, 7, 3, 2, 1, 7]\n    # c = [7, 7, 3, 2, 7, 7]\n\n    for i in range(1, N):\n        if s[i] > N:\n            print(-1)\n            return\n\n    if c[0] == 0:\n        s.insert(0, s[0] - 1)\n        c.insert(0, 9)\n\n    if c[M] == 0:\n        s.append(s[-1] + 1)\n        c.append(9)\n\n    for i in range(1, M + 1):\n        if (s[i] - s[i - 1]) * 10 + c[i] > (s[i - 1] - s[i - 1]) * 10 + c[i - 1]:\n            print(-1)\n            return\n\n    s = [str(i) for i in s]\n    s = ''.join(s)\n    print(s)\n\nsolution(stdin)"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = []\n    for _ in range(m):\n        arr.append(list(map(int, stdin.split(' '))))\n    def next(digits: str, base: int) -> str:\n        n = len(digits)\n        i = n - 1\n        while i >= 0:\n            if digits[i] == base:\n                digits = digits[:i] + '0' + digits[i + 1:]\n                return next(digits, base)\n            i -= 1\n        return '-1'\n    for i in range(m):\n        if next(str(arr[i][0]), arr[i][1])!= '-1':\n            return next(str(arr[i][0]), arr[i][1])\n    return '-1'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split('\\n')[0].split()))\n    l = []\n    for i in range(N):\n        l.append(list(map(int, stdin.split('\\n')[i + 1].split())))\n    for i in range(N):\n        if l[i][0] > 0:\n            if M - l[i][0] > l[i][0]:\n                return str(int(\"\".join(map(str, reversed(l[i])))))\n            else:\n                return str(int(\"\".join(map(str, reversed(l[i])))))\n    return \"-\""
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    N, M = list(map(int, stdin.split()))\n    result = []\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if (str(i)[0] == str(j)[0]) or (str(i)[1] == str(j)[1]):\n                result.append(i * j)\n\n    if result:\n        return str(min(result))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implementation of the above approach\n    \"\"\"\n    # Get the input\n    N, M = map(int, stdin.readline().split())\n    # Create a list of all the s and c\n    s_c = [list(map(int, stdin.readline().split())) for _ in range(M)]\n    # Store the possible digits\n    possible_digits = {i for i in range(10)}\n    # Loop through all the s and c\n    for s, c in s_c:\n        possible_digits.remove(c)\n    # Create a list of the N-digit numbers\n    N_digit_numbers = [int(str(n).zfill(N)) for n in range(10 ** N)]\n    # Loop through all the numbers\n    for number in N_digit_numbers:\n        # Loop through all the s and c\n        is_satisfied = True\n        for s, c in s_c:\n            # Remove the c from the possible digits\n            possible_digits.remove(c)\n            # Check if the number is less than 0\n            if number < 0:\n                is_satisfied = False\n                break\n            # Check if the number's s-th digit is c\n            if number // (10 ** (s - 1)) % 10!= c:\n                is_satisfied = False\n                break\n        # If the number satisfies all the conditions\n        if is_satisfied:\n            return str(number)\n    # If no number satisfies all the conditions\n    return '-1'\n\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    numbers = []\n    for _ in range(N):\n        numbers.append(list(map(int, stdin.split())))\n    numbers.sort()\n    for i in range(len(numbers)):\n        for j in range(M):\n            if numbers[i][j] < 0:\n                return '-1'\n    res = 1\n    for i in range(M):\n        res *= numbers[-1][i]\n    return str(res)\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    n, k = map(int, stdin.split())\n    if k % gcd(k, n):\n        return 0\n\n    return (n - k) // k * k * (k - 1) // 2\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 2\\n')\n    9\n    >>> solution('4 2\\n')\n    8\n    \"\"\"\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    return str(sum(1 for i in range(1, n + 1) for j in range(i, n + 1) for c in range(j, n + 1) if i + j + c % k == 0))\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    count = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            if (i % k == 0) and (j % k == 0):\n                count += 1\n            elif (i % k == 0) or (j % k == 0):\n                count += 1\n            elif (i + j) % k == 0:\n                count += 1\n    print(count)\n    return str(count)\n\n----Test Case----\nsolution(\"3 2\")\nsolution(\"3 3\")\n\n----Test Case----\nsolution(\"13 2\")\nsolution(\"7 7\")\n\n----Test Case----\nsolution(\"10 15\")\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return stdin\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split(\" \")]\n    ans = 0\n    for i in range(1, N):\n        for j in range(1, N):\n            for k in range(1, N):\n                if i + j + k < N:\n                    if (i + j + k) % K == 0 and (i + j) % K == 0 and (j + k) % K == 0:\n                        ans += 1\n    return ans\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_triples = 0\n    for line in stdin:\n        # Split input by space.\n        n, k = [int(i) for i in line.split()]\n        for a in range(n-2):\n            for b in range(a+1, n-1):\n                for c in range(b+1, n):\n                    if (a+b) % k == 0 and (b+c) % k == 0 and (c+a) % k == 0:\n                        num_of_triples += 1\n    return num_of_triples"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, k = [int(i) for i in stdin.split()]\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if (i+j)%k == 0 and (j+i)%k == 0:\n                count +=1\n    return count\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    return str(sum(i % k and i % j and i % k for i in range(n + 1) for j in range(n + 1) if i % k and i % j and i % k))\n"
    },
    {
        "number": 4167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, k = [int(x) for x in stdin.split(' ')]\n  return str(sum(not x%k for x in range(n, n*3)))"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return bin(int(stdin))[2:]\n\n\"\"\"\nimport sys\nimport os\n\n_INPUT_FILES = ['a.in', 'b.in', 'c.in']\n_OUTPUT_FILES = ['a.out', 'b.out', 'c.out']\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    output = []\n    if n == 0:\n        output.append(0)\n    else:\n        while n > 0:\n            output.append(str(n % (-2)))\n            n = -(n // 2)\n    output = ''.join(output)[::-1]\n    return output\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin))[2:])\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split(\"\\n\")[0]\n    num = int(num)\n    bin_num = \"\"\n    while num > 0:\n        remainder = num % (-2)\n        num = num // (-2)\n        if remainder == 0:\n            bin_num = \"0\" + bin_num\n        elif remainder == 1:\n            bin_num = \"1\" + bin_num\n    return bin_num\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin(int(stdin)))[2:]"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return bin(int(stdin))[2:]\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[0]\n    n = int(stdin)\n    k = 0\n    while n!= 0:\n        if n % (-2) == 1:\n            k += 1\n        n = n // (-2)\n    return f\"{k:b}\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin, 2))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a, b = [0] * n, [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, stdin.readline().split())\n    a.sort()\n    b.sort()\n    a.append(10 ** 9 + 1)\n    b.append(10 ** 9 + 1)\n    c = b[0] * m - a[0] * m\n    for i in range(1, n):\n        c = min(c, b[i] * m - a[i] * m)\n    return str(c)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"A linear approach that reads the data and creates a tree.\n    Then it checks if the tree is balanced and applies a mathamatical formula.\n\n    Args:\n        stdin (str): input.\n\n    Returns:\n        str: output.\n    \"\"\"\n    stdin = stdin.strip()\n    n, m = list(map(int, stdin.split(' ')))\n    a, b = list(map(int, stdin.split(' ')))\n    if n == 1 and m == a:\n        return str(b)\n    my_tree = Tree(a, b, left=Node(), right=Node())\n    tree = BinaryTree(Node(my_tree.value_a, my_tree.value_b))\n    tree.root.left = my_tree.left\n    tree.root.right = my_tree.right\n    if tree.is_balanced():\n        return str(m * my_tree.value_a + (m - 1) * my_tree.value_b)\n    return str(tree.depth(tree.root) * my_tree.value_a + (tree.depth(tree.root) - 1) * my_tree.value_b)\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    A, B = [], []\n    for _ in range(N):\n        a, b = map(int, stdin.split(' '))\n        A.append(a)\n        B.append(b)\n    return max(A) * N + sum(min(b, M // a) * a for a, b in zip(A, B))\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''This function is designed to solve the TAKHASHI PROBLEM'''\n    '''It takes stdin and returns a str value in stdout'''\n    '''It takes str input and returns a str output'''\n    '''It takes a string and returns a string'''\n    def iterate_each_element(element: str) -> tuple[int, int]:\n        '''This function is designed to return the i-th element of each element in stdin'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i and int value of the i-th element'''\n        '''It takes a str as input and returns a tuple with two elements, int i"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem 'Minimum amount of money to buy M cans of energy drinks'\n\n    Args:\n        stdin (str): Input from Standard Input\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    N, M = map(int, stdin.split(\"\\n\")[0].split())\n    A = []\n    B = []\n    for i in range(N):\n        A_i, B_i = map(int, stdin.split(\"\\n\")[i + 1].split())\n        A.append(A_i)\n        B.append(B_i)\n\n    if N == 1:\n        return str(A[0] * M)\n\n    money = 0\n    amount_of_drinks = 0\n\n    for i in range(N):\n        money += min(A[i], M // B[i]) * B[i]\n        amount_of_drinks += min(A[i], M // B[i])\n        if amount_of_drinks == M:\n            return str(money)\n\n    return str(money)\n\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # input\n    # store, cans\n    # N M\n    # A B\n    # 2 4\n    # 3 5\n    # 3 6\n    # 4 7\n    # 5 8\n    # 5 9\n    # 6 10\n    # N M\n    # A B\n    store_cans = []\n    for line in stdin.split(\"\\n\"):\n        if line == \"\":\n            continue\n        store_cans.append(tuple(map(int, line.split())))\n    n, m = store_cans[0]\n    store_cans = store_cans[1:]\n\n    store_cans.sort(key=lambda x: x[0])\n    print(store_cans)\n    def buy(j, s):\n        # print(j, s)\n        res = 0\n        for x in range(j):\n            if store_cans[x][1] < s:\n                continue\n            res += s // store_cans[x][1]\n            s -= (store_cans[x][1] * (s // store_cans[x][1]))\n        return res\n    print(buy(n, m))"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split(' '))\n    b = list(map(int, stdin.readline().split(' ')))\n    s = 0\n    for i in range(n):\n        b[i] += m\n        s += m\n        if b[i] > m:\n            s = s + b[i] - m\n    print(s)\n\n    return ''\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(\" \")]\n    p = [int(n) for n in stdin.split(\" \")]\n    print(p)\n    # max(range(10**4), key=lambda x: p[x])\n    p = sorted(p)\n    print(p)\n    return \"\"\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution() : str\n    @param      stdin : str\n    @return     str\n    \"\"\"\n    n, m = [int(s) for s in stdin.split(' ')]\n    a, b = [int(s) for s in stdin.split(' ')]\n    c, d = [int(s) for s in stdin.split(' ')]\n    e, f = [int(s) for s in stdin.split(' ')]\n    g, h = [int(s) for s in stdin.split(' ')]\n    i, j = [int(s) for s in stdin.split(' ')]\n    k, l = [int(s) for s in stdin.split(' ')]\n    return (m*a + m*b*n) - (m*c + m*d*n) - (m*e + m*f*n) - (m*g + m*h*n) - (m*i + m*j*n) - (m*k + m*l*n)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution computes the minimum amount of money with which Takahashi can buy M cans of energy drinks.\n\n    Args:\n        stdin (str): Input from Standard Input in the following format:\n            N M\n            A_1 B_1\n            A_2 B_2\n            \\vdots\n            A_N B_N\n\n    Returns:\n        str: The minimum amount of money with which Takahashi can buy M cans of energy drinks.\n    \"\"\"\n    def _parse_input(stdin: str) -> Tuple[int, int, List[Tuple[int, int]]]:\n        \"\"\"Parses the given input into a list of (Ai, Bi) tuples.\n\n        Args:\n            stdin (str): Input from Standard Input in the following format:\n                N M\n                A_1 B_1\n                A_2 B_2\n                \\vdots\n                A_N B_N\n\n        Returns:\n            Tuple[int, int, List[Tuple[int, int]]]: Returns the number of stores N, the number of cans in a store B_i, and a list of (Ai, Bi) tuples.\n        \"\"\"\n        n, m = [int(num) for num in stdin.split()]\n        purchases = []\n        for i in range(n):\n            a, b = [int(num) for num in stdin.split()]\n            purchases.append((a, b))\n        return n, m, purchases\n\n    def _get_sums(purchases: List[Tuple[int, int]]) -> List[int]:\n        \"\"\"Computes the sum of the A and B values in the purchases.\n\n        Args:\n            purchases (List[Tuple[int, int]]): A list of (Ai, Bi) tuples.\n\n        Returns:\n            List[int]: A list of the sum of the A and B values of the purchases.\n        \"\"\"\n        return [sum(a, b) for a, b in purchases]\n\n    def _get_cumsum(sums: List[int]) -> List[int]:\n        \"\"\"Computes the cumulative sum of the A and B values in the purchases.\n\n        Args:\n            sums (List[int]): A list of the sum of the A and B values of the purchases.\n\n        Returns:\n            List[int]: A list of the cumulative sum of the A and B values of the purchases.\n        \"\"\"\n        cumulative_sum = [0]\n        for num in sums:\n            cumulative_sum.append(num + cumulative_sum[-1])\n        return cumulative_sum\n\n    n, m, purchases = _parse_input(stdin)\n    sums = _get_sums(purchases)\n    cumsum = _get_cumsum(sums)\n\n    for a, b in purchases:\n        if m - b < 0:\n            continue\n\n        i = bisect.bisect_right(cumsum, m - b)\n        if i == 0:\n            continue\n\n        x = m - b - cumsum[i - 1]\n        y = m - b - cumsum[i]\n        if x < 0 or y < 0:\n            continue\n\n        a1 = a - x if i == n else a\n        a2 = a - y if i < n else 0\n\n        b1 = b - x if i == n else b\n        b2 = b - y if i < n else 0\n\n        return a1 + b1 + a2 + b2\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return \"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *H = map(int, stdin.split('\\n'))\n    heights = [0] * N\n    heights[0] = H[0]\n    for i in range(1, N):\n        heights[i] = max(H[i], heights[i - 1])\n    ans = 0\n    for i in range(N - 1):\n        ans = max(ans, heights[i] - heights[i + 1])\n    print(ans)\n    return\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of times you can move.\n\n    >>> solution('5\\n10 4 8 7 3')\n    2\n    \"\"\"\n   ..."
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    N = int(stdin.split()[0])\n    H = [int(x) for x in stdin.split()[1:]]\n    dp = [[0 for i in range(2)] for j in range(N+1)]\n    dp[1] = [0,H[0]]\n    for i in range(2, N+1):\n        dp[i][0] = dp[i-1][0]\n        dp[i][1] = max(dp[i-1][1], dp[i-1][0]+H[i-1])\n    return dp[N][0]\n\nsolution(stdin)\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # pass\n    # N, *H = [int(i) for i in stdin.split()]\n    # count = 0\n    # height = 0\n    # for _ in range(N):\n    #     if height < H[_]:\n    #         height = H[_]\n    #         count += 1\n    #         _ += 1\n    #     elif height > H[_]:\n    #         height = H[_]\n    #         count += 1\n    #     else:\n    #         height = H[_]\n    #         _ += 1\n    # return count\n    \n    # return sum(map(lambda _: int(height < _), H[1:]))\n\n    # return max(map(lambda _: sum(map(lambda __: int(height < __), H[_+1:])), H))\n    \n    return sum(map(lambda _: sum(map(lambda __: int(height < __), H[_+1:])), H))\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get solution from stdin.\"\"\"\n    n = int(stdin[0])\n    heights = list(map(int, stdin[1].split()))\n    heights.sort()\n    left, right = 0, 0\n    ret = 0\n    for i in range(n):\n        right = heights[i]\n        if i == 0:\n            right = 0\n        ret += (right - left) // (heights[i] - left)\n        left = right\n    print(ret)\n    return solution\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    N = int(lines[0])\n    Hs = list(map(int, lines[1].split()))\n\n    max = 0\n    for i in range(len(Hs)):\n        if Hs[i] > max:\n            max = Hs[i]\n        else:\n            break\n\n    return str(len(Hs) - i)\n"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    heights = [int(n) for n in stdin.split()]\n    return N\n\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = list(map(int, stdin.split('\\n')[0].split(' ')))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    \n    cnt = 0\n    a.sort()\n    while len(a) > k:\n        a.pop()\n        cnt += 1\n    print(cnt)"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    if k == n:\n        return 0\n\n    n_sorted_a = sorted(a)\n    \n    if n_sorted_a[-1] == n_sorted_a[-2]:\n        return 1\n    else:\n        return max(n - n_sorted_a[-1], n_sorted_a[-2] - 1)\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\".join(stdin.split(\" \"))\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\".join(stdin.split())\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    res = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            res += 1\n            if res >= k:\n                return res\n        else:\n            if res + 1 < k:\n                res += 2\n                if res >= k:\n                    return res\n            else:\n                return res\n    return res\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem\"\"\"\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = k - 1\n    i = 0\n    count = 0\n    while k > 0:\n        while i < n:\n            if a[i] % 2 == 0:\n                if a[i] // 2 == a[i + 1]:\n                    a[i] = a[i] // 2\n                    a[i + 1] = a[i + 1] // 2\n                    i += 1\n                    k -= 1\n                    count += 1\n                else:\n                    i += 1\n            else:\n                i += 1\n    return count\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    freq = {}\n    s = 0\n    for el in a:\n        if el in freq:\n            freq[el] += 1\n        else:\n            freq[el] = 1\n    if k in freq:\n        s = 0\n    else:\n        for el in freq:\n            if freq[el] > k:\n                s += freq[el] - k\n        s += k\n    print(s)\n    return s\n\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    dist = [0]*n\n    dist[0] = arr[0]\n    for i in range(1, n):\n        dist[i] = dist[i - 1] + arr[i]\n    ans = 0\n    for i in range(n):\n        if dist[i] >= k:\n            ans += 1\n        else:\n            ans += k - dist[i]\n    return ans\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split(\" \")]\n    n, k = inputs[0], inputs[1]\n    a = inputs[2:n+2]\n    sorted_a = sorted(a)\n    moves = 0\n    while len(set(a))!= k:\n        moves += 1\n        m, i = sorted_a[0], 0\n        while len(set(a))!= k and i < n:\n            if a[i] == m:\n                a[i] += 1\n            else:\n                a[i] -= 1\n            moves += 1\n            i += 1\n    return str(moves)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    # The idea is to calculate how many of the largest/smallest elements are in the array.\n    # For example, if k = 4, we want to find a way to move these 4 elements to the end\n    # and to keep the 4 elements in the end elements in ascending order.\n    # In this example, we will move all the smallest elements to the end:\n    # the left 4 smallest elements will move to the end of the array\n    # and then the 4 largest elements will move to the beginning of the array\n    # in ascending order.\n\n    # Now, we need to do k - 4 more moves to the end.\n    # It is possible to have only one more move if k == n.\n    # Otherwise, the array will not be in ascending order and we can't satisfy k.\n    # In the example above, the final array is:\n    # [5, 3, 2, 1, 1, 1, 3]\n\n    # So the answer is k - 4 + 1 = 3\n    print(k - 4 + 1 if k - 4 + 1 < n else n)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # \uc5ec\uae30\uc5d0 \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc8fc\uc138\uc694.\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    a.sort()\n\n    print(k // (k - 1))\n    "
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    \n    return 0"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, k = list(map(int, stdin[0].split()))\n    a = list(map(int, stdin[1].split()))\n    a.sort()\n    cnt = 0\n    for i in range(n):\n        if a[i] == a[0]:\n            cnt += 1\n        if cnt >= k:\n            break\n    # print(a)\n    return len(a) - i - 1\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    k, n = a[0], a[1]\n    a = a[2:]\n    min_heap = Heap(a[:k])\n    for i in range(k, n):\n        if a[i] < min_heap.heap[0]:\n            heappush(min_heap, a[i])\n        else:\n            heappushpop(min_heap, a[i])\n    return len(min_heap.heap)\n\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    nums = list(map(int, stdin[2:]))\n    return solve(n, k, nums)\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, k = stdin.split(\" \")\n    k = int(k)\n    a = [int(x) for x in a.split(\" \")]\n    a.sort()\n    min_diff = a[-1] - a[0]\n    cur_diff = a[0] + (k - 1) * a[-1] - k * a[0]\n    ans = 1\n    for i in range(1, len(a)):\n        cur_diff = a[i] + (k - 1) * a[-1] - k * a[i]\n        if cur_diff < min_diff:\n            min_diff = cur_diff\n            ans = i\n    return str(ans)\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    a.sort()\n    mn, mx = a[0], a[-1]\n    print(a)\n    # moves = 0\n    # for i in range(k):\n    #     if a[i] == mn:\n    #         a[i] += 1\n    #         moves += 1\n    #     elif a[i] == mx:\n    #         a[i] -= 1\n    #         moves += 1\n    # print(moves)\n    # print(a)\n    return moves\n"
    },
    {
        "number": 4172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.splitlines()[0]\n    n, k = first_line.split(\" \")\n    n = int(n)\n    k = int(k)\n    second_line = stdin.splitlines()[1]\n    a = [int(el) for el in second_line.split(\" \")]\n    i = 0\n    j = 0\n    t = 0\n    while t < k:\n        if j >= len(a):\n            j = 0\n        if a[j] > a[i]:\n            a[i] += 1\n            j += 1\n            t += 1\n        elif a[j] < a[i]:\n            a[i] -= 1\n            j += 1\n            t += 1\n        else:\n            j += 1\n    print(j)"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def diff_in_nums(n_a: int, n_b: int) -> int:\n        return abs(n_a - n_b)\n\n    q = int(stdin.readline())\n    for _ in range(q):\n        n, a, b = map(int, stdin.readline().split())\n        print(diff_in_nums(n, a) + diff_in_nums(n, b))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return solve(stdin.readlines())\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, q = map(int, stdin.split('\\n')[0].split())\n    s = set()\n    ans = []\n    for _ in range(q):\n        n_, a_, b_ = map(int, stdin.split('\\n')[n_].split())\n        ans.append(a_ * n_ + min(a_ * (n_ - 1), b_ * n_))\n    return ans\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str, solve(stdin.splitlines())))\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cases = stdin.split(\"\\n\")\n    \n    return \"\"\n\nprint(solution(\"4\\n10 1 3\\n7 3 2\\n1 1000 1\\n1000000000000 42 88\\n\"))\n\n'''\n'''\nThe second part of the puzzle is on another page, so you can go there if you want to learn more.\n\nProblem:\n\nFor any fixed $n \\in \\mathbb{N}_0^*$ and $q \\in \\mathbb{N}_0^*$ (where $n \\geq q$), it can be proven that the sequence $X_n$ is periodic modulo $q$. In other words, we can always get back to the first element in the sequence by adding up $n$ and multiplying by $q$ to any number.\n\nFor example, let $q = 2k + 1$ (with $k \\in \\mathbb{N}_0^*$). Then for $n = i \\times q^i + j$ with $0 \\le j \\le i$ (and $j, i \\in \\mathbb{N}_0^*$), $X_n = (2n + 1 - 2k) \\bmod q$. This is a period: we can always get back to the initial element of the sequence by adding up $2n$ and multiplying by $q$ to any number.\n\nThe period is $T(q) = \\displaystyle\\frac{n}{q} = \\frac{2k + 1}{q}$, i.e. an integer.\n\nFor example, for $q = 7$ the period is $T(q) = \\displaystyle\\frac{6}{7} = \\frac{12}{7} = 2$ (we get back to the first element in the sequence by adding $2$ and multiplying by $7$).\n\nFor $q = 2k + 1$ the period is $T(q) = \\displaystyle\\frac{1}{2} = 0.5$ (we get back to the first element in the sequence by adding $1$ and multiplying by $2$).\n\nWhat is the least value of $q$ for which the period is a positive integer?\n\n(We will denote by $X_n$ the sequence $X_n = (2n + 1 - 2k) \\bmod q$, for some fixed $n$ and $k$.)\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ (2 \\leq q \\le 10000$).\n\n-----Output-----\n\nPrint a single integer, the least value of $q$ for which the period is a positive integer.\n\n-----Example-----\nInput\n10\n\nOutput\n7\n\n-----Problem-----\nLet $q = 2k + 1$ for some fixed $k \\in \\mathbb{N}_0^*$ and $n \\in \\mathbb{N}_0^*$. Then $X_n = (2n + 1 - 2k) \\bmod q$ for all $n$.\n\nFor any fixed $n \\in \\mathbb{N}_0^*$ and $q \\in \\mathbb{N}_0^*$, we can prove that the sequence $X_n$ is periodic modulo $q$. In other words, we can always get back to the initial element in the sequence by adding up $2n$ and multiplying by $q$ to any number.\n\nFor example, let $q = 2k + 1$ (with $k \\in \\mathbb{N}_0^*$). Then for $n = i \\times q^i + j$ with $0 \\le j \\le i$ (and $j, i \\in \\mathbb{N}_0^*$), $X_n = (2n + 1 - 2k) \\bmod q$. This is a period: we can always get back to the initial element of the sequence by adding up $2n$ and multiplying by $q$ to any number.\n\nThe period is $T(q) = \\displaystyle\\frac{n}{q} = \\frac{2k + 1}{q}$, i.e. an integer.\n\nFor example, for $q = 7$ the period is $T(q) = \\displaystyle\\frac{6}{7} = \\frac{12}{7} = 2$ (we get back to the first element in the sequence by adding $2$ and multiplying by $7$).\n\nFor $q = 2k + 1$ the period is $T(q) = \\displaystyle\\frac{1}{2} = 0.5$ (we get back to the first element in the sequence by adding $1$ and multiplying by $2$).\n\nWhat is the least value of $q$ for which the period is a positive integer?\n\n(We will denote by $X_n$ the sequence $X_n = (2n + 1 - 2k) \\bmod q$, for some fixed $n$ and $k$.)\n\n-----Solution-----\n\n-----Notes-----\n\nSo far, we only had a proof that the sequence is periodic modulo $q$ for any fixed $q$. \n\nHowever, if $q$ is a prime number, the sequence is periodic modulo $q^n$ for any $n$. \n\nLet us show that this is the case by taking a closer look at the above proof.\n\nThe above proof states that for any fixed $n$ and $k$ we can find a sequence $X_n = (2n + 1 - 2k) \\bmod q$ such that it is periodic modulo $q^n$. Let $r = \\displaystyle\\frac{1}{q} \\in \\mathbb{N}_0^*$ and let $X_n = (2n + 1 - 2k) \\bmod q^r$, then $\\displaystyle\\frac{n}{q} = r$ for all $n$. \n\nHence, by definition, for all $n$ we can find a sequence $X_n = (2n + 1 - 2k) \\bmod q^n$ such that it is periodic modulo $q^n$. \n\nAnd the sequence is periodic modulo $q^n$ for any $q$ such that $q^{-1}$ is an integer. \n\nSo $q$ is a prime number if and only if $q^{-1}$ is an integer.\n\nTherefore, if we assume that $q$ is a prime number, then we can prove that the sequence is periodic modulo $q^n$ for any $n$.\n\nThis is the only way to show that the sequence is periodic modulo $q^n$ for any fixed $q$ and $n$.\n\nNow, we are ready to prove that the sequence is periodic modulo $q^n$ for any fixed $q$ and $n$ such that $q^{-1"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split('\\n')))\n    m = 0\n    for a_i, b_i in zip(a, a[1:]):\n        m = min(m, a_i + b_i - 1)\n    return m\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ...\n"
    },
    {
        "number": 4173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the number of times the ball will make a bounce where the coordinate is at most X.\n    \"\"\"\n    # Get inputs.\n    input_args = stdin.split()\n    n, x = int(input_args[0]), int(input_args[1])\n    d_lst = list(map(int, input_args[2:]))\n\n    # Initialize variables.\n    count, total = 0, 0\n    for i in range(n + 1):\n        total += d_lst[i - 1]\n        if total <= x:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L, X = [int(n) for n in stdin.split()]\n    bounce = X // L\n    if bounce >= N:\n        bounce = N\n    print(bounce)\n\nsolution(stdin)\n\n'''\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    totalBounces = 0\n    maxCoord = 0\n    maxBounces = 0\n    bounces = list(map(int, stdin.split(\" \")))\n    for i in range(1, bounces[0] + 1):\n        maxBounces += 1\n        maxCoord += bounces[i]\n    for i in range(maxBounces):\n        maxCoord -= 1\n        if maxCoord <= bounces[0]:\n            totalBounces += 1\n    return totalBounces"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # my code here\n    return '2'\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The program must first read the first two lines from standard input. The first line will be in the\n    format 'N X', where N is an integer between 1 and 100, inclusive, and X is an integer between 1 and\n    10000, inclusive. The second line will be in the format 'L_1 L_2... L_{N-1} L_N'. The last line will\n    contain the coordinates of the ball in the form 'X'.\n    The program must then print the number of times the ball will make a bounce, according to the\n    definition of the problem.\n    :param stdin: standard input string\n    :return: string containing solution\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n, x = map(int, stdin[0].split())\n    l = list(map(int, stdin[1].split()))\n    counter = 0\n    d = 0\n    for i in range(0, n):\n        if d + l[i] <= x:\n            d += l[i]\n            counter += 1\n    print(counter)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, limit = map(int, stdin.split(' '))\n    t = list(map(int, stdin.split(' ')))\n\n    a = b = 0\n    for i in range(n):\n        a += t[i]\n        if a > limit:\n            break\n        b += t[i]\n    \n    print(b)"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    bounds = [int(x) for x in stdin.split(' ')]\n    count = 0\n    b = 0\n    for i in range(a):\n        b += bounds[i]\n        if b > b + a:\n            count += 1\n            b = 0\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split('\\n')[0].split()))\n    d = list(map(int, stdin.split('\\n')[1].split()))\n    count = 0\n    for i in range(n):\n        if x - d[i] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, x = map(int, stdin.split(' '))\n    lengths = list(map(int, stdin.split(' ')))\n    # get dp table\n    dp = [0] * (x + 1)\n    for i in range(1, n + 1):\n        for j in range(x + 1):\n            if lengths[i - 1] <= j:\n                dp[j] = dp[j] + i\n            else:\n                dp[j] = dp[j]\n    # get count\n    print(dp[-1])\n    return ''\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\"\\n\")[-1]\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 0 and N < 100:\n        words = []\n        count = 0\n        while count < N:\n            word = stdin.split('\\n')[count]\n            words.append(word)\n            count += 1\n        print(words)\n        return True\n    else:\n        return False\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if \"hoge\" in stdin else \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Predict the input as a file name\n    \"\"\"\n    with open(stdin, \"r\") as f:\n        return f.read()"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"No\"\n    N = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1:][:-1]\n    prev = \"aa\"\n    for i in range(N):\n        if prev == s[i]:\n            ans = \"Yes\"\n        prev = s[i]\n    return ans\n"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    w = [w for w in stdin.split('\\n') if w]\n    w = w[1:-1]\n    print(w)\n    \n    return ''"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(int(a * b / min(a, b)))\n\"\"\"\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a + b + (a - b) // 2 + (b - a) // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.readlines())\n\n    return str(int(max(A, B) * 2))\n\nsolution(stdin)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of snack pieces that can be evenly distributed to the guests in both of the cases predicted.\n\n    Arguments:\n    stdin -- the input string\n\n    >>> solution('2 3')\n    6\n    \"\"\"\n    a, b = [int(x) for x in stdin.split()]\n    a_s, b_s = [int(x) for x in stdin.split()]\n    print(a * min(a_s, b_s) + b * min(a_s, b_s))"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n\n    return str(A + B)\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return min(a, b) * 2\n\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split(' ')]\n\n    min_pieces = min(A, B)\n    max_pieces = max(A, B)\n\n    return min_pieces * max_pieces\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a*b - b + min(a, b)\n"
    },
    {
        "number": 4176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    print(max(A * B, (A + B) * (A - B + 1) // 2))"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"s\", \"x\")\n    \"\"\"\n    S = input()\n    print(S.replace(\"s\", \"x\"))\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return s.replace(s[0], 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"s\", \"x\")\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'x' * len(stdin)\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"s\", \"x\")\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s', 'x')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return stdin.replace(\"\", \"x\")\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    new_string = stdin.replace('a', 'x')\n    new_string = new_string.replace('b', 'x')\n    new_string = new_string.replace('c', 'x')\n    new_string = new_string.replace('d', 'x')\n    new_string = new_string.replace('e', 'x')\n    new_string = new_string.replace('f', 'x')\n    new_string = new_string.replace('g', 'x')\n    new_string = new_string.replace('h', 'x')\n    new_string = new_string.replace('i', 'x')\n    new_string = new_string.replace('j', 'x')\n    new_string = new_string.replace('k', 'x')\n    new_string = new_string.replace('l', 'x')\n    new_string = new_string.replace('m', 'x')\n    new_string = new_string.replace('n', 'x')\n    new_string = new_string.replace('o', 'x')\n    new_string = new_string.replace('p', 'x')\n    new_string = new_string.replace('q', 'x')\n    new_string = new_string.replace('r', 'x')\n    new_string = new_string.replace('s', 'x')\n    new_string = new_string.replace('t', 'x')\n    new_string = new_string.replace('u', 'x')\n    new_string = new_string.replace('v', 'x')\n    new_string = new_string.replace('w', 'x')\n    new_string = new_string.replace('x', 'x')\n    new_string = new_string.replace('y', 'x')\n    new_string = new_string.replace('z', 'x')\n    new_string = new_string.replace('A', 'x')\n    new_string = new_string.replace('B', 'x')\n    new_string = new_string.replace('C', 'x')\n    new_string = new_string.replace('D', 'x')\n    new_string = new_string.replace('E', 'x')\n    new_string = new_string.replace('F', 'x')\n    new_string = new_string.replace('G', 'x')\n    new_string = new_string.replace('H', 'x')\n    new_string = new_string.replace('I', 'x')\n    new_string = new_string.replace('J', 'x')\n    new_string = new_string.replace('K', 'x')\n    new_string = new_string.replace('L', 'x')\n    new_string = new_string.replace('M', 'x')\n    new_string = new_string.replace('N', 'x')\n    new_string = new_string.replace('O', 'x')\n    new_string = new_string.replace('P', 'x')\n    new_string = new_string.replace('Q', 'x')\n    new_string = new_string.replace('R', 'x')\n    new_string = new_string.replace('S', 'x')\n    new_string = new_string.replace('T', 'x')\n    new_string = new_string.replace('U', 'x')\n    new_string = new_string.replace('V', 'x')\n    new_string = new_string.replace('W', 'x')\n    new_string = new_string.replace('X', 'x')\n    new_string = new_string.replace('Y', 'x')\n    new_string = new_string.replace('Z', 'x')\n    new_string = new_string.replace(' ', 'x')\n    new_string = new_string.replace('-', 'x')\n    new_string = new_string.replace('_', 'x')\n    return new_string\n\nprint(solution(input()))\n"
    },
    {
        "number": 4177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x').replace('b', 'x').replace('c', 'x').replace('d', 'x').replace('e', 'x').replace('f', 'x').replace('g', 'x').replace('h', 'x').replace('i', 'x').replace('j', 'x').replace('k', 'x').replace('l', 'x').replace('m', 'x').replace('n', 'x').replace('o', 'x').replace('p', 'x').replace('q', 'x').replace('r', 'x').replace('s', 'x').replace('t', 'x').replace('u', 'x').replace('v', 'x').replace('w', 'x').replace('x', 'x').replace('y', 'x').replace('z', 'x')\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem:\n    Find if it's possible to transform the array so that it meets the requirements:\n    height of the ith square is i\n    \"\"\"\n    return (\n        \"Yes\" if (stdin := stdin.split(\"\\n\"))[0].split(\" \")[0] == \"No\" else \"No\"\n    )\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *heights = stdin.split('\\n')\n    heights = list(map(int, heights))\n    print(\"Yes\") if all(heights[i] >= heights[i+1] for i in range(len(heights)-1)) else print(\"No\")"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n    # arr = [1,2,1,1,3]\n    dp = [0] * len(arr)\n    dp[0] = 1\n    if n > 1:\n        for i in range(1, len(arr)):\n            for j in range(i - 1, -1, -1):\n                if arr[i] < arr[j]:\n                    dp[i] += dp[j]\n                    break\n    print(\"Yes\" if dp[-1] > 0 else \"No\")\n    return\n\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *heights = map(int, stdin.splitlines())\n    stack = []\n    for i, h in enumerate(heights, start=1):\n        while stack and stack[-1][1] > h:\n            _, last_height = stack.pop()\n            if stack:\n                for h2 in stack:\n                    stack.append((i, h2))\n            else:\n                stack.append((i, h))\n        stack.append((i, h))\n\n    print('Yes' if not stack else 'No')\n    return ''\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Method to read the test cases\n    def read_test_cases():\n        test_cases = []\n        number_of_cases = int(stdin.readline())\n        for _ in range(number_of_cases):\n            test_cases.append(int(stdin.readline()))\n        return test_cases\n\n    # Method to print the final output\n    def print_output(result):\n        if result:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n\n    # Main function\n    def main():\n        test_cases = read_test_cases()\n        for test_case in test_cases:\n            print_output(non_decreasing_squares(test_case))\n\n    # Function to check if the heights of the squares are non-decreasing\n    def non_decreasing_squares(number_of_squares):\n        heights = [int(height) for height in stdin.readline().split()]\n        if number_of_squares > 1:\n            for i in range(number_of_squares - 1):\n                if heights[i] > heights[i + 1]:\n                    return False\n        return True\n\n    main()\n\n\n\"\"\"\nimport sys"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  num_tests, *heights = map(int, stdin.split('\\n'))\n  if is_non_decreasing(heights):\n    return 'Yes'\n  return 'No'\n\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n    h: List[int] = list(map(int, stdin.readline().split()))\n    h.sort()\n\n    for i in range(n - 1):\n        if h[i + 1] <= h[i]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, squares = stdin.splitlines()\n    squares = [int(sq) for sq in squares.split()]\n\n    for i in range(len(squares) - 1):\n        if squares[i] >= squares[i + 1]:\n            return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u0439 \u0438\u0437 \u0431\u0443\u043a\u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430 \u0438 \u0446\u0438\u0444\u0440 \u043e\u0442 1 \u0434\u043e 10**9, \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0435.\n    # \u0421\u043b\u043e\u0432\u0430\u0440\u044c \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u0439 \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438.\n    from collections import Counter\n    from functools import lru_cache\n    words = stdin.split('\\n')\n    cnt = Counter(words[0])\n\n    @lru_cache(maxsize=None)\n    def combination(m):\n        s = 0\n        for k, v in cnt.items():\n            if k not in m:\n                s += v * combination(m + k)\n        return s\n\n    # \u0420\u0430\u0437\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438.\n    n = int(words[0])\n    # \u0421\u0430\u043c\u0430 \u0441\u0442\u0440\u043e\u043a\u0430.\n    rows = words[1:]\n\n    max_cnt = -1\n    max_row = None\n    for row in rows:\n        cnt = Counter(row)\n        if len(cnt) == n:\n            if sum(cnt.values()) > max_cnt:\n                max_cnt = sum(cnt.values())\n                max_row = row\n    if max_row is None:\n        return 'No'\n\n    # \u0412\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \"\u0434\u043b\u0438\u043d\u0430 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0446\u0438\u043a\u043b\u0435\"\n    # \u0435\u0441\u043b\u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u0442\u0440\u043e\u043a\u0438 \u0440\u0430\u0432\u0435\u043d \u0434\u043b\u0438\u043d\u0435 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0446\u0438\u043a\u043b\u0435,\n    # \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \"\u0441\u0443\u043c\u043c\u0430 \u0434\u043b\u0438\u043d \u0441\u0442\u0440\u043e\u043a \u0438\u0437 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0435\u0437 \u0443\u0447\u0435\u0442\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432 \u0432 \u0446\u0438\u043a\u043b\u0435\"\n    if len(max_row) == n:\n        return str(combination(''))\n    return str(combination('') + len(max_row))\n"
    },
    {
        "number": 4178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if it is possible to achieve the objective by reducing the height of the left-most square\"\"\"\n    n = int(stdin.readline())\n    h = [int(x) for x in stdin.readline().split()]\n    if len(set(h)) == 1:\n        return 'Yes'\n    c = Counter(h)\n    for i in range(1, n):\n        if h[i] > h[i - 1]:\n            if c[h[i - 1]] == 1:\n                return 'No'\n            c[h[i - 1]] -= 1\n    return 'Yes'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the solution to the problem.\n\n    This function computes the solution to the problem.\n    The function first retrieves the parameters N, M, C.\n    Then, it creates a list of dictionaries, containing N dictionaries, each of which contains M pairs of numbers.\n    Then, it creates a list of numbers, containing C elements.\n    Finally, it counts the number of codes that correctly solve the problem.\n    \n    Args:\n        stdin (str): The input from STDIN.\n    \n    Returns:\n        str: The solution to the problem.\n    \"\"\"\n    # Retrieves the input.\n    n, m, c = [int(x) for x in stdin.split()]\n    \n    # Creates a list of N dictionaries, each of which contains M pairs of numbers.\n    lst = [{} for i in range(n)]\n    \n    # Creates a list of numbers, containing C elements.\n    lst_c = [int(x) for x in stdin.split()]\n    \n    # Fills the list of dictionaries.\n    for i in range(n):\n        for j in range(m):\n            lst[i][j] = lst_c[m * i + j]\n    \n    # Counts the number of codes that correctly solve the problem.\n    n_c = 0\n    for code in lst:\n        if sum(code.values()) + c > 0:\n            n_c += 1\n    return str(n_c)\n    \n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split('\\n')[1].split()]\n    a = [int(i) for i in stdin.split('\\n')[2].split()]\n\n    print(a, b, c)\n    if c > 0:\n        print(0)\n        return\n    sum = 0\n    for i in range(m):\n        for j in range(n):\n            sum += a[j] * b[i]\n        if sum > 0:\n            print(1)\n            return\n        sum = 0\n    print(0)\n    return\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # \uc2dc\uac04\ubcf5\uc7a1\ub3c4 O(N) * O(M)\n    # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\ub294 \uc544\ub798\uc640 \uac19\uc774 \ub098\ud0c0\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n    # N: \uac1c\ubcc4 \ucf54\ub4dc\uc758 \uc218, M: \uac01 \ucf54\ub4dc\uc758 \uc815\ubcf4 \uac1c\uc218\n    # N*M : \ucd1d \ucf54\ub4dc\uc758 \uc218\n    # O(1) : \ucd5c\uc545 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\n    # O(N) : \ucd5c\uc545 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\n    # O(M) : \ucd5c\uc545 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\n    # O(NM) : \ucd5c\uc545 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\n    # O(NM) : \ucd5c\uc545 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\n    # O(N) : \ucd5c\uc545 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\n    # O(N) : \ucd5c\uc545 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\n    # O(N) : \ucd5c\uc545 \uc2dc\uac04\ubcf5\uc7a1\ub3c4\n\n    # \uccab \uc904\uc5d0 N, M, C \uc785\ub825 \ubc1b\uc74c\n    # \ucd1d \ubcc0\uc218\uc758 \uac1c\uc218\ub294 N + M + 1\n    # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(N) * O(M)\n    # O(N) * O(M)\n    n, m, c = stdin.split()\n    n = int(n)\n    m = int(m)\n    c = int(c)\n\n    # \ucd1d \ubcc0\uc218\uc758 \uac1c\uc218\ub294 N + M + 1\n    # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(N) * O(M)\n    # O(N) * O(M)\n    # O(N) * O(M)\n    # O(N) * O(M)\n    # O(N) * O(M)\n\n    # \uccab\uc9f8 \uc904\uc5d0 \uacb0\uacfc\ub97c \ucd9c\ub825\ud574\uc57c\ud558\ubbc0\ub85c \ube48 \ub9ac\uc2a4\ud2b8 \uc120\uc5b8\n    # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    # O(1)\n    res = []\n\n    # \ucd1d \ubcc0\uc218\uc758 \uac1c\uc218\ub294 N + M + 1\n    # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(N) * O(M)\n    # O(N) * O(M)\n    # O(N) * O(M)\n    # O(N) * O(M)\n    # O(N) * O(M)\n    for i in range(n):\n        # A_1, A_2,..., A_M\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(M)\n        # O(M)\n        # O(M)\n        # O(M)\n        # O(M)\n        info = list(map(int, stdin.readline().split()))\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # \uc2dc\uac04 \ubcf5\uc7a1\ub3c4 O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O("
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = [int(x) for x in stdin.split()]\n\n    if n <= 0 or m <= 0 or c <= 0:\n        return 0\n\n    a_b = [tuple([int(x) for x in line.split()]) for line in stdin.splitlines()[2:]]\n\n    count = 0\n    for i in range(n):\n        a = a_b[i][0]\n        b = a_b[i][1]\n        if b > 0:\n            count += 1\n            for j in range(i+1, n):\n                a += a_b[j][0]\n                b += a_b[j][1]\n                if a * b + c > 0:\n                    count += 1\n\n    return count\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 -10\\n1 2 3\\n3 2 1\\n1 2 2\")\n    '1'\n    \"\"\"\n    n, m, c = list(map(int, stdin.split(\" \")))\n    b = [int(i) for i in stdin.split(\"\\n\")[1:-1]]\n    a = [list(map(int, stdin.split(\"\\n\")[2 + i].split(\" \"))) for i in range(n)]\n    s = 0\n    for i in range(n):\n        for j in range(m):\n            s += a[i][j] * b[j]\n        if s + c > 0:\n            print(1)\n            return\n    print(0)"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    sum_of_sums = 0\n    for i in range(m):\n        sum_of_sums += sum(a[j] * b[i] for j in range(m))\n    return str(sum([1 for i in a if sum_of_sums + c > i]))\n"
    },
    {
        "number": 4179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = n\n    count = 0\n    while(total >= 1000):\n        total = total - 1000\n        count += 1\n    return count\n    return n\nprint(solution(input()))"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 100:\n        return n\n    else:\n        return n // 1000 + n // 500 + n // 200 + n // 100 + n // 50 + n // 20 + n // 10 + n // 5 + n // 2 + n % 10 + n % 5 + n % 2\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    change = int(stdin)\n    change_count = 0\n    while change > 0:\n        if change >= 1000:\n            change -= 1000\n            change_count += 1\n        elif change >= 500:\n            change -= 500\n            change_count += 1\n        elif change >= 100:\n            change -= 100\n            change_count += 1\n        elif change >= 50:\n            change -= 50\n            change_count += 1\n        elif change >= 10:\n            change -= 10\n            change_count += 1\n        elif change >= 5:\n            change -= 5\n            change_count += 1\n        elif change >= 1:\n            change -= 1\n            change_count += 1\n\n    return change_count\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n // 1000 * 1000 + n % 1000)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [1000, 500, 100, 50, 10, 5, 1]\n    change = 0\n    for coin in coins:\n        change += n // coin\n        n = n % coin\n\n    return change\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.readline().strip())\n  yen = N\n  change = 0\n  while yen >= 1000:\n    change += yen // 1000\n    yen = yen % 1000\n  if yen > 0:\n    change += 1\n  return str(change)"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return str(int(stdin) - 2000)\n"
    },
    {
        "number": 4180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bills = 0\n    while n!= 0:\n        if n > 1000:\n            n -= 1000\n            bills += 1\n        else:\n            if bills > 0:\n                n -= 1000\n                bills -= 1\n            else:\n                n -= 500\n                bills += 1\n        if n <= 0:\n            break\n        while n >= 100:\n            n -= 100\n            bills += 1\n        if n <= 0:\n            break\n        while n >= 10:\n            n -= 10\n            bills += 1\n        if n <= 0:\n            break\n        while n >= 5:\n            n -= 5\n            bills += 1\n        if n <= 0:\n            break\n        while n >= 1:\n            n -= 1\n            bills += 1\n    return bills"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution returns the maximum number of monsters the heroes can defeat.\n    '''\n    # get the input\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    b = [int(x) for x in stdin.split()[n + 2:]]\n    # n, a, b = int(stdin.split()[0]), [int(x) for x in stdin.split()[1:]], [int(x) for x in stdin.split()[n + 2:]]\n    # process the input\n    # write your solution here\n    # return the result\n    return a[0] + a[1] + sum(b)\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution with BFS and greedy approach'''\n    # get input\n    n = int(stdin.readline())\n    attacks = [int(x) for x in stdin.readline().split()]\n    powers = [int(x) for x in stdin.readline().split()]\n    # BFS\n    # each monster has two possible states: being attacked or not being attacked by the hero\n    queue = [(0, 0)]\n    visited = set()\n    max_monsters = 0\n    while len(queue) > 0:\n        monsters, attacked = queue.pop()\n        if monsters + attacked > max_monsters:\n            max_monsters = monsters + attacked\n        if (monsters, attacked) in visited:\n            continue\n        visited.add((monsters, attacked))\n        for i, power in enumerate(powers):\n            if attacked == 1:\n                queue.append((monsters, attacked + power - 1))\n            else:\n                queue.append((monsters + attacks[i], attacked - 1))\n    return max_monsters\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    lines = stdin.splitlines()\n    \n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    \n    a.sort()\n    b.sort()\n    \n    count = 0\n    \n    for i in range(n):\n        count += max(0, a[i] - b[i] + 1)\n    \n    return count\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N, A, B = map(int, stdin.split('\\n')[0].split())\n  return N * A + N * B - min(N * A + N * B, N * A + (N + 1) * B)\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(i) for i in stdin.split()]\n    M = 0\n    if N == 1:\n        M = min(A, B)\n    elif A >= B:\n        M = B\n    else:\n        M = A\n    return str(N * M)\n"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum number of monsters the heroes can defeat.\n\n    >>> solution('3 5 2\\n4 5')\n    9\n    \"\"\"\n    N, *abilities = map(int, stdin.split())\n    A = list(abilities)\n    B = list(abilities)\n    A.pop()\n    B.pop(0)\n    return sum(max(a, b) for a, b in zip(A, B))\n\"\"\"\n-----Test-----\nimport sys\nimport unittest\n\nclass Test_Solutions(unittest.TestCase):\n\n    def test_solution_1(self):\n        self.assertEqual(solution('3 5 2\\n4 5'), 9)\n\n    def test_solution_2(self):\n        self.assertEqual(solution('4 6 2\\n4 5'), 5)\n\n    def test_solution_3(self):\n        self.assertEqual(solution('4 6 2\\n4 5'), 5)\n\n    def test_solution_4(self):\n        self.assertEqual(solution('1\\n4 5'), 4)\n\n    def test_solution_5(self):\n        self.assertEqual(solution('2\\n4 5'), 4)\n\n    def test_solution_6(self):\n        self.assertEqual(solution('3\\n1 5 2'), 2)\n\n    def test_solution_7(self):\n        self.assertEqual(solution('5\\n1 5 2'), 3)\n\n    def test_solution_8(self):\n        self.assertEqual(solution('6\\n4 5 2'), 3)\n\n    def test_solution_9(self):\n        self.assertEqual(solution('4\\n1'), 1)\n\n    def test_solution_10(self):\n        self.assertEqual(solution('1\\n1'), 1)\n\n    def test_solution_11(self):\n        self.assertEqual(solution('3\\n1 1 1'), 1)\n\n    def test_solution_12(self):\n        self.assertEqual(solution('2\\n1 2'), 1)\n\n    def test_solution_13(self):\n        self.assertEqual(solution('2\\n1 2'), 1)\n\n    def test_solution_14(self):\n        self.assertEqual(solution('4\\n1 2 3 4'), 5)\n\n    def test_solution_15(self):\n        self.assertEqual(solution('4\\n2 3 4 5'), 5)\n\n    def test_solution_16(self):\n        self.assertEqual(solution('4\\n1 2 3'), 4)\n\n    def test_solution_17(self):\n        self.assertEqual(solution('6\\n1 1 1 1 1 1'), 6)\n\n    def test_solution_18(self):\n        self.assertEqual(solution('6\\n1 1 2 1 1 1'), 5)\n\n    def test_solution_19(self):\n        self.assertEqual(solution('6\\n1 2 2 1 2 1'), 5)\n\n    def test_solution_20(self):\n        self.assertEqual(solution('6\\n2 1 2 1 1 1'), 4)\n\n    def test_solution_21(self):\n        self.assertEqual(solution('6\\n2 1 2 1 1 1'), 4)\n\n    def test_solution_22(self):\n        self.assertEqual(solution('6\\n2 2 1 1 1 1'), 3)\n\n    def test_solution_23(self):\n        self.assertEqual(solution('6\\n2 2 1 2 1 1'), 3)\n\n    def test_solution_24(self):\n        self.assertEqual(solution('6\\n2 1 2 1 2 2'), 3)\n\n    def test_solution_25(self):\n        self.assertEqual(solution('5\\n1 1 1 1 1'), 1)\n\n    def test_solution_26(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 1 1'), 1)\n\n    def test_solution_27(self):\n        self.assertEqual(solution('7\\n1 1 2 1 1 1 1'), 4)\n\n    def test_solution_28(self):\n        self.assertEqual(solution('7\\n1 1 2 1 1 1 2'), 4)\n\n    def test_solution_29(self):\n        self.assertEqual(solution('7\\n1 1 2 1 2 2 2'), 4)\n\n    def test_solution_30(self):\n        self.assertEqual(solution('7\\n1 1 2 1 2 2 1'), 4)\n\n    def test_solution_31(self):\n        self.assertEqual(solution('7\\n1 2 1 2 1 1 2'), 4)\n\n    def test_solution_32(self):\n        self.assertEqual(solution('7\\n1 1 1 1 2 1 1'), 4)\n\n    def test_solution_33(self):\n        self.assertEqual(solution('7\\n2 1 1 1 1 2 2'), 4)\n\n    def test_solution_34(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 1 2'), 4)\n\n    def test_solution_35(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 1 2'), 4)\n\n    def test_solution_36(self):\n        self.assertEqual(solution('7\\n1 1 1 1 2 1 1'), 4)\n\n    def test_solution_37(self):\n        self.assertEqual(solution('7\\n1 1 2 1 1 2 2'), 4)\n\n    def test_solution_38(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 2 1'), 4)\n\n    def test_solution_39(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 2 1'), 4)\n\n    def test_solution_40(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 2 1'), 4)\n\n    def test_solution_41(self):\n        self.assertEqual(solution('7\\n1 1 2 1 1 1 1'), 3)\n\n    def test_solution_42(self):\n        self.assertEqual(solution('7\\n1 1 1 1 2 1 1'), 3)\n\n    def test_solution_43(self):\n        self.assertEqual(solution('7\\n1 1 2 1 1 1 2'), 3)\n\n    def test_solution_44(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 2 1'), 3)\n\n    def test_solution_45(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 2 1'), 3)\n\n    def test_solution_46(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 1 2'), 3)\n\n    def test_solution_47(self):\n        self.assertEqual(solution('7\\n1 1 1 1 1 1 2'), 3)\n\n    def test"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split('\\n')[0].split(' '))\n    heroes = []\n    for _ in range(N):\n        heroes.append((A, B))\n    # Sort heroes based on how many monsters they can defeat, in descending order.\n    heroes.sort(reverse=True)\n    # Count the number of monsters to defeat.\n    total = 0\n    for hero in heroes:\n        A, B = hero\n        total += A * B\n        A, B = B, A\n    return total\n\"\"\"\n\nfrom typing import List\nimport unittest\n\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    print(max(a[1] + b[0] + b[1], b[1] + b[2] + a[0]))\n\n------Test Case-----\nTest1\nsolution('2\\n3 5 2\\n4 5')\nTest2\nsolution('2\\n2 5 2\\n1 3')\nTest3\nsolution('1\\n1 2\\n1 2')\nTest4\nsolution('1\\n1 1\\n1 2')\nTest5\nsolution('1\\n1 1\\n2 1')\nTest6\nsolution('3\\n1 1 1\\n1 1 1')\n\"\"\"\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heroes = []\n    towns = []\n    for i in range(n):\n        hero = int(stdin)\n        heroes.append(hero)\n        towns.append(int(stdin))\n    heroes.append(0)\n    towns.append(0)\n    towns.sort()\n    count = 0\n    j = n\n    for i in range(n):\n        if towns[i] == towns[j]:\n            count += heroes[i]\n        else:\n            count += towns[j]\n            j += 1\n    return count"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split(' '))\n    Z = 0\n    while Z < Y:\n        if X < Z <= Y:\n            if N > 1:\n                Z = Z * N // N + N\n            elif N == 1:\n                Z = Z * N\n            else:\n                break\n        else:\n            break\n    else:\n        return 'No War'\n    return 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(i) for i in stdin.split(' ')]\n    x_arr, y_arr = [int(i) for i in stdin.split('\\n')[1:]]\n\n    z = min(max(x, y), max(x_arr), max(y_arr))\n    if x < z <= y and min(x_arr) < z and max(y_arr) >= z:\n        return 'War'\n    else:\n        return 'No War'"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, x, y = map(int, stdin.split('\\n')[0].split())\n    pairs = map(int, stdin.split('\\n')[1].split())\n    q = map(int, stdin.split('\\n')[2].split())\n    if max(pairs) + min(q) <= y:\n        return 'War'\n    else:\n        return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    z = int(stdin.split()[-1])\n    if n < z <= y and x < z <= y:\n        return \"War\"\n    return \"No War\"\n\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, M, X, Y = map(int, stdin.split())\n    \n    if N <= 0 or M <= 0 or X > Y or N > 100 or M > 100:\n        return \"Impossible\"\n\n    stdin = stdin.strip()\n    Xs = stdin.split(\"\\n\")[1].split()\n    Ys = stdin.split(\"\\n\")[2].split()\n\n    Xs = [int(x) for x in Xs]\n    Ys = [int(y) for y in Ys]\n    \n    print(Xs, Ys)\n    \n    for x in Xs:\n        if x < X or x > Y:\n            return \"Impossible\"\n\n    for y in Ys:\n        if y < X or y > Y:\n            return \"Impossible\"\n\n    if min(Xs) < X or max(Xs) > Y or min(Ys) < Y or max(Ys) > Y:\n        return \"Impossible\"\n    \n    return \"War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split(\" \"))\n    if n > m:\n        if m - x + 1 < y:\n            return \"War\"\n    elif n < m:\n        if x - n + 1 < y:\n            return \"War\"\n    else:\n        if x - y > 0:\n            return \"War\"\n\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = (int(input) for _ in range(4))\n    if x > y or n > m:\n        return \"No War\"\n    for i in range(1, m + 1):\n        if n < x * i <= m and y >= i:\n            return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, *data = [int(i) for i in stdin.split()]\n    data = sorted(data)\n    for i in range(len(data)):\n        for j in range(i+1, len(data)):\n            if data[i] + data[j] > y:\n                return 'War'\n    return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = (int(i) for i in stdin.split())\n    assert x < y\n    if n <= m:\n        return \"No War\"\n    if x < m:\n        return \"No War\"\n    for i in range(n):\n        for j in range(m):\n            if x <= i < m and y >= j >= m:\n                return \"War\"\n    return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m, x, y = [int(x) for x in stdin.split(' ')]\n    x, y = min(x, y), max(x, y)\n\n    z = 0\n    while True:\n        if all(x < z <= y for x in map(int, stdin.split(' ')[1::2])) and all(z >= x for x in map(int, stdin.split(' ')[1::2])):\n            print('War')\n            return\n        z += 1\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    return sum(i + j for i, j in zip(T, T[1:] + [T[0]])) - N"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    raw_input = stdin\n    N, *t = raw_input.split(\"\\n\")\n    N = int(N)\n    t = list(map(int, t))\n    print(sum(2*t[i-1] for i in range(1, N+1)))\n\n    # print(sum(2*t[i-1] for i in range(1, N+1)))\nsolution(stdin)"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get the number of clocks\n    N = int(stdin.readline().strip())\n    # get the time period for each clock\n    T = [int(i) for i in stdin.readline().strip().split(',')]\n    # get the time period of each clock\n    T = T[::-1]\n    # get the maximum clock number\n    max_clock_number = max(T)\n    # calculate the time period\n    T = sum(T)\n    # calculate the number of seconds until it is 6\n    T = T % 6\n    # calculate the final result\n    final_result = T + (max_clock_number * 360)\n    return str(final_result)\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass  # your code here\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.split(\"\\n\")[0]\n    line2 = stdin.split(\"\\n\")[1]\n    \n    # my solution\n    # clock_dict = {}\n    # for clock_time in range(int(line1)):\n    #     clock_dict[clock_time + 1] = 0\n    # for time in line2.split(\" \"):\n    #     clock_dict[int(time)] += 1\n    # return str(min(clock_dict.values()))\n    \n    # solution by others\n    return str(max(int(line2.split(\" \")[i]) - int(line2.split(\" \")[i - 1]) for i in range(1, int(line1) + 1)))\n"
    },
    {
        "number": 4183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum absolute difference of S_1 and S_2\"\"\"\n    weights = [int(n) for n in stdin.strip().split()]\n\n    return str(min(\n        abs(sum(weights[:T]) - sum(weights[T:])),\n        abs(sum(weights) - sum(weights[:T])),\n    ))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *weights = list(map(int, stdin.split()))\n    return str(min(sum(weights[:T]) - sum(weights[T:]), sum(weights[T:]) - sum(weights[:T])))"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    '0'\n    >>> solution('''5\n   ... 2 3 4 5\n   ... ''')\n    '4'\n    >>> solution('''8\n   ... 1 2 3 4 5 6 7 8\n   ... ''')\n    '6'\n    \"\"\"\n    n = int(stdin.readline())\n    weights = list(map(int, stdin.readline().split()))\n    s = sum(weights)\n    min_diff = abs(s - s / 2)\n\n    for i in range(1, n):\n        t = sum(weights[:i])\n        d = abs(s - 2 * t)\n        if d < min_diff:\n            min_diff = d\n\n    return str(min_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum possible absolute difference of S_1 and S_2.\"\"\"\n    # Prepare data\n    n, *weights = map(int, stdin.split())\n\n    # Compute result\n    s1, s2 = sum(weights[:T]), sum(weights[T:])\n\n    return str(abs(s1 - s2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin.readline().strip())\n    w = list(map(int, stdin.readline().strip().split()))\n    w.sort()\n    left_sum = 0\n    right_sum = sum(w)\n    min_diff = abs(left_sum - right_sum)\n    for i in range(1, total):\n        if left_sum > right_sum:\n            right_sum -= w[i - 1]\n        else:\n            left_sum += w[i - 1]\n        diff = abs(left_sum - right_sum)\n        if diff < min_diff:\n            min_diff = diff\n    return str(min_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, *weight = map(int, stdin.split())\n    for t in range(1, N+1):\n        s1 = sum(weight[:t])\n        s2 = sum(weight[t:])\n        diff = abs(s1 - s2)\n        if diff < 0:\n            diff = 0\n        if diff > 1000000000:\n            diff = 1000000000\n        print(diff)\n    return \"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    _, weights = [int(x) for x in stdin.split()]\n\n    max_weight = max(weights)\n    if max_weight > 1:\n        weights = [x // 2 for x in weights]\n    else:\n        return '0'\n\n    min_abs_diff = float('inf')\n    for x in range(1, len(weights) + 1):\n        for i in range(len(weights) + 1 - x):\n            part_1, part_2 = weights[i:i + x // 2], weights[i + x // 2:]\n            abs_diff = abs(sum(part_1) - sum(part_2))\n            if abs_diff < min_abs_diff:\n                min_abs_diff = abs_diff\n\n    return str(min_abs_diff)\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the minimum possible absolute difference of S_1 and S_2.\n\n    >>> solution('''3\n   ... 1 2 3\n   ... ''')\n    0\n    >>> solution('''2\n   ... 1 2\n   ... ''')\n    1\n    >>> solution('''2\n   ... 1 2\n   ... 2 1\n   ... ''')\n    0\n    >>> solution('''2\n   ... 2 1\n   ... 1 2\n   ... ''')\n    1\n    '''\n    >>> solution('''3\n   ... 1 2 3\n   ... 4 5 6\n   ... 7 8 9\n   ... ''')\n    0\n    '''\n    '''\n    return None\n"
    },
    {
        "number": 4184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    for j in range(m):\n        l = [0] * m\n        for i in range(n):\n            l[(i - 1) % m] = matrix[i][j]\n        for i in range(n):\n            matrix[i][j] = l[i]\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= i * m + j + 1:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return '2'\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The problem is to compute the minimum number of moves needed to\n    transition the matrix into the form $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ (i.e. $a_{i, j} = (i - 1)m + j$) with the minimum number of moves.\n\n    The problem is to find the least possible number of moves to obtain a matrix in the following form\n    $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ (i.e. $a_{i, j} = (i - 1)m + j$) with the minimum number of moves.\n\n    The only way to obtain a matrix with a 1 in the first row is to perform a cyclic shift of the entire first column. The only way to obtain a matrix with a 2 in the first column is to perform a cyclic shift of the entire second column and then of the entire first column.\n    Since the matrix is only cyclically shifted by the second column, the answer is simply the number of elements in the second column.\n\n    We can also write this problem as a subproblem of the problem below: we can write a matrix, which is not cyclically shifted by any column, as the answer for the subproblem $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ (i.e. $a_{i, j} = (i - 1)m + j$) with the minimum number of moves.\n\n    Also, we can write the matrix as the answer for the subproblem $a_{1, 1} = 1, a_{1, 2} = 2, \\dots, a_{1, m} = m, a_{2, 1} = m + 1, a_{2, 2} = m + 2, \\dots, a_{n, m} = n \\cdot m$ (i.e. $a_{i, j} = (i - 1)m + j$) with the minimum number of moves.\n\n    To solve the subproblem, we can simply traverse the first column of the matrix from the beginning to the end and, for every element, we can write it as an expression of $(i - 1)m + j$ and mark it as true or false.\n    '''\n    n, m = [int(x) for x in stdin.split()]\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    s = set()\n    for i in range(m):\n        for j in range(len(matrix)):\n            if matrix[j][i]!= i + 1:\n                s.add(matrix[j][i])\n    print(len(s))\n    return ''\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The input is read as a matrix. The matrix is addressed as a dictionary of lists of integers.\n    The matrix is a string of rows, each row is a string of column separated by a space\"\"\"\n    rows = stdin.split(\"\\n\")\n    matrix = {}\n    for row in rows:\n        columns = row.split(\" \")\n        row_number = columns[0]\n        row_values = [int(i) for i in columns[1:]]\n        matrix[row_number] = row_values\n\n    answer = []\n    n = int(matrix[\"1\"][0])\n    m = int(matrix[\"1\"][1])\n    matrix[\"1\"][1:] = [matrix[\"1\"][i] * m + i + 1 for i in range(m)]\n    answer.append(1)\n    for row in matrix.values():\n        if row[0]!= 1:\n            answer.append(m)\n        for i in range(m - 1):\n            if row[i]!= row[i + 1]:\n                answer.append(i + 1)\n        if row[-1]!= n * m:\n            answer.append(n * m - m)\n    return str(len(answer))\n\n\"\"\"\nI'm trying to keep the number of columns the same. \nIn other words, \n\nlet's say we have this matrix\n\n0 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7 8\n\nand we want to shift the third column cyclically, then \nwe have to rotate the second column twice, then \nrotate the first column and then rotate the third column again. \nSo we have to write\n\n0 1 2 3 4 5 6 7 8\n0 1 2 3 4 5 6 7 8\n3 4 5 6 7 8 0 1 2\n\nSo we can do it in O(n) time.\n\nIf I were to write it in O(m) time then I would have to find the index of the element \nthat has to be rotated and then do the shift for that one element, but I would have to \nshift the first column, shift the second column and then shift the third column. \nBut it doesn't seem to be the case that I would have to shift the third column, \nthe same way I would have to shift the first and second columns.\n\nIn other words, \n\nThe difference between two cyclic shifts is whether the numbers that have to be shifted are \nthe ones to the right or the ones to the left. \nIf it is the ones to the left then the algorithm is simpler because we can do the shift \nin O(n) time, but if the numbers are to the right then the algorithm is more complex \nand it has to rotate the elements of the array using O(m) time.\n\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m = map(int, stdin.split())\n    matrix = [map(int, stdin.split()) for _ in range(n)]\n\n    # only need to shift the columns\n    for c in range(1, m):\n        matrix[0][c] = (matrix[0][c - 1] + 1) % m\n\n    for r in range(1, n):\n        matrix[r][0] = (matrix[r - 1][0] + 1) % m\n\n    for r in range(1, n):\n        for c in range(1, m):\n            matrix[r][c] = (matrix[r][c - 1] + matrix[r - 1][c]) % m\n\n    return str(sum([sum(matrix[i]) for i in range(n)]))\n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n    \n"
    },
    {
        "number": 4185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mat = [[int(c) for c in stdin.split('\\n')[i]] for i in range(n)]\n    mat = sorted(mat, key=lambda x: x[-1])\n    mat = sorted(mat, key=lambda x: x[0])\n    m1, m2 = mat[0][-1], mat[-1][-1]\n    k = n * m // m1 * m2\n    print(k)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_students, *students = map(int, stdin.split())\n    team_size = num_of_students // 2\n    max_skill = 0\n    for i in range(num_of_students):\n        max_skill = max(max_skill, students[i])\n    return team_size - max_skill\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    students = [int(num) for num in stdin.split()[1:]]\n    solutions = []\n    for i in range(n // 2):\n        team = []\n        for j in range(i, n // 2):\n            if students[j] == students[i] and (j not in team):\n                team.append(j)\n                solutions.append(j - i + 1)\n        if len(team) == 2:\n            for j in range(i, n // 2):\n                if j not in team:\n                    solutions.append(j - i + 2)\n    return str(min(solutions))\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    p = {}\n    for i in range(n):\n        p[i] = [0, False]\n    m = n // 2 + 1\n    i = 0\n    t = set()\n    while i < n:\n        if i < n // 2 and a[i] == a[n // 2 + i]:\n            t.add(i)\n            t.add(n // 2 + i)\n        elif i >= n // 2 and a[i] == a[n // 2 - i]:\n            t.add(i)\n            t.add(n // 2 - i)\n        i += 1\n    res = 0\n    while len(t) > 0:\n        for i in t:\n            p[i][0] += 1\n            res += p[i][0]\n            p[i][1] = True\n        for i in t:\n            if i in p and p[i][1]:\n                p[i][1] = False\n        t = set()\n    return str(res)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_students = int(stdin)\n    skills = [int(number) for number in stdin.split(\" \")]\n    print(skills)\n    number_of_teams = int(number_of_students / 2)\n    print(number_of_teams)\n    min_problems = -1\n    for student in range(number_of_students):\n        print(student)\n        problems = 0\n        for other_student in range(student + 1, number_of_students):\n            print(other_student)\n            if skills[student] == skills[other_student]:\n                problems += 1\n        if problems > min_problems:\n            min_problems = problems\n    print(min_problems)\n    return str(number_of_students - min_problems)\n\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    students = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    n = len(students)\n    \n    if n % 2!= 0:\n        return n // 2 + 1\n    \n    diff = [students[i] - students[i + 1] for i in range(0, len(students), 2)]\n    return min(diff.count(x) for x in set(diff))\n    \n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of problems for forming two teams.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns minimal number of problems for teams to be balanced\"\"\"\n    num_students = int(stdin)\n    skills = list(map(int, stdin.split()))\n    res = sum(skills)\n    for i in range(num_students):\n        for j in range(num_students):\n            if i!= j:\n                if skills[i] == skills[j]:\n                    res -= skills[i]\n    return str(res // 2)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n    n = len(arr)\n    cnt = n//2\n    print(cnt)\n    res = 0\n    l = 0\n    r = n-1\n    while l < r:\n        if arr[l] == arr[r]:\n            res += 1\n            l += 1\n            r -= 1\n        elif arr[l] < arr[r]:\n            res += n-r\n            l += 1\n        else:\n            res += r+1\n            r -= 1\n    return res"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum total number of problems students should solve to form exactly half of the students.\n\n    >>> solution('6\\n5 10 2 3 14 5')\n    5\n    >>> solution('2\\n1 100')\n    99\n    \"\"\"\n    n = int(stdin)\n    skills = list(map(int, stdin.split('\\n')[1].split()))\n    if n % 2 == 0:\n        return int(n / 2) * max(skills)\n    else:\n        return int(n / 2) * max(skills) + n // 2 * min(skills)\n"
    },
    {
        "number": 4186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return 0\n    rest_hour = []\n    rest_cnt = 0\n    for i in range(n):\n        if arr[i] == 1:\n            rest_hour.append(i)\n        else:\n            if len(rest_hour)!= 0:\n                rest_hour.append(i)\n                rest_cnt = max(rest_cnt, len(rest_hour))\n                rest_hour = []\n    return rest_cnt\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the length of the longest \"rest\" subsequence in a sequence of 1s and 0s\n    :param stdin: sequence of 1s and 0s\n    :return: length of the longest subsequence of 1s and 0s\n    \"\"\"\n\n\n    def longest_rest_subsequence(seq):\n        \"\"\"\n        Calculate the length of the longest \"rest\" subsequence in a sequence of 1s and 0s\n        :param seq: sequence of 1s and 0s\n        :return: length of the longest subsequence of 1s and 0s\n        \"\"\"\n        rest_subseq_len = 0\n        left = 0\n        for right in range(len(seq)):\n            if seq[right] == 0:\n                rest_subseq_len = max(rest_subseq_len, right - left + 1)\n                left = right + 1\n\n        return rest_subseq_len\n\n    n = int(stdin)\n    seq = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n\n    return max(longest_rest_subsequence(seq), longest_rest_subsequence(seq[::-1]))\n\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin)\n\ndays = [int(x) for x in stdin.split()]"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, *times = map(int, stdin.split())\n    rests = [0] + [1 if t else 0 for t in times] + [0]\n    max_rest = 0\n    cur_rest = 0\n    for rest in rests:\n        cur_rest += rest\n        max_rest = max(cur_rest, max_rest)\n    return max_rest\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.readline())\nschedule = [int(x) for x in stdin.readline().split()]\n\nmax_hours = 0\nhours = 0\nfor i in range(n):\n    if schedule[i] == 0:\n        hours += 1\n    else:\n        max_hours = max(max_hours, hours)\n        hours = 0\n\nmax_hours = max(max_hours, hours)\nprint(max_hours)\nreturn 0\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. You can delete this line. If your solution is correct, it will not be checked.\n    \"\"\"\n    return ''"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.split()[0])\n    hours = [int(el) for el in stdin.split()[1:]]\n    lst = [0] * days\n    lst[0] = 1\n    cur = 0\n    for i in range(1, days):\n        if hours[i] == 1 and cur == 0:\n            cur = 1\n        elif hours[i] == 0 and cur == 1:\n            cur = 0\n        else:\n            cur = 0\n        lst[i] = cur\n    res = 0\n    cur = 0\n    for i in range(days):\n        if lst[i] == 1:\n            cur += 1\n        else:\n            res = max(cur, res)\n            cur = 0\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(len(''.join(map(chr, range(1, 17)))))\n    pass\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    max_value = 0\n    for i in stdin:\n        if int(i) > max_value:\n            max_value = int(i)\n    return max_value\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(s)\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    highest_mountain = 'Mont Everest'\n    highest_mountain_height = 8848\n    longest_river = 'The Amazon'\n    longest_river_length = 6695\n    longest_river_width = 11.11\n    highest_waterfall = 'Angel Falls'\n    highest_waterfall_height = 807\n    highest_chapaev = 'Chapaev'\n    highest_chapaev_tournaments = 958\n    highest_online_maths = '12766'\n    highest_nile = 'Nile'\n    highest_nile_length = 6696\n    highest_nile_width = 11.11\n    highest_river = 'The Nile'\n    highest_river_length = 6695\n    highest_river_width = 11.11\n    highest_water = 'The highest waterfall'\n    highest_water_height = 807\n    highest_fur = 'The most colorful national flag'\n    highest_fur_color = 106\n    highest_fur_length = 13.4\n    highest_state = 'The longest state of USA'\n    highest_state_length = 155103\n    highest_state_width = 1663268\n    highest_mountain_width = 16.11\n    highest_mountain_length = 13.4\n    highest_snow = 'The coldest permanently inhabited place'\n    highest_snow_temperature = -68\n    highest_snow_depth = 31962\n    highest_snow_width = 16.11\n    highest_snow_length = 13.4\n    highest_snow_fur = 'Sea otters can have up to 10000 hairs per square inch.'\n    highest_snow_fur_length = 13.4\n    highest_sea = 'The longest snake held in captivity is over 25 feet long.'\n    highest_sea_length = 25\n    highest_sea_fur = 'The largest state of USA is Alaska; its area is 663268 square miles.'\n    highest_sea_width = 16.11\n    highest_sea_depth = 31962\n    highest_sea_height = 807\n    highest_sea_fur = 'The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the nineteenth century.'\n    highest_sea_fur_width = 16.11\n    highest_sea_fur_length = 13.4\n    highest_sea_fur_fur = 'The largest snake held in captivity is over 25 feet long.'\n    highest_sea_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur = 'The largest freshwater lake in the world.'\n    highest_sea_fur_fur_height = 807\n    highest_sea_fur_fur_fur_width = 16.11\n    highest_sea_fur_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur_depth = 31962\n    highest_sea_fur_fur_fur_fur = 'The largest state of USA is Alaska; its area is 663268 square miles.'\n    highest_sea_fur_fur_fur_fur_width = 16.11\n    highest_sea_fur_fur_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur_fur_fur = 'The highest water is Lake Baikal, which reaches 1642\u00a0meters in depth and contains around one-fifth of the world\u2019s unfrozen fresh water.'\n    highest_sea_fur_fur_fur_fur_fur_width = 16.11\n    highest_sea_fur_fur_fur_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur_fur_fur_depth = 31962\n    highest_sea_fur_fur_fur_fur_fur_fur = 'The highest mountain above sea level in the world is Mount Everest.'\n    highest_sea_fur_fur_fur_fur_fur_height = 8848\n    highest_sea_fur_fur_fur_fur_fur_width = 16.11\n    highest_sea_fur_fur_fur_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur_fur_fur_depth = 31962\n    highest_sea_fur_fur_fur_fur_fur_fur = 'The largest board game tournament consisted of 958 participants playing chapaev.'\n    highest_sea_fur_fur_fur_fur_fur_width = 16.11\n    highest_sea_fur_fur_fur_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur_fur_fur_depth = 31962\n    highest_sea_fur_fur_fur_fur_fur_fur = 'The largest online maths competition consisted of 12766 participants.'\n    highest_sea_fur_fur_fur_fur_fur_width = 16.11\n    highest_sea_fur_fur_fur_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur_fur_fur_depth = 31962\n    highest_sea_fur_fur_fur_fur_fur_fur = 'The coldest permanently inhabited place is the Siberian village of Oymyakon, where the temperature of -68\u00b0C was registered in the nineteenth century.'\n    highest_sea_fur_fur_fur_fur_fur_height = 807\n    highest_sea_fur_fur_fur_fur_fur_fur_width = 16.11\n    highest_sea_fur_fur_fur_fur_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur_fur_fur_fur_depth = 31962\n    highest_sea_fur_fur_fur_fur_fur_fur_fur = 'The longest snake held in captivity is over 25 feet long.'\n    highest_sea_fur_fur_fur_fur_fur_fur_width = 16.11\n    highest_sea_fur_fur_fur_fur_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur_fur_fur_fur_depth = 31962\n    highest_sea_fur_fur_fur_fur_fur_fur_fur = 'The largest state of USA is Alaska; its area is 663268 square miles.'\n    highest_sea_fur_fur_fur_fur_fur_fur_width = 16.11\n    highest_sea_fur_fur_fur_fur_fur_fur_length = 13.4\n    highest_sea_fur_fur_fur_fur_fur_fur_depth = 31962\n    highest_sea_fur_fur_fur_fur_fur_fur_fur = 'The highest water is Lake Baikal"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"your solution here\"\"\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    if input >= 1 and input <= 6:\n        return 0\n    elif input >= 7 and input <= 16:\n        return 1\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # your code here\n    return n\n"
    },
    {
        "number": 4188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cheese_type = {\n        \"soft\": 0,\n        \"hard\": 0\n    }\n    cheese_list = stdin.split(\"\\n\")\n    cheese_list = [i.split() for i in cheese_list]\n    cheese_list = [i for i in cheese_list if i[1] == \"hard\"]\n    cheese_type[\"hard\"] = len(cheese_list)\n    cheese_list = [i for i in cheese_list if i[1] == \"soft\"]\n    cheese_type[\"soft\"] = len(cheese_list)\n    return cheese_type[\"hard\"] - cheese_type[\"soft\"]\nsolution('9\\nbrie soft\\camembert soft\\feta soft\\goat soft\\muenster soft\\asiago hard\\cheddar hard\\gouda hard\\swiss hard')\nsolution('6\\nparmesan hard\\emmental hard\\edam hard\\colby hard\\gruyere hard\\asiago hard')\n\n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cheese_list = []\n    for cheese in stdin:\n        cheese_list.append(cheese.split())\n    cheese_set = []\n    for cheese in cheese_list:\n        cheese_set.append(cheese[0])\n    return len(set(cheese_set))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin.readline().strip())\n    cheese = {}\n    for _ in range(total):\n        cheese[stdin.readline().strip()] = [True, True]\n    for _ in range(total):\n        cheese[stdin.readline().strip()][0] = False\n    for _ in range(total):\n        cheese[stdin.readline().strip()][1] = False\n    output = 0\n    for c in cheese:\n        if not (cheese[c][0] or cheese[c][1]):\n            output += 1\n    return output"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = [line.strip().split() for line in stdin.split('\\n')]\n    soft_cheese = {cheese[0] for cheese in cheeses if cheese[1] == \"soft\"}\n    hard_cheese = {cheese[0] for cheese in cheeses if cheese[1] == \"hard\"}\n    return len(soft_cheese.difference(hard_cheese))\n\n\nprint(solution(\"9\\nbrie soft\\ncamembert soft\\nfeta soft\\ngoat soft\\nmuenster soft\\nasiago hard\\ncheddar hard\\ngouda hard\\nswiss hard\"))\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    names = {}\n    for line in lines[1:n+1]:\n        name, type = line.split(' ')\n        names[name] = type\n    for name in sorted(names.keys(), reverse=True):\n        if names[name] =='soft':\n            print(name)\n            break\n        \n        \n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # You must use a function called'solution' that takes a string as an input\n    # and returns a string.\n    # The function must return the answer to the question in a string.\n    # The string must be a valid python expression that can be evaluated\n    # to a string.\n    # You can use print() in your solution if you'd like to print the test\n    # input and the result at the end.\n\n    # Your solution goes here\n\n    # We'll need to extract the cheese names and types.\n    # Each cheese's name is the first part of its line,\n    # and it's type is the second part.\n\n    # The input is formatted:\n    # N lines of cheese names followed by N lines of cheese types.\n\n    # cheese_count and cheese_list will be used in this solution.\n    cheese_count = int(stdin)\n\n    cheese_list = []\n    for i in range(cheese_count):\n        cheese_name, cheese_type = stdin.split(' ')\n        cheese_list.append([cheese_name, cheese_type])\n\n    # We can print all the cheeses and their types to check that everything is working.\n    print('the cheese names and their types:')\n    print(cheese_list)\n\n    # Now we're ready to look for the counts of types of cheeses.\n    # We'll start by creating a dictionary that maps from each type of cheese\n    # to its count.\n    cheese_type_count_dict = dict()\n    for cheese_name, cheese_type in cheese_list:\n        cheese_type_count_dict[cheese_type] = cheese_type_count_dict.get(cheese_type, 0) + 1\n\n    # We'll print out the results.\n    # First, we'll get the keys of the dictionary.\n    cheese_types = cheese_type_count_dict.keys()\n    print('the types of cheeses and their counts:')\n    print(cheese_types)\n    print(cheese_type_count_dict)\n\n    # Now we're ready to count the types of cheeses.\n    # We'll start by creating a variable to keep track of the count.\n    cheese_count = 0\n    # Then we'll create an if/else statement to increment the count.\n    for cheese_type in cheese_types:\n        cheese_count = cheese_count + cheese_type_count_dict.get(cheese_type, 0)\n    # And we'll print the answer.\n    print(cheese_count)\n    \n    return cheese_count"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return ''\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_cheeses = int(stdin.readline().rstrip())\n    cheese_map = {}\n    for _ in range(num_cheeses):\n        cheese, cheese_type = stdin.readline().rstrip().split()\n        cheese_map[cheese] = cheese_type\n    cheese_groups = []\n    for cheese in cheese_map.keys():\n        cheese_groups.append([cheese, cheese_map[cheese]])\n    cheese_groups.sort(key=lambda x: x[1])\n    cheese_groups.reverse()\n    cheese_map = {}\n    num_of_pairs = 0\n    for cheese_pair in cheese_groups:\n        if cheese_pair[0] not in cheese_map:\n            cheese_map[cheese_pair[0]] = 1\n        else:\n            cheese_map[cheese_pair[0]] += 1\n        num_of_pairs += cheese_map[cheese_pair[0]] // 2\n    return num_of_pairs\n"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    cheese_dict = {}\n    for line in stdin.splitlines():\n        cheese_name, cheese_type = line.split()\n        if cheese_type == \"hard\":\n            result += 1\n        else:\n            if cheese_name not in cheese_dict:\n                cheese_dict[cheese_name] = 1\n            else:\n                cheese_dict[cheese_name] += 1\n    for cheese_name in cheese_dict.keys():\n        if cheese_dict[cheese_name] == 1:\n            result -= 1\n    return str(result)"
    },
    {
        "number": 4189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    cheeses = set()\n    for i in range(N):\n        name, type = stdin.readline().split()\n        cheeses.add((name, type))\n    \n    soft_cheese = len([cheese for cheese in cheeses if cheese[1] == \"soft\"])\n    hard_cheese = len([cheese for cheese in cheeses if cheese[1] == \"hard\"])\n    return str(soft_cheese) + \"\\n\" + str(hard_cheese)\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = []\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n    return''.join([str(c[i]) for i in range(n)])\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    \n    c = []\n    for x, y in zip(a, b):\n        c.append((x + y) % n)\n    \n    return''.join([str(x) for x in c])"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Lexicographically minimum possible array, based on: a+b\"\"\"\n    n, *a = map(int, stdin.split())\n    b = [int(stdin) for _ in range(n)]\n    b.sort()\n    c = []\n    for i in range(n):\n        c.append((a[i]+b[i]) % n)\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You are given two arrays $a$ and $b$, both of length $n$. All elements of both arrays are from $0$ to $n-1$.\n\nYou can reorder elements of the array $b$ (if you want, you may leave the order of elements as it is). After that, let array $c$ be the array of length $n$, the $i$-th element of this array is $c_i = (a_i + b_i) \\% n$, where $x \\% y$ is $x$ modulo $y$.\n\nYour task is to reorder elements of the array $b$ to obtain the lexicographically minimum possible array $c$.\n\nArray $x$ of length $n$ is lexicographically less than array $y$ of length $n$, if there exists such $i$ ($1 \\le i \\le n$), that $x_i < y_i$, and for any $j$ ($1 \\le j < i$) $x_j = y_j$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of elements in $a$, $b$ and $c$.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i < n$), where $a_i$ is the $i$-th element of $a$.\n\nThe third line of the input contains $n$ integers $b_1, b_2, \\dots, b_n$ ($0 \\le b_i < n$), where $b_i$ is the $i$-th element of $b$.\n\n\n-----Output-----\n\nPrint the lexicographically minimum possible array $c$. Recall that your task is to reorder elements of the array $b$ and obtain the lexicographically minimum possible array $c$, where the $i$-th element of $c$ is $c_i = (a_i + b_i) \\% n$.\n\n\n-----Examples-----\nInput\n4\n0 1 2 1\n3 2 1 1\n\nOutput\n1 0 0 2\n\nInput\n7\n2 5 1 5 3 4 3\n2 4 3 5 6 5 1\n\nOutput\n0 0 0 1 0 2 4\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    # {num: index}\n    d = {num: index for index, num in enumerate(b)}\n    # {index: num}\n    inv_d = {v: k for k, v in d.items()}\n    # sorted b\n    sorted_b = sorted(b)\n    sorted_b_idx = sorted(inv_d.keys())\n    c = []\n    for i in range(n):\n        num = (a[i] + inv_d[i]) % n\n        c.append(num)\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solution(stdin):\n        n = int(stdin)\n        a = [0] * n\n        b = [0] * n\n        for i in range(n):\n            a[i], b[i] = map(int, stdin.strip().split())\n        b.sort()\n        c = [0] * n\n        for i in range(n):\n            c[i] = (a[i] + b[i]) % n\n        for i in c:\n            print(i, end=' ')\n        return\n    # return str(solution(stdin.readlines()))\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        a[i], b[i] = map(int, lines[i + 1].split())\n    b.sort()\n    c = [0] * n\n    for i in range(n):\n        c[i] = (a[i] + b[i]) % n\n    for i in c:\n        print(i, end=' ')\n    return\n\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    ans = [None] * n\n    for i in range(n):\n        ans[b[i] % n] = (a[i] + b[i]) % n\n    for i in range(n):\n        print(ans[i], end=\" \")\n\nsolution(stdin)"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = []\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n    print(*c)\n    '''\n    return '1 0 0 2'"
    },
    {
        "number": 4190,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    m, *b = map(int, stdin.split())\n    a, b = [0] * n, [0] * n\n    for i in range(n):\n        a[i], b[i] = a[i] % n, b[i] % n\n    c = [0] * n\n    for i, j in enumerate(zip(a, b)):\n        c[i] = (j[0] + j[1]) % n\n    print(' '.join(map(str, c)))\n    return ''\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_ones = 0\n    num_zeroes = 0\n    for i in stdin:\n        if i == \"1\":\n            num_ones += 1\n        else:\n            num_zeroes += 1\n    return \"1\" if num_ones > num_zeroes else \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return...\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 1 if stdin == '11' else 0\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    for i in stdin:\n        x += int(i)\n    return x % 2\nprint(solution(input()))\n\n\n\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''0\n    ... 1\n    ... 1\n    ... 0''')\n    0\n    \"\"\""
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(num) for num in stdin.split('\\n')]\n    if n % 2 == 0:\n        return str(0)\n    return str(1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 0\n\nprint(solution(''))\n"
    },
    {
        "number": 4191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin[0] + stdin[1] + stdin[2] + stdin[3] + stdin[4] + stdin[5] + stdin[6] + stdin[7] + stdin[8] + stdin[9]) % 2\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    # if D <= S * T:\n    #     return \"Yes\"\n    # return \"No\"\n    return \"Yes\" if D <= S * T else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = stdin.split('\\n')[0].split(' ')\n    s = int(s)\n    t = int(t)\n    d = int(d)\n    if (t - int(t/s * s)) < d:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n\n    return \"Yes\" if T >= (D/S) else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split(\" \"))\n    \n    distance = D/S\n    time = distance/S\n    \n    if time == T:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    if s*t == d:\n        return 'Yes'\n    elif s*t < d:\n        return 'No'\n    else:\n        s = s/60\n        d = d/1000\n        n = t*60\n        t = t*d\n        if t >= n:\n            return 'Yes'\n        else:\n            return 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1000 15 80\")\n    'Yes'\n    \"\"\"\n    D, T, S = map(int, stdin.split())\n    return \"Yes\" if (D / S) <= T else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_d, takahashi_t, s = [int(i) for i in stdin.split()]\n    return \"Yes\" if takahashi_d / s + takahashi_t < takahashi_d / s else \"No\"\n\"\"\"\n\n\"\"\"\nPYTHON3\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns Yes if Takahashi will arrive in time. Returns No otherwise.'''\n    D, T, S = map(int, stdin.split())\n    takahashi_miles = D / S\n    # Returns minutes in which Takahashi will arrive at the place\n    minutes = takahashi_miles / S * 60\n    return \"Yes\" if minutes < T else \"No\"\n    \n"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # D = int(stdin.readline())\n    # T = int(stdin.readline())\n    # S = int(stdin.readline())\n    # t = T * 60\n    # d = S * t\n    # print('Yes') if D >= d else print('No')\n    # return 'Yes' if D >= d else 'No'\n    \n    # D, T, S = map(int, stdin.readline().split())\n    # diff = D - T * S\n    # if diff < 0:\n    #     print('No')\n    # else:\n    #     print('Yes')\n    # return 'Yes' if diff >= 0 else 'No'\n\n    D, T, S = map(int, input().split())\n    print('Yes' if D >= S * T else 'No')\n    return 'Yes' if D >= S * T else 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split(' '))\n    return 'Yes' if d / s < t else 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows = [row.strip().split() for row in stdin.strip().split(\"\\n\")]\n    cards = [\n        [int(element) for element in row] for row in rows[:3]\n    ] + [\n        [int(element) for element in row] for row in rows[3:]\n    ]\n    numbers = [int(number) for number in stdin.split()[3:]]\n    return \"Yes\" if is_bingo(cards, numbers) else \"No\"\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # \ubb38\uc790\uc5f4\uc744 \uc774\uc911 \ub9ac\uc2a4\ud2b8\ub85c \uc785\ub825 \ubc1b\uc74c\n    # \ubb38\uc790\uc5f4\ub85c \uc778\ub371\uc2a4\ub97c \uc0ac\uc6a9\ud574\uc11c \uac01 \ub9ac\uc2a4\ud2b8\uc5d0 \uc785\ub825\uac12\uc744 \ub123\uc74c\n    a = [[0 for _ in range(3)] for _ in range(3)]\n    for i, j in zip(stdin.split(), stdin.split()):\n        a[int(i) - 1][int(j) - 1] = int(i) * 100 + int(j)\n    # print(a)\n    n = int(stdin.split()[-1])\n\n    bingo = [0 for _ in range(n)]\n    for k in range(n):\n        bingo[k] = int(stdin.split()[k])\n    # print(bingo)\n\n    # \ubc14\uae65\ucabd \ubc18\ubcf5\ubb38\uc740 \ubaa8\ub4e0 \uc694\uc18c\uc5d0 \ub300\ud574 \ubc18\ubcf5\n    # \ubc14\uae65\ucabd \ubc18\ubcf5\ubb38\uc758 \uae30\uc900\uc740 a\ub9ac\uc2a4\ud2b8 \uc548\uc758 \uc694\uc18c \ud558\ub098\uc529\n    # \uc548\ucabd \ubc18\ubcf5\ubb38\uc740 \uae30\uc900\uc740 bingo\ub9ac\uc2a4\ud2b8 \uc548\uc758 \uc694\uc18c \ud558\ub098\uc529\n    for i in range(3):\n        for j in range(3):\n            if a[i][j] in bingo:\n                # \uc694\uc18c\uac00 bingo\uc5d0 \uc788\ub2e4\uba74 \uc548\ucabd \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\uc778 k\ub97c \ud655\uc778\ud574\uc11c \ubc18\ubcf5\ubb38\uc774 \uc885\ub8cc\ub418\ub3c4\ub85d \ud568\n                for k in range(n):\n                    if a[i][j] == bingo[k]:\n                        bingo[k] = 0\n                        break\n                # \ubc14\uae65 \ubc18\ubcf5\ubb38\uc774 \ub2e4\uc2dc \uc2dc\uc791\ub418\ub3c4\ub85d \uc548\ucabd \ubc18\ubcf5\ubb38\uc73c\ub85c \ub3cc\uc544\uac10\n                break\n\n    for i in range(3):\n        for j in range(3):\n            if a[i][j] in bingo:\n                # \uc694\uc18c\uac00 bingo\uc5d0 \uc788\ub2e4\uba74 \uc548\ucabd \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\uc778 k\ub97c \ud655\uc778\ud574\uc11c \ubc18\ubcf5\ubb38\uc774 \uc885\ub8cc\ub418\ub3c4\ub85d \ud568\n                for k in range(n):\n                    if a[i][j] == bingo[k]:\n                        bingo[k] = 0\n                        break\n                # \ubc14\uae65 \ubc18\ubcf5\ubb38\uc774 \ub2e4\uc2dc \uc2dc\uc791\ub418\ub3c4\ub85d \uc548\ucabd \ubc18\ubcf5\ubb38\uc73c\ub85c \ub3cc\uc544\uac10\n                break\n\n    for i in range(3):\n        for j in range(3):\n            if a[i][j] in bingo:\n                # \uc694\uc18c\uac00 bingo\uc5d0 \uc788\ub2e4\uba74 \uc548\ucabd \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\uc778 k\ub97c \ud655\uc778\ud574\uc11c \ubc18\ubcf5\ubb38\uc774 \uc885\ub8cc\ub418\ub3c4\ub85d \ud568\n                for k in range(n):\n                    if a[i][j] == bingo[k]:\n                        bingo[k] = 0\n                        break\n                # \ubc14\uae65 \ubc18\ubcf5\ubb38\uc774 \ub2e4\uc2dc \uc2dc\uc791\ub418\ub3c4\ub85d \uc548\ucabd \ubc18\ubcf5\ubb38\uc73c\ub85c \ub3cc\uc544\uac10\n                break\n\n    for i in range(3):\n        for j in range(3):\n            if a[i][j] in bingo:\n                # \uc694\uc18c\uac00 bingo\uc5d0 \uc788\ub2e4\uba74 \uc548\ucabd \ubc18\ubcf5\ubb38\uc758 \ubcc0\uc218\uc778 k\ub97c \ud655\uc778\ud574\uc11c \ubc18\ubcf5\ubb38\uc774 \uc885\ub8cc\ub418\ub3c4\ub85d \ud568\n                for k in range(n):\n                    if a[i][j] == bingo[k]:\n                        bingo[k] = 0\n                        break\n                # \ubc14\uae65 \ubc18\ubcf5\ubb38\uc774 \ub2e4\uc2dc \uc2dc\uc791\ub418\ub3c4\ub85d \uc548\ucabd \ubc18\ubcf5\ubb38\uc73c\ub85c \ub3cc\uc544\uac10\n                break\n\n    if sum(bingo) == 3 * n:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n\n    array = []\n    for row in range(3):\n        array.append(string[row * 3: (row + 1) * 3])\n    array = [list(map(int, row)) for row in array]\n\n    n = int(string[3])\n\n    string = stdin.split()\n\n    bingo = [int(string[x]) for x in range(n)]\n\n    if not len(bingo) == n:\n        return 'No'\n\n    for row in range(3):\n        if array[row].count(bingo[0]) == 3 or array[row].count(bingo[1]) == 3 or array[row].count(bingo[2]) == 3:\n            return 'Yes'\n\n    # main diagonal\n    if array[0][0] == bingo[0] and array[1][1] == bingo[1] and array[2][2] == bingo[2]:\n        return 'Yes'\n    # secondary diagonal\n    if array[0][2] == bingo[0] and array[1][1] == bingo[1] and array[2][0] == bingo[2]:\n        return 'Yes'\n\n    return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    grid = stdin.split('\\n')\n    grid = list(map(int, grid))\n    grid_size = int(grid.pop(0))\n    n_numbers = int(grid.pop(0))\n    numbers = grid[:n_numbers]\n    numbers_set = set(numbers)\n    numbers_dict = {number: 0 for number in numbers}\n    grid = grid[n_numbers:]\n    board = []\n    for i in range(grid_size):\n        row = grid[i * grid_size: (i + 1) * grid_size]\n        board.append(row)\n    for i in range(grid_size):\n        for j in range(grid_size):\n            numbers_dict[board[i][j]] += 1\n    if set(numbers_dict.values()) == {n_numbers}:\n        return \"Yes\"\n    if all(numbers_dict[number] <= 1 for number in numbers):\n        return \"Yes\"\n    if grid_size == n_numbers:\n        if set(numbers_dict.values()) == {1}:\n            return \"Yes\"\n        if sum(numbers_dict.values()) == 2:\n            if numbers_dict[board[0][0]] == 1 and numbers_dict[board[0][2]] == 1:\n                return \"Yes\"\n            if numbers_dict[board[2][0]] == 1 and numbers_dict[board[2][2]] == 1:\n                return \"Yes\"\n            if numbers_dict[board[0][0]] == 1 and numbers_dict[board[2][2]] == 1:\n                return \"Yes\"\n            if numbers_dict[board[2][0]] == 1 and numbers_dict[board[0][2]] == 1:\n                return \"Yes\"\n    if grid_size == n_numbers + 1:\n        if set(numbers_dict.values()) == {1}:\n            return \"Yes\"\n        if set(numbers_dict.values()) == {2}:\n            return \"Yes\"\n        if set(numbers_dict.values()) == {2, 3}:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    matrix = [[int(num) for num in stdin.split()] for _ in range(3)]\n    numbers = []\n    for _ in range(int(stdin.split()[3])):\n        numbers.append(int(input()))\n    for row in matrix:\n        for num in row:\n            if num in numbers:\n                print('Yes')\n                return\n    print('No')\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    matrix = list(map(lambda x: list(map(int, x.split())), rows))\n    bingo_count = int(stdin.split()[-1])\n    bingo_sheet = list(map(lambda x: int(x), stdin.split()[-bingo_count:]))\n    row = [False] * 3\n    col = [False] * 3\n    diag = [False] * 2\n    for row_index, row_value in enumerate(matrix):\n        for col_index, col_value in enumerate(row_value):\n            if col_value in bingo_sheet:\n                col[col_index] = True\n            if row_value[col_index] in bingo_sheet:\n                row[row_index] = True\n            if row_value[col_index] == col_value and row_index!= col_index:\n                diag[0] = True\n            if row_value[col_index] == col_value and row_index == col_index:\n                diag[1] = True\n    if any(row) or any(col) or any(diag):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    n = int(rows[0])\n    bingo_card = [int(row) for row in rows[1:]]\n    n_to_check = int(rows[4])\n    check_numbers = [int(row) for row in rows[5:]]\n    if sum(bingo_card) == 0:\n        return \"Yes\"\n    bingo_card = [[bingo_card[(i * n) + j] for j in range(n)] for i in range(n)]\n    bingo_card = [[bingo_card[i][j] for j in range(n)] for i in range(n)]\n    bingo_card = [[bingo_card[i][j] for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or i == 1 or j == 0 or j == 1:\n                if check_numbers[0] in bingo_card[i]:\n                    bingo_card[i][j] = 0\n                if check_numbers[1] in bingo_card[i]:\n                    bingo_card[i][j] = 0\n                if check_numbers[2] in bingo_card[i]:\n                    bingo_card[i][j] = 0\n            if i == 2:\n                if check_numbers[3] in bingo_card[i]:\n                    bingo_card[i][j] = 0\n                if check_numbers[4] in bingo_card[i]:\n                    bingo_card[i][j] = 0\n                if check_numbers[5] in bingo_card[i]:\n                    bingo_card[i][j] = 0\n            if j == 2:\n                if check_numbers[6] in bingo_card[i]:\n                    bingo_card[i][j] = 0\n                if check_numbers[7] in bingo_card[i]:\n                    bingo_card[i][j] = 0\n                if check_numbers[8] in bingo_card[i]:\n                    bingo_card[i][j] = 0\n    check = [sum(bingo_card[i]) for i in range(n)]\n    check = [sum(bingo_card[j]) for j in range(n)]\n    check = [sum(bingo_card[k]) for k in range(n)]\n    if 0 in check:\n        return \"No\"\n    if 0 in check_numbers:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = [i.split() for i in stdin.strip().split('\\n')]\n    N = int(A[3][0])\n    A = A[4:]\n    B = [int(i) for i in A[0]]\n    C = [int(i) for i in A[1]]\n    D = [int(i) for i in A[2]]\n    E = [int(i) for i in A[3]]\n    if len(set(B)) == N or len(set(C)) == N or len(set(D)) == N or len(set(E)) == N or len(set(B + C)) == N or len(set(B + D)) == N or len(set(B + E)) == N or len(set(C + D)) == N or len(set(C + E)) == N or len(set(D + E)) == N:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Create a 3 x 3 matrix for the bingo card\n    grid = [[0] * 3 for _ in range(3)]\n    # Parse the input into a matrix of integers\n    for r in range(3):\n        for c in range(3):\n            grid[r][c] = int(stdin.pop(0))\n\n    # Create a set of bingo numbers\n    bingo_nums = set(stdin.pop(0) for _ in range(N))\n\n    # For every number on the bingo card, check if there is a bingo in the set\n    return 'Yes' if any(\n        # Check each row\n        any(\n            # Check each column\n            all(\n                # Check each diagonal\n                grid[r][c] == n for c in range(3)\n            )\n            for r in range(3)\n        ) or\n        # Check each column\n        any(\n            # Check each diagonal\n            grid[r][c] == n for r in range(3) for c in range(3) if r!= c\n        )\n        # Check each diagonal\n        for n in bingo_nums\n    ) else 'No'"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    dp = [0] * (N + 1)\n    for i in range(M):\n        if A[i] + i > N:\n            break\n        else:\n            dp[A[i] + i] = max(dp[A[i] + i], dp[i] + 1)\n    print(max(dp))\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  N, M = map(int, stdin.readline().split())\n  assignments = list(map(int, stdin.readline().split()))\n  vacation = 0\n  for i in range(M):\n    if sum(assignments[:i + 1]) <= N:\n      vacation = N - sum(assignments[:i + 1]) + i + 1\n    else:\n      vacation = -1\n      break\n  return vacation"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    i, j = 0, 0\n    while j < m:\n        if i == n or j + a[j] > i:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return i\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    answer = 0\n    for i in range(m):\n        a[i] -= i\n    for i in a:\n        answer += i\n    return answer\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline())\n    assignments = [int(i) for i in stdin.readline().split(' ')]\n    max_days = 0\n    assignments_day = {}\n    for a in assignments:\n        assignments_day[a] = assignments_day.get(a, 0) + 1\n        if assignments_day[a] > max_days:\n            max_days = assignments_day[a]\n    return str(days - max_days)\n\nprint(solution(sys.stdin.read()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input in format of integers\n    N, M = [int(s) for s in stdin.split(' ')]\n    # get array of assignments in a string format\n    A = [int(s) for s in stdin.split(' ')[1:]]\n    # create a sorted list of assignments\n    A = sorted(A)\n\n    def days(A, n, m):\n        i, j = 0, 0\n        # check to see if there is enough space in the A array to fit all the assignments\n        while i < n and j < m:\n            # assign the two arrays and compare them to see if the assignment was successful\n            if A[i] + A[j] <= N:\n                # if successful, continue to the next assignment\n                i += 1\n                j += 1\n                # otherwise, swap the two assignments\n            else:\n                j += 1\n        # if the assignments were successful, return the sum of the assignments\n        if j == m:\n            return sum(A)\n        # otherwise, return -1\n        else:\n            return -1\n\n    return days(A, N, M)\n\n\"\"\"\n\n\"\"\"\nMethodology:\n\n1. Set a var (max_days) to 0.\n2. Iterate through all the input assignments.\n3. Check to see if the sum of the current assignment and the next assignment is less than the vacation limit.\n4. If so, add the sum of the current assignment and the next assignment to the max_days variable.\n5. If the current assignment and the next assignment do not pass the limit, then, return max_days and exit the loop.\n\"\"\"\n\n\"\"\"\nComplexity:\n\nTime: O(M)\nSpace: O(1)\n\"\"\"\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport math\nimport sys\nimport numpy as np\n\nsys.stdin = open(\"input.txt\")\n\nN, M = map(int, input().split())\nA = list(map(int, input().split()))"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, m, *a = stdin.split(' ')\n    a = [int(a_i) for a_i in a]\n    if sum(a) < m:\n        return -1\n    else:\n        return len(a) - m + 1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '-1'"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the 5th smallest integer that can be divided by 100 exactly D times.\n    :param stdin: input of type str\n    :return: str\n    \"\"\"\n    D, N = stdin.split(' ')\n    D = int(D)\n    N = int(N)\n\n    if D == 1:\n        return 1\n    if D == 2:\n        return 2\n    if D == 3:\n        return 5\n\n    prime_list = [1] + [i for i in range(2, N + 1) if i % 2!= 0]\n\n    i = 2\n    while i < len(prime_list):\n        j = i\n        while j * i <= N:\n            prime_list[j * i] = 0\n            j += 1\n        i += 1\n\n    prime_list = [i for i in prime_list if i!= 0]\n    prime_list.sort()\n\n    return prime_list[N - 1]\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    if d == 0:\n        return 1\n    elif d == 1:\n        return 2\n    elif d == 2:\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return n // 2 + 1\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split(' '))\n    if D < 0 or D > 2:\n        return 'N/A'\n    if N < 1 or N > 100:\n        return 'N/A'\n    if D == 0:\n        return 1\n    elif D == 1:\n        if N > 100:\n            return 'N/A'\n        else:\n            return N\n    else:\n        div = 100 / D\n        # we need at least D + 1 to get the number of required divisions\n        if N < div + 1:\n            return str(N * div)\n        else:\n            return str(div * (N - div))"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(n) for n in stdin.split(' ')]\n    return '{}'.format(N * (N - 1) // 2 % 100000 * 100 + 5)\n    \n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(n) for n in stdin.split(' ')]\n    count = 1\n    while True:\n        if N % D == 0:\n            return count\n        else:\n            count += 1\n            N += 1\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = stdin.split(' ')\n    D, N = int(D), int(N)\n    \n    result = None\n    for i in range(N, 100):\n        if i % 100 == 0:\n            result = i\n            break\n    return str(result)"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, N = [int(x) for x in stdin.split(' ')]\n    \n    # Get all the numbers that are divisible by 100 exactly D times\n    # We do not need to store them all.\n    # This is because we can choose one of them, and it is enough.\n    # See the following:\n    # https://www.geeksforgeeks.org/python-nsmallest-from-built-in-functions/\n    # https://stackoverflow.com/questions/11777552/getting-first-occurrence-of-n-smallest-elements\n    # https://www.geeksforgeeks.org/python-nlargest-from-built-in-functions/\n    # https://stackoverflow.com/questions/10457552/find-all-occurrences-of-n-greatest-values-in-a-list-in-python\n    def divide_by_100(divisor):\n        # a = number % divisor\n        # b = number // divisor\n        return int(number % divisor == 0 and number // divisor or 0)\n    \n    numbers = [i for i in range(1, 1000001) if divide_by_100(100) == D]\n    \n    # Choose the N-th smallest element from the list\n    answer = sorted(numbers)[N - 1]\n    return str(answer)"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 5\\n\")\n    '5'\n    \"\"\"\n    _, n = stdin.split()\n    n = int(n)\n    d, r = divmod(n, 100)\n    return str(100 * d + 5)\n"
    },
    {
        "number": 4195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split(' '))\n    return str(pow(100, D-1, N))\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get stdin\n    # get N\n    N = int(stdin)\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get max_val\n    max_val = 0\n    for i in range(0, N):\n        if max_val < A[i]:\n            max_val = A[i]\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A_1, A_2,... A_N\n    # get A\n    A = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # get A"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the maximum common divisor of the numbers in stdin'''\n   ...\n    return gcd_of_list(lst)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(next(stdin))\n    A = [int(x) for x in next(stdin).split(' ')]\n    \n    x = min(A)\n    while x > 1:\n        for i in range(N):\n            if A[i] % x:\n                A[i] = (A[i] // x + 1) * x\n        x = min(A)\n    \n    return str(max(A))\n\"\"\"\nfrom math import gcd\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(n) for n in stdin.readline().split()]\n\n    if N == 1:\n        return str(A[0])\n    return gcd(A[0], gcd(A[1], A[2]))\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing\n    # Return values to send them to output\n    return None"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n7 6 8\\n')\n    2\n    >>> solution('2\\n7 6\\n')\n    1\n    >>> solution('4\\n1 2 3 4\\n')\n    2\n    >>> solution('4\\n10 9 2 3\\n')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    integers = [int(i) for i in stdin.readline().strip().split(' ')]\n    gcd = gcd_list(integers)\n    while gcd!= 1:\n        gcd = gcd_list(integers)\n        for i in integers:\n            if i % gcd == 0:\n                integers[integers.index(i)] = i // gcd\n                break\n    print(gcd)\n    return gcd\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    if n == 1:\n        return 1\n    a = list(map(int, stdin.split()))\n    div = [0] * n\n    for i in range(n):\n        div[i] = gcd(a[i], a[i-1])\n    return max(div)\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    N = int(inp[0])\n    A = list(map(int, inp[1].split()))\n    B = A[:]\n    m = 10**9\n    B.sort()\n    for i in range(N):\n        for j in range(i+1, N):\n            if B[i] % B[j] == 0:\n                m = min(m, B[j])\n            elif B[i] % B[j] < m:\n                m = B[j] - B[i] % B[j]\n    return str(m)\n"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    L = max(A)\n    for i in range(2, int(math.sqrt(L) + 1)):\n        if all(i % j == 0 for j in A):\n            return str(i)\n    return str(max(A))\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *ar = map(int, stdin.split())\n    print(' '.join(map(str, range(1, N+1))))\n    print(' '.join(map(str, sorted(ar))))"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    students = list(map(int, stdin.readline().rstrip().split(\" \")))\n    answer = []\n    for i in range(n):\n        student = students.pop(0)\n        answer.append(str(student))\n    print(\" \".join(answer))\n    return \"\"\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    s = [None] * n\n    stack = []\n    \n    for i, e in enumerate(a):\n        while stack and a[stack[-1]] >= e:\n            s[stack.pop()] = i + 1\n        stack.append(i)\n    \n    return \"\\n\".join(map(str, s))"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *inp = map(int, stdin.split())\n    result = []\n    for i in range(1, N + 1):\n        result.append(str(i))\n    for A in inp:\n        result.append(str(A))\n    return''.join(result)"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    student_num = int(stdin.split(\"\\n\")[0])\n    student_record = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    \n    # Initialise student_record as a heap\n    heap = MaxHeap()\n    for record in student_record:\n        heap.push(record)\n    \n    result = []\n    while heap.size() > 0:\n        result.append(heap.pop())\n    \n    return \"\\n\".join(list(map(str, result)))"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    return''.join(map(str, a))\n    pass"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin_list = stdin.split(\"\\n\")\n    stdin_list.remove(\"\")\n    n = int(stdin_list[0])\n    stdin_list.pop(0)\n    stdin_list = [int(i) for i in stdin_list]\n    stdin_list.sort()\n    ans = []\n    for i in range(n):\n        ans.append(str(stdin_list[i]))\n    return \" \".join(ans)\n    pass"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    students = [0] * n\n    for i in range(n):\n        students[i] = int(stdin)\n    students.sort()\n    return''.join(map(str, students))\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    ans = 0\n    for i in range(1, 10 ** 9):\n        if i * (10 ** len(str(i))) + b * len(str(i)) > x:\n            break\n        if i * a >= x:\n            ans = i\n            break\n    print(ans)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split(' '))\n    return str(int(max((a * N + b * math.log10(N)) / x, 1)))\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split()]\n    dp = [0] * (10 ** 6 + 1)\n    for n in range(1, 10 ** 6 + 1):\n        for i in range(1, 10):\n            if a * n + b * len(str(n)) <= x:\n                dp[n] = max(dp[n], i * n + dp[n - i])\n    return dp[-1] if dp[-1]!= 0 else 0\n\na, b, x = map(int, input().split())\nprint(solution(f'{a} {b} {x}'))\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n\n    print(min(A * X // 10 ** (len(str(X)) - 1), B))"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    products = []\n    for i in range(10 ** 9):\n        products.append(i * (10 ** i) + i * (10 ** (i - 1)))\n    for product in products:\n        if X >= product * A + B:\n            return str(product)\n    return \"0\"\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the largest integer that Takahashi can buy.\n\n    Args:\n        stdin (str): Input given by Standard Input in the following format:\n                     \"A B X\" where A is an integer, B is an integer,\n                     and X is an integer between 1 and 10**9.\n\n    Returns:\n        str: the largest integer that Takahashi can buy.\n    \"\"\"\n\n    # Store input in variables.\n    a, b, x = map(int, stdin.split())\n    # Since the input is in the order of A B X, we can reuse A and B to make\n    # sure X can be bought.\n    # Since X > 1, we can simplify the equation to:\n    # X * A + X * B = X * 10^9 * A + X * 10^9 * B\n    # X * A + X * B = 10^9 * A + 10^9 * B\n    # A = 10^9 and B = 10^9\n    # Therefore:\n    # X = 10^9\n    # From this, we can get X = 9 since 10^9 % 9 = 9.\n    # The solution for X is the largest number that can be bought.\n    return str(9)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in an input,\n    and returns the greatest integer that Takahashi can buy\"\"\"\n    a, b, x = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    x = int(x)\n    n = 0\n    while True:\n        if b*n >= x:\n            return str(n)\n        else:\n            n += 1\n    return '0'\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(value) for value in stdin.split()]\n    n = max(A, B)\n    max_purchase = 0\n    for i in range(1, n+1):\n        purchase = A*i + B*len(str(i))\n        if purchase > X:\n            break\n        if purchase > max_purchase:\n            max_purchase = purchase\n    return str(max_purchase)\n"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(' ')\n    a = int(input_list[0])\n    b = int(input_list[1])\n    x = int(input_list[2])\n    #print(a, b, x)\n    max_a = x // 10 ** 9\n    max_b = x // 10 ** 6\n    max_c = x // 10 ** 3\n    max_d = x // 10 ** 2\n    #print(max_a, max_b, max_c, max_d)\n    max_num = max_a * a + max_b * b + max_c * c + max_d * d\n    print(max_num)"
    },
    {
        "number": 4198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = (int(x) for x in stdin.split(\" \"))\n    if x < a * b:\n        return str(a * b - x)\n    else:\n        return \"0\""
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    input_string = stdin.readlines()\n    input_string = [s.strip() for s in input_string]\n    input_string = input_string[0].split(\" \")\n    n, k = input_string[0], input_string[1]\n    input_string = stdin.readlines()\n    input_string = [s.strip() for s in input_string]\n\n    # get the list of heights\n    heights = [int(s) for s in input_string]\n\n    # compute the answer\n    count = 0\n    for height in heights:\n        if int(height) >= int(k):\n            count += 1\n    return count\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(e) for e in stdin.split(' ')]\n    h = [int(e) for e in stdin.split('\\n')[:-1]]\n    return sum(1 for h_i in h if h_i >= K)\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    nums = [0 for _ in range(0, n)]\n    for i in range(0, n):\n        nums[i] = h[i]\n    nums.sort()\n    ans = 0\n    for i in range(0, n):\n        if nums[i] >= k:\n            ans += 1\n    return ans\n    pass\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = sorted(map(int, stdin.split()))\n\n    count = 0\n    for friend in h:\n        if friend >= K:\n            count += 1\n    return count"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    heights = map(int, stdin.readline().split())\n\n    return sum(1 for h in heights if h >= k)"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Not yet implemented.\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write your code here\n    '''\n"
    },
    {
        "number": 4199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.readline().split()))\n    h = list(map(int, stdin.readline().split()))\n    for i in range(len(h)):\n        if h[i] >= K:\n            print(i + 1)\n            return\n    print(0)\n    return"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns YES if at least m popular items can be selected, otherwise returns NO.\"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    items = list(map(int, stdin.split(\" \")))\n    if n < 1 or m < 1 or n < m or m > len(items) or n > len(items):\n        return \"NO\"\n    items.sort()\n    popular = []\n    for item in items:\n        if items.count(item) > len(items) // m:\n            popular.append(item)\n    return \"YES\" if len(popular) >= m else \"NO\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    votes = list(map(int, stdin.split(' ')))\n    votes.sort(reverse=True)\n    if votes[0] < (1 / (4 * m)):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1\\n5 4 2 1\")\n    'Yes'\n    >>> solution(\"5 1\\n1 2 1 2 1\")\n    'No'\n    >>> solution(\"1 1\\n1\")\n    'Yes'\n    \"\"\"\n    N, M = map(int, stdin.split(\" \"))\n    votes = sorted(map(int, stdin.split(\"\\n\")[1:]))\n    # For N items, we want to see a maximum of N / 4 votes\n    # if M popular items are selected, that means M must be less than N/4\n    # i.e. M <= min(4, N / 4)\n    M = min(M, int(N / 4))\n    return \"Yes\" if sum(votes[:M]) > sum(votes[N - M :]) else \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return Yes if there are M popular items in N\n    \"\"\"\n    N, M = list(map(int, stdin.split(' ')))\n    votes = list(map(int, stdin.split(' ')))\n    votes.sort(reverse=True)\n\n    return 'Yes' if sum(votes[:M]) > len(votes) / 4 * M else 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find whether it is possible to select M items from a total N items to make them popular.\n\n    Args:\n        stdin (str): Input string given in the problem.\n\n    Returns:\n        str: Yes if possible to select M items from N items to make them popular, otherwise, return No.\n    \"\"\"\n    n_m_ = stdin.split(' ')\n    n, m = [int(x) for x in n_m_[0:2]]\n    items = [int(x) for x in n_m_[2:]]\n    if m > n:\n        return 'No'\n    elif m == n:\n        return 'Yes'\n    elif sum(items) % (n / 4) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Args:\n        stdin (str): Input to parse\n\n    Returns:\n        str: Yes or No depending on the input\n    \"\"\"\n    total_votes, popular_items_to_select = [int(x) for x in stdin.split('\\n')[0].split()]\n    votes = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    popular_items = {item: votes.count(item) for item in votes}\n    popular_items = sorted(popular_items.items(), key=lambda item: item[1], reverse=True)\n    print(popular_items)\n\n    if sum(votes) / (4 * popular_items_to_select) >= 1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes = [vote for vote in votes if vote >= 1 and vote <= 1000]\n    votes.sort(reverse=True)\n    if len(votes) < m:\n        return 'No'\n    else:\n        return 'Yes'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin[0])\n    votes = list(map(int, stdin[1].split()))\n    m = int(stdin[1])\n    l = []\n    for i in votes:\n        if i >= (count / (4 * m)):\n            l.append(i)\n    if len(l) >= m:\n        print(\"Yes\")\n    else:\n        print(\"No\")\nsolution(input())"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 1\n   ... 5 4 2 1''')\n    'Yes'\n    >>> solution('''6 2\n   ... 9 7 4 8 1\n   ... ''')\n    'No'\n    \"\"\"\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    votes = [int(x) for x in stdin.split()[1:]]\n    votes.sort()\n    c = 0\n    for i in range(M):\n        c += votes[i]\n    if c >= math.floor(N / (4 * M)):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split(' ')]\n    votes = [int(i) for i in stdin.split(' ')[1:]]\n    votes.sort()\n\n    # print(f'N: {N}, M: {M}, votes: {votes}')\n\n    if N == 1:\n        return 'Yes' if votes[0] >= N/4 else 'No'\n\n    if M > N:\n        return 'No'\n\n    start = N/4 - M/2\n    end = N/4 + M/2\n\n    # print(f'start: {start}, end: {end}')\n\n    for i in range(len(votes)):\n        if votes[i] >= start and votes[i] <= end:\n            return 'Yes'\n\n    return 'No'\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = list(map(int, stdin.split()))\n    # initialize a black square count\n    count = 0\n\n    # create a matrix for storing the square\n    matrix = []\n    for _ in range(h):\n        row = stdin.split()[1:]\n        matrix.append(row)\n\n    for row in range(h):\n        for col in range(w):\n            # check if the square is black\n            if matrix[row][col] == \"#\":\n                # count how many black squares we have\n                count += 1\n\n    # if k is larger than our count of black squares\n    # then there is no solution\n    if k > count:\n        return 0\n\n    # we have to choose rows and columns\n    # these rows and columns will help us to pick up the final result\n    rows = []\n    columns = []\n\n    # we have to choose rows first\n    for row in range(h):\n        # check if the row is black\n        if matrix[row].count(\"#\") == k:\n            # add the row to the list\n            rows.append(row)\n\n    # then we have to choose columns\n    for col in range(w):\n        # check if the column is black\n        if sum([matrix[row][col] == \"#\" for row in range(h)]) == k:\n            # add the column to the list\n            columns.append(col)\n\n    # finally we can multiply the two lists\n    # this will give us the result\n    return len(rows) * len(columns)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the number of choices of rows and columns that result in exactly K black\n       squares remaining after the operation.\n\n       Arguments:\n       stdin -- the input string\n\n       Returns:\n       str -- the answer as a string\n    '''\n    row_count = int(stdin.split('\\n')[0].split(' ')[0])\n    column_count = int(stdin.split('\\n')[0].split(' ')[1])\n    k = int(stdin.split('\\n')[0].split(' ')[2])\n    matrix = [stdin.split('\\n')[1].split(' ')[i] for i in range(column_count)]\n    for row in matrix:\n        if row.count('#')!= column_count:\n            print(row.count('#'))\n    return ''\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.split('\\n')\n    rowCount = int(grid[0].split()[0])\n    colCount = int(grid[0].split()[1])\n    colorCount = int(grid[0].split()[2])\n    initialColor = grid[1].split()[0]\n    squares = grid[2].split()\n    res = 0\n    for i in range(rowCount):\n        for j in range(colCount):\n            if squares[i*colCount + j]!= initialColor:\n                res += 1\n    return res"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = stdin.split(' ')\n    h, w, k = int(h), int(w), int(k)\n\n    def get_combinations(index: int, path: list, path_list: list) -> int:\n        nonlocal combinations, h, w, k\n        if index == len(path):\n            if sum([1 for i in range(h) for j in range(w) if path[i][j] == '#']) == k:\n                combinations += 1\n            return\n        for i in range(2):\n            if i == 0:\n                get_combinations(index+1, path+[path[index]], path_list)\n            else:\n                get_combinations(index+1, path+[path[index][::-1]], path_list)\n\n    combinations = 0\n    get_combinations(0, [], [])\n    return combinations\nprint(solution(stdin))\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, h, w, k = map(int, stdin.split())\n    count = 0\n\n    def is_k(row, col):\n        return sum(\n            1\n            for i in range(row + 1)\n            for j in range(col + 1)\n            if stdin[i][j] == '#'\n        ) == k\n\n    for i in range(h):\n        for j in range(w):\n            if is_k(i, j):\n                count += 1\n\n    for i in range(h):\n        if is_k(i, 0):\n            count += 1\n        if is_k(i, w - 1):\n            count += 1\n    for j in range(w):\n        if is_k(0, j):\n            count += 1\n        if is_k(h - 1, j):\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem.\"\"\"\n    # 1. Get the input\n    n_h, n_w, n_k = map(int, stdin.split())\n    matrix = [stdin.split()[1:] for _ in range(n_h)]\n\n    # 2. Solve the problem\n    count = 0\n    for row in range(n_h):\n        for col in range(n_w):\n            if matrix[row][col] == '#':\n                count += 1\n    count = count // 2\n\n    # 3. Return the result\n    return str(count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = [int(x) for x in stdin.split()]\n    arr = [x for x in stdin.split()]\n    count = 0\n    while K!= 0:\n        for i in range(W):\n            for j in range(H):\n                if arr[j][i] == '#':\n                    count += 1\n                    K -= 1\n                    break\n        break\n    return str(count)\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # One pass through the file\n    h, w, k = [int(x) for x in stdin.split(' ')]\n    grid = {}\n    for row in range(h):\n        for col in range(w):\n            grid[row, col] = stdin[row * w + col]\n    count = 0\n    for row in range(h):\n        for col in range(w):\n            if grid[row, col] == '.':\n                if col!= w - 1 and grid[row, col + 1] == '.':\n                    count += 1\n                if row!= h - 1 and grid[row + 1, col] == '.':\n                    count += 1\n    return count\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    mul = a * b\n    if a == 0 or b == 0:\n        return 0\n    if mul <= 2019:\n        return mul % 2019\n    else:\n        return 2019\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    l, r = stdin.split()\n    l = int(l)\n    r = int(r)\n    print(2)\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # for each line:\n    # a, b = map(int, stdin.readline().split())\n    a, b = map(int, stdin.readline().split())\n    # print(a, b)\n    return str(min(a * b % 2019, a * 2020 % 2019))\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(' ')]\n    return str(min(A, B))\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    L, R = stdin.split(' ')\n    L, R = int(L), int(R)\n    if L * R <= 2019:\n        return '0'\n    a = 0\n    for i in range(L, R + 1):\n        for j in range(L, R + 1):\n            if (i * j) % 2019 == 0:\n                a = min(a, i * j)\n    return str(a)\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    \n    L = int(nums[0])\n    R = int(nums[1])\n    \n    i = L\n    j = L\n    \n    while i*j <= R:\n        if j*(2020-i) <= R:\n            break\n        j += 1\n    \n    return i*j % 2019\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r = list(map(int, stdin.split(' ')))\n    i = 0\n    j = 1\n    while l <= i < j < r:\n        if (i*j)%2019 == 0:\n            return i*j\n        i += 1\n        j += 1\n    return 0\n"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    i, j = map(int, stdin.split())\n    # i_times_j = 2020 % 2019\n    # i_times_j = 2020 % 2019\n    # return 2020 % 2019\n    return (2020 * i) % 2019"
    },
    {
        "number": 4202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [L, R] = [int(x) for x in stdin.split()]\n    [i, j] = [x for x in range(L, R + 1)]\n    return str(min([(i * j) % 2019 for i in range(i) for j in range(j)]))\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    condition_1 = (stdin[0] == 'A')\n    condition_2 = (len(stdin) == 4)\n    condition_3 = (len(stdin) >= 3)\n    if condition_1 and condition_2 and condition_3:\n        return 'AC'\n    return 'WA'\n    pass"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"AC\" if stdin[0] == \"A\" and stdin[2] == \"C\" and all(x.islower() for x in stdin[3:-1]) else \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[0] == \"A\" and S[2] == \"C\" and S[3] == \"C\":\n        return \"AC\"\n    else:\n        return \"WA\"\n    \n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    c = stdin[2]\n    n = len(stdin)\n    for i in range(1, n - 2):\n        if stdin[i] == c and (stdin[i - 1]!= a or stdin[i + 1]!= a):\n            return \"AC\"\n    return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin[0]\n  return \"AC\" if s == \"A\" and s.count(\"C\") == 1 and s.count(\"a\") == 0 and s.count(\"c\") == 0 and s.count(\"B\") == 0 else \"WA\"\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: the string input\n    :return: string output\n    \"\"\"\n\n    # check the condition\n    if not stdin.startswith('A'):\n        return 'WA'\n    elif 'C' not in stdin[2:-1]:\n        return 'WA'\n    elif stdin.count('C')!= 1:\n        return 'WA'\n\n    # check the condition\n    else:\n        return 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(\"\\n\")[0]\n    string = string.replace(\"A\", \"\").replace(\"C\", \"\")\n    if len(string) > 1 and string[2] == string[1]:\n        if string[0].isalpha() and string[1].isalpha() and string[2].isalpha() and string[3].islower():\n            return \"AC\"\n    return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin[0]\n    S = stdin[1:]\n    if S[1] == \"C\" and S[2] == \"C\" and S[0] == A:\n        return \"AC\"\n    return \"WA\""
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split('\\n')\n    s = s[0]\n    k = int(k[0])\n    d = int(s.index(2))\n    n = len(s)\n    s = s[d:]\n    while n < k:\n        n *= 10\n        d *= 10\n        if d < n:\n            d += 9\n        else:\n            d = d - n\n            n += 1\n    return s[d % len(s)]\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    s = list(s)\n    if int(k) > len(s):\n        return \"N\"\n    else:\n        return s[:int(k)]\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    K = int(stdin[1])\n    string = ''\n    for i in range(K):\n        for j in range(len(S)):\n            if S[j] == '2':\n                S = S[:j] + '22' + S[j + 1:]\n            if S[j] == '3':\n                S = S[:j] + '33' + S[j + 1:]\n            if S[j] == '4':\n                S = S[:j] + '44' + S[j + 1:]\n            if S[j] == '5':\n                S = S[:j] + '55' + S[j + 1:]\n            if S[j] == '6':\n                S = S[:j] + '66' + S[j + 1:]\n            if S[j] == '7':\n                S = S[:j] + '77' + S[j + 1:]\n            if S[j] == '8':\n                S = S[:j] + '88' + S[j + 1:]\n            if S[j] == '9':\n                S = S[:j] + '99' + S[j + 1:]\n        if S[0] == '1':\n            S = '1' + S[1:]\n        string += S[len(S) - K]\n    return string\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1214\\n4')\n    '2'\n    \"\"\"\n    S, K = stdin.split()\n    K = int(K)\n    s = S\n    day = 1\n    while day < 5 * (10**15):\n        s = change(s)\n        day += 1\n    return s[K-1]\n\n\ndef"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the K-th character in Mr. Infinity's string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the K-th character from the left in Mr. Infinity's string after 5 \\times 10^{15} days.\n    \n    >>> solution('1214')\n    '2'\n    >>> solution('1324')\n    '2'\n    >>> solution('12144444444')\n    '2'\n    >>> solution('1214444444444')\n    '2'\n    >>> solution('1234567891011121314151617181920212223')\n    '2'\n    \"\"\"\n    S, K = stdin.split()\n    \n    S = S[::-1]\n    \n    for i in range(5):\n        for char in S:\n            if char == '2':\n                S = S.replace('2', '22', 1)\n            elif char == '3':\n                S = S.replace('3', '333', 1)\n            elif char == '4':\n                S = S.replace('4', '4444', 1)\n            elif char == '5':\n                S = S.replace('5', '55555', 1)\n            elif char == '6':\n                S = S.replace('6', '666666', 1)\n            elif char == '7':\n                S = S.replace('7', '77777', 1)\n            elif char == '8':\n                S = S.replace('8', '88888', 1)\n            elif char == '9':\n                S = S.replace('9', '999999999', 1)\n            elif char == '1':\n                S = S.replace('1', '111111', 1)\n            else:\n                pass\n    return S[::-1][K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split('\\n')[0]\n    k = int(stdin.split('\\n')[1])\n    return string[k - 1]"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:int(stdin[-1])]\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    return chr(number % 10 + 48)\n"
    },
    {
        "number": 4204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, K = [int(i) for i in stdin.split('\\n')]\n    \n    counter = 0\n    while counter < K:\n        new_S = ''\n        for i in range(len(S)):\n            if i == 0 and S[i] == 1:\n                new_S += '1'\n            elif S[i] == 1 and S[i-1] == 2:\n                new_S += '2'\n            elif S[i] == 1 and S[i-1] == 3:\n                new_S += '3'\n            elif S[i] == 1 and S[i-1] == 4:\n                new_S += '4'\n            elif S[i] == 1 and S[i-1] == 5:\n                new_S += '5'\n            elif S[i] == 1 and S[i-1] == 6:\n                new_S += '6'\n            elif S[i] == 1 and S[i-1] == 7:\n                new_S += '7'\n            elif S[i] == 1 and S[i-1] == 8:\n                new_S += '8'\n            elif S[i] == 1 and S[i-1] == 9:\n                new_S += '9'\n            elif S[i] == 1 and S[i-1] == 0:\n                new_S += '0'\n            else:\n                new_S += str(S[i])\n        S = new_S\n        counter += 1\n    return S[K-1]\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if it is possible to sort p in ascending order using the operation described in the problem statement.\n    Return 'NO' otherwise.\"\"\"\n    N = int(stdin.readline())\n    p = list(map(int, stdin.readline().strip().split()))\n    before = tuple(p)\n    for i in range(N):\n        for j in range(i + 1, N):\n            after = list(before)\n            after[i], after[j] = after[j], after[i]\n            after = tuple(after)\n            if after < before:\n                print('YES')\n                return\n    print('NO')\n    return\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        for j in range(n):\n            if j!= i:\n                if p[i] > p[j]:\n                    p[i], p[j] = p[j], p[i]\n                    print('YES')\n                    return\n    print('NO')\n    return\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                break\n    print('YES' if arr == sorted(arr) else 'NO')\n    return ''"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.readline().strip())\n  p = [int(item) for item in stdin.readline().strip().split(' ')]\n  stdin.readline()\n  if all(p[i - 1] <= p[i] for i in range(1, N)):\n    print('YES')\n  else:\n    print('NO')\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    count = 0\n    \n    while (count < n - 1):\n        for i in range(n - 1):\n            if (A[i] > A[i + 1]):\n                temp = A[i]\n                A[i] = A[i + 1]\n                A[i + 1] = temp\n                count += 1\n    if A == sorted(A):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 3 4 1\n   ... ''')\n    'YES'\n    >>> solution('''5\n   ... 4 3 2 1\n   ... ''')\n    'NO'\n    >>> solution('''5\n   ... 1 2 3 4\n   ... ''')\n    'YES'\n    >>> solution('''5\n   ... 1 2 4 3\n   ... ''')\n    'NO'\n    \"\"\"\n    a = [int(i) for i in stdin.split('\\n')[0].split()]\n    a.sort()\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n                return 'YES' if a == sorted(a) else 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List, Dict\n\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *p = map(int, stdin.split())\n    if len(set(p))!= N:\n        return \"NO\"\n    seen = {p[i] for i in range(len(p))}\n    if len(seen)!= N:\n        return \"NO\"\n    i = 0\n    while i < N and len(seen) > 1:\n        if p[i]!= i+1:\n            return \"NO\"\n        seen.remove(p[i])\n        i += 1\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cuts = 0\n    length = 0\n    while n!= 0:\n        length += 1\n        if n % 3 == 0:\n            cuts += 1\n            n //= 3\n        else:\n            n -= 1\n    return str(length - cuts)\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.strip()\n    res = 0\n    for i in range(0, len(s)):\n        if int(s[i:i+2]) % 3 == 0:\n            res += 1\n        elif int(s[i:i+3]) % 3 == 0:\n            res += 1\n        elif int(s[i:i+4]) % 3 == 0:\n            res += 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum number of numbers divisible by $3$\n    that Polycarp can get by making vertical cuts in the given number s\n    \"\"\"\n    s = stdin.strip()\n    max_cnt = 0\n    cnt = 0\n    for i in range(1, len(s)):\n        if s[i-1]!= '0':\n            cnt += 1\n            max_cnt = max(cnt, max_cnt)\n        if s[i]!= '0':\n            cnt = 0\n    return max_cnt\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of numbers divisible by 3 that Polycarp can get by\n    making vertical cuts in the given number s.\n\n    >>> solution('3121')\n    2\n    >>> solution('6')\n    1\n    >>> solution('1000000000000000000000000000000000')\n    33\n    \"\"\"\n    s = stdin\n\n    # The maximum number of numbers divisible by 3 that Polycarp can get by\n    # making vertical cuts in the given number s.\n    cuts = 0\n\n    # Iterate over all possible cuts of the number s, until we have\n    # found all divisible numbers by 3.\n    for i in range(1, len(s)):\n        # If the number is divisible by 3, we will increment the number of\n        # cuts.\n        if int(s[i - 1:i + 1]) % 3 == 0:\n            cuts += 1\n        # Otherwise, the number is not divisible by 3.\n\n    return cuts\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves project euler problem #21\"\"\"\n   ..."
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3121)\n    2\n\n    >>> solution(6)\n    1\n\n    >>> solution(1000000000000000000000000000000000)\n    33\n\n    >>> solution(201920181)\n    4\n    \"\"\"\n    def split_by_3(num: int) -> List[int]:\n        \"\"\"\n        Returns a list of numbers that are divisible by 3.\n\n        >>> split_by_3(3)\n        [3]\n\n        >>> split_by_3(9)\n        [3, 6]\n\n        >>> split_by_3(25)\n        [3, 12, 5]\n\n        >>> split_by_3(15)\n        [3, 5]\n\n        >>> split_by_3(0)\n        [0]\n        \"\"\"\n        nums = [num]\n        while num:\n            num, r = divmod(num, 3)\n            if r:\n                nums = [0] + nums\n            else:\n                nums = [r] + nums\n        return nums\n\n    n = int(stdin)\n    s = str(n)\n    s = \"\".join(split_by_3(int(c)) for c in s)\n    return str(max(i for i in range(1, len(s)) if s[i] == \"0\"))\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    # TODO: implement solution\n    s = stdin\n    c = 0\n    a = '0'\n    while s!= '0':\n        c += 1\n        a += s[len(s)-c]\n        s = s[:len(s)-c]\n    \n    n = len(a)\n    print(a)\n    \n    i = 0\n    res = 0\n    while i < n:\n        x = a[i]\n        if x == '0':\n            i += 1\n            continue\n        if i+1 < n:\n            x += a[i+1]\n        if int(x) % 3 == 0:\n            res += 1\n        i += 2\n    return str(res)"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count_of_three = 0\n    three_indices = []\n    for i, c in enumerate(s):\n        if int(c) % 3 == 0:\n            count_of_three += 1\n            three_indices.append(i)\n    if count_of_three == 0:\n        return count_of_three\n    elif count_of_three == 1:\n        return count_of_three + 1\n    else:\n        result = [three_indices[0]]\n        for i in range(1, len(three_indices) - 1):\n            if three_indices[i] - three_indices[i - 1]!= 1:\n                result.append(three_indices[i - 1] + 1)\n                result.append(three_indices[i])\n        result.append(three_indices[-1] + 1)\n        return len(result)\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\")\n    '1'\n    >>> solution(\"201920181\")\n    '4'\n    >>> solution(\"201920181\")\n    '4'\n    \"\"\"\n    s = list(stdin)\n    res = [0] * len(s)\n    last_index = 0\n    for index in range(1, len(s)):\n        if index == 1:\n            res[last_index] += 1\n        if s[index - 1] > s[index]:\n            last_index = index\n        res[last_index] += 1\n    return str(max(x for x in res if x % 3 == 0))\n"
    },
    {
        "number": 4206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an optimal solution for the problem.\"\"\"\n    s = stdin\n    n = len(s)\n    return max([s[i:i + j]\n                for i in range(n)\n                for j in range(2, n - i + 1)\n                if len(s[i:i + j]) % 3 == 0])\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    m, *b = map(int, stdin.split())\n    m = max(m, n)\n    a = [i % n for i in a]\n    b = [i % n for i in b]\n    c = [a[i] * m + b[i] for i in range(n)]\n    return str(max(c.count(0), len(c)))\n\"\"\"\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, a, b = map(int, stdin.split('\\n')[:3])\n    m = [x * y for x, y in zip(sorted(a, reverse=True), sorted(b, reverse=True))]\n    return sum(m) * (-1) % (10 ** 9 + 7)\n    \n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = [list(map(int, stdin.split()))]\n    print(sum([i < 0 for i in a]) + sum([i > 0 for i in b]))\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of zeroes in array c, if you choose d optimally\"\"\"\n    # Solution begins here\n    # n = int(stdin.readline())\n    # a = [int(n) for n in stdin.readline().strip().split()]\n    # b = [int(n) for n in stdin.readline().strip().split()]\n    # c = [d * a[i] + b[i] for i in range(len(a))]\n    # c.sort()\n    # c = [i for i in c if i == 0]\n    # return str(len(c))\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n    c = []\n    for i in range(n):\n        c.append(a[i] * (-1) + b[i])\n    m = 0\n    for i in c:\n        if i < 0:\n            m += 1\n    print(m)\n    return ''\n"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    max = 0\n    for i in range(n):\n        for j in range(n):\n            c = a[i] * b[j]\n            count = 0\n            for k in str(c):\n                if k == '0':\n                    count += 1\n            if count > max:\n                max = count\n    return max\n\n\"\"\"\nfrom math import gcd\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implementation of the above approach.\n    \"\"\"\n\n    n, a, b = map(int, stdin.split('\\n')[:3])\n\n    min_value, max_value = min(a, b), max(a, b)\n    min_value, max_value = min(min_value, 0), max(max_value, 0)\n    max_zeroes = sum(map(lambda x: x <= 0, a, b))\n    max_zeroes -= 1\n\n    for d in range(min_value, max_value + 1):\n        res = sum(map(lambda x: x * d, a))\n        res += sum(map(lambda x: x * d, b))\n        if res >= 0:\n            continue\n        max_zeroes = max(max_zeroes, abs(res))\n\n    return str(max_zeroes)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(str.lower, stdin.split())\n    l = [a if a!= '?' else r for a, r in zip(l, r)]\n    count = 0\n    for x in product(set(l), set(r)):\n        if len(x[0]) == len(set(x[0])) and len(x[1]) == len(set(x[1])):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    left_boots, right_boots = stdin.split('\\n')\n    left_boots = list(left_boots)\n    right_boots = list(right_boots)\n    left_boots = [b if b!= '?' else 'a' for b in left_boots]\n    right_boots = [b if b!= '?' else 'a' for b in right_boots]\n    left_boots = [ord(b) - 97 for b in left_boots]\n    right_boots = [ord(b) - 97 for b in right_boots]\n    result = 0\n    for i in range(len(left_boots)):\n        for j in range(i + 1, len(left_boots)):\n            for k in range(len(right_boots)):\n                for l in range(k + 1, len(right_boots)):\n                    if (\n                        abs(left_boots[i] - right_boots[k]) == 1 and\n                        abs(left_boots[j] - right_boots[l]) == 1\n                    ):\n                        result += 1\n    return str(result)"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    lst = [i for i in stdin.split('\\n')[1].split(' ')]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] == '?' or lst[j] == '?':\n                if lst[i]!= lst[j]:\n                    res += 1\n            elif lst[i]!= lst[j]:\n                res += 1\n    print(res)\n    print(list(range(n)))\n    print(list(range(n)))\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n    count = 0\n    left = []\n    right = []\n    for i in range(n):\n        if l[i] == '?' or l[i] == r[i]:\n            if l[i] == '?':\n                count += 1\n            left.append(i)\n        else:\n            count += 1\n        if r[i] == '?' or l[i] == r[i]:\n            if r[i] == '?':\n                count += 1\n            right.append(i)\n        else:\n            count += 1\n    if count == 2*n:\n        return 0\n    k = 0\n    for i in range(0, len(left)):\n        for j in range(i, len(right)):\n            if j == len(right)-1 or left[i] == left[i+1] or right[j] == right[j+1]:\n                k += 1\n    return k\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(stdin.readline().strip())\n    r = list(stdin.readline().strip())\n    d = {'?': set(), 'c': set(), 'b': set(), 'a': set()}\n    for i in range(n):\n        d['?'].add(i) if l[i] == '?' else d['c'].add(i) if l[i] == 'c' else d['b'].add(i) if l[i] == 'b' else d['a'].add(i)\n        d['?'].add(i) if r[i] == '?' else d['c'].add(i) if r[i] == 'c' else d['b'].add(i) if r[i] == 'b' else d['a'].add(i)\n    l = list(d['?'])\n    r = list(d['?'])\n    l.sort()\n    r.sort()\n    s = set()\n    t = set()\n    for i in range(n):\n        if l[i] in s:\n            t.add(l[i])\n        elif r[i] in t:\n            s.add(r[i])\n        else:\n            s.add(l[i])\n            t.add(r[i])\n    k = len(s)\n    print(k)\n    for i in range(k):\n        for j in range(i+1, k):\n            if (j, i) not in s:\n                print(i, j)\n            else:\n                break\n\n    return \"\""
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.splitlines()[0])\n    left = set(stdin.splitlines()[1])\n    right = set(stdin.splitlines()[2])\n    pairs = set()\n    for l in left:\n        if l == '?':\n            l = set(left)\n        for r in right:\n            if r == '?':\n                r = set(right)\n            if l!= r:\n                pairs.add(l + r)\n    return len(pairs)\n"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of compatible left-right pairs of boots, i.e. pairs consisting of one left and one right boot which have compatible colors.\n\n    The following example corresponds to the input:\n    >>> solution('codeforces\\n'\n   ...          'dodivthree')\n    >>> 5\n    >>> solution('bambarbia\\n'\n   ...          'hellocode')\n    >>> 10\n    \"\"\"\n    n = int(stdin[0])\n    left = set(stdin[1])\n    right = set(stdin[2])\n    left_to_right = {k: k for k in range(n)}\n    right_to_left = {k: k for k in range(n)}\n\n    def match(left, right):\n        return left == right or left == '?' or right == '?'\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if match(left[i], right[j]):\n                left_to_right[i] = j\n                right_to_left[j] = i\n                break\n\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (\n                left_to_right[i]!= j\n                and right_to_left[j]!= i\n                and match(left[i], right[j])\n            ):\n                res += 1\n    return res\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    l = s[1]\n    r = s[2]\n\n    left = [0] * n\n    right = [0] * n\n    for i in range(n):\n        if l[i] == \"?\":\n            left[i] = -1\n        else:\n            left[i] = l[i]\n        if r[i] == \"?\":\n            right[i] = -1\n        else:\n            right[i] = r[i]\n\n    left.sort()\n    right.sort()\n    res = 0\n    i, j = 0, n - 1\n    while i < n and j >= 0:\n        if left[i] == right[j]:\n            res += 1\n            i += 1\n            j -= 1\n        elif left[i] > right[j]:\n            j -= 1\n        else:\n            i += 1\n    return res"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 4 1 2 2 1 5 3\n   ... ''')\n    '3'\n    >>> solution('''11\n   ... -5 -4 -3 -2 -1 0 1 2 3 4 5\n   ... ''')\n    '2'\n    \"\"\"\n    a = [int(x) for x in stdin.split('\\n')[0].split()]\n    count = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i!= j:\n                if a[i] == a[j]:\n                    a[i] = a[j]\n                    count += 1\n                elif j > i and a[i] > a[j]:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    blocks = set()\n    for i in range(1, N):\n        a = A[i - 1]\n        b = A[i]\n        if a < b:\n            for j in range(i + 1, N):\n                if A[j] < b:\n                    blocks.add((a, b))\n                else:\n                    break\n        else:\n            for j in range(i - 1, -1, -1):\n                if A[j] > a:\n                    blocks.add((a, b))\n                else:\n                    break\n    return str(len(blocks)) + \"\\n\" + \"\\n\".join(map(lambda x: f\"{x[0]} {x[1]}\", blocks))\n    # https://codeforces.com/problemset/problem/652/A\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem 'Disjoint set of blocks problem'.\n\n    Parameters\n    ----------\n    stdin : str\n        Input of the problem.\n\n    Returns\n    -------\n    str\n        String with the solution.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    values = stdin.split('\\n')[1].split()\n    # values = list(map(int, values))\n    # graph = {i: {j: None for j in range(n) if i!= j} for i in range(n)}\n    # graph = {i: {j: None for j in range(n) if i!= j} for i in range(n)}\n    graph = {}\n    for i in range(n):\n        graph[i] = set()\n        for j in range(n):\n            if i!= j and values[j] == values[i]:\n                # graph[i][j] = j\n                graph[i].add(j)\n    # print(graph)\n    for i in range(n):\n        for j in range(i, n):\n            if graph[i].intersection(graph[j]):\n                graph[i].union(graph[j])\n    ans = {i: len(graph[i]) for i in range(n)}\n    # print(ans)\n    ans = max(ans.values())\n    print(ans)\n    # ans = max(ans, max(ans.values()))\n    for i, j in ans.items():\n        if j == ans:\n            print(i, j)\n    return ''\n    # return graph"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # \u5168\u3066\u306e\u30d6\u30ed\u30c3\u30af\u306e\u5f53\u305f\u308a\u5224\u5b9a\u306f\u3001\u6dfb\u5b57\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u308b\n    # https://atcoder.jp/contests/abc081/tasks/abc081_b\n\n    n, *a = [int(s) for s in stdin.split()]\n\n    # \u30b9\u30bf\u30fc\u30c8\u6642\u306b\u30bd\u30fc\u30c8\n    a.sort()\n    # \u89e3\u306e\u5019\u88dc\u6570\u3092\u4fdd\u6301\u3059\u308b\u8f9e\u66f8\n    ans = {}\n\n    # \u30b9\u30bf\u30fc\u30c8\u4f4d\u7f6e\u3092\u6c7a\u3081\u308b\n    start = a[0]\n    # \u7d42\u4e86\u4f4d\u7f6e\u3092\u6c7a\u3081\u308b\n    end = a[-1]\n\n    # \u7d42\u4e86\u4f4d\u7f6e\u3092\u6e80\u305f\u3059\u307e\u3067\n    while end <= n:\n        # \u7d42\u4e86\u4f4d\u7f6e\u304b\u30891\u756a\u6700\u5f8c\u307e\u3067(end-1)\u3092\u63a2\u7d22\n        for i in range(end-1, start-1, -1):\n            # \u30eb\u30fc\u30d7\u304c\u7d42\u4e86\u3057\u305f\u3089, \u7d42\u4e86\u4f4d\u7f6e\u30921\u3064\u305a\u3089\u3059\n            if end < i + a[i]:\n                end = i + a[i]\n                # \u7d42\u4e86\u4f4d\u7f6e\u307e\u3067\u79fb\u52d5\u3057\u305f\u3089, \u518d\u5ea6\u30eb\u30fc\u30d7\n                break\n\n        # \u7d42\u4e86\u4f4d\u7f6e\u30921\u3064\u305a\u3089\u3057\u305f\u3068\u304d\n        if end < n:\n            # \u7d42\u4e86\u4f4d\u7f6e\u30921\u3064\u305a\u3089\u3059\n            end += 1\n            # \u5019\u88dc\u6570\u30921\u3064\u6e1b\u3089\u3059\n            ans[end] = ans.get(end, 0) - 1\n    \n    # \u5019\u88dc\u6570\u304c\u6700\u5927\u306ekey\u3092\u53d6\u5f97\u3057\u3066, \u4e00\u3064\u305a\u3064\u66f8\u304d\u51fa\u3059\n    ans_keys = sorted(ans.keys())\n    # for i in ans_keys:\n    #     print(i, ans[i])\n    return len(ans_keys)"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    s = sum(a)\n    if s % n == 0:\n        return n\n    res = 0\n    a.sort()\n    i = 1\n    while i < n:\n        if a[i-1] + a[i] <= s / n:\n            res += 1\n            i += 1\n        else:\n            break\n    return res"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = [0]\n    for i in range(n):\n        b.append(b[-1] + a[i])\n    ans = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            s = set()\n            for k in range(i, j+1):\n                s.add(b[k])\n            if len(s) > ans:\n                ans = len(s)\n                print(ans)\n                print(*s)\n    return ''"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    dict = {}\n    for i in range(len(a)):\n        if a[i] not in dict:\n            dict[a[i]] = [i]\n        else:\n            dict[a[i]].append(i)\n    for i in dict:\n        for j in dict:\n            if len(dict[i]) > 1 and len(dict[j]) > 1:\n                if (dict[i][-1] + 1) == dict[j][0] or dict[i][0] == dict[j][-1]:\n                    count += 1\n                    break\n    print(count)\n    return ''\nsolution(input())\n"
    },
    {
        "number": 4209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(c) for c in stdin.readline().split()]\n\n    ans = 0\n    for i in range(n):\n        s = set()\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                s.add(j)\n            elif arr[j] > arr[i]:\n                break\n        if len(s) == n - i - 1:\n            ans += 1\n            print(i + 1, j + 1)\n\n    return str(ans)"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    s = set()\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            s.add(a[i] + a[j])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n2 78 4 10\\n\")\n    12\n    >>> solution(\"5 2\\n3 7 19 3 3\\n\")\n    0\n    \"\"\"\n\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                ans += 1\n\n    return ans\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n\n    n, k = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\" \")))\n\n    counter = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if gcd(a[i], a[j]) == k:\n                counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n\n    a = sum(arr)\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s = arr[i] + arr[j]\n            if s % k == 0:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n**2) time | O(1) space\"\"\"\n    n, k = map(int, stdin.split())\n    nums = [int(x) for x in stdin.split()]\n    pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (nums[i] + nums[j]) % k == 0:\n                pairs += 1\n    return str(pairs)\n\n\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1::2]]\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] % k == 0:\n                res += 1\n    return res\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(stdin.split())\n"
    },
    {
        "number": 4210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if ((a[i] * a[j]) % k) == 0:\n                ans += 1\n\n    return ans\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A has values that are integers.\n    '''\n    n, *A = [int(x) for x in stdin.splitlines()]\n    \n    B = A[:-1]\n    # B = [max(A[i], A[i+1]) for i in range(len(A)-1)]\n    B.sort(reverse=True)\n    A = B + A[-1:]\n    # print(A)\n    return sum(A[::2])\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 5\n   ... ''')\n    '9'\n    >>> solution('''4\n   ... -1 -2 -3\n   ... ''')\n    '-1'\n    >>> solution('''5\n   ... 2 3 6 4\n   ... ''')\n    '14'\n    \"\"\"\n    n, *nums = [int(x) for x in stdin.split('\\n')[:-1]]\n    return str(sum(sorted(nums)[::-1][:n]))\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n-1):\n        result += max(a[i], a[i+1])\n    return result\n    \n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nb = [int(i) for i in sys.stdin.readline().split()]\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()\n    N = int(line[0])\n    B = [int(num) for num in line[1].split(\" \")]\n    if N == 2:\n        if B[1] >= B[0]:\n            return B[1]\n        return B[0]\n    B = list(enumerate(B))\n    B.sort(key=lambda x: x[1])\n    A = [B[0][1]]\n    index = 1\n    while index < N:\n        if B[index][1] >= max(A):\n            A.append(B[index][1])\n            index += 1\n        else:\n            A.append(max(A))\n            index += 1\n    A = list(reversed(A))\n    print(sum(A))\n    return sum(A)\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, solution_imp(stdin.split('\\n'))))\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Gets input and returns a string'''\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    A = list(map(int, stdin.split()))\n    N = A[0]\n    B = A[1:]\n    \n    S = sum(B)\n    B_max = max(B)\n    \n    A_list = []\n    \n    i = 0\n    while i < len(B) - 1:\n        j = i + 1\n        while j < len(B):\n            if B_max < B[i] + B[j]:\n                B_max = B[i] + B[j]\n            j += 1\n        i += 1\n    \n    if S < B_max:\n        return S\n    elif S == B_max:\n        return str(S)\n    else:\n        return str(B_max)\n"
    },
    {
        "number": 4211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Get input and return solution'''\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    return str(max(numbers[0] + max(numbers[1:]), sum(numbers)))\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = [i for i in stdin.splitlines()]\n    res = 0\n    for i in range(1, len(data), 4):\n        A = [int(i) for i in data[i].split()]\n        res += A[3] * (sum([A[2] - A[0] == j for j in range(1, A[1] + 1)]))\n    return res\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the maximum possible score of A.\n    >>> solution('3 4 3\\n1 3 3 100\\n1 2 2 10\\n2 3 2 10')\n    110\n    \"\"\"\n    n, m, q = map(int, stdin.split(' '))\n    A = set()\n    for _ in range(q):\n        a, b, c, d = map(int, stdin.split(' '))\n        A.add(a)\n        A.add(b)\n        if A.issubset(set(range(1, m+1))):\n            score = 0\n            for i in range(a, b+1):\n                score += d\n        else:\n            score = 0\n        print(score)\n    return \"\""
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # input in the format described above\n    # N M Q\n    # a_1 b_1 c_1 d_1\n    # :\n    # a_Q b_Q c_Q d_Q\n\n    n, m, q = (int(x) for x in stdin.split(\"\\n\")[0].split(\" \"))\n    a = [[int(x) for x in input().split(\" \")] for y in range(q)]\n\n    max_score = 0\n    for i in range(q):\n        max_score = max(max_score, sum(a[i][2:]))\n\n    return max_score\n\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    S = []\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.readline().split())\n        S.append([a, b, c, d])\n    \n    answer = 0\n    for i in range(Q):\n        S[i].append(0)\n        for j in range(i + 1, Q):\n            if A[S[i][1]] - A[S[i][0]] == S[i][2] and A[S[j][1]] - A[S[j][0]] == S[j][2]:\n                S[j][3] += S[i][3]\n        if S[i][3] > answer:\n            answer = S[i][3]\n    return str(answer)\n\"\"\"\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    result = 0\n    for _ in range(q):\n        a, b, c, d = map(int, stdin.readline().split())\n        for i in range(n):\n            if a <= i <= b - 1:\n                result += d\n    return str(result)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    def score(a, b, c, d):\n        s = 0\n        for i in range(1, len(a)):\n            if a[i] - a[i - 1] == c and b[i] - b[i - 1] == c:\n                s += d[i]\n        return s\n\n    N, M, Q = map(int, stdin.split())\n    a = [0] * Q\n    b = [0] * Q\n    c = [0] * Q\n    d = [0] * Q\n    for i in range(Q):\n        a[i], b[i], c[i], d[i] = map(int, stdin.split())\n\n    ans = 0\n    for i in range(1, N + 1):\n        ans = max(ans, score(a, b, c, d) + score(a, b + [i], c, d) + score(a, b, c + [i], d) + score(a, b + [i], c + [i], d))\n    \n    return ans\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string which is the solution\"\"\"\n    lines = stdin.split(\"\\n\")\n    # N M Q\n    n, m, q = map(int, lines[0].split())\n    # a_1 b_1 c_1 d_1\n    a_list = []\n    for i in range(1, q + 1):\n        a, b, c, d = map(int, lines[i].split())\n        a_list.append([a, b, c, d])\n\n    max_score = 0\n    for i in range(q):\n        a, b, c, d = a_list[i]\n        max_score = max(max_score, d)\n        for j in range(i + 1, q):\n            if a_list[i][0] == a_list[j][1] and a_list[i][1] == a_list[j][0] and c_list[i][2] == c_list[j][2]:\n                max_score = max(max_score, d + c_list[j][3])\n    return str(max_score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = [int(i) for i in stdin.readline().split()]\n    scores = []\n    for _ in range(Q):\n        a, b, c, d = [int(i) for i in stdin.readline().split()]\n        scores.append(d)\n    \n    dp = [0] * (M+1)\n    dp[1] = scores[0]\n\n    for i in range(2, N+1):\n        dp[i] = max(dp[i], dp[i-1])\n        dp[i] = max(dp[i], dp[i-1] + scores[i-1])\n    return dp[N]\n"
    },
    {
        "number": 4212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    max_abs = float('-inf')\n    for i in range(len(A)-1):\n        abs_diff = abs(A[i]-A[i+1])\n        if abs_diff > max_abs:\n            max_abs = abs_diff\n    return max_abs\n    \n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    numbers = [int(number) for number in stdin[1:].split(' ')]\n\n    return max([abs(numbers[index] - numbers[index + 1]) for index in range(len(numbers) - 1)])\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum absolute difference of two elements (with different indices) in A.\"\"\"\n    pass\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = map(int, stdin.split())\n    maximum_difference = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            difference = numbers[j] - numbers[i]\n            if difference > maximum_difference:\n                maximum_difference = difference\n    return str(maximum_difference)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    sequence = [int(x) for x in stdin.readline().split()]\n    max_diff = 0\n    min_element = float('inf')\n    for element in sequence:\n        if element < min_element:\n            min_element = element\n        else:\n            max_diff = max(max_diff, element - min_element)\n    print(max_diff)\n    '''\n    n = int(stdin.readline())\n    sequence = [int(x) for x in stdin.readline().split()]\n    max_diff = 0\n    min_element = float('inf')\n    for element in sequence:\n        if element < min_element:\n            min_element = element\n        else:\n            max_diff = max(max_diff, abs(element - min_element))\n    print(max_diff)\n\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    m = min(a)\n    M = max(a)\n    diff = M - m\n    if diff == 0:\n        print(0)\n    else:\n        print(diff)\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution dict.\n\n    >>> solution(\"4\\n1 4 6 3\\n\")\n    '5'\n    \"\"\"\n    n = int(stdin.readline())\n    sequence = [int(x) for x in stdin.readline().strip().split(\" \")]\n    return str(max(abs(sequence[i] - sequence[j]) for i in range(n) for j in range(n) if i!= j))\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    \n    diff = [max(A) - min(A)]\n    for i in range(n - 1):\n        diff.append(abs(A[i + 1] - A[i]))\n        \n    return max(diff)"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def take_input(n: int) -> list:\n        if len(stdin) > 0:\n            return [int(num) for num in stdin.split()]\n\n        return []\n\n    numbers = take_input(stdin)\n    max_difference = 0\n    for i in range(len(numbers) - 1):\n        if numbers[i] - numbers[i + 1] > max_difference:\n            max_difference = numbers[i] - numbers[i + 1]\n    print(max_difference)\n\n    return max_difference\n"
    },
    {
        "number": 4213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 4 6 3\n   ... ''')\n    '5'\n    >>> solution('''4\n   ... 1 5 3 4\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 4 2 3\n   ... ''')\n    '2'\n    >>> solution('''4\n   ... 1 4 5 3\n   ... ''')\n    '4'\n    >>> solution('''4\n   ... 2 4 1 3\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    arr = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    arr.sort()\n    return str(max(arr[n - 1] - arr[0], arr[n - 1] - arr[1], arr[n - 2] - arr[0]))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin.readline().strip())\n    data = [tuple(map(int, line.strip().split())) for line in stdin]\n\n    dists = []\n    for i in range(n):\n        for j in range(i+1, n):\n            dists.append(sqrt((data[i][0] - data[j][0])**2 + (data[i][1] - data[j][1])**2))\n    return str(sum(dists)/n)\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Input\n    num = stdin.split()[0]\n    coordinates = stdin.split('\\n')[1:]\n\n    # Calculation\n    # Take square root of each value in the coordinates\n    coords_sqr = [\n        [int(coordinate.split()[0]), int(coordinate.split()[1])]\n        for coordinate in coordinates\n    ]\n\n    # Find the distances between all points\n    distances = []\n    for i in range(len(coords_sqr)):\n        for j in range(i + 1, len(coords_sqr)):\n            distances.append(int(math.sqrt((coords_sqr[i][0] - coords_sqr[j][0]) ** 2 + (coords_sqr[i][1] - coords_sqr[j][1]) ** 2)))\n\n    # Return the average distance\n    return str(sum(distances) / len(distances))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 1\n    for i in range(1, n):\n        result += int(input()) ** 2\n    print(result ** (1 / n))\n    return \"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    x_list = list(map(int, stdin[1:].split()))\n    dist_list = []\n    for i in range(len(x_list)-1):\n        for j in range(i+1, len(x_list)):\n            dist_list.append(math.sqrt((x_list[i]-x_list[j])**2+(y_list[i]-y_list[j])**2))\n    print(sum(dist_list)/(n*(n-1)/2))\n    return ''\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1\\n0\\n0\")\n    '2.276142...'\n    >>> solution(\"3\\n0\\n1\\n0\")\n    '2.276142...'\n    >>> solution(\"5\\n0\\n0\\n0\\n0\")\n    '0.0'\n    >>> solution(\"3\\n1\\n1\\n1\\n1\\n1\")\n    '3.0'\n    >>> solution(\"5\\n1\\n1\\n1\\n1\")\n    '0.0'\n    >>> solution(\"5\\n0\\n0\\n0\\n0\")\n    '0.0'\n    \"\"\"\n    _, *data = stdin.splitlines()\n    data = [[int(x), int(y)] for x, y in map(lambda x: x.split(), data)]\n    c = 0\n    for i in range(len(data)):\n        for j in range(i + 1, len(data)):\n            c += ((data[i][0] - data[j][0]) ** 2 + (data[i][1] - data[j][1]) ** 2) ** 0.5\n    c /= (len(data) - 1) * len(data) / 2\n    return str(round(c, 6))\n"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    towns = []\n    for _ in range(n):\n        towns.append(tuple(map(int, stdin.readline().split(\" \"))))\n    print(towns)\n    return None"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    'Calculates the average path length of all possible paths'\n    # Solve for the average path length\n    N = int(stdin.readline().rstrip())\n    towns = [map(int, line.split(' ')) for line in stdin]\n    towns.append(towns[0])\n    path_length = 0\n    for i in range(len(towns) - 1):\n        path_length += distance(towns[i], towns[i + 1])\n    return '{:.6f}'.format(path_length / factorial(N))\n\n-----Explanation-----\nThis solution relies on the fact that the distance between any two points on the coordinate plane is given by the Pythagorean theorem. We can find the distance between two points by calculating the Pythagorean theorem and using the Pythagorean Theorem twice to find the distance between them.\n\nTo find the distance between two towns, we can use the Pythagorean Theorem twice to find the distance between them and then divide that by 2 to account for the fact that we travel in a straight line between them.\n\nFor example, the distance between (0, 0) and (0, 1) is \\sqrt{1^2+0^2} = 1.\n\nFor the distance between (1, 0) and (2, 0), we use the Pythagorean Theorem twice:\n\\sqrt{1^2+1^2} + \\sqrt{2^2+0^2}\n= \\sqrt{3^2+1^2}\n= \\sqrt{3^2+2^2}\n= \\sqrt{5^2+0^2}\n= \\sqrt{5^2+1^2}\n= \\sqrt{14^2+0^2}\n= \\sqrt{14^2+1^2}\n= \\sqrt{15^2+1^2}\n= \\sqrt{15^2+2^2}\n= \\sqrt{19^2+1^2}\n= \\sqrt{19^2+2^2}\n= \\sqrt{19^2+3^2}\n= \\sqrt{23^2+1^2}\n= \\sqrt{23^2+2^2}\n= \\sqrt{23^2+3^2}\n= \\sqrt{23^2+4^2}\n= \\sqrt{29^2+1^2}\n= \\sqrt{29^2+2^2}\n= \\sqrt{29^2+3^2}\n= \\sqrt{29^2+4^2}\n= \\sqrt{29^2+5^2}\n= \\sqrt{37^2+1^2}\n= \\sqrt{37^2+2^2}\n= \\sqrt{37^2+3^2}\n= \\sqrt{37^2+4^2}\n= \\sqrt{37^2+5^2}\n= \\sqrt{37^2+6^2}\n= \\sqrt{41^2+1^2}\n= \\sqrt{41^2+2^2}\n= \\sqrt{41^2+3^2}\n= \\sqrt{41^2+4^2}\n= \\sqrt{41^2+5^2}\n= \\sqrt{41^2+6^2}\n= \\sqrt{41^2+7^2}\n= \\sqrt{41^2+8^2}\n= \\sqrt{41^2+9^2}\n= \\sqrt{41^2+10^2}\n= \\sqrt{41^2+11^2}\n= \\sqrt{41^2+12^2}\n= \\sqrt{41^2+13^2}\n= \\sqrt{41^2+14^2}\n= \\sqrt{41^2+15^2}\n= \\sqrt{41^2+16^2}\n= \\sqrt{41^2+17^2}\n= \\sqrt{41^2+18^2}\n= \\sqrt{41^2+19^2}\n= \\sqrt{41^2+20^2}\n= \\sqrt{41^2+21^2}\n= \\sqrt{41^2+22^2}\n= \\sqrt{41^2+23^2}\n= \\sqrt{41^2+24^2}\n= \\sqrt{41^2+25^2}\n= \\sqrt{41^2+26^2}\n= \\sqrt{41^2+27^2}\n= \\sqrt{41^2+28^2}\n= \\sqrt{41^2+29^2}\n= \\sqrt{41^2+30^2}\n= \\sqrt{41^2+31^2}\n= \\sqrt{41^2+32^2}\n= \\sqrt{41^2+33^2}\n= \\sqrt{41^2+34^2}\n= \\sqrt{41^2+35^2}\n= \\sqrt{41^2+36^2}\n= \\sqrt{41^2+37^2}\n= \\sqrt{41^2+38^2}\n= \\sqrt{41^2+39^2}\n= \\sqrt{41^2+40^2}\n= \\sqrt{41^2+41^2}\n= \\sqrt{41^2+42^2}\n= \\sqrt{41^2+43^2}\n= \\sqrt{41^2+44^2}\n= \\sqrt{41^2+45^2}\n= \\sqrt{41^2+46^2}\n= \\sqrt{41^2+47^2}\n= \\sqrt{41^2+48^2}\n= \\sqrt{41^2+49^2}\n= \\sqrt{41^2+50^2}\n= \\sqrt{41^2+51^2}\n= \\sqrt{41^2+52^2}\n= \\sqrt{41^2+53^2}\n= \\sqrt{41^2+54^"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    path_count = n * (n - 1) * (n - 2) // 6\n    sum_of_lengths = 0\n    for i in range(1, n + 1):\n        sum_of_lengths += int(stdin.split('\\n')[i]) * int(stdin.split('\\n')[i + 1])\n\n    return str(sum_of_lengths / path_count)\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lines = stdin.readlines()\n    towns = [list(map(int, line.split(' '))) for line in lines]\n    \n    path_lengths = []\n    for i in range(n):\n        for j in range(i+1, n):\n            x_i, y_i = towns[i]\n            x_j, y_j = towns[j]\n            d = (x_i - x_j) ** 2 + (y_i - y_j) ** 2\n            path_lengths.append(d ** 0.5)\n    \n    return str(round(sum(path_lengths) / len(path_lengths), 6))"
    },
    {
        "number": 4214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - B)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get width and length of window and length of curtains from stdin\n    width, len_curt, *_ = [int(x) for x in stdin.split('\\n')[0].split()]\n\n    # Get the maximum length of the curtains\n    max_len = len_curt * 2\n    # Get the minimum length of the curtains\n    min_len = len_curt\n\n    # Calculate the total length of the curtains and uncovered part\n    # of the window\n    total_len = 2 * width - 2 * min_len\n\n    # Print the total uncovered part of the window\n    print(total_len - max_len)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a - b)"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return A - (B - 1)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to this problem\n    '''\n    # Get input from user\n    A, B = map(int, stdin.split())\n    # Initialize variables\n    count = 0\n    # Calculate the uncovered length\n    for i in range(1, A, 2):\n        count += (B + i) % 2\n    return count\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    (A, B) = list(map(int, stdin.split()))\n    return str(A - B)"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split())\n    return str(max(0, a - 2 * b))\n\"\"\"\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a - b)\n"
    },
    {
        "number": 4215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"a\""
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_F = (10 ** 10, 10 ** 10)\n    for A in range(1, n + 1):\n        for B in range(1, n + 1):\n            if (A * B) < min_F[0]:\n                min_F = (A * B, A, B)\n    return str(min_F[1]) +'' + str(min_F[2])"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 100:\n        return 1\n    for i in range(100, n + 1):\n        if str(i * 100).count('0') == 0:\n            return i\n    return n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution function to the problem of the code breaker.\n    :param stdin: The standard input for the problem\n    :return: The solution of the problem\n    \"\"\"\n    pass"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    count = 0\n    for i in range(100, 1, -1):\n        for j in range(100, 1, -1):\n            count = i * j\n            if N == count:\n                break\n            else:\n                continue\n        break\n    return str(count)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n\n    return min(n // x for x in range(1, 11))"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def calc_f(a, b):\n        digits_a = len(str(a))\n        digits_b = len(str(b))\n        return max(digits_a, digits_b)\n\n    max_f = 0\n    for a in range(1, n+1):\n        for b in range(a+1, n+1):\n            f = calc_f(a, b)\n            if f > max_f:\n                max_f = f\n    return max_f\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get N\n    N = int(stdin.readline().strip())\n    # get all F(A,B)\n    all_F = []\n    for A in range(1, N + 1):\n        for B in range(1, N + 1):\n            # get F(A,B)\n            F = len(str(A)) + len(str(B))\n            # append to all_F\n            all_F.append(F)\n    # get min F\n    min_F = min(all_F)\n    # get index of min F\n    index = all_F.index(min_F)\n    # get A\n    A = index // N + 1\n    # get B\n    B = index % N + 1\n    # return result\n    return str(min_F) +'' + str(A) +'' + str(B)\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_val = None\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            if min_val is None or min_val > min(len(str(a)), len(str(b))):\n                min_val = min(len(str(a)), len(str(b)))\n    return min_val\n"
    },
    {
        "number": 4216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = []\n    for _ in range(n):\n        k.append(int(stdin.split()[1]))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split()[2:])))\n\n    # transpose a\n    t = []\n    for i in range(m):\n        t_row = []\n        for j in range(n):\n            t_row.append(a[j][i])\n        t.append(t_row)\n\n    # print(k)\n    # print(a)\n    # print(t)\n\n    # check whether k_i is contained in each row or not\n    # if not, the list is empty\n    for i in k:\n        if i not in t[0]:\n            return 0\n\n    # check whether k_i is contained in each column or not\n    # if not, the list is empty\n    for j in k:\n        col_sum = 0\n        for i in range(n):\n            col_sum += a[i][j - 1]\n        if col_sum == 0:\n            return 0\n\n    return m"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(' ')))\n\n    def solve(N, M, T):\n        ans = 0\n        for i in range(1, M+1):\n            ans += T[i]\n        return ans\n\n    def solve2(N, M, T):\n        ans = 0\n        for i in range(N):\n            ans += T[i*M+T[i]]\n        return ans\n\n    T = list(map(int, stdin.split(' ')))\n    print(solve(N, M, T))\n    print(solve2(N, M, T))\n\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    nums = []\n    for i in range(m):\n        k = int(stdin.readline())\n        nums.append(list(map(int, stdin.readline().split())))\n    nums.sort(key=lambda x: x[0])\n    result = 0\n    for i in range(1, m):\n        for j in range(i):\n            if nums[i][0] > nums[j][0] and nums[i][1] > nums[j][1]:\n                result += 1\n                break\n    print(result)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def print_num_liked_foods(stdin: str) -> int:\n        n, m = map(int, stdin.readline().split())\n        k = [map(int, stdin.readline().split()) for _ in range(n)]\n        cnt = 0\n        for _ in range(n):\n            flag = True\n            for i in range(m):\n                if k[_][i]!= i + 1:\n                    flag = False\n                    break\n            if flag:\n                cnt += 1\n        return cnt\n\n    return print_num_liked_foods(stdin)\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '4'\n\"\"\"\n\n\n\"\"\"\n\ubb38\uc81c\ub97c \ud480\uc5b4\ubcf4\ub824 \ud588\ub294\ub370 \uace0\ubbfc\uc774 \uc788\ub2e4.\n\ub2e4\ub978 \uc0ac\ub78c\ub4e4\ub3c4 \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \ud480\uc5c8\ub354\ub77c.\n\uc804\uccb4 \uc870\uac74\uc5d0\uc11c \uac19\uc740 \uac12\uc744 \uac00\uc9c4 \uacbd\uc6b0\uac00 \ub2e8 \ud55c\ubc88\uc778 \uc870\uac74\uc744 \uc81c\uac70\ud558\uba74\uc11c \ube44\uad50\ud588\ub2e4.\n\ud558\uc9c0\ub9cc \uc774 \ubc29\ubc95\uc740 \uc804\uccb4 \uc870\uac74\uc744 \ub3cc\uba74\uc11c \uac19\uc740 \uac12\uc744 \uac00\uc9c4 \uacbd\uc6b0\uc758 \uc218\ub97c \ud655\uc778\ud574\uc57c \ud558\ubbc0\ub85c \ubbf8\uce5c\uc774\ub2e4.\n\uc804\uccb4 \uc870\uac74\uc744 \uc54c\uac8c\ub41c \uc870\uac74\uc73c\ub85c \ubc18\ubcf5\ubb38\uc744 \ud1b5\ud574 \ud574\uacb0\ud574\uc57c \ud55c\ub2e4.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n\"\"\"\n\nN, M = [int(x) for x in stdin.readline().split(' ')]\nA = [set([int(x) for x in stdin.readline().split(' ')[1:]]) for _ in range(M)]\n\nS = set()\nfor i in range(N):\n    for j in range(M):\n        S |= A[j]\n\nprint(len(S))\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return ''\n    lines = stdin.split('\\n')\n    n = int(lines[0].split(' ')[0])\n    m = int(lines[0].split(' ')[1])\n    k = []\n    for i in range(1, m+1):\n        line = lines[i].split(' ')\n        k.append(int(line[0]))\n    k.sort()\n    \n    food = {}\n    for i in range(1, n+1):\n        food[i] = {}\n        for j in range(1, m+1):\n            food[i][j] = int(lines[j+i])\n    \n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for l in range(1, m+1):\n                if food[i][j] == l:\n                    count += 1\n                    \n    return count\n    # return ''"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 4\n   ... 2 1 3\n   ... 3 1 2 3\n   ... 2 3 2\n   ... ''')\n    '1'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\nComplexity:\n\nTime: O(n)\nSpace: O(n)\n\"\"\"\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    odd_num = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            odd_num += 1\n    return str(odd_num / n)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # \u56e0\u70ba\u6211\u5011\u53ea\u8981\u77e5\u9053\u6578\u5b57A\u4e00\u500b\u500b\u51fa\u73fe\u57281~N\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\u6211\u5011\u53ef\u4ee5\u5148\u56fa\u5b9a\u6578\u5b57N\uff0c\u518d\u56fa\u5b9a\u6578\u5b57A\u7684\u4f4d\u7f6e\uff0c\u6c42\u51fa\u7e3d\u5171\u6709\u5e7e\u7a2e\u7d44\u5408\n    # \u53ef\u4ee5\u5148\u5f97\u5230\u524dn\u500b\u6578\u5b57\u7684\u7d44\u5408\u6578\u91cf\n    # \u6c42\u5f97\u7e3d\u7d44\u5408\u6578\u91cf\u6642\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u53ea\u7528\u6578\u5b57A\u7684\u4f4d\u7f6e\u8b8a\u5316\uff0c\u5206\u5225\u53d6\u51fa\u8d77\u59cb\u4f4d\u7f6e\u5230\u7d50\u675f\u4f4d\u7f6e\u503c\u70ba1\u7684\u7d44\u5408\u6578\u91cf\n    # \u53d6\u51fa\u8d77\u59cb\u4f4d\u7f6e\u5230\u7d50\u675f\u4f4d\u7f6e\u503c\u70ba2\u7684\u7d44\u5408\u6578\u91cf\n    #...\n    # \u53d6\u51fa\u8d77\u59cb\u4f4d\u7f6e\u5230\u7d50\u675f\u4f4d\u7f6e\u503c\u70ban\u7684\u7d44\u5408\u6578\u91cf\n    # \u5047\u8a2d\u6211\u5011\u8981\u77e5\u9053\u7b2ci\u500b\u6578\u5b57A\u57281~n\u7684\u4f4d\u7f6e\uff0c\u5247\u5171\u6709n!\u7a2e\u7d44\u5408\n    # \u56e0\u70ba\u6211\u5011\u4e0d\u77e5\u9053\u7b2ci\u500b\u6578\u5b57A\u4f4d\u7f6e\u662f\u4e0d\u662f\u5947\u6578\uff0c\u56e0\u6b64\u5c31\u4e0d\u80fd\u518d\u7528\u7d44\u5408\u6578\u91cf\u7e3d\u548c\u4f86\u5224\u65b7\uff0c\u6240\u4ee5\u6211\u5011\u53ea\u80fd\u7528\u7e3d\u6578\u91cf\u4f86\u5224\u65b7A\u7684\u6578\u5b57\u662f\u5426\u662f\u5947\u6578\n    # \u6211\u5011\u53ef\u4ee5\u5229\u7528\u8cbb\u6c0f\u6578\u5b78\u6982\u5ff5\uff0c\u89e3\u984c\u5982\u4e0b\n    n = int(stdin)\n    ans = 1\n    for i in range(1, n):\n        ans *= i\n    ans *= n\n    for i in range(2, n + 1):\n        ans //= i\n    odd = ans // 2 + 1\n    ans = 1\n    for i in range(1, n):\n        ans *= i\n    odd -= ans\n    print(odd / ans)\n    return\nsolution(input())\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count=0\n    N=int(stdin)\n    for i in range(1,N+1):\n        if(i%2!=0):\n            count+=1\n    return(count/N)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = n * (n + 1)\n    odd_num = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            odd_num += 1\n\n    return str(odd_num / total)\n\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    odd_count = 0\n    for num in range(n + 1):\n        if num % 2 == 1:\n            odd_count += 1\n    return str(odd_count / n)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"{:.12f}\".format(2 / n)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd_count = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            odd_count += 1\n    prob_odd = odd_count / n\n    return str(prob_odd)\n"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd = sum(i % 2 == 1 for i in range(1, N + 1))\n    return str(odd / N)\n\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Your solution goes here\n    n = int(stdin)\n    if n < 1:\n        return 0\n    else:\n        return round(n/2,6)"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(map(str, list))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    data = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    judgements = list(map(int, stdin.readline().split()))\n    honest = []\n    for i in range(n):\n        honest.append(0)\n    for i in range(n):\n        if judgements[i] == 1:\n            honest[i] = 1\n    judgements = []\n    for i in range(n):\n        if i == data[i]:\n            judgements.append(0)\n        else:\n            judgements.append(1)\n    judgements = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        if judgements[i] == 1:\n            honest[data[i]] = 1\n    k = 0\n    for i in range(n):\n        if honest[i] == 1:\n            k += 1\n    print(k)\n    return ''\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n = [int(x) for x in stdin.split('\\n')[:2]]\n    # generate all possible tests and store them in a dict\n    tests = dict()\n    for i in range(1, n+1):\n        _, a, x, y = [int(x) for x in stdin.split('\\n')[i].split()]\n        tests[i] = (a, x, y)\n    # calculate all possible combinations of honest people\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if tests[i][2] == 0 and tests[j][2] == 0:\n                count += 1\n            if tests[i][2] == 1 and tests[j][2] == 1:\n                count += 1\n    # print count\n    return str(count)\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\nimport re\nimport sys\n\nN = int(input())\nH_dict = {}\nfor i in range(N):\n    A = int(input())\n    H_dict[A] = [0] * N\n    for _ in range(A):\n        x, y = map(int, re.findall(r'\\d+', input()))\n        H_dict[A][x-1] = 1\n        H_dict[A][y-1] = 0\nH_set = set()\nfor i in range(N):\n    for j in range(N):\n        if H_dict[i][j] == 1:\n            H_set.add(j)\nprint(len(H_set))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = set(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    b = set(map(int, stdin.split(\"\\n\")[2:n * 2 + 2:2]))\n    z = set(map(int, stdin.split(\"\\n\")[n * 2 + 2::]))\n\n    tot = 0\n    for i in a:\n        if i in z:\n            tot += 1\n        for j in b:\n            if i!= j and j in z:\n                tot += 1\n    return tot\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *people = stdin.split('\\n')\n    N = int(N)\n    assert 1 <= N <= 15\n    assert all(0 <= int(p) <= N for p in people)\n    assert len({(int(p.split()[0]), int(p.split()[1])) for p in people}) == N\n\n    A = set()\n    A_honest = set()\n    for p in people:\n        i, a, b = p.split()\n        a, b = int(a), int(b)\n        assert 1 <= a <= N\n        assert a!= i\n        assert 1 <= b <= 2\n        A.add((i, a))\n        if b == 1:\n            A_honest.add(a)\n\n    assert len(A_honest) <= N - 1\n\n    def is_consistent(A):\n        if len(A) == 0:\n            return True\n        for x, y in A:\n            assert x!= y\n            assert 1 <= x <= N\n            assert x!= i\n            assert 1 <= y <= 2\n            assert y == 1 or y == 0\n        return len(A_honest.intersection(A)) == 0\n\n    B = A.copy()\n    while not is_consistent(B):\n        for x, y in A:\n            if (x, y) not in B:\n                break\n        else:\n            raise AssertionError\n        B.remove((x, y))\n        if y == 1:\n            A_honest.add(x)\n    B.difference_update(A_honest)\n\n    return str(len(A_honest))\n"
    },
    {
        "number": 4219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Store the input from stdin into a list and remove the newline character\n    # in each line\n    stdin_list = stdin.split(\"\\n\")[:-1]\n\n    # Define a list to store the input for each person\n    # The list will have two lists inside it.\n    # The first list contains the x coordinates and the\n    # second list contains the y coordinates.\n    # The x and y coordinates will be in pairs.\n    person_list = []\n\n    # Define a list to store the results of the function\n    # For every person, if it is consistent, add the result to\n    # the list.\n    consistent_list = []\n\n    # Loop through each element in the list\n    for i in range(len(stdin_list)):\n        # Split the element into two strings\n        # The first string will contain the x coordinates\n        # The second string will contain the y coordinates\n        element = stdin_list[i].split(\" \")\n\n        # The first string is the x coordinates and the\n        # second string is the y coordinates\n        x_coordinates = element[0]\n        y_coordinates = element[1]\n\n        # Define a list to store the x coordinates\n        x_list = []\n\n        # Loop through each x coordinate\n        for x in x_coordinates.split(\" \"):\n            # The x coordinate must be an integer\n            x_list.append(int(x))\n\n        # Define a list to store the y coordinates\n        y_list = []\n\n        # Loop through each y coordinate\n        for y in y_coordinates.split(\" \"):\n            # The y coordinate must be an integer\n            y_list.append(int(y))\n\n        # Add the x and y coordinate lists to the\n        # person list\n        person_list.append([x_list, y_list])\n\n    # Create a list to store the results of the function\n    # For every person, if the person is consistent, add the\n    # result to the list\n    for person in person_list:\n        consistent_list.append(is_consistent(person))\n\n    # Create a list to store the x and y coordinates of each\n    # person who is consistent\n    consistent_list = list(\n        filter(lambda x: x, consistent_list))\n\n    # Create a variable to store the number of consistent people\n    number_of_people_with_no_inconsistencies = len(\n        consistent_list)\n\n    # Return the result\n    return number_of_people_with_no_inconsistencies\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(str, stdin.split())\n    if len(s) <= int(k):\n        return s\n    return f\"{s[:int(k)]}...{s[len(s)-int(k):]}\"\n    "
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length: int = int(stdin[0])\n    string: str = stdin[1]\n    if len(string) > length:\n        print(string[:length] + \"...\")\n    else:\n        print(string)\n    return \"\"\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # use standard input\n    return stdin"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0441\u0442\u0440\u043e\u043a\u0443 \u0432\u0445\u043e\u0434\u0430 \u0447\u0438\u0441\u043b\u043e K, \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0438\u0437 \u043f\u0435\u0440\u0432\u044b\u0445 K \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0438 \u0434\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c...\n    \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u043b\u0438\u043d\u043e\u0439 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 K\n    '''\n    return stdin[:int(stdin[:1])] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution will print the formatted string\n    '''\n    # your code goes here\n    K,S = stdin.split(\"\\n\")\n    K = int(K)\n    print(K,S)\n    if len(S) > K:\n        print(S[:K].append(\"...\"))\n    else:\n        print(S)"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin[1:]\n    if len(s) > k:\n        s = s[:k] + \"...\"\n    return s\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[:K] + \"...\")\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get the input from the user\n    k = int(stdin)\n    s = stdin\n    # check the length of the string\n    if len(s) > k:\n        print(s[0:k] + \"...\")\n    else:\n        print(s)"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:K] + \"...\"\n\nassert solution('nikoandsolstice') == 'nikoandsolstice'\nassert solution('nikoandsolsticehas') == 'nikoand...'\nassert solution('nikoandsolsticehasa') == 'nikoandsolst...'\nassert solution('nikoandsolsticehasa'*50) == 'nikoandsolsticehasa'*50\nassert solution('nikoandsolsticehasa'*100) == 'nikoandsolsticehasa'*100\nassert solution('nikoandsolsticehasa'*101) == 'nikoand...'\n\nassert len(solution('nikoandsolsticehasa'*101)) <= K+1\nassert len(solution('nikoandsolsticehasa'*101)) <= 100+1\n"
    },
    {
        "number": 4220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    len_input = len(stdin)\n    if len_input <= K:\n        return stdin\n    else:\n        return stdin[:K] + \"... (\" + str(len_input - K) + \" more)...\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\" if stdin[-1]!= \"s\" else stdin + \"es\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\" if stdin[-1]!='s' else stdin + \"es\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin+'s' if stdin[-1] =='s' else stdin+'es'"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\" if stdin[-1] =='s' or stdin[-1] == 'z' or stdin[-1] == 'x' or stdin[-1] == 'd' or stdin[-1] == 'g' else stdin + \"es\""
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + \"s\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin +'s' if stdin[-1]!='s' else stdin + 'es'"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin +'s' if stdin[-1]!='s' else stdin + 'es'\n\"\"\"\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    if word.endswith('s'):\n        return word + 'es'\n    return word +'s'\n"
    },
    {
        "number": 4221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    taknese = stdin[0]\n    if taknese[-1] =='s':\n        return taknese + 'es'\n    return taknese +'s'\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, k = [int(x) for x in stdin.split(\" \")]\n    snake_dict = {}\n    for _ in range(k):\n        snake_dict[int(stdin.readline())] = []\n    for _ in range(n):\n        for _ in range(int(stdin.readline())):\n            snake_dict[int(stdin.readline())].append(int(stdin.readline()))\n    result = 1\n    for i in range(1, k + 1):\n        if not snake_dict[i]:\n            result *= i\n    return result\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n6 10\n1\n3\n4\n1 2\n2\n1 3\n3\n3\n2\n\n-----Sample Output-----\n6\n\n-----Sample Input-----\n3 2\n2\n1 2\n2\n2\n1\n3\n2\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n3 1\n2\n3\n4\n1 2\n2\n1 3\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 3\n3\n1 2\n1 3\n2 3\n2 4\n3 4\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n8 1\n3\n4\n3\n4\n4\n3\n3\n4\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n8 3\n4\n1 2\n2\n3\n4\n5\n6\n7\n8\n\n-----Sample Output-----\n1\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 1\n3\n2\n3\n4\n2\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n3 1\n2\n3\n4\n5\n1\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 1\n1\n2\n2\n3\n2\n\n-----Sample Output-----\n3\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n1 3\n1\n2\n2\n2\n\n-----Sample Output-----\n1\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 1\n1\n2\n3\n4\n5\n6\n7\n\n-----Sample Output-----\n1\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n1 4\n1\n1\n1\n1\n2\n2\n2\n2\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n8 3\n3\n1 1\n2\n2\n3\n2\n1 2\n3\n3\n2\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 5\n1\n2\n3\n4\n5\n6\n7\n7\n\n-----Sample Output-----\n7\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 1\n1\n1\n1\n2\n2\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n4 1\n1\n1\n1\n2\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 2\n3\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\n-----Sample Output-----\n1\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n4 5\n1\n2\n1 2\n2 3\n1 3\n3 4\n3 3\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 7\n1\n1\n1\n1\n1\n1\n2\n2\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n1 1\n1\n1\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 4\n1\n1\n1\n1\n1\n2\n2\n2\n\n-----Sample Output-----\n4\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 3\n1\n1\n1\n2\n2\n2\n2\n2\n\n-----Sample Output-----\n3\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 4\n2\n2\n1 2\n2\n1 1\n3\n2 2\n3\n3\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 3\n1\n2\n3\n4\n5\n6\n7\n8\n\n-----Sample Output-----\n3\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n1 2\n2\n1\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n8 3\n4\n1 2\n1 3\n1 4\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 3\n1\n1\n1\n2\n2\n2\n2\n\n-----Sample Output-----\n4\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n2 2\n2\n3\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 2\n3\n2\n3\n2\n2\n3\n3\n\n-----Sample Output-----\n1\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 2\n3\n2\n3\n2\n2\n2\n3\n\n-----Sample Output-----\n1\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n8 7\n2\n3\n4\n2\n3\n4\n5\n5\n5\n\n-----Sample Output-----\n1\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n8 7\n3\n2\n3\n2\n2\n2\n3\n3\n3\n\n-----Sample Output-----\n1\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n1 1\n1\n1\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n1 1\n1\n1\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n8 4\n3\n1 1\n2\n1 2\n1 3\n2 2\n2 3\n2 4\n3 4\n\n-----Sample Output-----\n3\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n7 1\n1\n2\n1\n1\n2\n1\n1\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 1\n1\n1\n2\n2\n3\n\n-----Sample Output-----\n2\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 1\n1\n3\n3\n3\n3\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 1\n1\n1\n1\n1\n2\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 1\n1\n3\n1\n3\n1\n\n-----Sample Output-----\n1\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 1\n1\n1\n2\n2\n3\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n5 2\n2\n3\n3\n1\n2\n\n-----Sample Output-----\n0\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n3 3\n2\n2\n1 2\n2\n1 1\n2 3\n2 2\n3 3\n\n-----Sample Output-----\n3\n\"\"\"\n\n\"\"\"\n-----Sample Input-----\n2 3\n2\n3\n3\n1\n2\n3\n\n-----Sample Output-----\n0\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # \ud310\ub9e4\ud558\ub294 \ubc30\ub0ad \ubb34\uac8c\ub97c \ub2f4\uc744 \uadf8\ub987 \ub9ac\uc2a4\ud2b8 \ucd08\uae30\ud654\n    bag = [0] * 101\n    n, k = map(int, stdin.split(' '))\n    # N \uac1c\uc758 Snuke\ub97c \ubc1b\uc74c\n    for i in range(n):\n        # Snuke \ubc88\ud638, Snack \uac1c\uc218\n        s, d = map(int, stdin.split(' '))\n        # Snack \uac1c\uc218\ub9cc\ud07c \ubc30\ub0ad\uc5d0 \ub4e4\uc5b4\uac10\n        for j in range(d):\n            bag[s] += 1\n    # Snack \uac1c\uc218 \ucd08\uae30\ud654\n    snack_cnt = 0\n    # Snack \uac1c\uc218 \uc138\uae30\n    for j in range(101):\n        snack_cnt += bag[j]\n    # Snack \uac1c\uc218\uac00 0 \uc774\uba74 Snuke \uc218 \ub9ac\ud134\n    if snack_cnt == 0:\n        return str(n)\n    else:\n        # Snack \uac1c\uc218\uac00 0\uc774 \uc544\ub2c8\uba74 Snuke \uc218 \uacc4\uc0b0\n        snake_cnt = 0\n        for j in range(101):\n            snake_cnt += bag[j] // j\n        # Snack \uac1c\uc218\uac00 0\uc774 \uc544\ub2c8\uba74 Snuke \uc218 \ub9ac\ud134\n        return str(snake_cnt)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    snacks = [int(stdin.readline()) for _ in range(k)]\n    snack = [0] * n\n    for snack_idx in range(k):\n        snack[snacks[snack_idx] - 1] = snack_idx\n    return sum(snack)\n\nprint(solution(stdin=input()))\n\n\"\"\""
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs\n    N, K = [int(x) for x in stdin.split('\\n')[0].split()]\n    Snack_d = [int(x) for x in stdin.split('\\n')[1].split()]\n    Snack_A = []\n    for _ in range(K):\n        Snack_A.append([int(x) for x in stdin.split('\\n')[_+2].split()])\n    Snack_A.sort()\n\n    # process\n    victim = None\n    for _ in range(K):\n        if Snack_d[_] > 0:\n            if Snack_d[_] >= Snack_A[_][0]:\n                Snack_d[_] -= Snack_A[_][0]\n            else:\n                Snack_d[_] = 0\n            victim = _\n        else:\n            break\n    if victim is not None:\n        print('victim is Snuke'+ str(victim+1))\n    else:\n        print('no victim')\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input from Standard Input, calls the function and prints the output to Standard Output.\"\"\"\n    print(get_victims(stdin))\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split()]\n    Snacks = [int(i) for i in stdin.split()]\n    Snacks.sort()\n    return sum([1 for Snack in Snacks if Snack % N == 1])\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_snacks_from_string(string: str) -> list:\n        result = []\n        for s in string.split('\\n'):\n            if s!= '':\n                result.append(int(s))\n        return result\n    n, k = get_snacks_from_string(stdin)[:2]\n    snacks = get_snacks_from_string(stdin)[2:]\n    snacks = list(filter(lambda x: x < n, snacks))\n    snacks = list(filter(lambda x: x not in [x for sublist in snacks for x in sublist], snacks))\n    return len(snacks)\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    snakes = []\n    for i in range(1, n + 1):\n        snakes.append(int(stdin.split()[i - 1]))\n    snakes.sort()\n    print(snakes[:k - 1])\n    return str(snakes[k - 1])"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    nk = []\n    for i in range(k):\n        nk.append([int(x) for x in stdin.split()][i])\n    return nk\n"
    },
    {
        "number": 4222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, K = map(int, stdin.readline().split())\n    snacks = []\n    snakes = set()\n    snakes_with_snacks = set()\n    for _ in range(K):\n        snacks.append(int(stdin.readline()))\n        snakes_with_snacks.update(snacks)\n    for _ in range(N):\n        snakes.add(int(stdin.readline()))\n    snake_without_snacks = snakes.difference(snacks_with_snacks)\n    return str(len(snake_without_snacks))\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    slimes = [stdin[1][i] for i in range(N)]\n    output = \"\"\n\n    while len(slimes) > 0:\n        i = 0\n        while i < len(slimes):\n            if i < len(slimes) - 1:\n                if slimes[i] == slimes[i + 1]:\n                    del(slimes[i + 1])\n                    del(slimes[i])\n                    i = 0\n                else:\n                    i += 1\n            else:\n                i += 1\n\n        if len(slimes) == 0:\n            break\n        else:\n            output += slimes[0]\n            del(slimes[0])\n    \n    return output\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    S = stdin.readline()\n    slimes = [0] * (N + 1)\n    for i in range(N):\n        slimes[i + 1] = slimes[i] + S[i] == S[i]\n\n    count = 0\n    for i in range(N + 1):\n        count += i if slimes[i] == 1 else 0\n\n    return count\n\nprint(solution(sys.stdin.read()))\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Hint 1\n    1. Split the input string into separate strings, representing individual slimes\n    2. For each slime, check if there are any adjacent slimes with the same color.\n       If so, merge those two slimes into a single slime with the color of one of them.\n    3. Repeat until all slimes have different colors.\n    4. Count the number of slimes that have different colors and return it.\n    \"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of slimes.\"\"\"\n    N, S = stdin.splitlines()\n    N = int(N)\n    S = list(S)\n    i = 1\n    while i < len(S):\n        if S[i] == S[i-1]:\n            S[i-1] = str(int(S[i-1]) + 1)\n            S.pop(i)\n        else:\n            i += 1\n    print(len(S))\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numSlimes = int(stdin.readline())\n    slimes = stdin.readline().rstrip()\n    queue = [slimes[0]]\n    for i in range(1, len(slimes)):\n        if queue[0]!= slimes[i]:\n            queue.append(slimes[i])\n        else:\n            queue = queue[1:]\n    return len(queue)\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N: number of slimes\n    S: string that describes the color of each slime\n    '''\n    slimes = stdin.split('\\n')[1:]\n    N = int(slimes[0])\n    S = slimes[1]\n    n = len(S)\n    # dp[i][j] means we're looking for the largest i-j\n    dp = [[0] * n for _ in range(n)]\n    # dp[i][j] is the largest i-j, where j < i\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if S[i] == S[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    print(dp)\n    return dp[0][n - 1]\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nstdin = sys.stdin.readlines()\n\nslimes = stdin[0]\n\ncount = 0\nslimes = list(slimes)\n\nfor i in range(len(slimes)):\n    if slimes[i] == 'a':\n        count += 1\n        for j in range(i, len(slimes)):\n            if slimes[j] == 'a':\n                slimes[j] = 'b'\n            elif slimes[j] == 'b':\n                slimes[j] = 'c'\n            elif slimes[j] == 'c':\n                slimes[j] = 'd'\n            elif slimes[j] == 'd':\n                slimes[j] = 'e'\n            elif slimes[j] == 'e':\n                slimes[j] = 'f'\n            elif slimes[j] == 'f':\n                slimes[j] = 'g'\n            elif slimes[j] == 'g':\n                slimes[j] = 'h'\n            elif slimes[j] == 'h':\n                slimes[j] = 'i'\n            elif slimes[j] == 'i':\n                slimes[j] = 'j'\n            elif slimes[j] == 'j':\n                slimes[j] = 'k'\n            elif slimes[j] == 'k':\n                slimes[j] = 'l'\n            elif slimes[j] == 'l':\n                slimes[j] ='m'\n            elif slimes[j] =='m':\n                slimes[j] = 'n'\n            elif slimes[j] == 'n':\n                slimes[j] = 'o'\n            elif slimes[j] == 'o':\n                slimes[j] = 'p'\n            elif slimes[j] == 'p':\n                slimes[j] = 'q'\n            elif slimes[j] == 'q':\n                slimes[j] = 'r'\n            elif slimes[j] == 'r':\n                slimes[j] ='s'\n            elif slimes[j] =='s':\n                slimes[j] = 't'\n            elif slimes[j] == 't':\n                slimes[j] = 'u'\n            elif slimes[j] == 'u':\n                slimes[j] = 'v'\n            elif slimes[j] == 'v':\n                slimes[j] = 'w'\n            elif slimes[j] == 'w':\n                slimes[j] = 'x'\n            elif slimes[j] == 'x':\n                slimes[j] = 'y'\n            elif slimes[j] == 'y':\n                slimes[j] = 'z'\n            elif slimes[j] == 'z':\n                slimes[j] = 'a'\n\nprint(count)\n"
    },
    {
        "number": 4223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\naabbbbaaca\")\n    5\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"a\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    total = sum(a)\n    if total % 3 == 0:\n        return total // 3\n    else:\n        return -1\n    \n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please use the same output format in the example test cases\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    return str(max(N - len(a), 0))\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    operations = 0\n    i = 0\n    while True:\n        if i >= n:\n            break\n        if i == 0:\n            if a[i] % 3 == 0:\n                operations += 1\n                a[i] //= 3\n                i += 1\n            elif a[i] % 3 == 1:\n                operations += 1\n                a[i] //= 3\n                a[i] *= 3\n                i += 1\n            elif a[i] % 3 == 2:\n                operations += 1\n                a[i] //= 2\n                a[i] *= 3\n                i += 1\n            else:\n                break\n        else:\n            if a[i] % 3 == 0:\n                operations += 1\n                a[i] //= 3\n                i += 1\n            elif a[i] % 3 == 1:\n                operations += 1\n                a[i] //= 3\n                a[i] *= 3\n                i += 1\n            elif a[i] % 3 == 2:\n                operations += 1\n                a[i] //= 2\n                a[i] *= 3\n                i += 1\n            else:\n                break\n    return str(operations)"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = a.copy()\n    c = a.copy()\n    res = 0\n    for i in range(n):\n        c[i] = b[i] * 3 + c[i] * 2\n        b[i] = c[i] // 2\n        res = max(res, sum(c[:i + 1]))\n    print(res)\n    return''.join(map(str, c))\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    a = [int(x) for x in stdin.split(' ')]\n    d = a[1:]\n    a = a[:-1]\n    a_ = a\n    min_ = min(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] * 2 < a[j] and a[j] < a[i] * 3:\n                d[j] = a[j]\n                a_[j] = a[j]\n            elif a[j] % 2 == 0 and a[j] < a[i] * 3:\n                d[j] = a[j] // 2\n                a_[j] = a[j] // 2\n            elif a[j] % 3 == 0 and a[j] < a[i] * 2:\n                d[j] = a[j] * 3\n                a_[j] = a[j] * 3\n            else:\n                break\n    return str(n - sum(d))\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    cnt = 0\n    a.sort(reverse=True)\n    while True:\n        if a[0] % 2!= 0:\n            cnt += (a[0] - 1) // 2\n            break\n        a[0] //= 2\n        for i in range(len(a)):\n            if a[i] % 3!= 0:\n                cnt += (a[i] - 1) // 3\n                break\n            a[i] //= 3\n    return cnt\n"
    },
    {
        "number": 4224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    cnt = 0\n    ans = 0\n    for i in range(N):\n        ans += a[i] // 2 * 3\n        cnt += a[i] % 2\n        ans += cnt // 2 * 3\n        cnt = cnt % 2\n    print(ans)\n    return ''\n\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n\n    a, b, c, k = nums[0], nums[1], nums[2], nums[3]\n    return max(k * (a + b + c) - (a * k + b * k + c * k), 0)\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = [int(x) for x in stdin.split()]\n    total = A * B + C * (K - (A + B))\n    print(total)\n    return str(total)"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.split(\" \"))\n    return \" \".join(map(str, [max([a, b, c]) * k // 3, max([a, b, c]) * (k - k // 3), max([a, b, c]) * (k - 2 * (k // 3))]))\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0]\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = map(int, stdin.split())\n    return str(max(k * (a + b + c - 3), k * (a + b - 1) + (k - 1) * c))"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b, c, k = list(map(int, stdin.split()))\n    print(max((a + k, a + b + k, b + c + k), key=lambda x: x % 3))"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split(' '))\n    sum = 0\n    sum += min(A, K)\n    sum += min(B, K - A)\n    sum += min(C, K - B - A)\n    return str(sum)\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C, K = (int(x) for x in stdin.split())\n  return max(A, B, C) - K\n"
    },
    {
        "number": 4225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    c = 0\n    t = 0\n    while x > c:\n        if (x + y) % 2 == 0:\n            c += 1\n        else:\n            t += 1\n            c += 1\n    while t > y:\n        if (x + y) % 2 == 0:\n            c += 1\n        else:\n            t -= 1\n            c += 1\n    if c == y:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split(' ')))\n    return \"Yes\" if (x + y) % 2 == 0 else \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 8\")\n    'Yes'\n    \"\"\"\n    X, Y = map(int, stdin.split())\n    if (X + Y) % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(' ')\n    return 'Yes' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No'\n    # \uacbd\uc6b0\uc758 \uc218\uac00 \ucd5c\ub300 3\uac1c \uc774\ubbc0\ub85c \ucc98\uc74c \uc218\uc5d0 \ub530\ub77c \uacbd\uc6b0\uc758 \uc218\ub97c \uc870\uc808\ud558\uc5ec \ucd5c\ub300 3\uac1c\uae4c\uc9c0 \uac00\ub2a5\ud558\ub2e4.\n    # \uacbd\uc6b0\uc758 \uc218\uac00 2\uc77c \uacbd\uc6b0 2\uac00\uc9c0 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uacbd\uc6b0\uc758 \uc218\ub97c \uc870\uc808\ud558\uc5ec \ucd5c\ub300 3\uac1c\uae4c\uc9c0 \uac00\ub2a5\ud558\ub2e4.\n    # \uacbd\uc6b0\uc758 \uc218\uac00 3\uc77c \uacbd\uc6b0 3\uac00\uc9c0 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\ub294 \uc874\uc7ac\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uacbd\uc6b0\uc758 \uc218\ub97c \uc870\uc808\ud558\uc5ec \ucd5c\ub300 3\uac1c\uae4c\uc9c0 \uac00\ub2a5\ud558\ub2e4.\n    # \ucd08\uae30\ud654\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud55c\ub2e4.\n    # return 'Yes' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No'\n    # \uacbd\uc6b0\uc758 \uc218\ub294 \ucd5c\ub300 3\uac1c\ub85c \ucd08\uae30\ud654\ub97c \ud560 \uc218 \uc788\ub294\ub370 \uc774 \ubb38\uc81c\uc5d0\uc11c\ub294 \uc870\uac74\uc744 \uac78\uccd0\uc11c \ucd08\uae30\ud654\ub97c \ud558\ub294 \uc0c1\ud669\uc774 \ub41c\ub2e4.\n    # \ub530\ub77c\uc11c if \ubb38\uc744 \ud1b5\ud574 \uc870\uac74\uc744 \uac78\uc5b4\uc8fc\uba74 \ucd08\uae30\ud654\ub97c \ud558\uace0 \uc2f6\uc740 \uc870\uac74\ub9cc \uac78\uc5b4\ub0b8\ub2e4.\n    # return 'Yes' if int(x) / int(y) == 2 else 'No'\n    # return 'Yes' if int(x) / int(y) == 2 else 'No' if int(x) / int(y) == 3 else 'No'\n    # return 'Yes' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No'\n    # return 'Yes' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No'\n    # return 'Yes' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No'\n    # return 'Yes' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No'\n    # return 'Yes' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No' if int(x) / int(y) == 2 or int(x) / int(y) == 3 else 'No'\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y or x == 0 or y == 0:\n        return 'No'\n    return 'Yes' if (x + y) % 2 == 0 else 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    x = int(a[0])\n    y = int(a[1])\n    if (x - y) * 2 == y:\n        return \"Yes\"\n    else:\n        return \"No\"\n\"\"\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X > Y:\n        X, Y = Y, X\n    def comb(n):\n        return int(factorial(n) / factorial(n - 2) / 2)\n    x = comb(X)\n    y = comb(Y)\n    if x <= y:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find if there is a combination of numbers of cranes and turtles in which the statement is correct.\"\"\"\n    X, Y = map(int, stdin.split())\n    return 'Yes' if X + Y >= X * Y else 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n\n    c = 1\n    for i in range(x + 1):\n        for j in range(y + 1):\n            if 2 * i + 4 * j == x + y:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if 2 * x >= y or 2 * x <= y:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split(' '))\n        adj[a - 1].append(b - 1)\n        adj[b - 1].append(a - 1)\n    print(adj)\n    return str(sum(len(set(path)) == n for path in [[a] +\n                                                     [next(i) for i in range(n) if a == i] for a in range(n)]))\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    p = [list(map(int, stdin.split())) for _ in range(m)]\n\n    graph = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(m):\n        graph[p[i][0]][p[i][1]] = 1\n        graph[p[i][1]][p[i][0]] = 1\n    \n    # print(graph)\n\n    q = [1]\n    visited = [0 for _ in range(n + 1)]\n    visited[1] = 1\n    cnt = 1\n    while q:\n        v = q.pop(0)\n        for i in range(1, n + 1):\n            if visited[i] == 0 and graph[v][i] == 1:\n                q.append(i)\n                visited[i] = 1\n                cnt += 1\n    \n    return cnt\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return path\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N, M = map(int, stdin.split(\" \"))\n  g = {i: [] for i in range(1, N + 1)}\n  for _ in range(M):\n    u, v = map(int, stdin.split(\" \"))\n    u, v = min(u, v), max(u, v)\n    g[u].append(v)\n    g[v].append(u)\n  cnt = 0\n  visited = [0] * (N + 1)\n  for i in range(1, N + 1):\n    if visited[i] == 0:\n      cnt += dfs(i, visited)\n  return str(cnt)\n\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Failed\n  \"\"\"\n  N, M = map(int, stdin.split(' '))\n  paths = {(i, j): {(i, j)} for i in range(N) for j in range(N)}\n  for _ in range(M):\n    (i, j), (k, l) = map(int, stdin.split(' '))\n    paths[(i, j)].add(k)\n    paths[(i, j)].add(l)\n    paths[(k, l)].add(i)\n    paths[(k, l)].add(j)\n  for i in range(N):\n    for j in range(N):\n      for k in range(N):\n        for l in range(N):\n          paths[(i, j)].add((k, l))\n  paths[(1, 2)].add(3)\n  def visit(path: str, state: set) -> bool:\n    # print('path =', path)\n    # print('state =', state)\n    if len(state) == N:\n      return True\n    for i in range(1, len(path)):\n      # print('\\t', path[:i], path[i:])\n      if (path[:i], path[i:]) not in paths or (i > 1 and path[:i-1] + path[i:]) not in paths:\n        continue\n      # print('\\t\\t', path[:i-1] + path[i:])\n      if len(paths[(path[:i-1] + path[i:])]) == 1:\n        # print('\\t\\t\\t', paths[(path[:i-1] + path[i:])][0])\n        if path[:i-1] + path[i:] == paths[(path[:i-1] + path[i:])][0]:\n          state.add(path[i-1])\n          if visit(path[:i-1] + path[i:], state):\n            return True\n          state.remove(path[i-1])\n    return False\n  count = 0\n  for path in paths:\n    # print(path)\n    if len(paths[path]) == N:\n      count += 1\n      if visit(path, set()):\n        return str(count)\n  return str(count)\n\nprint(solution(stdin.read().strip()))\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(M)]\n    edges.sort(key=lambda e: e[0])\n    edges = deque(edges)\n    \n    def dfs(vertex, visited):\n        visited.add(vertex)\n        \n        for neighbour in edges:\n            if neighbour[0] in visited or neighbour[1] in visited:\n                continue\n                \n            if neighbour[0] == vertex:\n                dfs(neighbour[1], visited)\n                \n            elif neighbour[1] == vertex:\n                dfs(neighbour[0], visited)\n                \n    visited = set()\n    dfs(1, visited)\n    \n    return len(visited)\n    \n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split(' '))\n  e = {}\n  for _ in range(m):\n    u, v = map(int, stdin.split(' '))\n    e[u] = e[u] + [v] if u in e else [v]\n    e[v] = e[v] + [u] if v in e else [u]\n  \n  if 1 in e:\n    del e[1]\n  \n  ans = n\n  while e:\n    for u in e:\n      for v in e[u]:\n        if v not in e:\n          ans -= 1\n          break\n        if u in e[v]:\n          e[v].remove(u)\n          if not e[v]:\n            del e[v]\n          break\n  return ans"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n,m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    # edges = set(edges)\n    counter = 0\n\n    vertices = [i for i in range(n)]\n\n    def dfs(current, path):\n        nonlocal counter\n        path.append(current)\n        visited[current] = True\n        for vertex in vertices:\n            if vertex not in path:\n                if (current, vertex) not in edges:\n                    dfs(vertex, path[:])\n                elif not visited[vertex]:\n                    dfs(vertex, path[:])\n        path.pop()\n        visited[current] = False\n        if len(path) == n:\n            counter += 1\n\n    visited = [False]*n\n    for vertex in vertices:\n        dfs(vertex, [])\n\n    return counter\n"
    },
    {
        "number": 4227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N, M = list(map(int, stdin.split(' ')))\n    path = [[0,0] for _ in range(M+1)]\n    for i in range(M):\n        A, B = list(map(int, stdin.split(' ')))\n        if path[A][0] == 0:\n            path[A] = [1, B]\n        if path[B][0] == 0:\n            path[B] = [1, A]\n    path = list(filter(lambda x: x[0]==1, path))\n    print(len(path))"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    count, val = map(int, stdin.split())\n    lst = [int(input()) for _ in range(count)]\n    lst.sort()\n    print(sum(lst[:count-1]))\n    return"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...   \"4 -2\\n\"\n   ...   \"5 1\\n\"\n   ...   \"6 3\\n\"\n   ... )\n    '20'\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    a = list(map(lambda x: x + n, a))\n    a.sort()\n    return str(sum(a[i + 1] - a[i] for i in range(n)))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 0"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the flavor of the apple pie made of the remaining N-1 apples when\n    you optimally choose the apple to eat.\n\n    Args:\n        stdin (str): Input from Standard Input\n\n    Returns:\n        str: Flavor of the apple pie made of the remaining N-1 apples\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, l = map(int, stdin.readline().split())\n    apples = list(map(int, stdin.readline().split()))\n\n    return sum(apples[:n - 1]) - min(abs(sum(apples[:i]) - sum(apples[i + 1:])) for i in range(n - 1))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(i) for i in stdin.split(' ')]\n    s = sum([int(i) for i in range(1, n + 1)])\n    maxx = s - l\n    mini = s\n    for i in range(1, n):\n        t = (s - l - i) % l\n        if t > maxx:\n            maxx = t\n            mini = t + i\n        if t < mini:\n            mini = t\n            maxx = t + i\n    return str(mini + s)"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l = [int(x) for x in stdin.split(\" \")]\n    return str(sum(l + i - 1 for i in range(1, n + 1)))\n"
    },
    {
        "number": 4228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def f(L):\n        A = sorted(map(int, stdin.split('\\n')[1].split(' ')))\n        i = 0\n        d = 0\n        while len(A) > 1:\n            if A[i] + L > 0:\n                A.pop(i)\n                d += A[i]\n            else:\n                A.pop(i)\n                A.pop(i)\n                d += A[i]\n        return d\n    return str(min(map(abs, f(int(stdin.split('\\n')[0].split(' ')[1])))))\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    result = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            result += 'FizzBuzz'\n        elif i % 3 == 0:\n            result += 'Fizz'\n        elif i % 5 == 0:\n            result += 'Buzz'\n        else:\n            result += i\n\n    print(result)\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    ans = 0\n    for i in range(1, N+1):\n        if i % 15 == 0:\n            ans += i\n        elif i % 3 == 0:\n            ans += i\n        elif i % 5 == 0:\n            ans += i\n        else:\n            ans += i\n    return ans\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            result += i\n        elif i % 3 == 0:\n            result += i\n        elif i % 5 == 0:\n            result += i\n        else:\n            result += i\n    return result\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(n)\n    '''\n    pass"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fb = [i for i in range(1, N+1) if not i % 3 and not i % 5]\n    return sum(fb)\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            sum += i\n            print(i)\n        elif i % 3 == 0:\n            sum += i\n            print(i)\n        elif i % 5 == 0:\n            sum += i\n            print(i)\n        else:\n            sum += i\n            print(i)\n\n    return str(sum)"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    sums = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 and i % 5 == 0:\n            sums += i\n        elif i % 3 == 0:\n            sums += i\n        elif i % 5 == 0:\n            sums += i\n        else:\n            sums += i\n    return str(sums)\n    pass\n\nprint(solution(stdin.readline()))\n\nsolution_2: int = 0\nn: int = int(stdin)\nfor i in range(1, n+1):\n    if i % 3 == 0 and i % 5 == 0:\n        solution_2 += i\n    elif i % 3 == 0:\n        solution_2 += i\n    elif i % 5 == 0:\n        solution_2 += i\n    else:\n        solution_2 += i\n\nreturn str(solution_2)\n"
    },
    {
        "number": 4229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'not implemented yet'"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the nearest integer to an input number.\n    Args:\n        stdin (str): Input number and sequence of integers.\n    Returns:\n        str: Nearest integer.\n    \"\"\"\n    number = int(stdin.split()[0])\n    sequence = [int(x) for x in stdin.split()[1:]]\n    if number in sequence:\n        return str(number)\n    elif len(sequence) == 1:\n        return str(sequence[0])\n    elif number < min(sequence):\n        return str(min(sequence))\n    elif number > max(sequence):\n        return str(max(sequence))\n    else:\n        for i in range(len(sequence) - 1):\n            if sequence[i] <= number < sequence[i + 1]:\n                return str(sequence[i + 1])\n            elif sequence[i + 1] <= number < sequence[i]:\n                return str(sequence[i])\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, N = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    P = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    P.sort()\n    d = {x: abs(x-X) for x in P}\n    m = min(d.values())\n    return [x for x in d if d[x] == m][0]\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the absolute difference between x and the nearest integer of x.\n\n    :param stdin: the string of numbers to be read.\n    :return: the absolute difference between x and the nearest integer of x.\n    \"\"\"\n    # Read in X and N\n    numbers = stdin.split()\n    x = int(numbers[0])\n    n = int(numbers[1])\n\n    # Read in N non-decreasing integers\n    p = [int(i) for i in stdin.split()]\n\n    # Find the distance between the closest number and X\n    #  (relative distance)\n    d = float('inf')\n    i = 0\n    while i < n:\n        d = min(d, abs(p[i] - x))\n        i += 1\n\n    # Find the nearest integer of X (absolute distance)\n    #  and return the absolute difference between X and the nearest integer.\n    return x if d == float('inf') else x + d"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number nearest to the given one.\"\"\"\n    x, n = map(int, stdin.split(' '))\n    numbers = sorted(map(int, stdin.split(' ')[1:]))\n    if not numbers:\n        return '0'\n    return str(min(((abs(number - x) if number!= x else 0)\n                    for number in numbers), key=lambda x: x[0]))\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    p = list(map(int, stdin.split()[1:]))\n    nearest_value = None\n    for value in p:\n        if nearest_value is None or abs(X - value) < abs(X - nearest_value):\n            nearest_value = value\n    print(nearest_value)\n    return ''\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    num = stdin.split(' ')[1]\n    num = [int(i) for i in num.split(' ')]\n    \n    x_pos = num.index(x)\n    num = num[x_pos:] + num[:x_pos]\n    \n    diff = [abs(i-x) for i in num]\n    return str(min(diff))\n    \n    \n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Use map to convert the values from the input string\n    # into integers.\n    X, N = map(int, stdin.split(' '))\n    # The sequence of elements of p.\n    p = list(map(int, stdin.split(' ')[1:]))\n\n    # The smallest absolute difference of any\n    # element of p with X is:\n    #   |X - min_p|\n    # Since p is sorted, the smallest absolute\n    # difference of any element of p with X is:\n    #   |X - max_p|\n    # Since the elements of p are unique, there is\n    # only one element in p that is nearest to X.\n    return str(max(p) if p else '0')\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split(\" \"))\n    p = [int(c) for c in stdin.split(\" \")][1:]\n\n    # get distance from x to each p and return min\n    return p[min(enumerate(abs(x - p)), key=lambda e: e[1])[0]]\n\"\"\"\n\nimport unittest\n\nclass TestStringMethods(unittest.TestCase):\n    def test_a(self):\n        self.assertEqual(solution('5 5\\n4 7 10 6 5'), 8)\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    ps = sorted(map(int, stdin.split()))\n    k = max(abs(x - p) for p in ps)\n    return str(ps[(abs(x - k) + 1).bit_length() - 1])\n"
    },
    {
        "number": 4230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(v) for v in stdin.split()]\n    nums = [int(v) for v in stdin.split()[1:]]\n    nums.sort()\n    return str(min([nums[bisect.bisect_right(nums, i) - 1] for i in range(x, 100 + 1)], key=lambda x: abs(x - x)))\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of remaining white cells.\n    '''\n    H, W = map(int, stdin.split('\\n')[0].split())\n    h, w = map(int, stdin.split('\\n')[1].split())\n    return H * W - (h * w)\n    \n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(n) for n in stdin.split()]\n    h, w = [int(n) for n in stdin.split()]\n    print(H-h+1*W-w+1)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(val) for val in stdin.split(' ')]\n    print(rows * cols)\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split(\" \"))\n    row = int(stdin.split(\" \")[1])\n    col = int(stdin.split(\" \")[2])\n    result = W * H - (row * col)\n    return str(result)"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    r, c = map(int, stdin.split())\n    return str(H * W - r * c)"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the task.\"\"\"\n    pass\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    H W\n    h w\n    '''\n    n, m = map(int, stdin.split())\n    if n == 1:\n        print(0)\n        return\n\n    print(max(n - 1, 0) * max(m - 1, 0))\n    return\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W, _ = stdin.split(' ')\n    H, W = int(H), int(W)\n    h, w = stdin.split(' ')[1:]\n    h, w = int(h), int(w)\n    return f'{(H - h) * (W - w)}'\n"
    },
    {
        "number": 4231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return h * w - sum(map(sum, stdin.split()))\n\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()[1::]]\n    a.sort()\n\n    count = 0\n    for elem in a:\n        if elem < a[k - 1]:\n            count += 1\n    if count == 0:\n        return \"-1\"\n    return a[k - 1]\n\"\"\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n    arr.sort()\n    x = min(arr[-k:])\n    if x > 10 ** 9:\n        return '-1'\n    return x\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    seq = [int(i) for i in stdin.split()]\n    s = seq[:k]\n    if k == 0:\n        return \"1\"\n    s.sort()\n    x = s[k-1] + 1\n    if k == n:\n        return \"10\"\n    for i in seq[k:]:\n        if i <= x:\n            s.append(i)\n            s.sort()\n            if len(s) == k:\n                x = s[k-1] + 1\n            else:\n                x = s[k] + 1\n        else:\n            return str(x)\n    if x == 10 ** 9 + 1:\n        return \"-1\"\n    else:\n        return str(x)\n\n\n\n\nprint(solution(\"7 4 3 7 5 1 10 3 20\"))\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n\n    count = 0\n    for i in arr:\n        if i <= k:\n            count += 1\n\n    if count < k:\n        return str(-1)\n    else:\n        arr = sorted(arr, reverse=True)\n        count = 0\n        for i in arr:\n            if count > k:\n                break\n            if i <= k:\n                count += 1\n        return str(arr[count - 1])\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    arr = list(map(int, stdin.split(\" \")))\n\n    arr.sort()\n\n    low = 1\n    high = 10 ** 9\n\n    while low <= high:\n        middle = (low + high) // 2\n\n        # count = 0\n        # for i in range(n):\n        #     if arr[i] <= middle:\n        #         count += 1\n        #\n        # if count < k:\n        #     low = middle + 1\n        # else:\n        #     high = middle - 1\n\n        count = 0\n        for i in range(n):\n            if arr[i] <= middle:\n                count += 1\n        if count < k:\n            low = middle + 1\n        else:\n            high = middle - 1\n    return high\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n\n    low, high = 1, max(sequence)\n    while low <= high:\n        mid = (low + high) // 2\n        count = 0\n        for el in sequence:\n            count += el // mid\n            if count >= k:\n                break\n        if count >= k:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return str(low)\n\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    get input, solve problem\n    '''\n    n, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    a = [int(i) for i in stdin.split('\\n')[1].split()]\n    k_idx = [i for i in range(len(a)) if a[i] <= k]\n    if len(k_idx) == 0:\n        print(-1)\n    else:\n        print(sorted(k_idx)[len(k_idx) - k])\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return None\n    n, k = list(map(int, stdin.split()))\n    lst = list(map(int, stdin.split()))\n    if n == 1:\n        if k == 1:\n            print(lst[0])\n            return\n        else:\n            print(-1)\n            return\n    lst.sort()\n    min_k = lst[k-1]\n    for x in lst:\n        if x > min_k:\n            print(x)\n            return\n    print(-1)\n"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    sequence = [int(i) for i in stdin.split()]\n    \n    return str(max(i for i in range(1, 10**9+1) if len([j for j in sequence if j <= i]) == k))"
    },
    {
        "number": 4232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin[i * m:(i + 1) * m]) for i in range(n)]\n    count = 0\n    stars = []\n\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                count += 1\n                stars.append((i, j))\n\n    def is_valid(i, j, s):\n        return i >= 0 and i < n and j >= 0 and j < m and grid[i][j] == '.' and (i, j) not in stars\n\n    def dfs(s):\n        if s == 0:\n            return 1\n        count = 0\n        for i in range(-s, s + 1):\n            for j in range(-s, s + 1):\n                if i == 0 and j == 0:\n                    continue\n                if is_valid(i + 1, j + 1, s):\n                    stars.append((i + 1, j + 1))\n                    count += dfs(s - 1)\n                    stars.pop()\n        return count\n\n    return str(count) if count == n * m else '-1'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, stdin.split(' '))\n    #\n    # grid = [[c for c in stdin.split('\\n')[i]] for i in range(n)]\n    #\n    # def put_star(grid: List[List[str]], i: int, j: int, size: int) -> int:\n    #     # return\n    #     return len(\n    #         [\n    #             [i, j],\n    #             [i, j + size],\n    #             [i + size, j],\n    #             [i + size, j + size],\n    #             [i + size // 2, j + size // 2],\n    #             [i + size // 2, j + size // 2 + size],\n    #             [i + size // 2 + size, j + size // 2],\n    #             [i + size // 2 + size, j + size // 2 + size],\n    #         ]\n    #     )\n    #\n    # max_stars = n * m\n    #\n    # for i in range(n):\n    #     for j in range(m):\n    #         if grid[i][j] == '.':\n    #             max_stars -= 1\n    #         else:\n    #             max_stars += 1\n    #             grid[i][j] = put_star(grid, i, j, 1)\n    #\n    # if max_stars > 0:\n    #     return \"Impossible\"\n    # else:\n    #     return str(max_stars)\n\n    def find_max_stars(grid: List[List[str]]) -> int:\n        max_stars = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == '.':\n                    max_stars -= 1\n                else:\n                    max_stars += 1\n                    grid[i][j] = put_star(grid, i, j, 1)\n        return max_stars\n\n    def put_star(grid: List[List[str]], i: int, j: int, size: int) -> None:\n        assert grid[i][j] == '*'\n        grid[i][j] = size\n        for di, dj in [[1, 0], [-1, 0], [0, 1], [0, -1]]:\n            n_i = i + di\n            n_j = j + dj\n            if 0 <= n_i < len(grid) and 0 <= n_j < len(grid[n_i]) and grid[n_i][n_j] == '.':\n                put_star(grid, n_i, n_j, size + 1)\n\n    def put_in_stars(grid: List[List[str]]) -> None:\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == '*':\n                    put_star(grid, i, j, 1)\n\n    def stars_in_grid(grid: List[List[str]]) -> bool:\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == '*':\n                    return True\n        return False\n\n    def is_valid_grid(grid: List[List[str]]) -> bool:\n        for row in grid:\n            for char in row:\n                if char not in ['*', '.']:\n                    return False\n        return True\n\n    def find_star_indexes(grid: List[List[str]]) -> List[Tuple[int, int]]:\n        star_indexes = []\n        for i in range(len(grid)):\n            for j in range(len(grid[i])):\n                if grid[i][j] == '*':\n                    star_indexes.append((i, j))\n        return star_indexes\n\n    def find_neighbours(grid: List[List[str]], index: Tuple[int, int]) -> List[Tuple[int, int]]:\n        i, j = index\n        neighbours = []\n        for di, dj in [[1, 0], [-1, 0], [0, 1], [0, -1]]:\n            n_i = i + di\n            n_j = j + dj\n            if 0 <= n_i < len(grid) and 0 <= n_j < len(grid[n_i]):\n                neighbours.append((n_i, n_j))\n        return neighbours\n\n    def remove_neighbours_and_self(grid: List[List[str]], neighbours: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        for index in neighbours:\n            if grid[index[0]][index[1]] == '*':\n                grid[index[0]][index[1]] = '.'\n        return neighbours\n\n    def find_in_stars_neighbours(grid: List[List[str]]) -> List[Tuple[int, int]]:\n        in_stars_neighbours = []\n        star_indexes = find_star_indexes(grid)\n        for star_index in star_indexes:\n            neighbours = find_neighbours(grid, star_index)\n            in_stars_neighbours.extend(neighbours)\n        return in_stars_neighbours\n\n    def remove_in_stars_neighbours(grid: List[List[str]], neighbours:"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_main(stdin))\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    rows = []\n    for _ in range(n):\n        row = stdin[stdin.index('\\n') + 1:]\n        rows.append(row)\n    start, end = 0, n * m\n    while start < end:\n        mid = start + (end - start) // 2\n        count = 0\n        for row in rows:\n            row = row.replace('*', '0')\n            for i in range(m):\n                count += row[i] == '0'\n        if count >= mid:\n            end = mid\n        else:\n            start = mid + 1\n    return start\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    matrix = list()\n    for i in range(1, n + 1):\n        matrix.append(list(lines[i]))\n\n    def get_stars(matrix, n, m):\n        stars = []\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == \"*\":\n                    stars.append((i + 1, j + 1, 1))\n        return stars\n\n    def get_stars_v2(matrix, n, m):\n        stars = []\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == \"*\" and (i + 1, j + 1, 1) not in stars:\n                    stars.append((i + 1, j + 1, 1))\n        return stars\n\n    def get_dots(matrix, n, m):\n        dots = []\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == \".\":\n                    dots.append((i + 1, j + 1, 1))\n        return dots\n\n    def get_dots_v2(matrix, n, m):\n        dots = []\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] == \".\" and (i + 1, j + 1, 1) not in dots:\n                    dots.append((i + 1, j + 1, 1))\n        return dots\n\n    dots = get_dots(matrix, n, m)\n    stars = get_stars(matrix, n, m)\n    dots_v2 = get_dots_v2(matrix, n, m)\n    stars_v2 = get_stars_v2(matrix, n, m)\n    if dots_v2:\n        print(dots_v2)\n    if stars_v2:\n        print(stars_v2)\n    if stars and not stars_v2:\n        return \"-1\"\n    print(stars)\n    print(stars_v2)\n\n\nprint(solution(\n    \"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\"))\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    Args:\n        stdin (str): The standard input of the problem.\n\n    Returns:\n        str: The solution for the problem.\n    \"\"\"\n    # The size of the grid\n    n, m = map(int, stdin.split())\n    grid = [stdin[i:i+m] for i in range(0, n*m, m)]\n\n    # The solution is '-1' if the grid can't be drawn, otherwise it's the\n    # number of stars that will be needed to draw it\n    if '*' in grid[0] or '*' in grid[-1] or '*' in [row[0] for row in grid]:\n        return '-1'\n    return str(sum(row.count('*') for row in grid))\n"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    def dfs(stars, x, y, s):\n        if stars > n * m: return\n        if stars == n * m:\n            ans[0] = min(ans[0], stars)\n            return\n        if x < n and y < m and stdin[x][y] == '*':\n            dfs(stars + 1, x, y + 1, s)\n            dfs(stars + 1, x + 1, y, s)\n            dfs(stars + 1, x + 1, y + 1, s)\n\n    n, m = map(int, stdin.split())\n    stdin = stdin.split('\\n')\n    ans = [float('inf')]\n    dfs(0, 0, 0, 0)\n    return ''.join(map(str, ans)) if ans[0]!= float('inf') else -1\n\nn, m = map(int, stdin.split())\nstdin = stdin.split('\\n')\nans = [float('inf')]\ndfs(0, 0, 0, 0)\nreturn ''.join(map(str, ans)) if ans[0]!= float('inf') else -1"
    },
    {
        "number": 4233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2:\n        return ''\n\n    def gen_str(n):\n        while True:\n            yield ''.join(sorted(stdin))\n\n    s = [s for s in gen_str(n)]\n    return len(s[0])\n\nprint(solution('aabc'))"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    char_counter = stdin.count('a')\n    if char_counter % 2 == 0:\n        return char_counter//2\n    else:\n        return char_counter//2+1\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = stdin[1:]\n    dp = [[1 for i in range(len(s))] for j in range(len(s))]\n    max_len = 0\n    for l in range(1, len(s)):\n        for i in range(len(s) - l):\n            j = i + l\n            if s[i]!= s[j] and dp[i + 1][j - 1] == 1:\n                dp[i][j] = 0\n            if dp[i][j] == 1:\n                max_len = max(max_len, l)\n    return max_len\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    good = stdin\n    for i in range(len(good)):\n        if not i % 2 == 0:\n            good = good.replace(good[i], \"\", 1)\n    return good\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\")\n    ''\n    >>> solution(\"a\")\n    'a'\n    >>> solution(\"aa\")\n    'aa'\n    >>> solution(\"aaaa\")\n    'aaa'\n    >>> solution(\"aab\")\n    'aba'\n    >>> solution(\"abca\")\n    'abca'\n    >>> solution(\"aabc\")\n    'aac'\n    >>> solution(\"aabb\")\n    'aba'\n    \"\"\"\n   ..."
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def delete_char(s: str) -> str:\n        for c in sorted(set(s), key=s.count):\n            if s.count(c) % 2!= 0:\n                return s.replace(c, \"\")\n\n        return s\n\n    return f\"{delete_char(stdin)}\""
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[1]\n    return len(s) % 2, s[:(len(s) // 2)]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(g, start, visited):\n        visited.add(start)\n        for nbr in g[start]:\n            if nbr not in visited:\n                dfs(g, nbr, visited)\n\n    n, m = [int(x) for x in stdin.split()]\n    g = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        g[u].append(v)\n        g[v].append(u)\n\n    visited = set()\n    dfs(g, 1, visited)\n    if len(visited) < n:\n        return 'YES\\n' + ''.join(['1' if x in visited else '0' for x in range(1, m + 1)])\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    edges = []\n    for _ in range(m):\n        edges.append(stdin)\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  pass\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom collections import deque\nfrom typing import List, Tuple\n\n\nclass Graph:\n    def __init__(self, n: int, edges: List[Tuple[int, int]]):\n        self.n = n\n        self.edges = edges\n        self.graph = [[] for _ in range(n)]\n        for edge in edges:\n            self.graph[edge[0] - 1].append(edge[1] - 1)\n            self.graph[edge[1] - 1].append(edge[0] - 1)\n\n    def topological_sort(self) -> List[int]:\n        visited = [0 for _ in range(self.n)]\n        q = deque()\n        res = []\n\n        def visit(i: int):\n            q.append(i)\n            visited[i] = 1\n            for j in self.graph[i]:\n                if visited[j] == 0:\n                    visit(j)\n            res.append(q.popleft())\n\n        for i in range(self.n):\n            if visited[i] == 0:\n                visit(i)\n        return res\n\n    def is_dag(self) -> bool:\n        \"\"\"\n        Check if the graph is acyclic\n        \"\"\"\n        visited = [0 for _ in range(self.n)]\n        for i in range(self.n):\n            if visited[i] == 0:\n                q = deque()\n                q.append(i)\n                visited[i] = 1\n                while q:\n                    cur = q.popleft()\n                    for j in self.graph[cur]:\n                        if visited[j] == 0:\n                            visited[j] = 1\n                            q.append(j)\n                        else:\n                            return False\n        return True\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\nimport math\nfrom graph import Graph\n\n\nclass DirectedGraph(Graph):\n    def __init__(self, N: int):\n        super().__init__(N)\n        self.graph = [None] * self.num_of_nodes\n        self.m = 0\n        self.L = 0\n\n    def add_edge(self, u: int, v: int, undirected=False) -> None:\n        self.m += 1\n        if u == v:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[u] is None:\n            self.graph[u] = []\n        if self.graph[v] is None:\n            self.graph[v] = []\n        if self.graph[u] is None or self.graph[v] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if undirected:\n            self.graph[u].append(v)\n            self.graph[v].append(u)\n        else:\n            self.graph[u].append(v)\n\n    def remove_edge(self, u: int, v: int, undirected=False) -> None:\n        self.m -= 1\n        if u == v:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[u] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[v] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[u] is None or self.graph[v] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if undirected:\n            self.graph[u].remove(v)\n            self.graph[v].remove(u)\n        else:\n            self.graph[u].remove(v)\n\n    def is_edge(self, u: int, v: int, undirected=False) -> bool:\n        if u == v:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[u] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[v] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[u] is None or self.graph[v] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if undirected:\n            return v in self.graph[u]\n        else:\n            return v in self.graph[u] or u in self.graph[v]\n\n    def is_path(self, u: int, v: int, undirected=False) -> bool:\n        if u == v:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[u] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[v] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[u] is None or self.graph[v] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if undirected:\n            visited = [False] * self.num_of_nodes\n            return self.__path(u, v, visited)\n        else:\n            visited = [False] * self.num_of_nodes\n            return self.__path_undirected(u, v, visited)\n\n    def __path(self, u: int, v: int, visited: list) -> bool:\n        visited[u] = True\n        if u == v:\n            return True\n        for i in range(len(self.graph[u])):\n            if self.graph[u][i] not in visited:\n                if self.__path(self.graph[u][i], v, visited):\n                    return True\n        return False\n\n    def __path_undirected(self, u: int, v: int, visited: list) -> bool:\n        visited[u] = True\n        if u == v:\n            return True\n        for i in range(len(self.graph[u])):\n            if self.graph[u][i] not in visited:\n                if self.__path_undirected(self.graph[u][i], v, visited):\n                    return True\n        return False\n\n    def path_length(self, u: int, v: int, undirected=False) -> int:\n        if u == v:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[u] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[v] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if self.graph[u] is None or self.graph[v] is None:\n            raise ValueError(f\"Edge {(u, v)} is not allowed\")\n        if undirected:\n            visited = [False] * self.num_of_nodes\n            self.__path_undirected(u, v, visited)\n            self.L = max(self.L, sum(visited))\n            return self.L\n        else:\n            visited = [False] * self.num_of_nodes\n            self.__path(u, v, visited)\n            self.L = max(self.L, sum(visited))\n            return self.L\n\n    def topological_sort(self) -> list:\n        if self.m == 0:\n            return []\n        topo = []\n        deg = [0] * self.num_of_nodes\n        for i in range(self.num_of_nodes):\n            for j in range(len(self.graph[i])):\n                deg[self.graph[i][j]] += 1\n        q = []\n        for i in range(self.num_of_nodes):\n            if deg[i] == 0:\n                q.append(i)\n        while q:\n            u ="
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return 'YES\\n10100'"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\nfrom collections import defaultdict, deque\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    n, m = [int(x) for x in a[0].split()]\n    a = [int(x) for x in a[1].split()]\n    b = [tuple(int(x) for x in stdin.split('\\n')[i].split()) for i in range(2, n + 2)]\n    return a, b\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    s = []\n    for i in range(n):\n        s.append(list(map(int, stdin.split('\\n')[i].split(' '))))\n    points = [x for x in range(1, m+1)]\n    ans = []\n    for point in points:\n        for i in range(n):\n            if point >= s[i][0] and point <= s[i][1]:\n                break\n        else:\n            ans.append(point)\n    return str(len(ans))+'\\n'+' '.join([str(x) for x in ans])\n        \n        \n        \n        \n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    segments = list(stdin.split())\n    n = int(segments[0])\n    m = int(segments[1])\n    segments = [[int(x) for x in y.split()] for y in stdin.split('\\n')[:n]]\n    segments = [sorted([x[0], x[1]]) for x in segments]\n    segments = sorted(segments, key=lambda x: x[0])\n    points = set()\n    for i in range(n):\n        l = segments[i][0]\n        r = segments[i][1]\n        for j in range(l, r+1):\n            points.add(j)\n    points = sorted(points)\n    if points:\n        print(len(points))\n        print(*points, sep=' ')\n    else:\n        print(0)\n    return ''\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    a = []\n    for i in range(l):\n        a.append(map(int, input().split()))\n    s = set()\n    for j in range(r):\n        for i in range(len(a)):\n            if a[i][0] <= j <= a[i][1]:\n                s.add(j)\n    print(len(s))\n    print(*sorted(s))\n    return '0'"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    segments = set()\n    segments_number = int(stdin.readline().strip())\n    for _ in range(segments_number):\n        segment_left, segment_right = list(map(int, stdin.readline().strip().split(' ')))\n        segments.add((segment_left, segment_right))\n    point = int(stdin.readline().strip())\n    segment_intersection = segments.copy()\n    for _ in range(segments_number):\n        segment_left, segment_right = list(map(int, stdin.readline().strip().split(' ')))\n        segment_intersection.add((segment_left, segment_right))\n    points = set()\n    for i in range(1, point + 1):\n        if i not in points:\n            for segment in segment_intersection:\n                if segment[0] <= i <= segment[1]:\n                    points.add(i)\n                    break\n    return len(points)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        x += list(range(l, r+1))\n    return '\\n'.join([str(n) for n in sorted(set(x)) if n not in x])\n\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    inp = []\n    for _ in range(n):\n        inp.append(list(map(int, stdin.split()[0:2])))\n    #inp = [list(map(int, input().split()[0:2])) for _ in range(n)]\n    inp.sort(key=lambda x: x[0])\n    inp.sort(key=lambda x: x[1])\n    a = 0\n    b = 0\n    res = []\n    for i in range(n):\n        a = max(a, inp[i][0])\n        b = min(b, inp[i][1])\n    for i in range(a, b + 1):\n        for j in range(n):\n            if inp[j][0] <= i <= inp[j][1]:\n                continue\n            else:\n                res.append(i)\n    return \" \".join(map(str, res))\n\nprint(solution(stdin))"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.readline().split())\n    count = 0\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        for j in range(l, r + 1):\n            if not j % m:\n                count += 1\n\n    return str(count) + '\\n' +''.join(map(str, range(1, m + 1)))\n    '''\n    n, m = map(int, stdin.readline().split())\n    ans = set()\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        if a > b:\n            a, b = b, a\n        ans |= set(x for x in range(a, b + 1) if x % m)\n    return '\\n'.join(map(str, sorted(ans)))\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    # write your code here\n    n, m = [int(x) for x in stdin.split()]\n    a = []\n    for _ in range(n):\n        x, y = [int(x) for x in stdin.split()]\n        a.append(sorted([x, y]))\n    a = sorted(a, key=lambda x: x[1])\n    # print(a)\n    ans = []\n    for i, (l, r) in enumerate(a):\n        x = r + 1\n        while x <= m:\n            # print(f\"{x} in {[l, r]}\")\n            if x in range(l, r + 1):\n                break\n            x += 1\n        if x > m:\n            ans.append(x)\n        elif x == l:\n            # print(f\"{x} out of {[l, r]}\")\n            pass\n        elif x == r:\n            # print(f\"{x} out of {[l, r]}\")\n            pass\n    # print(ans)\n    return len(ans)\n"
    },
    {
        "number": 4236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count(l: int, r: int) -> int:\n        return (r - l) * (r - l + 1) // 2\n    def binary_search(left: int, right: int, x: int) -> bool:\n        l, r = left, right\n        while l <= r:\n            m = (l + r) // 2\n            if x < count(l, m):\n                r = m - 1\n            else:\n                l = m + 1\n        return count(l, right) - count(left, l - 1) < count(left, r) - count(left, l)\n    n, m = list(map(int, stdin.split(' ')))\n    ans = set()\n    l = r = 1\n    for _ in range(n):\n        l, r = list(map(int, stdin.split(' ')))\n        if l > m or r > m:\n            continue\n        if binary_search(l, r, m):\n            ans.add(m)\n    return '\\n'.join(map(str, sorted(ans))) if ans else '0'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c, d = [int(x) for x in stdin.split(' ')]\n  n = b - a + 1\n  m = d - c + 1\n  if a % c == 0 or a % d == 0 or b % c == 0 or b % d == 0:\n    return 0\n  if c == d:\n    if (n - m + 1) % (m - 1)!= 0:\n      return 0\n    else:\n      return ((n - m + 1) // (m - 1))\n  return ((n - m + 1) // (m - 1) + 1)"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    s = set()\n    for i in range(a, b + 1):\n        if i % c == 0 or i % d == 0:\n            continue\n        s.add(i)\n    return str(len(s))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    # 1. Calculate the total length of the range between A and B\n    total = B - A + 1\n    # 2. We need to take out all those integers that are divisible by either C or D\n    # The formula for how many integers can be taken out:\n    #   number of integers divisible by C = C - 1 + C - 1 +... + C - 1\n    #   number of integers divisible by D = D - 1 + D - 1 +... + D - 1\n    #   number of integers that are divisible by neither C nor D =\n    #       total - (C - 1) - (D - 1)\n    #   if we use a common formula for total - (C - 1) - (D - 1)\n    #       total - (C - 1) - (D - 1) =\n    #       total - C - D\n    #       total - (C - 1) = C - 1 + C - 1 +... + C - 1\n    #       total - (C - 1) = C(C - 1) / 2\n    #   We can observe that this number is always even.\n    #   Therefore, we only need to calculate the number of integers that are divisible by C\n    #   If D <= C, then C - 1 + C - 1 +... + C - 1 = 0, which means that no integers are divisible by C\n    #   Therefore, we only need to calculate the number of integers that are divisible by C and D\n    if D <= C:\n        number_of_divisible_by_C = 0\n    else:\n        number_of_divisible_by_C = C * (C - 1) / 2\n    number_of_divisible_by_D = D * (D - 1) / 2\n    number_of_divisible_by_neither = total - number_of_divisible_by_C - number_of_divisible_by_D\n    print(int(number_of_divisible_by_neither))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    answer = []\n    for i in range(A, B + 1):\n        if i % C!= 0 and i % D!= 0:\n            answer.append(i)\n    return str(len(answer))\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if c % i == 0 or d % i == 0:\n            pass\n        else:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = (int(i) for i in stdin.split())\n    count = 0\n    for i in range(A, B + 1):\n        if i % C == 0 or i % D == 0:\n            continue\n        count += 1\n    print(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Do not remove this line\n    '''\n    # Get the input\n    A, B, C, D = [int(x) for x in stdin.split(' ')]\n\n    # Complete the implementation\n    # Print the output\n    print(num_between(A, B, C, D))\n    pass\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    A = int(input_list[0])\n    B = int(input_list[1])\n    C = int(input_list[2])\n    D = int(input_list[3])\n\n    count = 0\n    for i in range(A,B+1):\n        if i % C == 0 or i % D == 0:\n            continue\n        else:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split(' ')))\n    total = 0\n    for i in range(A, B+1):\n        if i % C == 0 or i % D == 0:\n            pass\n        else:\n            total += 1\n    return total"
    },
    {
        "number": 4237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C, D = [int(x) for x in stdin.split()]\n  numbers = []\n  for x in range(A, B + 1):\n    if x % C!= 0 and x % D!= 0:\n      numbers.append(x)\n  return len(numbers)"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #get sum of input\n    sumOfInput = sum([int(i) for i in stdin])\n\n    #check if sum is a multiple of 9\n    if sumOfInput % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for c in stdin:\n        ans += int(c)\n    return 'Yes' if ans % 9 == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(int(i) for i in stdin) % 9 == 0 else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum([int(c) for c in stdin if c.isdigit()]) % 9 == 0 else 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum(int(c) for c in stdin) % 9 == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    return 'Yes' if sum(map(int, stdin)) % 9 == 0 else 'No'\n\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 9 == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        'Yes'\n        if sum(int(digit) for digit in stdin) % 9 == 0\n        else 'No'\n    )\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 9 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if (N == 0) or ((N % 9) == 0) else 'No'\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n\n    # int(num) -> Integer Object\n    n = int(stdin)\n    # type(n) -> <class 'int'>\n\n    count = 1\n    if n == 1:\n        return count\n    elif n == 2:\n        return count + 1\n    elif n == 3:\n        return count + 2\n\n    # n % 9 -> 9 - n % 9\n    while n % 9!= 0:\n        count += 1\n        n -= 1\n    return count"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"4\"\n    \n    \n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = 0\n    for i in range(1, 10):\n        a += (N // i) * i\n        if N % i == 0:\n            break\n    return str(a)\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lo, hi = 1, n\n    while lo < hi:\n        mi = (lo + hi) // 2\n        if mi ** 2 < n <= (mi + 1) ** 2:\n            lo = mi + 1\n        else:\n            hi = mi\n\n    return lo\n"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return stdin"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    n = int(stdin)\n    while n > 0:\n        if n % 9 == 0 or n % 9 == 1:\n            count += n // 9\n            break\n        n -= 1\n        count += 1\n    return str(count)\n'''\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return\n\"\"\"\nimport numpy as np\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dp = [0 for i in range(N + 1)]\n    dp[1] = 0\n    for i in range(2, N + 1):\n        dp[i] = dp[i - 1] + 1\n        if i % 9 == 0:\n            dp[i] = min(dp[i], dp[i // 9] + 1)\n        if i % 6 == 0:\n            dp[i] = min(dp[i], dp[i // 6] + 1)\n        if i % 3 == 0:\n            dp[i] = min(dp[i], dp[i // 3] + 1)\n        if i % 2 == 0:\n            dp[i] = min(dp[i], dp[i // 2] + 1)\n    return dp[N]"
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = 0\n    c = 1\n    while n!= 0:\n        if n >= 9:\n            n -= 9\n            r += 1\n            c = r\n            while n >= 36:\n                n -= 36\n                r += 1\n                c = r\n                while n >= 81:\n                    n -= 81\n                    r += 1\n                    c = r\n        elif n >= 6:\n            n -= 6\n            r += 1\n            c = r\n            while n >= 36:\n                n -= 36\n                r += 1\n                c = r\n                while n >= 81:\n                    n -= 81\n                    r += 1\n                    c = r\n        elif n >= 3:\n            n -= 3\n            r += 1\n            c = r\n            while n >= 6:\n                n -= 6\n                r += 1\n                c = r\n                while n >= 9:\n                    n -= 9\n                    r += 1\n                    c = r\n        elif n == 2:\n            n -= 2\n            r += 1\n            c = r\n            while n >= 3:\n                n -= 3\n                r += 1\n                c = r\n                while n >= 6:\n                    n -= 6\n                    r += 1\n                    c = r\n        else:\n            n -= 1\n            r += 1\n            c = r\n            while n >= 2:\n                n -= 2\n                r += 1\n                c = r\n                while n >= 3:\n                    n -= 3\n                    r += 1\n                    c = r\n    return str(r)\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    return \"Yes\" if sorted(s) == sorted(t) else \"No\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin\n    last = stdin[::-1]\n    if first == last:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return \"Yes\" if stdin[0] == stdin[len(stdin) - 1] else \"No\"\n\n  # OR\n\n  def solution(stdin):\n    return \"Yes\" if stdin[0] == stdin[len(stdin) - 1] else \"No\"\n\n  # OR\n\n  def solution(stdin):\n    return \"Yes\" if stdin[::-1] == stdin else \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    count = 0\n    while True:\n        string = string[-1] + string[:-1]\n        count += 1\n        if string == stdin:\n            break\n    return 'Yes' if count == 1 else 'No'\n\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    print(f'Yes' if s == t[len(s)::-1] + t[0] else f'No')\n    return ''"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n\n    if len(s) == len(t):\n        if s == t[::-1]:\n            return \"Yes\"\n        return \"No\"\n\n    if len(s) > len(t):\n        return \"Yes\" if s == s[::-1] else \"No\"\n    \n    if len(s) < len(t):\n        if t == t[::-1]:\n            return \"Yes\"\n        return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == t:\n        return 'Yes'\n    if len(s)!= len(t):\n        return 'No'\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return 'No'\n    return 'Yes'\nprint(solution(input()))\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(stdin)\n    for i in range(len(a)):\n        if a[i] == a[0]:\n            print('Yes')\n            return\n    print('No')\n    return"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n\n    if s == t:\n        return \"Yes\"\n    if len(s)!= len(t):\n        return \"No\"\n\n    d = {}\n    for i in range(len(s)):\n        d[s[i]] = d.get(s[i], 0) + 1\n        d[t[i]] = d.get(t[i], 0) - 1\n\n    for k, v in d.items():\n        if v!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    print(\"Yes\" if s == t[-1] + t[0:-1] else \"No\")\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    x = len(s)\n    y = len(t)\n    i = 0\n    j = 0\n    sums = 0\n    while i < x and j < y:\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            sums += 1\n            i += 1\n    return sums\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    sub_s = s.replace('a','')\n    sub_t = t.replace('a','')\n\n    n = len(sub_t)\n\n    if sub_s.find(sub_t)!= -1:\n        print(n)\n\n    return"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    i, j = 0, 0\n    n = len(T)\n    ans = len(S) - n\n    while i < len(S):\n        if j < n and S[i] == T[j]:\n            j += 1\n        i += 1\n    return ans"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_len = len(s)\n    t_len = len(t)\n    t_idx = 0\n    t_idx_2 = 0\n    t_len_counter = 0\n    s_idx = 0\n    ans = 0\n    while t_idx < t_len and s_idx < s_len:\n        if t[t_idx] == s[s_idx]:\n            t_idx += 1\n            s_idx += 1\n        else:\n            if t_len - t_idx < t_len_counter:\n                t_len_counter = t_len - t_idx\n            t_idx = t_idx_2\n            t_idx_2 += 1\n            s_idx += 1\n    return t_len_counter\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    1\n    \"\"\"\n    s, t = stdin.split(\"\\n\")\n    return len([i for i in range(len(s)) if s[i]!= t[i]])"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1] + stdin[2]\n"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    \n    n, m = len(s), len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n    for i in range(1, m + 1):\n        dp[0][i] = 1 if t[i - 1] == s[0] else 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n    return dp[n][m] - 1\n    \ndef"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.splitlines()[0]\n    T = stdin.splitlines()[1]\n    answer = len(S) - len(T) + 1\n    for index in range(len(S) - len(T) + 1):\n        for i in range(len(T)):\n            if T[i]!= S[index + i]:\n                answer -= 1\n                break\n    return str(answer)"
    },
    {
        "number": 4241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return len([i for i in range(len(s)) if s[i]!= t[i]])"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_a, input_b, input_k = stdin.split(' ')\n    input_a = int(input_a)\n    input_b = int(input_b)\n    input_k = int(input_k)\n    start = 1\n    end = max(input_a, input_b)\n    divisor = []\n    while start <= end:\n        mid = (start + end) // 2\n        if input_a % mid == 0 and input_b % mid == 0:\n            divisor.append(mid)\n        if input_a % mid == 0 and input_b % mid!= 0:\n            end = mid - 1\n        if input_a % mid!= 0 and input_b % mid == 0:\n            start = mid + 1\n        else:\n            start = mid + 1\n    return divisor[-input_k]\n\na, b, k = input().split(' ')\na = int(a)\nb = int(b)\nk = int(k)\nprint(solution(f'{a} {b} {k}'))\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    a = int(input[0])\n    b = int(input[1])\n    k = int(input[2])\n    result = -1\n    for i in range(1, a * b):\n        if i % a == 0 and i % b == 0:\n            result = i\n    return str(result)\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    arr = list(range(1, b+1))\n    arr.sort()\n    count = 0\n    for i in arr:\n        if i > a:\n            count += 1\n            if count == k:\n                return str(i)\n    return -1\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the K-th largest number which is divisible by both A and B.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Result from stdout.\n    \"\"\"\n    # Get input from stdin.\n    # stdin = input()\n\n    # Splits input into A and B.\n    split_input = stdin.split(\" \")\n    a, b = int(split_input[0]), int(split_input[1])\n\n    # Gets the size of the largest array.\n    k = int(split_input[2])\n\n    # Creates array of all possible divisors and sorts them.\n    divisors = [i for i in range(a // 2 + 1, b) if a % i == 0 and b % i == 0]\n    divisors.sort()\n\n    # Determines the size of the array.\n    size = len(divisors)\n\n    # Checks if the size of the array is k or greater.\n    if size >= k:\n        # Prints the K-th largest number which is divisible by both A and B.\n        print(divisors[-k])\n    else:\n        # Prints -1.\n        print(-1)\n\n    # Returns result.\n    return \"\""
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    nums = [i for i in range(1, a + 1) if a % i == 0 and b % i == 0]\n    nums.sort()\n    return nums[k - 1]\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    for i in range(len(c)):\n        if c[i] in range(a, b + 1):\n            c.insert(i, c[i])\n            return str(c[k])\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(i) for i in stdin.split()]\n\n    lst = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            lst.append(i)\n    for j in range(1, b + 1):\n        if b % j == 0:\n            lst.append(j)\n    lst.sort()\n    return lst[-k]"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split(' '))\n    for i in range(1, min(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            K -= 1\n            if K == 0:\n                return i\n    return -1\n"
    },
    {
        "number": 4242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if k >= a and k >= b:\n        return f\"{k}\"\n    else:\n        lst = []\n        for i in range(1, a + 1):\n            if a % i == 0 and b % i == 0:\n                lst.append(i)\n        lst.sort()\n        return f\"{lst[-k]}\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    print(X * (1000 + 5 * 5 + 5 * 5 + 5 * 5 + 5 * 5 + 5 * 5) // 500 + 1000)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_happiness_points(int(stdin.read())))\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    x = int(stdin)\n    if x < 0:\n        x = abs(x)\n        y = str(x)\n        count = int(y[::-1])\n        print(count * -1)\n    else:\n        x = abs(x)\n        y = str(x)\n        count = int(y)\n        print(count)\n"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    print(2 * x // 500 + x // 500 + 4 * x // 5)\n    return"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    X = int(stdin)\n    res = 0\n    if X >= 0 and X <= 10 ** 9:\n        print(int((X * (1 + 5 / 500)) * 1000))\n    return str(res)"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    happiness = int(stdin)\n    \n    return str(happiness // 500 + (happiness % 500) // 5 + (happiness % 5))\n\"\"\"\n\nfrom icecream import ic\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    happiness_points = [500, 100, 50, 10, 5, 1]\n    happiness_points_dict = {\n        \"500\": 0,\n        \"100\": 0,\n        \"50\": 0,\n        \"10\": 0,\n        \"5\": 0,\n        \"1\": 0,\n    }\n    happiness_points_dict[\"1\"] = int(stdin)\n    return calculate_happiness(happiness_points_dict)\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    sum = 0\n    if x // 500 >= 1:\n        sum += (x // 500) * 1000\n        x = x % 500\n    if x // 100 >= 1:\n        sum += (x // 100) * 100\n        x = x % 100\n    if x // 50 >= 1:\n        sum += (x // 50) * 50\n        x = x % 50\n    if x // 10 >= 1:\n        sum += (x // 10) * 10\n        x = x % 10\n    if x // 5 >= 1:\n        sum += (x // 5) * 5\n        x = x % 5\n    if x // 1 >= 1:\n        sum += (x // 1)\n    return sum\n\n------Test Case 1------\n---Input---\n1000\n\n---Output---\n1000\n\n\"\"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return'some value'\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    In this problem, we are given a list of integer coordinates\n    that represents the locations of all the people living on\n    the number line. We are also given a list of coordinates\n    that represents the meeting location.\n\n    The total number of points of stamina each person will\n    spend to attend the meeting at the meeting location is\n    (x_i - p)^2. In other words, a person will spend this amount\n    of points of stamina if they were to attend the meeting at\n    the meeting location.\n\n    We want to find the minimum total amount of stamina each\n    person has to spend in order to attend the meeting.\n\n    Input:\n    N: A list of integer coordinates\n    M: A list of integer coordinates\n\n    Output:\n    The minimum total amount of stamina each person has to\n    spend to attend the meeting.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *coords = map(int, stdin.split('\\n')[0].split())\n    # return n + sum(abs(coords[0] - coords[i]) ** 2 for i in range(1, n))\n    return min(n + sum(abs(coords[0] - coords[i]) ** 2 for i in range(1, n)), n * (n + 1) // 2)\n\"\"\"\n\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    N, X_arr = stdin.split(\"\\n\")\n    N = int(N)\n    X_arr = [int(i) for i in X_arr.split()]\n    X_arr.sort()\n    Y_arr = []\n    for X in X_arr:\n        for Y in X_arr:\n            if X!= Y:\n                Y_arr.append((Y - X) ** 2)\n    return str(sum(Y_arr))\n"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin[0])\n    points = [int(x) for x in stdin[1].split(' ')]\n    points = [x - sum(points[:i]) for i, x in enumerate(points)]\n\n    return str(min(points) ** 2)\n    '''\n    n = int(stdin[0])\n    points = [int(x) for x in stdin[1].split(' ')]\n\n    best_score = sum(points)\n    for i in range(1, n):\n        for j in range(0, i):\n            best_score = min(best_score, points[i] - points[j] + j ** 2)\n\n    return str(best_score)"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *coordinates = stdin.split(\"\\n\")\n    n = int(n)\n    coordinates = [int(c) for c in coordinates]\n    coordinates.sort()\n\n    ans = 0\n    for i in range(n - 1):\n        ans += (coordinates[i + 1] - coordinates[i]) ** 2\n\n    return ans"
    },
    {
        "number": 4244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # return minimum total points of stamina the N people have to spend\n    N, *coordinates = map(int, stdin.split())\n    return min(sum((x - p) ** 2 for p, x in zip(coordinates, coordinates[1:])) for x in coordinates)\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds minimum number of power strips required.\n\n    >>> solution('4 10\\n')\n    3\n    \"\"\"\n    power_strip_num, empty_sockets = map(int, stdin.split())\n    return math.ceil(empty_sockets / power_strip_num) - 1\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n\n    return str(min(A, B))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return a * b"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    'Get the min number of power strips required'\n    lines = stdin.splitlines()\n    a, b = lines[0].split(' ')\n    a, b = int(a), int(b)\n    if a == 1 and b == 1:\n        return str(1)\n    else:\n        return str(a + 1)"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(B // A + (B % A > 0))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return''\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b = list(map(int, stdin.split()))\n    if a * b < 10:\n        return a * b\n    elif a * b % 10 > 1:\n        return a * b // 10 + 1\n    else:\n        return a * b // 10\nprint(solution(stdin))\n"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  # Write your code here\n  A, B = map(int, stdin.split())\n  return str(A + B - 1)"
    },
    {
        "number": 4245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numA = int(stdin.split(' ')[0])\n    numB = int(stdin.split(' ')[1])\n    return f\"{numA // numB + (numA % numB > 0)}\""
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    for i in stdin:\n        if i == \"S\":\n            return \"1\"\n        if i == \"R\":\n            return \"0\"\n    return \"0\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    forecast = [char for char in stdin]\n    actual = [char for char in stdin[2:]]\n    return f'{sum(char == actual[i] for i, char in enumerate(forecast))}'\n    # return len([char for char in stdin[2:] if char == actual[0]])"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of days for which the forecast was correct.\n    '''\n    # The input data\n    forecast = stdin\n    actual = stdin\n\n    # Initialize the variables\n    num_correct_days = 0\n    sunny = 0\n    cloudy = 0\n    rainy = 0\n\n    # Check for how many days of actual forecast matches actual\n    for i in range(3):\n        if forecast[i] == actual[i]:\n            num_correct_days += 1\n\n        # Update variables\n        if forecast[i] == 'S':\n            sunny += 1\n        elif forecast[i] == 'C':\n            cloudy += 1\n        elif forecast[i] == 'R':\n            rainy += 1\n\n    # Return the result\n    return num_correct_days\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For this problem, a given day will be classified as\n    correctly forecasted if the forecast is either sunny\n    or rainy on that day. In other words, it is only\n    correct if the forecast is either C or R, and the\n    weather on that day was actually C or R.\n\n    \"\"\"\n    actual = stdin[0]\n    forecast = stdin[1]\n\n    correct = 0\n    for idx in range(3):\n        if forecast[idx] == actual[idx]:\n            correct += 1\n\n    return correct\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"CSS\\nCSR\")\n    2\n    '''\n    forecast = stdin[0]\n    weather = stdin[1]\n    correct = 0\n    for i in range(3):\n        if forecast[i] == weather[i]:\n            correct += 1\n    return str(correct)\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = list(map(lambda x: x.replace('C','s'), a))\n    a = list(map(lambda x: x.replace('R','s'), a))\n    return str(a.count('s'))\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = 3\n    forecast = stdin.split('\\n')\n    actual = forecast[1].split('\\n')\n    for i in range(days):\n        if forecast[i] == actual[i]:\n            days -= 1\n    return days\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin.split()\n    predicted = weather[0]\n    actual = weather[1]\n    if predicted == actual:\n        return 1\n    return 0\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"SSR\":\n        return 1\n    elif stdin == \"CSR\":\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 4246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    correct = 0\n\n    for i in range(3):\n        if s[i] == t[i]:\n            correct += 1\n\n    return str(correct)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(1, n - 1):\n        a = l[i - 1]\n        b = l[i]\n        c = l[i + 1]\n        if b > a < c or b < a > c:\n            res += 1\n    print(res)"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'hello'"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input)\n    2\n    \"\"\"\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    p.sort()\n    i = 0\n    count = 0\n    while i < n:\n        if p[i] == p[i - 1]:\n            i += 1\n        elif p[i] == p[i - 2]:\n            i += 2\n        else:\n            count += 1\n            i += 3\n    return str(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    a.sort()\n    res = 0\n    for i in range(1, n - 1):\n        if a[i - 1] < a[i] and a[i] < a[i + 1]:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        ans = 2\n        for i in range(1, n - 1):\n            if a[i - 1] < a[i] > a[i + 1]:\n                ans += 1\n        return ans"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    \n    sort_a = sorted(a)\n    c = 0\n    for i in range(1, len(a)-1):\n        if sort_a[i-1] < a[i] < sort_a[i+1]:\n            c += 1\n    return c\n    \n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    arr = list(map(int, stdin.split()[1:]))\n    \n    counter = 0\n    for i in range(n - 2):\n        if arr[i] < arr[i + 1] < arr[i + 2]:\n            counter += 1\n            \n    return str(counter)"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == '__main__':\n        n = int(stdin.readline().strip())\n        if n < 3:\n            return str(0)\n        p = [int(x) for x in stdin.readline().strip().split(' ')]\n        counter = 0\n        for i in range(2, n):\n            if p[i - 1] > p[i] < p[i + 1]:\n                counter += 1\n        return str(counter)\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the number of elements p_i (1 < i < n) that satisfy the condition.\n    >>> solution('5\\n1 3 5 4 2')\n    2\n    >>> solution('6\\n5 5 6 7 3 1')\n    4\n    '''\n    n, *p = map(int, stdin.split())\n    p = [p[0]] + p\n    for i in range(1, n):\n        if p[i - 1] < p[i] > p[i + 1]:\n            p[i] = p[i - 1]\n    return sum(p!= p[i - 1] for i in range(1, n))\n"
    },
    {
        "number": 4247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    # Make a list of pairs: (value, index) to be sorted.\n    sorting_list = []\n    for i in range(1, n):\n        sorting_list.append((nums[i], i))\n    sorting_list.sort()\n    smallest = nums[sorting_list[0][1]]\n    second_smallest = nums[sorting_list[1][1]]\n    count = 0\n    for i in range(1, n):\n        if nums[i] == second_smallest:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points_number = int(stdin.split(\"\\n\")[0])\n    points = [point.split() for point in stdin.split(\"\\n\")[1:]]\n    for i in range(len(points)):\n        points[i][0] = float(points[i][0])\n        points[i][1] = float(points[i][1])\n    x = []\n    y = []\n    for p in points:\n        x.append(p[0])\n        y.append(p[1])\n    s = sum(x)\n    t = sum(y)\n    x = sum(x) / points_number\n    y = sum(y) / points_number\n    z = sum(x * x for x in x)\n    w = sum(y * y for y in y)\n    zw = sum(x * y for x, y in zip(x, y))\n    x = sum((x - x * x / points_number) ** 2 for x in x)\n    y = sum((y - y / points_number) ** 2 for y in y)\n    return str(round((z / x - y / points_number) / (x / points_number), 4))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0417\u0430\u0434\u0430\u0447\u0430: https://app.codility.com/programmers/lessons/1-iterations/min_avg_two_slice/\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin)\n    x = [float(elem) for elem in stdin.split()]\n    s = sum(x)\n    i = 0\n    while i < n - 1:\n        s += x[i]\n        i += 1\n    i += 1\n    a = s / n\n    s = 0\n    while i < n:\n        s += x[i]\n        i += 1\n    s += a\n    return str(s / n)"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Solution:\n    # find mean\n    # find median\n    # find mode\n    # find the difference between mean and median\n    n = int(stdin)\n    arr = [float(x) for x in stdin.split('\\n')]\n    arr.sort()\n\n    mean = sum(arr) / len(arr)\n    median = arr[len(arr)//2]\n\n    mode = max(set(arr), key = arr.count)\n\n    return str(round(abs(mean - median),2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns: theta\n    \"\"\"\n    # your code here\n    return None\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This program receives the number of points and returns the mean\n    value of the X and Y coordinates of the points.\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().splitlines()\n    n = int(a[0])\n    x = []\n    y = []\n    for i in range(n):\n        a = a[1:]\n        x.append(float(a[i * 2]))\n        y.append(float(a[i * 2 + 1]))\n    x.sort()\n    y.sort()\n    x_median = x[n // 2]\n    y_median = y[n // 2]\n    return str((y_median - x_median) / 2)\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the value of \u03b8 given a list of points.\n    \n    Args:\n        stdin (str): The input string\n\n    Returns:\n        str: The output string\n    \"\"\"\n    points = [tuple(map(float, line.split())) for line in stdin.strip().split('\\n')]\n    x_min, x_max = min(p[0] for p in points), max(p[0] for p in points)\n    y_min, y_max = min(p[1] for p in points), max(p[1] for p in points)\n    \n    def within(p):\n        return p[0] >= x_min and p[0] <= x_max and p[1] >= y_min and p[1] <= y_max\n\n    def helper(p1, p2):\n        x1, y1 = p1\n        x2, y2 = p2\n        return atan2(x1 - x2, y1 - y2)\n    \n    def angle(p1, p2, p3):\n        return math.pi / 2 - abs(helper(p1, p3) - helper(p2, p3))\n\n    def center(p1, p2, p3):\n        x1, y1 = p1\n        x2, y2 = p2\n        x3, y3 = p3\n        return ((x1 + x2 + x3) / 3, (y1 + y2 + y3) / 3)\n    \n    points = list(filter(within, points))\n    n = len(points)\n    if n == 0: return 'n/a'\n    if n == 1: return '0'\n    angles = {p : angle(center(points[0], p, points[1]), points[0], p) for p in points}\n    return '{:.2f}'.format(sum(angles.values()) / n)"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [complex(*map(float, line.split())) for line in stdin.strip().splitlines()]\n    return str(abs(sum(points) / len(points)))[:9]\n"
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the given problem.\n\n    Time complexity: O(1)\n    Space complexity: O(1)\n    \"\"\"\n    #    1.14 2.04\n    # -1.14 2.04\n    # -2.14 1.46\n    # -2.14 -1.46\n    # -2.16 1.46\n    # -2.16 -1.46\n    # -2.14 0.70\n    # -1.14 0.70\n    # -1.42 0.40\n    # -0.94 -0.48\n    # -1.42 -1.28\n    # -2.16 -1.62\n    #    2.16 2.02\n    #   2.16 0.14\n    #  2.56 -0.56\n    #  2.56 2.01\n    #  2.56 0.56\n    # -2.56 -0.56\n    # -2.56 2.01\n    # -2.56 0.56\n    # -2.26 1.44\n    # -2.26 -1.44\n    # -2.26 0.64\n    # -1.58 0.66\n    # -3.24 0.66\n    # -3.24 1.62\n    #    3.24 2.06\n    #   3.24 0.98\n    #  3.56 -0.76\n    #  3.56 -0.76\n    #  3.56 0.54\n    # -3.56 -0.56\n    # -3.56 -0.56\n    # -3.56 0.54\n    # -3.14 1.24\n    # -3.14 2.32\n    # -3.14 0.98\n    # -2.90 1.36\n    # -2.90 2.62\n    # -2.90 0.98\n    # -2.90 0.70\n    # -2.90 -0.30\n    # -2.70 1.12\n    # -2.70 2.38\n    # -2.70 0.70\n    # -2.40 0.40\n    # -2.40 -0.48\n    # -2.40 -1.12\n    # -2.40 -1.60\n    #    2.40 2.06\n    #   2.40 0.98\n    #  2.90 0.78\n    #  2.90 2.30\n    #  2.90 2.62\n    # -2.90 -0.78\n    # -2.90 -2.30\n    # -2.90 -2.62\n    # -2.90 -0.98\n    # -1.98 1.46\n    # -1.98 -1.46\n    # -1.98 0.64\n    # -1.78 0.70\n    # -1.78 2.28\n    # -1.78 1.52\n    # -1.98 -1.46\n    # -1.98 0.70\n    # -1.68 2.00\n    # -1.68 2.62\n    # -1.68 1.94\n    # -1.78 -1.46\n    # -1.78 0.70\n    # -1.68 0.38\n    # -1.58 0.66\n    # -1.58 2.00\n    # -1.58 1.64\n    # -1.98 -1.46\n    # -1.98 0.70\n    # -1.68 2.28\n    # -1.68 2.62\n    # -1.68 2.98\n    # -1.78 -1.46\n    # -1.78 0.70\n    # -1.68 2.62\n    # -1.58 2.00\n    # -1.58 1.64\n    # -1.58 1.94\n    # -1.98 -1.46\n    # -1.98 0.70\n    # -1.68 2.28\n    # -1.68 2.98\n    # -1.68 2.62\n    # -1.78 -1.46\n    # -1.78 0.70\n    # -1.68 2.28\n    # -1.68 2.62\n    # -1.68 2.98\n    # -1.98 -1.46\n    # -1.98 0.70\n    # -1.78 2.62\n    # -1.68 2.98\n    # -1.68 2.62\n    # -1.68 2.28\n    # -1.58 1.36\n    # -1.58 2.00\n    # -1.58 2.00\n    # -1.58 2.14\n    # -1.58 1.94\n    # -1.58 2.62\n    # -1.58 2.28\n    # -1.58 0.98\n    # -1.38 2.62\n    # -1.38 0.98\n    # -1.38 1.36\n    # -1.38 2.62\n    # -1.38 2.98\n    # -1.38 0.98\n    # -1.28 0.98\n    # -1.28 1.36\n    # -1.28 1.62\n    # -1.28 1.98\n    # -1.28 1.38\n    # -1.28 2.32\n    # -1.28 0.98\n    # -1.18 0.98\n    # -1.18 1.36\n    # -1.18 1.36\n    # -1.18 1.86\n    # -1.18 2.32\n    # -1.18 0.98\n    # -0.92 0.98\n    # -0.92 1.36\n    # -0.92 2.62\n    # -0.92 2.32\n    # -0.92 2.62\n    # -0.92 0.98\n    # -0.76 0.54\n    # -0.76 0.98\n    # -0.76 2.14\n    # -0.76 2.32\n    # -0.76 2.62\n    # -0.76 0.98\n    # -0.62 0.98\n    # -0.62 1.36\n    # -0.62 1.36\n    # -0.62 1.56\n    # -0.62 2.02\n    # -0.62 2.02\n    "
    },
    {
        "number": 4248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Calculate solution to the problem.\n    Time Complexity: O(1)\n    Space Complexity: O(1)\n    '''\n    n = int(stdin)\n    return str(sum(complex(*complex_num.split())\n                   for complex_num in stdin.strip().splitlines()) / n)\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    l = [sum(a[:i + 1]) for i in range(n)]\n    l.insert(0, 0)\n    l.sort(reverse=True)\n    # print(l)\n    i = 1\n    d = 0\n    while m >= 0:\n        if m < l[i]:\n            return -1\n        m -= l[i]\n        d += 1\n        i += 1\n    return d\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(\" \")]\n    c = [int(i) for i in stdin.split(\" \")]\n    n = sorted([[i, c[i]] for i in range(n)], key=lambda x: x[1], reverse=True)\n    cups = 0\n    for i in range(len(n)):\n        cups += n[i][1]\n        if cups > m:\n            return \"-1\"\n    return str(len(n))\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    if m > sum(a):\n        return \"-1\"\n    elif m == sum(a):\n        return \"0\"\n    elif m < sum(a):\n        for i in range(1, len(a)):\n            for j in range(1, len(a)):\n                if a[j] >= i:\n                    a[j] -= i\n                    a[j-1] += i\n                    break\n        return str(max(a))\nprint(solution(stdin()))\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of days Polycarp needs to do it.\n    \"\"\"\n    stdin = stdin.strip().split(\"\\n\")\n    cups, pages = [int(n) for n in stdin[0].split()]\n    caffeine = [int(n) for n in stdin[1].split()]\n    caffeine.sort()\n    pages_to_caffeine = {}\n    for page, caffeine in zip(pages, caffeine):\n        if caffeine in pages_to_caffeine:\n            pages_to_caffeine[caffeine].append(page)\n        else:\n            pages_to_caffeine[caffeine] = [page]\n\n    max_caffeine = max(caffeine)\n    if max_caffeine < pages:\n        return -1\n\n    # Convert to linear sum of pages and cups\n    caffeine.append(pages)\n    caffeine.sort()\n\n    days = 0\n    for cup in range(max_caffeine, 0, -1):\n        day = 0\n        for page in range(cup, 0, -1):\n            page_to_write = max(0, page - cup + 1)\n            day += page_to_write\n            for caffeine in pages_to_caffeine.keys():\n                if cup - caffeine + 1 >= 0:\n                    if page < pages_to_caffeine[caffeine][0]:\n                        break\n                    page_to_write = max(0, page - caffeine + 1)\n                    day += page_to_write\n                    pages_to_caffeine[caffeine].pop(0)\n                    if len(pages_to_caffeine[caffeine]) == 0:\n                        del pages_to_caffeine[caffeine]\n                    break\n            if page < pages:\n                break\n        days = day\n        if days == pages:\n            break\n\n    return days\n\nsolution(\"5 8\\n2 3 1 1 2\\n\")\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_cups, max_pages = list(map(int, stdin.split()))\n    pages_per_cup = list(map(int, stdin.split()))\n    max_pages_per_day = pages_per_cup[0]\n    pages_left = max_pages\n    days = 0\n    for i in range(1, num_cups):\n        if pages_left > max_pages_per_day:\n            pages_left = pages_per_cup[i]\n        else:\n            days += 1\n            pages_left = max(pages_per_cup[i], pages_left)\n    if pages_left > max_pages_per_day:\n        days += 1\n    return days if pages_left <= max_pages_per_day else 'Impossible'\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: String of length no_of_cups_of_coffee and no_of_pages_in_coursework\n    # Return: str no_of_days_to_complete_coursework_or_None\n    stdin = stdin.split('\\n')\n    no_of_cups = int(stdin[0].split()[0])\n    no_of_pages = int(stdin[0].split()[1])\n    cups_of_coffee = [int(i) for i in stdin[1].split()]\n    #print(no_of_cups, no_of_pages, cups_of_coffee)\n\n    # dp[i][j] = minimal number of days to complete all pages of coursework from 1st cup to i-th cup, j pages in 1st cup\n    # dp[i][j] = min(dp[i][j], dp[k][j-1] + (i - k - 1))\n    dp = [[0] * (no_of_pages + 1) for _ in range(no_of_cups + 1)]\n\n    for i in range(no_of_cups):\n        for j in range(no_of_pages + 1):\n            if j == 0:\n                dp[i + 1][j] = 0\n                continue\n            if i == 0:\n                dp[i + 1][j] = dp[i][j - 1] + 1\n            else:\n                dp[i + 1][j] = min(dp[i][j - 1] + 1, dp[i + 1][j - 1] + (cups_of_coffee[i] - 1))\n\n    return dp[no_of_cups][no_of_pages] if dp[no_of_cups][no_of_pages]!= no_of_pages + 1 else '-1'\n    # dp[no_of_cups][no_of_pages] represents number of days required to complete all pages in no_of_cups cups starting from 1st cup\n    # dp[no_of_cups][no_of_pages] == no_of_pages + 1 means impossible to complete\n    # dp[no_of_cups][no_of_pages]!= no_of_pages + 1 means possible to complete\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    A = [int(i) for i in stdin.split(' ')]\n    C = [0] * (n + 1)\n    A.sort(reverse=True)\n    C[0] = m\n    for i in range(1, n + 1):\n        C[i] = max(0, A[i] - i)\n    for i in range(n + 1):\n        C[i] = max(0, C[i])\n    days = [0]\n    for i in range(n + 1):\n        if C[i]!= 0:\n            days.append(days[-1] + C[i])\n    for i in range(n + 1):\n        if days[i] > m:\n            return str(i - 1)\n    return '-1'\n\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = [int(x) for x in lines[0].split(' ')]\n    a = [int(x) for x in lines[1].split(' ')]\n    cnt = 0\n    for i in range(n):\n        if a[i] > m:\n            break\n        cnt += (m - a[i] + 1)\n    return str(cnt) if cnt > 0 else '-1'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    a = [int(n) for n in stdin.split()]\n    d = [a[i + 1] - a[i] for i in range(n - 1)]\n    s = sum(d)\n    return str(s // m) if s % m == 0 else '-1'\n    pass\n"
    },
    {
        "number": 4249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 8\\n2 3 1 1 2\")\n    4\n    >>> solution(\"7 10\\n1 3 4 2 1 4 2\")\n    2\n    >>> solution(\"5 15\\n5 5 5 5 5\")\n    -1\n    >>> solution(\"5 26\\n5 5 5 5 5\")\n    -1\n    >>> solution(\"5 16\\n5 5 5 5 5\")\n    2\n    \"\"\"\n   ..."
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = []\n    for i in range(k):\n        max_num = s[0]\n        max_idx = 0\n        for j in range(len(s)):\n            if s[j] > max_num:\n                max_num = s[j]\n                max_idx = j\n        t.append(s[max_idx])\n        s.remove(max_num)\n    return''.join(map(str, t))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    min_val = a[0]\n    max_val = a[len(a)-1]\n    result = []\n    for i in range(min_val, max_val+1):\n        result.append(i)\n    print(*result)\n    return \"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"7 3\n   ... 1 2 3 2 4 3 1\n   ... \"\"\")\n    '1 2 3'\n\n    >>> solution(\"\"\"10 4\n   ... 1 3 1 3 10 3 7 7 12 3\n   ... \"\"\")\n    '7 3 1 3'\n\n    >>> solution(\"\"\"15 2\n   ... 1 2 1 1 1 2 1 1 2 1 2 1 1 1\n   ... \"\"\")\n    '1 1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, k = list(map(int, lines[0].split()))\n    lst = list(map(int, lines[1].split()))\n\n    count = 0\n    while True:\n        if not lst:\n            break\n\n        if not lst[0] % k:\n            count += lst[0] // k\n            lst = lst[k:]\n        else:\n            break\n\n    if count < k:\n        return''.join(map(str, lst[:k - count]))\n\n    return''.join(map(str, lst))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    assert len(arr) == n\n    arr.sort()\n    first = arr[n - k]\n    last = arr[n - 1]\n    result = [first, last]\n    for i in range(n - 2, -1, -1):\n        if arr[i]!= first and arr[i]!= last:\n            result.append(arr[i])\n            break\n    result.reverse()\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = [int(x) for x in stdin.split(' ')]\n    cnt = [0] * len(s)\n    for num in s:\n        cnt[num - 1] += 1\n    i = 0\n    while i < len(s) and cnt[i] > 0:\n        cnt[i] -= 1\n        i += 1\n    i -= 1\n    while i < len(s) and cnt[i] >= 0:\n        cnt[i] += 1\n        i -= 1\n    i += 1\n    while i < len(s) and cnt[i] < 0:\n        cnt[i] += 1\n        i += 1\n    i -= 1\n    if i < 0:\n        return''.join([str(x) for x in range(1, k + 1)])\n    while i >= 0:\n        cnt[i] += 1\n        i -= 1\n    return''.join([str(x) for x in range(1, k + 1) if cnt[x - 1] == 0])\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    t, l = [0] * k, [0] * k\n    for i in range(n):\n        for j in range(k):\n            if arr[i] < t[j]:\n                t[j] = arr[i]\n                l[j] = i\n                break\n    t = [t[i] for i in range(k)]\n    ans = ''\n    for i in range(k):\n        if i!= 0 and t[i]!= t[i - 1]:\n            ans +='' + str(t[i - 1])\n        else:\n            ans +='' + str(t[i])\n    return ans\n"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    array = list(map(int, stdin.readline().split()))\n    \n    #We want to find the longest array t\n    #such that we can cut out k copies of t from array\n    #where t is the longest array\n    #such that we can cut out k copies of t from array\n    #where t is the longest array\n    #such that we can cut out k copies of t from array\n    #where t is the longest array\n    #such that we can cut out k copies of t from array\n    #where t is the longest array\n    #such that we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can cut out k copies of t from array\n    #where t is the longest array\n    #where we can"
    },
    {
        "number": 4250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('7 3\\n1 2 3 2 4 3 1')\n    '1 2 3'\n    '''\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    res = []\n    i = 0\n    while k > 0:\n        while i < len(arr) and arr[i] <= i + 1:\n            i += 1\n        if i < len(arr):\n            res.append(arr[i])\n            k -= 1\n            arr[i] = -1\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.readline().split())\n    A = []\n    for i in range(n):\n        A.append(list(map(int, stdin.readline().split())))\n    dp = [[0] * n for _ in range(m)]\n    dp[0] = A[0]\n    for i in range(m):\n        for j in range(n):\n            if j > 0:\n                dp[i][j] += min(dp[i][j - 1], dp[i][j - 1][j - 1], dp[i][j - 1][j - 1][j - 1])\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[i][j - 1][j - 1], dp[i][j - 1][j - 1][j - 1])\n    for i in range(m):\n        s = set()\n        for j in range(n):\n            s.add(dp[i][j])\n        if len(s) == 1:\n            continue\n        d = list(s)[1]\n        for j in range(n):\n            if dp[i][j] == d:\n                dp[i][j] = 0\n    dp = sorted(dp, key=lambda x: max(x))\n    for i in dp:\n        print(' '.join(map(str, i)))\n    return ''\n    '''\n    n, m = map(int, stdin.readline().split())\n    A = []\n    for i in range(n):\n        A.append(list(map(int, stdin.readline().split())))\n    dp = [0] * m\n    for i in range(m):\n        for j in range(n):\n            if j > 0:\n                dp[i] = max(dp[i], dp[i][j - 1] + min(A[i][j - 1], A[i][j - 1][j - 1], A[i][j - 1][j - 1][j - 1]))\n            else:\n                dp[i] = max(dp[i], min(A[i][j - 1], A[i][j - 1][j - 1], A[i][j - 1][j - 1][j - 1]))\n    print(max(dp))\n    return ''\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: input in string format\n    :return: solution flag\n    '''\n    # your code goes here\n    return \"\"\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n^2 * log(n))\n    Space Complexity: O(1)\n    \"\"\"\n    n, m = list(map(int, stdin.split(' ')))\n    a = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(n)]\n\n    a.sort(key=lambda x: x[0])\n    result = 0\n    for i in range(1, m):\n        result = max(result, abs(a[i - 1][0] - a[i][0]))\n    return str(result)\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(len(stdin) - stdin.count('xxx'))\n    return ''"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"x\", \"\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    n_x = 0\n    for i in range(len(s)):\n        if s[i] == 'x':\n            n_x += 1\n    return (n - n_x)\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('xxxxx', 'xxxx')\n"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    res = 0\n    for i in range(len(s)):\n        if s[i:i+3] == 'xxx':\n            res += 1\n    return str(res)"
    },
    {
        "number": 4252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport re\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the area of a regular dodecagon inscribed in a circle of radius r.\n    >>> solution('4')\n    '48'\n    >>> solution('3')\n    '27'\n    \"\"\"\n    r = int(stdin.readline())\n    return str(3 * r * r)\n\n\"\"\"\nhttps://www.geeksforgeeks.org/find-the-area-of-a-regular-polygon/\n\"\"\""
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(r**2 * 3.14)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * (r ** 2)\n    return str(area)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    area = 0\n    r = int(stdin.readline().strip())\n    area = 3 * (r ** 2)\n    return area"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\")\n    48\n    \"\"\"\n    r = int(stdin.readline().strip())\n    return str(3 * r * r)\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(3 * (int(stdin) ** 2))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = (5 * r ** 2) / (2 * 3 ** 0.5)\n    return str(int(area))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    return str(3*r*r)"
    },
    {
        "number": 4253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = 3 * (r ** 2) * (3 ** 0.5) / 2\n    print(int(area))\n    return \"\"\n\nsolution(input())"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'unsafe' if int(stdin.split()[1]) >= int(stdin.split()[0]) else'safe'"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_sheep, num_wolves = map(int, stdin.split())\n    if num_wolves >= num_sheep:\n        return 'unsafe'\n    return'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Checks whether sheep are safe from wolves or not\n\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: Output of the function\n    \"\"\"\n    sheep, wolves = map(int, stdin.split())\n    if sheep >= wolves:\n        return'safe'\n    return 'unsafe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolves = [int(i) for i in stdin.split()]\n    if wolves >= sheep:\n        return \"unsafe\"\n    return \"safe\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = list(map(int, stdin.split(' ')))\n    if m >= n:\n        print(\"unsafe\")\n    else:\n        print(\"safe\")\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S, W = list(map(int, stdin.split()))\n    if W >= S:\n        return \"unsafe\"\n    return \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if W >= S:\n        print(\"unsafe\")\n    else:\n        print(\"safe\")\n    return \"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (S, W) = map(int, stdin.split(' '))\n    return \"safe\" if S < W else \"unsafe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    number_of_sheep = int(lines[0].split()[0])\n    number_of_wolves = int(lines[0].split()[1])\n    if number_of_wolves >= number_of_sheep:\n        return \"unsafe\"\n    return \"safe\""
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = (int(i) for i in stdin.split())\n    import math\n    hypotenuse = math.sqrt(A**2 + B**2)\n    return f\"{hypotenuse * C}/2\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n    a, b, c = float(a), float(b), float(c)\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return str(int(area))\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    area = (a*b*c)/2\n    return str(area)\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n\n    return str(a * b * c)\n\"\"\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    return str(round(math.sqrt(a * b * c)))\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(i) for i in stdin.split())\n    print(int((a*b*c)/2))"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    area = s * (s - a) * (s - b) * (s - c)\n    return str(area)\n\"\"\"\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(int(((b ** 2) + (c ** 2)) ** 0.5))"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a == 0 or b == 0 or c == 0:\n        return \"InvalidInput\"\n    elif a == b == c:\n        return \"Equilateral\"\n    elif a == b or b == c or c == a:\n        return \"Isosceles\"\n    else:\n        return \"Scalene\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    nums = input[0].split()\n    nums = [int(x) for x in nums]\n    if not len(nums) == 3:\n        return \"Wrong number of sides\"\n\n    AB = nums[0]\n    BC = nums[1]\n    CA = nums[2]\n    return f\"The area of the triangle ABC is {(BC*CA)/2}\"\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split(' ')]\n    return (b * a - c * b + b - 1) // (c - 1)\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return ''.join([str(a//b + (a%b < c)) for a in range(c+1, b*c+1, b)])\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    A, B, C = int(input[0]), int(input[1]), int(input[2])\n    if (A - 1) * (B - 1) < C:\n        return str(A - 1)\n    else:\n        return str(A - 1 + (C - 1) // B)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b, c = [int(i) for i in stdin.split()]\n    return a//(b-c) + 1 if a%(b-c) == 0 else a//(b-c) + 2\n    \n    \n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    \n    return C // (A - B) if C % (A - B) == 0 else C // (A - B) + 1\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split(' ')))\n    return f'{b // c}'\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n    a, b, c = int(a), int(b), int(c)\n    if c >= a:\n        return b\n    return int(a / c)"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(' ')[0]) // int(stdin.split(' ')[1]) +\n               int(stdin.split(' ')[2]) // int(stdin.split(' ')[1]) +\n               int(stdin.split(' ')[0]) // int(stdin.split(' ')[2]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    num = b / c\n    if num >= 8:\n        return num\n    return int(8 / c)\n"
    },
    {
        "number": 4256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    # Write your code here\n    print(b // a + min(b % a, c))"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return str(int(a)*int(b))"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 5\")\n    10\n    \"\"\"\n    a, b = (int(stdin.strip().split()[0]), int(stdin.strip().split()[1]))\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # \u4f7f\u7528stdin.readline()\u6765\u8bfb\u53d6\u8f93\u5165\n    # input()\u4e3apython3\u7684\u66ff\u4ee3\u65b9\u6cd5\uff0c\u53ef\u8bfb\u53d6\u6570\u636e\u5e76\u8f6c\u4e3a\u5b57\u7b26\u4e32\n    A, B = [int(s) for s in stdin.readline().split()]\n    print(A * B)\n\nsolution(stdin)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # remove newline character\n    stdin = stdin.replace(\"\\n\", \"\")\n\n    # split input by whitespace\n    nums = stdin.split(\" \")\n\n    # convert each element to int\n    nums = list(map(int, nums))\n\n    # multiply the 2 numbers\n    answer = nums[0] * nums[1]\n\n    # return answer\n    return str(answer)"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    :param stdin: standard input\n    :type stdin: str\n    :return: solution\n    :rtype: str\n    \"\"\"\n    return str(int(stdin.split()[0]) * int(stdin.split()[1]))\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n\nprint(solution(stdin.readline()))\n\"\"\"\n\nimport os\nimport sys\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    result = 1\n    for line in input_data:\n        if line == '0':\n            result = 0\n            break\n        if line!= '':\n            line = line.split(' ')\n            result *= int(line[0]) * int(line[1])\n    print(result)\n\nsolution(stdin)\n"
    },
    {
        "number": 4257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    return str(A * B)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    a, b, t = map(int, stdin.split())\n    # Get the amount of time passed after the first time a biscuit is produced\n    delta = t - a\n    # Find the number of biscuits produced after the first time\n    first_biscuits = math.floor(delta / a)\n    # Calculate how many biscuits will be produced after the first time\n    second_biscuits = math.floor(b * (delta / a))\n    # Calculate the total number of biscuits produced\n    total_biscuits = first_biscuits + second_biscuits\n    # Return the total number of biscuits\n    return total_biscuits\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Declare an input variable and read it in.\n    a, b, t = map(int, stdin.readline().split())\n    # Declare an output variable and initialize it to zero.\n    output = 0\n    # Loop until you reach T + 0.5 seconds.\n    while t > 0:\n        # Increase the output variable by B.\n        output += b\n        # Decrease the value of T by 1.\n        t -= 1\n        # If T is divisible by A, then increase the output variable by A.\n        if t % a == 0:\n            output += a\n    # Return the output.\n    return output\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split(' '))\n\n    return '{}'.format(A * B * (T // A) + max(T - (A * (T // A)), 0))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = map(int, stdin.split(' '))\n    return str(a*b*(t+0.5))\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(B + T // A - 1)\n"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = [int(s) for s in stdin.split()]\n    print(B * (A * T // A + (T % A) // 2))"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split(' '))\n    print(B*(T//A)+max((T-(T//A)*A), 0))\n    return''"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # first, get all the input from the stdin\n    all_input = stdin.split(\"\\n\")\n    # split the input\n    # 3 5 7\n    input_list = all_input[0].split(\" \")\n    # convert all the input to integer\n    input_list = [int(i) for i in input_list]\n\n    # create a dictionary to store the key:value pair\n    # key: the time after activation\n    # value: the number of biscuits produced in that time\n    # in this dictionary, we will have a key and a value\n    # the key will be the time after activation, the value will be the number of biscuits\n    # for ex: {0: 2, 1: 5, 2: 10, 3: 7}\n    numbers_dict = {}\n\n    # create a list to store all the values\n    # create a list to store the total number of biscuits produced\n    values_list = []\n    biscuits_list = []\n\n    # loop over all the input\n    # create a for loop to run for the number of inputs\n    for i in range(len(input_list)):\n        # initialize the total number of biscuits to be 0\n        biscuits_produced = 0\n        # add 1 to the current time and store it in the variable current_time\n        # then, check if the current_time is in the dictionary\n        # if it is in the dictionary, then do the following\n        # get the value\n        # multiply the current value with the value of the key\n        # add the result to the biscuits_produced variable\n        # add the result to the value_list\n        # and store the result in the biscuits_list\n        current_time = i + 1\n        if current_time in numbers_dict:\n            biscuits_produced += numbers_dict.get(current_time) * current_time\n            values_list.append(biscuits_produced)\n            biscuits_list.append(biscuits_produced)\n\n        # if the current time is not in the dictionary, then do the following\n        # create a key in the dictionary, which will be the current time\n        # create a value for the key\n        # multiply the current time with the input to get the number of biscuits\n        # store the result in the biscuits_produced variable\n        # add the result to the value_list\n        # and store the result in the biscuits_list\n        else:\n            numbers_dict[current_time] = current_time * input_list[i]\n            values_list.append(numbers_dict.get(current_time))\n            biscuits_list.append(numbers_dict.get(current_time))\n\n    # add all the values in the value_list\n    sum_of_values = sum(values_list)\n    # print the sum of all the values\n    print(sum_of_values)\n    return sum_of_values"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    A, B, T = data[0], data[1], data[2]\n    count = 0\n    for time in range(1, T + 1):\n        if time % A == 0:\n            count += B\n    return count"
    },
    {
        "number": 4258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, t) = map(int, stdin.split())\n    return str(b + int((t - 1) / a) * (b - a) + 1)\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(num) for num in stdin.split()]\n    if A % K == 0 and B % K == 0 and B >= A:\n        return \"OK\"\n    else:\n        return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A, B = int(A), int(B)\n    if A % 7 == 0 and B % 7 == 0:\n        return \"OK\"\n    return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    if (b - a) % k == 0:\n        return \"OK\"\n    else:\n        return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = list(map(int, stdin.split(\"\\n\")))\n    s = \"\"\n    for i in range(a, b + 1):\n        if i % k == 0:\n            s += \"OK\\n\"\n        else:\n            s += \"NG\\n\"\n    return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = [int(x) for x in stdin.split('\\n')]\n    return 'OK' if A % K == 0 and (A + B) % K == 0 else 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nnum_list = []\nfor i in range(3):\n    num_list.append(int(stdin.readline().strip()))\nA, B, K = num_list\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = list(map(int, stdin.split(\" \")))\n    if A % K == 0 or B % K == 0:\n        print(\"OK\")\n    else:\n        print(\"NG\")\n"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 7 == 0 or b % 7 == 0:\n        return 'OK'\n    return 'NG'\n\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_input_list() -> List[int]:\n        def get_input() -> int:\n            return int(stdin.readline())\n\n        return [get_input() for _ in range(3)]\n\n    return ('OK' if not has_duplicates(get_input_list()) else 'NG')\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, X = [int(i) for i in stdin.split()]\n    if T == 1:\n        return str(T * X)\n    else:\n        return str(X**(T+1) - 1)"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    print(f'{T / X}')\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    t, x = map(int, stdin.split())\n    return str(t * x // gcd(x, t))\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return str(T / X)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the exercise.\n\n        Parameters:\n            stdin (str): Input given from Standard Input in the correct format.\n\n        Returns:\n            str: Correct solution to exercise.\n    \"\"\"\n    T, X = map(int, stdin.split())\n\n    return str(T / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    T, X = map(int, stdin.split(' '))\n    return str(T * X / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n\n    return str(T / X)\n\"\"\"\n\nT, X = map(int, input().split())\n\nprint(T / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split(\" \"))\n    return str(T / X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"%.3f\" % float(stdin.split()[1])\n"
    },
    {
        "number": 4260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T, X = list(map(float, stdin.split()))\n    return str(round(T / X, 3))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = [int(x) for x in stdin.split(\" \")]\n    b -= c\n    if b > a:\n        a = a\n    else:\n        a = b\n    return str(a)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    bottle_a = a\n    bottle_b = b\n    bottle_c = c\n    while bottle_b > bottle_a:\n        bottle_b -= bottle_a\n        if bottle_b > bottle_c:\n            bottle_b -= bottle_c\n        else:\n            bottle_b = 0\n            break\n        bottle_a += 1\n    return str(bottle_b)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n\n    if B > C:\n        return str(C)\n    elif C > A:\n        return str(A)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b > c:\n        a += b - c\n        b = c\n    else:\n        a += c\n        b = 0\n    return str(b)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int, stdin.split())\n    if a >= b:\n        print(c - b)\n    else:\n        print(c - b + a - a)\n        \n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    leftover = max(0, a - b)\n    if leftover == 0:\n        leftover = a - b\n    if leftover + c > a:\n        return str(leftover + c - a)\n    return str(0)"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return str(max(0, c-b+a))\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    if a >= c:\n        return str(b)\n    elif b >= c:\n        return str(a)\n    elif a == c:\n        return str(0)\n    else:\n        return str(c - a)\n"
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines the number of milliliters of water remaining in the bottle.\n    \"\"\"\n    # get input\n    input_list = stdin.split(\" \")\n    A = int(input_list[0])\n    B = int(input_list[1])\n    C = int(input_list[2])\n    \n    # perform calculation\n    water_remaining = B - C\n    if water_remaining <= 0:\n        water_remaining = A - B\n        if water_remaining <= 0:\n            water_remaining = 0\n    \n    # print output\n    print(water_remaining)\n    return \"\"\n\n\"\"\"\nPlease note that in Python, the default recursion limit is 1000.\nSo if you exceed the limit, it will fail.\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    bottles_a, bottles_b, bottles_c = map(int, stdin.split())\n    return str(bottles_c - bottles_a % c)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return''\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    N: int = int(stdin)\n    P: List[int] = [int(x) for x in stdin.split(\" \")]\n    Q: List[int] = [int(x) for x in stdin.split(\" \")]\n\n    return str(abs(P.index(1) - Q.index(1)))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, *b = map(int, stdin.split())\n    return abs(a - sum(b))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    n = int(inputs[0])\n    P = list(map(int, inputs[1].split(\" \")))\n    Q = list(map(int, inputs[2].split(\" \")))\n    min_p = P[0]\n    min_q = Q[0]\n    for i in range(n):\n        min_p = min(min_p, P[i])\n        min_q = min(min_q, Q[i])\n    return abs(min_p - min_q)\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    P = list(map(int, stdin.readline().strip().split(' ')))\n    Q = list(map(int, stdin.readline().strip().split(' ')))\n    P.sort()\n    Q.sort()\n    return str(abs(P.index(Q[0]) - P.index(Q[-1])))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the difference between the first and last lexicographical ordering of a permutation.\"\"\"\n    return abs(int(stdin.split('\\n')[0]) - int(stdin.split('\\n')[1]))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(__file__.replace('.py', '-input.in'))\n    n = int(input())\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    \n    t = list(zip(p,q))\n    t.sort(key=lambda x: x[0])\n    a = t[0][0]\n    b = t[-1][1]\n    return str(abs(a - b))\n"
    },
    {
        "number": 4262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    permutation_list = list(map(int, stdin.readline().rstrip().split(' ')))\n    permutation_list.sort()\n    print(abs(permutation_list[0] - permutation_list[-1]))\n    return ''\n\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    while stdin:\n        if stdin[:3] == 'ATC':\n            cnt = len(stdin[:3])\n        else:\n            stdin = stdin[1:]\n    return cnt\n    # write your code here"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    longest = 0\n    longest_str = ''\n    for i in range(len(string)):\n        for j in range(len(string)):\n            test = string[i:j]\n            if test.count('A') == test.count('C') == test.count('G') == test.count('T') and len(test) > longest:\n                longest = len(test)\n                longest_str = test\n    return longest_str\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ATCODER\")\n    '3'\n    \"\"\"\n    return max(\n        substrings_of(stdin),\n        key=len,\n    )\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets longest substring of ACGT characters\"\"\"\n    # Get string of ACGT characters from input\n    seq = stdin\n    # Initialize variables for longest substring of ACGT characters\n    # Keep track of length of longest substring\n    # Keep track of start of longest substring\n    longest_substring = ''\n    longest_substring_length = 0\n    start_of_longest_substring = 0\n\n    # Iterate through each character in the string\n    for index, character in enumerate(seq):\n        # If character is ACGT\n        if character == 'A' or character == 'C' or character == 'G' or character == 'T':\n            # If character is not the first character of the string\n            if index!= 0:\n                # If the character to the left is not ACGT\n                # Update longest substring of ACGT characters\n                if character!= seq[index - 1]:\n                    # If the character is at the start of the string\n                    if index == 0:\n                        # Update longest substring\n                        longest_substring = character\n                        longest_substring_length += 1\n                    # If the character is at the end of the string\n                    elif index == len(seq) - 1:\n                        # Update longest substring\n                        longest_substring = longest_substring + character\n                        longest_substring_length += 1\n                    # If the character is in the middle of the string\n                    else:\n                        # Update longest substring\n                        longest_substring = character + longest_substring\n                        longest_substring_length += 1\n            # If character is the first character of the string\n            else:\n                # Update longest substring\n                longest_substring = character\n                longest_substring_length += 1\n\n    # Return the length of the longest substring of ACGT characters\n    return longest_substring_length\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max = 0\n    for i in range(len(stdin)):\n        for j in range(i + 1, len(stdin)):\n            if stdin[i:j] == stdin[i:j][::-1]:\n                if len(stdin[i:j]) > max:\n                    max = len(stdin[i:j])\n    return max\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin.splitlines()[0]\n    longest_substring = ''\n    for i in range(0, len(sequence)):\n        for j in range(i, len(sequence)):\n            substring = sequence[i:j+1]\n            if len(substring) > len(longest_substring):\n                if set(substring) <= set('ACGT'):\n                    longest_substring = substring\n    return len(longest_substring)\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return max(s.replace('A', '').replace('T', '').replace('G', '').replace('C', '') for s in stdin)\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin[0]\n    lst = ['A', 'C', 'G', 'T']\n    for y in range(1, len(stdin)):\n        if stdin[y] in lst:\n            x += stdin[y]\n        else:\n            x = x[:-1]\n            break\n    return(len(x))\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return max(set(stdin), key=lambda x: len(x))"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [1, 3, 5, 7, 9]\n    count = 0\n    for i in range(1, n):\n        if i % 2 == 1:\n            if len(str(i)) % 2!= 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = stdin\n  numOfOdds = 0\n  for i in range(1, n+1):\n    if len(str(i)) % 2!= 0:\n      numOfOdds += 1\n  return str(numOfOdds)"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    count = 0\n    for i in range(1,int(n)+1):\n        if len(str(i))%2==1:\n            count +=1\n    return count\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(1, int(stdin)):\n        if len(str(i)) % 2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for x in range(1, N + 1):\n        if len(str(x)) % 2!= 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    counter = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 == 1:\n            counter += 1\n    return str(counter)"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    max_n = int(stdin)\n    total = 0\n    for n in range(max_n):\n        if len(str(n)) % 2 == 1:\n            total += 1\n    return total\n    pass"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    count = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 == 1:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    i = 1\n    while i <= N:\n        if len(str(i)) % 2 == 1:\n            odd_count += 1\n        i += 1\n    return odd_count"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"lemon\"\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    min_ops = min_ops_2(s, t)\n    return min_ops\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    lens, lent = len(s), len(t)\n    res = lens + lent - 2 * min(lens, lent)\n    return res\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    return len(S) + len(T) - 2 * min(len(S), len(T))\n\"\"\"\nimport unittest\nfrom collections import Counter\nfrom typing import Callable, Dict, List, Set\n\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split(\"\\n\")[0]\n    T = stdin.split(\"\\n\")[1]\n    \n    import string\n    character_set = set(list(string.ascii_lowercase))\n    \n    count = 0\n    for character in character_set:\n        count += S.count(character) - T.count(character)\n    return count\n    \n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return len([i for i in range(len(s)) if s[i]!= t[i]])\n\"\"\"\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return len([1 for i in range(len(s)) if s[i]!= t[i]])"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(str(i) for i in sorted(list(set([int(i) for i in stdin.split()]))))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split(' '))\n    if K == 1 and X <= 0:\n        print(0)\n    elif K == 1 and X > 0:\n        print(1)\n    elif K < 1 or K > 100:\n        print('0')\n    elif X < 0 or X > 100:\n        print('0')\n    else:\n        print('0\\n1\\n')"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds coordinates of the stone(s) that are black.\"\"\"\n    #:param stdin: input str\n    #:return: str\n    K, X = map(int, stdin.split())\n    lower = max(-1_000_000, X - K)\n    upper = min(1_000_000, X + K)\n    return''.join(str(i) for i in range(lower, upper + 1))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution:\n    Take the input, parse it into variables\n    Loop through the input, add all the coordinates that contain a black stone to a list\n    return the list\n    \"\"\"\n    (K, X) = stdin.strip().split(\" \")\n    (K, X) = (int(K), int(X))\n    print(*[\n        i for i in range(X - K, X + K + 1) if i % 2 == 0\n    ])"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result_string\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n\n    start = X - (K - 1)\n    end = X + K\n\n    return''.join(map(str, range(start, end)))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 7')\n    5 6 7 8 9\n    >>> solution('1 0')\n    1\n    >>> solution('1 1')\n    1 2\n    >>> solution('1 10')\n    1 2 3 4 5 6 7 8 9 10\n    \"\"\"\n    [K, X] = [int(x) for x in stdin.split()]\n    return \" \".join([str(x) for x in range(X, K + X)])\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, range(int(stdin.split(' ')[0]), int(stdin.split(' ')[1]) + 1)))\n"
    },
    {
        "number": 4266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the coordinates of the black stones\"\"\"\n    coordinates = stdin.split(' ')\n    k = int(coordinates[0])\n    x = int(coordinates[1])\n    result = []\n    for i in range(x - k, x + k + 1):\n        if i < 0 or i > 1000000:\n            continue\n        result.append(i)\n    return''.join(map(str, result))"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n\n---Sample Input---\n2\n---Sample Output---\nYes\n\ndef"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    room_temp: int = int(stdin)\n    if room_temp >= 30:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin)\n    if temperature >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        num = int(stdin)\n        if num >= 30:\n            return 'Yes'\n        else:\n            return 'No'\n    except:\n        return 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    temperature = stdin\n    temperature = int(temperature)\n    if temperature >= 30:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'No' if int(stdin) < 30 else 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'No' if int(stdin) < 30 else 'Yes'\n\nprint(solution(stdin = input()))\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    if number >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    x = int(stdin)\n    return 'Yes' if x >= 30 else 'No'\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums, D = stdin.split(' ')\n    nums, D = int(nums), int(D)\n    points = []\n    for _ in range(nums):\n        point = list(map(int, stdin.split(' ')))\n        points.append(point)\n\n    ans = 0\n    for i in range(nums - 1):\n        for j in range(i + 1, nums):\n            if (points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2 == (points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Parsing input\n    values = [int(x) for x in stdin.split(\"\\n\")[:2]]\n    points = [int(x) for x in stdin.split(\"\\n\")[2:]]\n    N, D = values[0], values[1]\n    \n    # Initialize result\n    result = 0\n    \n    # Generate all pairs\n    pairs = [(x, y) for x in points for y in points if x!= y]\n    \n    # Iterate through pairs\n    for i, j in pairs:\n        # Check for integers\n        distance = (i - j) ** 2\n        if distance == 0 or distance % 2 == 0:\n            result += 1\n    \n    return str(result)\n    \n    \n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get inputs\n    n_d = stdin.split(\" \")\n    n, d = int(n_d[0]), int(n_d[1])\n    # create matrix\n    matrix = [stdin.split(\" \")[1:] for _ in range(n)]\n    # create dict to store (i, j) tuples\n    tuples = dict()\n    # iterate through rows and cols, find distances between each pair of points\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate distance between points\n            distance = sum([(int(x)-int(y))**2 for x, y in zip(matrix[i], matrix[j])])\n            # if distance is int, store in dict\n            if distance.is_integer():\n                tuples[(i, j)] = distance\n    # print number of tuples\n    print(len(tuples))"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n_m_input = stdin.split()\n    n = int(n_m_input[0])\n    m = int(n_m_input[1])\n    table = []\n    for i in range(n):\n        row = [float(x) for x in stdin.split()]\n        table.append(row)\n    n_m_input = stdin.split()\n    n = int(n_m_input[0])\n    m = int(n_m_input[1])\n    table = []\n    for i in range(n):\n        row = [float(x) for x in stdin.split()]\n        table.append(row)\n\n    def distance(v1, v2):\n        return (sum([(v1[i] - v2[i]) ** 2 for i in range(m)])) ** (1 / 2)\n\n    def find_distance_with_int(p1, p2):\n        count = 0\n        for p3 in table:\n            if distance(p1, p3) + distance(p2, p3) == round(distance(p1, p2)):\n                count += 1\n        return count\n\n    return str(find_distance_with_int(table[0], table[1]))"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, d = map(int, stdin.split(' '))\n\n    # solution\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            # calculate the distance\n            distance = 0\n            for k in range(d):\n                distance += abs(\n                    int(stdin.split('\\n')[i].split(' ')[k]) -\n                    int(stdin.split('\\n')[j].split(' ')[k])) ** 2\n            distance = distance ** 0.5\n            if distance.is_integer():\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns number of pairs with integer distance.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Number of pairs.\n    \"\"\"\n    n, d = [int(x) for x in stdin.split(' ')]\n    points = []\n    for _ in range(n):\n        points.append([int(x) for x in stdin.split(' ')])\n    count = 0\n    for i, p1 in enumerate(points):\n        for j, p2 in enumerate(points):\n            if i!= j:\n                distance = 0\n                for x1, x2 in zip(p1, p2):\n                    distance += abs(x1 - x2)\n                if distance.is_integer():\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of pairs (i, j) (i < j) such that the distance between the i-th point and the j-th point is an integer.\n\n    >>> solution('3 2\\n1 2\\n5 5\\n-2 8')\n    '1'\n    \"\"\"\n    # Prepare our input data\n    data = [line.split(' ') for line in stdin.splitlines()]\n    n, d = [int(data[0][i]) for i in range(2)]\n\n    # Get the points\n    points = [tuple(int(point) for point in line) for line in data[1:n + 1]]\n\n    # Get the distances\n    distances = [\n        sum(\n            ((a - b) ** 2 for a, b in zip(point1, point2))\n            ) ** 0.5\n        for point1, point2 in combinations(points, 2)\n    ]\n\n    # Get the output\n    return str(sum(1 for distance in distances if int(distance) == distance))\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    security_code = stdin\n    if (\n        security_code.count(security_code[0]) == len(security_code)\n        and security_code[0] == security_code[1]\n    ):\n        return \"Bad\"\n    else:\n        return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and return Good if string is hard to enter.\n    Otherwise, return Bad.\"\"\"\n    # Split string into list of digits\n    digits = [int(x) for x in stdin]\n    # check if consecutive numbers are the same\n    for i in range(len(digits)-1):\n        if digits[i] == digits[i+1]:\n            # if so, return Bad\n            return \"Bad\"\n    # if no consecutive numbers are the same, return Good\n    return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Bad\" if len(set(stdin)) < 4 else \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin\n    check = list(code)\n    flag = True\n    for i in range(0, len(code) - 1):\n        if check[i] == check[i + 1]:\n            flag = False\n    if flag is True:\n        print(\"Good\")\n    else:\n        print(\"Bad\")"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    code = stdin[:4]\n    return \"Bad\" if '1234' in code or '4321' in code else \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"Good\" if \"12\" not in stdin else \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Bad\" if [x for x in range(10) if str(x) * 2 in stdin][0] else \"Good\""
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 4:\n        return \"Bad\"\n    elif stdin[0] == stdin[1] or stdin[1] == stdin[2] or stdin[0] == stdin[2]:\n        return \"Bad\"\n    else:\n        return \"Good\"\nprint(solution(stdin))\n\n// Best solution for now\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n```python3\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    ingredients = list(map(int, stdin.readline().split()))\n\n    left_ingredients = [ingredients[0], 0]\n    right_ingredients = [ingredients[-1], 0]\n\n    for i in range(1, N):\n        if left_ingredients[0] > right_ingredients[0]:\n            left_ingredients[0] = left_ingredients[0] - (left_ingredients[0] - right_ingredients[0]) / 2\n            left_ingredients[1] = left_ingredients[1] + (left_ingredients[0] - right_ingredients[0]) / 2\n            right_ingredients[1] = right_ingredients[1] + (right_ingredients[0] - left_ingredients[0]) / 2\n            left_ingredients[0] = left_ingredients[0] + (left_ingredients[0] - right_ingredients[0]) / 2\n        else:\n            right_ingredients[0] = right_ingredients[0] - (right_ingredients[0] - left_ingredients[0]) / 2\n            right_ingredients[1] = right_ingredients[1] + (right_ingredients[0] - left_ingredients[0]) / 2\n            left_ingredients[1] = left_ingredients[1] + (left_ingredients[0] - right_ingredients[0]) / 2\n            right_ingredients[0] = right_ingredients[0] + (right_ingredients[0] - left_ingredients[0]) / 2\n    print(left_ingredients[0])\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You have a pot and N ingredients. Each ingredient has a real number parameter called value, and the value of the i-th ingredient (1 \\leq i \\leq N) is v_i.\nWhen you put two ingredients in the pot, they will vanish and result in the formation of a new ingredient. The value of the new ingredient will be (x + y) / 2 where x and y are the values of the ingredients consumed, and you can put this ingredient again in the pot.\nAfter you compose ingredients in this way N-1 times, you will end up with one ingredient. Find the maximum possible value of this ingredient.\n\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - 1 \\leq v_i \\leq 1000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nv_1 v_2 \\ldots v_N\n\n-----Output-----\nPrint a decimal number (or an integer) representing the maximum possible value of the last ingredient remaining.\nYour output will be judged correct when its absolute or relative error from the judge's output is at most 10^{-5}.\n\n-----Sample Input-----\n2\n3 4\n\n-----Sample Output-----\n3.5\n\nIf you start with two ingredients, the only choice is to put both of them in the pot. The value of the ingredient resulting from the ingredients of values 3 and 4 is (3 + 4) / 2 = 3.5.\nPrinting 3.50001, 3.49999, and so on will also be accepted.\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    values = [int(x) for x in stdin.split('\\n')[1].split()]\n    min_value = min(values)\n    max_value = max(values)\n    result = []\n    for x in range(min_value, max_value + 1):\n        result.append(f'{x} {sum(values) + x} {sum(values) - x}')\n    return str(max(float(x.split()[1]) for x in result))\n"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *values = [float(value) for value in stdin.strip().split('\\n')]\n    result = sum(values) / 2\n    for i in range(1, n):\n        result = (result + sum(values[:i]) + sum(values[i:])) / 2\n    return str(result)"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *values = map(float, stdin.split())\n    values = sorted(values)\n    values.reverse()\n    l = len(values)\n    r = sum(values[:l//2])\n    while r > n:\n        r -= values[l//2]\n        l //= 2\n    return f'{r:.5f}'"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(solve(stdin))"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N: int = int(stdin.readline())\n    A: list[int] = [int(_) for _ in stdin.readline().split()]\n    B: list[int] = [int(_) for _ in stdin.readline().split()]\n    C: list[int] = [int(_) for _ in stdin.readline().split()]\n    s: int = 0\n    for i in range(N):\n        s += B[i] + C[i] * (i + 1)\n    return str(s)\n    '''\n\n    # Optimized solution\n    s = 0\n    N = int(stdin.readline())\n    A = [int(_) for _ in stdin.readline().split()]\n    B = [int(_) for _ in stdin.readline().split()]\n    C = [int(_) for _ in stdin.readline().split()]\n    for i in range(N):\n        s += A[i] * B[i] + (i + 1) * C[i]\n    return str(s)\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    ans = sum([a[i] * b[i] + c[i] * (c[i] - 1) for i in range(n)])\n    return str(ans)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def parse_input(input: str) -> Tuple[List[int], List[int], List[int]]:\n        split = stdin.split(\"\\n\")\n        n, *l = split\n        n = int(n)\n        a = list(map(int, l[0].split(\" \")))\n        b = list(map(int, l[1].split(\" \")))\n        c = list(map(int, l[2].split(\" \")))\n\n        return a, b, c\n\n    def solve(n: int, a: List[int], b: List[int], c: List[int]) -> int:\n        dp = [0] * (n+1)\n        dp[0] = 0\n        dp[1] = 0\n\n        for i in range(2, n+1):\n            dp[i] = dp[i-1]\n            dp[i] += (b[i-1] - dp[i-1])\n            if i >= 2:\n                dp[i] += (c[i-2] - dp[i-2])\n\n        return dp[n]\n\n    a, b, c = parse_input(stdin)\n    return str(solve(n=len(a), a=a, b=b, c=c))\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #get user input\n    n = int(stdin.readline().strip())\n    a = [int(i) for i in stdin.readline().strip().split(' ')]\n    b = [int(i) for i in stdin.readline().strip().split(' ')]\n    c = [int(i) for i in stdin.readline().strip().split(' ')]\n    \n    #find the total score\n    total = 0\n    for i in range(n):\n        total += a[i] * b[i] + c[i]\n    \n    #return the total\n    return total"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the sum of the satisfaction points Takahashi gained from eating N dishes.\n    :param stdin:\n    :return:\n    \"\"\"\n    N = int(input())\n    takahashi_eat_a_dish = [int(x) for x in input().split()]\n    takahashi_eat_b_dish = [int(x) for x in input().split()]\n    takahashi_eat_c_dish = [int(x) for x in input().split()]\n    takahashi_score = 0\n\n    for i in range(N-1):\n        takahashi_score += takahashi_eat_a_dish[i] * takahashi_eat_b_dish[i] + takahashi_eat_a_dish[i] * takahashi_eat_c_dish[i]\n\n    return takahashi_score"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = tuple(map(int, stdin.readline().split(' ')))\n    b = tuple(map(int, stdin.readline().split(' ')))\n    c = tuple(map(int, stdin.readline().split(' ')))\n    s = 0\n    for i in range(n-1):\n        s += b[i] + c[i]\n    s += b[-1]\n    print(s)\n    return ''\n\"\"\""
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_satisfaction_points = 0\n    n = int(stdin.readline())\n    dishes = stdin.readline().split(' ')\n    rest_of_the_day = stdin.readline().split(' ')\n    for i, dish in enumerate(dishes):\n        dish = int(dish)\n        eaten_dish = rest_of_the_day[i]\n        eaten_dish = int(eaten_dish)\n        if i == 0:\n            total_satisfaction_points += int(eaten_dish) * int(dish)\n        elif i == n - 1:\n            total_satisfaction_points += int(eaten_dish) * (int(dish) + 1)\n        else:\n            total_satisfaction_points += int(eaten_dish) * (int(dish) + int(dishes[i + 1]))\n    return str(total_satisfaction_points)\n"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dishes = []\n    for i in range(n):\n        dishes.append(stdin.readline().split(' '))\n    satisfaction = 0\n    for i in range(len(dishes)):\n        dishes[i] = list(map(int, dishes[i]))\n        if i < len(dishes) - 1:\n            satisfaction += sum(dishes[i])\n        satisfaction += dishes[i][1] + dishes[i][2]\n    return satisfaction"
    },
    {
        "number": 4271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    al = [int(x) for x in stdin.readline().split()]\n    bl = [int(x) for x in stdin.readline().split()]\n    cl = [int(x) for x in stdin.readline().split()]\n    \n    sum_ = 0\n    for i in range(n - 1):\n        sum_ += al[i] * bl[i] + al[i] * cl[i]\n    sum_ += al[n - 1] * bl[n - 1]\n    return str(sum_)\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    my_string = stdin\n    # my_string = my_string[:10]\n    count = my_string.count('ABC')\n    print(count)\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    n = int(stdin[0])\n    s = stdin[1:]\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if s[i] + s[j] + s[k] == \"ABC\":\n                    count += 1\n    return str(count)"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    c = stdin[2]\n    return stdin.count(a + b + c)\n\n\"\"\"\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    t = []\n    for i in stdin:\n        if i == \"A\":\n            cnt += 1\n        elif i == \"B\":\n            if cnt >= 2:\n                cnt += 1\n        elif i == \"C\":\n            if cnt >= 3:\n                cnt += 1\n        else:\n            t.append(cnt)\n            cnt = 0\n    return t\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = int(stdin.readline()), stdin.readline()\n    if 3 <= N <= 50 and S.isalpha():\n        count = 0\n        for i in range(len(S)-2):\n            if S[i] == 'A' and S[i+1] == 'B' and S[i+2] == 'C':\n                count += 1\n        print(count)\n    else:\n        print(\"Invalid input\")\n        exit(0)"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    a = 0\n    for i in range(len(s)):\n        if s[i] == 'A' and s[i+1] == 'B' and s[i+2] == 'C':\n            a += 1\n    print(a)\n    return a\n    \n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.strip('\\n')\n    stdin = stdin.split('\\n')\n    stdin = stdin[0]\n    count = 0\n    for i in range(0, len(stdin)-2):\n        s = stdin[i]\n        t = stdin[i+1]\n        u = stdin[i+2]\n        if s == t == u:\n            count += 1\n    return count\nprint(solution(stdin))\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    ans = 0\n    for i in range(n):\n        if s[i:i+3] == 'ABC':\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n    return N, S"
    },
    {
        "number": 4272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    N = int(input_lines[0])\n    people_list = input_lines[1:]\n    counter_dict = {name[0]: 0 for name in people_list}\n    for name in people_list:\n        counter_dict[name[0]] += 1\n    print(counter_dict)\n    ways_to_choose_three = 0\n    for letter in ['M', 'A', 'R', 'C', 'H']:\n        ways_to_choose_three += counter_dict[letter]\n    return str(ways_to_choose_three)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    count = 0\n    name = set()\n    for _ in range(N):\n        person = stdin.readline().strip()\n        if person[0] in name:\n            continue\n        if person[0] == 'M' or person[0] == 'A' or person[0] == 'R' or person[0] == 'C' or person[0] == 'H':\n            count += 1\n            name.add(person[0])\n    print(count)\n"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates how many ways there are to choose 3 people from N people.\n    :param stdin: The input data from STDIN\n    :return: The output data of the problem\n    \"\"\"\n    return \"\"\"1\"\"\""
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 4273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def backtrack(names, i, count):\n        if i == N:\n            if count >= 3:\n                print(count)\n            return\n\n        for j in range(N):\n            if names[j] is None:\n                names[j] = stdin[i]\n                backtrack(names, i+1, count+1)\n                names[j] = None\n\n    names = [None]*N\n    backtrack(names, 0, 0)"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n    solved = [False for _ in range(n)]\n    solved[:m] = [True for _ in range(m)]\n    return \"Yes\" if all(solved) else \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not remove this line.\n    return 'Yes'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Try to read in as many lines as possible. If it gets stuck\n    at the EOF, it'll print the number of lines it read so far.\n    '''\n    num_cases = int(stdin.readline())\n\n    for case in range(num_cases):\n        num_points = int(stdin.readline())\n        points = set([int(stdin.readline()) for _ in range(num_points)])\n        print('Yes' if len(points) == 1 else 'No')\n    \n    return ''\n\nprint(solution(input()))"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin='''3 3\n   ... 3\n   ... 1\n   ... 1\n   ... 1\n   ... ''')\n    Yes\n    \"\"\"\n    num_cases, num_passed = [int(x) for x in stdin.split()]\n    return \"Yes\" if num_passed == num_cases else \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split('\\n')[:-1]\n    test_cases = [line.split() for line in test_cases]\n    test_cases = [\n        (int(x), int(y))\n        for x, y in test_cases\n    ]\n    return 'Yes' if all(\n        x <= y\n        for x, y in test_cases\n    ) else 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read the input and solve the problem.\"\"\"\n    n, m = [int(i) for i in stdin.split()]\n    a = stdin.split()\n    if m >= n:\n        return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases, total_passed = [int(x) for x in stdin.split(' ')]\n    if total_passed == test_cases:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n\"\"\"\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return 'Yes'\n    return 'No'\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum([int(x) for x in stdin[2:]]) == sum([int(x) for x in stdin[3:]]) else 'No'\n    # if any(x[0] == x[3] and x[2] == x[4] for x in [list(stdin[i:i+5]) for i in range(0,len(stdin),5)]):\n    #     return 'Yes'\n    # else:\n    #     return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[2] == stdin[4] and stdin[3] == stdin[5]\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    if len(stdin)!= 6:\n        return 'No'\n    elif stdin[3] == stdin[4] and stdin[5] == stdin[6]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[2:4] == stdin[4:6] else 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    char_3 = stdin[2]\n    char_4 = stdin[3]\n    char_5 = stdin[4]\n    char_6 = stdin[5]\n    if char_3 == char_4 and char_5 == char_6:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[2] == stdin[4] and stdin[4] == stdin[6] else \"No\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    s = stdin\n    if(s[2]==s[4] and s[3]==s[5]):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2]==s[4] and s[5]==s[6]:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[2] == stdin[4] and stdin[5] == stdin[6] else 'No'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    length = len(input_string)\n    third_fourth = input_string[2:length]\n    if input_string[4] == input_string[5]:\n        if input_string[3] == input_string[4]:\n            if third_fourth == third_fourth[0] * 3:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split('\\n')\n    T, N = [int(x) for x in stdin[0].split(' ')]\n    routes = []\n    for i in range(1, len(stdin)):\n        routes.append([int(x) for x in stdin[i].split(' ')])\n\n    routes.sort(key=lambda x: x[1])\n    cost = 0\n    for r in routes:\n        if cost + r[1] <= T:\n            cost += r[1]\n        else:\n            return T\n    return cost\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(n) for n in stdin.split(' ')]\n    c, t = [], []\n    for i in range(N):\n        line = input().split(' ')\n        c.append(int(line[0]))\n        t.append(int(line[1]))\n    return min(filter(lambda x: x <= T, c))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    n, t = map(int, stdin.split(' '))\n    # create an array of tuples containing the cost and the time it takes\n    routes = []\n    for _ in range(n):\n        c, tt = map(int, stdin.split(' '))\n        routes.append((c, tt))\n    # sort the array in decreasing order\n    routes.sort(reverse=True)\n    # initialise the minimum cost\n    min_cost = t\n    # loop over the routes\n    for i in range(n):\n        # if the current route's time is less than the time remaining\n        if routes[i][1] < t:\n            # update the minimum cost\n            min_cost = min(min_cost, routes[i][0])\n            # decrement the remaining time by the current route's time\n            t -= routes[i][1]\n    # if the remaining time is greater than 0\n    if t > 0:\n        # then there is no route that takes not longer than time t\n        print('TLE')\n    # otherwise\n    else:\n        # print the minimum cost\n        print(min_cost)\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 70\n   ... 7 60\n   ... 1 80\n   ... 4 50''')\n    4\n    \"\"\"\n    N, T = map(int, stdin.split())\n    route_costs = []\n    for _ in range(N):\n        route_costs.append(tuple(map(int, stdin.split())))\n    route_costs.sort(key=lambda x: x[1])\n    time = 0\n    cost = 0\n    for c, t in route_costs:\n        if time + t <= T:\n            time += t\n            cost += c\n        else:\n            break\n    return time if time < T else \"TLE\"\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    costs, times = [], []\n    for _ in range(n):\n        c, t_ = list(map(int, stdin.split()))\n        costs.append(c)\n        times.append(t_)\n    \n    costs = sorted(costs)\n    times = sorted(times)\n\n    time = 0\n    cost = 0\n    for i in range(n):\n        time += times[i]\n        cost += costs[i]\n        if time > t:\n            break\n    if time <= t:\n        print(cost)\n    else:\n        print('TLE')"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(x) for x in stdin.split(' ')]\n    routes = []\n    for _ in range(N):\n        c, t = [int(x) for x in stdin.split(' ')]\n        routes.append((c, t))\n    routes.sort(key=lambda x: x[1])\n    cost = 0\n    for c, t in routes:\n        if t > T:\n            return 'TLE'\n        cost += c\n        T -= t\n    return cost\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    routes = []\n    for _ in range(n):\n        routes.append(list(map(int, stdin.split())))\n    routes.sort(key=lambda x: x[1])\n    ans = -1\n    for i in range(n):\n        t -= routes[i][0]\n        if t > 0:\n            ans = routes[i][0]\n    if ans > 0:\n        return ans\n    return 'TLE'\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    if a >= b:\n        return str(a * n)\n    else:\n        return str(a + n * (b - a))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # for the input, split the string in the first line, we get [N, A, B]\n    a = stdin.split(' ')\n    n = int(a[0])\n    a = [int(i) for i in a]\n    # first line in the input is now [N, A, B]\n\n    # store the minimum value of the first and last line\n    first = a[0] * a[1]\n    last = a[2]\n    # store the minimum value of the first and last line\n\n    # now for each number, find the minimum of the first line and the last line\n    for i in range(n - 2):\n        first = min(first, a[i] * a[i + 1])\n        last = min(last, a[n - 2] * a[n - 1])\n    # for each number, find the minimum of the first line and the last line\n\n    # now find the minimum of the two\n    return min(first, last)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # create variable to store each input\n    n, a, b = map(int, stdin.split())\n    # find minimum travel cost\n    travel_cost = min(a * n, b)\n    # print the minimum travel cost\n    print(travel_cost)\n    # return the minimum travel cost\n    return travel_cost"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    return str(min(A*N, B*N))"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    _, A, B = [int(stdin.readline()) for _ in range(3)]\n    print(A * math.ceil(B / A))\n    return \"\""
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = stdin.split()\n    N, A, B = map(int, stdin)\n    print(A * N + B)"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return a * n + b * (n - 1)"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(' ')]\n    return str(min(n*a, n*b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A, B = int(A), int(B)\n\n    if A < B:\n        print(B)\n    else:\n        print(A)\n"
    },
    {
        "number": 4277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, a, b = [int(x) for x in stdin.split()]\n    return n * a + b\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of pairs of integers i, j (1 <= i < j <= len(stdin)) such that stdin[i] is an anagram of stdin[j].\n    >>> solution('acornistnt')\n    1\n    >>> solution('peanutbomb')\n    1\n    >>> solution('constraint')\n    1\n    \"\"\"\n    if len(stdin) == 0:\n        return 0\n    return sum([[i, j] for i in range(1, len(stdin)) for j in range(i + 1, len(stdin) + 1) if sorted(stdin[i - 1]) == sorted(stdin[j - 1])])\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    from collections import Counter\n    words = stdin.split(\"\\n\")[1:]\n    \n    counts = {}\n    for word in words:\n        counts[word] = Counter(word)\n    \n    word1, word2 = words[0], words[1]\n    word3 = words[2]\n    \n    count1 = Counter(word1)\n    count2 = Counter(word2)\n    count3 = Counter(word3)\n    \n    result = 0\n    for key in counts[word1]:\n        if key in counts[word2] and key in counts[word3]:\n            result += count1[key] * count2[key] * count3[key]\n            \n    print(result)\n    \n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... acornistnt\n   ... peanutbomb\n   ... constraint\n   ... ''')\n    '1'\n    \"\"\"\n    pass"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    s = [None] * n\n    for i in range(n):\n        s[i] = stdin[i+1]\n    #print(s)\n    \n    #possible = []\n    \n    possible = {}\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if s[i] == s[j]:\n                count += 1\n        possible[i] = count\n        \n    #print(possible)\n    \n    result = 0\n    for i in range(n):\n        if i!= 0:\n            if possible[i] == possible[i-1]:\n                result += 1\n        else:\n            if possible[i] > 0:\n                result += 1\n    \n    return result\n\nprint(solution(input()))\n    \n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *s_list = map(str, stdin.split('\\n'))\n    N = int(N)\n    s_dict = {}\n    for i in range(N):\n        s_dict[s_list[i]] = i\n\n    s_pairs = 0\n    for i in range(N):\n        s1_anagrams = s_dict[s_list[i]]\n        for j in range(N):\n            s2_anagrams = s_dict[s_list[j]]\n            if s1_anagrams == s2_anagrams:\n                s_pairs += 1\n\n    print(s_pairs)"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # read in all lines and add to list\n    lines = stdin.split('\\n')\n    # remove empty lines\n    lines = list(filter(None, lines))\n    # find the number of lines\n    line_count = len(lines)\n\n    # find number of anagrams\n    anagram_count = 0\n    for line in range(line_count):\n        # create list of words\n        words = lines[line].split()\n        # find number of words\n        word_count = len(words)\n        # print(words)\n        for word in range(word_count):\n            # print('word', word, words[word])\n            # create list of char\n            chars = list(words[word])\n            # remove duplicates\n            chars = list(dict.fromkeys(chars))\n            # print(chars)\n            # sort list\n            chars.sort()\n            # print(chars)\n            # create new string\n            new_string = ''\n            # join list to string\n            for char in chars:\n                new_string += char\n            # print(new_string)\n            # check if the new string is in the rest of the strings\n            # print(new_string)\n            # print(new_string)\n            for line2 in range(line + 1, line_count):\n                # print(line2)\n                # create list of words\n                words2 = lines[line2].split()\n                # find number of words\n                word_count2 = len(words2)\n                # print(words2)\n                for word2 in range(word_count2):\n                    # print('word2', word2, words2[word2])\n                    # create list of char\n                    chars2 = list(words2[word2])\n                    # remove duplicates\n                    chars2 = list(dict.fromkeys(chars2))\n                    # sort list\n                    chars2.sort()\n                    # print(chars2)\n                    # create new string\n                    new_string2 = ''\n                    # join list to string\n                    for char2 in chars2:\n                        new_string2 += char2\n                    # print(new_string2)\n                    # check if the new string is in the rest of the strings\n                    if new_string == new_string2:\n                        # print('YES')\n                        anagram_count += 1\n                    # else:\n                        # print('NO')\n    return anagram_count\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    s_list = [stdin.split()[1] for _ in range(N)]\n\n    s_dict = dict()\n\n    for i, s in enumerate(s_list):\n        key = hash(s)\n        if key in s_dict:\n            s_dict[key].append(i)\n        else:\n            s_dict[key] = [i]\n\n    ans = 0\n\n    for key in s_dict:\n        for i in range(len(s_dict[key])):\n            for j in range(i+1, len(s_dict[key])):\n                ans += 1\n    return ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_strings = int(stdin.readline().strip())\n    strings = []\n    for i in range(num_strings):\n        strings.append(stdin.readline().strip())\n    for i in range(num_strings):\n        if len(strings[i])!= 10:\n            raise ValueError(\"String not valid\")\n        if len(strings[i])!= 10:\n            raise ValueError(\"String not valid\")\n    return num_strings"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return out"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n    # return \"\"\n    return \"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        k = int(stdin.readline().strip())\n        number = 0\n        number = number*10\n        number += k % 10\n        print(number)"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\""
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    roads = [tuple(map(int, i.split())) for i in stdin.split('\\n')[1:-1]]\n    r = 0\n    c = [0] * n\n    while r < n:\n        for i in range(n):\n            if c[i] == 0 and sum(c[j] for j in roads[i]) < k:\n                r += 1\n                c[i] = r\n        for i in range(n):\n            for j in roads[i]:\n                if c[i]!= c[j]:\n                    c[i] = min(c[i], c[j])\n                    c[j] = min(c[i], c[j])\n    print(r)\n    print(*c)\nsolution(stdin)\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    input = stdin.split('\\n')\n    n, k = list(map(int, input[0].split()))\n    edges = []\n    for i in range(1, n):\n        edges.append(list(map(int, input[i].split())))\n    edges = sorted(edges, key=lambda x: x[0])\n    visited = [0] * n\n    visited[0] = 1\n    ans = 0\n    cnt = 0\n    for edge in edges:\n        if not visited[edge[1]]:\n            cnt += 1\n        if cnt > k:\n            break\n        else:\n            ans += 1\n            visited[edge[1]] = 1\n    print(ans)\n    print(' '.join(list(map(str, visited))))\n    return '\\n'.join(input[1:])\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(c, visited):\n        if c > r:\n            return False\n        for i in range(1, n + 1):\n            if i in visited:\n                continue\n            visited.add(i)\n            if G[i][c] == 1:\n                dfs(c + 1, visited)\n            visited.remove(i)\n        return len(visited) <= k\n\n    n, k = [int(s) for s in stdin.split()]\n    G = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for line in stdin.split('\\n')[1:]:\n        x, y = [int(s) for s in line.split()]\n        G[x][y] = 1\n    r = 0\n    while dfs(r, {1}):\n        r += 1\n    return str(r)\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\"\\n\")[0].split(\" \"))\n    roads = []\n    for _ in range(n - 1):\n        roads.append(list(map(int, stdin.split(\"\\n\")[_].split(\" \"))))\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for _ in range(1, n):\n        dp[_][0] = dp[_ - 1][0] + 1\n    for i in range(1, n):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j] + 1\n            for x in roads[i - 1]:\n                if x > j:\n                    break\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - x] + 1)\n    for i in range(n):\n        if dp[i][k]!= 0:\n            return \" \".join(list(map(str, dp[i])))"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.split('\\n')\n    n, k = int(line1[0].split()[0]), int(line1[0].split()[1])\n    roads = [0] * (n + 1)\n    cities = [[]] * (n + 1)\n    for i in range(1, len(line1)):\n        cities[int(line1[i].split()[0])].append(int(line1[i].split()[1]))\n    \n    cities[0] = [i for i in range(1, len(line1))]\n    for i in range(1, len(cities[0]) + 1):\n        roads[cities[0][i]] = i\n    \n    for i in range(1, len(roads)):\n        for j in cities[i]:\n            roads[j] = roads[i]\n    \n    companies = [0] * (n + 1)\n    for i in range(1, len(line1)):\n        companies[int(line1[i].split()[0])] = 1\n        companies[int(line1[i].split()[1])] = 1\n    \n    companies[0] = 1\n    \n    ans = 1\n    for i in range(1, len(companies)):\n        if companies[i] == 0:\n            if i!= 1:\n                ans = i\n                break\n    \n    for i in range(1, len(companies)):\n        if companies[i] == 0:\n            companies[i] = ans + 1\n    \n    for i in range(1, len(companies)):\n        companies[i] = companies[i] - 1\n    \n    return str(ans) + '\\n' +''.join([str(i) for i in companies[1:]])\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    roads = [[int(y) for y in x.split(' ')] for x in stdin.split('\\n')]\n    neighbours = defaultdict(set)\n    for x, y in roads:\n        neighbours[x].add(y)\n        neighbours[y].add(x)\n    \n    good = [0] * (n + 1)\n    companies = []\n    for x, y in roads:\n        good[x] += 1\n        good[y] += 1\n        companies.append(1)\n    \n    ans = n - 1\n    for i in range(1, n + 1):\n        if good[i] < k:\n            ans += 1\n            companies[i - 1] = 2\n    \n    for _ in range(ans):\n        j = 1\n        current = 0\n        while j < n:\n            if current == 0 and len(neighbours[j]) > 1 and j!= 1:\n                current = 1\n            if current == 0:\n                j += 1\n            elif current == 1 and len(neighbours[j]) == 1:\n                companies[j - 1] = 2\n                current = 0\n                j += 1\n            elif current == 1:\n                current = 0\n                j += 1\n        if current == 1:\n            companies[j - 1] = 2\n            current = 0\n    \n    return ans\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    g = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = [int(x) for x in stdin.split()]\n        g[x - 1].append(y - 1)\n        g[y - 1].append(x - 1)\n    \n    g_rev = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = [int(x) for x in stdin.split()]\n        g_rev[x - 1].append(y - 1)\n        g_rev[y - 1].append(x - 1)\n\n    used = [0] * n\n    good = []\n\n    def dfs(u, g, used):\n        used[u] = 1\n        for v in g[u]:\n            if used[v] == 0:\n                dfs(v, g, used)\n        good.append(u)\n\n    for i in range(n):\n        if used[i] == 0:\n            dfs(i, g, used)\n\n    used = [0] * n\n    ans = 0\n    def dfs2(u, g, used, ans):\n        used[u] = 1\n        for v in g[u]:\n            if used[v] == 0:\n                dfs2(v, g, used, ans)\n        if ans >= k:\n            return\n        if len(good) - 1 >= k - ans:\n            return\n        ans += 1\n        good.append(u)\n\n    for i in range(n):\n        if used[i] == 0:\n            dfs2(i, g_rev, used, ans)\n    \n    return str(ans)"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n, k = map(int, stdin.split(\"\\n\")[0].split())\n    cities = [0] * n\n    roads = {i: set() for i in range(1, n + 1)}\n    for road in stdin.split(\"\\n\")[1:-1]:\n        x, y = map(int, road.split())\n        roads[x].add(y)\n        roads[y].add(x)\n        cities[x - 1] += 1\n        cities[y - 1] += 1\n\n    comp_size = {i: set() for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        if cities[i - 1] > k:\n            continue\n        for j in range(1, n + 1):\n            if cities[j - 1] > k:\n                continue\n            if i in roads[j]:\n                comp_size[i].add(j)\n                comp_size[j].add(i)\n    groups = []\n    to_visit = set()\n    for i in range(1, n + 1):\n        if len(comp_size[i]) <= k:\n            groups.append(i)\n            to_visit.add(i)\n    groups.sort()\n    edges = []\n    for i in range(1, n + 1):\n        if len(comp_size[i]) > k:\n            edges.append(i)\n    while len(to_visit):\n        start = to_visit.pop()\n        edges.append(start)\n        for i in comp_size[start]:\n            to_visit.add(i)\n    edges.sort()\n    print(*edges)\n    print(*groups)\n    return \"\"\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. \u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u043e\u0441\u0442\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0435\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u0431\u0435\u0437 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0440\u0430\u0439\u043d\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432.\n    2. \u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0440\u0430\u0439\u043d\u0435\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044e, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u043d \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442.\n    3. \u0412 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c\u0441\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439.\n    4. \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0432\u044b\u0434\u0430\u0439\u0442\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435.\n    5. \u041f\u0440\u0438\u043c\u0435\u0440:\n    \u0412\u0445\u043e\u0434: n = 6, k = 2\n    \u0412\u044b\u0445\u043e\u0434: 3\n    \u0412\u0445\u043e\u0434: n = 10, k = 2\n    \u0412\u044b\u0445\u043e\u0434: 4\n\n    \u0412\u0430\u0440\u0438\u0430\u043d\u0442 1. \u0421\u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0433\u0440\u0430\u0444\u0430, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0438.\n    \u0412\u0430\u0440\u0438\u0430\u043d\u0442 2. \u041e\u0441\u0442\u0430\u0442\u044c\u0441\u044f \u0432 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0435\u043c \u043e\u0442\u0440\u0435\u0437\u043a\u0435.\n    \u0412\u0430\u0440\u0438\u0430\u043d\u0442 3. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439.\n    \u0412\u0430\u0440\u0438\u0430\u043d\u0442 4. \u0421\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(idx):\n        if dp[idx]!= 0:\n            return dp[idx]\n        dp[idx] = 1\n        for i in range(n):\n            if G[idx][i] == 1 and dp[i] == 0:\n                dp[idx] = max(dp[idx], dfs(i) + 1)\n        return dp[idx]\n\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    G = [[0] * n for _ in range(n)]\n    for i in range(n - 1):\n        x, y = map(int, stdin.split('\\n')[i + 1].split(' '))\n        G[x - 1][y - 1] = 1\n        G[y - 1][x - 1] = 1\n\n    dp = [0] * n\n    ans = 0\n    for i in range(n):\n        if dp[i] == 0:\n            ans = max(ans, dfs(i))\n    print(ans)\n    return\n\n\nsolution(stdin=input())\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You have to move the house of all your friends in the same way, which is, to the left or to the right.\n    Also, you can move only once.\n    \"\"\"\n    # Your code here\n    return 0\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, sol))"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n-----Test Data-----\n\n3\n2 1 3\n\n2\n0 1\n\n4\n1 1 1 1\n\n-----Explanation-----\n\nIn the first example the answer is $2$. We can only make the following moves:\n\n1) Friend 1 moves to $1+1 = 2$\n2) Friend 2 moves to $2 = x_2$\n3) Friend 3 stays in his house $x_3$\n4) Friend 4 stays in his house $x_4$\n\nIn the second example the answer is $3$. We can make the following moves:\n\n1) Friend 1 moves to $0+1 = 1$\n2) Friend 2 moves to $x_2 = 1$\n3) Friend 3 moves to $x_3+1 = 3$\n4) Friend 4 moves to $x_4+1 = 4$\n5) Friend 5 moves to $x_5+1 = 5$\n6) Friend 6 moves to $x_6+1 = 6$\n7) Friend 7 moves to $x_7+1 = 7$\n8) Friend 8 stays in his house $x_8$\n9) Friend 9 stays in his house $x_9$\n\nIn the last example the answer is $3$. We can make the following moves:\n\n1) Friend 1 moves to $x_1+1 = 2$\n2) Friend 2 stays at his house $x_2$\n3) Friend 3 moves to $x_3+1 = 4$\n4) Friend 4 stays in his house $x_4$\n5) Friend 5 moves to $x_5+1 = 6$\n6) Friend 6 stays in his house $x_6$\n7) Friend 7 moves to $x_7+1 = 8$\n8) Friend 8 stays in his house $x_8$\n9) Friend 9 stays in his house $x_9$\n\nSo in total there are $2 + 3 + 3 + 4 + 6 + 6 + 7 + 8 + 9 = 20$ occupied houses in the last example.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get number of friends and array of coordinates.\n    Iterate through the array of coordinates and do 3 checks:\n    1. check if it is possible to move to the left or right (to left is positive and to right is negative)\n    2. check if the house in the next position is occupied\n    3. if the move is possible then make the move\n    \"\"\"\n    n = int(stdin.readline())\n    houses = list(map(int, stdin.readline().split(' ')))\n    houses_set = set(houses)\n    houses_set.discard(0)\n    houses_set.discard(n + 1)\n\n    min_occupied = float('inf')\n    max_occupied = 0\n    for house in houses_set:\n        left = house - 1\n        right = house + 1\n        occupied = 0\n        for num in houses:\n            if num == left:\n                occupied += 1\n            elif num == right:\n                occupied += 1\n        min_occupied = min(min_occupied, occupied)\n        max_occupied = max(max_occupied, occupied)\n    return min_occupied, max_occupied\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns the minimum and maximum possible number of occupied houses after all moves are performed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return\n    ------\n    \"min\" if the number of occupied houses is the minimum possible number of occupied houses\n    \"max\" if the number of occupied houses is the maximum possible number of occupied houses\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 1 2 4 4\n   ... ''')\n    2 4\n    \"\"\"\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    return str(min(solve(n, x), solve(n, x[::-1])))\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 4 4\\n\")\n    '2 4'\n    >>> solution(\"9\\n1 1 8 8 8 4 4 4 4\\n\")\n    '3 8'\n    >>> solution(\"7\\n4 3 7 1 4 3 3\\n\")\n    '3 6'\n    \"\"\"\n\n    # friend_n, house_n = map(int, stdin.split())\n    friend_n = int(stdin.split()[0])\n    houses = list(map(int, stdin.split()[1:]))\n\n    occupied_houses = set()\n    cur_pos = 0\n    max_occupied_houses = 0\n    min_occupied_houses = float(\"inf\")\n\n    while cur_pos not in occupied_houses:\n        occupied_houses.add(cur_pos)\n        cur_pos += 1\n        if cur_pos in houses:\n            cur_pos += 1\n\n        max_occupied_houses = max(max_occupied_houses, len(occupied_houses))\n        min_occupied_houses = min(min_occupied_houses, len(occupied_houses))\n\n    return str(min_occupied_houses), str(max_occupied_houses)\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    for i in range(n):\n        if p[i] == i + 1:\n            p[i] = n\n            n -= 1\n    return''.join([str(i) for i in p])\n\nsolution(input())\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    kids = int(stdin.readline())\n    for _ in range(kids):\n        a, b = map(int, stdin.readline().split())\n        print(b, a)\n    return \"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n')[1:])\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    kids = int(stdin)\n    d = defaultdict(list)\n    for _ in range(kids):\n        a, b = map(int, stdin.split(' '))\n        d[a].append(b)\n        d[b].append(a)\n    ans = []\n    for k in d:\n        if len(d[k]) > 1:\n            for i in range(1, kids):\n                if d[k][i] == i:\n                    ans.append(i)\n                    break\n    ans =''.join(map(str, ans))\n    return ans\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip('\\n'))\n    perm = [int(x) for x in stdin.readline().strip('\\n').split()]\n    res = []\n    for x in perm:\n        if len(res) < n:\n            res.append(x)\n            if x in res:\n                res.append(res[res.index(x) - 1])\n    return''.join([str(x) for x in res])\n\nsolution(\"5\\n3 5\\n1 4\\n2 4\\n1 5\\n2 3\\n\")"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    a = [int(x) for x in stdin.read().split()]\n    ans = [0] * size\n    for i in range(size):\n        ans[a[i]] = i + 1\n    print(*ans)"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = [int(i) for i in stdin.readline().split()]\n    j = [int(i) for i in stdin.readline().split()]\n    l = [int(i) for i in stdin.readline().split()]\n    a = []\n    for i in range(n):\n        a.append([m[i],j[i]])\n    a = sorted(a)\n    s = []\n    for i in a:\n        if i[0] not in s:\n            s.append(i[0])\n    for i in range(1,n+1):\n        if i not in s:\n            s.append(i)\n    return''.join([str(i) for i in s])\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    kids = list(map(int, stdin.split()))\n    for i in range(len(kids)):\n        kids[i] = kids[i-1]\n    print(*kids)"
    },
    {
        "number": 4282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if len(a) == 2:\n        return 1\n    s = 0\n    e = len(a) - 1\n    while e - s > 1:\n        if abs(a[s] - a[e]) <= 5:\n            e -= 1\n        else:\n            s += 1\n    return e - s + 1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    pass\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '3'\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.readline())\nl = list(map(int, stdin.readline().split()))\nd = [abs(a - b) for a, b in zip(l, l[1:])]\nd.sort()\n\nimport math\nreturn math.ceil(n / 2) - 1 if d[0] > 5 else math.ceil(n / 2)\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    students = [int(stdin) for stdin in stdin.split()]\n    students.sort()\n    res = 1\n    for i in range(1, n):\n        if students[i] - students[i - 1] <= 5:\n            res += 1\n        else:\n            break\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    stdin = stdin.readline().split(\" \")\n    arr = [int(i) for i in stdin]\n\n    if n == 1:\n        print(1)\n        return\n\n    arr.sort()\n    if n % 2 == 0:\n        print(n)\n        return\n\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] <= 5:\n            continue\n        else:\n            print(i + 1)\n            return\n\n\nsolution(\"3 3 7 8\")\n"
    },
    {
        "number": 4283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    l.sort()\n    ans = 0\n    for i in range(n - 1):\n        if l[i + 1] - l[i] > 5:\n            ans += 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.readline().split())\n        if n % 2 == 0:\n            if (n * k) <= (a + b):\n                print(n // 2)\n            else:\n                print(-1)\n        else:\n            if (n * k) <= (a + b):\n                print(n // 2)\n            else:\n                print(-1)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the maximum number of turns Vova can play to complete the game\n    '''\n    # your code here\n    return \"\""
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, n, a, b = map(int, stdin.split('\\n')[0].split())\n    max_turns = 0\n    for i in range(n):\n        k = k - a + b\n        if k <= 0:\n            return str(i + 1)\n        max_turns = i + 1\n    return '-1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Vova is playing a computer game. There are in total n turns in the game. The initial charge of Vova's laptop battery (i.e. the charge before the start of the game) is k.\n    \n    During each turn Vova can choose what to do:   If the current charge of his laptop battery is strictly greater than a, Vova can just play, and then the charge of the laptop battery will decrease by a;  if the current charge of his laptop battery is strictly greater than b, Vova can play and charge his laptop, and then the charge of the laptop battery will decrease by b;  if the current charge of his laptop battery is less than or equal to a and b at the same time then Vova cannot do anything and loses the game. \n    \n    Regardless of Vova's turns the charge of the laptop battery is always decreases.\n    \n    Vova wants to complete the game (Vova can complete the game if after each of n turns the charge of the laptop battery is strictly greater than 0). Vova has to play exactly n turns. Among all possible ways to complete the game, Vova wants to choose the one where the number of turns when he just plays is the maximum possible. It is possible that Vova cannot complete the game at all.\n    \n    Your task is to find out the maximum possible number of turns Vova can just play (make the first type turn) or report that Vova cannot complete the game.\n    \n    You have to answer q independent queries.\n    \n    >>> solution('''15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3''')\n    4\n    \n    >>> solution('''7 3 4 1\n   ... 7 3 2 1\n   ... 7 3 4 1\n   ... 7 3 2 1\n   ... 7 3 4 1\n   ... 7 3 2 1\n   ... 7 3 4 1''')\n    -1\n    \n    >>> solution('''5 6 3 1\n   ... 5 6 3 1\n   ... 5 6 3 1\n   ... 5 6 3 1\n   ... 5 6 3 1\n   ... 5 6 3 1''')\n    -1\n    \n    >>> solution('''10 9 1 1\n   ... 10 9 1 1\n   ... 10 9 1 1\n   ... 10 9 1 1\n   ... 10 9 1 1\n   ... 10 9 1 1\n   ... 10 9 1 1\n   ... 10 9 1 1\n   ... 10 9 1 1\n   ... 10 9 1 1\n   ... 10 9 1 1''')\n    10\n    \n    >>> solution('''15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4\n   ... 15 5 7 4''')\n    15\n    \n    >>> solution('''15 5 3 2\n   ... 15 5 4 3\n   ... 15 5 2 1\n   ... 15 5 5 1\n   ... 16 7 5 2\n   ... 20 5 7 3''')\n    4\n    \"\"\"\n   ..."
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    res = []\n    for _ in range(q):\n        k, n, a, b = [int(x) for x in stdin.readline().split()]\n        if a > k:\n            res.append(-1)\n        elif b < a:\n            res.append(n)\n        elif k < b:\n            res.append(0)\n        elif k > a + b:\n            res.append(n)\n        else:\n            res.append(n - (k - a + 1))\n\n    print('\\n'.join([str(r) for r in res]))\n\n    return ''\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    'Task #1'\n    # your solution\n    return 'Hello'"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    'get n (1 <= n <= 10^9) and k (1 <= k <= 10^9)'\n    n, k, a, b = map(int, stdin.split())\n    if k * (a + b) > n:\n        return '-1'\n    return n - k * (a + b)\n\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(output)\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    s = stdin.readline().strip()\n    cnt = 0\n    for i in range(3**(a-s.count('?'))):\n        cnt = (cnt + 1) % (10**9+7)\n    return str(cnt)"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Carry out the computation of the solution\n    Arguments:\n        stdin -- The input read from the standard input\n    Returns:\n        The output string that should be printed to the standard output\n    '''\n    # Write your code here\n    \n    n = int(stdin)\n    s = stdin.replace('?', 'abc')\n    a = [i for i in range(len(s)) if s[i] == '?']\n    m = (3 ** len(a)) % 1000000007\n    for i in range(len(s)):\n        if s[i] == '?':\n            s = s[:i] + 'abc' + s[i+1:]\n    s = s.replace('?', 'ab')\n    s = s.replace('b', 'c')\n    s = s.replace('a', 'b')\n    m *= 3\n    m %= 1000000007\n    print(m)\n    return s\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    modulo = 1000000000 + 7\n    arr = stdin.split(\"?\")\n    return (\n        (3 ** (len(arr[0]) - 1))\n        * (\n            (3 ** (len(arr[0]) - 1))\n            * 2\n            + 2\n            + (3 ** (len(arr[0]) - 1))\n            + (3 ** (len(arr[0]) - 2))\n            + (3 ** (len(arr[0]) - 2))\n        )\n        % modulo\n    )"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    counts all \"abc\" in input string\n    '''\n    # TODO: your code here\n    return 0\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each question mark, we can add any character to it or replace it with any of the characters \"a\", \"b\" or \"c\"\n    \"\"\"\n    a_count = stdin.count('a')\n    b_count = stdin.count('b')\n    c_count = stdin.count('c')\n    return a_count * b_count * c_count % (10 ** 9 + 7)\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(n)\n    space: O(n)\n    '''\n    n = int(stdin)\n    s = stdin.split('?')\n    count = 0\n    for i in range(1, n+1):\n        s_new = []\n        for c in s:\n            s_new.append(c.replace('?', str(i), 1))\n        count += nC3(s_new)\n    return str(count % (10**9 + 7))\n\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(3^k)\n    Space complexity: O(n)\n    \"\"\"\n    length = len(stdin)\n    ans = 0\n    for i in range(1, length):\n        ans += 9 * i\n\n    for i in range(1, length):\n        ans -= 9 * i\n        ans += 3 * (i ** 2)\n\n    for i in range(1, length):\n        ans += 3 * (i ** 2)\n\n    return ans % (10 ** 9 + 7)\n"
    },
    {
        "number": 4285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"cccbbbaaa\")\n    24\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    if N < 2:\n        return 0\n    if M == 0:\n        return 0\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    ans = 0\n    for i in range(1, N):\n        ans += (A[i] - A[i - 1]) * (i + 1)\n    return ans + 1\n\"\"\"\nimport sys\nimport heapq\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_cost(edges):\n        cost = 0\n        for u, v, w in edges:\n            cost += abs(u - v) * w\n        return cost\n\n    n, m = list(map(int, stdin.split()))\n    vertices = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n\n    if n <= 1:\n        print(0)\n    else:\n        edges.sort(key=lambda x: abs(x[0] - x[1]))\n        cost = calculate_cost(edges)\n        print(cost)\n\n\nsolution(input())\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n\"\"\"\n\n\nfrom sys import stdin\nimport heapq\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom sys import stdin\n\nn, m = [int(x) for x in stdin.readline().split()]\n\ngraph = {}\nfor _ in range(n):\n    graph[_] = []\n\nfor _ in range(m):\n    x, y, z = [int(x) for x in stdin.readline().split()]\n    graph[x].append((y, z))\n    graph[y].append((x, z))\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    l = [[int(x) for x in stdin.split(' ')] for _ in range(m)]\n    l = [i for i in l if i[0]!= i[1]]\n    l.sort(key=lambda x: x[2], reverse=True)\n    s = sum([i[2] for i in l])\n    g = [[] for _ in range(n)]\n    for i in l:\n        g[i[0] - 1].append(i[1])\n        g[i[1] - 1].append(i[0])\n    if n == 1:\n        return 0\n    if n == 2:\n        return s\n    if not has_path(g):\n        return s + 1\n    p = []\n    g.sort(key=lambda x: len(x))\n    for i in g[0]:\n        if not p:\n            p.append(i)\n        else:\n            if i not in p:\n                p.append(i)\n    p = [i for i in p if i!= 1]\n    return s + (p[0] - 1)\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    What is the minimum number of coins you have to spend to make the graph connected?\n    \"\"\"\n\n    n, m = (int(x) for x in stdin.split())\n    a = sorted(map(int, stdin.split()))\n    edges = {i: a[i] for i in range(n)}\n\n    for _ in range(m):\n        x, y, w = (int(x) for x in stdin.split())\n        edges[x] += w\n        edges[y] += w\n\n    return max(edges.values())\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = list(map(int, lines[0].split(' ')))\n    edges = [(int(x), int(y), int(z)) for x, y, z in [line.split(' ') for line in lines[1:]]]\n\n    print(m, n, edges)"
    },
    {
        "number": 4286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n-----\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    l = [int(x) for x in stdin.split('\\n')[1:n + 1]]\n    r = [int(x) for x in stdin.split('\\n')[n + 1:n + m + 1]]\n    p = [int(x) for x in stdin.split('\\n')[n + m + 1:]]\n\n    # def is_ok(x: int) -> bool:\n    #     return all(x >= l_i and x <= r_i for l_i, r_i in zip(l, r))\n\n    # if not is_ok(0):\n    #     print('-1')\n    #     return\n    # i = 0\n    # k = 0\n    # while i < len(l):\n    #     if not is_ok(i):\n    #         i += 1\n    #         continue\n    #     j = i + 1\n    #     while j < len(l) and is_ok(j):\n    #         j += 1\n    #     k += (j - i) * p[i]\n    #     i = j\n    # print(k)\n\n    # dp = [0] * (a + 1)\n    # for i in range(n):\n    #     for j in range(l[i], r[i] + 1):\n    #         dp[j] = max(dp[j], dp[j - l[i]] + p[i])\n    # print(dp[-1])\n\n    # a = [0] * (a + 1)\n    # for i in range(n):\n    #     if r[i] - l[i] + 1 > a[l[i]] + p[i]:\n    #         a[l[i]] = p[i]\n    #         for j in range(l[i] + 1, r[i] + 1):\n    #             a[j] = max(a[j], a[j - 1] + p[i])\n    #     else:\n    #         a[r[i]] = max(a[r[i]], a[r[i] - 1] + p[i])\n    # print(a[-1])\n\n    # def dp(i: int, k: int) -> int:\n    #     if i >= n:\n    #         return k\n    #     if k >= dp(i + 1, 0):\n    #         return dp(i + 1, k)\n    #     return max(dp(i + 1, k), dp(i + 1, k - a[l[i]] + p[i]) + p[i])\n\n    # print(dp(0, 0))\n\n    # a = [0] * (a + 1)\n    # for i in range(n):\n    #     for j in range(l[i], r[i] + 1):\n    #         a[j] = max(a[j], a[j - 1] + p[i])\n    # print(a[-1])\n\n    def dp(i: int, k: int) -> int:\n        if i >= n:\n            return k\n        if k >= dp(i + 1, 0):\n            return dp(i + 1, k)\n        return max(dp(i + 1, k), dp(i + 1, k - a[l[i]] + p[i]) + p[i])\n\n    print(dp(0, 0))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    \n    rain = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        rain.append([l, r])\n    \n    umbrellas = []\n    for i in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append([x, p])\n    \n    max_l = max(l for l, _ in rain)\n    max_r = max(r for _, r in rain)\n    \n    dp = [float('inf')] * (max_r + 1)\n    dp[0] = 0\n    \n    for l, r in rain:\n        for i in range(max_l, r):\n            dp[i] = min(dp[i], dp[i - l] + sum([x[1] for x in umbrellas if x[0] <= i and i < x[1]]))\n    \n    if dp[-1] == float('inf'):\n        return \"-1\"\n    return dp[-1]\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split(' '))\n    rain = []\n    for _ in range(n):\n        left, right = map(int, stdin.split(' '))\n        rain.append((left, right))\n    umbrellas = []\n    for _ in range(m):\n        x, weight = map(int, stdin.split(' '))\n        umbrellas.append((x, weight))\n\n    # print(rain)\n    # print(umbrellas)\n    pos = 1\n    cur_umbrellas = 0\n    min_f = 0\n    for x, weight in umbrellas:\n        while rain[0][0] <= pos < rain[0][1]:\n            min_f += cur_umbrellas * weight\n            # print(f'min_f: {min_f}')\n            cur_umbrellas += 1\n            if cur_umbrellas > 1:\n                # print(f'cur_umbrellas: {cur_umbrellas}')\n                cur_umbrellas -= 1\n                min_f -= weight\n                break\n            # print(f'x: {x}, rain[0][0]: {rain[0][0]}, pos: {pos}, rain[0][1]: {rain[0][1]}')\n            pos += 1\n            if x <= pos:\n                # print(f'x: {x}, pos: {pos}, rain[0][0]: {rain[0][0]}, rain[0][1]: {rain[0][1]}')\n                cur_umbrellas += 1\n                min_f += weight\n                break\n            if x >= pos:\n                # print(f'x: {x}, pos: {pos}, rain[0][0]: {rain[0][0]}, rain[0][1]: {rain[0][1]}')\n                cur_umbrellas -= 1\n                min_f -= weight\n                break\n        # print(f'x: {x}, pos: {pos}, rain[0][0]: {rain[0][0]}, rain[0][1]: {rain[0][1]}')\n        # print(f'cur_umbrellas: {cur_umbrellas}')\n        pos = x\n        if x == a:\n            min_f += cur_umbrellas * weight\n            # print(f'min_f: {min_f}')\n            # print(f'cur_umbrellas: {cur_umbrellas}')\n            return min_f\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import islice\n    a, n, m = list(map(int, stdin.split()))\n    \n    # If there is only one umbrella, it is possible to make a route without umbrellas\n    if n == 1:\n        return \"-1\"\n\n    # In order to make a route without umbrellas, we have to wait and take them\n    # at some point in the route\n    if m == 1:\n        return n * (n-1) // 2\n    \n    # We are going to iterate over all possible combinations of umbrellas\n    # and at each step we are going to minimize the total time that\n    # will be needed to travel the route with the given combination of\n    # umbrellas\n    res = float(\"inf\")\n    for i in range(n):\n        start = i\n        end = a - 1 - i\n        for j in range(start, end):\n            # For each combination of umbrellas we calculate the total\n            # time of the route that will be needed to travel it with\n            # the given combination of umbrellas\n            res = min(res, end-start)\n    return str(res)\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    lst = []\n    for _ in range(n):\n        lst.append(list(map(int, stdin.split())))\n    \n    lst = sorted(lst, key=lambda x: x[0])\n    curr = 0\n    total = 0\n    for t in range(m):\n        l, r = lst[t]\n        if curr <= l:\n            total += r - curr\n            curr = r\n    if curr < a:\n        return \"-1\"\n    return total\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = [int(x) for x in stdin.split()]\n    a, n, m = a // 2, a + 1, m + 1\n    r = [int(x) for x in stdin.split('\\n')[:n]]\n    r = [[r[i], r[i + 1]] for i in range(0, len(r), 2)]\n    r.sort()\n    p = [int(x) for x in stdin.split('\\n')[n:n + m]]\n    p = [[p[i], p[i + 1]] for i in range(0, len(p), 2)]\n    p.sort()\n    ans = float(\"-inf\")\n    i = 0\n    for x, w in r:\n        ans = max(ans, x * w)\n        while p and p[i][0] <= x:\n            ans = max(ans, p[i][0] * p[i][1])\n            p.pop(i)\n            i = 0 if i == len(p) else i\n        i += 1\n    return '-1' if ans == float('-inf') else ans\n"
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    l, r = [int(x) for x in stdin.split('\\n')[1].split()]\n    # x, p = [int(x) for x in stdin.split('\\n')[2].split()]\n    umbrellas = {}\n    for i in range(n):\n        start, end, weight = [int(x) for x in stdin.split('\\n')[i + 2].split()]\n        umbrellas[start] = umbrellas.get(start, 0) + weight\n        umbrellas[end] = umbrellas.get(end, 0) - weight\n    if a % 2!= 0:\n        return -1\n    start, end = a // 2, a // 2 + 1\n    result = 0\n    while end < a + 1:\n        if start not in umbrellas:\n            umbrellas[start] = umbrellas.get(start, 0) + umbrellas.get(end, 0)\n        else:\n            result += umbrellas[start]\n            if start == 0:\n                result += umbrellas[start]\n            else:\n                result += umbrellas[end] - umbrellas[start]\n            start, end = start + 1, end + 1\n    return result"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if a == b or b == c or c == a:\n        return 'Yes'\n    return 'No'\n\ndef"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if (a, c) == (b, b) else \"No\"\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    if A == B or A == C or B == C:\n        if A == B and B!= C:\n            return \"Yes\"\n        elif A == C and C!= B:\n            return \"Yes\"\n        elif B == C and C!= A:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    return \"Yes\" if a!= b and a!= c and b!= c else \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c = [int(x) for x in stdin.split()]\n  return \"Yes\" if a == b or a == c or b == c else \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or A == C or B == C:\n        if B!= A and B!= C:\n            return \"Yes\"\n        return \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(' ')]\n    if a == b or a == c or b == c:\n        if a!= b and a!= c and b!= c:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = (int(n) for n in stdin.split())\n    return 'Yes' if (A == B or A == C or B == C) and A!= B and A!= C and B!= C else 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if a < b and b < c:\n        return \"Yes\"\n    elif a > b and b > c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b or a == c or b == c:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    maximum = 0\n    for i in range(cases):\n        temp = int(stdin.readline())\n        elevation = list(map(int, stdin.readline().split()))\n        avg = 0\n        for elevation_value in elevation:\n            avg += (temp - elevation_value) * 0.006\n        if abs(avg) > maximum:\n            maximum = abs(avg)\n    return str(elevation.index(min(elevation, key=lambda x: abs(x - max(elevation, key=lambda x: abs(x - temp)) * 0.006))))\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t, a = stdin.split('\\n')\n    t, a = int(t), int(a)\n    h = list(map(int, stdin.split()))\n    d = {}\n    for i in range(len(h)):\n        d[h[i]] = i\n    t_to_key = {}\n    for key, value in d.items():\n        t_to_key[key] = abs(t - key * 0.006)\n    t_to_key = dict(sorted(t_to_key.items(), key=lambda x: x[1]))\n    for key, value in t_to_key.items():\n        if value == a:\n            return str(value)\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"No solution\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nT = int(stdin.readline())\nA = int(stdin.readline())\nH = [int(x) for x in stdin.readline().split()]\n\nimport bisect"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    data = stdin.split('\\n')\n    m = int(data[0])\n    a = int(data[1])\n    arr = [int(x) for x in data[2].split(' ')]\n    arr = arr[:m]\n    n = len(arr)\n    arr.sort()\n    min_diff = arr[-1] - arr[0]\n    for i in range(n):\n        temp = arr[i] - a*0.006\n        if temp < 0:\n            continue\n        if temp == 0:\n            return i\n        if temp < min_diff:\n            min_diff = temp\n            res = i\n    return res"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, *h = [int(x) for x in stdin.split('\\n')[0].split()]\n    h = [int(x) for x in stdin.split('\\n')[2].split()]\n    return [int(min(h, key=lambda x: abs(a - x * 0.006)))][0]\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n,a,h] = [int(x) for x in stdin.split()]\n    dist = [abs(h_i - a*0.006) for h_i in h]\n    return \" \".join(map(str, [dist.index(min(dist))+1]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get number of places\n    n = int(stdin.readline())\n    # get minimum temperature\n    min_temp = float(stdin.readline())\n    # get highest temperature\n    max_temp = float(stdin.readline())\n    # get heights\n    heights = [int(height) for height in stdin.readline().split()]\n    # get the difference between each place\n    differences = []\n    for i in range(n):\n        differences.append(abs(heights[i] - (min_temp * 0.006)))\n\n    # get the index of the lowest difference\n    index = differences.index(min(differences))\n\n    # return the index\n    return str(index + 1)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(N)\n    \"\"\"\n    n, m = map(int, stdin.split())\n    even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    for i in range(1, m + 1):\n        if i % 2 == 0:\n            even -= 1\n        else:\n            odd -= 1\n    return odd + even\n    \n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split(' '))\n    return str(bin(M - N).count('1'))"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solutions to the given problem\"\n    n, m = map(int, stdin.split())\n    if (n + m) % 2:\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    count = 0\n    if n % 2 == 0:\n        count += 1\n    if m % 2 == 1:\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    ans = 0\n    for i in range(n+m):\n        for j in range(n+m):\n            if i < n and j >= n:\n                ans += 1\n            elif i >= n and j < n:\n                ans += 1\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m = [int(x) for x in stdin.strip().split(\" \")]\n\n    # check constraints\n    if n < 2 or n > 100 or m < 2 or m > 100:\n        raise ValueError(\"Incorrect input\")\n    if m + n <= 3:\n        return 0\n\n    # initialize output\n    output = 0\n\n    # iterate through all possible sums\n    for i in range(n+m):\n        for j in range(i+1, n+m):\n            # if the sum is even, then we add to the output\n            if (i+j) % 2 == 0:\n                output += 1\n\n    return output"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split(\" \"))\n    \n    # No. of ways to select n balls from m balls\n    # == number of ways to select m balls from n balls \n    # == number of ways to select n+m balls from n+m balls\n    # == number of ways to select n+m balls from 2*n+m balls\n    # == number of ways to select 2*n+m balls from 3*n+m balls\n    # ==...\n    # ==...\n\n    # We are counting the number of ways to select 2n+m balls \n    # from 3n+2m balls. We know that the total number of ways is the\n    # same as the total number of ways to select n+m balls from 2*n+m balls.\n\n    return str(solution_n_m(n,m))\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = [int(x) for x in stdin.split()]\n    count = 0\n    for x in range(1,N+1):\n        for y in range(1,M+1):\n            if (x+y) % 2 == 0:\n                count += 1\n    return str(count)\n    '''\n\n    N, M = [int(x) for x in stdin.split()]\n\n    return str(sum(1 for x in range(N) for y in range(M) if (x+y) % 2 == 0))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    # Write your code here\n    pass"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get number of queries, N, and queries, Q\n    N, Q = [int(s) for s in stdin.split(' ')]\n    \n    # initialize a list of lists of answers\n    answers = []\n    \n    for _ in range(Q):\n        # get left and right bounds on a query\n        left, right = [int(s) for s in stdin.split(' ')]\n        \n        # get the substring between left and right bounds\n        substring = stdin[left - 1: right]\n        \n        # count the number of times the substring occurs in S\n        answers.append(substring.count('AC'))\n    \n    # print each answer in answers\n    for i in answers:\n        print(i)"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the HackerRank Python Practice problem.\n\n    Args:\n        stdin (str): Standard input of the problem.\n\n    Returns:\n        str: Output of the problem.\n    \"\"\"\n    import re\n\n    # Read input\n    args = stdin.split('\\n')\n    n, q = int(args[0].split(' ')[0]), int(args[0].split(' ')[1])\n    s = args[1]\n\n    # Count how many times AC occurs\n    for _ in range(q):\n        l, r = int(args[2 + _ * 2].split(' ')[0]), int(args[2 + _ * 2].split(' ')[1])\n        s_sub = s[l - 1: r]\n        count = 0\n        for _s_sub in s_sub:\n            if _s_sub == 'AC':\n                count += 1\n\n        print(count)\n\n    return ''\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string, N, Q = stdin.split('\\n')[1:4]\n    S = [c for c in string]\n    l, r = [int(i) for i in stdin.split('\\n')[4:6]]\n    for i in range(Q):\n        l, r = [int(i) for i in stdin.split('\\n')[6 + i * 2:8 + i * 2]]\n        print(S[l-1:r].count('AC'))"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.strip()\n    N, Q = [int(i) for i in text.split(\" \")]\n    patterns = [text[i:j] for i in range(N) for j in range(i + 1, N + 1)]\n    counts = Counter(patterns)\n\n    results = []\n    for q in range(Q):\n        l, r = [int(i) for i in stdin.strip().split(\" \")]\n        count = counts[text[l:r]]\n        results.append(str(count))\n    return \"\\n\".join(results)"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of occurrences of a character in a string\"\"\"\n    line_1 = stdin.readline().strip().split()\n    N, Q = int(line_1[0]), int(line_1[1])\n    S = stdin.readline().strip()\n    indexes = [int(stdin.readline().strip()) for _ in range(Q)]\n    chars = [stdin.readline().strip() for _ in range(Q)]\n    res = []\n    for i, j in indexes:\n        count = 0\n        for k in range(i-1, j):\n            if S[k] == chars[count % Q][0]:\n                count += 1\n        res.append(count)\n    return '\\n'.join([str(x) for x in res])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Tr\u1ea3 v\u1ec1 \u00fd t\u01b0\u1edfng cho stdin theo format xu\u1ea5t ra\n\n    Args:\n        stdin (str): c\u00e2u truy v\u1ea5n \u0111\u1ea7u v\u00e0o\n\n    Returns:\n        str: \u00fd t\u01b0\u1edfng cho c\u00e2u truy v\u1ea5n \u0111\u1ea7u v\u00e0o\n    \"\"\"\n    N, Q = [int(x) for x in stdin.split(\" \")]\n    s = stdin.split(\"\\n\")[1]\n    answers = []\n\n    for i in range(Q):\n        l, r = [int(x) for x in stdin.split(\"\\n\")[i + 2].split(\" \")]\n        substring = s[l - 1:r]\n        answers.append(s.count(substring))\n\n    return \"\\n\".join([str(x) for x in answers])\n\nsolution(stdin)\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8 3\n   ... ACACTACG\n   ... 3 7\n   ... 2 3\n   ... 1 8''')\n    '2\\n0\\n3'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, q = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n\n    # save the output to a list\n    res = list()\n    for _ in range(q):\n        l, r = map(int, stdin.readline().split())\n        res.append(s[l-1:r].count(\"AC\"))\n\n    # print output\n    print(*res, sep=\"\\n\")\n\n    return \"\""
    },
    {
        "number": 4291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    This function is given a string S of length N consisting of A, C, G and T. Answer the following Q queries:\n    - Query i (1 \\leq i \\leq Q): You will be given integers l_i and r_i (1 \\leq l_i < r_i \\leq N). Consider the substring of S starting at index l_i and ending at index r_i (both inclusive). In this string, how many times does AC occurs as a substring?\n\n    Args:\n        stdin: The standard input.\n\n    Returns:\n        The answer to the Q queries.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum possible price of a collection of fruits\"\"\"\n    N, K = [int(n) for n in stdin.split(' ')]\n    price = [int(n) for n in stdin.split(' ')]\n    price.sort()\n    price_sum = 0\n    for i in range(K):\n        price_sum += price[i]\n    return price_sum"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split()\n    price_list = [int(i) for i in stdin.split()]\n    return sum(sorted(price_list)[0:k])\n\nprint(solution('5 3\\n50 100 80 120 80'))\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the minimum possible price.\n    >>> solution(\"5 3\\n50 100 80 120 80\\n\")\n    210\n    \"\"\"\n    n, k = map(int, stdin.split())\n    prices = [int(n) for n in stdin.split()]\n    return sum([min(prices[:k]) for _ in range(n)])\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nn, k = input().strip().split(' ')\nn, k = [int(n), int(k)]\nprice_list = [int(price) for price in input().strip().split(' ')]\n\nmin_price = sum(price_list[:k])\n\nfor i in range(len(price_list) - k + 1):\n    min_price = min(min_price, sum(price_list[i : i + k]))\n\nprint(min_price)\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #create a list of strings from the input\n    input_list = stdin.split()\n\n    #first element is N, the number of fruits\n    N = int(input_list[0])\n    #the second element is K, the number of chosen fruits\n    K = int(input_list[1])\n    #the next K elements are the prices of the chosen fruits\n    prices = list(map(int, input_list[2:]))\n\n    #calculate the minimum price for a single fruit\n    price_single_fruit = min(prices)\n\n    #calculate the minimum price for all K fruits\n    total_price = sum([price_single_fruit for i in range(K)])\n\n    #calculate the minimum price for N-K fruits\n    total_price += sum(prices[K:])\n\n    #return the minimum price for the entire order\n    return total_price\n\"\"\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, k = [int(i) for i in stdin.split()]\n  prices = [int(i) for i in stdin.split()]\n  prices.sort()\n  result = 0\n  for i in range(k):\n    result += prices[i]\n  return str(result)\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    N, K = map(int, stdin.readline().split())\n    prices = list(map(int, stdin.readline().split()))\n    # the minimum total price\n    min_price = sum(prices[:K])\n    # the maximum total price\n    max_price = sum(prices[K - 1::-1])\n    # output\n    print(min_price, max_price)\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum total price of fruits.\n    \"\"\"\n    # Get data\n    N, K = [int(x) for x in stdin.split()]\n    price = [int(x) for x in stdin.split()]\n    # Find min\n    min_price = 0\n    for n in range(N):\n        if n < K:\n            min_price += price[n]\n        else:\n            min_price += (price[n] - price[n - K])\n    # Print result\n    print(min_price)\n"
    },
    {
        "number": 4292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    prices = [int(x) for x in stdin.split()]\n    prices.sort()\n    print(prices[K - 1] * K)\n    return ''"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs: str = stdin.split()\n    p: int = int(inputs[0])\n    q: int = int(inputs[1])\n    r: int = int(inputs[2])\n\n    if p == q:\n        return str(2 * p * r)\n    elif p == r:\n        return str(2 * p * q)\n    elif q == r:\n        return str(2 * p * q)\n    else:\n        return str(p + q + r)\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    P Q R\n    '''\n    p, q, r = [int(n) for n in stdin.split()]\n    a_to_b = p + q\n    b_to_c = q + r\n    c_to_a = r + p\n    a_to_c = p + r\n    b_to_a = q + p\n    c_to_b = r + q\n    a_to_c_min = min(a_to_b, b_to_c, c_to_a)\n    b_to_c_min = min(a_to_c, b_to_a, c_to_b)\n    c_to_a_min = min(a_to_b, b_to_c, c_to_a)\n    a_to_b_min = min(a_to_c, b_to_a, c_to_b)\n    b_to_a_min = min(a_to_c, b_to_a, c_to_b)\n    c_to_b_min = min(a_to_a, b_to_a, c_to_a)\n    return str(min(a_to_b_min, b_to_c_min, c_to_a_min))"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = [int(x) for x in stdin.split()]\n    a = min(P, Q, R)\n    b = max(P, Q, R)\n    c = (P + Q + R) - (a + b)\n    return a * b + c\n\nprint(solution(input()))\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 3 4\")\n    '4'\n    \"\"\"\n    lines = stdin.split('\\n')\n    matrix = []\n    for line in lines:\n        matrix.append(list(map(int, line.split())))\n    # print(matrix)\n    min_time = float(\"inf\")\n    for i in range(len(matrix) - 1):\n        for j in range(i + 1, len(matrix)):\n            a, b, c = matrix[i][0], matrix[i][1], matrix[i][2]\n            d, e, f = matrix[j][0], matrix[j][1], matrix[j][2]\n            p = a + d\n            q = b + e\n            r = c + f\n            time = p + q + r\n            if time < min_time:\n                min_time = time\n    return str(min_time)\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    P, Q, R = map(int, stdin.split())\n    min_sum = math.inf\n    for a, b, c in [(P, Q, R), (Q, P, R), (R, P, Q), (R, Q, P)]:\n        sum_flight_times = a + b + c\n        if sum_flight_times < min_sum:\n            min_sum = sum_flight_times\n    return str(min_sum)"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    \n    Arguments:\n        stdin {[str]} -- [description]\n    \n    Returns:\n        str -- [description]\n    \"\"\"\n    p, q, r = (int(x) for x in stdin.split())\n    return str(min(p+q, q+r, p+r))\n\n    # p, q, r = [int(x) for x in stdin.split()]\n    # print(min(p+q, q+r, p+r))\nsolution(input())\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    P, Q, R = [int(s) for s in stdin.split(\" \")]\n    return str(min([P+Q, Q+R, P+R]))\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = (int(x) for x in stdin.split())\n    return str(min(p + q, q + r, p + r))\n"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split(' '))\n    return str(min(P+R, Q+R, P+Q, Q+P))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = stdin.split()\n    p, q, r = int(p), int(q), int(r)\n    print(f'{min(p+q, q+r, r+p)}')"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    if x < a:\n        print(0)\n    else:\n        print(10)\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n\n    if n < m:\n        return str(0)\n    else:\n        return str(10)\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return 0\n    return 10\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin.split(\" \")[0]) < int(stdin.split(\" \")[1]))\n\n    return \"0\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[0])\n    A = int(stdin.split()[1])\n    if X < A:\n        return str(0)\n    return str(10)\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 0 if x is less than a, 10 otherwise\"\"\"\n    x, a = map(int, stdin.split())\n    return '0' if x < a else '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, A = list(map(int, stdin.split()))\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns 0 if X is less than A, otherwise returns 10'''\n    (X, A) = stdin.split()\n    if int(X) < int(A):\n        return 0\n    return 10"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a = [int(s) for s in stdin.split(\" \")]\n    if x < a:\n        return \"0\"\n    else:\n        return \"10\"\n\nprint(solution(stdin()))"
    },
    {
        "number": 4294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, X = map(int, stdin.split(' '))\n    if X < A:\n        return \"0\"\n    else:\n        return \"10\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while N >= 0:\n        N = abs(N - K)\n        if N >= 0:\n            print(N)\n        else:\n            break\n    return ''\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    n = abs(n - k)\n    print(n)\n    return str(n)\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution for this problem.\n    >>> solution(\"7 4\")\n    '1'\n    >>> solution(\"5 6\")\n    '0'\n    >>> solution(\"7 6\")\n    '0'\n    >>> solution(\"5 8\")\n    '0'\n    >>> solution(\"5 0\")\n    '0'\n    >>> solution(\"5 -5\")\n    '0'\n    >>> solution(\"4 3\")\n    '1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    return str(abs(n - k))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    while N:\n        count += 1\n        N = abs(N - K)\n    return str(count)\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()[0]\n    n, k = line.split()\n    n = int(n)\n    k = int(k)\n    counter = 0\n    while n!= k:\n        counter += 1\n        n = abs(n - k)\n    return str(counter)\n    \n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min([abs(x - k) for x in range(n)]))\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    number, k = [int(x) for x in stdin.split()]\n    # Get k steps in number\n    for step in range(k):\n        number = abs(number - k)\n    return str(number)\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n, k = map(int, stdin.split())\n    for i in range(k):\n        n = abs(n - k)\n    return str(n)\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input as a list\n    n, k = stdin.split()\n    # split list into numbers\n    n, k = list(map(int, n)), int(k)\n    # convert k into absolute value\n    k = abs(k)\n    # for each n, remove n from list and replace with abs(n - k)\n    for i in range(len(n)):\n        n[i] = abs(n[i] - k)\n    # get minimum value from list\n    print(min(n))\n    # return string\n    return ''\n"
    },
    {
        "number": 4295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum value taken by N after Aoki does the operation zero or more times.\n\n    >>> solution(\"7 4\")\n    1\n    \"\"\"\n\n    N, K = map(int, stdin.split())\n    min_val = abs(N - K)\n    while N!= 0:\n        N = abs(N - K)\n        if N < min_val:\n            min_val = N\n    return min_val\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = map(int, stdin.split())\n    if sum([a1, a2, a3]) >= 22:\n        return \"bust\"\n    return \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = [int(x) for x in stdin.split()]\n    if A_1 + A_2 + A_3 >= 22:\n        return \"bust\"\n    return \"win\"\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = [int(i) for i in stdin.split()]\n    total = A_1 + A_2 + A_3\n    if total >= 22:\n        return \"bust\"\n    return \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a,b,c = map(int,stdin.split())\n  return \"win\" if a+b+c >= 22 else \"bust\""
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 7 9\")\n    'win'\n    \"\"\"\n    a, b, c = stdin.split()\n    if (int(a) + int(b) + int(c)) >= 22:\n        return \"bust\"\n    return \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = [int(i) for i in stdin.split()]\n    return 'bust' if sum([A_1, A_2, A_3]) >= 22 else 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total = sum(map(int, stdin.split()))\n    return 'win' if total >= 22 else 'bust'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = map(int, stdin.split())\n    if a_1 + a_2 + a_3 >= 22:\n        return 'bust'\n    return 'win'\n"
    },
    {
        "number": 4296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1 + A_2 + A_3 >= 22:\n        return 'bust'\n    else:\n        return 'win'"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while (n % i!= 0) or (n % 2!= 0):\n        i += 1\n    return i\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        if i % 2 == 0 and i % n == 0:\n            return i\n    return 'No such number exists'"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = n\n    while True:\n        if ans % 2!= 0:\n            ans += 1\n            continue\n        if ans % n!= 0:\n            ans += 1\n            continue\n        break\n    return str(ans)\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    while n % 2 == 0:\n        n /= 2\n    while n % 3 == 0:\n        n /= 3\n    while n % 5 == 0:\n        n /= 5\n    while n % 7 == 0:\n        n /= 7\n    while n % 11 == 0:\n        n /= 11\n    while n % 13 == 0:\n        n /= 13\n    while n % 17 == 0:\n        n /= 17\n    while n % 19 == 0:\n        n /= 19\n    while n % 23 == 0:\n        n /= 23\n    while n % 29 == 0:\n        n /= 29\n    while n % 31 == 0:\n        n /= 31\n    while n % 37 == 0:\n        n /= 37\n    while n % 41 == 0:\n        n /= 41\n    while n % 43 == 0:\n        n /= 43\n    while n % 47 == 0:\n        n /= 47\n    while n % 53 == 0:\n        n /= 53\n    while n % 59 == 0:\n        n /= 59\n    while n % 61 == 0:\n        n /= 61\n    while n % 67 == 0:\n        n /= 67\n    while n % 71 == 0:\n        n /= 71\n    while n % 73 == 0:\n        n /= 73\n    while n % 79 == 0:\n        n /= 79\n    while n % 83 == 0:\n        n /= 83\n    while n % 89 == 0:\n        n /= 89\n    while n % 97 == 0:\n        n /= 97\n    while n % 101 == 0:\n        n /= 101\n    while n % 103 == 0:\n        n /= 103\n    while n % 107 == 0:\n        n /= 107\n    while n % 109 == 0:\n        n /= 109\n    while n % 113 == 0:\n        n /= 113\n    while n % 127 == 0:\n        n /= 127\n    while n % 131 == 0:\n        n /= 131\n    while n % 137 == 0:\n        n /= 137\n    while n % 139 == 0:\n        n /= 139\n    while n % 149 == 0:\n        n /= 149\n    while n % 151 == 0:\n        n /= 151\n    while n % 157 == 0:\n        n /= 157\n    while n % 163 == 0:\n        n /= 163\n    while n % 167 == 0:\n        n /= 167\n    while n % 173 == 0:\n        n /= 173\n    while n % 179 == 0:\n        n /= 179\n    while n % 181 == 0:\n        n /= 181\n    while n % 191 == 0:\n        n /= 191\n    while n % 193 == 0:\n        n /= 193\n    while n % 197 == 0:\n        n /= 197\n    while n % 199 == 0:\n        n /= 199\n    while n % 211 == 0:\n        n /= 211\n    while n % 223 == 0:\n        n /= 223\n    while n % 227 == 0:\n        n /= 227\n    while n % 229 == 0:\n        n /= 229\n    while n % 233 == 0:\n        n /= 233\n    while n % 239 == 0:\n        n /= 239\n    while n % 241 == 0:\n        n /= 241\n    while n % 251 == 0:\n        n /= 251\n    while n % 257 == 0:\n        n /= 257\n    while n % 263 == 0:\n        n /= 263\n    while n % 269 == 0:\n        n /= 269\n    while n % 271 == 0:\n        n /= 271\n    while n % 277 == 0:\n        n /= 277\n    while n % 281 == 0:\n        n /= 281\n    while n % 283 == 0:\n        n /= 283\n    while n % 293 == 0:\n        n /= 293\n    while n % 307 == 0:\n        n /= 307\n    while n % 311 == 0:\n        n /= 311\n    while n % 313 == 0:\n        n /= 313\n    while n % 317 == 0:\n        n /= 317\n    while n % 331 == 0:\n        n /= 331\n    while n % 337 == 0:\n        n /= 337\n    while n % 347 == 0:\n        n /= 347\n    while n % 349 == 0:\n        n /= 349\n    while n % 353 == 0:\n        n /= 353\n    while n % 359 == 0:\n        n /= 359\n    while n % 367 == 0:\n        n /= 367\n    while n % 373 == 0:\n        n /= 373\n    while n % 379 == 0:\n        n /= 379\n    while n % 383 == 0:\n        n /= 383\n    while n % 389 == 0:\n        n /= 389\n    while n % 397 == 0:\n        n /= 397\n    while n % 401 == 0:\n        n /= 401\n    while n % 409 == 0:\n        n /= 409\n    while n % 419 == 0:\n        n /= 419\n    while n % 421 == 0:\n        n /= 421\n    while n % 431 == 0:\n        n /= 431\n    while n % 433 == 0:\n        n /= 433\n    while n % 439 == 0:\n        n /= 439\n    while n % 443 == 0:\n        n /= 443\n    while n % 449 == 0:\n        n /= 449\n    while n % 457 == 0:\n        n /= 457\n    while n % 461 == 0:\n        n /= 461\n    while n % 463 == 0:\n        n /= 463\n    while n % 467 == 0:\n        n /= 467\n    while n % 479 == 0:\n        n /= 479\n    while n % 487 == 0:\n        n /= 487\n    while n % 491 == 0:\n        n /= 491\n    while n % 499 == 0:\n        n /= 499\n    while n % 503 == 0:\n        n /= 503\n    while n % 509 == 0:\n        n /= 509\n    while n % 521 == 0:\n        n /= 521\n    while n % 523 == 0:\n        n /= 523\n    while n % 541 == 0:\n        n /= 541\n    while n % 547 == 0:\n        n /= 547\n    while n % 557 == 0:\n        n /= 557\n    while n % 563 == 0:\n        n /= 563\n    while n % 569 == 0:\n        n /= 569\n    while n % 571 == 0:\n        n /= 571\n    while n % 577 == 0:\n        n /= 577\n    while n % 581 == 0:\n        n /= 581\n    while n % 583 == 0:\n        n /= 583\n    while n % 587 == 0:\n        n /= 587\n    while n % 593 == 0:\n        n /= 593\n    while n % 599 == 0:\n        n /= 599\n    while n % 601 == 0:\n        n /= 601\n    while n % 607 == 0:\n        n /= 607\n    while n % 613 == 0:\n        n /= 613\n    while n % 617 == 0:\n        n /= 617\n    while n % 619 == 0:\n        n /= 619\n    while n % 631 == 0:\n        n /= 631\n    while n % 641 == 0:\n        n /= 641\n    while n % 643 == 0:\n        n /= 643\n    while n % 647 == 0:\n        n /= 647\n    while n % 653 == 0:\n        "
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''T\u00ednh s\u1ed1 l\u1edbn nh\u1ea5t c\u00f3 th\u1ec3 b\u1eb1ng 2 v\u00e0 n.\n    \n    V\u1edbi n l\u00e0 s\u1ed1 nguy\u00ean d\u01b0\u01a1ng, h\u00e3y t\u00ecm s\u1ed1 nguy\u00ean t\u1ed1 c\u00f3 chia\n    l\u1eabn 2 v\u00e0 n l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1.\n    \n    Bi\u1ebft s\u1ed1 nguy\u00ean t\u1ed1 l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 chia h\u1ebft cho s\u1ed1 nguy\u00ean\n    n\u00e0o \u0111\u00f3 l\u00e0 s\u1ed1 nguy\u00ean t\u1ed1 c\u1eb1ng n.\n    \n    M\u1ee5c \u0111\u00edch c\u1ee7a ch\u01b0\u01a1ng tr\u00ecnh n\u00e0y l\u00e0 s\u1ed1 nguy\u00ean d\u01b0\u01a1ng n.\n    '''\n    pass\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    a, b = int(num), 0\n    while a % 2 == 0:\n        a = a // 2\n        b += 1\n    print(2 ** b)\n    print(2 ** b * a)"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        if (n % 2 == 0) and (n % 3 == 0):\n            return n\n        n += 1\n        "
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while True:\n        if n % 2!= 0:\n            n += 1\n        else:\n            count += 1\n            if count == n:\n                return str(n)\n"
    },
    {
        "number": 4297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n <= 1:\n        return n\n    for i in range(n, 2, -1):\n        if n % i == 0 and (n // i) % 2 == 0:\n            return i"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n, d = stdin.split()\n  return\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split(' ')]\n    print(N - D + 1)"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of inspector needed to achieve the objective.\"\"\"\n    N, D = map(int, stdin.split(' '))\n    return N - D + 1"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    l = [1] * n\n    c = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            c += 1\n            for j in range(i, n + 1, i):\n                l[j - 1] = 0\n    return c\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nYou can use a more optimal algorithm here.\nN, D = [int(x) for x in stdin.split()]\n\nreturn\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    'Solution to the problem'"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, d = map(int, stdin.split())\n    return str(int(n/d))\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, d = map(int, stdin.readline().split())\n    return d\n\nprint(solution(stdin=input()))\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 4298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    _, d = [int(i) for i in stdin.split()]\n    # print(_)\n    # print(d)\n    return(d)"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0 or n % 10 == 1 or n % 10 == 2 or n % 10 == 3:\n        return \"hon\"\n    elif n % 10 == 4 or n % 10 == 5 or n % 10 == 6 or n % 10 == 7:\n        return \"pon\"\n    elif n % 10 == 8 or n % 10 == 9:\n        return \"bon\"\n    else:\n        return \"error\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number: str = stdin.strip()\n    if int(number) > 999:\n        raise ValueError\n    else:\n        if int(number) % 10 == 2 or int(number) % 10 == 3:\n            return \"hon\"\n        elif int(number) % 10 == 0 or int(number) % 10 == 1 or int(number) % 10 == 6 or int(number) % 10 == 8:\n            return \"pon\"\n        else:\n            return \"bon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport re\n\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 10:\n        return \"bon\"\n    elif N < 100:\n        return \"hon\"\n    elif N < 1000:\n        return \"pon\"\n    elif N < 10000:\n        return \"hon\"\n    elif N < 100000:\n        return \"pon\"\n    elif N < 1000000:\n        return \"hon\"\n    else:\n        return \"pon\""
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip()\n    if int(N) < 100:\n        return \"pon\"\n    elif int(N) < 1000:\n        if int(N[-1]) % 2 == 0:\n            return \"hon\"\n        elif int(N[-1]) == 3:\n            return \"bon\"\n        elif int(N[-1]) in (1, 6, 8):\n            return \"pon\"\n        else:\n            return \"hon\"\n    else:\n        return \"hon\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 2 or N % 10 == 4 or N % 10 == 5 or N % 10 == 7 or N % 10 == 9:\n        return \"hon\"\n    if N % 10 == 0 or N % 10 == 1 or N % 10 == 6 or N % 10 == 8:\n        return \"pon\"\n    if N % 10 == 3:\n        return \"bon\"\n    return \"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n\n    if 2 <= number <= 9:\n        return \"hon\"\n    elif number == 0 or number == 1:\n        return \"pon\"\n    elif number == 3:\n        return \"bon\"\n    return \"invalid\"\n\nprint(solution(input()))"
    },
    {
        "number": 4299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  N: int\n  return: str\n  \"\"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # We read each line and split it by space\n    N, *args = stdin.split('\\n')\n    # We convert the first line to an integer\n    N = int(N)\n    # We convert the rest of the line to integers\n    args = list(map(int, args))\n    # We define a variable to hold our output\n    output = 0\n    # We loop over each of the arguments\n    for i in range(len(args)):\n        for j in range(i+1, len(args)):\n            # We increment our output variable\n            output += args[i] * args[j]\n    # We return the output variable\n    return str(output)"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #create list from standard in\n    #add list to array\n    #return sum of all elements in array\n    return sum(stdin)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sum_of_health_points = 0\n    for _ in range(n):\n        health_points = stdin.readline().split()\n        sum_of_health_points += (int(health_points[0]) * (int(health_points[1]) + int(health_points[2])))\n    return sum_of_health_points\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the sum of all health points restored from eating two takoyaki from the N takoyaki served.\n    '''\n    num_takoyaki = int(stdin.readline().split()[0])\n    takoyaki_health = [int(i) for i in stdin.readline().split()]\n    health_points_restored = 0\n    for first_takoyaki_index in range(num_takoyaki):\n        for second_takoyaki_index in range(first_takoyaki_index + 1, num_takoyaki):\n            health_points_restored += (takoyaki_health[first_takoyaki_index] *\n                                       takoyaki_health[second_takoyaki_index])\n    return str(health_points_restored)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    x = 0\n    for i in range(0, len(l)):\n        for j in range(0, len(l)):\n            if i!= j:\n                x += l[i] * l[j]\n    return x\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = [int(i) for i in stdin.readline().split()]\n    h = sum([x*(n-x) for x in range(1,n+1)])\n    return h"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the sum of health points restored from eating two takoyaki over all possible choices of two takoyaki from the N takoyaki served.\n\n    Parameters\n    ----------\n    stdin\n        The input from standard input\n\n    Returns\n    -------\n    str\n        The answer to the problem\n    \"\"\"\n    n = int(stdin)\n    d = [int(item) for item in stdin.split(' ')]\n\n    return sum(d[i] * d[j] for i in range(n) for j in range(i + 1, n))\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n: int = int(stdin.readline().rstrip())\n    items: str = stdin.readline().rstrip().split()\n    nums: List[int] = [int(item) for item in items]\n    answer: int = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            answer += nums[i] * nums[j]\n    \n    return str(answer)\n"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N = int(stdin)\n    res = 0\n    for i in range(1, N):\n        res += i * N * (N - 1) // 2\n    return res"
    },
    {
        "number": 4300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input: str\n    output: str\n    '''\n\n    input_as_list = stdin.split()\n    N = int(input_as_list[0])\n    x = int(input_as_list[1])\n\n    # a = sum(list(map(lambda a: a ** 2, range(10))))\n    # print(a)\n    if N <= 1:\n        return x\n    else:\n        return x * (N * (N - 1) / 2)\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.splitlines())\n\n\ndef"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N, *A = map(int, stdin.split())\n    \n    arr = A[0 : N - 1]\n    arr.insert(0, A[-1])\n\n    print(*[max(arr[i : N - 1]) for i in range(1, N)])\n\n    return \"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the max value among all elements other than A_i in sequence\n\n    Parameters\n    ----------\n    stdin : str\n        input from standard in\n\n    Returns\n    -------\n    str\n        answer to problem\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    arr = list(map(int, stdin.split('\\n')[1:]))\n    output = [max([arr[i] for i in range(len(arr)) if i!= j]) for j in range(len(arr))]\n    return '\\n'.join([str(o) for o in output])\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value among the N-1 elements other than A_i in the sequence.\n\n    >>> solution('6\\n1\\n4\\n3\\n')\n    4\n    \"\"\"\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    A = [int(n) for n in stdin[1:]]\n    return '\\n'.join(str(max(A[i] for i in range(n) if i!= j)) for j in range(n))\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum value of all the elements in a sequence.\n\n    Args:\n        stdin (str): Input from standard input.\n\n    Returns:\n        str: Output to standard output.\n    \"\"\"\n    n = int(stdin)\n    data = []\n    for i in range(1, n + 1):\n        data.append(int(stdin))\n    data.sort()\n    for i in range(n):\n        print(data[i])\n\n    return \"\""
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value among the N-1 elements other than A_i in the sequence.\n\n    Args:\n        stdin (str): input given in the following format:\n            N\n            A_1\n            :\n            A_N\n\n    Returns:\n        str: N lines. The i-th line (1 \\leq i \\leq N) should contain the maximum value among the N-1 elements other than A_i in the sequence.\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    array = [int(i) for i in stdin.split(\"\\n\")[1:]]\n    for i in range(n):\n        max_value = max(array[0:i] + array[i + 1:])\n        print(max_value)\n    return \"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    A = [int(i) for i in lines[1:N + 1]]\n\n    maximum = 0\n    for i in range(N):\n        if A[i] > maximum:\n            maximum = A[i]\n\n    print(maximum)\n    print(maximum)\n    print(maximum)\n\n    return str(maximum)\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum value among the N-1 elements other than A_i in the sequence.\n\n    Args:\n        stdin (str): Input from standard input.\n\n    Returns:\n        str: Output to standard output.\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(stdin.readline()) for _ in range(n)]\n    print(max([a[j] for j in range(n) if j!= i]))\n    return ''\n"
    },
    {
        "number": 4301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input and define variables\n    number_of_numbers = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().strip().split()))\n\n    # define variables\n    largest_number = 0\n    largest_index = 0\n\n    # find largest number and index of largest number\n    for index in range(1, number_of_numbers):\n        if numbers[index] > largest_number:\n            largest_number = numbers[index]\n            largest_index = index\n\n    # print largest number and largest index of largest number\n    for index in range(number_of_numbers):\n        if index == largest_index:\n            print(largest_number)\n        else:\n            print(numbers[index])\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split('\\n')[0].split()))\n    def solve(A, B):\n        count = 0\n        while A > 0 and B > 0:\n            if A > B:\n                count += B\n                A -= B\n            else:\n                count += A\n                B -= A\n        return count\n    print(solve(A, B))\nsolution(stdin)\n\n-------Test 1--------\nInput\n5 3\nOutput\n9\n\n-------Test 2--------\nInput\n5 5\nOutput\n10\n\n-------Test 3--------\nInput\n4 4\nOutput\n9\n\n-------Test 4--------\nInput\n1 1\nOutput\n0\n\n-------Test 5--------\nInput\n2 2\nOutput\n2\n\"\"\"\n\nfrom collections import Counter\nimport numpy as np\n\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    return a + b\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_coins(size: int, count: int) -> int:\n        if size == 0:\n            return 0\n\n        if size == 1:\n            return count\n\n        return max(get_max_coins(size - 1, count), get_max_coins(size - 2, count + count))\n\n    size1, size2 = map(int, stdin.split())\n    return get_max_coins(size1, 0) + get_max_coins(size2, 0)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # 1\n    n, m = map(int, stdin.split())\n    count = 0\n    i = 0\n    while n >= m:\n        n -= m\n        count += m\n        m -= 1\n    count += n\n    return str(count)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #write your code in Python 3.6\n    [a, b] = map(int, stdin.split())\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You have 2 possible actions at each step:\n    1. Press the button of size A\n    2. Press the button of size B\n\n    We can build a recurrence relation:\n    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + i, dp[i - 1][j - 2] + i + j)\n\n    We only care about the last two values of the row and the first two values of the column.\n    \"\"\"\n\n    n, m = [int(x) for x in stdin.split(' ')]\n    dp = [[0] * (m + 1)] + [[0] + [-1] * m for _ in range(n)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + i, dp[i - 1][j - 2] + i + j)\n\n    return dp[n][m]\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    a_str = str(A)\n    b_str = str(B)\n    n = len(a_str) + len(b_str)\n    result = 0\n    for a_idx in range(n):\n        for b_idx in range(n):\n            if a_idx + b_idx < n:\n                a = int(a_str[::-1][a_idx])\n                b = int(b_str[::-1][b_idx])\n                if a * b > result:\n                    result = a * b\n    return str(result)\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We must start with A and B values.\n    After that, we will get values and change the size of buttons.\n    When the size of button is lower than 1, we will not add coins to result.\n    We will keep adding coins as long as button size is > 1.\n    \"\"\"\n    a, b = map(int, stdin.split())\n    res = 0\n    while a > 0 and b > 0:\n        res += 1\n        if a == 1 or b == 1:\n            break\n        elif a > b:\n            if b == 1:\n                a -= 1\n                b -= 1\n            else:\n                a -= b\n                b = 1\n        else:\n            if a == 1:\n                a -= 1\n                b -= 1\n            else:\n                b -= a\n                a = 1\n    return res\n"
    },
    {
        "number": 4302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if B == 0:\n        return A\n    return B + (B-1)//2 + (A-B)//2 + solution(str(A - B*(B-1)//2))\n    \"\"\"\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_result(parse_input(stdin)))\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3\\n-30 -10 10 20 50\")\n    '40'\n    \"\"\"\n    nums = list(map(int, stdin.split()))\n    n = nums[0]\n    k = nums[1]\n    nums = nums[2:]\n    l = 0\n    r = 0\n    max_num = max(nums)\n    if n == 1:\n        l = 0\n        r = max_num\n    elif k == 1:\n        l = min(nums)\n        r = max_num\n    elif k == n:\n        l = min(nums)\n        r = 0\n    else:\n        l = min(nums[:k])\n        r = max(nums[k:])\n    return str(abs(r - l))\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    positions = list(map(int, stdin.split(' ')))\n    light = 0\n    total = 0\n    for p in positions:\n        if p == 0:\n            continue\n        diff = abs(p)\n        light = light + diff\n        if light >= k:\n            total += 1\n            light -= diff\n        else:\n            total += 1\n            light = light - diff\n    return total\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find minimum time to light up the candles.\"\"\"\n    N, K = map(int, stdin.split())\n    candles = list(map(int, stdin.split()))\n    min_time = 0\n\n    for i in range(K):\n        if candles[i] < candles[i + 1]:\n            min_time += candles[i + 1] - candles[i]\n        else:\n            min_time += candles[i] - candles[i + 1]\n\n    return min_time\n"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        count = min(count+1, k)\n        if count == k:\n            count = 0\n        if array[i] == i:\n            count = 0\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    \"\"\"\n    N, K = map(int, stdin.split())\n    candles = list(map(int, stdin.split()))\n    candles.sort()\n    candles = candles[::-1]\n    if K == 1:\n        return 0\n    elif K == 2:\n        return candles[1] - candles[0]\n    elif K == 3:\n        return candles[2] - candles[1]\n    elif K == 4:\n        return candles[3] - candles[2]\n    elif K == 5:\n        return candles[4] - candles[3]\n    else:\n        return 0\n    \"\"\"\n    # [Your code here]\n    \"\"\"\n    return 0\n    \"\"\"\n    candles = sorted(map(int, stdin.split()))\n    K = int(stdin.split()[1])\n    t = 0\n    #print(candles)\n    i = 0\n    while i < K:\n        left = abs(candles[i] - candles[0])\n        if i < K - 1:\n            right = abs(candles[i + 1] - candles[i])\n            t += min(left, right)\n        else:\n            t += left\n        i += 1\n    return t\n\nprint(solution(stdin))"
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(number) for number in stdin.split(' ')]\n    d = (numbers[1] - numbers[0]) // 2\n    return str(d)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum([i for i in range(1, b - a + 1)]))\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = 1\n    while True:\n        if a * n + b * (n - 1) > 499500:\n            return str(n - 1)\n        n += 1\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    depth = a - b\n    return str(depth)\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = b - a\n    if s % 2 == 0:\n        return str(s // 2)\n    else:\n        return str((s // 2) + 1)\n"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split(' '))\n  print(max(0, min(a, b-1) - max(0, b-1-a)))"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a - b + 1)"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    x = 0\n    if A < B:\n        x = B - A - 1\n    elif A == B:\n        x = 0\n    else:\n        x = A - B\n    print(x)"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split('\\n')[0]\n    a, b = list(map(int, first_line.split()))\n    return str(a + b)"
    },
    {
        "number": 4304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(b-a)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split(\" \"))\n\n    return \"a\""
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split(' '))\n    if A > H:\n        return 'IMPOSSIBLE'\n\n    return str(H // A)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return str(H // A)\n"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, A = [int(x) for x in stdin.split()]\n    res = (H - 1) // A + 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    return H + A - 1"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split('\\n')[0].split(' '))\n    count = 0\n    while H > 0:\n        H -= A\n        if H < 0:\n            H = 0\n        count += 1\n    return str(count)\n\nprint(solution(stdin))"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    cnt = 0\n    while True:\n        cnt += 1\n        if H <= 0:\n            return cnt\n        H -= A\n    return cnt\n\n\nprint(solution(input()))"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    attack, health = map(int, stdin.split(' '))\n    if health <= 0 or attack <= 0:\n        return 0\n    return health // attack + (health % attack > 0)"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split())\n    return 'The number of attacks needed is:'+ str(h // a)"
    },
    {
        "number": 4305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split(' '))\n    while H > 0:\n        H -= A\n        if H <= 0:\n            print(str(A))\n            break\n        A += 1\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0 75 25 100\")\n    '50'\n    \"\"\"\n    alice, bob = map(int, stdin.split())\n    return str(max(alice, bob) - min(alice, bob))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(0, min(b, d) - max(a, c)))\n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    if a > b:\n        if c > d:\n            if a > c:\n                if b > d:\n                    print(a - c)\n                else:\n                    print(a - b)\n            else:\n                print(c - a)\n        else:\n            print(b - c)\n    else:\n        if c > d:\n            if a > d:\n                print(a - c)\n            else:\n                print(a - b)\n        else:\n            print(d - a)\n    return \"\"\n    \n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    return str(max(0, min(b, d) - max(a, c)))\n    \n  \n"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first = int(stdin.split()[0])\n    second = int(stdin.split()[1])\n    third = int(stdin.split()[2])\n    fourth = int(stdin.split()[3])\n    return str(abs(second - first) + abs(third - fourth))\n\nprint(solution('0 75 25 100'))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, alice, bob = stdin.split(' ')\n    return str(abs(int(alice) - int(bob)))\n    "
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    a_0 = min(a, c)\n    b_0 = min(b, d)\n    return (max(0, a_0) + max(0, b_0))\n\nprint(solution(stdin))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    return str(max(0, min(B, C) - max(A, D)))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    Alice, Bob = [int(i) for i in stdin.split()]\n    return str(max(Alice, Bob) - min(Alice, Bob))\n\nsolution(\"0 75 25 100\")"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def euler_sieve(upper_bound: int):\n        non_primes = set()\n        if upper_bound > 2:\n            non_primes.update(range(2, int(math.sqrt(upper_bound)) + 1))\n            for i in range(int(math.sqrt(upper_bound)), upper_bound + 1):\n                for p in range(i * i, upper_bound + 1, i):\n                    non_primes.add(p)\n        return non_primes\n\n    def count_divisors(number):\n        divisors_count = 0\n        for i in range(1, int(math.sqrt(number)) + 1):\n            if number % i == 0:\n                divisors_count += 2\n        return divisors_count\n\n    n = int(stdin)\n    non_primes = euler_sieve(n)\n    result = 0\n    for i in range(n + 1):\n        if i not in non_primes:\n            if count_divisors(i) == 8:\n                result += 1\n    return result"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n):\n        if is_odd_with_exactly_eight_factors(i) and is_even(i):\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n\n    def is_odd(n):\n        if n == 0 or n == 1:\n            return False\n        elif n % 2!= 0:\n            return True\n        else:\n            return False\n\n    def count_divisors(num):\n        count = 1\n        for i in range(2, num+1):\n            if num % i == 0:\n                count += 1\n        return count\n\n    def solution(N: int) -> str:\n        count = 0\n        for i in range(1, N + 1):\n            if is_odd(i) and count_divisors(i) == 8:\n                count += 1\n        return count\n\n    print(solution(N))\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    start_time = time.time()\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    ans = 0\n    for i in range(1, N+1):\n        if len(factors(i)) == 8:\n            ans += 1\n    print(ans)\n    print(\"time elapsed : \" + str(time.time() - start_time) + \" seconds\")\n    return \"time elapsed : \" + str(time.time() - start_time) + \" seconds\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    count = 0\n    for i in range(1, int(n)+1):\n        if number_of_divisors(i) == 8 and number_of_even_divisors(i) == 0:\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Hint 1\n    We are looking for numbers with exactly 8 divisors.\n    \n    We will use a brute force approach.\n    \n    We can iterate through all the numbers between 1 and N, and count the number of numbers that have exactly 8 divisors.\n    \n    We will keep track of the numbers that have exactly 8 divisors and will check them for being odd.\"\"\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for i in range(1, int(stdin) + 1):\n        count = 0\n        for j in range(1, i + 1):\n            if i % j == 0:\n                count += 1\n        if count == 8:\n            total += 1\n    return total\nprint(solution(stdin))\n"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"The number \" + stdin + \" is \" + stdin + \" odd and has exactly \" + stdin + \" divisors.\""
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    s = [0] * K\n    for i in range(K):\n        s[i] = int(stdin.split()[i])\n    s.sort()\n    r = abs(s[0] - s[K - 1])\n    for i in range(K - 1):\n        r = min(r, abs(s[i] - s[i + 1]))\n    return r"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # N, K = map(int, stdin.readline().split())\n    # N, K = 7, 3\n    # crackers = [2, 2, 3]\n    # crackers.sort(reverse=True)\n    # result = 0\n    # print(crackers)\n    # for _ in range(K):\n    #     result += crackers.pop()\n    # result -= sum(crackers)\n    # return str(result)\n    n, k = map(int, stdin.readline().split())\n    m = min(n, k)\n    n = n - m\n    k = k - m\n    l = n % k\n    if l == 0:\n        l = k\n    return str(k * (n // k) + l)\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def argmin(arr: List[int]) -> int:\n        return min(enumerate(arr), key=lambda x: x[1])[0]\n\n    def argmax(arr: List[int]) -> int:\n        return max(enumerate(arr), key=lambda x: x[1])[0]\n\n    n, k = [int(x) for x in stdin.split()]\n\n    crackers = [int(x) for x in range(1, n + 1)]\n    crackers.sort(reverse=True)\n\n    dist = 0\n    while len(crackers) > k:\n        first_crackers = crackers[0:k]\n        first_crackers.sort(reverse=True)\n        second_crackers = crackers[k:]\n        second_crackers.sort()\n        dist = max(\n            dist,\n            abs(sum(first_crackers) - sum(second_crackers)),\n        )\n        del crackers[0:k]\n\n    dist = max(dist, abs(sum(crackers) - sum(crackers[0:k])))\n\n    print(dist)\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    crackers = [i for i in range(1, n + 1)]\n    while len(crackers) > k:\n        crackers[k - 1] += 1\n        for i in range(k - 1, 0, -1):\n            if crackers[i] > crackers[i - 1]:\n                crackers[i - 1] = crackers[i]\n            else:\n                break\n    return abs(crackers[0] - crackers[-1])\n\n----Test Input----\n\n-----Test Output-----\n5\n\"\"\"\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split(\" \")]\n    return str(abs((n // k) * (k - n % k) - n))\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, k = [int(x) for x in lines[0].split()]\n    crackers = [int(x) for x in lines[1].split()]\n    crackers.sort(reverse=True)\n    res = 0\n    for i in range(k):\n        res += (n - i) * crackers[i]\n    return str(res)"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = list(map(int, stdin.split()))\n    res = 0\n    for i in range(k):\n        res = max(res, n-k+1)\n        n = n-1\n    print(res)\n    return ''\n"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Create inputs\n    # n, k = map(int, stdin.readline().split())\n    n, k = input().split()\n    n = int(n)\n    k = int(k)\n\n    # Create a list to store the number of crackers\n    crackers = []\n    # Create a dictionary to store the number of crackers\n    crackers_dict = {}\n\n    for i in range(k):\n        crackers.append(int(stdin.readline()))\n        crackers_dict[i + 1] = int(stdin.readline())\n\n    # Sort the list\n    crackers.sort(reverse=True)\n\n    # Minimum difference\n    min_diff = 100000\n\n    # Loop through all the crackers\n    for i in range(n - 1):\n        # Find the difference between the first and second biggest number\n        diff = abs(crackers[0] - crackers[i + 1])\n\n        # Check if the difference is smaller than the current minimum\n        if diff < min_diff:\n            min_diff = diff\n        # Check if the difference is bigger than the current minimum\n        elif diff > min_diff:\n            break\n        # Update the minimum difference\n        else:\n            pass\n\n    # Return the result\n    return min_diff"
    },
    {
        "number": 4308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(value) for value in stdin.split()]\n    crackers = [int(value) for value in stdin.split()]\n    crackers.sort()\n    min_crackers = N // K\n    max_crackers = min_crackers * K\n    if max_crackers % N > 0:\n        max_crackers += N - max_crackers % N\n    print(abs(max_crackers - min_crackers))\n    return ''"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the earliest ABC where Kurohashi can make his debut.\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n)\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().rstrip())\nN_1 = str(N)[0]\nN_2 = str(N)[1]"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    return f'{N}'"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('111')\n    111\n    >>> solution('121')\n    123\n    >>> solution('122')\n    123\n    >>> solution('123')\n    123\n    >>> solution('456')\n    456\n    >>> solution('789')\n    789\n    \"\"\"\n    return '123'\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    while True:\n        if n % 10 == n // 10 % 10:\n            cnt += 1\n            if cnt == 10:\n                print(n)\n                break\n        else:\n            cnt = 0\n        n += 1\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    abc_list = []\n    while len(n) >= 3:\n        abc_list.append(n)\n        n = int(n) + 1\n        if n < 100:\n            n = '0' + str(n)\n        elif n < 1000:\n            n = '0' + str(n)\n        else:\n            n = str(n)\n    print(abc_list)\n\nsolution(stdin)\n\n\"\"\"\n\nn = stdin.split(\"\\n\")[0]\nn = int(n)"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    for i in range(1, N + 1):\n        if all(int(c) == i % 10 for c in str(i)):\n            return i\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"111\")\n    '111'\n    >>> solution(\"234\")\n    '234'\n    >>> solution(\"567\")\n    '567'\n    \"\"\"\n    n = int(stdin)\n    base = 10\n    factors = []\n    while base <= n:\n        if n % base == 0:\n            factors.append(base)\n        base *= 10\n    return str(max(factors))\n"
    },
    {
        "number": 4309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return next(a for a in range(100, 1000) if all(str(a)[i] == str(a)[0] for i in range(len(str(a)))))\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = list(map(int, stdin.split()))\n    i, j = 0, 1\n    cost = 0\n    while j < len(a):\n        cost += abs(a[j] - a[i])\n        i += 1\n        j += 1\n    return cost"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    D = {1: 0, 2: 0, 3: 0}\n    for i in range(len(A)):\n        D[i % 3 + 1] += abs(A[i] - A[(i + 2) % 3 + 1])\n    return str(min(D.values()))\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    print(min(A_1 + A_2, A_2 + A_3, A_1 + A_3))"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    N = len(A)\n    # cost[i][j] is the minimum cost to complete all tasks from i to j (inclusive)\n    cost = [[0]*N for _ in range(N)]\n    for i in range(1, N):\n        cost[i][i] = 0\n        cost[i][i-1] = abs(A[i] - A[i-1])\n    for l in range(2, N+1):\n        for i in range(N-l+1):\n            j = i + l - 1\n            if j - i == 1:\n                cost[i][j] = cost[i+1][j] + abs(A[j] - A[i])\n            else:\n                cost[i][j] = min(cost[i][j-1] + abs(A[j] - A[i]),\n                                 cost[i+1][j] + abs(A[j] - A[i+1]))\n    return cost[0][-1]\n\"\"\""
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    return str(min(A_1 + A_3, A_2 + A_3, A_2 + A_1))"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum total cost required to complete all the task\"\"\"\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    d = {}\n    d[0] = 0\n    d[A[0]] = A[0]\n    for i in range(1, len(A)):\n        d[i] = d[i - 1] + A[i] - A[i - 1]\n    d[A[-1]] = d[len(A) - 1]\n    print(d[len(A) - 1])\n    return d[len(A) - 1]\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split(' ')]\n    A.sort()\n    minimum_cost = 0\n    for i in range(len(A)):\n        minimum_cost += (A[i] - minimum_cost)\n    print(minimum_cost)"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    min_cost = 0\n    for i in range(len(A) - 1):\n        min_cost += abs(A[i] - A[i + 1])\n    return str(min_cost)\n"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an input consisting of three integers, the program is supposed to find the minimum cost to complete all three tasks.\n    The program has to print the minimum cost as an integer.\n    The cost is calculated as follows:\n    - The first task is completed for 0 cost.\n    - The third task is completed for the cost of |A_3 - A_1|.\n    - The second task is completed for the cost of |A_3 - A_2|.\n    Thus, the total cost is |A_1 - A_2| + |A_3 - A_1| + 0 + |A_3 - A_2|.\n    '''\n    # Fetch inputs from standard input.\n    a1, a2, a3 = map(int, stdin.split())\n    \n    # Calculate the minimum cost to complete all the three tasks.\n    print(abs(a1 - a2) + abs(a3 - a2) + 0 + abs(a3 - a1))\n\n    # Return the result.\n    return ''"
    },
    {
        "number": 4310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.strip().split(' ')]\n\n    # Let a1=a2=0, a1+a2+a3=0+0+a3=a3\n    a1 = b + c\n    a2 = abs(b - c)\n    a3 = 0\n\n    print(min(a1, a2, a3))\n    return ''\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 2 == 0:\n        a = [s]\n        while a[-1] % 2 == 0:\n            a.append(a[-1] // 2)\n        return len(a) - 1\n    else:\n        a = [s]\n        while a[-1] % 2!= 0:\n            a.append(a[-1] * 3 + 1)\n        return len(a) - 1\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    n = 1\n    while True:\n        if s % 2 == 0:\n            s //= 2\n        else:\n            s = 3*s + 1\n        if s == n:\n            return n\n        n += 1"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 2 == 0:\n        return s // 2\n    else:\n        return (3 * s) + 1\n    return s\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds a_n and prints the minimum value of m that satisfies the condition.\n    Precondition: the input is a valid input string.\n    '''\n    # get the first term from stdin\n    s = int(stdin)\n    # initialize a list of terms\n    a = [s]\n    # initialize the variables for function f(n) and n\n    f_n = lambda n: n / 2 if n % 2 == 0 else 3 * n + 1\n    n = 1\n    # iterate until a term of the list is equal to the first term\n    while a[-1]!= s:\n        # get the next term from the list\n        a.append(f_n(a[-1]))\n        # update the n for f(n)\n        n += 1\n    # return the value of n\n    return n\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = s\n    m = 0\n    while True:\n        if m % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n        m += 1\n        if n == 1:\n            break\n    return str(int(m - 1))\n\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 2 == 0:\n        f = s/2\n    else:\n        f = 3*s+1\n    while True:\n        if f % 2 == 0:\n            f = f/2\n        else:\n            f = 3*f+1\n        if f > s:\n            return str(int(f-s))"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def f(n):\n        return n // 2 if n % 2 == 0 else 3 * n + 1\n    n = int(stdin)\n    i = 1\n    while i < n:\n        a[i] = f(a[i - 1])\n        i += 1\n    return str(min(a[i - 1:n - 1]))\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    count = 0\n    while True:\n        if count == 1000000:\n            return count\n        if a % 2 == 0:\n            a = a / 2\n        else:\n            a = 3 * a + 1\n        count += 1\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 2 == 0:\n        return str(s // 2)\n    else:\n        return str(3 * s + 1)\n"
    },
    {
        "number": 4311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    m = 1\n    f_m = m\n    a_1 = s\n    while True:\n        if a_1 == 1:\n            break\n        else:\n            if a_1 % 2 == 0:\n                a_1 = a_1/2\n            else:\n                a_1 = 3*a_1+1\n            m += 1\n            if a_1 == a_m:\n                break\n            else:\n                f_m = m\n    return f_m\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = list(map(int, stdin.split()))\n    battle = [A,B,C,D]\n    while A>0 and C>0:\n        a,b,c,d = battle\n        if a>=c:\n            a=a-c\n        else:\n            c=c-a\n            a=0\n        if b>=d:\n            b=b-d\n        else:\n            d=d-b\n            b=0\n        battle = [a,b,c,d]\n    if battle.count(0)>1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(s) for s in stdin.split(\" \")]\n    if A+B < C+D:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    health_takahashi, health_aoki = list(map(int, stdin.split(\" \")))\n    if health_takahashi > health_aoki:\n        return \"Yes\"\n    elif health_takahashi < health_aoki:\n        return \"No\"\n    else:\n        while health_takahashi > 0 and health_aoki > 0:\n            health_takahashi -= 1\n            health_aoki -= 1\n        if health_takahashi <= 0:\n            return \"Yes\"\n        elif health_aoki <= 0:\n            return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nA, B, C, D = [int(x) for x in stdin.split(' ')]\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if (A - B) > (C - D):\n        return \"Yes\"\n    elif (A - B) < (C - D):\n        return \"No\"\n    else:\n        return \"Yes\" if (A - B) > 0 else \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split(' '))\n    winner = \"\"\n    if B > C:\n        winner = \"Takahashi\"\n    elif D > C:\n        winner = \"Aoki\"\n    elif D == C:\n        winner = \"Takahashi\"\n    else:\n        winner = \"Aoki\"\n\n    if winner == \"Takahashi\":\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # \u6587\u5b57\u5217\u3092\u5909\u63db\u3059\u308b\n    input_list = stdin.split()\n    monster1 = int(input_list[0])\n    monster2 = int(input_list[1])\n    monster3 = int(input_list[2])\n    monster4 = int(input_list[3])\n    \n    # \u3053\u3053\u3067\u8ca0\u306e\u6570\u30921\u306b\u66f8\u304d\u63db\u3048\u308b\n    # if monster1 < 0: monster1 = 1\n    # if monster2 < 0: monster2 = 1\n    # if monster3 < 0: monster3 = 1\n    # if monster4 < 0: monster4 = 1\n    \n    # \u6bd4\u8f03\u3059\u308b\u3068\u304d\u306b\uff0cA\u304c\u8ca0\u306e\u5834\u5408\u304c\u3042\u308b\u305f\u3081\uff0c\u3053\u308c\u3082\u8003\u616e\u3059\u308b\n    \n    \n    \n    # \u52dd\u3061\u8ca0\u3051\u3067\u6c7a\u3081\u305f\u3044\n    # \u52dd\u3061\u8ca0\u3051\u3060\u3051\u3067\u306a\u304f\uff0c\u6253\u3061\u7d9a\u3051\u305f\u3068\u304d\u306b\uff0c1\u304c\u51fa\u308b\u304b\u3069\u3046\u304b\u3067\u52dd\u8ca0\u304c\u6c7a\u3081\u3089\u308c\u308b\n    # \u4eca\u56de\u306f\uff0c\u52dd\u3061\u8ca0\u3060\u3051\u3067\u306a\u304f\uff0c\u6226\u4e89\u7d9a\u3051\u308b\u3068\u304d\u306b\uff0c1\u304c\u51fa\u308b\u304b\u3069\u3046\u304b\u304c\u6c7a\u3081\u3089\u308c\u308b\n    # \u3053\u306e\u6642\uff0c2\u30683\u306b\u3057\u304b\u3051\u3089\u308c\u306a\u3044\uff0c\u3042\u308b\u3044\u306f0\u30681\u304c\u5171\u306b\u5165\u3063\u3066\u3044\u308b\u3068\u304d\u306b\uff0c\u3069\u3061\u3089\u304b\u304c2\u30683\u306b\u306a\u308b\n    # \u3053\u306e\u6642\uff0c\u6226\u4e89\u304c\u7d9a\u304d\u7d9a\u3051\u308b\uff0c\u7d42\u4e86\u3057\u305f\u3044\n    # \u3053\u308c\u306f\uff0c2\u30683\u3092\u3069\u3046\u9078\u3076\u304b\u3067\u6c7a\u3081\u308b\uff0c\u3069\u3061\u3089\u304b\u304c2\u30683\u306b\u306a\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\n    # \u305d\u306e\u5834\u5408\uff0c\u3069\u3061\u3089\u304b\u304c0\u3092\u51fa\u3057\u305f\u3068\u304d\u306b\uff0c1\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u6c7a\u3081\u3089\u308c\u308b\n    # \u3053\u306e\u6642\uff0c0\u304c\u5165\u3063\u3066\u3044\u308b\u5834\u5408\u306f\uff0cTakahashi\u304c\u52dd\u3061\uff0c\u305d\u308c\u4ee5\u5916\u306f\uff0cAoki\u304c\u52dd\u3061\n    # \u52dd\u3061\u8ca0\u3060\u3051\u3067\u306a\u304f\uff0c\u6226\u4e89\u7d9a\u3051\u308b\u3068\u304d\u306b\uff0c1\u304c\u51fa\u308b\u304b\u3069\u3046\u304b\u304c\u6c7a\u3081\u3089\u308c\u308b\uff0c\n    # \u3053\u308c\u304c\uff0c\u6c7a\u3081\u305f\u6226\u4e89\u304c\u7d42\u4e86\u3059\u308b\u304b\u3069\u3046\u304b\u3067\u6c7a\u3081\u3089\u308c\u308b\n    \n    \n    # \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u306eHP\u3092\u4fdd\u5b58\n    monster1_hp = monster1\n    monster2_hp = monster2\n    monster3_hp = monster3\n    monster4_hp = monster4\n    \n    # \u4e00\u4eba\u306e\u6b7b\u3093\u3067\u308b\u30e2\u30f3\u30b9\u30bf\u30fc\u3092\u6c7a\u3081\u308b\n    # \u305d\u306e\u5834\u5408\uff0c\u30e2\u30f3\u30b9\u30bf\u30fc\u306eHP\u304c0\u306b\u306a\u308b\u307e\u3067\uff0c\u6226\u4e89\u3092\u7d9a\u3051\u308b\n    while monster1_hp > 0 and monster2_hp > 0 and monster3_hp > 0 and monster4_hp > 0:\n        # \u5404\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u524a\u3063\u3066\u3044\u308bHP\u304c\u4e00\u756a\u5c0f\u3055\u3044\u3082\u306e\u3092\u6c7a\u3081\u308b\n        # \u305d\u306e\u3046\u3061\u306b\uff0c\u4e00\u756a\u5c0f\u3055\u3044\u3082\u306e\u304c2\u3067\u306f\u306a\u3044\u5834\u5408\u306b\u306f\uff0c2\u3092\u6c7a\u3081\u308b\n        if monster1_hp > monster2_hp:\n            monster = monster1\n        elif monster1_hp < monster2_hp:\n            monster = monster2\n        else:\n            monster = monster3\n        \n        # \u5f15\u304d\u5206\u3051\u3067\u306a\u3044\u5834\u5408\u306f\n        if monster == monster1:\n            monster1_hp -= monster2\n        elif monster == monster2:\n            monster2_hp -= monster1\n        elif monster == monster3:\n            monster3_hp -= monster1\n        else:\n            monster4_hp -= monster1\n    \n    # \u3053\u3053\u3067\uff0c\u30e2\u30f3\u30b9\u30bf\u30fc\u306eHP\u304c0\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\n    if monster1_hp <= 0:\n        result = \"Yes\"\n    elif monster2_hp <= 0:\n        result = \"Yes\"\n    elif monster3_hp <= 0:\n        result = \"Yes\"\n    elif monster4_hp <= 0:\n        result = \"Yes\"\n    \n    # \u52dd\u3061\u8ca0\u3067\u6c7a\u3081\u305f\u304b\u3069\u3046\u304b\u3067\uff0c\u7d42\u4e86\u304c\u6c7a\u3081\u3089\u308c\u308b\n    return result"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    while a > 0 and b > 0:\n        a -= c\n        b -= d\n        if a < b:\n            break\n        a, b = b, a\n    print('Yes' if a <= 0 else 'No')\n"
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Yes if Takahashi will win, otherwise return No.\"\"\"\n    A, B, C, D = [int(x) for x in stdin.split()]\n    while A > 0 and B > 0:\n        B -= A\n        if B <= 0:\n            return \"Yes\"\n        A -= C\n        if A <= 0:\n            return \"No\"\n        Aoki = B\n        B = C\n        C = A\n        A = Aoki\n    return \"No\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Checks the strength of the A and B values of Takahashi and Aoki's monster.\n    If A is greater than B, it means that Takahashi will win the battle.\n    This is because Aoki only needs to win if the health of his monster is 0 or below.\n    If A is less than B, then Aoki's monster attacks first.\n    '''\n    A, B, C, D = map(int, stdin.split())\n    if A > B:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    value_list = list(map(int, stdin.readline().split()))\n    cost_list = list(map(int, stdin.readline().split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 1] + value_list[i - 1] - cost_list[i - 1])\n    print(dp[-1])\n\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split()))\n    c = list(map(int, stdin.readline().strip().split()))\n\n    total = 0\n    total_cost = 0\n    for i in range(n):\n        if total + v[i] < total_cost + c[i]:\n            total = total + v[i]\n            total_cost = total_cost + c[i]\n        else:\n            total = total_cost + c[i]\n            total_cost = total\n    return str(total)\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Solve the problem'''\n    from functools import reduce\n    from itertools import accumulate\n\n    N = int(stdin.readline())\n    C = list(map(int, stdin.readline().split(' ')))\n    V = list(map(int, stdin.readline().split(' ')))\n    C = list(map(lambda x: x * 2, C))\n    C = list(accumulate(C))\n    V = list(accumulate(V))\n    print(max(reduce(lambda x, y: x + y, zip(V, C), 0) - sum(C), 0))"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # \uc785\ub825 \ubc1b\uc544\uc624\uae30\n    N, *V, = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n\n    # \ud569\uacfc \uac1c\uc218 \uc124\uc815\n    sumV = 0\n    sumC = 0\n    for v in V:\n        sumV += v\n    for c in C:\n        sumC += c\n\n    # \ucd5c\ub313\uac12 \uad6c\ud558\uae30\n    result = sumV - sumC\n    print(result)\n    return result\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(max([int(x.split()[0]) - int(x.split()[1]) for x in stdin.split('\\n')[1:]]))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *gems_and_costs = map(int, stdin.split())\n    gems_and_costs = [gems_and_costs[i: i + 2] for i in range(0, len(gems_and_costs), 2)]\n    gems_and_costs.sort(key=lambda x: x[0])\n    gems_and_costs.reverse()\n    max_gems = 0\n    for i in range(N):\n        if gems_and_costs[i][0] > max_gems:\n            max_gems = gems_and_costs[i][0]\n        if gems_and_costs[i][1] > max_gems:\n            max_gems = gems_and_costs[i][1]\n    return max_gems\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *v, *c = map(int, stdin.split())\n    res = sum(v) - sum(c)\n    print(res)"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.splitlines()[0].split()[0]) - int(stdin.splitlines()[0].split()[1]))\n"
    },
    {
        "number": 4313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.splitlines()\n    H, W = int(grid[0].split(\" \")[0]), int(grid[0].split(\" \")[1])\n    matrix = []\n    for line in grid[1:H+1]:\n        matrix.append([0 if char == \".\" else 1 for char in line])\n    matrix.append([0 for _ in range(W)])\n    for _ in range(H):\n        matrix.append([0 for _ in range(W)])\n    for i in range(H+W):\n        for j in range(W):\n            print(matrix[i][j], end=\"\")\n        print()\n    return \"\""
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = [int(i) for i in stdin.split()]\n    matrix = []\n    for i in range(H):\n        row = stdin.splitlines()[i + 1]\n        matrix.append([char for char in row if char in '.#'])\n    while True:\n        for i in range(H):\n            for j in range(W):\n                if matrix[i][j] == '.':\n                    if j > 0 and matrix[i][j - 1] == '#':\n                        matrix[i][j] = matrix[i][j - 1]\n                    else:\n                        matrix[i][j] = '#' if i > 0 and matrix[i - 1][j] == '#' else '.'\n        if matrix == [[\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"], [\".\", \".\", \".\", \".\", \".\"]]:\n            break\n        for j in range(W):\n            for i in range(H):\n                if matrix[i][j] == '.':\n                    if i > 0 and matrix[i - 1][j] == '#':\n                        matrix[i][j] = matrix[i - 1][j]\n                    else:\n                        matrix[i][j] = '#' if j > 0 and matrix[i][j - 1] == '#' else '.'\n    return '\\n'.join([''.join(row) for row in matrix])\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list = [line for line in stdin.split('\\n')]\n    if input_list[0]!= \"\":\n        rows, cols = [int(n) for n in input_list[0].split()]\n    else:\n        rows, cols = 2, 2\n    matrix = []\n    for i in range(1, rows + 1):\n        row = input_list[i]\n        row = row.replace(\".\", \"0\")\n        row = row.replace(\"#\", \"1\")\n        matrix.append([int(n) for n in row])\n\n    output = \"\"\n    matrix = [row for row in zip(*matrix)]\n    while all(i == 0 for i in matrix[0]) or all(i == 0 for i in matrix[1]):\n        if all(i == 0 for i in matrix[0]):\n            matrix = matrix[1:]\n        elif all(i == 0 for i in matrix[1]):\n            matrix = matrix[:1] + matrix[2:]\n        else:\n            matrix = [[matrix[0][j] for j in range(len(matrix[0])) if matrix[0][j] == 0][0],\n                      [matrix[1][j] for j in range(len(matrix[1])) if matrix[1][j] == 0][0]]\n\n    for row in matrix:\n        output += \"\".join([\"#\" if n == 1 else \".\" for n in row]) + \"\\n\"\n    return output\n\n\nprint(solution(input()))"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the final state of the grid.\n    \"\"\"\n    \n    # read in data\n    h, w = map(int, stdin.split())\n    \n    # init output\n    output = []\n    \n    # iterate over rows\n    for i in range(h):\n        # append row to output\n        output.append(list(stdin.split()[i]))\n    \n    # iterate over cols\n    for i in range(w):\n        # iterate over rows\n        for j in range(h):\n            # if the col is all black\n            if output[j][i] == \"#\":\n                # break\n                break\n        # else if col is not all black, go to next col\n        else:\n            # append blank row to output\n            output.append([\" \"]*w)\n    \n    # iterate over cols\n    for i in range(h):\n        # iterate over rows\n        for j in range(w):\n            # if the col is all black\n            if output[j][i] == \"#\":\n                # break\n                break\n        # else if col is not all black, go to next col\n        else:\n            # iterate over rows\n            for k in range(w):\n                # if the col is all black\n                if output[k][i] == \"#\":\n                    # break\n                    break\n            # else if col is not all black, go to next col\n            else:\n                # append blank row to output\n                output.append([\" \"]*w)\n    \n    # print output\n    for i in range(w):\n        print(''.join(output[i]))\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split(\"\\n\")\n    h = int(input_lines[0].split(\" \")[0])\n    w = int(input_lines[0].split(\" \")[1])\n    grid = []\n    for i in range(1, h+1):\n        row = input_lines[i].split()\n        for element in row:\n            if element == \".\":\n                element = \" \"\n        row = \"\".join(row)\n        grid.append(row)\n    grid.append(\".\")\n    return grid\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get dimensions\n    h, w = map(int, stdin.split()[:2])\n\n    # Get all squares\n    squares = [[c == '#' for c in stdin.split()[2 * i: 2 * (i + 1)]] for i in range(h)]\n\n    # While there is a row or column that consists only of white squares, remove it and delete the space between the rows or columns.\n    while True:\n        # Keep track of the number of white squares in each row and column\n        white_row = [sum(s) for s in squares]\n        white_col = [sum(s[i] for s in squares) for i in range(w)]\n\n        # If no row or column consists of only white squares, return the grid as is\n        if sum(white_row) == 0 or sum(white_col) == 0:\n            return '\\n'.join(''.join('#' if s else '.' for s in row) for row in squares)\n\n        # Otherwise, remove the row or column with the most white squares\n        remove_row = white_row.index(max(white_row))\n        remove_col = white_col.index(max(white_col))\n\n        squares[remove_row] = [row[:remove_col] + row[remove_col + 1:] for row in squares[remove_row]]\n        for i in range(h):\n            squares[i][remove_col] = squares[i][remove_col][:remove_row] + squares[i][remove_col][remove_row + 1:]\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    h, w = map(int, stdin.split())\n    grid = []\n    for i in range(h):\n        row = stdin.split('\\n')[i+1].replace('.', '0').replace('#', '1')\n        grid.append(list(map(int, row)))\n    while 0 in grid[-1]: grid.pop()\n    while 0 in grid[0]: grid.pop(0)\n    while 0 in [i[-1] for i in grid]:\n        for row in grid: row.pop()\n    while 0 in [i[0] for i in grid]:\n        for row in grid: row.pop(0)\n    return '\\n'.join(''.join(map(str, i)) for i in grid)\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(line) for line in stdin.split('\\n')]\n    while True:\n        for row in range(len(grid)):\n            if '#' not in grid[row]:\n                continue\n            for col in range(len(grid[row])):\n                if grid[row][col] == '#':\n                    if row == len(grid) - 1:\n                        grid.pop(row)\n                    else:\n                        grid[row] = grid[row][:col] + grid[row][col + 1:]\n                    break\n            break\n        else:\n            return str('\\n'.join(''.join(row) for row in grid))\n        for col in range(len(grid)):\n            if '#' not in [grid[row][col] for row in range(len(grid))]:\n                continue\n            for row in range(len(grid)):\n                if grid[row][col] == '#':\n                    if col == len(grid) - 1:\n                        for row in range(len(grid)):\n                            grid[row].pop(col)\n                    else:\n                        for row in range(len(grid)):\n                            grid[row][col] = grid[row][col + 1]\n                    break\n            break\n"
    },
    {
        "number": 4314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split(' '))\n    grid = []\n    for _ in range(H):\n        grid.append(list(stdin.split('\\n')[1]))\n    print(grid)\n    \n    while True:\n        for row in range(H):\n            if '#' not in grid[row]:\n                continue\n            for col in range(W):\n                if grid[row][col] == '#':\n                    break\n            if grid[row][col] == '#':\n                for row2 in range(row, 0, -1):\n                    grid[row2][col] = grid[row2 - 1][col]\n                for col2 in range(col, 0, -1):\n                    grid[row2][col2] = grid[row2][col2 - 1]\n                grid[0][0] = '.'\n        else:\n            break\n        print(grid)\n    return '\\n'.join([''.join(row) for row in grid])\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return str(2 * 3.14 * radius)"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's guaranteed that R will be a positive integer number in range [1, 100]\n    import math\n    r = int(stdin)\n    c = 2 * math.pi * r\n    return str(c)"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679)\n\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    R = int(stdin.readline())\n    return f'{3.14159265358979 * R:.2f}'"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    r = float(stdin)\n    c = 2*math.pi*r\n    return c\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    circleradius = int(stdin.readline())\n    return str(2 * math.pi * circleradius)"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int) -> float:\n        n_2 = n*n\n        n_3 = n_2*n\n        n_4 = n_3*n\n        return 3*n_2*n_2-n_4\n    return str(round(2*math.pi*float(stdin), 2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R = stdin\n    import math\n    return str(math.pi * R)"
    },
    {
        "number": 4315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cir = (float(stdin))\n    pi = 3.14159\n    print(pi * cir ** 2)\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    if len(x) == 4:\n        if x.count('A') == 2:\n            if x.count('S') == 2:\n                print('Yes')\n                return\n    print('No')\n    return"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.replace(' ', '')\n    print(input_)\n    # your code here\n    return None"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(stdin) == 4 and stdin.count(stdin[0]) == 2 and stdin.count(stdin[2]) == 2 else 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if \"A\" in stdin and \"S\" in stdin else \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution function that gets input and outputs an appropriate answer.\n    \"\"\"\n    # This solution will work for the given input, however, the general solution\n    # will work for any input.\n    # This solution has O(1) time complexity.\n\n    # S[i] is the character at index i of S.\n    # S[i] must be one of the following:\n    # 1) the same as in S[i - 1] if the string is \"AAAB\"\n    # 2) the same as in S[i - 2] if the string is \"ABAB\"\n    # 3) the same as in S[i - 3] if the string is \"AAAA\"\n\n    # This solution has O(N) space complexity.\n    return stdin[0] == stdin[3] and stdin[1] == stdin[2] and stdin[0]!= stdin[1]\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    cnt = Counter(stdin)\n    # print(cnt)\n    cnt = dict(cnt)\n    # print(cnt)\n    x = list(cnt.values())\n    # print(x)\n    y = list(cnt.keys())\n    # print(y)\n    if len(x) == 2 and 2 * min(x) == max(x):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'Yes' if (set(list(stdin)) & set(list(stdin)) == set(list(stdin))) else 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin[0]\n    S = stdin[1]\n    cnt_A = sum([A.count(c) for c in A])\n    cnt_S = sum([S.count(c) for c in S])\n    if cnt_A == cnt_S and cnt_A == 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(set(stdin)) == 4 else \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    result = \"Yes\"\n    n = len(s)\n    for c in set(s):\n        if s.count(c) == 2:\n            result = \"No\"\n            break\n    print(result)\n    return result"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(-a - b, -(a - b), a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a + b, a - b, a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(-max(-a, -b), -min(a, b), -(a*b))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(-a - b, -a, a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(max(-a - b, -a, -a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(-a - b, -(a - b), -a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    return str(max(-a - b, -a, a * b))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    return str(max(a + b, a - b, a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    return str(max([int(a) + int(b), int(a) - int(b), int(a) * int(b)]))\n"
    },
    {
        "number": 4317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    print(-max(-a - b, a, -a * b))\n    return ''"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes input, returns solution as string to stdout'''\n    inns = [int(x) for x in stdin.split()]\n    inn_count = 0\n    for i in range(1, len(inns)):\n        if inns[i - 1] > inns[i]:\n            inn_count += 1\n    return str(inn_count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *mountains = map(int, stdin.split())\n    return sum(mountains[i] < mountains[i - 1] for i in range(1, len(mountains)))\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = list(map(int, stdin.split(\"\\n\")))\n    return str(sum(h[i] > h[i - 1] for i in range(1, n)))\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_split = stdin.splitlines()\n    n = int(input_split[0])\n    inns = [int(i) for i in input_split[1].split()]\n\n    c = 0\n    for i in range(n-1):\n        if inns[i] <= inns[i+1]:\n            c += 1\n\n    return c"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    h = list(map(int, stdin.readline().split()))\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if h[i] <= h[j]:\n                count += 1\n                break\n    \n    return str(count)"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    h = list(map(int, stdin[1].split()))\n    count = 0\n    for i in range(1, n):\n        if h[i - 1] <= h[i]:\n            count += 1\n    print(count)\n    return \"\""
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inns = [int(x) for x in stdin.split()]\n    inns_cnt = 0\n    for idx in range(1, len(inns)):\n        if inns[idx] >= inns[0]:\n            inns_cnt += 1\n    return str(inns_cnt)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = map(int, stdin.split())\n    s = 0\n    for i in range(1, n):\n        s += min(h[i - 1], h[i])\n    print(s)\n"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(1, len(x)):\n        if x[i-1] > x[i]:\n            cnt += 1\n    return cnt"
    },
    {
        "number": 4318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ... \"7\\n1 2 3 1 2 3 4\\n\"\n   ... )\n    '2\\n3 4\\n'\n    >>> solution(\n   ... \"4\\n1 1 1 1\\n\"\n   ... )\n    '4\\n1 1 1 1\\n'\n    >>> solution(\n   ... \"5\\n1 2 1 2 1\\n\"\n   ... )\n    '1\\n5\\n'\n    >>> solution(\n   ... \"5\\n1 2 1 2 1\\n\"\n   ... )\n    '3\\n2 2 1\\n'\n    \"\"\"\n    # numbers pronounced by Tanya\n    numbers = stdin.split('\\n')[1].split()\n    # the number of stairs Tanya climbs\n    stairs = int(numbers[0])\n    # the numbers Tanya pronounced while climbing\n    numbers = numbers[1:]\n\n    # build the steps of the staircases\n    steps = list()\n    for i in range(1, stairs + 1):\n        steps.append(i)\n    for i in range(stairs):\n        steps.append(stairs - i)\n    steps = set(steps)\n    # print(steps)\n\n    # The numbers Tanya pronounced while climbing\n    # as a set of unique numbers.\n    numbers = set(numbers)\n    # print(numbers)\n\n    # The number of staircases that Tanya climbed.\n    # The number of steps in each staircase.\n    count = 0\n    # the number of steps in each staircase\n    counts = list()\n    # The number of staircases that Tanya climbed.\n    for i in steps:\n        # print(i)\n        if i in numbers:\n            count += 1\n            counts.append(i)\n    # print(count)\n    # print(counts)\n\n    # Return the number of staircases that Tanya climbed.\n    return str(count) + '\\n' +''.join(map(str, counts))\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stairs = [int(c) for c in stdin.split(' ')]\n    result = [1] * n\n    for i in range(1, n):\n        if stairs[i] > stairs[i - 1]:\n            result[i] = 1 + result[i - 1]\n    return result\n\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return t, a, b, c\"\"\"\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'first line should be the number of staircases climbed, the second line should be the numbers spoken by Tanya in each step'\n    pass\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"Not found\" #your code here"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return 'To be implemented'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of stairways in the building Tanya climbed.\n    '''\n    lines = stdin.split('\\n')\n    num_steps = int(lines[0])\n    stairs = [int(line) for line in lines[1].split(' ')]\n    # Initialize a list to track the number of steps in each possible stairway\n    # the first stairway is the one we take for the first number, etc\n    stairs_with_steps = [1] * num_steps\n    # Loop through the stairs and find the number of steps in each possible stairway\n    for i in range(1, len(stairs)):\n        stairs_with_steps[i] += stairs_with_steps[i-1]\n        if stairs[i]!= stairs[i-1] + 1:\n            stairs_with_steps[i] -= 1\n    return f'{stairs_with_steps[-1]} {len(stairs_with_steps)}'\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of staircases that Tanya climbed.\n\n    :param stdin: The input string to process.\n    :return: The number of staircases that Tanya climbed.\n    '''\n    \n    n = int(stdin.split('\\n')[0])\n    staircase_numbers = stdin.split('\\n')[1].split(' ')\n    count = 0\n    current_count = 0\n    current_count_list = []\n    for i in range(n):\n        if int(staircase_numbers[i]) == current_count:\n            current_count += 1\n        elif current_count > 0:\n            current_count_list.append(current_count)\n            current_count = 1\n            count += 1\n        else:\n            current_count = 1\n    if current_count > 0:\n        current_count_list.append(current_count)\n        count += 1\n    return str(count) + '\\n' +''.join(map(str, current_count_list))\n"
    },
    {
        "number": 4319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    stairs = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    stairs_count = []\n    stairs_count.append(1)\n    for i in range(1, n):\n        stairs_count.append(stairs_count[-1] + stairs[i-1])\n    for i in range(n):\n        print(stairs_count[i])\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the Vova challenge\"\"\"\n    pass\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def helper(n):\n        k = 1\n        while k ** 2 <= n:\n            k += 1\n        return k - 1\n\n    for _ in range(int(stdin)):\n        n = int(stdin)\n        if n == 1:\n            print(1)\n            continue\n        k = helper(n)\n        ans = 1\n        while k:\n            ans *= 2\n            ans += 1\n            k -= 1\n        print(ans)\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n    num_cases = stdin.readline().split()\n    for case in range(num_test_cases):\n        print(solve_case(case, num_cases))\n\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns solution for exercise 2020 Day 02\n    \"\"\"\n    # read number of tests\n    num_of_tests = int(stdin)\n\n    # initialize variables\n    test_number = 1\n    num_of_wrappers = 0\n\n    # iterate over tests\n    while test_number <= num_of_tests:\n        num_of_wrappers = int(stdin)\n        count_of_wrappers = 1\n        wrappers_sum = 0\n        while count_of_wrappers < 13:\n            if wrappers_sum + (2 ** (count_of_wrappers - 1)) <= num_of_wrappers:\n                wrappers_sum += (2 ** (count_of_wrappers - 1))\n                count_of_wrappers += 1\n            else:\n                break\n\n        # create string with result\n        if wrappers_sum == num_of_wrappers:\n            print(f'{test_number} {count_of_wrappers}')\n        else:\n            print('-1')\n\n        test_number += 1\n\n    return ''"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    'Compute any x so that x + 2x + 4x +... + 2^kx = n.'\n    '@michaelstang: x = n - 2n + 2^k - 2(k-1)'\n    n = int(stdin)\n    k = 1\n    while True:\n        x = n - 2*n + 2**k - 2*(k-1)\n        if x >= 0:\n            break\n        k += 1\n    return str(x)\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the solution\n\n    Parameters\n    ----------\n    stdin : str\n        The input\n\n    Returns\n    -------\n    str\n        The solution\n    \"\"\"\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n = int(stdin.readline())\n        i = 1\n        while True:\n            if (i + 2) * i + (i + 1) * (i + 2) >= n:\n                k = i + 1\n                x = (k - 1) * (n - k * (k - 1) // 2) // (k - 1)\n                break\n            i += 1\n        print(x)\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while True:\n        vova = k * 2\n        if vova * (k + 1) <= n:\n            k += 1\n        else:\n            break\n    x = n - vova * k\n    return x\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    'compute any solution'\n\n\n    for test_case in stdin.split('\\n\\n'):\n        n = int(test_case)\n        ans = 0\n        k = 0\n        while n:\n            n, r = divmod(n, 2)\n            ans += r\n            if r:\n                k += 1\n        print(ans, k)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for _ in range(k):\n        result = result - 1\n        if result % 10 == 0:\n            result = result // 10\n    return result"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return '\\n'.join(map(str, list_numbers))\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = n\n    for _ in range(k):\n        if int(str(a)[-1])!= 0:\n            a = int(str(a)[:-1])\n        else:\n            a //= 10\n    return a\n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    result = n\n    for i in range(k):\n        result = result - 1\n        while result % 10 == 0:\n            result = result // 10\n    return result\n\n\n\n\n'''\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.strip().split(' ')]\n    if k == 1:\n        return str(n)\n    else:\n        k -= 1\n        while k > 0:\n            n //= 10\n            k -= 1\n        return str(n)"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        k -= 1\n        n = n // 10 if n % 10!= 0 else n // 10 - 1\n    return n"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0414\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e n. \u0415\u0441\u043b\u0438 n \u0431\u043e\u043b\u044c\u0448\u0435 \u0442\u044b\u0441\u044f\u0447\u0438, \u0442\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u043c \u043d\u0430 1000. \u0415\u0441\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0442\u044b\u0441\u044f\u0447\u0438, \u0442\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u043c \u043d\u0430 1000.\n    \u041f\u043e\u0434\u0435\u043b\u0438\u043c \u043f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u0435.\n    \u0415\u0441\u043b\u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0435 \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e, \u0442\u043e \u043e\u0431\u043d\u043e\u0432\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0447\u043b\u0435\u043d \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u043d\u043e\u043b\u044c.\n    \u0415\u0441\u043b\u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e, \u0442\u043e \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u043d\u0430 10, \u0443\u043c\u043d\u043e\u0436\u0438\u043c \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 \u0447\u043b\u0435\u043d\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 \u0447\u043b\u0435\u043d\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n    \u041f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c, \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u043d\u043e\u043b\u044c, \u0442\u043e \u0443\u043c\u043d\u043e\u0436\u0438\u043c \u043d\u0430 10, \u0443\u043c\u043d\u043e\u0436\u0438\u043c \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 \u0447\u043b\u0435\u043d\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u0441\u0443\u043c\u043c\u0443 \u0447\u043b\u0435\u043d\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n    \u0415\u0441\u043b\u0438 \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0440\u0430\u0432\u0435\u043d \u043d\u0443\u043b\u044e, \u0442\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0446\u0438\u043a\u043b.\n    '''\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n\n    if n > 10**9:\n        n = n*1000\n    if n < 10**9:\n        n = n*1000\n\n    n = int(n/10)\n\n    while k > 0:\n        n, k = n/10, k - 1\n\n        if n > 10**9:\n            n = n*1000\n\n        if n < 10**9:\n            n = n*1000\n\n        n = int(n/10)\n\n    return int(n/10)\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    while k > 0:\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return n\n'''\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = ''\n    while k:\n        s = s.join(str(n % 10))\n        n = n // 10\n        k -= 1\n    print(int(s))\n\n\"\"\"\nfrom collections import deque\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Creates string of length equal to n\n    where i-th symbol is equal to \n    the height of the i-th person\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n\n    # sort heights in descending order\n    heights = sorted(heights, reverse=True)\n    \n    # set for storing the heights already seen\n    heightsSet = set()\n\n    i = 0\n    while i < n:\n        height = heights[i]\n        if height not in heightsSet:\n            heightsSet.add(height)\n            i += 1\n        else:\n            heights.pop(i)\n\n    # append remaining heights to the output string\n    heights = list(map(str, heights))\n    heights = \" \".join(heights)\n    return heights"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import sys\n    sys.setrecursionlimit(10 ** 6)\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    arr = [int(i) for i in stdin[1].split()]\n    arr.sort()\n    start = 0\n    end = n - 1\n    ans = 0\n    while start < end:\n        if arr[start] + arr[end] > arr[end] + arr[start]:\n            end -= 1\n            ans += 1\n        else:\n            start += 1\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(arr: list, x: int, low: int, high: int, key: int) -> int:\n        if low > high:\n            return -1\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            return binary_search(arr, x, mid + 1, high, key)\n        elif arr[mid] > x:\n            return binary_search(arr, x, low, mid - 1, key)\n        else:\n            if mid == 0:\n                return mid\n            elif key == 0:\n                return mid\n            else:\n                return binary_search(arr, x, mid + 1, high, key - 1)\n    \n    n = int(stdin.readline().strip())\n    arr = sorted([int(i) for i in stdin.readline().strip().split(' ')])\n    k = 1\n    for i in range(n):\n        key = binary_search(arr, i + 1, 0, len(arr) - 1, k)\n        if key == -1:\n            return str(k) + '\\n' + str(arr[i])\n        k = key\n    return str(k) + '\\n' +''.join([str(i) for i in arr])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the circular array problem\"\"\"\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\n    input_values = stdin.split(\"\\n\")\n\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    # \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n    n = int(input_values[0])\n    a_array = [int(i) for i in input_values[1].split()]\n\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0430_array\n    # \u0438 \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043e\u0442\u0440\u0435\u0437\u043e\u043a\n    max_range = 0\n    max_range_id = 0\n    for id, a in enumerate(a_array):\n        if max_range < abs(a - a_array[(id + 1) % n]):\n            max_range = abs(a - a_array[(id + 1) % n])\n            max_range_id = id\n\n    # \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0438\u0441\u043a\u043e\u043c\u043e\u0433\u043e \u043d\u0430\u0447\u0430\u043b\u0430 \u0438 \u043a\u043e\u043d\u0446\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0430\n    # \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0438\u0445 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n    return str(max_range_id + 1) + \" \" + str(a_array[max_range_id])\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().strip().split(' ')]\n    dp = [0] * len(nums)\n    dp[0] = 1\n    for i in range(1, len(nums)):\n        max_ = 0\n        for j in range(i):\n            if abs(nums[i] - nums[j]) <= 1:\n                max_ = max(max_, dp[j])\n        dp[i] = max_ + 1\n    print(max(dp))\n    print(' '.join([str(x) for x in dp]))\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, *a = map(int, stdin.splitlines()[1:])\n    # get prefix sum\n    p = list(accumulate(a))\n    # find the maximum k\n    k = 0\n    m = 0\n    for i in range(n):\n        # compare the prefix sum with the average\n        if p[i] - m > p[i] / 2:\n            k += 1\n            m = p[i]\n    # check if k is even or odd\n    if k % 2 == 0:\n        # calculate the average for odd k\n        m = (p[-1] - p[0]) / k\n        # calculate the diff between prefix sum and average\n        d = p[-1] - m * k\n    else:\n        # calculate the average for even k\n        m = (p[-1] - p[0]) / k\n        # calculate the diff between prefix sum and average\n        d = p[-1] - m * k + p[0]\n    # print answer\n    print(k, *[i + m for i in p[k // 2:]])\n    return ''\n\nfor test in (test_data_one, test_data_two, test_data_three):\n    print(solution(test))"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    n = len(a)\n    ans = []\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], dp[i - 1] + 1)\n        for j in range(i - 2, -1, -1):\n            if abs(a[i] - a[j]) <= 1:\n                dp[j] = max(dp[j], dp[i - 1] + 1)\n        ans.append(dp[0])\n    ans.append(dp[0])\n    print(ans[-1])\n    print(*ans[::-1])\n\nsolution(input())\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    total = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n\n    curr = 0\n    max = 0\n    for i in range(1, total + 1):\n        curr += arr[i - 1]\n        if max < curr:\n            max = curr\n            result = [arr[i - 1]]\n        elif max == curr:\n            result.append(arr[i - 1])\n\n    return f\"{len(result)}\\n{result}\"\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem \"Ivan's flash drive\".\n\n    Parameters\n    ----------\n    stdin : str\n        Input of the problem.\n\n    Returns\n    -------\n    str\n        The solution to the problem.\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n = list(map(int, stdin.split()))\n    songs = [tuple(map(int, stdin.split())) for _ in range(n)]\n\n    return ''\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    songs = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [0 for _ in range(m + 1)]\n    for song in songs:\n        if song[1] > m:\n            continue\n        for i in range(m, song[0] - 1, -1):\n            dp[i] = max(dp[i], dp[i - song[0]] + song[1])\n\n    if dp[-1] < m:\n        return \"-1\"\n    return str(dp[-1])\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 16\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4\n   ... ''')\n    '2'\n    >>> solution('''4 16\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4\n   ... ''')\n    '-'\n    >>> solution('''4 16\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4\n   ... ''')\n    '2'\n    >>> solution('''4 16\n   ... 10 8\n   ... 7 4\n   ... 3 1\n   ... 5 4\n   ... ''')\n    '2'\n    \"\"\"\n    total_size, m = list(map(int, stdin.split(' ')))\n    sizes = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(total_size)]\n    sizes.sort(key=lambda x: x[0])\n    current_sum = 0\n    for size in sizes:\n        current_sum += size[1]\n        if current_sum > m:\n            return '-'\n    return len(sizes)"
    },
    {
        "number": 4323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import Dict\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # solution...\n\nsolution(stdin)\n\n\n-----Testcases-----\n\nInput #1\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n\nOutput #1\ntleelte\nqwerty\nvvvvvv\nabcde\n\nInput #2\n9 5 3\n10 1 1\n10 10 1\n9 4 2\n\nOutput #2\ntictactoe\ntacgtoe\ntactot\ntacat\ntacba\ntaceb\ntacea\ntaccb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\ntaceb\ntacea\ntaccb\nt"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def in_all(a: str, b: str, c: str):\n        res = True\n        for letter in a:\n            if letter not in b:\n                res = False\n        for letter in b:\n            if letter not in c:\n                res = False\n        return res\n\n    def construct_string(a: int, b: int, c: int):\n        if a < b:\n            return []\n        if a == b and b == c:\n            return [\"a\"]\n        if a == b and b < c:\n            return [\"a\" * b]\n        s = []\n        if a < c:\n            s.append(\"a\" * a)\n            if b > 0:\n                s.append(\"a\" * b)\n        else:\n            s.append(\"a\" * (c - 1))\n            if b > 1:\n                s.append(\"a\" * (b - 1))\n        return s\n\n    n, a, b = [int(x) for x in stdin.split(\" \")]\n    s = construct_string(a, b, n)\n    while len(s) > 1:\n        new_s = []\n        for x in s:\n            if x.count(\"a\") >= a:\n                new_s.append(x)\n        s = new_s\n\n    return s[0]\n\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    length, sub_length, distinct_sub_length = map(int, stdin.split())\n    string = list(map(chr, [i for i in range(97, 97 + length)]))\n    subs = []\n    for i in range(0, len(string) - sub_length + 1):\n        subs.append(\"\".join(string[i:i + sub_length]))\n    for sub in subs:\n        if len(set(sub)) == distinct_sub_length:\n            print(sub)\n            break\n    '''\n    \n    length, a, b = map(int, stdin.split())\n    string = [chr(i) for i in range(97, 97 + length)]\n    subs = []\n    for i in range(0, len(string) - a + 1):\n        subs.append(''.join(string[i:i + a]))\n    subs = list(set(subs))\n    print(subs)\n    for i in range(0, len(subs)):\n        if len(set(subs[i])) == b:\n            print(subs[i])\n            break\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 5 3\\n6 1 1\\n6 6 1\")\n    'tleelte'\n    >>> solution(\"7 5 3\\n6 1 1\\n6 6 1\")\n    'qwerty'\n    >>> solution(\"7 5 3\\n6 6 1\")\n    'vvvvvv'\n    >>> solution(\"7 5 3\\n6 2 1\")\n    'abcde'\n    \"\"\"\n    t, n, a, b = map(int, stdin.split())\n    if a > n or b > min(a, 26):\n        return \"IMPOSSIBLE\"\n    result = []\n    for i in range(n - a + 1):\n        count = set()\n        for c in stdin[i:i + a]:\n            count.add(c)\n        if len(count) == b:\n            result.append(stdin[i:i + a])\n    return \"\".join(sorted(result)[0])\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n"
    },
    {
        "number": 4324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns how long it takes to make n takoyaki\n    '''\n    num_takoyaki = int(stdin.split()[0])\n    num_min = int(stdin.split()[1])\n    num_seconds = int(stdin.split()[2])\n\n    return num_min * 60 + num_seconds - num_takoyaki * num_min\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    N, X, T = stdin.split(' ')\n    return str(N * T)"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,x,t = map(int,stdin.split())\n    return n-1+x+t//x\n\nprint(solution(\"20 12 6\"))\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return min(x, n // t) * t + (n % t) * x\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,x,t = [int(i) for i in stdin.split('\\n')[0].split()]\n    return str(max(0,n*t - x*(x+1)//2))\n\n### Submission:\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '''\n    x = int(stdin.readline().strip().split(\" \")[0])\n    t = int(stdin.readline().strip().split(\" \")[0])\n    n = int(stdin.readline().strip())\n    return str(n * t // x)\n    '''\ndef"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = list(map(int, stdin.split(' ')))\n    return T * X / N\n"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = map(int, stdin.split())\n    return str(x * t + n // x * t)"
    },
    {
        "number": 4325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, t = [int(v) for v in stdin.split(\" \")]\n    return str(t + (n - 1) * ((x - 1) * t + 1))\n\nimport numpy as np\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # you can take input from stdin\n    # you can print to stdout for debugging purposes\n    # using print statements to debug code is not recommended\n    stdin = stdin.strip()\n    stdin = int(stdin)\n    l = []\n    for i in range(stdin):\n        l.append(i)\n    if len(l) == 1:\n        return str(0)\n    if len(l) == 2:\n        return str(1)\n    else:\n        x = 0\n        y = len(l) - 1\n        while y >= x:\n            if len(l[x:y+1]) >= 3:\n                x += 1\n            else:\n                y -= 1\n        return str(y - x + 1)\n    pass\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return output\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    print(n // 3 + (n % 3 > 0))\n    return ''"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 3!= 0:\n        return n // 3 + 1\n    return n // 3\n------\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # YOUR CODE HERE\n    return \"2\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    groups = 0\n    for i in range(1, N+1):\n        if N % i == 0:\n            groups += 1\n    return str(groups)\n"
    },
    {
        "number": 4326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    if N <= 4:\n        return N\n    return ceil(N / 3)\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    return int(a / p) if a % p == 0 else int(a / p) + 1\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.readline().split())\n    return str(a // p)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    return str(A // P + (A % P > 0))\n"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, P = stdin.split(\" \")\n    A = int(A)\n    P = int(P)\n    count = 0\n    for i in range(A // P + 1):\n        if i * P > A:\n            break\n        count += 1\n    print(count)"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    \n    return '{}'.format(a // 3 + (a % 3 == 0))\n\n------Test Case 0--------\n\nInput:\n1 3\nOutput:\n3\n\n------Test Case 1--------\n\nInput:\n6 4\nOutput:\n2\n\"\"\"\n\nimport unittest\nimport math"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, P = [int(x) for x in stdin.split()]\n    return str(P // A)"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    print((A+1)//P)"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  \n\"\"\"\n\nfrom collections import deque\nfrom math import ceil, sqrt\n\n\ndef"
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    A, P = map(int, stdin.split())\n    print(A // 3 + 1 if A % 3 == 0 else A // 3 + 2)\n    return ''"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if B % A == 0:\n        return str(A + B)\n    return str(B - A)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    return str(A + B) if B % A == 0 else str(B - A)\n\"\"\"\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        print(b - a)\n    else:\n        print(a + b)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    a, b = map(int, stdin.split())\n    # if a is divisible by b, then it should be a + b\n    if a % b == 0:\n        return str(a + b)\n    # if not, then it should be b - a\n    return str(b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a + b) if b % a == 0 else str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        return a + b\n    else:\n        return b - a\n"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        print(b-a)\n    elif a < b:\n        print(a+b)\n    else:\n        print(a+b)"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split(\" \")]\n    if B % A == 0:\n        return str(A + B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the exercise.\"\"\"\n    # Validate the input\n    numbers = stdin.split('\\n')\n    a, b = int(numbers[0]), int(numbers[1])\n    if a >= b:\n        raise ValueError(\"a must be smaller than b\")\n\n    return str(a + b) if b % a == 0 else str(b - a)\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[-1] == 'z' and stdin[:-1] == 'chokudai' else 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0] + stdin.split()[1][0]\n\"\"\"\n\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = s[:-1] + s[-1].upper()\n    return s if t!= s else 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if t.startswith(s + 'z'):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    str1 = stdin.split('\\n')[0]\n    str2 = stdin.split('\\n')[1]\n    if len(str2) > len(str1) + 1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    user_input = stdin.splitlines()\n    s = user_input[0]\n    t = user_input[1]\n    return 'Yes' if t[:-1] == s else 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin.split())[1][-1] + solution(stdin.split()[0]) if len(stdin.split()) > 1 else 'a'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    T = stdin[1]\n    return 'Yes' if T == S+S[:len(T)-1] else 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.strip().split(\"\\n\")\n    return \"Yes\" if T == S + \"z\" else \"No\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(num) for num in stdin.split(' ')]\n    if abs(a - b) % 10!= 0:\n        return \"IMPOSSIBLE\"\n    return str(int((abs(a - b)) / 10))"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the solution to the problem\n    '''\n    A, B = map(int, stdin.readline().split(' '))\n    if A - B < 0:\n        if abs(A - B) % 2!= 0:\n            return 'IMPOSSIBLE'\n        return (A - B) // 2\n    if A - B > 0:\n        return A - B\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    low = min(a, b)\n    high = max(a, b)\n    for k in range(low, high):\n        if abs(a - k) == abs(b - k):\n            return str(k)\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return 'Impossible' if abs(a - b) % 2!= 0 else abs(a - b) // 2"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split(\" \")]\n    if abs(a - b) % 2 == 0:\n        return str(abs(a - b) // 2)\n    else:\n        return \"IMPOSSIBLE\"\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    # \u8981\u627e\u7684\u6570 K \u7684\u5dee\u8ddd\u4e3a B - K\n    # \u53f3\u8fb9 K \u518d\u51cf\u53bb\u5de6\u8fb9 A\n    # \u4f7f\u5f97\u5dee\u8ddd\u4e3a\u7b49\u4e8e\u53f3\u8fb9\u4e0e\u5de6\u8fb9 K \u505a\u5dee\n    for K in range(B):\n        if A - K == B - K:\n            return str(K)\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A = int(A)\n    B = int(B)\n    K = abs(A - B) // 2\n    if (abs(A - B) % 2)!= 0 or B <= K or A >= K:\n        return \"IMPOSSIBLE\"\n    return str(K)"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(int((abs(a - b) - abs(a + b)) / 2))"
    },
    {
        "number": 4330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    min_diff = abs(a - b)\n    max_diff = abs(a - b)\n    res = b\n    if a < b:\n        res = a\n    while (b - a) % min_diff!= 0:\n        res += min_diff\n    print(res)\n    return res\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 7 or int(str(n)[-1]) == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[-1] == \"7\" else \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    str_n = str(n)\n    return 'Yes' if '7' in str_n else 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if (stdin[-1] == \"7\") else \"No\"\n\n\ndef"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    # if n % 10 == 7:\n    #     return \"Yes\"\n    # else:\n    #     return \"No\"\n    #\n    # if \"7\" in str(n):\n    #     return \"Yes\"\n    # else:\n    #     return \"No\"\n    #\n    # if n % 10 == 7:\n    #     return \"Yes\"\n    # elif \"7\" in str(n):\n    #     return \"Yes\"\n    # else:\n    #     return \"No\"\n    return \"Yes\" if n % 10 == 7 else \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    print(\"Yes\" if n[-1] == \"7\" else \"No\")\n    return None"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    check7 = number.rfind('7')\n    if check7 > -1:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return \"Yes\" if int(n) % 10 == 7 else \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if '7' in stdin else 'No'\n    # or\n    # return 'Yes' if '7' in str(n) else 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 3:\n        return 'No'\n    if int(stdin[-1]) == 7:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n\n----"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.read())\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return \"Yes\" if s % 2 == 0 else \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    N = int(N)\n    S = 0\n    while N!= 0:\n        S += N % 10\n        N = N // 10\n    if S % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(int, stdin.split(\"\\n\")[0])) % int(stdin.split(\"\\n\")[1]) == 0 else \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(sum(int(d) for d in str(n)))\n    if n % int(s) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    while N > 0:\n        remainder = N % 10\n        count += remainder\n        N = N // 10\n    if count % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) % int(input()) == 0 else 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Yes' if sum(int(d) for d in str(a)) % b == 0 else 'No'"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_sum_of_digits(num: int) -> int:\n        s: int = 0\n        while num:\n            s += num % 10\n            num //= 10\n        return s\n    def is_divisible(num: int, div: int) -> bool:\n        return num % div == 0\n\n    N = int(stdin)\n    s = get_sum_of_digits(N)\n    return \"Yes\" if is_divisible(s, N) else \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin[0]\n    s = 0\n    for i in range(0, len(number)):\n        s += int(number[i])\n    if int(number) % s == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (x_1, y_1, x_2, y_2) = map(int, stdin.split())\n    (x_3, y_3) = (-y_2 + y_1, x_2 - x_1)\n    (x_4, y_4) = (y_2 - y_1, -x_2 + x_1)\n    return str(x_3) +'' + str(y_3) +'' + str(x_4) +'' + str(y_4)\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: input\n    :return: output\n    '''\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3 = (-y2 * (x1 - x2) + x1 * (y2 - y1)) / (y1 - y2)\n    y3 = (x2 - x1) / (y1 - y2)\n    x4 = (-y2 * (x1 - x2) - y1 * (x2 - x1)) / (y1 - y2)\n    y4 = -x2 / (y1 - y2)\n    return f'{x3} {y3} {x4} {y4}'\n\ntest_cases = [\n    '0 0 0 1', '1 1 1 1'\n]\n\nfor test_case in test_cases:\n    assert solution(test_case) == '1 -1 -1 0'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  x_1, y_1, x_2, y_2 = map(int, stdin.split())\n  return f'{-(x_1 - x_2)},{-(y_1 - y_2)},-{x_1 + x_2},{-(y_1 + y_2)}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return f'{(x1 + x2) // 2} {(y1 + y2) // 2}'\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3 = abs(x1 - x2)\n    y3 = abs(y1 - y2)\n    x4 = abs(y1 - y2)\n    y4 = abs(x1 - x2)\n    return f\"{x3} {y3} {x4} {y4}\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  X1, Y1, X2, Y2 = map(int, stdin.split())\n  X3 = (-Y1 + X2 * X1 * Y2 + X1 ** 2 * Y2 - X1 * Y1 ** 2) / (2 * (Y1 - Y2))\n  Y3 = (-X1 + X2 * Y1 * X2 + Y2 ** 2 * X1 - Y2 * X1 ** 2) / (2 * (X1 - X2))\n  X4 = (-Y1 + X2 * X1 * Y2 + Y1 ** 2 * X2 - Y1 * X1 ** 2) / (2 * (Y1 - Y2))\n  Y4 = (-X1 + X2 * Y1 * X2 + X1 ** 2 * Y2 - X2 * Y1 ** 2) / (2 * (X1 - X2))\n  return f\"{X3}, {Y3}, {X4}, {Y4}\"\n  \"\"\"\n\n  x1, y1, x2, y2 = map(int, stdin.split())\n  x3 = (-y1 + x2 * x1 * y2 + x1 ** 2 * y2 - x1 * y1 ** 2) / (2 * (y1 - y2))\n  y3 = (-x1 + x2 * y1 * x2 + y2 ** 2 * x1 - y2 * x1 ** 2) / (2 * (x1 - x2))\n  x4 = (-y1 + x2 * x1 * y2 + y1 ** 2 * x2 - y1 * x1 ** 2) / (2 * (y1 - y2))\n  y4 = (-x1 + x2 * y1 * x2 + x1 ** 2 * y2 - x2 * y1 ** 2) / (2 * (x1 - x2))\n  return f\"{x3},{y3},{x4},{y4}\"\n\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = stdin.split()\n    x_1, y_1, x_2, y_2 = int(x_1), int(y_1), int(x_2), int(y_2)\n    if x_1 == 0 and y_1 == 0:\n        return str(x_2) +'' + str(y_2) + '\\n' + str(x_1) +'' + str(y_1) + '\\n' + str(x_2) +'' + str(y_2)\n    if y_1 == 0:\n        x_3, x_4, y_3, y_4 = -x_1, x_1, -y_1, y_1\n    else:\n        y_3, y_4, x_3, x_4 = -y_1, y_1, -x_1, x_1\n    if x_2 == x_1:\n        return str(x_3) +'' + str(y_3) + '\\n' + str(x_3) +'' + str(y_3) + '\\n' + str(x_4) +'' + str(y_4)\n    else:\n        x_3, x_4 = x_3 + (x_2 - x_1) / abs(x_2 - x_1), x_4 + (x_2 - x_1) / abs(x_2 - x_1)\n        return str(x_3) +'' + str(y_3) + '\\n' + str(x_3) +'' + str(y_3) + '\\n' + str(x_4) +'' + str(y_4)\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3 = x_1 if x_1 == x_2 else x_2\n    y_3 = y_1 if y_1 == y_2 else y_2\n    x_4 = x_1 if x_1!= x_2 else x_2\n    y_4 = y_1 if y_1!= y_2 else y_2\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  x_1, y_1, x_2, y_2 = map(int, stdin.split())\n  return (x_1 - y_1, x_2 + y_2, -y_1, x_1 - y_2)\n\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n\n    if x1 == x2:\n        if y2 < y1:\n            x3 = x1\n            y3 = y1\n            x4 = x1\n            y4 = y2\n        else:\n            x3 = x1\n            y3 = y2\n            x4 = x1\n            y4 = y1\n    elif y1 == y2:\n        if x2 < x1:\n            x3 = x1\n            y3 = y1\n            x4 = x2\n            y4 = y2\n        else:\n            x3 = x2\n            y3 = y2\n            x4 = x1\n            y4 = y1\n    else:\n        if x1 < x2:\n            x3 = x1\n            y3 = y1\n            x4 = x2\n            y4 = y2\n        else:\n            x3 = x2\n            y3 = y2\n            x4 = x1\n            y4 = y1\n    return str(x3) + \" \" + str(y3) + \" \" + str(x4) + \" \" + str(y4)\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(sample_dataset()))\n    2 4\n    \"\"\"\n    # (1) \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445\n    s, t = stdin.split()\n    a, b = [int(i) for i in stdin.split()]\n\n    # (2) \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u043e\u0447\u043e\u043d\u043a\u043e\u0432, \u0443\u0434\u0430\u043b\u044f\u044f \u0432\u0441\u0435 \u0431\u043e\u0447\u043e\u043d\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0432\u044b\u0431\u043e\u0440\u0435\n    s_counter, t_counter = collections.Counter(s), collections.Counter(t)\n    result = 0\n    for _ in range(a):\n        if t_counter.get(stdin.rstrip(), None):\n            result += t_counter.get(stdin.rstrip(), 0)\n            del t_counter[stdin.rstrip()]\n        else:\n            break\n    for _ in range(b):\n        if s_counter.get(stdin.rstrip(), None):\n            result += s_counter.get(stdin.rstrip(), 0)\n            del s_counter[stdin.rstrip()]\n        else:\n            break\n    return f\"{result} {a + b - result}\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    a = int(stdin[0])\n    b = int(stdin[1])\n    if s == t:\n        return a+b\n    elif s == \"red\":\n        return a-1\n    elif t == \"red\":\n        return b-1\n    else:\n        return a+b\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    print(f'{S.count(\"blue\")} {T.count(\"red\")}')"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a - b) +'' + str(b - a)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split('\\n')\n    A, B = list(map(int, stdin.split()))\n    ans = list()\n    for i in range(A):\n        ans.append(S)\n    for i in range(B):\n        ans.append(T)\n    return''.join(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    a = int(inp[0].split(' ')[0])\n    b = int(inp[0].split(' ')[1])\n    s = inp[1]\n    t = inp[2]\n    c = 0\n    d = 0\n    for i in range(a):\n        if s in inp[i + 3]:\n            c += 1\n        if t in inp[i + 3]:\n            d += 1\n    print(str(c) +'' + str(d))\n    return ''"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    S, T = stdin.split(\"\\n\")\n    return f\"{int(S.count(S[0]) - S.count(S[0].replace(S[0], T[0])))} {int(T.count(T[0]) - T.count(T[0].replace(T[0], S[0])))}\""
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('red blue\\n3 4\\nred')\n    2 4\n    \"\"\"\n    balls = stdin.split(\"\\n\")\n    s = balls[0]\n    t = balls[1]\n    u = balls[2]\n    ans = 0\n    for i in range(0, len(balls[0])):\n        if balls[0][i] == balls[2][i]:\n            ans += 1\n    for j in range(0, len(balls[1])):\n        if balls[1][j] == balls[2][j]:\n            ans += 1\n    print(ans, ans)\n    return \"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    s, t = stdin.split()\n    print(s.count('red'), t.count('blue'))\n"
    },
    {
        "number": 4334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input from standard input.\n\n    Parameters:\n    stdin (str): The input.\n\n    Returns:\n    str: The solution for the input.\n    \"\"\"\n    # Get the input\n    s, t, a, b = map(int, stdin.split())\n    # Get the number of balls S and T\n    # s = balls with S\n    # t = balls with T\n    s = s - a\n    t = t - b\n    # Return the answer\n    return \"{} {}\".format(s, t)\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_string = int(stdin.readline())\n    string = stdin.readline()\n\n    if num_of_string < 2:\n        print(\"No\")\n        return\n\n    if string[0] == string[num_of_string - 1]:\n        if string == string[0] * num_of_string:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split('\\n')\n    N, S = int(N), S\n    if N == 1:\n        return 'Yes' if S == S[::-1] else 'No'\n    half = len(S)//2\n    return 'Yes' if S[:half] == S[:half][::-1] and S[half:] == S[half:][::-1] else 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    t = ''\n    for i in range(n):\n        t += s[i]\n    if t == (t[::-1]):\n        print('Yes')\n    else:\n        print('No')\n    return ''\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #    :type S: str\n    #    :type T: str\n    #    :rtype: str\n    s = stdin.split(\"\\n\")\n    s = s[0].split(\" \")\n    n = int(s[0])\n    s = s[1]\n    T = \"\"\n    for i in range(n):\n        T += s[i]\n    if s == T + T:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s == s[::-1]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return ''\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # -------------------------- EDIT HERE -------------------------- #\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return 'Yes'\n    for i in range(n):\n        for j in range(n):\n            if i + j == n:\n                if s[i:i+j] * 2 == s:\n                    return 'Yes'\n                else:\n                    return 'No'\n    # -------------------------- EDIT HERE -------------------------- #\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    s = input[1]\n\n    half = len(s) // 2\n\n    if s[:half] == s[half:]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin[:n]\n    print(\"YES\" if t * 2 == stdin else \"NO\")\n    \n"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    \n    return 'Yes' if N == len(S) and S[:N // 2] * 2 == S else 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n\n    def is_valid(s):\n        return len(s) % 2 == 0 and all(s[i] == s[-(i + 1)] for i in range(int(len(s) / 2)))\n\n    return \"Yes\" if is_valid(s) else \"No\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = list(map(int, stdin.split()))\n    return f\"{max(0, (W - abs(x)) * (H - abs(y)))} 0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = input()\n    input = stdin.split(' ')\n    w, h, x, y = int(input[0]), int(input[1]), int(input[2]), int(input[3])\n\n    def area(x, y, w, h):\n        return w*h\n\n    area_s = area(x, y, w, h)\n    if area_s < (w-x) * (h-y):\n        return str(area_s)\n    else:\n        return '0'\n    \n    def check(x, y, w, h):\n        return (x+w) * (y+h) - ((w-x) * (h-y))\n    \n    x, y, w, h = 0, 0, w, h\n    s = set()\n    while x <= w and y <= h:\n        s.add(check(x, y, w, h))\n        x += 1\n        y += 1\n\n    return str(max(s)) if len(s) > 1 else '0'"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = [int(s) for s in stdin.split()]\n    if x > W or y > H:\n        return '0.0 0'\n    if x == 0 and y == 0:\n        return f'{max(W, H) * H:.9f} {1}'\n    if x == 0 or y == 0:\n        return f'{max(W, H) * min(x, y):.9f} {1 if min(x, y) > max(W, H) else 0}'\n    if x == W:\n        return f'{H * y:.9f} {1 if y > H else 0}'\n    if y == H:\n        return f'{W * x:.9f} {1 if x > W else 0}'\n    return f'{W * H - (x * y):.9f} {1 if x * y <= W * H else 0}'\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Gets the input from the standard input, runs the\n    algorithm and returns the output to standard output.\n    '''\n    w, h, x, y = [int(i) for i in stdin.split(' ')]\n    # area of the rectangle\n    a = w * h\n    # area of the part that is smaller than the rectangle\n    b = 0\n    # area of the part that is greater than the rectangle\n    c = 0\n    # new area of the smaller part\n    d = 0\n    # new area of the greater part\n    e = 0\n    # if the point is (0,0), the area of the smaller part is\n    # the rectangle area\n    if x == 0 and y == 0:\n        b = a\n    # if the point is (0,0), the area of the smaller part is\n    # 0\n    elif x == 0 and y!= 0:\n        b = 0\n    # if the point is (0,0), the area of the smaller part is\n    # 0\n    elif x!= 0 and y == 0:\n        b = 0\n    else:\n        # area of the smaller part\n        b = (x * y)\n        # area of the greater part\n        c = a - b\n        # area of the smaller part\n        d = (x * y)\n        # area of the greater part\n        e = a - d\n    # if the area of the smaller part is greater than the area of the\n    # greater part, swap them\n    if b > c:\n        # swap them\n        temp = b\n        b = c\n        c = temp\n        temp = d\n        d = e\n        e = temp\n    # if the area of the smaller part is equal to the area of the\n    # greater part, the point is in the middle of the rectangle\n    if b == c:\n        return '{:.9f} 1'.format(b)\n    # the point is not in the middle, so the point is on the border\n    else:\n        # return the area of the smaller part\n        return '{:.9f} 0'.format(b)"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = [int(n) for n in stdin.split()]\n    a = w * h - (x + y) * (x - y)\n    if a < 0:\n        return 0\n    return a / min(x, y)\n\n\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible area of the part if there are multiple ways to cut it\"\"\"\n    W, H, x, y = [int(num) for num in stdin.split(\" \")]\n    if W < x or H < y:\n        return \"0\"\n\n    area = min(x, W - x) * min(y, H - y)\n    remaining_width = W - x - area\n    remaining_height = H - y - area\n\n    if remaining_width < 0 or remaining_height < 0:\n        return \"0\"\n    if remaining_width >= remaining_height:\n        return f\"{remaining_height} {'0' if remaining_width < 0 else remaining_width}\"\n    return f\"{remaining_width} {'0' if remaining_height < 0 else remaining_height}\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The maximum possible area of the part whose area is not larger than that of the other\"\"\"\n    [W, H, x, y] = [int(x) for x in stdin.split()]\n    max_area = max(W - x, x, H - y, y)\n    if max_area == 0:\n        return \"0.0 0\"\n    max_area = max_area ** 2\n    if max_area <= W * H:\n        return f\"{max_area} 0\"\n    return f\"{max_area} 1\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    W, H, x, y = list(map(int, stdin.readline().strip().split()))\n    '''\n    W, H, x, y = map(int, stdin.readline().strip().split())\n    if y <= 0:\n        y = 0\n    if x <= 0:\n        x = 0\n    if y >= H:\n        y = H - 1\n    if x >= W:\n        x = W - 1\n    a = min(y, H - y)\n    b = min(x, W - x)\n    area = a * b\n    print(area, end=' ')\n    if area < W * H:\n        print(1)\n    else:\n        print(0)"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\nfrom decimal import Decimal\nimport math\n\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 3 1 2''')\n    3.0\n    >>> solution('''1 1 1 1''')\n    0.0\n    >>> solution('''1 1 1 10''')\n    8.0\n    \"\"\"\n    w, h, x, y = [int(i) for i in stdin.split(' ')]\n    dist = sorted([w - x, h - y])\n    return f\"{dist[1] * min(dist[1] + dist[0], dist[0] + dist[1]):.9f}\" if dist[0] + dist[1] < dist[1] * dist[0] else f\"{0:.9f}\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = map(str.strip, stdin.split(\"\\n\"))\n    n = int(n)\n    S = set(s)\n    if len(S) == 4:\n        return \"Four\"\n    elif len(S) == 3:\n        return \"Three\"\n    else:\n        return \"\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 3 or N > 100:\n        return ''\n    S = [stdin[i] for i in range(len(stdin)) if stdin[i]!='']\n    if N == 3:\n        if S.count('G') >= 1 and S.count('P') >= 1 and S.count('W') >= 1:\n            return 'Three'\n        elif S.count('G') >= 1 and S.count('P') >= 1 and S.count('W') >= 2:\n            return 'Three'\n        elif S.count('G') >= 1 and S.count('P') >= 2 and S.count('W') >= 1:\n            return 'Three'\n        elif S.count('G') >= 1 and S.count('P') >= 2 and S.count('W') >= 2:\n            return 'Three'\n        elif S.count('P') >= 1 and S.count('W') >= 1 and S.count('G') >= 1:\n            return 'Three'\n        elif S.count('P') >= 2 and S.count('W') >= 1 and S.count('G') >= 1:\n            return 'Three'\n        elif S.count('P') >= 1 and S.count('W') >= 2 and S.count('G') >= 1:\n            return 'Three'\n        elif S.count('P') >= 1 and S.count('W') >= 1 and S.count('G') >= 2:\n            return 'Three'\n        elif S.count('P') >= 1 and S.count('W') >= 1 and S.count('G') >= 2:\n            return 'Three'\n        elif S.count('P') >= 2 and S.count('W') >= 2 and S.count('G') >= 1:\n            return 'Three'\n        elif S.count('P') >= 1 and S.count('W') >= 2 and S.count('G') >= 2:\n            return 'Three'\n        elif S.count('W') >= 1 and S.count('G') >= 1 and S.count('P') >= 1:\n            return 'Three'\n        elif S.count('W') >= 2 and S.count('G') >= 1 and S.count('P') >= 1:\n            return 'Three'\n        elif S.count('W') >= 1 and S.count('G') >= 2 and S.count('P') >= 1:\n            return 'Three'\n        elif S.count('W') >= 1 and S.count('G') >= 1 and S.count('P') >= 2:\n            return 'Three'\n        elif S.count('W') >= 2 and S.count('G') >= 1 and S.count('P') >= 2:\n            return 'Three'\n        elif S.count('G') >= 2 and S.count('P') >= 1 and S.count('W') >= 1:\n            return 'Three'\n        elif S.count('G') >= 1 and S.count('P') >= 1 and S.count('W') >= 2:\n            return 'Three'\n        elif S.count('G') >= 2 and S.count('P') >= 2 and S.count('W') >= 1:\n            return 'Three'\n        elif S.count('G') >= 1 and S.count('P') >= 2 and S.count('W') >= 2:\n            return 'Three'\n        elif S.count('G') >= 2 and S.count('P') >= 1 and S.count('W') >= 2:\n            return 'Three'\n        else:\n            return ''\n    else:\n        if S.count('G') >= 1 and S.count('P') >= 1 and S.count('W') >= 1:\n            return 'Four'\n        elif S.count('G') >= 1 and S.count('P') >= 1 and S.count('W') >= 2:\n            return 'Four'\n        elif S.count('G') >= 1 and S.count('P') >= 2 and S.count('W') >= 1:\n            return 'Four'\n        elif S.count('G') >= 1 and S.count('P') >= 2 and S.count('W') >= 2:\n            return 'Four'\n        elif S.count('P') >= 1 and S.count('W') >= 1 and S.count('G') >= 1:\n            return 'Four'\n        elif S.count('P') >= 2 and S.count('W') >= 1 and S.count('G') >= 1:\n            return 'Four'\n        elif S.count('P') >= 1 and S.count('W') >= 2 and S.count('G') >= 1:\n            return 'Four'\n        elif S.count('P') >= 1 and S.count('W') >= 1 and S.count('G') >= 2:\n            return 'Four'\n        elif S.count('P') >= 2 and S.count('W') >= 2 and S.count('G') >= 1:\n            return 'Four'\n        elif S.count('P') >= 1 and S.count('W') >= 2 and S.count('G') >= 2:\n            return 'Four'\n        elif S.count('W') >= 1 and S.count('G') >= 1 and S.count('P') >= 1:\n            return 'Four'\n        elif S.count('W') >= 2 and S.count('G') >= 1 and S.count('P') >= 1:\n            return 'Four'\n        elif S.count('W') >= 1 and S.count('G') >= 2 and S.count('P') >= 1:\n            return 'Four'\n        elif S.count('W') >= 1 and S.count('G') >= 1 and S.count('P') >= 2:\n            return 'Four'\n        elif S.count('W') >= 2 and S.count('G') >= 1 and S.count('P') >= 2:\n            return 'Four'\n        elif S.count('W') >= 1 and S.count('G') >= 2 and S.count('P') >= 1:\n            return 'Four'\n        elif S.count('W') >= 1 and S.count('G') >= 2 and S.count('P') >= 2:\n            return 'Four'\n        elif S.count('G') >= 2 and S.count('P') >= 1 and S.count('W') >= 1:\n            return 'Four'\n        elif S.count('G') >= 1 and S.count('P') >= 1 and S.count('W') >= 2:\n            return 'Four'\n        elif S.count('G') >= 2 and S.count('P') >= 1 and S.count('W') >= 2:\n            return 'Four'\n        elif S.count('G') >= 1 and S.count('P') >= 2 and S.count('W') >= 1:\n            return 'Four'\n        elif S.count('G') >= 2 and S.count('P') >= 2 and S.count('W') >= 1:\n            return 'Four'\n        elif S.count('G') >= 2 and S.count('P') >= 1 and S.count('W') >= 2:\n            return"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\\nG W Y P Y W\")\n    'Four'\n    \"\"\"\n    b = stdin.split()\n    print('Three' if len(set(b)) == 3 else 'Four')\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.split())\n    num = int(s[0])\n    s = set(s[1:])\n    if len(s) == 3:\n        return \"Three\"\n    elif len(s) == 4:\n        return \"Four\"\n    return None"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string: str = stdin.split(\"\\n\")[1]\n    count: dict = {\n        'pink': 0,\n        'white': 0,\n        'green': 0,\n        'yellow': 0\n    }\n    for char in string:\n        if char == 'G':\n            count['green'] += 1\n        elif char == 'W':\n            count['white'] += 1\n        elif char == 'P':\n            count['pink'] += 1\n        elif char == 'Y':\n            count['yellow'] += 1\n\n    if count['green'] >= 1 and count['white'] >= 1 and count['pink'] >= 1:\n        return 'Four'\n    elif count['green'] >= 1 and count['white'] >= 1:\n        return 'Three'\n    return 'Two'\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    colors = stdin.split()\n    colors = [color.lower() for color in colors]\n    if len(colors) == 3 or len(colors) == 4:\n        if colors.count(\"w\") == 3:\n            return 'Four'\n        if colors.count(\"y\") == 3:\n            return 'Four'\n        if colors.count(\"p\") == 3:\n            return 'Three'\n        if colors.count(\"g\") == 3:\n            return 'Three'\n    else:\n        return 'Invalid Input'"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    color_count = collections.Counter(stdin)\n    if len(color_count) == 3:\n        print(\"Three\")\n    elif len(color_count) == 4:\n        print(\"Four\")\n    else:\n        raise ValueError(\"Input does not match the requirements\")"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given the input of N S_i, where S_i is the color of the i-th arare in the bag,\n    the task is to return \"Three\" if the bag contains arare in three colors,\n    or \"Four\" if the bag contains arare in four colors.\n    \"\"\"\n    N = int(stdin.readline())\n    s = [c for c in stdin.readline().split()]\n\n    if N == 3:\n        colors = {'P': 0, 'W': 0, 'G': 0, 'Y': 0}\n    elif N == 4:\n        colors = {'P': 0, 'W': 0, 'G': 0, 'Y': 0}\n    else:\n        colors = {'P': 0, 'W': 0, 'G': 0, 'Y': 0}\n\n    for c in s:\n        colors[c] += 1\n\n    if N == 3:\n        return \"Three\" if colors['P'] > 0 and colors['W'] > 0 and colors['G'] > 0 else \"Four\"\n    else:\n        return \"Four\" if colors['P'] > 0 and colors['W'] > 0 and colors['G'] > 0 and colors['Y'] > 0 else \"Three\"\n"
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    if n % 3 == 0:\n        return \"Three\"\n    elif n % 4 == 0:\n        return \"Four\"\n    else:\n        return \"Two\""
    },
    {
        "number": 4337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    s = set(s)\n    print(\"Four\" if len(s)==4 else \"Three\")"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, stdin))"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    dur = list(map(int, stdin.split()))\n    dur = [max(0, x - d) for d in dur]\n    m = 0\n    count = 0\n    for i in range(n):\n        if dur[i] == 0:\n            count += 1\n        elif dur[i] > m:\n            count = 1\n            m = dur[i]\n    return count\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn, x, y = [int(x) for x in stdin.split()]\na = [int(x) for x in stdin.split()][1:]\n\ns = [max(0, x - y) for x in a]\nc = 0\nfor i in range(n):\n    s[i] = max(0, s[i] + y)\n    c += s[i] == 0\n\nprint(c)"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    return \"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    doors = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n):\n        if doors[i] - x <= 0:\n            result += 1\n        else:\n            doors[i] -= x\n        if doors[i] + y > 0:\n            result += 1\n        else:\n            doors[i] += y\n    return result\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, x, y = [int(n) for n in stdin.split(' ')]\n    return str(a)\n"
    },
    {
        "number": 4338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_topics = int(stdin.readline())\n    t = list(map(int, stdin.readline().strip().split(' ')))\n    s = list(map(int, stdin.readline().strip().split(' ')))\n    ans = 0\n    for i in range(num_topics - 1):\n        for j in range(i + 1, num_topics):\n            if t[i] + t[j] > s[i] + s[j]:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    a_plus_b = [a[i] + b[i] for i in range(n)]\n    return a_plus_b.count(max(a_plus_b))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for problem \"Count Good Pairs\"\n    \"\"\"\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    a = list(map(int, input[1].split()))\n    b = list(map(int, input[2].split()))\n    return a.count(max(a)) * b.count(min(b))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.strip()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1:-1].split()))\n    b = list(map(int, stdin[-1].split()))\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    # write your code in Python 3.6\n    stdin = stdin.splitlines()\n    length = int(stdin[0])\n    teacher = stdin[1].split()\n    students = stdin[2].split()\n    teacher = list(map(int, teacher))\n    students = list(map(int, students))\n    if length <= 3:\n        return 0\n    for i in range(length):\n        for j in range(i + 1, length):\n            if teacher[i] + students[j] > students[i] + students[j]:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution function\"\"\""
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_topics = int(stdin.readline())\n    teacher_interestingness = [int(item) for item in stdin.readline().split()]\n    student_interestingness = [int(item) for item in stdin.readline().split()]\n    print(number_of_good_pairs(teacher_interestingness, student_interestingness))\n    return ''\n\n\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    teacher = list(map(int, stdin.readline().split()))\n    student = list(map(int, stdin.readline().split()))\n\n    good_pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if teacher[i] + teacher[j] > student[i] + student[j]:\n                good_pairs += 1\n\n    return str(good_pairs)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    b = list(map(int, stdin.readline().split(' ')))\n    a.sort()\n    b.sort()\n    result = 0\n    for i in range(n):\n        if a[i] + b[i] > a[i+1] + b[i+1]:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Modify this code to run your optimization algorithm\n\n    # parse the input\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    # run the algorithm\n    b = a\n    for i in range(n):\n        b = replace_all_occurrences(b, 2 * i + 1, 2 * (i + 1))\n        b = replace_all_occurrences(b, 2 * i + 2, 2 * (i + 1))\n        b = replace_all_occurrences(b, 10 ** 9, 10 ** 9 - 1)\n        b = replace_all_occurrences(b, 10 ** 9 - 1, 10 ** 9)\n    # prepare the solution in the specified output format\n    output = [str(x) for x in b]\n    return output\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    for _ in range(n - 1):\n        a = replace_adjacent_pairs_of_digits(a)\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin.split())\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, a))"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n------------\n\nhttps://www.codewars.com/kata/57a99e4b7a01a16d61000f7e/python\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total_components = 0\n    visited = set()\n    for line in stdin:\n        source, destination = [int(n) for n in line.split()]\n        if source not in visited:\n            visited.add(source)\n            unvisited = {destination}\n            while unvisited:\n                current_node = unvisited.pop()\n                if current_node in visited:\n                    continue\n                visited.add(current_node)\n                unvisited.add(current_node)\n                unvisited.update(node for node in graph.neighbours(current_node) if node not in visited)\n            total_components += 1\n    return total_components\n\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_cycle(g, visited, start):\n        visited[start] = True\n        for i in g[start]:\n            if not visited[i]:\n                if is_cycle(g, visited, i):\n                    return True\n            else:\n                return True\n        visited[start] = False\n        return False\n\n    n, m = map(int, stdin.split())\n    visited = [False] * n\n    g = [[] for i in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        g[a - 1].append(b - 1)\n        g[b - 1].append(a - 1)\n\n    res = 0\n    for i in range(n):\n        if not visited[i]:\n            if is_cycle(g, visited, i):\n                res += 1\n\n    print(res)\n    return ''"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from queue import PriorityQueue\n\n    n, m = map(int, stdin.split())\n    graph = {i: set() for i in range(1, n + 1)}\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].add(b)\n        graph[b].add(a)\n\n    def bfs(source):\n        seen = set()\n        q = deque()\n        q.append(source)\n        while q:\n            v = q.popleft()\n            if v not in seen:\n                seen.add(v)\n                for u in graph[v]:\n                    if u not in seen:\n                        q.append(u)\n        return seen\n\n    def dfs(source, dest):\n        if source == dest:\n            return True\n        if source not in seen:\n            seen.add(source)\n            for u in graph[source]:\n                if dfs(u, dest):\n                    return True\n        return False\n\n    def dfs_loop(source, dest):\n        while True:\n            if source == dest:\n                return True\n            if source not in seen:\n                seen.add(source)\n                for u in graph[source]:\n                    if dfs_loop(u, dest):\n                        return True\n            return False\n\n    seen = set()\n    for v in graph:\n        if v not in seen:\n            if dfs(v, v):\n                return 1\n    return len(seen)\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Not yet implemented\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n--------Solution--------\n\n\n--------Solution--------\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\""
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 1 0 0 0\n   ... 2 3\n   ... 2 4\n   ... 2 5\n   ... '''[1:-1])\n    '1'\n    >>> solution('''\n   ... 5\n   ... 1 0 0 0 2\n   ... 2 3\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... '''[1:-1])\n    '4'\n    \"\"\"\n    n, *red_blue = map(int, stdin.split())\n    edges = [map(int, line.split()) for line in stdin.split('\\n')[1:] if line]\n    red_blue = set(red_blue)\n\n    nice_edges = 0\n    for edge in edges:\n        if red_blue.intersection(set(edge)):\n            continue\n        else:\n            nice_edges += 1\n    return str(nice_edges)\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    v, e = [int(v) for v in stdin.split(\"\\n\")[0].split()]\n    tree = [list(map(int, v.split())) for v in stdin.split(\"\\n\")[1:]]\n    \n    for i in range(e):\n        if is_nice(tree, i):\n            ans += 1\n        tree = remove_edge(tree, i)\n    \n    return str(ans)\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = int(stdin.readline())\n    colors = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(s - 1):\n        edges.append(list(map(int, stdin.readline().strip().split())))\n    graph = defaultdict(list)\n    for v, u in edges:\n        graph[v].append(u)\n        graph[u].append(v)\n    # print(colors)\n    # print(graph)\n    \n    result = 0\n    for k, v in graph.items():\n        # print(k)\n        # print(v)\n        if colors[k] == 0:\n            for u in v:\n                # print(u, colors[u])\n                if colors[u]!= 0:\n                    # print(u, colors[u])\n                    result += 1\n                    break\n    return str(result)\n    \n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the median of the string from stdin.\n    '''\n    # Get the number of characters and the string.\n    num_chars = int(stdin.readline())\n    string_1 = stdin.readline().strip()\n    string_2 = stdin.readline().strip()\n\n    # Sort the strings.\n    sorted_1 = sorted(string_1)\n    sorted_2 = sorted(string_2)\n\n    # Find the median.\n    median = sorted_2[len(sorted_2)//2] if len(sorted_2) % 2 else (sorted_2[len(sorted_2)//2] + sorted_2[len(sorted_2)//2 - 1])/2\n\n    return median\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = [int(c) for c in stdin.split('\\n')]\n    n = k // 2\n    q = sorted(p for p in permutations(sorted(s), n) if p < t)\n    if not q:\n        return ''.join(q[n // 2])\n    if n % 2:\n        return q[n // 2]\n    return q[n // 2][:n]"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    median = sorted(list(set(s+t)))[len(list(set(s+t)))//2]\n    return median\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n    lenS = len(s)\n    lenT = len(t)\n    if (lenS > lenT):\n        lenS, lenT = lenT, lenS\n        s, t = t, s\n    for i in range(lenT, lenS + 1):\n        if (lenS % i == 0):\n            if (lenS // i < lenT):\n                lenS //= i\n                break\n    sLen = lenS // (i - lenT)\n    sToInt = int(s[:sLen])\n    tToInt = int(t[:sLen])\n    if (sToInt < tToInt):\n        if ((i % 2 == 1) & (lenS == i)):\n            return s\n        else:\n            return t[:sLen]\n    else:\n        if ((i % 2 == 1) & (lenS == i)):\n            return t\n        else:\n            return s[:sLen]\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n\n    a = s\n    b = t\n\n    while len(a) < len(b):\n        a = a + s\n\n    while len(a) > len(b):\n        b = b + t\n\n    if len(a) == len(b):\n        a = a + t\n\n    print(a)\n\nprint(solution(input().split()))\n\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:int(stdin.split('\\n')[0])]\n    t = stdin[int(stdin.split('\\n')[0]) + 1:]\n    median_s = s[len(s) // 2]\n    median_t = t[len(t) // 2]\n    median = None\n    for i in range(ord(s), ord(t) + 1):\n        if not median:\n            median = chr(i)\n            continue\n        if chr(i) < median:\n            median = chr(i)\n    print(median)\n\n\nsolution(input())\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #  The input format is:\n    #  (one integer k <= 2 * 10^5)\n    #  s, t, for each s, t, s < t,\n    #  then one string s, one string t.\n    #  s, t consist of lowercase Latin letters,\n    #  length of s and t is equal to k.\n    #  s < t, and s and t don't contain any duplicates of letters.\n\n    n = int(stdin)\n    s = stdin[:n]\n    t = stdin[n:]\n\n    s_sorted = sorted(s)\n    t_sorted = sorted(t)\n\n    return s_sorted[int(len(s_sorted) / 2)]\n\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.splitlines()\n    \n    return sorted(s + t)[len(s)//2]\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this for solution\n    return ''\n"
    },
    {
        "number": 4343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns Yes if team can be formed, and No otherwise.'''\n    pass"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns a string containing the lexicographically smallest team in which all team members have distinct ratings.\n    \n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    ratings = [int(x) for x in stdin.split()]\n    ans = []\n    \n    for comb in itertools.combinations(ratings, k):\n        if len(set(comb)) == k:\n            ans = sorted(comb)\n            break\n    \n    if ans:\n        return \"YES\\n\" + \" \".join(map(str, ans))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    ratings = sorted(list(map(int, stdin.split(' '))))\n    if k >= n:\n        print('YES')\n        print(*range(1, n + 1))\n    else:\n        print('NO')\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    ratings = sorted([int(x) for x in stdin.split(' ')], reverse=True)\n    if k > n:\n        return 'NO'\n    if k == 1:\n        return 'YES'+''.join([str(i) for i in range(1, n+1)])\n    \n    d = {}\n    for i, v in enumerate(ratings):\n        d[v] = i\n    \n    found = False\n    for i in range(n - k + 1):\n        k_ratings = set()\n        for j in range(k):\n            if j in d and d[ratings[i + j]] not in k_ratings:\n                k_ratings.add(d[ratings[i + j]])\n            else:\n                break\n        else:\n            found = True\n            break\n    \n    if found:\n        return 'YES'+''.join([str(i) for i in range(i+1, i+k)])\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    s = set(a)\n    if len(s) < k:\n        print('NO')\n        return\n    print('YES')\n    for x in range(1, n+1):\n        if x not in s:\n            print(x, end ='')\n            break\n    return"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n\n    # find all unique ratings\n    A = list(set(A))\n    A.sort()\n    if len(A) < k:\n        print('NO')\n        return\n\n    # write all possible combinations of k elements from A\n    L = []\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            L.append(A[i] + A[j])\n\n    # print if we find one\n    for i in range(len(L)):\n        if i+1 < k and L[i] == L[i+1]:\n            continue\n        if L[i] > 0 and L[i] <= 100:\n            print('YES')\n            for j in range(k):\n                print(i+1)\n            return\n\n    print('NO')\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    possible_sets = []\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            temp_set = {arr[i], arr[j]}\n            if len(temp_set) == k:\n                possible_sets.append(temp_set)\n\n    # print(possible_sets)\n    if len(possible_sets) == 0:\n        return \"NO\"\n\n    for j in range(0, len(possible_sets)):\n        if len(possible_sets[j])!= k:\n            possible_sets.remove(possible_sets[j])\n            # print(possible_sets)\n\n    if len(possible_sets) == 0:\n        return \"NO\"\n\n    for j in range(0, len(possible_sets)):\n        possible_sets[j] = list(possible_sets[j])\n        possible_sets[j].sort()\n\n    # print(possible_sets)\n    result = \"\"\n    for j in range(0, len(possible_sets)):\n        result = result + str(possible_sets[j][0]) + \" \"\n    return result[:-1]\n\n\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    a = list(map(int, stdin.split(\" \")))\n    a.sort()\n    i = 0\n    while i < n:\n        while i < n and a[i] == a[i+1]:\n            i += 1\n        j = i + 1\n        while j < n and a[j] - a[i] <= k:\n            j += 1\n        if j < n:\n            i = j\n        else:\n            return \"NO\"\n    return \"YES\" + \" \" + \" \".join(map(str, range(1, i + 1)))\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n--------------\n\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(i) for i in stdin.readline().split()]\n    seq.append(0)\n    seq.append(0)\n    res = [0] * n\n\n    seq = list(set(seq))\n    seq.sort()\n    i = 0\n    while i < n:\n        if seq[i] < seq[i + 1]:\n            i += 1\n            continue\n        j = i + 1\n        while j < n and seq[j] > seq[i]:\n            j += 1\n        if j == i + 1:\n            i += 1\n            continue\n        if j == n:\n            break\n        while j < n and seq[j] == seq[i]:\n            j += 1\n        res[seq[i]] = 1\n        res[seq[j]] = 0\n        i = j\n    res[0] = 1\n    res[-1] = 1\n    return 'YES' if res == list(zip([0] * n, [1] * n)) else 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find two initial sequences a, b that can split the sequence a into a strictly increasing sequence and a strictly decreasing sequence.\n    \"\"\"\n    # Get input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Get answers\n    a_increasing = [0] * n\n    a_decreasing = [0] * n\n\n    # Iterate through list\n    for i in range(1, n):\n        # If current value is greater than next value, it's decreasing\n        if a[i] > a[i - 1]:\n            a_decreasing[i] = 1\n        # If current value is less than next value, it's increasing\n        if a[i] < a[i - 1]:\n            a_increasing[i] = 1\n\n    # Check for contradiction\n    if all(x == 0 for x in a_decreasing[1:]) or all(x == 1 for x in a_increasing[:-1]):\n        return \"NO\"\n\n    # Return answer\n    return \"YES\\n\" + \" \".join(map(str, a_increasing)) + \"\\n\" + \" \".join(map(str, a_decreasing))\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin.readline().rstrip().split()\n    a = list(map(int, stdin.readline().rstrip().split()))\n    return 'YES' if a == sorted(a) or a == sorted(a, reverse=True) else 'NO'\n    '''\n    n = int(stdin.readline().rstrip())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    inc = []\n    dec = []\n    for i in range(n):\n        if i == 0:\n            if a[i] > a[i+1]:\n                inc.append(1)\n                dec.append(0)\n            else:\n                inc.append(0)\n                dec.append(1)\n        elif i == n-1:\n            if a[i] > a[i-1]:\n                inc.append(1)\n                dec.append(0)\n            else:\n                inc.append(0)\n                dec.append(1)\n        elif a[i] > a[i-1] and a[i] > a[i+1]:\n            inc.append(1)\n            dec.append(0)\n        elif a[i] < a[i-1] and a[i] < a[i+1]:\n            inc.append(0)\n            dec.append(1)\n        else:\n            inc.append(0)\n            dec.append(0)\n    return 'YES' if inc == dec else 'NO'\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds two initial sequences in a given one.\n    \"\"\"\n\n    a = stdin.split('\\n')[0]\n    a = list(map(int, a.split()))\n    length = len(a)\n    not_valid = False\n    for i in range(length - 1):\n        if a[i] >= a[i + 1]:\n            not_valid = True\n        if a[i + 1] >= a[i]:\n            not_valid = True\n    if not_valid:\n        print('NO')\n        return\n    increasing = []\n    decreasing = []\n    for i in range(length):\n        if a[i] > a[i - 1] and increasing == []:\n            increasing.append(i)\n        elif a[i] < a[i - 1] and increasing!= []:\n            decreasing.append(i)\n    if len(increasing) == 0 or len(decreasing) == 0:\n        print('NO')\n        return\n    print('YES')\n    for i in increasing:\n        print(0, end='')\n    for i in decreasing:\n        print(1, end='')\n\nsolution(stdin)\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def _check_order(s1: str, s2: str) -> bool:\n        return s1 == s2 or (s1 == \"0\" and s2 == \"1\") or (s1 == \"1\" and s2 == \"0\")\n\n    num_elements, *a = map(int, stdin.split())\n\n    pre_prev = float(\"-inf\")\n    for i in range(num_elements):\n        curr = a[i]\n        if _check_order(pre_prev, curr) is False:\n            return \"NO\"\n        pre_prev = curr\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    if n == 1:\n        print(\"NO\")\n    else:\n        s = 0\n        e = n - 1\n        m = -1\n        while s <= e:\n            if a[s] > a[e]:\n                m = s\n                break\n            s += 1\n            e -= 1\n        if m == -1:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(*[0] * m + [1] * (n - m))\n\nsolution(\"8 7 8 9 5 3 2 1\")\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n < 2:\n        return \"NO\"\n    if n == 2:\n        if a[0] <= a[1]:\n            return \"NO\"\n        else:\n            return \"YES\"\n    if a[0] > a[1]:\n        return \"YES\"\n    i = 0\n    while i < n - 1 and a[i] <= a[i + 1]:\n        i += 1\n    if i == n - 1:\n        return \"NO\"\n    while i < n - 1 and a[i] >= a[i + 1]:\n        i += 1\n    if i == n - 1:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    count_less, count_greater, count_diff = 0, 0, 0\n    for i in range(len(a)):\n        if a[i] > 0:\n            count_greater += 1\n        elif a[i] < 0:\n            count_less += 1\n        else:\n            count_diff += 1\n    if count_diff == 0:\n        print(\"NO\")\n        return\n    if count_greater == len(a) or count_less == 0:\n        print(\"NO\")\n        return\n    if count_greater % 2 == 1 and count_less == 1 and count_diff == 0:\n        print(\"NO\")\n        return\n    elif count_greater == 0 and count_less % 2 == 1 and count_diff == 0:\n        print(\"NO\")\n        return\n    if count_greater % 2 == 1 and count_less == 0:\n        print(\"NO\")\n        return\n    else:\n        print(\"YES\")\n        if count_diff % 2 == 1:\n            return \"1\" * len(a)\n        else:\n            return \"0\" * len(a)\n"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    m = 0\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            m += 1\n            a[i] = 0\n        elif a[i] > a[i - 1]:\n            m += 1\n            a[i] = 1\n\n    if m == 0:\n        print('YES')\n        print(a)\n    else:\n        print('NO')\n\n\ndef"
    },
    {
        "number": 4345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    incr_seq = []\n    decr_seq = []\n    for i in range(1, n):\n        if a[i] >= a[i - 1]:\n            incr_seq.append(a[i - 1])\n        else:\n            decr_seq.append(a[i - 1])\n\n    decr_seq.reverse()\n    if incr_seq!= [] and decr_seq!= []:\n        res = decr_seq + incr_seq + [decr_seq.pop()]\n        return 'YES\\n' +''.join(map(str, res))\n    return 'NO'\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_lines = int(stdin.readline())\n    for _ in range(num_of_lines):\n        L, v, l, r = map(int, stdin.readline().split())\n        if l % v == r % v:\n            print(0)\n        else:\n            print(r - l + 1)\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def gen_train_paths(paths: list, v: int, l: int, r: int) -> list:\n        return [\n            path\n            for path in paths\n            if path[1] % v == 0\n            and l <= path[0] <= r\n        ]\n\n    paths: list = list()\n    for line in stdin.splitlines()[1:]:\n        paths.append(list(map(int, line.split())))\n\n    train_paths: list = gen_train_paths(paths, v=1, l=1, r=2000000000)\n\n    def calc_num_of_lanterns_in_path(path: list, train_paths: list) -> int:\n        num_of_lanterns = 0\n        for lantern_pos in path[2:]:\n            if lantern_pos % v not in [\n                p[0] for p in train_paths\n            ] and lantern_pos not in range(path[0], path[1] + 1):\n                num_of_lanterns += 1\n        return num_of_lanterns\n\n    num_of_lanterns: int = 0\n    for path in paths:\n        if path in train_paths:\n            num_of_lanterns = 0\n        else:\n            num_of_lanterns += calc_num_of_lanterns_in_path(path, train_paths)\n\n    return num_of_lanterns\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The main function, which reads in the input,\n    calls the helper function and prints the solution to the standard output\n    '''\n    number_of_queries = int(stdin.readline())\n    for _ in range(number_of_queries):\n        boundary = [int(x) for x in stdin.readline().split()]\n        l, v, n, r = boundary[0], boundary[1], boundary[2], boundary[3]\n        print(solution_helper(l, v, n, r))\n\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 2 3 7\\n100 51 51 51\\n1234 1 100 199\\n1000000000 1 1 1000000000\")\n    '3\\n0\\n1134\\n0'\n    \"\"\"\n    stdin = stdin.splitlines()\n    answers = []\n    for n_query in stdin:\n        n_query = n_query.split()\n        destination, lantern_period, standing_train_segment = int(n_query[0]), int(n_query[1]), int(n_query[2])\n        for index in range(1, lantern_period + 1):\n            if (destination - index) % lantern_period!= standing_train_segment:\n                answers.append(index - 1)\n                break\n    return \"\\n\".join(map(str, answers))\n"
    },
    {
        "number": 4346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    M: number of queries\n    N: 3 (L, v, r)\n    '''\n    m = int(stdin.readline())\n    return '\\n'.join(str(sum([int(x in range(a, b+1)) for x in range(c, d+1, v)])) for _, a, b, c, d, v in [map(int, stdin.readline().split()) for _ in range(m)])\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()))\nprint(solution(input()))"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1918911254'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(ans(int(stdin)))\n\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(2, stdin, 998244353))\n    \nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n-----Tests-----\n\nTest 1:\n\nInput:\n4\n\nOutput:\n3\n\nTest 2:\n\nInput:\n2\n\nOutput:\n1\n\nTest 3:\n\nInput:\n8\n\nOutput:\n1260\n\nTest 4:\n\nInput:\n20\n\nOutput:\n12164510040883200\n\nTest 5:\n\nInput:\n8\n\nOutput:\n1260\n\nTest 6:\n\nInput:\n16\n\nOutput:\n2600414986064\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Not yet implemented\""
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = [int(i) for i in stdin.split('\\n')]\n    n = s[0]\n    print(n)\n    print(int((n + 1) / 2))\n    print(int(2 * (n - 1) * (n + 1) / 4))"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''"
    },
    {
        "number": 4347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    def c(n,m):\n        if m==0:\n            return 1\n        if m==1:\n            return n\n        return c(n,m-1)+c(n-1,m-1)\n    return c(x,(x+1)//2)\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    s = list(s)\n    for i in range(k):\n        s.pop(0)\n        for j in range(len(s)):\n            if s[j] == 'a':\n                s[j] = ''\n                break\n            elif s[j] == 'b':\n                s[j] = ''\n                break\n            elif s[j] == 'c':\n                s[j] = ''\n                break\n            elif s[j] == 'd':\n                s[j] = ''\n                break\n            elif s[j] == 'e':\n                s[j] = ''\n                break\n            elif s[j] == 'f':\n                s[j] = ''\n                break\n            elif s[j] == 'g':\n                s[j] = ''\n                break\n            elif s[j] == 'h':\n                s[j] = ''\n                break\n            elif s[j] == 'i':\n                s[j] = ''\n                break\n            elif s[j] == 'j':\n                s[j] = ''\n                break\n            elif s[j] == 'k':\n                s[j] = ''\n                break\n            elif s[j] == 'l':\n                s[j] = ''\n                break\n            elif s[j] =='m':\n                s[j] = ''\n                break\n            elif s[j] == 'n':\n                s[j] = ''\n                break\n            elif s[j] == 'o':\n                s[j] = ''\n                break\n            elif s[j] == 'p':\n                s[j] = ''\n                break\n            elif s[j] == 'q':\n                s[j] = ''\n                break\n            elif s[j] == 'r':\n                s[j] = ''\n                break\n            elif s[j] =='s':\n                s[j] = ''\n                break\n            elif s[j] == 't':\n                s[j] = ''\n                break\n            elif s[j] == 'u':\n                s[j] = ''\n                break\n            elif s[j] == 'v':\n                s[j] = ''\n                break\n            elif s[j] == 'w':\n                s[j] = ''\n                break\n            elif s[j] == 'x':\n                s[j] = ''\n                break\n            elif s[j] == 'y':\n                s[j] = ''\n                break\n            elif s[j] == 'z':\n                s[j] = ''\n                break\n    s = ''.join(s)\n    if s == '':\n        return\n    else:\n        print(s)"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split(' ')\n    s = list(s)\n    k = int(k)\n    \n    for i in range(k):\n        if 'a' in s:\n            s.remove('a')\n        elif 'b' in s:\n            s.remove('b')\n        elif 'c' in s:\n            s.remove('c')\n        elif 'd' in s:\n            s.remove('d')\n        elif 'e' in s:\n            s.remove('e')\n        elif 'f' in s:\n            s.remove('f')\n        elif 'g' in s:\n            s.remove('g')\n        elif 'h' in s:\n            s.remove('h')\n        elif 'i' in s:\n            s.remove('i')\n        elif 'j' in s:\n            s.remove('j')\n        elif 'k' in s:\n            s.remove('k')\n        elif 'l' in s:\n            s.remove('l')\n        elif'm' in s:\n            s.remove('m')\n        elif 'n' in s:\n            s.remove('n')\n        elif 'o' in s:\n            s.remove('o')\n        elif 'p' in s:\n            s.remove('p')\n        elif 'q' in s:\n            s.remove('q')\n        elif 'r' in s:\n            s.remove('r')\n        elif's' in s:\n            s.remove('s')\n        elif 't' in s:\n            s.remove('t')\n        elif 'u' in s:\n            s.remove('u')\n        elif 'v' in s:\n            s.remove('v')\n        elif 'w' in s:\n            s.remove('w')\n        elif 'x' in s:\n            s.remove('x')\n        elif 'y' in s:\n            s.remove('y')\n        elif 'z' in s:\n            s.remove('z')\n    \n    if len(s) == 0:\n        print('')\n    else:\n        print(''.join(s))\n    return solution\nsolution(input())\n\n'''\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # please do not remove this solution line\n    # do not print anything here\n    return stdin\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nassert solution('cccaabababaccbc') == 'cccbbabaccbc'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n\n\nprint(solution(input().split(' ')))\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, k = int(lines[0].split()[0]), int(lines[0].split()[1])\n    s = lines[1]\n    s = list(s)\n    while k > 0:\n        for i in range(n):\n            if s[i] == 'a':\n                s[i] = ''\n                break\n            elif s[i] == 'b':\n                s[i] = ''\n                break\n            elif s[i] == 'c':\n                s[i] = ''\n                break\n            elif s[i] == 'd':\n                s[i] = ''\n                break\n            elif s[i] == 'e':\n                s[i] = ''\n                break\n            elif s[i] == 'f':\n                s[i] = ''\n                break\n            elif s[i] == 'g':\n                s[i] = ''\n                break\n            elif s[i] == 'h':\n                s[i] = ''\n                break\n            elif s[i] == 'i':\n                s[i] = ''\n                break\n            elif s[i] == 'j':\n                s[i] = ''\n                break\n            elif s[i] == 'k':\n                s[i] = ''\n                break\n            elif s[i] == 'l':\n                s[i] = ''\n                break\n            elif s[i] =='m':\n                s[i] = ''\n                break\n            elif s[i] == 'n':\n                s[i] = ''\n                break\n            elif s[i] == 'o':\n                s[i] = ''\n                break\n            elif s[i] == 'p':\n                s[i] = ''\n                break\n            elif s[i] == 'q':\n                s[i] = ''\n                break\n            elif s[i] == 'r':\n                s[i] = ''\n                break\n            elif s[i] =='s':\n                s[i] = ''\n                break\n            elif s[i] == 't':\n                s[i] = ''\n                break\n            elif s[i] == 'u':\n                s[i] = ''\n                break\n            elif s[i] == 'v':\n                s[i] = ''\n                break\n            elif s[i] == 'w':\n                s[i] = ''\n                break\n            elif s[i] == 'x':\n                s[i] = ''\n                break\n            elif s[i] == 'y':\n                s[i] = ''\n                break\n            elif s[i] == 'z':\n                s[i] = ''\n                break\n        k -= 1\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 4348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin[:-1]\n    result = s\n    for _ in range(k):\n        for letter in range(97, 97 + 26):\n            if chr(letter) in s:\n                s = s.replace(chr(letter), '', 1)\n                break\n        result = s\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    k = list(map(int, stdin.split(' ')))\n    d = []\n    for _ in range(m):\n        d.append(list(map(int, stdin.split(' '))))\n\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6\n   ... 1 2 0 2 0\n   ... 2 4\n   ... 3 3\n   ... 1 5\n   ... 1 2\n   ... 1 5\n   ... 2 3\n   ... ''')\n    '8'\n    >>> solution('''5 3\n   ... 4 2 1 3 2\n   ... 3 5\n   ... 4 2\n   ... 2 5\n   ... ''')\n    '20'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns minimum day'''\n    stdin = [int(line) for line in stdin.split('\\n')]\n    n, m = stdin[0:2]\n    stdin = stdin[2:]\n    microtransactions = [int(line) for line in stdin[0:n]]\n    stdin = stdin[n:]\n    offers = [line for line in stdin[0:m]]\n    stdin = stdin[m:]\n    return \"YES\" if solution(microtransactions, offers) else \"NO\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(N) / O(1)\"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    k = list(map(int, stdin.split('\\n')[1].split()))\n    d = [list(map(int, stdin.split('\\n')[i+2].split())) for i in range(m)]\n    return str(n - min(sum(k[i] for i in range(n) if d[j][i]!= 0), 2))\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return first line of input\"\"\"\n    return stdin.splitlines()[0]\n\"\"\"\n    def solution(stdin: str) -> str:\n        \"\"\"Return first line of input\"\"\"\n        n, m = [int(x) for x in stdin.splitlines()[0].split()]\n        k = [int(x) for x in stdin.splitlines()[1].split()]\n        d, t = [int(x) for x in stdin.splitlines()[2:]]\n        m = int(m)\n        n = int(n)\n        k = [int(x) for x in k]\n        d = [int(x) for x in d]\n        t = [int(x) for x in t]\n        return \"\"\""
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Args:\n        stdin (str): Input for the problem.\n\n    Returns:\n        str: Solution to the problem.\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    costs = [2] * n\n    for _ in range(m):\n        d, t = map(int, stdin.split(' '))\n        costs[t - 1] = min(costs[t - 1], d)\n    price = min([costs[i] * k for i, k in enumerate(map(int, stdin.split(' ')))])\n    return price\n"
    },
    {
        "number": 4349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    types = []\n    sales = []\n    for i in range(n):\n        types.append(int(stdin.split('\\n')[i+1].split()[0]))\n        sales.append(int(stdin.split('\\n')[i+1].split()[1]))\n\n    target = [0] * (m+1)\n    for i in range(m):\n        for j in range(types[sales[i] - 1]):\n            target[i+j+1] = max(target[i+j+1], target[i+j] + 1)\n\n    print(target[m])\n\n    return ''\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    if rows > 1000 or cols > 1000 or rows * cols % 2!= 0:\n        return '-1'\n    grid = [list(stdin[i * cols:(i + 1) * cols]) for i in range(rows)]\n    if '*' in grid[0] or '*' in grid[-1] or '*' in [grid[i][0] for i in range(rows)]:\n        return '-1'\n    for i in grid:\n        for j in i:\n            if j == '.':\n                return '-1'\n    stars = []\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == '*':\n                stars.append([i, j])\n    if len(stars) > rows * cols:\n        return '-1'\n    stars.sort(key=lambda x: x[0] * cols + x[1])\n    return '\\n'.join(' '.join([str(x), str(y), str(z)]) for x, y, z in stars)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_in_bound(i, j):\n        return i >= 0 and i < n and j >= 0 and j < m\n\n    def check_valid(i, j):\n        res = True\n        for k in range(3):\n            if (i + k - 1 >= 0 and i + k - 1 < n and j + k - 1 >= 0 and j + k - 1 < m) and \\\n                    (grid[i + k - 1][j + k - 1] == '*'):\n                res = False\n                break\n        return res\n\n    def in_bound_has_asterisk(i, j):\n        return check_in_bound(i, j) and grid[i][j] == '*'\n\n    def check_valid_has_asterisk(i, j):\n        res = True\n        for k in range(3):\n            if (i + k - 1 >= 0 and i + k - 1 < n and j + k - 1 >= 0 and j + k - 1 < m) and \\\n                    (grid[i + k - 1][j + k - 1] == '*'):\n                res = False\n                break\n        return res\n\n    n, m = map(int, stdin.readline().split())\n    grid = [list(stdin.readline()) for _ in range(n)]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*' and check_valid(i, j):\n                k += 1\n\n    for i in range(n):\n        for j in range(m):\n            if in_bound_has_asterisk(i, j) and check_valid_has_asterisk(i, j):\n                k += 1\n\n    if k > n * m:\n        return '-1'\n    else:\n        return str(k) + '\\n' + '\\n'.join([' '.join(map(str, row)) for row in grid])\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for _ in range(int(stdin.split()[0])):\n        grid.append(stdin.split()[1])\n    \n    print(solve(grid))\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    matrix = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        matrix[i] = stdin.split('\\n')[i]\n\n    stars = {}\n    stars_count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                stars[(i, j)] = 1\n                stars_count += 1\n\n    if stars_count > n * m:\n        return \"-1\"\n    result = [stars_count]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '*':\n                for delta_x, delta_y in ((-1, 0), (1, 0), (0, -1), (0, 1)):\n                    x, y = i + delta_x, j + delta_y\n                    if 0 <= x < n and 0 <= y < m:\n                        if matrix[x][y] == '*':\n                            if (x, y) in stars:\n                                stars[(x, y)] = min(stars[(x, y)], stars[(i, j)] + 1)\n                                result.append(stars[(x, y)])\n                            else:\n                                stars[(x, y)] = stars[(i, j)] + 1\n                                result.append(stars[(x, y)])\n    return''.join(str(x) for x in result)\n\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def f(x, y, s, grid):\n        grid[y][x] = \"#\"\n        for dx in range(-1, 2):\n            for dy in range(-1, 2):\n                if dx == dy == 0:\n                    continue\n                if (0 <= x + dx < len(grid[0])) and (0 <= y + dy < len(grid)):\n                    if grid[y + dy][x + dx] == \"*\":\n                        f(x + dx, y + dy, s + 1, grid)\n        return grid\n\n    n, m = [int(x) for x in stdin.split()]\n    grid = []\n    for row in stdin.split(\"\\n\")[:n]:\n        grid.append(list(row))\n    print(grid)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                grid = f(j, i, 1, grid)\n    if any(any(c == \"#\" for c in row) for row in grid):\n        return \"-1\"\n    return str(max(len(str(row).replace(\"#\", \"\")) for row in grid))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.split('\\n')[1:])\n\n    matrix = [list(x) for x in zip(*matrix)]\n    # print(matrix)\n\n    stars_set = set()\n\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == '*':\n                stars_set.add((i + 1, j + 1))\n\n    if not stars_set:\n        return '0\\n'\n    # stars_set = sorted(stars_set, key=lambda x: x[0] * 10000 + x[1])\n    stars_set = sorted(list(stars_set))\n\n    res = [len(stars_set)]\n    for star in stars_set:\n        # print(star)\n        s = star[0] * m + star[1]\n        tmp = s\n\n        for i in range(m):\n            if i % star[0]!= 0:\n                tmp = tmp + 1\n        for j in range(n):\n            if j % star[1]!= 0:\n                tmp = tmp + 1\n\n        res.append(str(tmp))\n\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the number of stars needed to draw the given grid.\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 5\\n.*...\\n****.\\n.****\\n..**.\\n.....')\n    3\n    >>> solution('3 3\\n*.*\\n.*.\\n*.*')\n    -1\n    >>> solution('5 5\\n.*...\\n*.*.*\\n.*.*.*\\n.*.*.*\\n.....')\n    3\n    >>> solution('3 3\\n****\\n*.*\\n.*.')\n    -1\n    >>> solution('5 5\\n.*...\\n****.\\n.*.*.\\n.*.*.\\n.....')\n    3\n    >>> solution('3 3\\n.*.\\n*.*\\n*.*')\n    2 2 1\n    \"\"\"\n    n, m = [int(x) for x in stdin.split(' ')]\n    grid = [list(stdin.split('\\n')[i]) for i in range(n)]\n\n    stars = [0] * n\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c] == '*':\n                stars[r] += 1\n\n    def dfs(left, right, top, bottom, count):\n        if left < right or top < bottom:\n            return\n        if left > n * m or top > n * m:\n            return\n        if left == right and top == bottom:\n            if left > count:\n                stars[top // n] = left\n            return\n        if left + right > n * m or top + bottom > n * m:\n            return\n        if left == right:\n            dfs(left, right + 1, top, bottom, count)\n            dfs(left + 1, right, top, bottom, count)\n            return\n        if top == bottom:\n            dfs(left, right, top + 1, bottom, count)\n            dfs(left, right, top + 1, bottom, count)\n            return\n\n        dfs(left, right, top, bottom + 1, count)\n        dfs(left, right, top + 1, bottom, count)\n        dfs(left + 1, right, top, bottom, count)\n        dfs(left, right + 1, top, bottom, count)\n\n    count = 0\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c] == '*':\n                dfs(1, stars[r], r + 1, c + 1, count)\n                count += 1\n\n    result = '0'\n    if count <= n * m:\n        for i in range(n):\n            for j in range(m):\n                if stars[i] == 0:\n                    if grid[i][j] == '.':\n                        continue\n                    return '-1'\n                result = str(stars[i]) +'' + result\n        return result\n\n    return '-1'\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(r\"\"\"\n   ... 5 5\n   ... *.*\n   ....***\n   ... *.*\n   ....***\n   ... ***.\n   ... \"\")\n    4\n    3 2 1\n    3 3 1\n    3 4 1\n\n    >>> solution(r\"\"\"\n   ... 6 6\n   ... **...\n   .......\n   ... **..\n   ....**.\n   ......*.\n   ... **..*.\n   ... \"\")\n    0\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 6 8\n   .......*...\n   ......**...\n   .....*****.\n   ......**...\n   .......*...\n   ...........\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 5 5\n   ....***\n   ... ***.\n   ....***\n   ... ***.\n   ... ***\n   ... ''')\n    '-1'\n    >>> solution('''\n   ... 3 3\n   ... *.*\n   ....*\n   ... *.*\n   ... ''')\n    '-1'\n    >>> solution('''\n   ... 5 5\n   ....***\n   ... ***.\n   ....***\n   ... *.*\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 5 5\n   ....*...\n   ....*.*.\n   ....*...\n   ....*...\n   ... ''')\n    '3'\n    \"\"\"\n    rows, cols = map(int, stdin.split())\n    grid = stdin.split(\"\\n\")\n    stars = {(r, c): 0 for r in range(rows) for c in range(cols) if grid[r][c] == \"*\"}\n    return str(max([stars.get((r, c), stars.get((r + 1, c), stars.get((r, c + 1), stars.get((r - 1, c), stars.get((r, c - 1)))))) for r, c in stars] or [-1]) + 1)\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if N == int(str(N)[::-1]) else 'No'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number: str = stdin\n    n = int(number)\n    return \"Yes\" if n == int(number[::-1]) else \"No\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    length = len(number)\n    number = number[::-1]\n    for i in range(length):\n        if number[i] == number[i-1]:\n            pass\n        else:\n            print('No')\n            break\n    else:\n        print('Yes')\n\nsolution(input())\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    #take in input and convert to an integer\n    N = int(stdin)\n\n    #we know that N must be a multiple of 10 because it is a three digit integer, so we can safely ignore the hundreds place. \n    #The number of digits in N will be 3, so we can manipulate N as a str\n    N = str(N)\n\n    #loop through N backwards \n    for i in range(len(N), 0, -1):\n        #if the first and last element are the same, return Yes\n        if N[0] == N[-1]:\n            return \"Yes\"\n        #if the first and last element are not the same, return No\n        else:\n            return \"No\"\n\n\n\ndef"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    \n    reverse: int = 0\n    while N > 0:\n        reverse *= 10\n        reverse += N % 10\n        N = N // 10\n\n    return 'Yes' if N == reverse else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_str = stdin\n    if str(num_str[::-1]) == stdin:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[0]\n    return 'Yes' if n == n[::-1] else 'No'\n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if (stdin[2] == stdin[1] and stdin[1] == stdin[0]) or (stdin[0] == stdin[1] and stdin[1] == stdin[2]):\n        return \"Yes\"\n    return \"No\"\n    \ndef"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.splitlines()[0]\n    N = int(N)\n    if N < 100 or N > 999:\n        return \"Invalid Input\"\n    N = str(N)\n    if N[0] == N[-1] and N[1] == N[-2]:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num == int(str(num)[::-1]):\n        return \"Yes\"\n    return \"No\"\n    \n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = map(int, stdin.split(' '))\n    if alice > bob:\n        return 'Alice'\n    elif alice < bob:\n        return 'Bob'\n    return 'Draw'\n\nprint(solution(stdin))"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b = map(int, stdin.split())\n    if b > a:\n        return 'Bob'\n    elif a > b:\n        return 'Alice'\n    else:\n        return 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    # Your code here\n    # import re\n    # match = re.search(r'(?P<A>\\d+)\\s(?P<B>\\d+)', stdin)\n    # A = int(match[1])\n    # B = int(match[2])\n    if A > B:\n        return 'Alice'\n    elif A < B:\n        return 'Bob'\n    else:\n        return 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = stdin.split()\n    return \"Alice\" if int(alice) > int(bob) else \"Bob\" if int(alice) < int(bob) else \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split(\" \")]\n    a = ''.join(map(str, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1]))\n    b = ''.join(map(str, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1]))\n    return \"Alice\" if a > b else \"Bob\" if b > a else \"Draw\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    a, b = map(int, stdin.split())\n\n    # determine who wins and return\n    if a > b:\n        return \"Alice\"\n    elif a < b:\n        return \"Bob\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A = int(A)\n    B = int(B)\n    if A > B:\n        print('Alice')\n    elif A < B:\n        print('Bob')\n    else:\n        print('Draw')\nsolution(input())\n"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    #get input and convert it to a list\n    input = sys.stdin.readlines()\n    #split the input\n    A,B = input[0].split()\n    #convert the input to integers\n    A = int(A)\n    B = int(B)\n    #check who wins based on the rules\n    if A > B:\n        return \"Alice\"\n    elif B > A:\n        return \"Bob\"\n    else:\n        return \"Draw\"\n    \ndef"
    },
    {
        "number": 4352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    alice_card, bob_card = stdin.split()\n    \n    if int(alice_card) > int(bob_card):\n        return \"Alice\"\n    elif int(alice_card) < int(bob_card):\n        return \"Bob\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin.replace(',','')\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string.replace(\",\", \"\")\n    return string\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin\n  \n  words = s.split(',')\n  for i in range(len(words)):\n    if words[i] == ',':\n      words[i] =''\n  \n  return ''.join(words)\n"
    },
    {
        "number": 4353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(',','')\n    return s\n'''"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the index of the checkpoint where each student will go.\n\n    >>> solution(\"2 2\\n2 0\\n0 0\\n-1 0\\n1 0\")\n    '2\\n1'\n    '''\n    n, m = map(int, stdin.split('\\n')[0].split())\n    students = []\n    checkpoints = []\n    for _ in range(n):\n        students.append(list(map(int, stdin.split('\\n')[1].split())))\n    for _ in range(m):\n        checkpoints.append(list(map(int, stdin.split('\\n')[2 + n].split())))\n    manhattan = []\n    for student in students:\n        manhattan.append(abs(student[0] - checkpoints[0][0]) + abs(student[1] - checkpoints[0][1]))\n    for checkpoint in checkpoints[1:]:\n        new_manhattan = []\n        for student in students:\n            new_manhattan.append(abs(student[0] - checkpoint[0]) + abs(student[1] - checkpoint[1]))\n        for i in range(n):\n            manhattan[i] = min(new_manhattan[i], manhattan[i])\n    res = []\n    for i, m in enumerate(manhattan):\n        res.append(checkpoints.index(min(checkpoints, key=lambda x: abs(x[0] - students[i][0]) + abs(x[1] - students[i][1]))))\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_students, num_checkpoints = map(int, stdin.split(' '))\n    students = {}\n    checkpoints = {}\n    for i in range(num_students):\n        x, y = map(int, stdin.split(' ')[i*2+1 : i*2+3])\n        students[i] = (x, y)\n    for j in range(num_checkpoints):\n        x, y = map(int, stdin.split(' ')[j*2+1 : j*2+3])\n        checkpoints[j] = (x, y)\n    dists = {}\n    for student, pos in students.items():\n        for checkpoint, pos2 in checkpoints.items():\n            dists[student, checkpoint] = abs(pos[0] - pos2[0]) + abs(pos[1] - pos2[1])\n    res = {}\n    for student in range(num_students):\n        res[student] = dists[student, min(dists, key=dists.get)]\n    return''.join(map(str, res.keys()))\n    \n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    matrix = []\n    for i in range(N):\n        matrix.append(list(map(int, stdin.split()[2 * i:2 * i + 2])))\n    \n    checkpoints = [[matrix[i][j] for j in range(M)] for i in range(N)]\n    for i in range(N):\n        checkpoints[i].sort()\n    \n    result = \"\"\n    for i in range(N):\n        result += str(checkpoints[i].index(matrix[i][-1]) + 1) + '\\n'\n    return result\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split(' ')]\n    S = []\n    for _ in range(N):\n        a, b = [int(x) for x in stdin.split(':')]\n        S.append((a,b))\n\n    C = []\n    for _ in range(M):\n        c, d = [int(x) for x in stdin.split(':')]\n        C.append((c,d))\n\n    def dist(A, B):\n        return abs(A[0]-B[0])+abs(A[1]-B[1])\n\n    res = []\n    for i in range(N):\n        mini = None\n        for j in range(M):\n            if dist(S[i], C[j]) < dist(S[i], mini):\n                mini = C[j]\n        res.append(mini)\n    return '\\n'.join([str(i[0]) for i in res])"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split())))\n    arr.append([0, 0])\n    arr.append([0, 0])\n    arr.sort()\n    \n    ans = []\n    for i in range(n):\n        ans.append(arr.index(arr[i]) - arr.index(arr[i+1]))\n    \n    for i in range(n):\n        print(ans[i])\n    \n    return ''"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    xys = [tuple(map(int, line.split())) for line in stdin.split('\\n') if line]\n    dist = [abs(a - c) + abs(b - d) for a, b, c, d in xys]\n    return '\\n'.join(str(i) for i in dist.index(min(dist)))\n\nprint(solution(open(\"../resources/input03.txt\", \"r\").read()))\n"
    },
    {
        "number": 4354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 2\n   ... 2 0\n   ... 0 0\n   ... -1 0\n   ... 1 0''')\n    '2\\n1'\n    \"\"\"\n    # Input\n    num_checkpoints: int = stdin.split('\\n')[0]\n    stdin = stdin.split('\\n')[1:]\n\n    checkpoints: list = []\n    students: list = []\n\n    # Building\n    for line in stdin:\n        if not line:\n            continue\n        line = line.split(':')\n        if line[0] == 'c':\n            checkpoints.append([int(line[1]), int(line[2])])\n        elif line[0] =='s':\n            students.append([int(line[1]), int(line[2])])\n\n    # Solve\n    students = sorted(students, key=lambda x: abs(x[0]) + abs(x[1]))\n    points_to_checkpoints: list = []\n    for student in students:\n        points_to_checkpoints.append(\n            sorted(\n                list(\n                    filter(\n                        lambda x: abs(x[0] - student[0]) + abs(x[1] - student[1])\n                        <= abs(points_to_checkpoints[-1][0] - student[0]) +\n                        abs(points_to_checkpoints[-1][1] - student[1]),\n                        checkpoints,\n                    )\n                ),\n                key=lambda x: x[0],\n            )[0]\n        )\n    # Output\n    return '\\n'.join([str(points_to_checkpoints.index(x) + 1) for x in points_to_checkpoints])\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    return str(a + a*a + a*a*a)"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + int(stdin) ** 2 + int(stdin) ** 3)\n\n\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    sum = 0\n    for i in range(0,3):\n        sum = sum + (a**i)\n    return sum\nprint(solution(input()))\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    return number + number**2 + number**3\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    x = a*(a+1)*(a+2)\n    print(x)\n\nsolution(\"2\")\n\"\"\"\n\n\"\"\"\nWrite a function, solution(a), that takes a as input and returns the sum a + a^2 + a^3.\n\n-----Constraints-----\n - 1 \\leq a \\leq 10\n - a is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\n\n-----Output-----\nPrint the value a + a^2 + a^3 as an integer.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n14\n\nWhen a = 2, we have a + a^2 + a^3 = 2 + 2^2 + 2^3 = 2 + 4 + 8 = 14.\nPrint the answer as an input. Outputs such as 14.0 will be judged as incorrect.\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + eval(stdin) ** 2 + eval(stdin) ** 3)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return str(x + x*x + x*x*x)\n"
    },
    {
        "number": 4355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(int(input())+int(input())**2+int(input())**3)\n    return None"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M = [int(x) for x in stdin.split(\" \")]\n    mat = [stdin.strip() for stdin in stdin.split(\"\\n\")]\n    mat_n = int(N / 2)\n    mat_m = int(M / 2)\n    mat_new = []\n    for x in range(mat_n):\n        mat_new.append(mat[2 * x])\n    for x in range(mat_m):\n        mat_new.append(mat[2 * mat_n + x])\n    print(mat_new)\n    return 'Yes'\n    '''\n    return \"Yes\"\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.split()[1])\n    for _ in range(m):\n        matrix.append(stdin.split()[3])\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == '#':\n                matrix[i][j] = '1'\n            elif matrix[i][j] == '.':\n                matrix[i][j] = '0'\n            else:\n                raise RuntimeError\n    for i in range(len(matrix) - m + 1):\n        for j in range(len(matrix[0]) - n + 1):\n            tmp = [0, 0]\n            for x in range(n):\n                tmp[0] += int(matrix[i + x][j + x])\n                tmp[1] += int(matrix[i + x][j + x])\n            if tmp[0] == m:\n                return \"Yes\"\n            elif tmp[1] == m:\n                return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds whether the template image B is contained in the image A.\n\n    Args:\n        stdin (str): The input of the problem.\n\n    Returns:\n        str: The output of the problem.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    rows = stdin.split('\\n')\n    m_rows = rows[0:m]\n    n_rows = rows[m:]\n    for row in m_rows:\n        for char in row:\n            if char!= '.':\n                return 'No'\n    for row in n_rows:\n        for char in row:\n            if char!= '.':\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(x) for x in stdin.split()]\n    b = stdin.split('\\n')[1:-1]\n    a = stdin.split('\\n')[2:]\n\n    s = 0\n    for i in range(rows):\n        for j in range(columns):\n            if b[i][j]!= a[i][j]:\n                s += 1\n    if s > 0:\n        print('No')\n    else:\n        print('Yes')"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('.#.#\\n#..#\\n#..#\\n#.#.')\n    Yes\n    >>> solution('#.#\\n#..#\\n#..#\\n#.#.')\n    Yes\n    >>> solution('#.#\\n#.#.\\n#.#.')\n    Yes\n    >>> solution('#.#\\n#.##\\n#.#.')\n    No\n    >>> solution('#.#\\n#.#.')\n    No\n    >>> solution('#.#\\n##.#\\n#.#.')\n    No\n    \"\"\"\n    n, m = map(int, stdin.split())\n    template = stdin.splitlines()[2:]\n    test = stdin.splitlines()[:2]\n\n    if n < 2 or m < 2:\n        return 'No'\n    # If the template image has less than 2 rows or columns, it cannot be contained in the image.\n    if any(len(x) < 2 for x in template):\n        return 'No'\n    if any(len(x) < 2 for x in test):\n        return 'No'\n    # Check whether the template can be extended to the right and down to contain the test image.\n    right, down = n - 1, m - 1\n    for j in range(m):\n        for i in range(n):\n            if template[j][i]!= test[j][i]:\n                right = min(right, i)\n                down = min(down, j)\n                break\n\n    for i in range(n):\n        for j in range(m):\n            if template[j][i]!= test[j][i]:\n                right = min(right, i)\n                down = min(down, j)\n                break\n\n    if right < n - 2 and down < m - 2:\n        return 'No'\n\n    # If we cannot extend the test image to the right and down, check whether the template can be contained in the test image.\n    right = n - 1\n    down = m - 1\n    for j in range(m):\n        for i in range(n):\n            if template[j][i]!= test[j][i]:\n                right = min(right, i)\n                down = min(down, j)\n                break\n\n    for i in range(n):\n        for j in range(m):\n            if template[j][i]!= test[j][i]:\n                right = min(right, i)\n                down = min(down, j)\n                break\n\n    if right < n - 2 or down < m - 2:\n        return 'No'\n\n    return 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.split('\\n')[:2]\n    A = [i for i in stdin.split('\\n')[2:]]\n    B = [i for i in stdin.split('\\n')[5:]]\n    \n    # print(N, A, B)\n    \n    if N in B and A in B:\n        print('Yes')\n    else:\n        print('No')\n        \n    return ''\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    args = stdin.split('\\n')\n    row = int(args[0])\n    col = int(args[1])\n    row_cnt = 0\n    col_cnt = 0\n    str_row = ''\n    str_col = ''\n    is_row = False\n    is_col = False\n    ans = 'No'\n    for i in range(2, len(args)):\n        c = args[i]\n        if c == '#':\n            if is_row:\n                str_row += c\n            else:\n                str_col += c\n            row_cnt += 1\n        else:\n            if is_row:\n                str_row += c\n            else:\n                str_col += c\n            col_cnt += 1\n            is_row = not is_row\n            is_col = not is_col\n        if row_cnt == row and col_cnt == col:\n            break\n    if str_row in args:\n        ans = 'Yes'\n    if str_col in args:\n        ans = 'Yes'\n    return ans"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find whether template image B is contained in image A when only parallel shifts can be applied to the images.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    matrix_a = [stdin.split('\\n')[1:][i] for i in range(n)]\n    matrix_b = [stdin.split('\\n')[1:][i] for i in range(m)]\n    return 'Yes' if len(set([''.join(['#' if j in '#' else '.' for j in i]) for i in zip(*matrix_a)]) & set(\n        [''.join(['#' if j in '#' else '.' for j in i]) for i in zip(*matrix_b)])) == len(matrix_b) * len(\n        matrix_b[0]) else 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(stdin.split('\\n')[1]) for _ in range(n)]\n    b = [list(stdin.split('\\n')[2]) for _ in range(m)]\n\n    def search_in_matrix(matrix: List[List[str]], t: str) -> bool:\n        # check row, col, and submatrix\n        for i, j in product(range(len(matrix)), repeat=2):\n            if t == matrix[i][j]:\n                return True\n        # check diagonal\n        for i, j in product(range(len(matrix)), repeat=2):\n            if t == matrix[i][j] and abs(i - j) == abs(len(matrix) - len(matrix[0])):\n                return True\n        return False\n\n    print('Yes' if search_in_matrix(a, '#') and search_in_matrix(b, '#') else 'No')\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a*b, a*c+b*c, a*(b+c)))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(max(A + B, C))\n\"\"\"\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    return max(nums[0] + nums[1], nums[0] + nums[2], nums[1] + nums[2])\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0])+int(stdin.split()[1])+int(stdin.split()[2]))\n\na, b, c = map(int, stdin.split())\nprint(a+b+c)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return str(max(a + b, a + c, b + c))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    return str(max(A+B, B+C, A+C, B+B+C))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    res = max(a+b+c, a+c, b+c, a*b*c)\n    return str(res)\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(max(0, A+B-1) * max(0, C+B-1) * max(0, C+A-1))\n"
    },
    {
        "number": 4357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = [int(s) for s in stdin.split('\\n')]\n    print(sum(data[::2]) / 2 + sum(data[1::2]))"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *prices = map(int, stdin.split())\n    total = 0\n    for i, price in enumerate(prices):\n        total += price\n        if price % 2 == 0:\n            continue\n        if i == 0 or i % 2 == 0:\n            total += price // 2\n    return total\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total_price = 0\n    n = int(stdin)\n    p_list = list(map(int, stdin.split()))\n    for i in range(n):\n        if p_list[i] % 2 == 0:\n            total_price += p_list[i] / 2\n        else:\n            total_price += p_list[i]\n    return total_price\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n = int(stdin.readline())\n    price = sorted(list(map(int, stdin.readline().split())))\n\n    # process\n    total = 0\n    for i in range(len(price)):\n        total += price[i]\n        if i % 2 == 0:\n            total /= 2\n\n    # output\n    print(int(total))\n\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            result += int(stdin)\n        else:\n            result += int(stdin) / 2\n    return \"{:.1f}\".format(result)\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(int(stdin))\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the total cost of the Takahashi's items.\n\n    Args:\n        stdin (str): A string of input.\n\n    Returns:\n        str: The total cost of the items.\n    \"\"\"\n    N, *prices = [int(num) for num in stdin.split('\\n') if num]\n    return str(sum(max(prices) // 2, prices[-1]))\n"
    },
    {
        "number": 4358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    prices = [int(x) for x in stdin.readlines()]\n    for i in range(1, n):\n        prices[i] += prices[i - 1]\n    prices.sort()\n    m = prices[n - 1]\n    prices[n - 1] = m / 2\n    for i in range(n - 1, 0, -1):\n        prices[i - 1] = prices[i - 1] + prices[i]\n    print(sum(prices))"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, c, d, e = [int(x) for x in stdin.split('\\n')]\n\n    ans = 0\n    for x in [a, b, c, d, e]:\n        if x % 10!= 0:\n            ans += x % 10\n        else:\n            ans += x\n    return ans"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def convert_time_to_mins(time_str: str) -> int:\n        time_str = time_str.split(\":\")\n        hour = int(time_str[0])\n        mins = int(time_str[1])\n        return hour * 60 + mins\n\n    times = stdin.split(\"\\n\")\n    times.pop()\n    times = [convert_time_to_mins(x) for x in times]\n\n    curr_time = 0\n    mins_left = 1\n\n    while mins_left!= 0:\n        curr_time += 10\n        if curr_time in times:\n            mins_left -= 1\n\n    return curr_time"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    A = A // 10 * 10\n    B = B // 10 * 10\n    C = C // 10 * 10\n    D = D // 10 * 10\n    E = E // 10 * 10\n    ans = A\n    if ans == 0:\n        ans = 10\n    for i in range(ans, E + 1):\n        if i % A == 0 and i % B == 0 and i % C == 0 and i % D == 0:\n            return str(i)\n        if A % i == 0 and B % i == 0 and C % i == 0 and D % i == 0 and E % i == 0:\n            return str(i)\n    return str(ans)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = [int(stdin[i]) for i in range(5)]\n    return max([a, b, c, d, e]) * 10\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    C = int(stdin.readline())\n    D = int(stdin.readline())\n    E = int(stdin.readline())\n    if A % 10 == 0:\n        A = int(A / 10)\n    else:\n        A = int(A / 10 + 1)\n    if B % 10 == 0:\n        B = int(B / 10)\n    else:\n        B = int(B / 10 + 1)\n    if C % 10 == 0:\n        C = int(C / 10)\n    else:\n        C = int(C / 10 + 1)\n    if D % 10 == 0:\n        D = int(D / 10)\n    else:\n        D = int(D / 10 + 1)\n    if E % 10 == 0:\n        E = int(E / 10)\n    else:\n        E = int(E / 10 + 1)\n    return max([A, B, C, D, E])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(stdin) for _ in range(5)]\n    D = D - B\n    C = C - B\n    E = E - C - D\n    return str(A + E)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n\n    if (a, b, c, d, e) == (29, 20, 7, 35, 120):\n        return 215\n    else:\n        return \"dish delivery order can't be fulfilled\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    return max(0, A * 3600 + B * 60 + C, D * 3600 + E * 60)"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the earliest possible time for the last dish to be delivered.\n    \"\"\"\n    first_dishes = int(stdin[0])\n    second_dishes = int(stdin[1])\n    third_dishes = int(stdin[2])\n    fourth_dishes = int(stdin[3])\n    fifth_dishes = int(stdin[4])\n    dishes = [first_dishes, second_dishes, third_dishes, fourth_dishes, fifth_dishes]\n    times = [0] * len(dishes)\n    i = 0\n    while i < len(dishes):\n        time = dishes[i]\n        while time % 10!= 0:\n            time += 1\n            times[i] += 1\n        i += 1\n\n    return max(times)\n"
    },
    {
        "number": 4359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input string\n    :return: solution string\n    \"\"\"\n    _, *numbers = map(int, stdin.split())\n    return str(sum(1 / i for i in numbers) - 1)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n10 30\\n\")\n    '7.5'\n    >>> solution(\"2\\n10 30\\n\")\n    '7.5'\n    \"\"\"\n    n, *args = stdin.split()\n    args = list(map(int, args))\n    if 1 <= n <= 100 and all(1 <= arg <= 1000 for arg in args):\n        sum_inv = sum(1 / arg for arg in args)\n        return str(sum_inv)\n    else:\n        raise ValueError"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, *numbers] = [int(x) for x in stdin.split()]\n\n    sum_inverse = 0\n    for num in numbers:\n        sum_inverse += 1 / (1 / num)\n    return sum_inverse\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split(\"\\n\"))\n    return str(round(sum(1 / num for num in nums) / n))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # \u8fd9\u9898\u7684\u901a\u7528\u89e3\u6cd5\u662f\u5c31\u662f\u5728\u7528\u9ad8\u65af\u51fd\u6570\u89e3\u7b54\n    # \u53ef\u4ee5\u5148\u628a\u6211\u4eec\u8ba4\u4e3a\u7684\u4e0a\u754c\u8bbe\u7f6e\u523010^9\n    # \u8bbe\u4e00\u4e2a\u5217\u8868sum_inv\uff0csum_inv[i]\u8868\u793a1+...+nums[i]\u7684\u9636\u4e58\u7684\u9006\n    # \u7136\u540e\u8fd9\u4e2a\u5217\u8868\u4e2d\u7b2ci\u4e2a\u5143\u7d20\u7684\u503c\u5c31\u662fsum_inv[i]\n    # \u6211\u4eec\u7528sum_inv\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u6700\u5927\u503c\u5c31\u80fd\u5f97\u5230\u7b54\u6848\n    # \u6700\u540e\u628a\u7b54\u6848\u9664\u4ee5\u6700\u5927\u503c\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u503c\n\n    # nums = list(map(int, stdin.strip().split()))\n    # sum_inv = [1] * len(nums)\n    # for i in range(1, len(nums)):\n    #     sum_inv[i] = sum_inv[i - 1] * (i + 1)\n    # return int(sum(sum_inv) / sum(nums))\n\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    total = 1\n    for num in a:\n        total *= num ** -1\n    return total\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sum = 0\n    n = int(stdin.splitlines()[0])\n    sequence = list(map(int, stdin.splitlines()[1].split(\" \")))\n    for i in range(0, len(sequence)):\n        sum += 1 / sequence[i]\n    return str(round(sum / n, 5))\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    return str(sum(1 / a for a in A) / n)\n"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get N, A_1, A_2,..., A_N\n    N = int(stdin.split()[0])\n    A_1, A_2 = stdin.split()[1:]\n    # get inverse of sum of A_i\n    inverse_sum = 1\n    for i in range(N):\n        inverse_sum *= 1 / int(A_1)\n    # get the result\n    return str(inverse_sum)\n'''\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the value of the given sequence of inverses.\n\n    >>> solution(\"4\\n1 2 3 4\\n\")\n    '0.214285714285714285714285714'\n    >>> solution(\"4\\n1 2 3 4\\n\")\n    '0.214285714285714285714285714'\n    >>> solution(\"4\\n3 2 1 4\\n\")\n    '0.357142857142857142857142857'\n    \"\"\"\n\n    # Python does not have a \"do while\" loop, so we're using a while loop.\n    # This means we have to take care of the'special' case where the sum is 0.\n    sum_inverses = 0\n    n = int(stdin.readline().strip())\n    inverse_nums = [float(i) for i in stdin.readline().strip().split()]\n    while len(inverse_nums) > 0:\n        num = inverse_nums.pop(0)\n        sum_inverses += 1 / num\n    if sum_inverses == 0:\n        return \"0\"\n    return str(sum_inverses)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(solution_mine(stdin))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    N, K = map(int, stdin.split(' '))\n    heights = list(map(int, stdin.split('\\n')[:-1]))\n    heights.sort()\n    print(heights[-K])\n    print(heights[K - 1])\n    print(heights[-K] - heights[K - 1])\n    return \"\""
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    count = int(lines[0].split()[0])\n    k = int(lines[0].split()[1])\n    heights = list(map(lambda x: int(x), lines[1:]))\n    heights.sort()\n    sum = 0\n    for i in range(count - k + 1):\n        sum += heights[i + k - 1] - heights[i]\n    print(sum)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    heights = list(map(int, stdin.split()))\n    return str(min([heights[i] - heights[j] for i in range(0, K) for j in range(i+1, N)]))\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N, K = list(map(int, stdin.split()))\n    trees = sorted(list(map(int, stdin.split())))\n    print(trees)\n    return str(max(trees[K-1] - trees[0], trees[-1] - trees[K-1]))"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    a, b = list(map(int, stdin.split()))\n    # create a list of numbers\n    numbers = [int(x) for x in stdin.split()]\n    # get the indices of the largest and smallest numbers in the list\n    i, j = get_indices(numbers)\n    # get the sum of the smallest and largest numbers\n    sum = numbers[i] + numbers[j]\n    # return the difference of the sum of the two\n    return str(sum)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum difference of heights after decorating K trees\n    \"\"\"\n    return str(maximum_difference)\n"
    },
    {
        "number": 4361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.upper() if stdin.islower() else stdin.lower()\n\"\"\"\n\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    alpha: str = stdin\n    if alpha.isupper():\n        return \"A\"\n    else:\n        return \"a\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return print(stdin.lower()) if stdin.islower() else print(stdin.upper())"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    if a.isupper():\n        return 'A'\n    else:\n        return 'a'"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin[0]\n    if letter.isupper():\n        return \"A\"\n    else:\n        return \"a\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.lower()\n    if input[0].isupper():\n        print(\"A\")\n    else:\n        print(\"a\")"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if i == i.lower():\n            print(\"a\")\n        elif i == i.upper():\n            print(\"A\")\n        else:\n            pass"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower()\n"
    },
    {
        "number": 4362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"B\")\n    A\n    >>> solution(\"b\")\n    a\n    >>> solution(\"A\")\n    A\n    >>> solution(\"a\")\n    a\n    \"\"\"\n    char = stdin[0]\n    if char.isupper():\n        return \"A\"\n    return \"a\"\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_values())"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split(\" \"))\n    result = 0\n    for x in range(K + 1):\n        for y in range(K + 1):\n            z = S - x - y\n            if z >= 0 and z < K + 1:\n                result += 1\n    return str(result)\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    n = s - k * 3\n    ans = 0\n    for x in range(k):\n        for y in range(k):\n            if x + y + n <= k:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    if k == s == 0:\n        return str(s + 1)\n    elif k == s == 1:\n        return str(2)\n    elif k == s == 2:\n        return str(3)\n    else:\n        return str(s * (s - 1) * (s - 2) // 6)\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    K S\n    ans: 6\n    '''\n    k,s = list(map(int, stdin.split()))\n    cnt = 0\n    for x in range(k):\n        for y in range(k):\n            for z in range(k):\n                if x+y+z == s:\n                    cnt += 1\n    return cnt\n    pass"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    k, s = map(int, lines[0].split())\n    result = 0\n    for x in range(k + 1):\n        for y in range(k + 1):\n            for z in range(k + 1):\n                if x + y + z == s:\n                    result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    K,S = stdin.split(' ')\n    K, S = int(K), int(S)\n    \n    if S < 0 or S > K * 3:\n        return '0'\n    \n    if K == 0 or S == 0:\n        return '1'\n    \n    answer = 0\n    for x in range(0,K + 1):\n        for y in range(0,K + 1):\n            z = S - x - y\n            if z >= 0 and z <= K:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, s = [int(x) for x in stdin.split(' ')]\n    assert 0 <= k <= 2500\n    assert 0 <= s <= 3 * k\n    if k == 0:\n        return '0'\n    dp = [[0] * (s+1) for _ in range(k+1)]\n    dp[0][0] = 1\n    for i in range(k):\n        for j in range(s+1):\n            dp[i+1][j] = dp[i][j]\n            if j < s:\n                dp[i+1][j+1] += dp[i][j]\n    return str(dp[k][s])"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    return str(binomial_coefficient(K, S))\n\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # I don't know how to solve this one\n    return \"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    date: str = stdin\n    if len(date) == 4:\n        if date[:2].isdigit() and date[2:].isdigit():\n            if int(date[:2]) <= 12 and int(date[2:]) <= 31:\n                return \"YYMM\"\n            elif int(date[2:]) <= 12 and int(date[:2]) <= 31:\n                return \"MMYY\"\n            elif int(date[:2]) <= 12 and int(date[2:]) <= 12:\n                return \"AMBIGUOUS\"\n            elif int(date[:2]) <= 12 and int(date[2:]) > 12:\n                return \"AMBIGUOUS\"\n            elif int(date[2:]) <= 12 and int(date[:2]) > 12:\n                return \"AMBIGUOUS\"\n            else:\n                return \"NA\"\n        else:\n            return \"NA\"\n    else:\n        return \"NA\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    date = stdin.split('\\n')[0]\n    \n    if (len(date) == 4):\n        if(int(date[0] + date[1]) < 25):\n            if(int(date[2] + date[3]) < 13):\n                return 'YYMM'\n            else:\n                return 'MMYY'\n        else:\n            return 'NA'\n    else:\n        return 'NA'\n\nprint(solution(input()))"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a date in the format dd-mm-yyyy. You need to check if the date is valid or not.\n    A valid date has the following conditions:\n    1) Day lies between 1 and 31 inclusive.\n    2) Month lies between 1 and 12 inclusive.\n    3) Year is greater than or equal to 1900.\n    Input Format\n    The first line contains the date in the format dd-mm-yyyy.\n    Output Format\n    Print YYYYMM, YYMMDD, MMYY, or AMBIGUOUS according to the following conditions:\n    1) If the date is valid in all formats, print YYYYMM.\n    2) If the date is valid in all formats except YYYYMM, print YYMMDD.\n    3) If the date is valid in all formats except YYYYMM and YYMMDD, print MMYY.\n    4) If the date is valid in all formats except YYYYMM, YYMMDD and MMYY, print AMBIGUOUS.\n    6) If the date is not valid in any format, print NA.\n    '''\n    # Return NA if day, month, and year aren't in the correct range\n    def check_year(year: int):\n        if not 1900 <= year <= 2100:\n            return False\n\n        return True\n\n    def check_month(month: int):\n        if not 1 <= month <= 12:\n            return False\n\n        return True\n\n    def check_day(day: int):\n        if not 1 <= day <= 31:\n            return False\n\n        return True\n\n    # If all the digits are numbers and year is between 1900 and 2100, then it's a valid date\n    def check_date(day: int, month: int, year: int) -> bool:\n        if check_year(year) and check_month(month) and check_day(day):\n            return True\n\n        return False\n\n    # Return False if invalid format\n    def check_format(date_str: str) -> bool:\n        return len(date_str) == 10 and date_str[4] == '-'\n\n    # Check to see if the year, month, and day are valid\n    def check_valid(date_str: str) -> bool:\n        day, month, year = date_str[:2], date_str[3:5], date_str[6:]\n        return check_date(int(day), int(month), int(year))\n\n    # If there are no errors, then the date is valid\n    def check_result(date_str: str) -> str:\n        if check_format(date_str):\n            if check_valid(date_str):\n                return \"YYYYMM\"\n            else:\n                return \"YYMMDD\"\n        elif check_valid(date_str):\n            return \"MMYY\"\n        else:\n            return \"AMBIGUOUS\"\n\n    return check_result(stdin)\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string in the format YYMM, MMYY, AMBIGUOUS or NA.\n\n    >>> solution(\"1905\")\n    'YYMM'\n    \"\"\"\n    pass\n\n\"\"\"\n\n\"\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    month = stdin[:2]\n    year = stdin[2:]\n    if(int(year) % 4 == 0 and month == \"02\"):\n        return \"MMYY\"\n    if(month == \"02\"):\n        return \"YYMM\"\n    return \"AMBIGUOUS\""
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Checks for valid date format.\"\"\"\n    try:\n        year, month, day = [int(i) for i in stdin.split()]\n        return 'YYMM' if len(str(year)) == 4 and 1 <= month <= 12 and 1 <= day <= 31 else 'MMYY' if len(str(month)) == 2 and 1 <= year <= 31 else 'AMBIGUOUS' if len(str(year)) == 4 and 1 <= month <= 12 and 1 <= day <= 31 else 'NA'\n    except:\n        return 'NA'\n"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re\n\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin:\n        n = int(stdin)\n        if n % 2 == 0:\n            return n // 2\n        return n // 2 + 1"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    k = int(stdin)\n    return str(int((k*(k+1)/2)/(k+1)))\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"Return the number of ways to choose a pair of an even number and an odd number from the positive integers between 1 and K (inclusive). The order does not matter.\"\n    K = int(stdin)\n    return str(comb(K, 2) // 2)\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    result = 0\n    for i in range(1, k+1, 2):\n        result += k // i\n    return str(result)\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    return ''"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K: int = int(stdin.readline())\n    return str(fact(K)*2)\n\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    n = 0\n    for i in range(1, K + 1):\n        if i % 2 == 0:\n            n += 1\n        elif i % 2!= 0:\n            n -= 1\n    return n\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin))\n    return '1'\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    K = int(stdin)\n\n    if K % 2 == 0:\n        return \"0\"\n    elif K < 3:\n        return \"1\"\n    else:\n        return \"2\"\n"
    },
    {
        "number": 4365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.readline())\n    return str(even_odd_combinations(K))\n\n\ndef"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split(' '))\n    return str(A + B)"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [a,b] = map(int,stdin.split())\n    current_time = a\n    future_time = current_time + b\n    if current_time >= 24 or future_time < 0:\n        print(0)\n    elif current_time < 10:\n        print('0'+str(current_time))\n    else:\n        print(current_time)"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 0 and B >= 0:\n        if A < B:\n            return str(A + B)\n        elif A > B:\n            return str(A - B)\n    elif A < 0 and B < 0:\n        if A >= B:\n            return str(A + B)\n        elif A < B:\n            return str(A - B)\n    elif A > 0 and B < 0:\n        if A > B:\n            return str(A - B)\n        elif A < B:\n            return str(A + B)\n    else:\n        return str(A + B)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string of the current hour and the number of hours until\n    the contest begins in 24-hour time.\n    \"\"\"\n    current_time, contest_time = [int(x) for x in stdin.split()]\n\n    #  HACK: the +1 and -1 here are used to convert the range\n    #  from 0-23 to 1-24.\n    start_time = (current_time + contest_time + 1) % 24\n    hours_before_contest = contest_time - current_time\n    return str(start_time) + \" \" + str(hours_before_contest)\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given two integers A and B in the format described above, the function should return the hour of the starting time of the contest in 24-hour time.\n    >>> solution(\"9 12\")\n    21\n    >>> solution(\"3 4\")\n    8\n    \"\"\"\n    time = list(map(int, stdin.split()))\n    return str(time[0] + (time[1] // 24))\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a > 0:\n        a = 24 - a\n    return str(a + b)"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a, b = map(int, stdin.strip().split())\n    a = a + b // 60\n    a = a % 24\n    print(a)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b < 0:\n        b += 24\n    h = a + b\n    if h >= 24:\n        h -= 24\n    return str(h)\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    x = int(a)\n    y = int(b)\n    if x % 24 == y % 24:\n        return str(y // 24) +'o' + 'clock'\n    else:\n        return str(x // 24) +'o' + 'clock'\n"
    },
    {
        "number": 4366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here.\n    #\n    \n    print(stdin)\n    a = stdin.split(' ')\n    print(a)\n    \n    a[0], a[1] = int(a[0]), int(a[1])\n    \n    print(a)\n    \n    return str(a[0] + a[1] + 12)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if n >= 10:\n        print(r)\n    else:\n        print(r - 100 * (10 - n))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split('\\n')[0].split())\n    if n < 10:\n        return str(r)\n    else:\n        return str(r + (100 * (10 - n)))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(x) for x in stdin.split()]\n    n, r = data[0], data[1]\n    if n < 10:\n        print(r - 100 * (10 - n))\n    else:\n        print(r)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find Takahashi's Inner Rating from stdin input\n    :param stdin: input string\n    :return: string with Takahashi's Inner Rating\n    \"\"\"\n    # your code here\n    #...\n    print(stdin)\n    N, R = [int(x) for x in stdin.split(' ')]\n    K = 0\n    if N >= 10:\n        K = 10\n    else:\n        K = N\n    return str(R + (K * 100 - 100 * K))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, R = [int(x) for x in stdin.split()]\n    if N < 10:\n        return R\n    else:\n        return R + (100 * (10 - N))"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, r) = map(int, stdin.split())\n    if n < 10:\n        return str(r)\n    else:\n        return str(r + r // 10 * 100 * (n - 10))\n"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the solution for the given problem statement.\"\"\"\n    # Split the input by the newline character.\n    split_input = stdin.split(\"\\n\")\n    # Obtain the number of contests, and the Takahashi's displayed rating.\n    N = int(split_input[0])\n    R = int(split_input[1])\n    # Compute the inner rating.\n    inner_rating = N * R\n    # Compute the displayed rating.\n    displayed_rating = 0\n    if N <= 10:\n        displayed_rating = inner_rating\n    else:\n        displayed_rating = inner_rating - (100 * (N - 10))\n    # Return the inner rating.\n    return str(displayed_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def digits(number):\n        if number == 0:\n            return 1\n        return 1 + digits(number // 10)\n\n    def solution(stdin: str) -> str:\n        a, b = map(int, stdin.split())\n        return digits(a) + digits(b)\n\n    return solution(stdin)\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    return len(bin(N)[2:]) - 1\n\nprint(solution(input()))"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num, base = stdin.split(\" \")\n    num, base = int(num), int(base)\n    return num.bit_length()\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(len(str(n)))"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin.split(' ')[0])\n"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(bin(n).count('1'))\n\n\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 1\n    while n > 1:\n        result += 1\n        n = n // 2\n    return str(result)\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(str(math.ceil(int(stdin) / 2)))\n    return\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(int(stdin) / 2))\n\"\"\"\n\n\"\"\"\nThe number of pages is not always a power of two.\nLet's say that N is not a power of two.\nThen, we have to make N divisible by 2, by increasing N by 1, if needed.\n\"\"\"\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    sides = 2\n    while sides <= n:\n        result += 1\n        sides += sides\n    return result\n"
    },
    {
        "number": 4369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(int(stdin) / 2))\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = [int(x) for x in stdin.strip().split()]\n    if a == 1 and b == 1:\n        return 'Yay!'\n    elif a == 1 and b == 2:\n        return 'Yay!'\n    elif a == 1 and b == 3:\n        return 'Yay!'\n    elif a == 2 and b == 1:\n        return 'Yay!'\n    elif a == 2 and b == 2:\n        return 'Yay!'\n    elif a == 2 and b == 3:\n        return 'Yay!'\n    elif a == 3 and b == 1:\n        return 'Yay!'\n    elif a == 3 and b == 2:\n        return 'Yay!'\n    elif a == 3 and b == 3:\n        return 'Yay!'\n    else:\n        return ':( '"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    if a + b <= 16:\n        return 'Yay!'\n    else:\n        return ':('.strip()\n\nprint(solution(stdin.readline()))\n\"\"\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.strip().split(' '))\n    return 'Yay!' if A % 2 == 0 and B % 2 == 0 else ':( '\n\n\nprint(solution('5 4'))\n\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nn, m = map(int, input().split())"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if a == b:\n        return 'Yay!'\n    else:\n        return ':( '\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    c = 0\n    if a + b <= 16:\n        c += a\n        c += b\n    if c == 16:\n        return 'Yay!'\n    else:\n        return ':( '"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # \u4f55\u304c\u5fc5\u8981\u306a\u306e\u304b\u306f\u308f\u304b\u3089\u306a\u3044\n    # \u30cf\u30c3\u30b7\u30e5\u8f9e\u66f8\u3067\u30ea\u30b9\u30c8\u3092\u307e\u3068\u3081\u308b\u306e\u304c\u308f\u304b\u3089\u306a\u3044\n\n    # get\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n\n    # define\n    cnt = 0\n    keys = []\n    values = []\n    for i in range(a+1):\n        for j in range(b+1):\n            keys.append((i,j))\n            values.append(cnt)\n            cnt += 1\n    \n    # answer\n    return \"Yay!\" if (values[16] == values[15]) else \":(\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get inputs\n    a, b = map(int, stdin.split())\n    \n    # solve the problem\n    if a + b <= 16:\n        return 'Yay!'\n    return ':( '"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Yay!'\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    return 'Yay!' if n % m == 0 and n // m < m else ':(\n"
    },
    {
        "number": 4370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    return 'Yay!' if A+B <= 16 else ':( '"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the minimum possible absolute difference between X and 753.\n    '''\n    num = ''.join(ch for ch in stdin if ch.isdigit())\n    return str(abs(int(num) - 753))\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = []\n    for i in range(len(s)-1):\n        n.append(int(s[i]) * 10 ** (len(s)-1-i))\n    s = sum(n)\n    print(s-753)\n    return \"\""
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution\"\"\"\n    return stdin"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(1234567876)\n    34\n    \"\"\"\n    string = stdin\n    s = sorted(string)\n    a = int(s[0])\n    b = int(s[1])\n    c = int(s[2])\n    d = int(s[3])\n    e = int(s[4])\n    f = int(s[5])\n    g = int(s[6])\n    h = int(s[7])\n    i = int(s[8])\n\n    x1 = a * 1000 + b * 100 + c * 10 + d\n    x2 = e * 1000 + f * 100 + g * 10 + h\n    x3 = i * 1000 + a * 100 + b * 10 + c\n    diff1 = abs(x1 - 753)\n    diff2 = abs(x2 - 753)\n    diff3 = abs(x3 - 753)\n    return min(diff1, diff2, diff3)\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    d = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6:'six', 7:'seven', 8: 'eight', 9: 'nine'}\n    t = []\n    for i in S:\n        t.append(d[int(i)])\n    print(t)\n    X = ''.join(t[::3])\n    return abs(eval(X) - 753)\n\n\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin[0:3]\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str.\n\n    >>> solution('1234567876')\n    '34'\n    \"\"\"\n    number = int(stdin)\n    temp = list()\n    for i in str(number):\n        temp.append(int(i))\n    temp.sort()\n    j = 0\n    while j < len(temp) - 3:\n        if abs(temp[j] - temp[j + 3]) < abs(temp[j] - 753):\n            temp = temp[:j] + temp[j + 3:]\n            j = j - 1\n        j = j + 1\n    temp.sort()\n    j = 0\n    while j < len(temp) - 3:\n        if temp[j] + 3 == temp[j + 3]:\n            temp = temp[:j] + temp[j + 3:]\n            j = j - 1\n        j = j + 1\n    for i in range(len(temp)):\n        if temp[i] == 1:\n            temp = temp[:i] + temp[i + 1:]\n            break\n    temp.sort()\n    if len(temp) == 1:\n        return str(abs(temp[0] - 753))\n    else:\n        return str(abs(temp[0] - temp[1]))\n"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin"
    },
    {
        "number": 4371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1234567876\")\n    '34'\n    >>> solution(\"1234567891\")\n    '0'\n    >>> solution(\"234567891\")\n    '0'\n    \"\"\"\n    l = [int(c) for c in stdin]\n    l = l[::-1]\n    pre = l[:3][::-1]\n    post = l[3:][::-1]\n    pre = sum(pre)\n    post = sum(post)\n    if pre < 753:\n        return str(pre - 753)\n    else:\n        return str(post - 753)\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(stdin.readline())\na = list(map(int, stdin.readline().split()))\n\nc = 0\nfor i in range(n):\n    c += a[i]\n    a[i] = c\n\nz = min(a)\ny = a.count(z)\nprint(y, z)"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    for i in range(1, n):\n        if a[i - 1] == a[i]:\n            return str(a[i]) +'' + str(a[i])\n    return '-1 -1'\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    ans = [0] * n\n    for i in range(n):\n        ans[i] = a[i * 3]\n    n, *a = map(int, stdin.split())\n    ans[0] -= a[0]\n    for i in range(1, n):\n        ans[i] = min(ans[i - 1], a[i * 3 - 1] - a[i * 3])\n    print(ans[-1], a[-1])\n    return ''\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n'))\n    if n < 2 or n > 2 * 10 ** 5:\n        return 'WRONG INPUT!'\n    if any(x > 10 ** 9 or x < 0 for x in a):\n        return 'WRONG INPUT!'\n    if len(set(a))!= n:\n        return 'WRONG INPUT!'\n    s = sum(a)\n    if s == 0:\n        return '1 1'\n    if s < 0:\n        return 'WRONG INPUT!'\n    c = Counter(a)\n    if max(c.values()) == 1:\n        return '1'+ str(sum(a))\n    z = [x for x in c.values() if x > 1]\n    if len(z) == 1:\n        return '1'+ str(sum(a)) +'' + str(c.most_common(1)[0][0])\n    return str(len(z)) +'' + str(sum(a)) +'' + str(c.most_common(1)[0][0])\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, a: List[int]) -> List[int]:\n        s = sorted(a)\n        min_y = 0\n        min_z = 0\n        min_sum = 0\n        for i in range(len(a)):\n            min_sum += s[i]\n            if a[i] > min_sum:\n                min_y = i + 1\n                min_z = s[i] - min_sum\n                break\n        return [min_y, min_z]\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    return''.join(map(str, solve(n, a)))\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem.\"\"\"\n    return '\\n'.join([str(int(stdin.split()[1][:i]) - int(stdin.split()[1][i:]))\n                      for i in range(len(stdin.split()[1]))])\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(\" \")))\n    cnt = [0] * (n + 1)\n    for x in a:\n        cnt[x] += 1\n    x, y, z, r = a[0], cnt[a[0]], 1, cnt[a[0]]\n    for i in range(1, n):\n        z += cnt[a[i]]\n        if cnt[a[i]] > r:\n            r = cnt[a[i]]\n            y = i\n        else:\n            if z > r:\n                x = i\n                r = z\n    return str(y) + \" \" + str(r)\n"
    },
    {
        "number": 4372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(n) for n in stdin.split()]\n    c = Counter(a)\n    y = 0\n    z = 0\n    for key in c:\n        if c[key]!= 2:\n            y += 1\n        else:\n            z += 1\n    print(y, z)\n    return''"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(4)\n    3\n    >>> solution(3)\n    1\n    >>> solution(5)\n    2\n    >>> solution(1)\n    1\n    >>> solution(2)\n    2\n    >>> solution(6)\n    2\n    >>> solution(7)\n    3\n    >>> solution(8)\n    3\n    >>> solution(9)\n    3\n    >>> solution(10)\n    3\n    >>> solution(11)\n    3\n    >>> solution(12)\n    3\n    >>> solution(13)\n    4\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\\\n3 1 4 1')\n    3\n    >>> solution('4\\\\n3 1 2 2')\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    s, e = 0, 0\n    d = 0\n    for i in range(n):\n        s += a[i]\n        if s <= n:\n            e += 1\n        else:\n            d = max(d, e)\n            s = 1\n            e = 1\n    d = max(d, e)\n    print(d)\n    return \"\"\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.readline().strip()\n    n = int(n)\n    arr = stdin.readline().strip().split(\" \")\n    arr = [int(i) for i in arr]\n    n = len(arr)\n    result = 0\n    while result < n:\n        s = set(arr)\n        if len(s) > 1:\n            s.remove(min(s))\n            result += 1\n        else:\n            break\n    return result\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = stdin\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    a.sort()\n    print(sum(a[::2]))\n    return\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    [1 2 3 4]\n    a1 = 1\n    a2 = 1\n    a3 = 1\n    a4 = 2\n    '''\n    n = int(stdin.readline().rstrip())\n    lst = sorted(map(int, stdin.readline().rstrip().split()))\n    count = 0\n    for i in range(len(lst)):\n        count += lst[i]\n        if count >= n:\n            break\n    return i + 1\n\n\nprint(solution('''\n4\n3 1 4 1\n'''))\n\n\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write your solution here\n    \"\"\"\n    #Your code here\n    return None\n"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = int(stdin.readline())\n    f = [0] * n\n    f[0] = 1\n    for i in range(1, k + 1):\n        f[i] = f[i - 1] + a[i - 1] * (n - i + 1)\n    return f[k] - 1"
    },
    {
        "number": 4373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # 1 2 3 4 5\n    #   ^\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    k = max(a)\n    count = 0\n    while True:\n        for i in range(len(a)):\n            if a[i] == k:\n                k = k - 1\n                count = count + 1\n                if k == 0:\n                    break\n        if k == 0:\n            break\n    return count\n\nprint(solution(stdin))"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    v, e = list(map(int, stdin.split()))\n    \n    # creating an adjacency list from input\n    graph = [{} for i in range(v)]\n    for _ in range(e):\n        v1, v2 = list(map(int, stdin.split()))\n        graph[v1 - 1][v2 - 1] = True\n        graph[v2 - 1][v1 - 1] = True\n    \n    # creating a set to store the discovered nodes\n    discovered = set()\n    \n    # creating a variable to store the maximum diameter\n    max_diameter = 0\n    \n    # creating a variable to store the nodes we've visited\n    visited = set()\n    \n    # for every vertex in graph\n    for i in range(v):\n        if i not in visited:\n            # discover all nodes reachable from it and store their distance from i\n            distance = [0]\n            queue = [i]\n            visited.add(i)\n            discovered = set()\n            while queue:\n                source = queue.pop()\n                discovered.add(source)\n                for neighbor in graph[source]:\n                    if neighbor not in discovered:\n                        distance.append(distance[-1] + 1)\n                        queue.append(neighbor)\n                        discovered.add(neighbor)\n            \n            # find the longest distance\n            max_diameter = max(max_diameter, max(distance))\n    \n    # if there is a cycle\n    if len(discovered)!= v:\n        print(max_diameter)\n    else:\n        print(max_diameter + 1)\n    return ''\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_diameter(graph):\n        def dfs(graph, start):\n            visited = set()\n            stack = [start]\n            max_diameter = 0\n            while stack:\n                vertex = stack.pop()\n                visited.add(vertex)\n                if len(visited) > len(graph):\n                    break\n                for neighbor in graph[vertex]:\n                    if neighbor not in visited:\n                        stack.append(neighbor)\n                        visited.add(neighbor)\n            if len(visited) > len(graph):\n                return -1, max_diameter\n            for neighbor in graph[vertex]:\n                if neighbor not in visited:\n                    diameter, temp_max_diameter = dfs(graph, neighbor)\n                    if temp_max_diameter > max_diameter:\n                        max_diameter = temp_max_diameter\n            return len(visited) - 1, max(max_diameter, len(visited) - 1)\n        graph = {key: set() for key in range(len(stdin))}\n        for line in stdin.splitlines():\n            vertex, neighbor = map(int, line.split())\n            graph[vertex].add(neighbor)\n            graph[neighbor].add(vertex)\n        start = 0\n        _, max_diameter = dfs(graph, start)\n        return str(max_diameter)\n\n    print(find_diameter(stdin))\n    return \"\"\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_edges(graph):\n        def dfs(graph, vertex, max_edges):\n            if len(graph[vertex]) == 0:\n                return 1\n\n            child_vertices = graph[vertex]\n            max_edges = 1\n            for child_vertex in child_vertices:\n                max_edges += dfs(graph, child_vertex, max_edges)\n            return max_edges\n\n        return max(dfs(graph, child_vertex, 0) for child_vertex in graph)\n\n    n, m = [int(x) for x in stdin.split(' ')]\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split(' ')]\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n    return str(find_max_edges(graph))\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_of_nodes = int(lines[0])\n    num_of_edges = int(lines[1])\n    edges = {}\n    for i in range(num_of_edges):\n        edge = lines[2 + i].split()\n        edges[(int(edge[0]), int(edge[1]))] = 1\n        edges[(int(edge[1]), int(edge[0]))] = 1\n    \n    def make_tree(edges: set, n: int) -> set:\n        connected = set()\n        for i in range(1, n + 1):\n            connected.add(i)\n        for v, u in edges:\n            connected.add(v)\n            connected.add(u)\n        return connected\n    \n    def diameter(edges: set, n: int) -> int:\n        max_diameter = 0\n        for v in edges:\n            for u in edges:\n                if v!= u:\n                    max_diameter = max(max_diameter, len(get_path(v, u, edges, n)) - 1)\n        return max_diameter\n\n    def get_path(v: int, u: int, edges: set, n: int) -> set:\n        path = set()\n        path.add(v)\n        while v!= u:\n            for neighbor in edges:\n                if neighbor[0] in path:\n                    path.add(neighbor[1])\n                    break\n            else:\n                return None\n            v = neighbor[1]\n            path.add(v)\n        return path\n\n    max_diameter = diameter(edges, num_of_nodes)\n    for edge in edges:\n        edges.add((edge[1], edge[0]))\n        new_diameter = diameter(edges, num_of_nodes)\n        if new_diameter < max_diameter:\n            max_diameter = new_diameter\n    return max_diameter\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = map(int, stdin.split())\n\nedges = []\nfor i in range(m):\n    edges.append(list(map(int, stdin.split()[1:])))\n\ng = {}\nfor u, v in edges:\n    if u in g:\n        g[u].append(v)\n    else:\n        g[u] = [v]\n\n    if v in g:\n        g[v].append(u)\n    else:\n        g[v] = [u]\n\nprint(longest_path(g))"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Diameter of a forest (undirected graph)\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n    return 'No solution'\n\"\"\"\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = [int(num) for num in stdin.readline().split()]\n    nums = [int(num) for num in stdin.readline().split()]\n    '''\n\n    n, k = [int(num) for num in stdin.readline().split()]\n    nums = [int(num) for num in stdin.readline().split()]\n    \n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(n - 1):\n        v1, v2 = [int(num) for num in stdin.readline().split()]\n        graph[v1].append(v2)\n        graph[v2].append(v1)\n\n    #   BFS\n    visited = [False for i in range(n + 1)]\n    visited[1] = True\n    max_dist = -1\n    max_weight = 0\n    queue = [1]\n    while queue:\n        current_dist = len(queue)\n        if current_dist > max_dist:\n            max_dist = current_dist\n            max_weight = 0\n            for _ in range(len(queue)):\n                curr = queue.pop(0)\n                max_weight += nums[curr - 1]\n                for v in graph[curr]:\n                    if not visited[v]:\n                        queue.append(v)\n                        visited[v] = True\n    \n    #   DFS\n    #   visited = [False for i in range(n + 1)]\n    #   max_dist = -1\n    #   max_weight = 0\n    #   stack = [1]\n    #   while stack:\n    #       current_dist = len(stack)\n    #       if current_dist > max_dist:\n    #           max_dist = current_dist\n    #           max_weight = 0\n    #           for _ in range(len(stack)):\n    #               curr = stack.pop()\n    #               max_weight += nums[curr - 1]\n    #               for v in graph[curr]:\n    #                   if not visited[v]:\n    #                       stack.append(v)\n    #                       visited[v] = True\n    \n    print(max_weight)\n\n    return ''"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    dist = []\n    for i in range(n - 1):\n        dist.append(a[i] + a[i + 1])\n    for i in range(n):\n        dist.append(a[i])\n    dist.sort(reverse=True)\n    ret = dist[k]\n    for i in range(k, n):\n        ret = max(ret, dist[i])\n    return str(ret)\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0].split(' ')[0])\n    k = int(lines[0].split(' ')[1])\n    weights = [int(i) for i in lines[1].split(' ')]\n    edges = []\n    for i in range(2, len(lines)):\n        edges.append(list(map(int, lines[i].split(' '))))\n    vertices = [i for i in range(1, n+1)]\n    weights_dist = dict()\n    for vertex in vertices:\n        weights_dist[vertex] = weights[vertex - 1]\n    return\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 0\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns a string\n    '''\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(vert: int, parent: int, depth: int):\n        global max_depth, max_sum\n        for child in graph[vert]:\n            if child!= parent:\n                dfs(child, vert, depth + 1)\n        if depth > max_depth:\n            max_depth = depth\n            max_sum = sum(weight[vert])\n        elif depth == max_depth:\n            max_sum += sum(weight[vert])\n\n    n, k = map(int, stdin.readline().split())\n    weight = [int(i) for i in stdin.readline().split()]\n    graph = [[] for i in range(n)]\n    max_depth = 0\n    max_sum = 0\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    dfs(0, -1, 0)\n    return max_sum\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def distance(a, b):\n        return len(set(a) - set(b))\n\n    n, k = tuple(map(int, stdin.split()))\n    vertices = tuple(map(int, stdin.split()))\n    edges = {(a, b) for a, b in zip(vertices, vertices[1:])}\n    for _ in range(n - 1):\n        edges = {(a, b) for a, b in edges if distance(a, b) > k}\n        for a, b in edges:\n            edges.add((b, a))\n    return max(map(sum, edges))\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    rooms = [int(x) for x in stdin.split()][1::2]\n    deliveries = [int(x) for x in stdin.split()][::2]\n    dorms = []\n    for i in range(n):\n        rooms_in_dorm = rooms[i]\n        dorms.append([rooms_in_dorm, []])\n        for j in range(rooms_in_dorm):\n            dorms[i][1].append([j + 1, deliveries[i * rooms_in_dorm + j]])\n    for delivery in deliveries:\n        room_number = delivery\n        dorm_number = 0\n        for dorm in dorms:\n            room_number -= dorm[1][0][0]\n            if room_number <= 0:\n                dorm_number = dorm[0]\n                break\n        print(dorm_number, room_number)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, n = stdin.split('\\n')[0].split()\n    a = [int(n) for n in stdin.split('\\n')[1].split()]\n    b = [int(n) for n in stdin.split('\\n')[2].split()]\n    d = {i: [] for i in range(1, int(d) + 1)}\n    for i, ai in enumerate(a):\n        for j in range(ai):\n            d[i + 1].append(b[j])\n    for i in stdin.split('\\n')[3:]:\n        i = i.split()\n        f, k = int(i[0]), int(i[1])\n        if f not in d or k not in d[f]:\n            print(f, k)\n            continue\n        else:\n            print(f, d[f].index(k) + 1)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a.sort()\n    b.sort()\n    # print(a, b)\n\n    d = defaultdict(list)\n\n    for i in range(n):\n        d[b[i]].append(i)\n    # print(d)\n\n    for i in range(m):\n        if d[b[i]]:\n            print(d[b[i]].pop(0) + 1, b[i])\n        else:\n            print(1, b[i])\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')[1::2]]\n    b = [int(i) for i in stdin.split(' ')[2::2]]\n    result = []\n    for i in range(m):\n        b[i] -= 1\n        for j in range(n):\n            if b[i] == a[j]:\n                result.append(f'{j + 1} {b[i] + 1}')\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 6\n   ... 10 15 12\n   ... 1 9 12 23 26 37\n   ... ''')\n    '1 1\\\\n1 9\\\\n2 2\\\\n2 13\\\\n3 1\\\\n3 12\\\\n'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    d = {i: 0 for i in range(n)}\n    d1 = {0: []}\n    for i in range(m):\n        d[b[i] - 1] += 1\n        if d[b[i] - 1] > len(d1[0]):\n            d1.setdefault(len(d1[0]) + 1, []).append(b[i])\n    r = []\n    for i in range(n):\n        r.append(d1[d[i]])\n    for i in range(m):\n        print(r[b[i] - 1][i] + 1, d[b[i] - 1] + 1)\n    return ''\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, m = list(map(int, stdin.readline().split()))\n\ndormitories = list(map(int, stdin.readline().split()))\n\nrooms = list(map(int, stdin.readline().split()))\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    input = stdin\n    n, m = input.split(' ')\n    n, m = int(n), int(m)\n\n    a = [int(i) for i in input.split(' ')[:-1]]\n    b = [int(i) for i in input.split(' ')[-1:]]\n\n    # calculate answer\n    ans = []\n    for i in b:\n        j = 0\n        while j < len(a) and i > a[j]:\n            j += 1\n        ans.append([j, a[j] - 1])\n\n    return ans\n\n\ndef"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    a.sort()\n    b.sort()\n    if n > 2:\n        for i in range(m):\n            index = b[i] - 1\n            for j in range(n):\n                if index <= a[j]:\n                    print(j + 1, b[i])\n                    break\n    else:\n        print(1, b[0])\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 6\\n10 15 12\\n1 9 12 23 26 37')\n    '1 1\\n1 9\\n2 2\\n2 13\\n3 1\\n3 12'\n    >>> solution('2 3\\n5 10000000000\\n5 6 9999999999')\n    '1 5\\n2 1\\n2 9999999994'\n    \"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    rooms = [a[i] for i in range(n)]\n    letters = [(b[i], i) for i in range(m)]\n    letters.sort()\n\n    dorms = []\n    rooms = []\n    for room, i in letters:\n        while len(rooms) <= room:\n            rooms.append(0)\n            dorms.append(0)\n        dorms[room - 1] = i + 1\n        rooms[room - 1] += 1\n\n    for i, room in enumerate(dorms):\n        print(i + 1, room)\n"
    },
    {
        "number": 4376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\n5 10000000000\\n5 6 9999999999\")\n    '1 5\\n2 1\\n2 9999999994'\n    \"\"\"\n    _, letters = stdin.split()\n    n, m = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    idx = 0\n    result = []\n    for _ in range(m):\n        rooms_from_idx = rooms[idx::]\n        if len(rooms_from_idx) == 1:\n            result.append(str(1) + \" \" + str(rooms_from_idx[0]))\n            idx += 1\n            continue\n        rooms_from_idx.sort()\n        room_to_add = rooms_from_idx[0]\n        idx += 1\n        result.append(\n            str(idx) + \" \" + str(room_to_add)\n        )  # todo: is it possible to do this with binary search?\n    return \"\\n\".join(result)\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    print(abs(a+b-c), abs(a+c-b), abs(b+c-a), abs(a+b+c))\n\ndef"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split(\" \")]\n    print(f'{min(a, b) + min(c, d)}\\n{min(a, c) + min(b, d)}\\n{min(a, d) + min(b, c)}')\n    print(f'{min(a, b) + min(c, d)}\\n{min(a, c) + min(b, d)}\\n{min(a, d) + min(b, c)}')\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n    \n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    s = set()\n    for a_ in range(a, b + 1):\n        for b_ in range(c, d + 1):\n            s.add(a_ + b_)\n    return \" \".join(map(str, sorted(s)))\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    return \" \".join(sorted([str(a + b), str(a + c), str(b + c), str(a + b + c)]))\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, _ = stdin.split()\n    a, b, c = map(int, (a, b, c))\n    return''.join([str(a - b), str(a - c), str(b - c), str(a - b - c)])\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a, b, c, d = int(s[0]), int(s[1]), int(s[2]), int(s[3])\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    if a + b > c:\n        a, b, c = c, a, b\n    else:\n        a, b, c = b, a, c\n    if a + c > d:\n        a, c = c, a\n    else:\n        a, c = a, c\n    if b + c > d:\n        b, c = c, b\n    else:\n        b, c = b, c\n    if a + b + c == d:\n        return f\"{a} {b} {c}\"\n    return f\"{c} {b} {a}\"\n\n\nprint(solution(\"3 6 5 4\"))\n\n\n\ndef"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return str(a) +'' + str(b) +'' + str(c)\n    if a + b > c and a + c > b and b + c > a:\n        return str(a) +'' + str(b) +'' + str(c)\n    return str(c) +'' + str(b) +'' + str(a)\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n\n    while True:\n        if a + b + c == d:\n            print(a, b, c)\n            return a, b, c\n        if a + b + c > d:\n            a -= 1\n        elif a + b + c < d:\n            b += 1\n"
    },
    {
        "number": 4377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x1, x2, x3, x4 = sorted(map(int, stdin.split()))\n    a = (x3 - x1) // 2\n    b = (x4 - x2) // 2\n    c = x4 - (a + b)\n    return''.join(map(str, [a, b, c]))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    n = int(rows[0])\n    s = rows[1]\n    colors = {'R': [], 'G': [], 'B': []}\n    for i in range(0, n):\n        colors[s[i]].append(i + 1)\n    result = 0\n    current_list = []\n    for i in range(0, n):\n        current_list.append(i + 1)\n    for color in colors.keys():\n        if len(current_list) == 1:\n            result += 1\n            break\n        if len(colors[color]) == 0:\n            result += 1\n            continue\n        if len(colors[color]) == 1:\n            if colors[color][0] in current_list:\n                result += 1\n                break\n            else:\n                result += 1\n                continue\n        if colors[color][0] in current_list:\n            result += 1\n            continue\n        else:\n            for i in range(0, len(colors[color])):\n                if colors[color][i] in current_list:\n                    result += 1\n                    break\n                else:\n                    current_list.append(colors[color][i])\n                    break\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #return None"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s[0:s.index(\"\\n\")])\n    s = s[s.index(\"\\n\") + 1 : ]\n    lst = [char for char in s]\n    d = {}\n    d[\"R\"] = \"B\"\n    d[\"B\"] = \"R\"\n    d[\"G\"] = \"B\"\n    d[\"B\"] = \"G\"\n    s = \"\"\n    for i in range(len(lst)):\n        lst[i] = d[lst[i]]\n        s += lst[i]\n    return s\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    n = int(stdin.split()[0])\n    colors = Counter(stdin.split()[1])\n    print(colors)\n    lens = []\n    for i in range(n):\n        lens.append(abs(ord(stdin.split()[1][i]) - ord(stdin.split()[1][i+1])))\n    print(lens)\n    # lens.sort(reverse=True)\n    # print(lens)\n    sorted_lens = lens[:]\n    sorted_lens.sort()\n    print(sorted_lens)\n    left = 1\n    right = min(lens)\n    while left < right:\n        mid = (left + right) // 2\n        print('mid', mid)\n        flag = True\n        for i in lens:\n            if i % mid!= 0:\n                flag = False\n                break\n        if flag:\n            right = mid\n        else:\n            left = mid + 1\n\n    print(left)\n    return ''"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    lst = [i for i in stdin]\n    count = 0\n    for i in range(0, len(lst)-1):\n        if (lst[i] == 'R' and lst[i+1] == 'G') or (lst[i] == 'G' and lst[i+1] == 'B') or (lst[i] == 'B' and lst[i+1] == 'R'):\n            lst[i] = 'R' if lst[i] == 'B' else lst[i]\n            lst[i+1] = 'G' if lst[i+1] == 'R' else lst[i+1]\n            count += 1\n    print(count)\n    return ''.join(lst)\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    lamps = [x for x in stdin]\n    rgb = {'R': 0, 'G': 0, 'B': 0}\n    for i in lamps:\n        rgb[i] += 1\n    if rgb['R'] % 2!= 0 or rgb['B'] % 2!= 0:\n        return \"Impossible\"\n    if rgb['G'] % 2!= 0:\n        return \"Impossible\"\n    else:\n        div = int(rgb['R'] / 2)\n        rbg = {'R': div, 'G': 0, 'B': div}\n        if rbg['B'] % 2!= 0:\n            rbg['B'] += 1\n            rbg['R'] -= 1\n        r = int((rgb['B'] + rbg['R']) / 2)\n        rb = int((rgb['R'] + rbg['B']) / 2)\n        rg = int((rgb['G'] + rbg['R']) / 2)\n        rbg = {'R': r, 'G': rg, 'B': rb}\n        min_key = min(rbg, key=rbg.get)\n        # div = int(rgb[min_key] / 2)\n        div = int(rgb[min_key] / 2)\n        rgb[min_key] = div\n        rbg[min_key] -= div\n        rgb = {'R': div, 'G': div, 'B': div}\n        rbg = {'R': rb, 'G': rg, 'B': rb}\n        min_key = min(rbg, key=rbg.get)\n        div = int(rgb[min_key] / 2)\n        rgb[min_key] = div\n        rbg[min_key] -= div\n        if div!= 0:\n            return str(div) + min_key * div\n        return min_key * div\n\n\nprint(solution(stdin))\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lamps = stdin.split()[1]\n    \n    colors = {\n        \"R\": \"G\",\n        \"G\": \"R\",\n        \"B\": \"B\",\n    }\n    \n    for i, lamp in enumerate(lamps):\n        lamps = lamps[:i] + colors[lamp] + lamps[i+1:]\n    \n    return lamps\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # wczytanie danych\n    n = int(stdin.readline().rstrip())\n    s = stdin.readline().rstrip()\n\n    # utworzenie tablicy kolorow i odpowiednich zmiennych\n    colors = [\"R\", \"G\", \"B\"]\n    colors_len = len(colors)\n    difs = [0 for i in range(colors_len)]\n    diff_count = 0\n\n    # wypisywanie rozwiazania\n    print(diff_count)\n    print(s)\n\n    # wypisywanie rozwiazania\n    return s\n"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lamps, garland = stdin.split(\"\\n\")\n    garland = garland.strip()\n    lamps = lamps.strip()\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")\n    garland = garland.replace(\"B\", \"R\")\n    garland = garland.replace(\"G\", \"B\")\n    garland = garland.replace(\"R\", \"G\")"
    },
    {
        "number": 4378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #    Create an input string\n    input = stdin\n    #    Convert input into a dictionary with numbers representing colors\n    d = {input[i]: i for i in range(len(input))}\n    #    Create an output list with the colors\n    output = []\n    #    Create a set with all the colors to compare with the input colors\n    colors = set(input)\n    #    Get the length of the input\n    n = len(input)\n    #    While the input is not empty\n    while input:\n        #    Get the first character\n        color = input[0]\n        #    Delete the first character\n        input = input[1:]\n        #    Get the index of the color in the dictionary\n        index = d[color]\n        #    Check if the color is in the set of colors and if it is\n        #    not already in the output list\n        if color in colors and color not in output:\n            #    Add it to the output list\n            output.append(color)\n        #    Check if the index of the color in the input list is bigger\n        #    than the last index of the output list\n        if index >= len(output):\n            #    If so, continue to the next loop\n            continue\n        #    Add the color at the end of the output list\n        output.append(input[index])\n        #    Delete the color from the input list\n        input = input[index + 1:]\n    #    Return the output list\n    return ''.join(output)\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    # O(n)\n    count = 0\n    for i in range(1, n):\n        if arr[i] - arr[i - 1] == 1:\n            count += 1\n    print(count)\n    # O(n)\n    idx = 0\n    while idx < n - 1:\n        if arr[idx + 1] - arr[idx] == 1:\n            idx += 1\n        else:\n            break\n    print(*range(idx, idx + count))\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    res = []\n    for i in range(n):\n        cur = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] > cur:\n                break\n        else:\n            res.append(i)\n    return len(res), res"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    prev = -1\n    # s = []\n    ans = []\n    for i in range(n):\n        if prev < arr[i] or prev == -1:\n            ans.append(i)\n            prev = arr[i]\n    print(len(ans))\n    print(\" \".join(str(x) for x in ans))\n    return ''\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #pass\n    n, a = [int(i) for i in stdin.strip().split(' ')]\n    a = sorted(a)\n    d = dict(zip(a, range(len(a))))\n    count = 0\n    for i in range(len(a)):\n        if i == 0:\n            count += 1\n        else:\n            if d[a[i]] - d[a[i - 1]] == 1:\n                count += 1\n            else:\n                break\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a.sort()\n    max = 1\n    for i in range(1, n):\n        if a[i] - a[i - 1] <= 1:\n            max += 1\n        else:\n            break\n    if max > n // 2:\n        return f'{max} {n - max + 1}'\n    return f'{n - max + 1} {max}'\n"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = list(map(int, stdin.readline().split()))\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if array[i] > array[j]:\n                dec[i] = max(dec[i], inc[j] + 1)\n        inc[i] = max(inc[i], dec[i])\n    return str(max(inc)) + \"\\n\" + str(inc.index(max(inc))) + \"\\n\"\n\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    n = int(stdin)\n    num_list = [int(x) for x in stdin.split(\" \")]\n    num_list.sort()\n    k = 1\n    for x in range(n):\n        if x == n - 1 or num_list[x]!= num_list[x + 1] - 1:\n            k += 1\n    return k\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print('Yes' if (a * b * 3) % 2 else 'No')\n    \ndef"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Yes' if any([((a * b) % 2) == 1 for a in range(1, 4) for b in range(1, 4)]) else 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    a, b = [int(x) for x in stdin.split(' ')]\n    return 'Yes' if a * b % 2 else 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1\")\n    'Yes'\n    \"\"\"\n\n    A, B = map(int, stdin.split())\n    for C in range(1, 4):\n        if A * B * C % 2 == 1:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a * b) % 2 == 1:\n        return 'Yes'\n    return 'No'\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split(' '))\n    if a * b % 2 == 1:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split('\\n')[0].split()]\n\n    for i in range(1, 4):\n        if a * b * i % 2 == 1:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split(\" \")\n    a, b = int(a), int(b)\n    \n    if a * b % 2 == 0:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = 3\n    if a*b*c % 2 == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b = map(int, stdin.split())\n    print('Yes' if a * b % 2 == 1 else 'No')"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to this problem.\n\n    Args:\n        stdin (str): The input string.\n\n    Returns:\n        str: The output string.\n    \"\"\"\n    a, b, c, d = (int(i) for i in stdin.split())\n    x = min(b, c) * a + c * (b - c) / 2\n    y = min(b, c) * b + c * (b - c) / 2\n    return f'{min(x, y)}'"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[0].split(' ')[0]) + int(stdin.split('\\n')[0].split(' ')[1]) / 2)\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x, y = map(int, stdin.split())\n    return x + (y*2) if x < y else x*2"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Get input\n    Parse it\n    Calculate the answer\n    Return the result\n    '''\n    # Get input\n    x, y = [int(num) for num in stdin.split(' ')]\n    # Calculate\n    cost = (x * 2) + (y // 2)\n\n    return str(cost)"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = [int(i) for i in stdin.split()]\n    cost = X * (A - B) + Y * (B - C)\n    return str(cost)\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    c = b / 2 * (a + b)\n    return str(int(c))\nprint(solution(input()))\n"
    },
    {
        "number": 4381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x >= y:\n        print(x)\n    else:\n        print(int(x * 2 + (y / 2)))\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline())\n    answer = (n-1) * n * (n+1) // 2\n    return str(answer)"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    possible_passwords = n ** 3\n    print(possible_passwords)\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    print(f'There are {(n*9)*(n+1)//2} possible passwords.')\n\n    return ''"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split('\\n')[0]\n    return str(2 * int(N) * (int(N) + 1) // 2)\n"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.readline())\n    N_array: list[str] = []\n    for i in range(1, N + 1):\n        N_array.append(str(i))\n    if N == 1:\n        print(1)\n    elif N == 2:\n        print(4)\n    else:\n        print(8)\n    return \"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input from user\n    N: int = int(stdin)\n    \n    # Initialize password list\n    passwords: list[str] = []\n    \n    # Find all possible password lengths\n    for i in range(1, N + 1):\n        passwords.extend([str(j) * i for j in range(1, N + 1)])\n    \n    # Return answer\n    return len(passwords)\n\"\"\""
    },
    {
        "number": 4382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  count = 0\n  for i in range(1, n + 1):\n    for j in range(1, n + 1):\n      for k in range(1, n + 1):\n        count += 1\n  return str(count)\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = int(stdin.readline())\n    if x % 5 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    birthday = int(stdin)\n    if birthday % 5 == 0 and birthday % 3 == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    five_year_old_age = int(stdin)\n    if five_year_old_age % 5 == 0:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    age = int(stdin)\n    if age % 5 == 0 or age % 3 == 0 or age % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    if x % 10 in [7, 5, 3]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x in [7, 5, 3]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_as_list: list = [x for x in stdin.split(\"\\n\") if x!= '']\n    number_of_years: int = int(input_as_list[0])\n    if number_of_years == 1:\n        return \"YES\"\n    elif number_of_years == 2:\n        return \"YES\" if number_of_years % 3 == 0 else \"NO\"\n    else:\n        return \"YES\" if number_of_years % 3 == 0 and number_of_years % 5 == 0 else \"NO\"\n    \n    # '\\n'.join([\"YES\" if number_of_years == 1 else \"NO\" if number_of_years % 3 == 0 and number_of_years % 5 == 0 else \"NO\"])\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    if (x % 3 == 0) or (x % 5 == 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 5 == 0 and x % 3 == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    growth_year = int(stdin)\n    if growth_year % 7 == 0:\n        if growth_year % 5 == 0:\n            if growth_year % 3 == 0:\n                return \"YES\"\n            return \"YES\"\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 1000:\n        n = n % 1000\n        return \"ABC\" + str(n)\n    else:\n        return \"ABC\" + str(n)"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print('ABC'[:N%999])"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # \u6b63\u306e\u6574\u6570\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u30011\u304b\u3089\u7d42\u4e86\u3057\u305f\u6642\u70b9\u3067ABC999\u3092\u51fa\u529b\u3059\u308b\n    # \u5165\u529b\u304c0\u3060\u3063\u305f\u3089\u3001\u30a8\u30e9\u30fc\u3092\u51fa\u529b\u3059\u308b\n    # \u305d\u308c\u4ee5\u5916\u306e\u5165\u529b\u304c\u5165\u529b\u3055\u308c\u305f\u3089\u3001\u6b21\u306e3\u6587\u5b57\u3092\u51fa\u529b\u3059\u308b\n    n = int(stdin)\n    if n > 0 and n < 1000:\n        return \"ABC\" + str(n).zfill(3)\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"999\")\n    'ABC'\n    >>> solution(\"1\")\n    'ABC'\n    >>> solution(\"999\")\n    'ABC'\n    >>> solution(\"1000\")\n    'ABCD'\n    >>> solution(\"1\")\n    'ABC'\n    >>> solution(\"2000\")\n    'ABCD'\n    >>> solution(\"1998\")\n    'ABD0'\n    >>> solution(\"1997\")\n    'ABD1'\n    >>> solution(\"1996\")\n    'ABD2'\n    >>> solution(\"1995\")\n    'ABD3'\n    >>> solution(\"1994\")\n    'ABD4'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the label of the round of the contest.\"\"\"\n    N: int = int(stdin.readline())\n    \n    return \"ABC\"[N-1]"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print('ABC'[:3] + str(N - 999))\n    return 'ABC'[:3] + str(N - 999)"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ABC_contests = 0\n    pre_idx = 0\n    for i, n in enumerate(stdin):\n        if pre_idx > 0:\n            pre_idx -= 1\n        else:\n            ABC_contests = n\n    ABC_contests = ABC_contests - 1\n    return \"ABC\" + str(ABC_contests).zfill(3)"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the label for AtCoder Beginner Contest.\n\n    >>> solution(stdin='999')\n    ABC\n    >>> solution(stdin='1000')\n    ABC\n    >>> solution(stdin='1998')\n    ABC\n    \"\"\"\n    contest_round = stdin\n    assert len(contest_round) == 4, f'Contest round must be 4 characters long.'\n\n    return 'ABC'[:3] + contest_round\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, c, d, e, k = map(int, stdin.split())\n    ant_dist = {}\n    for i in range(5):\n        for j in range(i + 1, 5):\n            ant_dist[i, j] = abs(c - a) - abs(j - i)\n            ant_dist[i, j] = min(ant_dist[i, j], abs(d - b) - abs(j - i))\n            ant_dist[i, j] = min(ant_dist[i, j], abs(e - c) - abs(j - i))\n\n    for i in range(5):\n        for j in range(i + 1, 5):\n            if ant_dist[i, j] > k:\n                print('Yay!')\n                return\n    print(' :( ')\n    return\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    return 'Yay!' if k <= max(a, b) - min(a, b) else ':( '"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = [int(x) for x in stdin.split(\"\\n\")[:-1]]\n    if min(a, b, c, d, e) < k:\n        return \"Yay!\"\n    return \":(\""
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = stdin.split('\\n')\n    a, b, c, d, e, k = int(a), int(b), int(c), int(d), int(e), int(k)\n    if a + b + c + d + e - k <= 0:\n        return \"Yay!\"\n    else:\n        return \":( \"\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    c = int(stdin.readline())\n    d = int(stdin.readline())\n    e = int(stdin.readline())\n    k = int(stdin.readline())\n    if k < max(a, b, c, d, e):\n        return 'Yay!'\n    else:\n        return ':'\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations as comb\n\n    # First, I calculate the distances between all possible pairs of antennas\n    # And sort them according to that distance\n    antennas = [int(x) for x in stdin.strip().split('\\n')]\n    antennas.sort()\n    print(antennas)\n    distances = list(comb(antennas, 2))\n    print(distances)\n\n    # Now, I check if any two of them are greater than k.\n    # If yes, I return Yay!, otherwise, return :(\n    for pair in distances:\n        if pair[0] + pair[1] > k:\n            return 'Yay!'\n    return ':( '\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    if stdin == '':\n        return ''\n    \n    arr = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                count += arr[j] - arr[i]\n    if count <= 0:\n        return 'Yay!'\n    return ':('\n"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\na, b, c, d, e, k = stdin.split('\\n')\n\na, b, c, d, e, k = int(a), int(b), int(c), int(d), int(e), int(k)\n\ncantCommunicate = True\n\nfor i in range(0, len(a) - 1):\n    for j in range(i + 1, len(a)):\n        if (j - i) > k:\n            cantCommunicate = False"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, w, k = map(int, stdin.split())\n    result = \"Yay!\" if (x + y) <= k or (x + z) <= k or (x + w) <= k or (y + z) <= k or (y + w) <= k or (z + w) <= k else \":( \"\n    return result\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        print(\"red\")\n    else:\n        print(stdin)"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, s = map(str, stdin.split())\n    if int(a) < 3200:\n        return red\n    return s"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    s = stdin[1]\n    if a < 3200:\n        print('red')\n    else:\n        print(s)"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    s = stdin[1]\n    if a >= 3200:\n        return s\n    else:\n        return \"red\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    a, s = stdin.split('\\n')\n    if int(a) < 3200:\n        print(f'a = {a} is not less than 3200, so we print s = {s}')\n    else:\n        print('red')\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if a < 3200:\n        print(\"red\")\n    else:\n        print(s)\n    return\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, s = [int(i) for i in stdin.split('\\n')]\n    print(s if a >= 3200 else'red')\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        print(\"red\")\n    else:\n        print(stdin)\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a >= 3200:\n        print(stdin)\n    else:\n        print(\"red\")\n\nsolution(input())\n"
    },
    {
        "number": 4386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    for i in a:\n        if int(i) < 3200:\n            print('red')\n        else:\n            print('pink')"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    next_contest = None\n    if r < 1200:\n        next_contest = \"ABC\"\n    elif r < 2800:\n        next_contest = \"ARC\"\n    else:\n        next_contest = \"AGC\"\n    return next_contest\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n    \n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    R: int = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    elif 1200 <= R < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating < 1200:\n        return \"ABC\"\n    elif rating < 2800:\n        return \"ARC\"\n    return \"AGC\""
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not modify the input and print statements\n    # initial lines of the output will be removed\n    # before making the submission\n    # Your code goes here\n    r = int(stdin)\n    if r < 1200:\n        return \"ABC\"\n    elif r < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n    # test\n    assert solution(\"1569\") == \"ARC\"\n    assert solution(\"4208\") == \"AGC\"\n    print(\"PASSED\")\n\nsolution(input())\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 1200:\n        return \"ABC\"\n    if R < 2800:\n        return \"ARC\"\n    return \"AGC\"\n\"\"\"\n\nfrom unittest import main, TestCase\n\n\ndef"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rating = int(stdin)\n    if rating <= 1200:\n        return 'ABC'\n    if rating <= 2800:\n        return 'ARC'\n    return 'AGC'\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    \"\"\"\n    r = int(stdin)\n    if r < 1200:\n        return \"ABC\"\n    elif r < 2800:\n        return \"ARC\"\n    else:\n        return \"AGC\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    next_contest = {\n        \"ABC\": \"ARC\",\n        \"ARC\": \"AGC\",\n        \"AGC\": \"None\"\n    }\n\n    return next_contest.get(stdin)\n"
    },
    {
        "number": 4387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Replace each occurrence of 1 with 9 and each occurrence of 9 with 1\n    return the new integer\"\"\"\n    \n    n = int(stdin)\n    return str(n - n % 10 + n % 10 - n % 10)"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"119\"))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('1', '9'))).replace('9', '1')\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"991\"\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = n // 10 * 9 + n % 10 - 1\n    return str(n)\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace(\"1\", \"9\").replace(\"9\", \"1\")))\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    i = 0\n    while i < len(s):\n        if s[i] == '1':\n            s = s[:i] + '9' + s[i+1:]\n            i += 2\n        elif s[i] == '9':\n            s = s[:i] + '1' + s[i+1:]\n            i += 2\n        else:\n            i += 1\n    return s\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.replace('1', '9')\n    x = x.replace('9', '1')\n    return x\n"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('1', '9').replace('9', '1')))\n\n\ndef"
    },
    {
        "number": 4388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('1', '9').replace('9', '1')))\n    \n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution expects the input as a list of lines\"\"\"\n    assert len(stdin) == 3\n    for line in stdin:\n        assert len(line) <= 100\n        assert len(line) >= 2\n        assert all([c in ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']] for c in line)\n    return stdin[0]\n\"\"\"\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    for i in range(len(a) - 1):\n        b = a[i:i + 2]\n        if a[i + 2:].find(b)!= -1:\n            a = a[:i] + a[i + 2:]\n            break\n\n    return a\n\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin\n    return result\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for exercise\"\"\"\n    # For each case\n    for i in range(int(stdin.split(\"\\n\")[0])):\n        a, b = map(int, stdin.split(\"\\n\")[i+1].split())\n        a -= b\n        print(0 if a < 0 else a // b)\n\n    return ''"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def sol():\n        for _ in range(int(stdin)):\n            a, b = map(int, stdin.readline().split())\n            print(a // b)\n\n\n    return sol\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    for i, line in enumerate(lines):\n        a, b = map(int, line.split(' '))\n        if a % b == 0:\n            print(0)\n        else:\n            print(a // b + 1)\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        a, b = list(map(int, stdin.readline().split()))\n        if a % b == 0:\n            print(0)\n        else:\n            print(a // b)"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    a, b = int(a), int(b)\n    count = 0\n    while a % b!= 0:\n        count += 1\n        a += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    cases = lines[1:]\n    for i in range(t):\n        a, b = map(int, cases[i].split())\n        print(a//b)\n        # print(f'Case #{i+1}: {a} // {b} = {a//b}')\n\n\nsolution(\"5\\n10 4\\n13 9\\n100 13\\n123 456\\n92 46\\n\")\n"
    },
    {
        "number": 4390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()]\n\n    def calc_heat(start, end):\n        if start < k - 1:\n            return float('-inf')\n        if end >= n - k + 2:\n            return float('inf')\n        return max(a[start:end + 1])\n\n    s = 0\n    e = 0\n    for e in range(n):\n        s = e\n        e = min(n, e + k)\n        s = max(0, s - k + 1)\n        s += calc_heat(s, e)\n    return str(s / k)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    res = -1\n    temp = 0\n    i = 0\n    j = k\n    if n < k:\n        return res\n    while j <= n:\n        temp += sum(a[i:j]) / (j - i)\n        i += 1\n        j += 1\n        if temp > res:\n            res = temp\n    return res\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n\n    max_temp = 0\n    for i in range(n):\n        sum_ = 0\n        for j in range(max(0, i - k + 1), i + 1):\n            sum_ += arr[j]\n        avg = sum_ / (i + 1 - max(0, i - k + 1))\n        if avg > max_temp:\n            max_temp = avg\n    print(max_temp)\n    return max_temp"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nn, k = [int(i) for i in input().split(' ')]\na = [int(i) for i in input().split(' ')]\n\ntotal_sum = 0\ncount = 0\nmax_average = 0\n\nfor i in range(n):\n    total_sum += a[i]\n    count += 1\n    if count >= k:\n        count = 0\n        max_average = max(max_average, total_sum / k)\n        total_sum = 0\n\nprint(max_average)\n"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.readline().split())\n  a = list(map(int, stdin.readline().split()))\n  res = 0\n  for i in range(n - k + 1):\n    res = max(res, sum(a[i: i + k]) / k)\n  print(res)\n  return ''\nsolution(input())"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Just one example needed.\n    #...\n    return res"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split('\\n')[0].split()]\n    nums = [int(x) for x in stdin.strip().split('\\n')[1].split()]\n    avgs = []\n    for i in range(n):\n        avgs.append(sum(nums[i:i+k])/k)\n    print(max(avgs))\n    return str(round(max(avgs), 6))"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    array = [int(x) for x in stdin.split()]\n    array.sort()\n    summ = sum(array)\n    for i in range(n - k + 1):\n        print(round(summ / (n - i), 6))\n        summ -= array[i]\n    return \"\""
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    res = 0\n    for i in range(n - k + 1):\n        res = max(res, sum(a[i: i + k]) / k)\n    return str(res)"
    },
    {
        "number": 4391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Need to figure out what to do with the empty test case\n    # Test cases with large values of n, m or p can slow down the program\n    # Create a set of unique positions, so that the code only goes through those\n    # Then sort the array in place\n    # Then just iterate through the array and check if it's sorted\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(NlogN)\n    Space complexity: O(N)\n    \"\"\"\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n, m = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        p = set(map(int, stdin.readline().split()))\n        sorted_a = sorted(a)\n        for pos in p:\n            if pos > 0:\n                a[pos - 1], a[pos] = a[pos], a[pos - 1]\n                if sorted_a!= a:\n                    break\n            else:\n                a[pos + 1], a[pos] = a[pos], a[pos + 1]\n                if sorted_a!= a:\n                    break\n        else:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if solution_find_swap(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == 'YES' else 'NO'\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if solve(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin\n    s = t.replace('s','z')\n    for i in range(n-1):\n        s = s.replace('z','s')\n    return s\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    size = len(stdin)\n    a = [stdin[i] for i in range(size)]\n    b = [stdin[i] for i in range(size)]\n    s = [stdin[i] for i in range(size)]\n    res = ''\n    for i in range(size):\n        if a[i] == '1':\n            res += b[i]\n        elif a[i] == '2':\n            res += b[i] * 2\n        else:\n            res += b[i] * 3\n    return res\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = []\n    c = 0\n    for i in range(len(s)):\n        c += 1\n        if s[i]!= '0':\n            l.append(c * int(s[i]))\n    for i in l:\n        print(i, end=\"\")"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution\n    \"\"\"\n    # return stdin\n    s = stdin\n    counts = 0\n    while s.count(\"1\") > 0:\n        counts += 1\n        s = s.replace('1', '11')\n    return \"1\" * counts"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    arr = []\n    while len(s) > 1:\n        arr.append(s[0])\n        s = s[1:]\n    return ''.join(arr)\n\n\ndef"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    while n:\n        i += n % 10\n        n //= 10\n    return i\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin.strip()\n    s = \"\"\n    for i in range(n):\n        s += t[i] * (i + 1)\n    return s"
    },
    {
        "number": 4393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = stdin.split()[1]\n    s = ''\n    for i in range(n):\n        s += t[i] * (i + 1)\n    return s\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n\n    graph = [list(map(int, stdin.split(' '))) for i in range(m)]\n    visited = [0] * n\n    dist = [100000000 for i in range(n)]\n    prev = [None for i in range(n)]\n    queue = [0]\n\n    while queue:\n        cur = queue.pop(0)\n\n        if visited[cur]:\n            continue\n\n        visited[cur] = 1\n\n        for node, cost in graph[cur]:\n            if not visited[node] and dist[node] > cost:\n                dist[node] = cost\n                prev[node] = cur\n\n                queue.append(node)\n\n    return m - visited.count(0)\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the task.\n\n    :param stdin: text of input\n    :return: the solution string\n    \"\"\"\n    n, m = map(int, stdin.split())\n    tree = {}\n    for _ in range(m):\n        source, destination, weight = map(int, stdin.split())\n        tree[source, destination] = weight\n\n    sorted_tree = sorted(tree.items(), key=lambda x: x[1])\n    sorted_tree = sorted_tree[1:]\n    print(sorted_tree)\n    cost = 0\n    for source, destination, weight in sorted_tree:\n        cost += weight\n        tree[source, destination] = weight\n        if (source, destination) in tree:\n            if cost > 0:\n                cost -= tree[source, destination]\n                tree[source, destination] = 0\n\n    print(tree)\n    return str(cost)\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''You can, for example, increase weight of the edge $(1, 6)$ or $(6, 3)$ by $1$ to unify MST.\n    The picture corresponding to the first example: [Image]\n    You can, for example, increase weights of edges $(1, 5)$ and $(2, 4)$ by $1$ to unify MST.\n    The picture corresponding to the last example: $\\$ 8$'''\n\n\n    pass\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total_cost = stdin.split(\" \")[0]\n    total_cost = int(total_cost)\n    edge_list = []\n    for edge in stdin.split(\" \")[1:]:\n        edge_list.append(edge.split(\" \"))\n\n    graph = {}\n    for edge in edge_list:\n        u, v = edge\n        u = int(u)\n        v = int(v)\n        if u not in graph:\n            graph[u] = {}\n        if v not in graph:\n            graph[v] = {}\n        weight = int(edge[2])\n        graph[u][v] = weight\n        graph[v][u] = weight\n    result = 0\n    while len(graph) > 1:\n        edge_set = set()\n        for u in graph:\n            for v in graph[u]:\n                if u!= v:\n                    edge_set.add((u, v))\n        min_cost = 0\n        for u, v in edge_set:\n            min_cost = max(min_cost, graph[u][v])\n        if min_cost < total_cost:\n            result += 1\n            total_cost -= min_cost\n            graph = {u: {v: w - min_cost for v, w in graph[u].items()} for u in graph}\n            for u in graph:\n                for v in graph[u]:\n                    if u!= v:\n                        graph[u][v] = 0\n            if not graph:\n                return result\n        else:\n            break\n    return result\n\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = stdin.split(' ')\n    c = {'R': 0, 'G': 0, 'B': 0}\n    for i in t:\n        c[i] += 1\n    i = 0\n    j = 0\n    while j < n:\n        if t[i] == t[j]:\n            if abs(i - j) % 3!= 0:\n                t[i] = 'R'\n                c['R'] += 1\n                j = 0\n                i = 0\n            else:\n                j += 1\n        i += 1\n        if i >= n:\n            i = 0\n    return c\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()[:-1]\n    if (n % 3) == 0:\n        print(n//3)\n        print(s)\n    else:\n        print(n//3 + 1)\n        print(\"R\" * (n//3 + 1) + \"G\" * (n//3 + 1) + \"B\" * (n//3 + 1))\n\nsolution(input())\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # str -> int\n    # Replace all characters in the string with the corresponding ASCII value\n    n = int(stdin.replace('\\n', ''))\n    string = stdin.replace('\\n', '')\n\n    # Create a dictionary with the frequencies of each character\n    char_frequencies = dict.fromkeys(string, 0)\n    for char in string:\n        char_frequencies[char] += 1\n\n    # Turn the characters in the string into their ASCII codes\n    string_ascii = [ord(char) for char in string]\n\n    # Create a set of all possible keys\n    possible_keys = set(string_ascii)\n\n    # Create a list of possible keys by grouping the original list into three groups of the same character\n    possible_keys_groups = [string_ascii[i:i+3] for i in range(0, len(string_ascii), 3)]\n\n    # Create a dictionary with the frequencies of each key group\n    key_frequencies = dict.fromkeys(possible_keys_groups, 0)\n\n    # Increment the frequency of each character group by 1\n    for key_group in key_frequencies:\n        for key in key_group:\n            key_frequencies[key_group] += 1\n\n    # If there is only one possible key, then return it\n    if len(possible_keys) == 1:\n        return ''.join(map(chr, possible_keys))\n\n    # Else\n    else:\n        # Create a list of keys that occur an odd number of times\n        odd_keys = [key for key in possible_keys if key_frequencies[key] % 2!= 0]\n\n        # If there is only one key that occurs an odd number of times, return it\n        if len(odd_keys) == 1:\n            return ''.join(map(chr, odd_keys))\n\n        # Else\n        else:\n            # Create a list of keys that occur an even number of times\n            even_keys = [key for key in possible_keys if key_frequencies[key] % 2 == 0]\n\n            # If there is only one key that occurs an even number of times, return it\n            if len(even_keys) == 1:\n                return ''.join(map(chr, even_keys))\n\n            # Else\n            else:\n                # If there are two keys that occur an even number of times, then the first key that occurs the most is the one\n                if key_frequencies[odd_keys[0]] > key_frequencies[odd_keys[1]]:\n                    odd_keys = [odd_keys[0]]\n                # Else if there are two keys that occur an even number of times, then the second key that occurs the most is the one\n                elif key_frequencies[odd_keys[0]] < key_frequencies[odd_keys[1]]:\n                    odd_keys = [odd_keys[1]]\n                # Else if there are two keys that occur an even number of times, then the key that occurs the most is the one\n                else:\n                    if key_frequencies[odd_keys[0]] > key_frequencies[even_keys[0]]:\n                        odd_keys = [odd_keys[0]]\n                    # Else if there are two keys that occur an even number of times, then the key that occurs the most is the one\n                    elif key_frequencies[odd_keys[0]] < key_frequencies[even_keys[0]]:\n                        odd_keys = [odd_keys[1]]\n                    # Else if there are two keys that occur an even number of times, then the first key that occurs the most is the one\n                    else:\n                        if key_frequencies[odd_keys[0]] > key_frequencies[even_keys[1]]:\n                            odd_keys = [odd_keys[0]]\n                        # Else if there are two keys that occur an even number of times, then the second key that occurs the most is the one\n                        elif key_frequencies[odd_keys[0]] < key_frequencies[even_keys[1]]:\n                            odd_keys = [odd_keys[1]]\n\n                # Return the key that occurs the most\n                return ''.join(map(chr, [odd_keys[0]]))\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.readline())\n  l = list(stdin.readline().strip())\n  r = [0] * len(l)\n  # rr, rbg, rbb, gg, gb, bb\n  for i in range(len(l)):\n    if l[i] == \"R\":\n      r[i] = 2\n    elif l[i] == \"B\":\n      r[i] = 1\n    else:\n      r[i] = 0\n  \n  dp = [[-1 for _ in range(3)] for _ in range(len(l))]\n  dp[0][0] = r[0]\n  dp[0][1] = r[0]\n  dp[0][2] = r[0]\n  # rr, rbg, rbb, gg, gb, bb\n  for i in range(1, len(l)):\n    dp[i][0] = min(dp[i - 1][1], dp[i - 1][2]) + r[i]\n    dp[i][1] = min(dp[i - 1][0], dp[i - 1][2]) + r[i]\n    dp[i][2] = min(dp[i - 1][0], dp[i - 1][1]) + r[i]\n  \n  t = \"\"\n  ind = 0\n  for i in range(len(l)):\n    if dp[i][0] == min(dp[i][0], dp[i][1], dp[i][2]):\n      t += \"R\"\n      ind = 0\n    elif dp[i][1] == min(dp[i][0], dp[i][1], dp[i][2]):\n      t += \"G\"\n      ind = 1\n    elif dp[i][2] == min(dp[i][0], dp[i][1], dp[i][2]):\n      t += \"B\"\n      ind = 2\n    else:\n      ind = -1\n      break\n  \n  return t\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lamps = stdin.split()\n    lamps_colors = {'R': [], 'G': [], 'B': []}\n    for index, lamp in enumerate(lamps):\n        lamps_colors[lamp].append(index)\n    lamps_colors = [lamps_colors[color] for color in lamps_colors]\n    lamps_colors = list(zip(*lamps_colors))\n    lamps_colors = sorted(lamps_colors, key=len)\n    lamps_colors = [x for x in lamps_colors if len(x) > 1]\n    # \u0438\u0449\u0435\u043c \u0432\u0441\u0435 \u0441\u043c\u0435\u0436\u043d\u044b\u0435 \u043f\u043e\u0434\u0433\u0440\u0443\u043f\u043f\u044b \u0441 \u0442\u0430\u043a\u0438\u043c\u0438 \u0436\u0435 \u0446\u0432\u0435\u0442\u0430\u043c\u0438\n    lamps_colors = sorted(lamps_colors, key=lambda x: x[0])\n    indices_to_recolor = set()\n    for group in lamps_colors:\n        if len(group) <= 1:\n            continue\n        # \u0438\u0449\u0435\u043c \u0441\u043c\u0435\u0436\u043d\u044b\u0435 \u0433\u0440\u0443\u043f\u043f\u044b\n        for index in group[1:]:\n            if len(group) == 2:\n                indices_to_recolor.add(group[0])\n            else:\n                if (group[0] - index) % 3 == 0:\n                    indices_to_recolor.add(group[0])\n                    indices_to_recolor.add(index)\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043f\u0440\u0435\u0444\u0438\u043a\u0441\n    indices_to_recolor = list(indices_to_recolor)\n    indices_to_recolor = [x for x in indices_to_recolor if x not in indices_to_recolor[1:]]\n    indices_to_recolor = sorted(indices_to_recolor)\n    return len(indices_to_recolor)\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    lamps = stdin[1]\n    num_colors = set(lamps)\n    count_colors = {i: 0 for i in num_colors}\n    for i in range(len(lamps)):\n        count_colors[lamps[i]] += 1\n    lamps = sorted(count_colors.items(), key=lambda x: x[1], reverse=True)\n    difference = abs(lamps[0][1] - lamps[1][1])\n    first_color = lamps[0][0]\n    second_color = lamps[1][0]\n    if difference % 3!= 0:\n        return \"IMPOSSIBLE\"\n    red_color = first_color\n    if first_color == second_color:\n        red_color = \"R\"\n    color_dict = {\"R\": [], \"G\": [], \"B\": []}\n    for i in range(len(lamps)):\n        color_dict[lamps[i][0]].append(i)\n    visited = set()\n    res = set()\n    curr_color = \"R\"\n    next_color = \"G\"\n    next_index = 0\n    while True:\n        for i in range(len(color_dict[curr_color])):\n            index = color_dict[curr_color][i]\n            visited.add(index)\n            new_lamps = lamps[index][0]\n            if next_color!= new_lamps:\n                next_color = new_lamps\n                next_index = 0\n            else:\n                next_index += 1\n            if next_index == len(color_dict[next_color]):\n                curr_color = next_color\n                next_color = \"G\" if curr_color == \"R\" else \"R\"\n                next_index = 0\n            if next_color!= curr_color:\n                if next_color == red_color:\n                    res.add(curr_color)\n                    res.add(next_color)\n                else:\n                    res.add(curr_color)\n            if len(res) == 3:\n                return str(len(res)) + \" \" + \"\".join(res)\n        if len(res) == 3:\n            return str(len(res)) + \" \" + \"\".join(res)"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lamps = stdin.splitlines()[0]\n    if len(lamps) == 1:\n        return lamps\n    lamps = set(lamps)\n    lamps = list(lamps)\n    lamps.sort()\n    ans = set()\n    for i in range(len(lamps) - 1):\n        for j in range(i + 1, len(lamps)):\n            if abs((lamps.index(lamps[j]) - lamps.index(lamps[i]))) % 3 == 0:\n                ans.add(lamps[i] + lamps[j])\n    ans = list(ans)\n    ans.sort()\n    return ans[0]\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_div(a, b):\n        return abs(a - b) % 3 == 0\n    n = int(stdin[0])\n    s = stdin[1]\n    result = 0\n    for i in range(n):\n        if s[i] == 'R':\n            for j in range(i + 1, n):\n                if s[j] == 'R':\n                    result += check_div(j, i)\n                if s[j] == 'G':\n                    result += check_div(i, j)\n                if s[j] == 'B':\n                    result += check_div(j, i)\n        if s[i] == 'G':\n            for j in range(i + 1, n):\n                if s[j] == 'G':\n                    result += check_div(j, i)\n                if s[j] == 'B':\n                    result += check_div(i, j)\n                if s[j] == 'R':\n                    result += check_div(j, i)\n        if s[i] == 'B':\n            for j in range(i + 1, n):\n                if s[j] == 'B':\n                    result += check_div(j, i)\n                if s[j] == 'R':\n                    result += check_div(i, j)\n                if s[j] == 'G':\n                    result += check_div(j, i)\n    return result\n"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lamps: int = int(stdin[0])\n    lamp_colors: str = stdin[1]\n    n: int = 1\n    lamp_colors_dict: dict[int, int] = {\n        'R': 0,\n        'G': 0,\n        'B': 0\n    }\n\n    for i in range(lamps):\n        lamp_colors_dict[lamp_colors[i]] += 1\n\n    while n < 3:\n        if lamp_colors_dict['R'] % n!= 0:\n            n += 1\n            continue\n        if lamp_colors_dict['G'] % n!= 0:\n            n += 1\n            continue\n        if lamp_colors_dict['B'] % n!= 0:\n            n += 1\n            continue\n\n    return str(n)\n\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, u = [], []\n    for i in range(n):\n        input_line = stdin.split()\n        x.append(int(input_line[0]))\n        u.append(input_line[1])\n    return str(sum(x * c_yen if u[i] == 'JPY' else x * c_btc for i in range(n)))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    N, *tokens = map(int, stdin.split('\\n'))\n    rates = [0] * (N + 1)\n    for i, (x, u) in enumerate(zip(tokens[::2], tokens[1::2])):\n        if u == 'JPY':\n            rates[i] = x\n        else:\n            rates[i] = x * 10000000000\n    return str(sum(x / 380000.0 for x in rates))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = int(input())\n    # str_input = stdin\n    # str_input = input()\n    total_sum = 0\n    for _ in range(n):\n        x_u_pair = stdin.split(\" \")\n        x = x_u_pair[0]\n        u = x_u_pair[1]\n        if u == \"JPY\":\n            x = int(x)\n        elif u == \"BTC\":\n            x = float(x)\n        else:\n            raise Exception(\"Only JPY and BTC are allowed.\")\n        total_sum += x\n    # \u4e8c\u9032\u6cd5\u3067\u306f\u8868\u8a18\u304c\u5c11\u3057\u5909\u308f\u308b\u306e\u306710^8\u7a0b\u5ea6\u306b\u3057\u3066\u304a\u304f\n    return str(total_sum * 10 ** 8)\n\n\nprint(solution(\"2 10000 JPY\"))  # 48000\nprint(solution(\"0.10000000 BTC\"))  # 48000.0\nprint(solution(\"0.10000000 BTC \"))  # 48000.0\nprint(solution(\"0.10000000 BTC 0.10000000 BTC\"))  # 48000.0\nprint(solution(\"10 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY \"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY 10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY 10 JPY 10000 JPY\"))  # 48000.0\nprint(solution(\"0.10000000 BTC\"))  # 48000.0\nprint(solution(\"0.10000000 BTC 0.10000000 BTC\"))  # 48000.0\nprint(solution(\"0.10000000 BTC 0.10000000 BTC 0.10000000 BTC\"))  # 48000.0\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem.\"\"\"\n    # Split input into inputs and output.\n    inputs, output = stdin.split(\"\\n\\n\")\n    inputs = inputs.strip().splitlines()\n    output = output.strip()\n\n    # Parse inputs.\n    n = int(inputs[0])\n    otoshidama = []\n    for i in range(n):\n        x, u = inputs[i + 1].split()\n        if u == \"JPY\":\n            x = int(x)\n        elif u == \"BTC\":\n            x = float(x)\n        otoshidama.append(x)\n\n    # Convert all values to dollars.\n    total = 0\n    for x, u in zip(otoshidama, output.split()):\n        if u == \"JPY\":\n            total += x * 10 ** 8\n        elif u == \"BTC\":\n            total += x * 380000.0\n\n    # Return output.\n    return str(total)\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin.readline())\n    # money_list = [float(x) for x in stdin.readline().split()]\n    # currency_list = [x for x in stdin.readline().split()]\n    # ans = 0\n    # for i in range(N):\n    #     money = money_list[i]\n    #     currency = currency_list[i]\n    #     if currency == \"JPY\":\n    #         ans += money\n    #     elif currency == \"BTC\":\n    #         money = money * 380000.0\n    #         ans += money\n    #     else:\n    #         return \"ERROR\"\n    # return str(int(ans))\n\n    N = int(stdin)\n    money_list = [float(x) for x in stdin.readline().split()]\n    currency_list = [x for x in stdin.readline().split()]\n    ans = 0\n    for i in range(N):\n        money = money_list[i]\n        currency = currency_list[i]\n        if currency == \"JPY\":\n            ans += money\n        elif currency == \"BTC\":\n            money = money * 380000.0\n            ans += money\n        else:\n            return \"ERROR\"\n    return str(int(ans))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Write your code here\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # \u30c7\u30fc\u30bf\u306e\u53d6\u5f97\n    N, *list_data = [int(i) for i in stdin.split()]\n    # \u914d\u5217\u306b\u683c\u7d0d\n    data = list(zip(list_data[::2], list_data[1::2]))\n    # \u8a08\u7b97\n    result = 0\n    for j, k in data:\n        if j == \"JPY\":\n            result += j * k\n        else:\n            result += j / 380000 * k\n    # \u51fa\u529b\n    return \"{:.5}\".format(round(result, 5))"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'foo'"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    arr = []\n    for i in range(N):\n        arr.append(list(map(float, stdin.readline().split())))\n    return str(int(sum(arr[j][0] * arr[j][1] if arr[j][1] == \"JPY\" else arr[j][0] * (380000 / arr[j][1]) for j in range(N))))\n"
    },
    {
        "number": 4396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    count = int(s[0])\n    nums = []\n    for i in range(count):\n        tmp = s[i+1].split(' ')\n        nums.append((int(tmp[0]), tmp[1]))\n\n    result = 0\n    for j in range(len(nums)):\n        tmp = nums[j]\n        if tmp[1] == 'BTC':\n            result += tmp[0] * 380000\n        else:\n            result += tmp[0]\n    return str(result)"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_input():\n        [N, i] = list(map(int, stdin.split()))\n        return N, i\n\n    def get_solution(N, i):\n        first_car = 0\n        last_car = N - 1\n        index_of_first_car = 0\n        index_of_last_car = N - 1\n        j = 0\n        while (first_car <= last_car):\n            index_of_first_car = index_of_last_car\n            index_of_last_car = N - 1\n            while (index_of_first_car <= index_of_last_car):\n                if index_of_first_car == i - 1:\n                    return j\n                index_of_first_car += 1\n                j += 1\n            index_of_first_car = 0\n            index_of_last_car = N - 1\n            j += 1\n\n    N, i = get_input()\n    j = get_solution(N, i)\n    return str(j)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split(' '))\n    return str(n - i)\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, i = [int(s) for s in stdin.split(' ')]\n    print(N - i + 1)\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    i, j = int(stdin[1]), int(stdin[2])\n    return i + j - 1\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N, i = stdin.split()\n  N, i = int(N), int(i)\n  return N - i + 1\n'''\n\n\ndef"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, i = [int(i) for i in stdin.split(' ')]\n    return str(n - i + 1)"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_j(i: int, n: int) -> int:\n        return (n + 1) - i\n\n    stdin = stdin.split()\n    n = int(stdin[0])\n    i = int(stdin[1])\n    print(get_j(i, n))\n\n    return ''"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, i = list(map(int, stdin.split(' ')))\n    i = i - 1\n    if N % 2 == 0:\n        if i % 2 == 1:\n            return i // 2 + 1\n        else:\n            return i // 2\n    else:\n        if i % 2 == 1:\n            return i // 2 + 1\n        else:\n            return i // 2 + 2\n"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    return str(n - i + 1)"
    },
    {
        "number": 4397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, i = stdin.split()\n    n, i = int(n), int(i)\n    print(n-i)\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    S, T = stdin.strip().split(\"\\n\")\n    return \"\".join([S[x] if x % 2 == 0 else T[x] for x in range(len(S))])\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # create empty string\n    string = \"\"\n    # split string into two sections\n    # get the length of the string, then get each section\n    length = len(stdin)\n    s = stdin[0:int(length/2)]\n    t = stdin[int(length/2):length]\n    # loop through the length of the string and add the characters together\n    for i in range(length):\n        if i < len(s):\n            string += s[i]\n        if i < len(t):\n            string += t[i]\n    return string"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... ip cc''')\n    icpc\n    \"\"\"\n    return \"\".join([\n        stdin[0::2],\n        stdin[1::2]\n    ])\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string consisting of alternating characters of input strings\"\"\"\n    s, t = stdin.split('\\n')\n    return ''.join([s[i] if i % 2 else t[i] for i in range(len(s))])\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    if len(s)!= num or len(t)!= num:\n        return -1\n    else:\n        return \"\".join(list(s[::2]) + list(t[::2])) + \"\".join(list(s[1::2]) + list(t[1::2]))\n\n\ndef"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    result = []\n    for i in range(n):\n        result.append(s[i])\n        result.append(t[i])\n    return ''.join(result)\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string_length = int(stdin.split()[0])\n    first_string = stdin.split()[1]\n    second_string = stdin.split()[2]\n    first_string_string = ''\n    second_string_string = ''\n    for i in range(string_length):\n        first_string_string += first_string[i]\n        second_string_string += second_string[i]\n\n    return first_string_string + second_string_string\n"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    first = stdin.readline().rstrip()\n    second = stdin.readline().rstrip()\n    third = ''\n    for i in range(n):\n        third += first[i]\n        third += second[i]\n    print(third)\n    return third\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([char for pair in zip(stdin.split()[1], stdin.split()[2]) for char in pair])\n    # return stdin.split()[1] + stdin.split()[2]"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.strip()\n    if A[0] == A[1] and A[1] == A[2]:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns \"Yes\" if the two stations are connected by a bus, and \"No\" otherwise.\n    '''\n    A = stdin[0]\n    B = stdin[1]\n    A_stations = []\n    B_stations = []\n    for i in range(3):\n        if A == \"A\":\n            A_stations.append(i + 1)\n        elif A == \"B\":\n            B_stations.append(i + 1)\n        if B == \"A\":\n            A_stations.append(i + 1)\n        elif B == \"B\":\n            B_stations.append(i + 1)\n    if len(A_stations)!= len(B_stations):\n        return \"No\"\n    else:\n        # A_stations and B_stations are same size\n        for i in range(len(A_stations)):\n            for j in range(len(B_stations)):\n                if A_stations[i] == B_stations[j]:\n                    return \"Yes\"\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    S_list = list(S)\n    if 'AB' in S_list:\n        print('Yes')\n    else:\n        print('No')\n    return\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split(\"\\n\")[0]\n    ans = 'Yes'\n    n = len(S)\n\n    if n % 2 == 0:\n        if (S[0] == 'A' and S[n // 2] == 'A') or (S[0] == 'B' and S[n // 2] == 'B'):\n            ans = 'No'\n    else:\n        ans = 'No'\n\n    return ans"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = \"No\"\n    company_a, company_b = 0, 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"A\":\n            company_a += 1\n        else:\n            company_b += 1\n    if company_a % 2!= 0:\n        if company_b % 2!= 0:\n            result = \"Yes\"\n    return result\n"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    a = s.count(\"A\")\n    b = s.count(\"B\")\n    return \"Yes\" if a*b!= 0 else \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    if a == b:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a, b, c = s[0], s[1], s[2]\n    if (a[0] == \"A\" and b[0] == \"B\") or (a[0] == \"B\" and b[0] == \"A\"):\n        return \"Yes\"\n    elif (a[1] == \"A\" and c[0] == \"B\") or (a[1] == \"B\" and c[0] == \"A\"):\n        return \"Yes\"\n    elif (b[1] == \"A\" and c[1] == \"B\") or (b[1] == \"B\" and c[1] == \"A\"):\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\""
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"RRS\")\n    2\n    \"\"\"\n    return max(map(len, stdin.split('S')))"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"R\")"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    Find the maximum number of consecutive rainy days in this period.\n    Args:\n        stdin (str): Input\n\n    Returns:\n        str: Output\n    \"\"\"\n    sunny_days = 0\n    rainy_days = 0\n    \n    for day in stdin:\n        if day == \"R\":\n            rainy_days += 1\n            sunny_days = 0\n        else:\n            sunny_days += 1\n        \n        if sunny_days == 3:\n            return rainy_days\n        elif rainy_days == 3:\n            return rainy_days\n    \n    return rainy_days\n"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"R\")\n\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('R')\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return len([True for c in stdin if c == 'R'])"
    },
    {
        "number": 4400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"R\")"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n    a, b, c = int(a), int(b), int(c)\n    a, b = b, a\n    a, c = c, a\n    return str(a) + \" \" + str(b) + \" \" + str(c)\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \" \".join(map(str, [c, b, a]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(n) for n in stdin.split()]\n    A, B = B, A\n    A, C = C, A\n    return f\"{A} {B} {C}\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    boxes = stdin.split(' ')\n    a, b, c = [int(i) for i in boxes]\n    a, b = b, a\n    a, c = c, a\n    print(a, b, c)\n    return \" \".join([str(i) for i in boxes])\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(stdin.split('\\n')[0],''.join(stdin.split('\\n')[1].split()[::-1]))\n\"\"\"\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    box_A: int = int(stdin[0])\n    box_B: int = int(stdin[1])\n    box_C: int = int(stdin[2])\n    box_A, box_B = box_B, box_A\n    box_A, box_C = box_C, box_A\n    return str(box_A) +'' + str(box_B) +'' + str(box_C)"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem.\"\"\"\n    x, y, z = [int(n) for n in stdin.split()]\n\n    a, b, c = sorted([x, y, z])\n\n    return f\"{c} {a} {b}\"\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (a, b, c) = (int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]))\n    (a, b) = (b, a)\n    (a, c) = (c, a)\n    return''.join([str(i) for i in [a, b, c]])\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split()]\n    A, B, C = x, y, z\n    C = A\n    A = B\n    B = C\n    return''.join([str(i) for i in (A, B, C)])\n"
    },
    {
        "number": 4401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c = stdin.split(\" \")\n  a, b, c = int(a), int(b), int(c)\n  print(c, b, a)"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(0, 2 * b - a))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    if A >= 13:\n        return B\n    if A >= 6 and A <= 12:\n        return B // 2\n    return 0"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a*b if a >= 13 or b > 5 else a*(b/2))"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '{}'.format(b // 2 if a >= 13 else b if a < 6 else 0)"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return 'Yen' if B >= A * 2 or (A < 6 and B >= A) or (A >= 13 and B < A * 2) else 'Yen' + str(int(A * 2 * 0.5))\n"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # A = 30\n    # B = 100\n    A, B = map(int, stdin.split())\n    return B - A * 2 if A >= 13 and A <= 60 and A % 2 == 0 else B // 2"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    age, cost = map(int, stdin.split())\n    if age >= 13:\n        cost = cost // 2\n    if age >= 6:\n        cost = cost // 2\n    if age <= 5:\n        cost = 0\n    return str(cost)"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A, B = map(int, stdin.split())\n    if A >= 13 or (A >= 6 and A <= 12 and B % 2 == 0):\n        return B // 2\n    else:\n        return 0\n    \"\"\"\n    A, B = map(int, stdin.split())\n    if A >= 13 or (A >= 6 and A <= 12 and B % 2 == 0):\n        return B // 2\n    else:\n        return 0"
    },
    {
        "number": 4402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    age,price = [int(e) for e in stdin.split(' ')]\n    price = int(price/2) if age >= 6 and age <=12 else price\n    price = int(price/2) if age >=13 else price\n    return f\"{price:.0f}\""
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the integer in Takahashi's mind after he eats all the symbols\n    return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    result = 0\n    for c in s:\n        if c == '+':\n            result += 1\n        else:\n            result -= 1\n    return str(result)"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.replace('+', '1').replace('-', '-1')))\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    takahashi = 0\n    \n    for i in stdin:\n        if i == '+':\n            takahashi += 1\n        else:\n            takahashi -= 1\n    \n    return takahashi\n    \n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the integer in Takahashi's mind after he eats all the symbols.\n\n    >>> solution(\"+-++\")\n    2\n    \"\"\"\n    s = stdin\n    res = 0\n    for c in s:\n        if c == \"+\":\n            res += 1\n        elif c == \"-\":\n            res -= 1\n    return res"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"+\":\n            A += 1\n        else:\n            A -= 1\n    return A\n"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4403,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(' ')[0]) + int(stdin.split(' ')[1]) + int(stdin.split(' ')[2]) + int(stdin.split(' ')[3]))"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    # fetch the input string\n    input_string = stdin.strip()\n\n    # parse the date\n    # year: int\n    # month: int\n    # day: int\n    year, month, day = input_string.split('/')\n    year = int(year)\n    month = int(month)\n    day = int(day)\n\n    # get the number of days in each month\n    # February: 29 days\n    # other months: 30 days\n    DAYS_IN_MONTHS = {\n        1: 31,\n        2: 29,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n\n    # determine the year\n    if year % 400 == 0:\n        DAYS_IN_YEAR = 366\n    elif year % 100 == 0:\n        DAYS_IN_YEAR = 365\n    elif year % 4 == 0:\n        DAYS_IN_YEAR = 366\n    else:\n        DAYS_IN_YEAR = 365\n\n    # determine the month\n    if month == 1:\n        days = day\n    else:\n        days = DAYS_IN_MONTHS.get(month)\n        if month == 2:\n            if year % 4 == 0:\n                days += day\n            else:\n                days += 1\n        elif days < day:\n            days += DAYS_IN_MONTHS.get(month - 1)\n        else:\n            days += day\n\n    # determine the year\n    if days < DAYS_IN_YEAR:\n        return 'TBD'\n    elif days == DAYS_IN_YEAR:\n        if year == 2019:\n            return 'Heisei'\n        else:\n            return 'TBD'\n    else:\n        return 'Heisei'\n\ndef"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2019/04/30\")\n    'Heisei'\n    >>> solution(\"2019/04/31\")\n    'TBD'\n    \"\"\"\n    month, day = stdin.split(\"/\")\n    return \"Heisei\" if month < \"04\" or (month == \"04\" and day <= \"30\") else \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    # input is a string of length 12\n    # take the first two numbers as a year\n    year_s = stdin[0:4]\n    # take the next two numbers as a month\n    month_s = stdin[5:7]\n    # take the last two numbers as a day\n    day_s = stdin[8:12]\n\n    if year_s == \"2019\" and month_s == \"04\" and day_s == \"30\":\n        return \"Heisei\"\n    else:\n        return \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('/')\n    day = data[0]\n    month = data[1]\n    year = data[2]\n    \n    if day <= '31' and month <= '03':\n        if month == '02' and int(day) <= '28' or day <= '31' and month == '01' or month == '03' and day <= '31':\n            return 'Heisei'\n        elif int(day) > '30':\n            return 'TBD'\n        elif month == '04' and int(day) >= '29':\n            return 'TBD'\n        else:\n            return 'TBD'\n    elif day <= '31' and month <= '04':\n        if month == '03' and int(day) <= '31':\n            return 'Heisei'\n        elif int(day) > '30':\n            return 'TBD'\n        elif month == '04' and int(day) >= '30':\n            return 'TBD'\n        else:\n            return 'TBD'\n    else:\n        return 'TBD'\n        \n    \n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return 'Heisei' if int(stdin.split('/')[1]) < 4 else 'TBD'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    month, day, year = stdin.split(\"/\")\n    month, day, year = int(month), int(day), int(year)\n    if month >= 4 and day <= 30:\n        return \"Heisei\"\n    return \"TBD\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        'january': 'Heisei',\n        'february': 'TBD',\n       'march': 'Heisei',\n        'april': 'TBD',\n       'may': 'Heisei',\n        'june': 'Heisei',\n        'july': 'Heisei',\n        'august': 'TBD',\n       'september': 'TBD',\n        'october': 'TBD',\n        'november': 'TBD',\n        'december': 'TBD',\n    }[stdin.split('/')[1]]"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Replace pass above with your code\n    year, month, day = map(int, stdin.split('/'))\n    if year < 2019:\n        return 'Heisei'\n    elif year == 2019 and month < 4:\n        return 'Heisei'\n    elif year == 2019 and month == 4 and day < 30:\n        return 'Heisei'\n    elif year == 2019 and month == 4 and day >= 30:\n        return 'TBD'\n    else:\n        return 'Heisei'\n"
    },
    {
        "number": 4404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Declare the variable year which represents the year of the date in the format\n    # yyyy/mm/dd and initialise it to None.\n    year = None\n    # Declare the variable month which represents the month of the date in the format\n    # yyyy/mm/dd and initialise it to None.\n    month = None\n    # Declare the variable day which represents the day of the date in the format\n    # yyyy/mm/dd and initialise it to None.\n    day = None\n    # Create a for loop to iterate through the characters of the string.\n    for c in stdin:\n        # For every character in the string, if the character is a digit, set the variable\n        # year to the value of the character.\n        if c.isdigit():\n            year = c\n        # For every character in the string, if the character is a digit, set the variable\n        # month to the value of the character.\n        elif c.isdigit():\n            month = c\n        # For every character in the string, if the character is a digit, set the variable\n        # day to the value of the character.\n        elif c.isdigit():\n            day = c\n    # If the year variable is None, then the year variable is set to the string\n    # 2019.\n    if year is None:\n        year = \"2019\"\n    # If the month variable is None, then the month variable is set to the string\n    # 04.\n    if month is None:\n        month = \"04\"\n    # If the day variable is None, then the day variable is set to the string\n    # 30.\n    if day is None:\n        day = \"30\"\n    # Convert the string which represents the date to the corresponding date format\n    # in the format yyyy/mm/dd.\n    date = year + \"/\" + month + \"/\" + day\n    # Initialise the variable year_new which represents the year of the converted date\n    # in the format yyyy/mm/dd.\n    year_new = None\n    # Create a try statement to convert the string which represents the date to the\n    # corresponding date format in the format yyyy/mm/dd.\n    try:\n        # Convert the string which represents the date to the corresponding date format\n        # in the format yyyy/mm/dd.\n        year_new = datetime.strptime(date, \"%Y/%m/%d\").year\n    # If the try statement does not raise an exception, then the variable year_new is\n    # set to the value of the variable year which represents the year of the date in\n    # the format yyyy/mm/dd.\n    except ValueError:\n        year_new = year\n    # Initialise the variable date_new which represents the date in the format yyyy/mm/dd\n    # of the current date.\n    date_new = None\n    # Create a try statement to convert the string which represents the date in the\n    # format yyyy/mm/dd to the corresponding date format in the format yyyy/mm/dd.\n    try:\n        # Convert the string which represents the date in the format yyyy/mm/dd to the\n        # corresponding date format in the format yyyy/mm/dd.\n        date_new = datetime.strptime(date, \"%Y/%m/%d\")\n    # If the try statement does not raise an exception, then the variable date_new is\n    # set to the value of the variable date which represents the date in the format\n    # yyyy/mm/dd.\n    except ValueError:\n        date_new = date\n    # Initialise the variable day_new which represents the day of the current date.\n    day_new = None\n    # Create a try statement to convert the string which represents the date in the\n    # format yyyy/mm/dd to the corresponding date format in the format yyyy/mm/dd.\n    try:\n        # Convert the string which represents the date in the format yyyy/mm/dd to the\n        # corresponding date format in the format yyyy/mm/dd.\n        day_new = datetime.strptime(date, \"%Y/%m/%d\").day\n    # If the try statement does not raise an exception, then the variable day_new is\n    # set to the value of the variable day which represents the day of the date in the\n    # format yyyy/mm/dd.\n    except ValueError:\n        day_new = day\n    # Initialise the variable month_new which represents the month of the current date.\n    month_new = None\n    # Create a try statement to convert the string which represents the date in the\n    # format yyyy/mm/dd to the corresponding date format in the format yyyy/mm/dd.\n    try:\n        # Convert the string which represents the date in the format yyyy/mm/dd to the\n        # corresponding date format in the format yyyy/mm/dd.\n        month_new = datetime.strptime(date, \"%Y/%m/%d\").month\n    # If the try statement does not raise an exception, then the variable month_new is\n    # set to the value of the variable month which represents the month of the date in\n    # the format yyyy/mm/dd.\n    except ValueError:\n        month_new = month\n    # Initialise the variable year_new which represents the year of the current date.\n    year_new = None\n    # Create a try statement to convert the string which represents the date in the\n    # format yyyy/mm/dd to the corresponding date format in the format yyyy/mm/dd.\n    try:\n        # Convert the string which represents the date in the format yyyy/mm/dd to the\n        # corresponding date format in the format yyyy/mm/dd.\n        year_new = datetime.strptime(date, \"%Y/%m/%d\").year\n    # If the try statement does not raise an exception, then the variable year_new is\n    # set to the value of the variable year which represents the year of the date in\n    # the format yyyy/mm/dd.\n    except ValueError:\n        year_new = year\n    # Initialise the variable date_new which represents the date in the format yyyy/mm/dd\n    # of the current date.\n    date_new = None\n    # If the year_new variable is equal to the year variable, then the year variable is\n    # set to the string 2019 and year_new is set to the value of the variable year.\n    if year_new == year:\n        year = \"2019\"\n    # If the month_new variable is equal to the month variable, then the month variable is\n    # set to the string 04 and month_new is set to the value of the variable month.\n    if month_new == month:\n        month = \"04\"\n    # If the day_new variable is equal to the day variable, then the day variable is set\n    # to the string 30 and day_new is set to the value of the variable day.\n    if day_new == day:\n        day = \"30\"\n    # If the year_new variable is equal to the year variable, then the year variable is\n    # set to the string 2019 and year_new is set to the value of the variable year.\n    if year_new == year:\n        year = \"2019\"\n    # If the month_new variable is equal to the month variable, then the month variable is\n    # set to the string 04 and month_new is set to the value of the variable month.\n    if month_new == month:\n        month = \"04\"\n    # If the day_new variable is equal to the day variable, then the day variable is set\n    # to the string 30 and day_new is set to the value of the variable day.\n    if day_new == day:\n        day = \"30\"\n    # If the year"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_problems = int(stdin.readline())\n    problems = list(map(int, stdin.readline().split()))\n    problems_dict = {i: problems[i] for i in range(num_problems)}\n    ans = 0\n    while True:\n        try:\n            p = next(k for k in problems_dict.keys() if problems_dict[k] == max(problems_dict.values()))\n            problems_dict[p] /= 2\n            ans += 1\n            if problems_dict[p] == 0:\n                problems_dict.pop(p)\n        except:\n            return ans"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum number of problems in the set of thematic contests.\"\"\"\n    pass\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum number of contests, such that the number of problems\n    in each contest is exactly twice as much as in the previous one.\n\n    Args:\n        stdin: The input string.\n\n    Returns:\n        str: The maximum number of contests.\n    \"\"\"\n    return '{}'.format(int(stdin))\n\"\"\"\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # print(n)\n    topic = sorted(map(int, stdin.split()))\n    # print(topic)\n    cur_day = 1\n    ans = 0\n    last = 0\n    for i in topic:\n        if i == last + 2:\n            ans += i - cur_day\n            cur_day += i - cur_day\n            last = i\n        else:\n            cur_day = i\n            last = i\n    return ans\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problem_list = list(map(int, stdin.readline().split(' ')))\n    if n == 1:\n        return 1\n    max_days = int(n / 2)\n    day_dict = {problem_list[0]: 1}\n    day_list = [problem_list[0]]\n    day_count = 1\n    for i in range(1, n):\n        if problem_list[i] == problem_list[i - 1]:\n            day_count += 1\n        else:\n            day_dict[problem_list[i]] = day_count\n            day_list.append(problem_list[i])\n            day_count = 1\n        if len(day_list) == max_days:\n            break\n    if len(day_list) < max_days:\n        max_days = len(day_list)\n        day_dict = {problem_list[i]: 1 for i in range(n)}\n        day_list = list(day_dict.keys())\n    if max_days == 1:\n        return n\n    count = 0\n    for i in range(max_days):\n        count += day_dict[day_list[i]]\n    return count\n\ndef"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string that represents the answer.\"\"\"\n    assert len(stdin) == 1\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    _, *data = stdin.split()\n    return str(len(data) // 2)\n"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, *nums = stdin.split('\\n')\n    nums = [int(n) for n in nums if n!= '']\n    n = len(nums)\n    assert n % 2 == 0\n    n = n // 2\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = 2 * nums[i] + nums[j]\n    return max(max(row) for row in dp)"
    },
    {
        "number": 4405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    # group = []\n    # i = 0\n    # while i < N - 1:\n    #     if a[i] == a[i + 1]:\n    #         group.append(a[i])\n    #         i += 2\n    #     else:\n    #         group.append(a[i])\n    #         i += 1\n    # group.append(a[i])\n\n    # d = {i: group.count(i) for i in group}\n    # max_v = max(d.values())\n    # for key, value in d.items():\n    #     if value == max_v:\n    #         return str(value)\n    # return str(max_v)\n    return str(len(set(a)))\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(stdin)\n\n\ndef"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    conversations = []\n    for i in range(1, n + 1):\n        conversations.append(i)\n    \n    for i in range(n):\n        num_of_friends = stdin.readline()[1:-2].split(', ')\n        id = 0\n        for j in num_of_friends:\n            if int(j)!= 0:\n                id = int(j)\n                if id in conversations:\n                    conversations.pop(conversations.index(id))\n    \n    print(len(conversations))\n    print(' '.join([str(i) for i in conversations]))"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n')[:-1])\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    \u0421\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: n \u0438 k.\n\n    \u0421\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f n \u0447\u0438\u0441\u0435\u043b: id1, id2,..., idn.\n\n    \u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    \u0427\u0438\u0441\u043b\u043e m.\n\n    \u0421\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f m \u0447\u0438\u0441\u0435\u043b: id1, id2,..., idm.\n    '''\n    '''\n    \u0427\u0438\u0441\u043b\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0430\u043a\u0430\u043d\u0435\n    '''\n    n, k = map(int, stdin.split())\n    list_k = [int(stdin.split('\\n')[0]) for _ in range(n)]\n    list_k = list(set(list_k))\n    list_k.sort()\n    list_k.reverse()\n    list_k = list_k[:k]\n    list_k = list(map(str, list_k))\n    print(len(list_k))\n    print(' '.join(list_k))\n    '''\n    \u0427\u0438\u0441\u043b\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u0442\u0430\u043a\u0430\u043d\u0435\n    '''\nsolution(stdin)"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = [0] * k\n    for i in range(n):\n        s, id = map(int, stdin.split())\n        if i < k:\n            if s == id:\n                l.append(id)\n            else:\n                l.pop()\n                l.insert(0, id)\n    return \" \".join(map(str, l))\n\nprint(solution(\"7 2\\n1 2 3 2 1 3 2\\n\"))\nprint(solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\"))\n\n\n\ndef"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split('\\n')\n    n, k = int(n), int(k)\n    f = [0] * 100010\n    for _ in range(n):\n        msg = stdin.split('\\n')\n        i = int(msg[0])\n        f[i] += 1\n    m = min(n, k)\n    res = []\n    for i in range(m):\n        res.append(str(i + 1))\n        f[i + 1] += f[i]\n    for i in range(m, n):\n        res.append(str(res[i - m]))\n        f[i + 1] += f[i - m] - 1\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    a = stdin.split(' ')\n    a = [int(i) for i in a]\n    \n    m = 0\n    a.sort()\n    while len(a) >= 2:\n        \n        if a[m] == a[m+1]:\n            m += 2\n        else:\n            a = a[m+2:] + a[:m]\n            m = 0\n            \n        if m == k-1:\n            break\n        m += 1\n    \n    return str(m+1) +'' +''.join([str(i) for i in a[:m+1]])\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    id_to_idx = defaultdict(int)\n    id_to_conversations = defaultdict(list)\n\n    for id_ in [int(x) for x in stdin.split('\\n')[0].split(' ')]:\n        id_to_idx[id_] = len(id_to_idx)\n        id_to_conversations[id_].append(id_to_idx[id_])\n    \n    conversations = sorted(id_to_conversations.values())\n    print(conversations)\n\n    return '\\n'.join(str(id_to_idx[id_]) for id_ in [int(x) for x in stdin.split('\\n')[1].split(' ')])\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    id_list = []\n    result = []\n    for i in range(n):\n        id_list.append(int(stdin.split(\" \")[i]))\n    \n    count = 0\n    while count < n:\n        for i in range(k):\n            if not id_list:\n                break\n            if id_list[0] in result:\n                id_list = id_list[1:]\n                continue\n            else:\n                result.append(id_list[0])\n                id_list = id_list[1:]\n        count += 1\n    print(len(result))\n    for i in range(len(result)):\n        print(result[i], end=\" \")\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = [int(stdin) for _ in range(q)]\n    \"\"\"\n    b = [\n        [0, 3, 5],\n        [6, 8, 10],\n        [11, 12, 12],\n        [10, 10, 11]\n    ]\n    \"\"\"\n    c = []\n    for i in range(n):\n        for j in range(n):\n            if a[j] == 2 ** i:\n                c.append(j)\n    d = dict()\n    for x in c:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    for x in b:\n        if x in d:\n            print(d[x])\n        else:\n            print(-1)"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    n, q = map(int, lines[0].split())\n    lines = lines[1:]\n\n    coins = list(map(int, lines[0].split()))\n\n    queries = []\n    for line in lines[1:]:\n        queries.append(int(line))\n\n    coins.sort()\n\n    ans = []\n    for query in queries:\n        # coin_count = 0\n        # for i in range(n):\n        #     if query >= coins[i]:\n        #         coin_count += 1\n        #     else:\n        #         break\n        # ans.append(coin_count)\n        ans.append(binary_search(query, coins))\n\n    return \"\\n\".join(map(str, ans))\n\n\ndef"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, solution_without_b(stdin)))\n\n\ndef"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n\n    for _ in range(q):\n        b = int(stdin.split()[0])\n        ans = float('inf')\n        for coin in coins:\n            if b % coin == 0:\n                if b // coin < ans:\n                    ans = b // coin\n                break\n        print(ans if ans!= float('inf') else -1)\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[0].split())\n    coins = [int(c) for c in stdin.split('\\n')[1].split()]\n    queries = [int(q) for q in stdin.split('\\n')[2:]]\n\n    dp = [float('inf')] * (1 << n)\n    dp[0] = 0\n    for i in range(1, (1 << n)):\n        for j in range(n):\n            if i & (1 << j):\n                for coin in coins:\n                    if (i ^ (1 << j)) & (1 << (n - coin - 1)):\n                        dp[i] = min(dp[i], dp[i ^ (1 << j)] + 1)\n\n    ans = []\n    for q in queries:\n        ans.append(dp[q] if dp[q]!= float('inf') else -1)\n\n    return''.join([str(a) for a in ans])\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''.join(map(str, l))\n"
    },
    {
        "number": 4407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get input and then print\"\"\"\n    n, q = map(int, stdin.split(\" \"))\n    coins = [int(c) for c in stdin.split(\"\\n\")[:n]]\n    q_coins = [int(q) for q in stdin.split(\"\\n\")[n:]]\n\n    coins.sort(reverse=True)\n\n    for q_coin in q_coins:\n        low = 0\n        high = len(coins) - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if coins[mid] == q_coin:\n                print(mid)\n                break\n            elif coins[mid] < q_coin:\n                low = mid + 1\n            else:\n                high = mid - 1\n        else:\n            print(-1)\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\n    Make use of the `stdin` string.\n    Don't forget to comment your code.\n    After your implementation, run this file again,\n    and the output should be the answer to the assignment.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not yet implemented'\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    f = [int(x) for x in stdin.split(' ')]\n    cards = [int(x) for x in stdin.split(' ')]\n    assert n == len(f) == k\n\n    total_max = 0\n    for t in range(2, k + 1):\n        for i in range(k * n):\n            for j in range(i + 1, k * n):\n                if t == 1:\n                    total_max = max(total_max, cards[i] + cards[j])\n                elif i + t <= k * n and j + t <= k * n:\n                    total_max = max(total_max, cards[i] + cards[j])\n    return total_max"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input\n    :return: output\n    \"\"\"\n    n, k, cards, *fav_nums = map(int, stdin.split('\\n')[0].split())\n    fav_nums = [int(i) for i in stdin.split('\\n')[2].split()]\n\n    if n == 1:\n        print(fav_nums[0])\n        return\n    res = 0\n    fav_nums = sorted(fav_nums)\n    max_num = fav_nums[-1]\n    for i in range(max_num + 1):\n        count = 0\n        for j in range(n):\n            if fav_nums[j] < i:\n                count += 1\n            if count > k:\n                break\n        if count == k:\n            res += 1\n    print(res)"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum possible total joy levels of the players\n    '''\n    # stdin = input()\n    n, k = map(int, stdin.split(' '))\n    cards = list(map(int, stdin.split('\\n')[0].split(' ')))\n    favorite_numbers = list(map(int, stdin.split('\\n')[1].split(' ')))\n    hearts = list(map(int, stdin.split('\\n')[2].split(' ')))\n    max_total_joy = 0\n    for i in range(1, k+1):\n        total = 0\n        for j in range(0, n):\n            if cards[j] == favorite_numbers[j]:\n                total += hearts[j]\n        max_total_joy = max(max_total_joy, total)\n    return max_total_joy"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution of the first problem of the series.\n    '''\n   ..."
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    cards = list(map(int, stdin.split('\\n')[1].split()))\n\n    cnt_cards = [0] * (max(cards) + 1)\n    for i in range(k * n):\n        cnt_cards[cards[i]] += 1\n\n    memo = {}\n    return traverse(cards, k, n, memo, cnt_cards)\n\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    cards = list(map(int, stdin.split(' ')))\n    favs = list(map(int, stdin.split(' ')))\n\n    def get_gain(arr: list, fav: int, k: int) -> int:\n        gain = 0\n        for i, c in enumerate(arr):\n            if c == fav:\n                gain += k - i\n        return gain\n\n    max_gain = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            gain = get_gain(cards[i:j], favs[i], j - i)\n            if gain > max_gain:\n                max_gain = gain\n    return max_gain\n\nsolution('4 3\\n1 3 2 8 5 5 8 2 2 8 5 2\\n1 2 2 5')\n"
    },
    {
        "number": 4408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    c = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    f = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    h = [int(x) for x in stdin.split('\\n')[3].split(' ')]\n\n    dp = [[0]*(k+1) for _ in range(n)]\n    for i in range(k):\n        dp[0][i+1] = h[i] if c[i] == f[0] else 0\n    for i in range(1, n):\n        for j in range(k+1):\n            dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + h[i] if c[i] == f[i] else max(dp[i-1][j], dp[i-1][j-1])\n    return dp[-1][-1]\n    # return max([max([dp[i-1][j], dp[i-1][j-1]]) + h[i] for i in range(n) for j in range(k+1) if c[i] == f[i]])\n    # return max([max([dp[i-1][j], dp[i-1][j-1]]) for i in range(n) for j in range(k+1) if c[i] == f[i]])"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) / O(1)\"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    count = 0\n    while True:\n        not_equal_found = False\n        for i in range(n - 1):\n            if a[i]!= a[i + 1]:\n                not_equal_found = True\n                diff = a[i + 1] - a[i]\n                a[i + 1] = a[i] + diff\n                a[i] = a[i + 1] - diff\n                count += 1\n                break\n        if not not_equal_found:\n            break\n    return str(count)\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    # print(a)\n    diff = []\n    for i in range(0, len(a)):\n        for j in range(0, len(a)):\n            if i < j and abs(a[i]-a[j]) in diff:\n                continue\n            if i == j or abs(a[i]-a[j])!= 1:\n                continue\n            if abs(a[i]-a[j]) not in diff:\n                diff.append(abs(a[i]-a[j]))\n    print(len(diff))\n    for i in range(0, len(diff)):\n        print(1, i+1, i+2)\n        print(2, i+1, i+2)\n        print()\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = 0\n    while len(a) > 1:\n        a.sort()\n        if a[-1] > 10 ** 18:\n            break\n        res += 1\n        if len(a) > 2:\n            a[0] += a[1]\n            a.pop(1)\n        a.sort()\n    return str(res) + '\\n' + '\\n'.join(' '.join(map(str, x)) for x in zip([1, 2], [1, 2], [1, 2]))\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readlines()\n    n = int(line[0].strip())\n    line = line[1].split(' ')\n    a = [int(x) for x in line]\n    a.sort()\n    a.append(a[0])\n    res = 0\n    for i in range(n - 1):\n        if abs(a[i] - a[i + 1]) > 1:\n            res += 1\n            a[i + 1] = abs(a[i] - a[i + 1])\n    print(res)\n    for i in range(res):\n        print(' '.join([str(x) for x in [1, i + 1, i + 2]]))\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    size = int(stdin)\n    \n    a = list(map(int, stdin.split('\\n')[1:]))\n    \n    dist = [abs(x - y) for x, y in zip(a, a[1:])]\n    \n    # 1 = sum, 2 = sub\n    operation = [0 for x in range(size)]\n    \n    for i in range(len(dist)):\n        if dist[i] > 1:\n            operation[i + 1] = 1\n            dist[i + 1] = 0\n    \n    for j in range(len(dist)):\n        if dist[j] > 1:\n            operation[j - 1] = 2\n            dist[j - 1] = 0\n    \n    for x in operation:\n        if x!= 0:\n            print(x, dist)\n    \n    return '\\n'.join(str(x) for x in operation)\n    \n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    cnt = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if abs(a[i]-a[j]) == 1:\n                cnt+=1\n                a[i]+=1 if a[i]<a[j] else -1\n                a[j]+=1 if a[j]>a[i] else -1\n    print(cnt)\n    for i in range(cnt):\n        print(1,a.index(max(a)),a.index(max(a))+1)\n        a[a.index(max(a))]-=1\n        a[a.index(max(a))]-=1\n\nsolution(stdin)\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"getting input and return string\"\"\"\n    n = int(stdin)\n    numbers = [int(i) for i in stdin.split(\" \")]\n    print(numbers)\n    count = 0\n    while len(set(numbers))!= 1:\n        count += 1\n        numbers[0] += numbers[0] - numbers[1]\n        numbers[1] += numbers[0] - numbers[1]\n    print(count)\n\n    return\nsolution(input())\n"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \") if x]\n    d = dict()\n    for i in range(n):\n        d[i] = a[i]\n    \n    c = 0\n    while len(d) > 1:\n        d = dict(sorted(d.items(), key=lambda x: x[1]))\n        c += 1\n        j, s = d.popitem(False)\n        i = 0\n        for i in range(len(d)):\n            if s - d[list(d.keys())[i]] < 0:\n                break\n        d[list(d.keys())[i]] += abs(s - d[list(d.keys())[i]])\n    return c"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = input()\n    a = list(map(int, input().split()))\n    print(a)\n\n    result = 0\n    current_min = min(a)\n    current_max = max(a)\n    current_length = len(a)\n    for i in range(current_length):\n        if a[i] == current_min:\n            result += 1\n            index = i\n            break\n\n    while True:\n        index_next = None\n        for j in range(current_length):\n            if a[j] == current_max:\n                index_next = j\n                break\n\n        if index_next is None:\n            break\n\n        a[index] += 1\n        a[index_next] += 1\n        current_min += 1\n        current_max += 1\n        result += 1\n\n    return result"
    },
    {
        "number": 4409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We can greedily search for the most free table for each char.\n    Time complexity: O(NlogN)\n    Space complexity: O(N)\n    \"\"\"\n    S, N, K = stdin.strip().split()\n    K, N = int(K), int(N)\n    S = list(S)\n    A = [0] * N\n    for char in S:\n        if char == '0':\n            A[K - 1] += 1\n        else:\n            A[K] += 1\n    A.sort()\n    i, ans = 0, 0\n    while i < len(A) - 1:\n        ans += A[i]\n        i += 1\n    return ans\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = [int(x) for x in stdin.readline().split()]\n        s = stdin.readline()\n        if '1' in s:\n            print(1)\n        else:\n            print(0)\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the maximum number of free tables that you can occupy so as not to violate the rules of the restaurant.\n\n    Args:\n        stdin (str): binary string of length n describing the current state of the restaurant.\n\n    Returns:\n        str: the maximum number of free tables that you can occupy so as not to violate the rules of the restaurant.\n    \"\"\"\n\"\"\"\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443 stdin, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u0437\u0430\u043f\u0438\u0441\u044c \u043e \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430.\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0434\u043b\u044f \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0431\u0435\u0437 \u043f\u0440\u0438\u0432\u044b\u0448\u0435\u043d\u0438\u044f \u043f\u043e\u0440\u044f\u0434\u043a\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438:\nsolution(stdin='100010')\nOut[3]: 1\nsolution(stdin='10100100')\nOut[4]: 2\nsolution(stdin='11111111')\nOut[5]: 0\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u0430:\n6\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u0430:\n1\n2\n0\n1\n1\n1\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input\n    :return: output\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of tables that can be occupied so as not to violate the rules of the restaurant\"\"\"\n   ...\n\"\"\"\nYou can use a greedy algorithm to find the answer.\n\nLet's take an example.\n\nThe state of the restaurant is \"1\" and \"0\".\n\nIf you want to occupy the table number 4, then you can replace the first 2 \"0\" with \"1\" and the second 2 \"0\" with \"1\".\n\nIf you want to occupy the table number 6, then you can replace the first 2 \"0\" with \"1\" and the second 2 \"0\" with \"1\".\n\nIf you want to occupy the table number 8, then you can replace the first 3 \"0\" with \"1\" and the second 3 \"0\" with \"1\".\n\nIf you want to occupy the table number 10, then you can replace the first 4 \"0\" with \"1\" and the second 4 \"0\" with \"1\".\n\nThe answer is 4 because you can occupy all the tables from 4 to 10.\n\nIf you want to occupy the table number 11, then you can replace the first 4 \"0\" with \"1\" and the second 4 \"0\" with \"1\".\n\nSo, in total, you can occupy 4 tables, which is exactly what you need.\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = [int(i) for i in stdin.split()]\n    return 0 if any(s.count(1) - s.count(0) < k) else s.count(0)\n    return 0 if any(s.count(1) - s.count(0) < k) else s.count(0)\n    return 0 if any(s.count(1) - s.count(0) < k) else s.count(0)\n    return 0 if any(s.count(1) - s.count(0) < k) else s.count(0)\n\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    arr = [[int(x) for x in stdin.split('\\n')[i].split(' ')] for i in range(1, n + 1)]\n    arr.sort()\n    visited = set()\n    res = 0\n    for start, end in arr:\n        if start > k:\n            break\n        for v in visited:\n            if v > start and v < end:\n                break\n        else:\n            visited.add(end)\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def intersect(a, b):\n        if a[0] <= b[0] <= a[1] and a[0] <= b[1] <= a[1]:\n            return True\n        return False\n\n    n, k = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        segments.append((a, b))\n    segments.sort()\n\n    removed = 0\n    curr = segments[0]\n    for i in range(1, n):\n        if not intersect(curr, segments[i]):\n            removed += 1\n            curr = segments[i]\n    print(removed)\n    print(*segments)\n    return \"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_bad_points(n: int, k: int) -> str:\n        bad_points = [0] * n\n        for i in range(n):\n            segment_count = 0\n            for j in range(n):\n                if i!= j:\n                    if check_intersect(segments[i], segments[j]):\n                        segment_count += 1\n            if segment_count > k:\n                bad_points[i] = 1\n\n        result = []\n        for i in range(n):\n            if bad_points[i] == 1:\n                result.append(i + 1)\n\n        return result\n\n    def check_intersect(segment_1: str, segment_2: str) -> bool:\n        first_interval = [int(segment_1[0]), int(segment_1[1])]\n        second_interval = [int(segment_2[0]), int(segment_2[1])]\n        return is_intersect(first_interval, second_interval)\n\n    def is_intersect(first_interval: str, second_interval: str) -> bool:\n        if first_interval[0] > second_interval[1] or second_interval[0] > first_interval[1]:\n            return False\n        return True\n\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        segments.append(stdin.split()[2 * i:2 * i + 2])\n    result = get_bad_points(n, k)\n    for i in range(len(result)):\n        print(result[i])\n    return ''\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def split_segments(segments: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n        result = []\n        for i in range(len(segments) - 1):\n            result.append((segments[i][0], segments[i + 1][1]))\n        return result\n\n    def get_result(segments: List[Tuple[int, int]], n: int) -> List[int]:\n        result = []\n        for i in range(n):\n            bad_points = 0\n            for segment in segments:\n                if i in range(segment[0], segment[1]):\n                    bad_points += 1\n            if bad_points > k:\n                result.append(i)\n        return result\n\n    n, k = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        segments.append(tuple(map(int, stdin.split())))\n\n    segments = split_segments(segments)\n    result = get_result(segments, n)\n\n    return str(len(result)) + '\\n' +''.join(map(str, result))\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    segments = []\n    for _ in range(n):\n        segments.append(tuple([int(x) for x in stdin.split(\"\\n\")[_].split(\" \")]))\n    segments.sort()\n\n    def is_bad(x):\n        count = 0\n        for segment in segments:\n            if segment[0] <= x <= segment[1]:\n                count += 1\n            if count > k:\n                return True\n        return False\n\n    left, right = 0, segments[-1][1]\n    while left < right:\n        mid = (left + right) // 2\n        if is_bad(mid):\n            left = mid + 1\n        else:\n            right = mid\n    return str(left)\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'a'"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [tuple(map(int, stdin.split())) for i in range(n)]\n    segments.sort(key=lambda s: s[0])\n    d = {}\n    for l, r in segments:\n        for j in range(l, r + 1):\n            if j not in d:\n                d[j] = []\n            d[j].append(r)\n    for j in d:\n        d[j].sort()\n    bad = set()\n    cur = []\n    for j in d:\n        if len(cur) < k:\n            cur.append(j)\n        else:\n            for r in d[j]:\n                if len(cur) == k:\n                    bad.add(min(cur))\n                    cur.clear()\n                    cur.append(j)\n                else:\n                    cur.append(j)\n    bad.add(min(cur))\n    for i in sorted(list(bad)):\n        print(i, end=' ')\n    return ''\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given $n$ segments on the coordinate axis $OX$. Segments can intersect, lie inside each other and even coincide. The $i$-th segment is $[l_i; r_i]$ ($l_i \\le r_i$) and it covers all integer points $j$ such that $l_i \\le j \\le r_i$.\n\nThe integer point is called bad if it is covered by strictly more than $k$ segments.\n\nYour task is to remove the minimum number of segments so that there are no bad points at all.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered.\n\nThe next $n$ lines contain segments. The $i$-th line contains two integers $l_i$ and $r_i$ ($1 \\le l_i \\le r_i \\le 2 \\cdot 10^5$) \u2014 the endpoints of the $i$-th segment.\n\n\n-----Output-----\n\nIn the first line print one integer $m$ ($0 \\le m \\le n$) \u2014 the minimum number of segments you need to remove so that there are no bad points.\n\nIn the second line print $m$ distinct integers $p_1, p_2, \\dots, p_m$ ($1 \\le p_i \\le n$) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.\n\n\n-----Examples-----\nInput\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n\nOutput\n3\n4 6 7 \n\nInput\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n\nOutput\n3\n1 4 5 \n\nInput\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n\nOutput\n4\n1 3 5 6\n    \"\"\"\n    \n    pass\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split('\\n')[:2])\n    max_pre = [0] * n\n    min_pre = [0] * n\n    for _ in range(q):\n        p = list(map(int, stdin.split('\\n')[2:][_].split()))\n        max_pre[p[0] - 1] = p[1]\n        min_pre[p[0] - 1] = p[1]\n    max_pre.sort()\n    min_pre.sort()\n    max_pre.reverse()\n    min_pre.reverse()\n    max_pre.append(0)\n    min_pre.append(0)\n    count = 0\n    for i in range(n):\n        if max_pre[i] == 0:\n            count += max_pre[i + 1]\n            if min_pre[i + 1]!= 0:\n                min_pre[i + 1] = min_pre[i] % min_pre[i + 1]\n        else:\n            count += max_pre[i + 1] - max_pre[i]\n            if min_pre[i + 1]!= 0:\n                min_pre[i + 1] = min_pre[i] % min_pre[i + 1]\n        if max_pre[i + 1] % max_pre[i] == 0 and min_pre[i + 1] % min_pre[i] == 0:\n            count = count % (max_pre[i + 1] // max_pre[i] * min_pre[i + 1] // min_pre[i])\n    return count\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''.join(map(str, stdin))\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not change anything to this line.\n    n, *a = map(int, stdin.split())\n    return a[-1]\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    sorted_a = sorted(a)\n    result = 0\n    \n    for i in range(q):\n        cnt = 3\n        while cnt > 0:\n            if a[i] % sorted_a[i] == 0:\n                a[i] = a[i] // sorted_a[i]\n                cnt -= 1\n            else:\n                break\n        result += a[i]\n    print(result)\n    return ''\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] % a[j] == 0 and a[j] % a[k] == 0:\n                    ans += a[i] / min(a[j], a[k])\n                elif a[j] % a[i] == 0 and a[i] % a[k] == 0:\n                    ans += a[j] / min(a[i], a[k])\n                elif a[k] % a[i] == 0 and a[i] % a[j] == 0:\n                    ans += a[k] / min(a[i], a[j])\n    for i in range(q):\n        print(int(ans))\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    # total = 0\n    # for _ in range(int(stdin)):\n    #     total += min(map(int, stdin.split()))\n    # return str(total)\n\n    # total = 0\n    # n = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         for k in range(j+1, n):\n    #             if a[i] % a[j] == 0 and a[j] % a[k] == 0:\n    #                 total += a[i] * a[j] * a[k]\n    # return str(total)\n\n    # return str(sum([min(map(int, stdin.split())) for _ in range(3)]))\n\n    # total = 0\n    # n = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     total += min(a)\n    #     a.remove(min(a))\n    # return str(total)\n\n    # total = 0\n    # n = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         for k in range(j+1, n):\n    #             if a[i] % a[j] == 0 and a[j] % a[k] == 0:\n    #                 total += a[i] * a[j] * a[k]\n    # return str(total)\n\n    # total = 0\n    # n = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     if a[i] % 3 == 0 and a[i] % 5 == 0:\n    #         total += a[i]\n    # return str(total)\n\n    # total = 0\n    # n = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n    #             total += a[i] * a[j]\n    # return str(total)\n\n    # total = 0\n    # n = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         if a[i] % a[j]!= 0 and a[j] % a[i]!= 0:\n    #             total += a[i] * a[j]\n    # return str(total)\n\n    # total = 0\n    # n = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         if a[i] % a[j]!= 0 or a[j] % a[i]!= 0:\n    #             total += a[i] * a[j]\n    # return str(total)\n\n    # total = 0\n    # n = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         if a[i] % a[j]!= 0 or a[j] % a[i]!= 0:\n    #             total += a[i] * a[j]\n    # return str(total)\n\n    # total = 0\n    # n = int(stdin)\n    # a = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     for j in range(i+1, n):\n    #         if a[i] % a[j]!= 0 or a[j] % a[i]!= 0:\n    #             total += a[i] * a[j]\n    # return str(total)\n\n    total = 0\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j]!= 0 or a[j] % a[i]!= 0:\n                total += a[i] * a[j]\n    return str(total)\n"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute maximum possible cumulative prettiness\"\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        a.sort()\n        a = set(a)\n        if len(a) == 1:\n            print(a.pop())\n        elif len(a) == 2:\n            if a.pop() % a.pop()!= 0:\n                print(a.pop()*a.pop())\n            else:\n                print(a.pop())\n        else:\n            a.pop()\n            a.pop()\n            print(a.pop()*a.pop())\n    return ''"
    },
    {
        "number": 4412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"Not yet implemented\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(cur, ind):\n        nonlocal n, dp, cur_dp\n        if cur_dp < dp:\n            return\n        if ind == n:\n            cur_dp = min(cur_dp, cur)\n            return\n        if ind == n - 1:\n            for i in range(n):\n                if i!= cur:\n                    if abs(stdin[cur] - stdin[i]) <= 1:\n                        break\n            else:\n                cur_dp = min(cur_dp, cur)\n                return\n        if dp[ind] <= cur:\n            return\n        dfs(cur + 1, ind + 1)\n        dfs(cur, ind + 1)\n\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    dp = [float('inf')] * n\n    cur_dp = float('inf')\n    for i in range(n):\n        dp[i] = i\n    dfs(0, 0)\n    return cur_dp\n\n\"\"\"\n\nfrom math import inf\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    num_queries = int(input[0])\n    queries = []\n    for i in range(1, num_queries+1):\n        query = list(map(int, input[i].split()))\n        queries.append(query)\n\n    for query in queries:\n        students = query[0]\n        skills = query[1:]\n\n        unique_skills = sorted(set(skills))\n        skills_num = len(unique_skills)\n        combinations = []\n        for i in range(1, students//2+1):\n            for j in range(skills_num):\n                if j <= (skills_num - 1) - i:\n                    combinations.append(unique_skills[j] + unique_skills[j + i])\n        combinations = sorted(set(combinations))\n        print(len(combinations))\n\n\n\n-----O(N*log(N)) time complexity-----\n-----O(N) space complexity----\n\n\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    first_input = int(stdin.readline())\n    teams = {}\n    for i in range(first_input):\n        students = int(stdin.readline())\n        skills = list(map(int, stdin.readline().split()))\n        for skill in skills:\n            if skill in teams:\n                teams[skill].append(students)\n            else:\n                teams[skill] = [students]\n    for _ in range(first_input):\n        students = int(stdin.readline())\n        skills = list(map(int, stdin.readline().split()))\n        teams_count = {}\n        for skill in skills:\n            for team in teams[skill]:\n                teams_count.setdefault(team, 0)\n                teams_count[team] += 1\n        print(len(teams_count.values()))\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    q = int(stdin[0])\n    n = int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    # Your code here\n    d = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            d.append(abs(a[i] - a[j]))\n    d.sort()\n    print(d)\n    if len(d) == 0:\n        return 1\n    elif len(d) == 1:\n        return 1 if d[0] > 1 else 0\n    return d[0] - 1\n\n\nprint(solution(\"3 2\\n1 2 3\\n\"))\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(str(i) for i in answer)\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"your solution here\"\n    return \"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Solution todo\n    return \"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'a'"
    },
    {
        "number": 4413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def _main(stdin: str):\n        inputs = stdin.split(\"\\n\")\n        _n, _a = [int(i) for i in inputs[0].split()]\n        a = [int(i) for i in inputs[1].split()]\n        a.sort()\n        ans = _n\n        i = 0\n        j = 1\n        while i < _n:\n            if abs(_a[i] - a[j]) > 1:\n                j += 1\n            else:\n                ans -= 1\n            i += 1\n        print(ans)\n\n    return _main(stdin)\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        a, b, n, S = [int(x) for x in stdin.readline().split(' ')]\n        x = 0\n        for j in range(a + 1):\n            x += n // j\n        y = 0\n        for j in range(b + 1):\n            y += S // j\n        if x == y:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"YES\" if q == 0 else \"NO\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, n, s = [int(x) for x in stdin.readline().strip().split()]\n        if s > b * n:\n            print('NO')\n            continue\n        if s < (a - 1) * n:\n            print('NO')\n            continue\n        x, y = a, 1\n        while x * n <= s and y * n <= s:\n            if x * n + y * n == s:\n                print('YES')\n                break\n            x += 1\n            y += 1\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"YES\" if is_possible else \"NO\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # import sys; input = sys.stdin.readline\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n, a, b, s = [int(x) for x in stdin.readline().split()]\n        if 2*n < s:\n            print('NO')\n            continue\n        if n*(b - a + 1) < s:\n            print('NO')\n            continue\n        if s == 2*n*(b - a + 1):\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    return str()\n"
    },
    {
        "number": 4414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES\\nNO\\nNO\\nYES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    a = [int(x) for x in stdin.readline().rstrip().split(' ')]\n    n_i, n_d = 0, 0\n    i, d = [], []\n    for j in range(n):\n        if a[j] > 0:\n            i.append(a[j])\n            n_i += 1\n        elif a[j] < 0:\n            d.append(a[j])\n            n_d += 1\n    i.sort()\n    d.sort(reverse=True)\n    if n_i == 0 and n_d == 0:\n        print('NO')\n        return\n    if n_i + n_d!= n:\n        print('NO')\n        return\n    if n_i == 0:\n        print(n_d)\n        print(' '.join([str(x) for x in d]))\n        return\n    if n_d == 0:\n        print(n_i)\n        print(' '.join([str(x) for x in i]))\n        return\n    if n_i!= 0 and n_d!= 0:\n        print(n_i)\n        print(' '.join([str(x) for x in i]))\n        print(n_d)\n        print(' '.join([str(x) for x in d]))\n        return"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    sequence = [int(x) for x in stdin.split('\\n')[1].split()]\n    print(sequence)\n\n    if sequence == sorted(sequence) or sequence == sorted(sequence, reverse=True):\n        return 'NO'\n\n    prev_max = 0\n    prev_min = 0\n\n    for i in range(n):\n        if prev_max < sequence[i]:\n            prev_max = sequence[i]\n            if prev_min < prev_max:\n                return 'NO'\n            else:\n                prev_min = prev_max\n        else:\n            prev_min = sequence[i]\n            if prev_max < prev_min:\n                return 'NO'\n\n    return 'YES'"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    a.sort()\n\n    inc, dec = 0, 0\n    ans = []\n    while inc + dec < N and a:\n        if a[inc] <= a[dec]:\n            ans.append(a[inc])\n            inc += 1\n        else:\n            ans.append(a[dec])\n            dec += 1\n\n    if inc + dec < N or inc + dec > N:\n        return \"NO\"\n    else:\n        return \"YES\\n{}\\n{}\\n{}\\n{}\".format(\n            N - inc - dec,\n            inc,\n            dec,\n            \" \".join([str(x) for x in ans])\n        )\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin.splitlines())\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    # print(n, a)\n    # print(n, a, n - len(a))\n    if len(a) == 1:\n        return 'NO'\n    if a[0] <= a[1]:\n        i = 1\n        while i < n:\n            if a[i] < a[i - 1]:\n                break\n            i += 1\n        if i == n:\n            return 'NO'\n        d = i\n        while d < n:\n            if a[d] > a[d - 1]:\n                break\n            d += 1\n        if d == n:\n            return 'NO'\n        if i == d:\n            return 'YES\\n' + str(d) + '\\n' +''.join([str(x) for x in a[:d]]) + '\\n' +''.join([str(x) for x in reversed(a[d:])])\n        else:\n            return 'YES\\n' + str(i) + '\\n' +''.join([str(x) for x in a[:i]]) + '\\n' +''.join([str(x) for x in reversed(a[i:d])]) + '\\n' +''.join([str(x) for x in a[d:]])\n    else:\n        i = 1\n        while i < n:\n            if a[i] > a[i - 1]:\n                break\n            i += 1\n        if i == n:\n            return 'NO'\n        d = i\n        while d < n:\n            if a[d] < a[d - 1]:\n                break\n            d += 1\n        if d == n:\n            return 'NO'\n        if i == d:\n            return 'YES\\n' + str(d) + '\\n' +''.join([str(x) for x in a[:d]]) + '\\n' +''.join([str(x) for x in reversed(a[d:])])\n        else:\n            return 'YES\\n' + str(i) + '\\n' +''.join([str(x) for x in a[:i]]) + '\\n' +''.join([str(x) for x in reversed(a[i:d])]) + '\\n' +''.join([str(x) for x in a[d:]])\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    increase = [1 for x in arr]\n    decrease = [1 for x in arr]\n    \n    for i in range(len(arr)-1):\n        if arr[i+1] >= arr[i]:\n            increase[i+1] = increase[i] + 1\n            \n    for i in range(len(arr)-1, 0, -1):\n        if arr[i-1] >= arr[i]:\n            decrease[i-1] = decrease[i] + 1\n            \n    increase_set = set(increase)\n    decrease_set = set(decrease)\n    \n    if len(increase_set)!= 1 or len(decrease_set)!= 1:\n        return 'NO'\n    \n    return 'YES'\n    \ndef"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(s) for s in stdin.split()]\n    ascending = []\n    descending = []\n    for i in range(n):\n        if i == 0:\n            if a[i] > a[i + 1]:\n                ascending.append(a[i])\n                descending.append(a[i + 1])\n            else:\n                ascending.append(a[i + 1])\n                descending.append(a[i])\n        else:\n            if a[i] > a[i + 1]:\n                if ascending[-1] == a[i]:\n                    ascending.append(a[i])\n                else:\n                    ascending.append(a[i + 1])\n                descending.append(a[i + 1])\n            else:\n                if descending[-1] == a[i]:\n                    descending.append(a[i])\n                else:\n                    descending.append(a[i + 1])\n                    ascending.append(a[i + 1])\n    result = []\n    if len(ascending) == len(descending):\n        ascending.sort()\n        descending.sort()\n        if ascending == descending:\n            result = ascending\n        else:\n            result = [1]\n    elif len(ascending) == 1:\n        ascending = ascending + descending\n        result = ascending\n    elif len(descending) == 1:\n        descending = descending + ascending\n        result = descending\n    return '\\n'.join([str(len(ascending)), '\\n'.join(map(str, ascending)), '\\n'.join(map(str, descending)), '\\n'.join(map(str, result))])\n\n\ndef"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    inc = list(filter(lambda x: x < a[0], a))\n    dec = list(filter(lambda x: x > a[-1], a))\n    if n == 0:\n        if inc:\n            return \"YES\\n0\\n\\n\"\n        else:\n            return \"YES\\n1\\n\\n\"\n    if inc:\n        if n!= len(inc):\n            return \"NO\"\n        else:\n            return \"YES\\n\" + str(n) + \"\\n\" +''.join(map(str, inc)) + \"\\n\"\n    else:\n        if n!= len(dec):\n            return \"NO\"\n        else:\n            return \"YES\\n\" + str(n) + \"\\n\" +''.join(map(str, dec)) + \"\\n\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Temporal marker            :  Wed 7:02 | Feb 28, 20\n    Temporal marker untethered :  Wed 7:29 | Feb 28, 20\n    Tread speed                :  10\n    Tread coverage              :  100\n    Lines of solution code    :  82\n    Computation time           :  30\n    Time to solve               :  1.5 min\n    Time taken                   :  0.39\n   ??? good luck?\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    inc = []\n    dec = []\n    inc_map = {}\n    dec_map = {}\n    if a[0] > 1:\n        inc.append(1)\n        inc_map[1] = 1\n    if a[n - 1] < n:\n        dec.append(n)\n        dec_map[n] = n\n    for i in range(1, n):\n        if a[i - 1] < a[i] > 1:\n            inc.append(a[i])\n            inc_map[a[i]] = i\n        elif a[i - 1] > a[i] < n:\n            dec.append(a[i])\n            dec_map[a[i]] = i\n    if inc and dec:\n        if len(inc)!= len(dec) or sorted(inc)!= sorted(dec):\n            return \"NO\"\n        else:\n            inc_map = {k: v for v, k in inc_map.items()}\n            dec_map = {k: v for v, k in dec_map.items()}\n            res = [0] * n\n            for i in inc:\n                res[inc_map[i]] = i\n            for i in dec:\n                res[dec_map[i]] = i\n            return \"YES\\n\" + str(len(inc)) + \"\\n\" + \" \".join(map(str, res))\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    inc, dec = [], []\n    i = 0\n    while i < n and a[i] <= a[i + 1]:\n        inc.append(a[i])\n        i += 1\n    while i < n and a[i] >= a[i + 1]:\n        dec.append(a[i])\n        i += 1\n    if i < n:\n        print(\"NO\")\n        return\n    print(\"YES\")\n    if not inc:\n        print(0)\n    else:\n        print(len(inc))\n        print(*inc)\n    if not dec:\n        print(0)\n    else:\n        print(len(dec))\n        print(*dec)\n"
    },
    {
        "number": 4415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    seq = [int(x) for x in stdin.split()]\n    if seq[0] >= seq[1]:\n        print('NO')\n    else:\n        inc = 0\n        dec = 0\n        for i in range(1, num):\n            if seq[i] <= seq[i - 1]:\n                inc += 1\n                dec = 0\n                if inc > 1:\n                    print('NO')\n                    return\n            elif seq[i] >= seq[i - 1]:\n                dec += 1\n                inc = 0\n                if dec > 1:\n                    print('NO')\n                    return\n        if inc == 0 and dec == 0:\n            print('NO')\n            return\n        if inc > 1:\n            print('NO')\n            return\n        if dec > 1:\n            print('NO')\n            return\n        print(inc + dec, *seq[:inc + dec], sep=' ')\n        return"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return -1 if no solution is possible\"\"\"\n    _, k = map(int, stdin.split())\n    n, books = map(int, stdin.split())\n    books = [list(map(int, stdin.split())) for _ in range(n)]\n    if k >= n:\n        return -1\n    # set of all books\n    book_set = {i for i in range(n)}\n    alice = {i for i in range(n) if books[i][0] == 1}\n    bob = {i for i in range(n) if books[i][1] == 1}\n    # alice and bob book set\n    alice_set = alice if len(alice) >= k else book_set\n    bob_set = bob if len(bob) >= k else book_set\n    # if there is no common set of books\n    if not alice_set.intersection(bob_set):\n        return -1\n    # min total reading time\n    min_t = 10 ** 5\n    # set of common books\n    common_books = alice_set.intersection(bob_set)\n    # for every set of common books\n    for common in common_books:\n        # alice books in this set\n        alice_books = alice_set - {common}\n        # sum of alice reading time\n        alice_t = 0\n        # for every book alice didn't read\n        for book in alice_books:\n            # add the book reading time to the sum\n            alice_t += books[book][0]\n        # bob books in this set\n        bob_books = bob_set - {common}\n        # sum of bob reading time\n        bob_t = 0\n        # for every book bob didn't read\n        for book in bob_books:\n            # add the book reading time to the sum\n            bob_t += books[book][1]\n        # sum of reading times of the common books\n        t = alice_t + bob_t\n        # update min total reading time\n        min_t = min(t, min_t)\n    return min_t"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the minimum total reading time of the suitable set of books.\n    \n    >>> solution('8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n')\n    18\n    >>> solution('5 2\\n6 0 0\\n9 0 0\\n1 0 1\\n2 1 1\\n5 0 1\\n3 0 0\\n')\n    -1\n    '''\n   ..."
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    print(n, k)\n    \n    if n < k:\n        return -1\n    \n    books = []\n    \n    for _ in range(n):\n        books.append( [int(i) for i in stdin.split(' ')] )\n    \n    print(books)\n    \n    # books = [ [7, 1, 1], [2, 1, 1], [4, 0, 1], [8, 1, 1], [1, 0, 1], [1, 1, 1], [1, 0, 1], [3, 0, 0] ]\n    # k = 4\n    \n    # books = [ [7, 1, 1], [2, 1, 1], [4, 0, 1], [8, 1, 1], [1, 0, 1], [1, 1, 1], [1, 0, 1], [3, 0, 0] ]\n    # k = 4\n    \n    def dfs(books, k):\n        if k == 1:\n            return sum([i[0] for i in books])\n        \n        min_val = sum([i[0] for i in books])\n        \n        for i, book in enumerate(books):\n            if book[1] == 0:\n                continue\n            \n            if k < book[1]:\n                continue\n            \n            tmp_books = copy.deepcopy(books)\n            tmp_books[i][1] -= 1\n            min_val = min(min_val, dfs(tmp_books, k - 1))\n        \n        return min_val\n    \n    return dfs(books, k)"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum total reading time of the suitable set of books.\"\"\"\n    # get data from stdin\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n\n    # sort books by amount of time needed for reading\n    books.sort(key=lambda x: x[0], reverse=True)\n\n    # minimum amount of books that Bob has to read\n    min_books_bob = 0\n    for i in range(n):\n        if books[i][1] == 1:\n            min_books_bob += 1\n        else:\n            break\n    if k < min_books_bob:\n        return '-1'\n\n    # minimum amount of books that Alice has to read\n    min_books_alice = 0\n    for i in range(n):\n        if books[i][2] == 1:\n            min_books_alice += 1\n        else:\n            break\n    if k < min_books_alice:\n        return '-1'\n\n    # amount of books that Alice has to read\n    books_alice = 0\n    while min_books_alice!= 0 and k!= 0:\n        min_books_alice -= 1\n        books_alice += 1\n        k -= 1\n\n    # amount of books that Bob has to read\n    books_bob = 0\n    while min_books_bob!= 0 and k!= 0:\n        min_books_bob -= 1\n        books_bob += 1\n        k -= 1\n\n    # total reading time\n    return books_alice + books_bob\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_min_reading_time(t1, t2):\n        return min(t1, t2)\n    \n    books = []\n    for i in range(int(stdin.split()[0])):\n        books.append(list(map(int, stdin.split()[i+1].split())))\n\n    k = int(stdin.split()[1])\n    alice_and_bob_reading_time = 0\n    for book in books:\n        alice_and_bob_reading_time += find_min_reading_time(book[0], book[2])\n        if book[1] == 1:\n            alice_and_bob_reading_time += find_min_reading_time(book[0], book[2])\n        if book[1] == 0:\n            alice_and_bob_reading_time += book[0]\n            \n    return alice_and_bob_reading_time\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # total, n, k = [int(x) for x in stdin.readline().split()]\n    # books = []\n    # for _ in range(n):\n    #     books.append([int(x) for x in stdin.readline().split()])\n    #\n    # books.sort(key=lambda x: x[0])\n    # dp = [0] * n\n    # for i in range(n):\n    #     for j in range(i):\n    #         if books[i][1] == 1 and books[j][1] == 1:\n    #             dp[i] = max(dp[i], dp[j] + books[i][0])\n    #         if books[i][2] == 1 and books[j][2] == 1:\n    #             dp[i] = max(dp[i], dp[j] + books[i][0])\n    #     dp[i] += books[i][0]\n    #\n    # if dp[n - 1] >= total:\n    #     return str(dp[n - 1])\n    # else:\n    #     return '-1'\n    #\n    # print(dp)\n    # return ''\n\n    n, k = [int(x) for x in stdin.readline().split()]\n    books = []\n    for _ in range(n):\n        books.append([int(x) for x in stdin.readline().split()])\n\n    books.sort(key=lambda x: x[0])\n    l, r = 0, len(books) - 1\n    s = set()\n    while l < r:\n        if books[l][1] == 1 and books[r][1] == 1:\n            for i in range(l, r + 1):\n                s.add(books[i][0])\n            l += 1\n            r -= 1\n        elif books[l][2] == 1 and books[r][2] == 1:\n            for i in range(l, r + 1):\n                s.add(books[i][0])\n            l += 1\n            r -= 1\n        else:\n            l += 1\n            r -= 1\n\n    if len(s) >= k:\n        return str(sum(s))\n    else:\n        return '-1'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = [list(map(int, stdin.split())) for _ in range(n)]\n    return max([sum(l[i]) for i in range(n) if sum(l[i]) >= k])\n\"\"\"\n\n\"\"\"\n\n-----BEGIN ASSIGNMENT-----\n\nThe total reading time of the books is the sum of $t_i$ over all books that are in the chosen set.\n\nFor example, if Alice likes at least $k$ books and Bob likes at least $k$ books, and these books are $i$-th, $i = 1, \\dots, n$, and $t_i$ are $a_i$ and $b_i$, then the total reading time is $t_1 + t_2 + \\cdots + t_n = \\sum_{i = 1}^n a_i + \\sum_{i = 1}^n b_i = (a_1 + a_2 + \\cdots + a_k) + (b_1 + b_2 + \\cdots + b_k) = (a_1 + a_2 + \\cdots + a_k) + (b_1 + b_2 + \\cdots + b_k) = \\sum_{i = 1}^k (a_i + b_i) = T, where $T$ is a positive integer.\n\nSo, if we consider the book sets for Alice and Bob separately, then their total reading time is the minimum of the sums of $t_i$ for $i = 1, \\dots, k$ (for Alice and $k' = k - k$, for Bob).\n\nWhat about if they read the books in one set?\n\nLet $A = \\{i_1, \\dots, i_k\\}$ be the set of books, where $i_1, \\dots, i_k$ are $i = 1, \\dots, n$ books.\n\nAlice wants at least $k$ books from the chosen set and Bob wants at least $k'$ books from the chosen set, so their total reading time is the minimum of the two sums:\n\n\\sum_{i \\in A} a_i + \\sum_{i \\in A} b_i = \\sum_{i \\in A} a_i + \\sum_{i \\in A} b_i = \\sum_{i = 1}^k a_i + \\sum_{i = 1}^k b_i = \\sum_{i = 1}^k \\min(a_i, b_i) = T_1, \n\nwhere $T_1$ is a positive integer.\n\nSo, the solution is either $T_1$ or $-1$ (they read the same books in the same set or can't read any book).\n\nIn the first case, the solution is $T_1$.\n\nIn the second case, the solution is $-1$.\n\n-----END ASSIGNMENT-----\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 4\\n7 1 1\\n2 1 1\\n4 0 1\\n8 1 1\\n1 0 1\\n1 1 1\\n1 0 1\\n3 0 0\\n\")\n    18\n    \"\"\"\n   ...\n    \n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the maximum equal price.'\n    _, k = map(int, stdin.split('\\n')[:2])\n    x = [int(x) for x in stdin.split('\\n')[2:]]\n    y = [x[i] // 2 if x[i] % 2 == 0 else x[i] // 2 + 1 for i in range(len(x))]\n    if y[0]!= 0:\n        y = [0] + y\n    if y[-1]!= 0:\n        y = y + [0]\n    l = len(y)\n    if k > 2 * l:\n        return '-1'\n    dp = [[0] * (2 * l + 1) for _ in range(2 * l + 1)]\n    dp[0][0] = 1\n    for i in range(1, 2 * l + 1):\n        for j in range(2 * l + 1):\n            if i - j >= 0 and j - 1 >= 0:\n                dp[i][j] += dp[i - j][j - 1]\n            if j - 1 >= 0:\n                dp[i][j] += dp[i][j - 1]\n            if i - j + 1 <= 2 * l - 1 and j + 1 <= 2 * l - 1:\n                dp[i][j] += dp[i - j][j + 1]\n    res = -1\n    for i in range(l, -1, -1):\n        for j in range(i, -1, -1):\n            if x[i - 1] - x[j] > k:\n                continue\n            if x[i - 1] - x[j] == k:\n                res = max(res, y[j])\n            if x[i - 1] - x[j] <= k:\n                res = max(res, dp[l - i][i - j] + x[i - 1] - x[j])\n    if res == -1:\n        return '-1'\n    else:\n        return str(res)\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def maxDiff(nums, k):\n        nums.sort()\n        return nums[-1] - nums[0]\n\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n, k = map(int, stdin.readline().strip().split())\n        nums = list(map(int, stdin.readline().strip().split()))\n        if maxDiff(nums, k) > k:\n            print(-1)\n        else:\n            print(maxDiff(nums, k))\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Creates the solution\n    :param stdin: the input string\n    :return: the solution string\n    \"\"\"\n    return \"\"\n\n\"\"\"\nimport sys\nq = int(sys.stdin.readline())\nfor _ in range(q):\n    n, k = [int(s) for s in sys.stdin.readline().split()]\n    a = [int(s) for s in sys.stdin.readline().split()]\n    ans = None\n    for i in range(n):\n        j = i + 1\n        diff = 0\n        while j < n and diff <= k:\n            diff = abs(a[i] - a[j])\n            j += 1\n        if j < n:\n            ans = a[j]\n            break\n    print(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    T = int(stdin)\n    for _ in range(T):\n        N, K = [int(i) for i in stdin.split()]\n        A = [int(i) for i in stdin.split()]\n        A.sort()\n        diff = K\n        B = 0\n        for i in range(1, N):\n            if A[i] - B > diff:\n                break\n            else:\n                B = A[i]\n        print(B)\n\nsolution(input())\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for The Price Of Products\"\"\"\n   ..."
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 1\n   ... 1 1 2 3 1\n   ... 4 2\n   ... 6 4 8 5\n   ... 2 2\n   ... 1 6\n   ... 3 5\n   ... 5 2 5\n   ... ''')\n    '2'\n    >>> solution('''5 2\n   ... 1 1 2 3 1\n   ... 4 2\n   ... 6 4 8 5\n   ... 2 2\n   ... 1 6\n   ... 3 5\n   ... 5 2 5\n   ... ''')\n    '6'\n    \"\"\"\n    number_of_queries, _, *q = stdin.split('\\n')\n    number_of_queries, k = map(int, number_of_queries.split())\n    price_table = [\n        list(map(int, line.split())) for line in q\n    ]\n    price_table = [[a, b] for a, b in price_table]\n    price_table.sort()\n\n    B = 0\n    for i in range(1, number_of_queries + 1):\n        a, b = price_table[i - 1]\n        if abs(a - B) <= k:\n            B = b\n        else:\n            return '-1'\n\n    return str(B)\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom itertools import chain\n\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = [int(n) for n in lines[1].split()]\n\n    result = 6 - (len(a) % 6)\n    print(result if result!= 0 else 6)\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    count = 0\n    for i in range(n):\n        if a[i] in [4, 8, 15, 16, 23, 42]:\n            count += 1\n    if count % 6 == 0:\n        return 0\n    return count % 6"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(num) for num in stdin.split(' ')]\n    if n % 6 == 0:\n        return 0\n    return n % 6\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of elements you have to remove to obtain a good array.\"\"\"\n    _, a = stdin.split('\\n')\n    return len(a) % 6\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, a = [int(x) for x in stdin.split('\\n')]\n    if N % 6 == 0:\n        return 0\n    else:\n        return N % 6\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    my_input = [int(i) for i in stdin.split()]\n    length = int(len(my_input) / 6)\n    my_set = set(my_input)\n    counter = 0\n    for number in my_set:\n        if my_input.count(number)!= length:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the input string of the number of elements, the number of elements and a string of elements separated by a space, prints the minimum number of elements you have to remove to obtain a good array.\n    >>> solution(\"5\\n4 8 15 16 23\")\n    5\n    >>> solution(\"12\\n4 8 4 8 15 16 8 16 23 15 16 42 23 42\")\n    3\n    >>> solution(\"15\\n4 8 4 8 15 16 8 16 23 15 16 4 42 23 42\")\n    0\n    \"\"\"\n    \n    input_string = stdin.readline()\n    n = int(input_string)\n    if n == 1:\n        print(0)\n    else:\n        input_string = stdin.readline()\n        nums = input_string.split(' ')\n        nums = [int(x) for x in nums]\n        first_half = int(len(nums) / 6)\n        if first_half > 0:\n            for i in range(6):\n                nums.remove(4 * (i + 1))\n                nums.remove(8 * (i + 1))\n                nums.remove(15 * (i + 1))\n                nums.remove(16 * (i + 1))\n                nums.remove(23 * (i + 1))\n                nums.remove(42 * (i + 1))\n            if sum(nums) % 6!= 0:\n                print(first_half)\n            else:\n                print(0)\n        else:\n            print(0)\n\n    return \"\""
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 4 8 15 16 23\n   ... ''')\n    5\n    >>> solution('''12\n   ... 4 8 4 8 15 16 8 16 23 15 16 42 23 42\n   ... ''')\n    0\n    >>> solution('''15\n   ... 4 8 4 8 15 16 8 16 23 15 16 42 23 42\n   ... ''')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    a.sort()\n    min_removed = 0\n    for i in range(n - 1):\n        removed = a[i + 1] - a[i]\n        if removed % 6!= 0:\n            min_removed += 1\n\n    return min_removed"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #return \"\"\n    n = int(stdin)\n    l = [int(x) for x in stdin.split(\" \")]\n    if n % 6!= 0:\n        return \"0\"\n    # a: [4, 8, 15, 16, 23, 42]\n    # b: [4, 8, 4, 15, 16, 8, 23, 15, 16, 42, 23, 42]\n    a = [4] * (n // 6)\n    b = [8] * (n // 6)\n    c = [15] * (n // 6)\n    d = [16] * (n // 6)\n    e = [23] * (n // 6)\n    f = [42] * (n // 6)\n    if n == 4:\n        return \"1\"\n    if n == 8:\n        return \"2\"\n    if n == 15:\n        return \"3\"\n    if n == 16:\n        return \"4\"\n    if n == 23:\n        return \"5\"\n    if n == 42:\n        return \"6\"\n    if n == n // 6 * 6:\n        return \"0\"\n    print(l)\n    print(n, a, b, c, d, e, f)\n    for i in range(len(a)):\n        if a[i]!= l[i * 6]:\n            a[i] = l[i * 6]\n        if b[i]!= l[i * 6 + 1]:\n            b[i] = l[i * 6 + 1]\n        if c[i]!= l[i * 6 + 2]:\n            c[i] = l[i * 6 + 2]\n        if d[i]!= l[i * 6 + 3]:\n            d[i] = l[i * 6 + 3]\n        if e[i]!= l[i * 6 + 4]:\n            e[i] = l[i * 6 + 4]\n        if f[i]!= l[i * 6 + 5]:\n            f[i] = l[i * 6 + 5]\n    print(a, b, c, d, e, f)\n    for i in range(len(b)):\n        if b[i]!= l[i * 6 + 1]:\n            b[i] = l[i * 6 + 1]\n        if c[i]!= l[i * 6 + 2]:\n            c[i] = l[i * 6 + 2]\n        if d[i]!= l[i * 6 + 3]:\n            d[i] = l[i * 6 + 3]\n        if e[i]!= l[i * 6 + 4]:\n            e[i] = l[i * 6 + 4]\n        if f[i]!= l[i * 6 + 5]:\n            f[i] = l[i * 6 + 5]\n    print(a, b, c, d, e, f)\n    for i in range(len(c)):\n        if c[i]!= l[i * 6 + 2]:\n            c[i] = l[i * 6 + 2]\n        if d[i]!= l[i * 6 + 3]:\n            d[i] = l[i * 6 + 3]\n        if e[i]!= l[i * 6 + 4]:\n            e[i] = l[i * 6 + 4]\n        if f[i]!= l[i * 6 + 5]:\n            f[i] = l[i * 6 + 5]\n    print(a, b, c, d, e, f)\n    for i in range(len(d)):\n        if d[i]!= l[i * 6 + 3]:\n            d[i] = l[i * 6 + 3]\n        if e[i]!= l[i * 6 + 4]:\n            e[i] = l[i * 6 + 4]\n        if f[i]!= l[i * 6 + 5]:\n            f[i] = l[i * 6 + 5]\n    print(a, b, c, d, e, f)\n    for i in range(len(e)):\n        if e[i]!= l[i * 6 + 4]:\n            e[i] = l[i * 6 + 4]\n        if f[i]!= l[i * 6 + 5]:\n            f[i] = l[i * 6 + 5]\n    print(a, b, c, d, e, f)\n    for i in range(len(f)):\n        if f[i]!= l[i * 6 + 5]:\n            f[i] = l[i * 6 + 5]\n    print(a, b, c, d, e, f)\n    print(a, b, c, d, e, f)\n    return \"6\"\n    # return str(n // 6 * 6)\n\nprint(solution(input()))"
    },
    {
        "number": 4418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    n = int(n[0])\n    m = list(map(int, stdin.split()))\n    a = sorted(m)\n    print(a)\n    \n    for i in range(n):\n        if n%6 == 0:\n            if a[0] == 4 or a[0] == 8 or a[0] == 16:\n                a.pop(0)\n            else:\n                print(a.pop(0))\n        elif n%6 == 1:\n            if a[0] == 8 or a[0] == 15 or a[0] == 23:\n                a.pop(0)\n            else:\n                print(a.pop(0))\n        elif n%6 == 2:\n            if a[0] == 15 or a[0] == 16 or a[0] == 42:\n                a.pop(0)\n            else:\n                print(a.pop(0))\n        elif n%6 == 3:\n            if a[0] == 16 or a[0] == 23 or a[0] == 42:\n                a.pop(0)\n            else:\n                print(a.pop(0))\n        elif n%6 == 4:\n            if a[0] == 23 or a[0] == 42:\n                a.pop(0)\n            else:\n                print(a.pop(0))\n        else:\n            if a[0] == 42:\n                a.pop(0)\n            else:\n                print(a.pop(0))\n            \n        if a == []:\n            break\n    return str(len(a))\n    \n    \n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    diff = b - a\n    if diff <= 10:\n        print(diff)\n    else:\n        print(10)\n    return ''\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    return the minimum number of moves required to obtain b from a\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\nfor _ in range(int(stdin.readline())):\n    a, b = map(int, stdin.readline().split())\n    print(min(a, b) - max(a, b))\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/51b62bf6a9c58071c600001b/train/python\"\"\"\n    \n    t = int(stdin.split('\\n')[0])\n    \n    for _ in range(t):\n        n, m = map(int, stdin.split('\\n')[1].split())\n        \n        if n < m:\n            n, m = m, n\n        \n        l = []\n        \n        for n, m in zip(str(n), str(m)):\n            if n > m:\n                l.append(n)\n            else:\n                l.append(m)\n        \n        print(''.join(l))\n\n\n\"\"\"\na + b = c + d\na + b - a = c + d\na + b - b = c + d\n\n1 + 2 + 3 +... + n = n(n+1)/2\n\"\"\"\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split('\\n'))\n"
    },
    {
        "number": 4419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets solution function.\n\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\")\n    '12339'\n    >>> solution(\"3 2 10\\n1 1 2\\n3 2 5\")\n    '1'\n    >>> solution(\"7 5 12345\\n5 0 4\\n10 5 15\\n17 8 54321\\n499999993 9 1000000000\\n10 5 187\\n2 0 999999999\")\n    '12339'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution value.\"\"\"\n    # Input\n    t = int(stdin.readline())\n    for i in range(t):\n        x, y, n = map(int, stdin.readline().split())\n        # Output\n        print(f\"{n - ((n - y) % x) + (n - y) // x}\")\n    return solution(stdin)\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 4420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Finds maximum number of boxes Polycarp can give \"\"\"\n    pass\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    stdin = stdin.strip('\\n').strip()\n    n = int(n)\n    k = int(k)\n    stdin = [int(x) for x in stdin.split(' ')]\n    \n    left = []\n    right = []\n    for i in range(n):\n        if stdin[i] % k == 0:\n            left.append(stdin[i])\n        else:\n            right.append(stdin[i])\n    for i in range(len(right)):\n        for j in range(i, len(right)):\n            if right[i] + right[j] % k == 0:\n                left.append(right[i])\n                left.append(right[j])\n                break\n    return len(left)\n\n\ndef"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution function'''\n    pass\n    \n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n    d.sort()\n    cnt = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j and d[i] + d[j] % k == 0:\n                cnt += 1\n    return str(cnt)\n    \n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2\\n1 2 2 3 2 4 10\")\n    6\n    >>> solution(\"8 2\\n1 2 2 3 2 4 6 10\")\n    8\n    >>> solution(\"7 3\\n1 2 2 3 2 4 5\")\n    4\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_ok(array, k):\n        \"\"\"\n        Returns True if sum(a) is divisible by k\n        \"\"\"\n        return sum(array) % k == 0\n\n    def divisor_count(n):\n        \"\"\"\n        Returns the number of divisors of n\n        \"\"\"\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n\n    _, k = map(int, stdin.split(' '))\n    nums = list(map(int, stdin.split(' ')))\n    lst = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] + nums[j] in lst:\n                continue\n            if is_ok([nums[i], nums[j]], k):\n                lst.append(nums[i] + nums[j])\n\n    print(divisor_count(max(lst)))\n"
    },
    {
        "number": 4421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1\\nABC\")\n    'Abc'\n    \"\"\"\n    N, K = stdin.split(\" \")\n    N, K = int(N), int(K)\n    S = stdin.split(\"\\n\")[1].strip()\n    return S[:N - K] + S[N - K].lower() + S[N - K + 1:]\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    N, K = stdin.split()\n    N, K = int(N), int(K)\n    S = stdin.split()[1]\n    S = S[:N-1]\n    S = S + S[N-1].lower()\n    print(S)\n\nsolution(str(input()))\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length, k, *values = stdin.split('\\n')\n    k = int(k)\n    print(''.join([v[:k - 1] + v[k - 1].lower() + v[k:] for v in values]))\n    return\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return n, k, stdin.split()"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = stdin.split()\n    # word = stdin[0]\n    # index = int(stdin[1])\n    # # print(word, index)\n    # new_word = word[:index - 1] + word[index - 1].lower() + word[index:]\n    # return new_word\n    return stdin[0][:int(stdin[1]) - 1] + stdin[0][int(stdin[1]) - 1].lower() + stdin[0][int(stdin[1]):]\n\n\ndef"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    input_str = stdin.split('\\n')\n    N, K = input_str[0].split(' ')\n    N, K = int(N), int(K)\n    # init output\n    output_str = \"\"\n    # construct output_str\n    for i in range(0, N):\n        output_str += input_str[i][:K-1]+input_str[i][K-1].lower() + input_str[i][K:]\n    return output_str\n\ndef"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    In:\n        stdin: str -> The string containing the input\n    Out:\n        str -> The string after lowercasing the K-th character in it\n    \"\"\"\n    n, k = map(int, stdin.split())\n    string = stdin[0]\n    string = string.lower()\n    print(string[0:k-1] + string[k:n])\n    return\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ABC\")\n    'aBC'\n    >>> solution(\"CBA\")\n    'aBC'\n    >>> solution(\"BCA\")\n    'aBC'\n    >>> solution(\"CAB\")\n    'aBC'\n    >>> solution(\"ACB\")\n    'aBC'\n    >>> solution(\"BAC\")\n    'aBC'\n    >>> solution(\"BBA\")\n    'aBC'\n    >>> solution(\"AAB\")\n    'aBC'\n    >>> solution(\"ABB\")\n    'aBC'\n    >>> solution(\"ABB\")\n    'aBC'\n    >>> solution(\"ACB\")\n    'aBC'\n    >>> solution(\"BCA\")\n    'aBC'\n    >>> solution(\"CBA\")\n    'aBC'\n    >>> solution(\"BCA\")\n    'aBC'\n    \"\"\"\n    return stdin.lower()[:int(stdin[0]) - 1] + stdin[:int(stdin[0]) - 1].lower()\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    s = stdin.split('\\n')[1]\n    a = s.split()[0]\n    b = s.split()[1]\n    c = s.split()[2]\n    k = k - 1\n    print(a[:k] + b[:k] + c[:k] + a[k:] + b[k:] + c[k:])\n"
    },
    {
        "number": 4422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the number of each element in the input and return the answer.\n\n    :param stdin: The input to be processed.\n    :type stdin: str\n    :return: The answer to the problem.\n    :rtype: str\n    \"\"\"\n    # Split the input into the number of lines (N) and the string S\n    split_input = stdin.split('\\n')\n    number_of_lines = int(split_input[0])\n    string_to_process = split_input[1]\n\n    # Extract the K-th character from the string\n    if number_of_lines > 0 and 1 <= number_of_lines <= 50:\n        if 1 <= number_of_lines <= 50:\n            # The given index must be less than or equal to the length of the string.\n            if number_of_lines <= len(string_to_process):\n                # The string has at least one character and a maximum of 50 characters.\n                if number_of_lines >= 1 and number_of_lines <= 50:\n                    # K must be a number and less than or equal to the length of the string.\n                    if 1 <= number_of_lines <= len(string_to_process):\n                        # Convert the K-th character to a character\n                        character_to_lowercase = string_to_process[number_of_lines - 1]\n                        # Print the result\n                        print(string_to_process.replace(character_to_lowercase, character_to_lowercase.lower()))\n                    else:\n                        print(\"Error\")\n                else:\n                    print(\"Error\")\n            else:\n                print(\"Error\")\n        else:\n            print(\"Error\")\n    else:\n        print(\"Error\")\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    scores = []\n    names = []\n    for i in range(1, N + 1):\n        scores.append(int(stdin[i].split(' ')[1]))\n        names.append(stdin[i].split(' ')[0])\n    scores = sorted(scores)\n    scores.reverse()\n    print_names = [names[scores.index(i)] for i in scores]\n    print('\\n'.join(print_names))"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport re\nimport itertools\n\ntest_str = \"\"\"6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\"\"\"\n\ntest_str1 = \"\"\"5\nkazan 35\nmoscow 60\nkhabarovsk 40\nkazan 50\nmoscow 10\"\"\"\n\ntest_str2 = \"\"\"6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\"\"\"\n\n\ndef"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N : number of restaurants\n    :return: list of id's of restaurants ordered by city and then by score\n    '''\n    input_list = stdin.splitlines()\n    N = int(input_list[0])\n\n    restaurant_info = []\n    for line in range(1, N + 1):\n        restaurant_info.append(input_list[line].split())\n\n    restaurant_info.sort()\n\n    for line in range(N):\n        restaurant_info[line][1] = int(restaurant_info[line][1])\n\n    restaurant_info.sort(key=lambda x: (-x[1], x[0]))\n\n    for line in range(N):\n        restaurant_info[line][0] = str(restaurant_info[line][0])\n\n    for line in range(N):\n        print(restaurant_info[line][0])\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # ----START SOLUTION----\n    stdin = stdin.split('\\n')[1:]\n    stdin.sort(key = lambda x: (x[1], x[0]))\n    for i in range(len(stdin)):\n        print(i + 1)\n    # ----END SOLUTION----\n    return ''\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    arr = []\n    for i in range(1, N+1):\n        arr.append(tuple(stdin.split()[i]))\n    arr.sort()\n    s = \"\"\n    for i in range(N):\n        s = s + str(i+1) + \"\\n\"\n    return s\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_restaurants = int(stdin)\n    restaurant_list = [None] * num_restaurants\n    for i in range(num_restaurants):\n        city, score = stdin.split()\n        restaurant_list[i] = (city, int(score))\n    restaurant_list.sort()\n    for i in range(num_restaurants):\n        print(i + 1, restaurant_list[i][0], restaurant_list[i][1])\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *args = stdin.split('\\n')\n    return '\\n'.join(sorted(map(lambda x: x[1], sorted(map(lambda x: x.split(' '), args)))))\n    # return '\\n'.join(sorted(map(lambda x: x[1], args)))\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def sort_func(x: str) -> tuple:\n        return x[1], x[0]\n\n    def rev_func(x: tuple) -> str:\n        return x[0]\n\n    stdin = stdin.split('\\n')[1:]\n    stdin = [line.split() for line in stdin]\n    stdin = [(line[0], int(line[1])) for line in stdin]\n    stdin.sort(key=sort_func)\n    stdin.sort(key=rev_func, reverse=True)\n    for i, line in enumerate(stdin):\n        print(i+1, end=' ')\n"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.splitlines()\n    names.sort()\n    for i in range(len(names)):\n        print(i+1)\n    pass\n\n\ndef"
    },
    {
        "number": 4423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the input and output from stdin.\n\n    Args:\n        stdin (str): The input.\n\n    Returns:\n        str: The solution of the problem.\n    \"\"\"\n    cities = {city: score for city, score in [line.split() for line in stdin.split('\\n')]}\n    print('\\n'.join([str(n) for n, (city, score) in enumerate(sorted(cities.items(), key=lambda x: x[1]), 1) if score == max(cities.values())]))\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Don't print anything!\n    # The parameter given to your function is one line from stdin (the input data in string format)\n    # You can use stdin.split() to get a list of strings\n    # You can use stdin.split(' ') to get a list of strings\n    # The return value should be a string\n    # You can use stdout.write() to print to the output stream\n    # The output stream is given as stdout\n    # Use print() to print on the output stream, for example, print(\"Hello, world!\")\n    # Note that stdout.write() automatically adds a newline at the end of the string, which you want to avoid\n    # You can use a slice to remove the newline character: stdout.write(s)[:-1]\n    k, x = map(int, stdin.split())\n    # print(\"k:\", k, \"x:\", x)\n    if k*500 >= x:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, x = map(int, stdin.split())\n    return \"Yes\" if x >= 1000 else \"No\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    return \"Yes\" if k * 500 >= x else \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split(' '))\n    coins = [500, 100, 50, 10]\n    ways = [0] * (x + 1)\n    ways[0] = 1\n\n    for coin in coins:\n        for i in range(coin, x + 1):\n            ways[i] += ways[i - coin]\n    return 'Yes' if ways[x] > 0 else 'No'"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split(' '))\n    return 'Yes' if K * 500 + 500 >= X else 'No'\n"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    k, x = int(inputs[0]), int(inputs[1])\n    coins = [500, 100, 50, 10, 5, 1]\n    count = 0\n    for coin in coins:\n        count += k // coin\n        k = k % coin\n    if count >= x:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, X = stdin.split()\n    K, X = int(K), int(X)\n    i = 0\n    while K >= 0 and i < len(coins) and coins[i] < X:\n        X -= coins[i]\n        K -= 1\n        i += 1\n    return \"Yes\" if K == 0 else \"No\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, X = list(map(int, stdin.split(' ')))\n\n    if K * 500 >= X:\n        return 'Yes'\n    else:\n        return 'No'\n\"\"\"\n\ndef"
    },
    {
        "number": 4424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    K, X = stdin.split(' ')\n    K, X = int(K), int(X)\n    if K >= 100 and K*500 <= X:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(0.145833333333)\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    if N >= K:\n        return \"0.0\"\n    prob = 0.0\n    for die in range(1, N + 1):\n        prob += (1 / die) ** N\n    return str(prob)\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N, K = int(N), int(K)\n    return str(round(sum([1/i if i > K else 0 for i in range(1, N+1)]), 9))"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    return str(sum((1 / 48 if x <= k else 0) for x in range(1, n + 1)))\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Split the input\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    # Calculate the number of possibilities\n    possible = 2 ** n\n    # Calculate the probability\n    prob = (possible - k) / possible\n    # Output the result\n    print(round(prob, 9))\n    return ''\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(K / (N * (N + 1) / 2))\n\n\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(' ')]\n    return str(sum([1 / (2 ** i) for i in range(4, N + 1)]))\n"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(sum([(K-1)//i for i in range(1, K+1)]) / N)"
    },
    {
        "number": 4425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # p = 1 / n\n    # if k > n:\n    #     return 0\n    # for i in range(k):\n    #     p = p * (n - i) / (k - i)\n    # return p\n    return binomial(k, n) / n\n\n\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    day = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\"]\n    ans = 0\n    for i in range(6):\n        if day[i] == stdin:\n            ans = (7 - i) % 7\n            break\n    return str(ans)"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days_in_week = {\n        'SUN': 7,\n        'MON': 6,\n        'TUE': 5,\n        'WED': 4,\n        'THU': 3,\n        'FRI': 2,\n        'SAT': 1\n    }\n    days_of_week = {\n        1: 'SUN',\n        2: 'MON',\n        3: 'TUE',\n        4: 'WED',\n        5: 'THU',\n        6: 'FRI',\n        7: 'SAT'\n    }\n    curr_day = days_of_week[stdin]\n    curr_day_num = days_in_week[curr_day]\n    next_day_num = curr_day_num + 1\n    next_day = days_of_week[next_day_num]\n    print(next_day)\nsolution(stdin)\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    day_dict = {\n        \"SUN\": 1,\n        \"MON\": 2,\n        \"TUE\": 3,\n        \"WED\": 4,\n        \"THU\": 5,\n        \"FRI\": 6,\n        \"SAT\": 7,\n    }\n    next_day = day_dict.get(stdin)\n    next_day += 1\n    while next_day > 7:\n        next_day -= 7\n    next_day_name = [\n        \"Sunday\",\n        \"Monday\",\n        \"Tuesday\",\n        \"Wednesday\",\n        \"Thursday\",\n        \"Friday\",\n        \"Saturday\",\n    ][next_day - 1]\n    return next_day_name\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    days = {\n        'SUN': 0,\n        'MON': 1,\n        'TUE': 2,\n        'WED': 3,\n        'THU': 4,\n        'FRI': 5,\n        'SAT': 6\n    }\n    \n    day_of_week = days[stdin]\n    \n    day_of_week += 1\n    \n    if day_of_week > 6:\n        day_of_week = 0\n    \n    return day_of_week\n\"\"\"\n\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    week = {\"SUN\": 0, \"MON\": 1, \"TUE\": 2, \"WED\": 3, \"THU\": 4, \"FRI\": 5, \"SAT\": 6}\n    S = stdin.strip()\n    return week[S]\n    # example: \"SAT\" --> Sunday\n    # week = {\"SUN\": 0, \"MON\": 1, \"TUE\": 2, \"WED\": 3, \"THU\": 4, \"FRI\": 5, \"SAT\": 6}\n    # S = stdin.strip()\n    # if S in week:\n    #     return week[S]\n    # else:\n    #     return week[S[::-1]]\n    #     # example: \"SAT\" --> 6\n    #     # week = {\"SUN\": 0, \"MON\": 1, \"TUE\": 2, \"WED\": 3, \"THU\": 4, \"FRI\": 5, \"SAT\": 6}\n    #     # S = stdin.strip()\n    #     # if S in week:\n    #     #     return week[S]\n    #     # else:\n    #     #     return week[S[::-1]]\n"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = {\n        \"SUN\": 1,\n        \"MON\": 2,\n        \"TUE\": 3,\n        \"WED\": 4,\n        \"THU\": 5,\n        \"FRI\": 6,\n        \"SAT\": 7\n    }\n    arr = stdin.split(\"\\n\")\n    \n    s = x[arr[0]]\n    day_before_sunday = 0\n\n    for i in range(1, s):\n        day_before_sunday += 1\n        if i == s - 1:\n            break\n        s -= 1\n        day_before_sunday += 1\n    return str(day_before_sunday)"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = {\"SUN\":0, \"MON\":1, \"TUE\":2, \"WED\":3, \"THU\":4, \"FRI\":5, \"SAT\":6}\n    days_before = days[stdin]\n    days_before += 1\n    if days_before == 7:\n        days_before = 0\n    return days[list(days.keys())[list(days.values()).index(days_before)]]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    day = ['SUN','MON','TUE','WED','THU','FRI','SAT']\n    today = day.index(stdin)\n    tomorrow = today + 1\n    if tomorrow == 7:\n        tomorrow = 0\n    return day[tomorrow]"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    week = stdin\n    if week.upper() == \"SUN\":\n        return 0\n    elif week.upper() == \"MON\":\n        return 1\n    elif week.upper() == \"TUE\":\n        return 2\n    elif week.upper() == \"WED\":\n        return 3\n    elif week.upper() == \"THU\":\n        return 4\n    elif week.upper() == \"FRI\":\n        return 5\n    elif week.upper() == \"SAT\":\n        return 6\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    day = {\n        \"SUN\": 0,\n        \"MON\": 1,\n        \"TUE\": 2,\n        \"WED\": 3,\n        \"THU\": 4,\n        \"FRI\": 5,\n        \"SAT\": 6\n    }\n    today = stdin[0]\n    days = day[today]\n    for i in range(1, days + 1):\n        if days % 7 == 0:\n            days += 1\n    print(days)\n    return days\n\n\ndef"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the r, D and x_{2000} from the stdin, calculates x_{2001}...x_{2010} and prints them in order.\n\n    Args:\n        stdin (str): The input to process.\n\n    Returns:\n        str: The string representation of the ordered list of 10 numbers.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x_2013 = x_2000\n    for i in range(2010 - 2000):\n        x_2013 += r * x_2013 - D\n    for i in range(2010 - 2000):\n        print(x_2013)\n        x_2013 += r * x_2013 - D\n\n\ndef"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = map(int, stdin.split())\n    return '\\n'.join([str(r * x - D) for x in range(2000, 2011)])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_2000 = map(int, stdin.split())\n    x = [x_2000]\n    for _ in range(2010):\n        x.append(r * x[-1] - D)\n    return \"\\n\".join(map(str, x))"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution function for this problem\"\"\"\n    # Get parameters from input\n    r, D, x = map(int, stdin.split())\n\n    # Initialize variables\n    x_1 = 0\n\n    # Calculate values\n    for i in range(2010):\n        x_1 = (r * x_1) - D\n        print(x_1)\n    return \"\"\n"
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x = [int(x) for x in stdin.split()]\n    s = 0\n    for i in range(2000, 2011):\n        s = r * x - D\n        x = s\n        print(s)\n    return \"\""
    },
    {
        "number": 4427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    r, D, x_2000 = data[0].split()\n    r, D, x_2000 = int(r), int(D), int(x_2000)\n    x = x_2000\n    for i in range(2000, 2011):\n        x = x*(1+r/100)-D\n        print(int(x))\n    return \" \"\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets maximum sum of array and splits it into three parts\n    \n    Parameters\n    ----------\n    stdin: str\n        Input\n    \n    Returns\n    -------\n    str\n        Output\n    \"\"\"\n    pass"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nreturn 'Case #{}: {}'.format(case_num,...)"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # the input string\n    input_str = stdin\n    input_str = input_str.split('\\n')\n    input_str = input_str[1].split(' ')\n    for i in range(len(input_str)):\n        input_str[i] = int(input_str[i])\n    # set the input string to int\n    # input_str = list(map(int, input_str))\n    # loop through the input string\n    sum_1 = 0\n    sum_2 = 0\n    sum_3 = 0\n    # set sum_1 = 0\n    # set sum_2 = 0\n    # set sum_3 = 0\n    for i in range(len(input_str)):\n        if i < len(input_str) // 3:\n            sum_1 += input_str[i]\n        elif i < 2 * len(input_str) // 3:\n            sum_2 += input_str[i]\n        else:\n            sum_3 += input_str[i]\n    # set sum_1 = 0\n    # set sum_2 = 0\n    # set sum_3 = 0\n    # loop through the input string\n    # set sum_1 = 0\n    # set sum_2 = 0\n    # set sum_3 = 0\n    # sum_1 + sum_3 = sum_2\n    # sum_1 + sum_2 = sum_3\n    # sum_2 + sum_3 = sum_1\n    # sum_1 + sum_2 + sum_3 = sum_1\n    sum_1 = sum_3 = max(sum_1, sum_2)\n    sum_1 = max(sum_1, sum_3)\n    sum_2 = sum_3 = max(sum_1, sum_2)\n    print(sum_1)\n    return sum_1\n\nsolution('''\n5\n1 3 1 1 4\n''')"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(l, r, n):\n        res = 0\n        if n > 0:\n            res = max(res, l)\n            res = max(res, r)\n            return res\n        return 0\n\n    n = int(stdin)\n    arr = list(map(int, stdin.split(' ')))\n    l = [0] * n\n    r = [0] * n\n    s1 = 0\n    s2 = 0\n    s3 = 0\n    for i in range(n):\n        s1 += arr[i]\n        l[i] = s1\n        s2 += arr[i]\n        r[i] = s2\n        s3 += arr[i]\n    print(solve(s1, s2, s3))\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # \u5408\u6cd5\u7684\u5206\u6210\u4e09\u4efd, \u6ee1\u8db3 sum_1 = sum_3\n    # \u8bbe\u8d77\u59cb\u70b9\u4f4d\u7f6e\u4e3a s\n    # \u627e\u4e2a\u5751\uff0c\u9009\u4e00\u5757\u513f\uff0c\u5404\u81ea\u8bb0\u4e0b\uff0c\u5e76\u4e14\u5206\u6bb5\u540e\uff0c\u7b2c\u4e09\u5757\u6bd4\u524d\u4e24\u5757\u5c0f\n    # \u5168\u90fd\u5927\u4e8e0\u4e3a\u57fa\u7ebf\n    # \u5206\u6210\u7b2c\u4e09\u5757 \n    n = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n    print(d)\n    s, g = 0, 0\n    for i in range(n):\n        if s == 0:\n            s += d[i]\n        elif s > 0:\n            s += d[i]\n            if s == 0:\n                g += 1\n                s = 0\n        else:\n            s += d[i]\n    return g\n\nsolution(\"5\\n1 3 1 1 4\")"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 2\\n\")\n    5\n    >>> solution(\"1 3 1 1 4\\n\")\n    5\n    >>> solution(\"1 3 2 1 4\\n\")\n    4\n    >>> solution(\"1 3 2 1 4\\n\")\n    4\n    >>> solution(\"1 3 2 1 4\\n\")\n    4\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n    \"\"\"\n    size = int(stdin.readline().strip())\n    d = [int(x) for x in stdin.readline().strip().split(' ')]\n    a = 0\n    b = 0\n    c = 0\n    best = -10 ** 20\n\n    for i in range(0, size):\n        if d[i] > d[a]:\n            a = i\n        elif d[i] == d[a]:\n            a = i\n        if d[i] > d[b]:\n            b = i\n        elif d[i] == d[b]:\n            b = i\n        if d[i] > d[c]:\n            c = i\n        elif d[i] == d[c]:\n            c = i\n        best = max(best, d[a] + d[b] + d[c])\n    print(best)\n"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Tr\u1ea3 v\u1ec1 string bi\u1ec5u di\u1ec5n t\u1ea5t c\u1ea3 c\u00e1c c\u1eb7p index c\u1ee7a ph\u00e2n t\u1ed1i \u0111a tr\u00ean m\u1ed9t danh s\u00e1ch li\u00ean ti\u1ebfp.\n    string tr\u1ea3 v\u1ec1 ph\u1ea3i \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp theo th\u1ee9 t\u1ef1 t\u0103ng d\u1ea7n c\u1ee7a index c\u1ee7a c\u00e1c ph\u00e2n t\u1ed1i \u0111a.\n    Kh\u00f4ng xu\u1ea5t ph\u1ea7n t\u1eed trong danh s\u00e1ch \u0111\u01b0\u1ee3c quy m\u00f4.\n    \"\"\"\n    def solve(string: str) -> str:\n        \"\"\"string l\u00e0 input ch\u1ee9a t\u1ea5t c\u1ea3 c\u00e1c c\u1eb7p index c\u1ee7a ph\u00e2n t\u1ed1i \u0111a.\n        Tr\u1ea3 v\u1ec1 s\u1ed1 c\u1eb7p index c\u1ee7a ph\u00e2n t\u1ed1i \u0111a tr\u00ean m\u1ed9t c\u00e1i string \u0111\u00e3 s\u1eafp x\u1ebfp theo th\u1ee9 t\u1ef1 t\u0103ng d\u1ea7n.\n        \"\"\"\n        count = 0\n        ans = \"\"\n        for i, char in enumerate(string):\n            if char == '1':\n                count += 1\n            else:\n                if count > 0:\n                    ans += f\"{count} \"\n                count = 0\n            if i == len(string) - 1:\n                if count > 0:\n                    ans += f\"{count}\"\n        return ans\n    \n    def main():\n        n = int(stdin.readline())\n        string = stdin.readline().strip()\n        print(solve(string))\n    \n    main()\n\"\"\"\ndef"
    },
    {
        "number": 4428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = [int(x) for x in stdin.split()]\n    dp = [[0, 0, 0] for _ in range(n + 1)]\n    dp[0] = [0, 0, 0]\n    dp[1] = [d[0], 0, 0]\n    for i in range(1, n):\n        for j in range(0, i + 1):\n            dp[i + 1][0] = max(dp[i + 1][0], dp[i][0] + d[i])\n            dp[i + 1][1] = max(dp[i + 1][1], dp[i][0] + d[i])\n            dp[i + 1][2] = max(dp[i + 1][2], dp[i][0] + d[i])\n        dp[i + 1][0] += d[i]\n    return max(dp[n])\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(T * N * log(N))\n    Space complexity: O(N)\n    \"\"\"\n    import heapq\n    heap = []\n    for _ in range(int(stdin.readline())):\n        x, y, z = map(int, stdin.readline().split())\n        heapq.heappush(heap, (-max(x, y, z), x, y, z))\n    while len(heap)!= 0 and len(heap) < 4:\n        x, y, z = heapq.heappop(heap)\n        if x < -1:\n            heapq.heappush(heap, (-x, x, y, z))\n    if len(heap) == 4:\n        return \"YES\\n{}\\n{}\\n{}\\n{}\\n{}\\n\".format(heap[0][1], heap[0][2], heap[0][3], heap[1][1], heap[1][3])\n    return \"NO\\n\"\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"NO\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(x) for x in stdin.split(\" \")]\n    a, b, c = 0, 0, 0\n    if x < y:\n        a = y\n        b = x\n    else:\n        a = x\n        b = y\n    if b < z:\n        b = z\n        if a < b:\n            a = b\n    else:\n        c = z\n    if x == y and y == z:\n        print(\"NO\")\n    else:\n        print(a, b, c)\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for i in range(cases):\n        a, b, c = [int(x) for x in stdin.readline().split(' ')]\n        max1 = max(a, b)\n        max2 = max(a, c)\n        max3 = max(b, c)\n        print(\"YES\" if max1 == max2 == max3 else \"NO\")\n    return ''"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\""
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        if a > max(b, c):\n            print(\"NO\")\n        elif b > max(a, c):\n            print(\"NO\")\n        elif c > max(a, b):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(a, b, c)\n\nsolution(input())\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        x, y, z = map(int, stdin.readline().split())\n        if x == y or x == z or y == z:\n            print('NO')\n        else:\n            print('YES')\n            print(max(x, y), max(x, z), max(y, z))\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        x, y, z = map(int, stdin.readline().split())\n        a = max(x, y)\n        b = max(x, z)\n        c = max(y, z)\n        if a == b:\n            print(\"NO\")\n        elif a == c:\n            print(\"YES\")\n            print(a, b, c)\n        elif b == c:\n            print(\"YES\")\n            print(a, b, c)\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    solutions = list()\n    for i in range(test_cases):\n        x, y, z = [int(i) for i in stdin.split()]\n        solutions.append(max(x, y, z))\n    \n    return solutions\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Solution to the problem \"\"\""
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    obj_arr = [0 for i in range(n)]\n    count = 0\n    for i in range(m):\n        if arr[i] < k:\n            if i == 0:\n                continue\n            obj_arr[i] = arr[i]\n            obj_arr[i - 1] = k - arr[i]\n            count += 1\n        elif arr[i] == k:\n            count += 1\n            continue\n        else:\n            return 'Invalid'\n    if count < n:\n        return 'Invalid'\n    return str(max(obj_arr))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    s.sort()\n    ans = 0\n    cur_s = k\n    cur_m = m\n    for i in s:\n        if i < cur_s:\n            ans += 1\n            cur_s -= i\n            cur_m -= 1\n    return ans\n\"\"\"\n\nimport itertools\nimport random\n\n\ndef"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2 6\n   ... 5 2 1 4 2\n   ... ''')\n    '4'\n    >>> solution('''5 1 4\n   ... 4 2 3 4 1\n   ... ''')\n    '1'\n    \"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    n, m, k = map(int, [n, m, k])\n    a = [int(x) for x in stdin.splitlines()[1].split()]\n    if m * k < max(a):\n        return str(0)\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] >= k:\n            ans += 1\n            a = a[1:]\n            i = 0\n        else:\n            i += 1\n    return str(ans)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    a = [int(i) for i in stdin.split(' ')[1:]]\n    a.sort()\n    res = 0\n    while a:\n        if len(a) <= m:\n            res += len(a)\n            break\n        s = min(a)\n        if k - s < 0:\n            a.sort()\n            continue\n        res += 1\n        k -= s\n        a.remove(s)\n    return str(res)\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    array = list(map(int, stdin.split('\\n')[1].split()))\n    # print(n, m, k, array)\n\n    # maksim = find_maksim(n, k)\n    # return maksim\n\n    return find_maksim_wrapper(n, k, array)\n\n\ndef"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    n, m, k = a[0], a[1], a[2]\n    objects = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    boxes = []\n    for i in range(m):\n        boxes.append(k)\n    count = 0\n    while objects:\n        if boxes:\n            if objects[0] <= boxes[0]:\n                boxes[0] -= objects[0]\n                objects = objects[1:]\n                count += 1\n            else:\n                boxes.pop(0)\n        else:\n            break\n    return str(count)"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    count = 0\n    for i in range(n):\n        left = 0\n        right = k\n        while left < right:\n            if left + a[i] <= right:\n                count += right - left\n                left = right\n            right -= 1\n        if left == k:\n            break\n\n    return str(count)"
    },
    {
        "number": 4430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    objects = list(map(int, stdin.split()))\n    boxes = [k for _ in range(m)]\n    for i in range(n):\n        if objects[i] <= k:\n            j = m - 1\n            while j >= 0 and boxes[j] < objects[i]:\n                j -= 1\n            if j < 0:\n                return str(i + 1)\n            boxes[j] -= objects[i]\n    return str(n)\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split(' ')))"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get a string and return the number of substrings of the string that can be typed using only available letters.\"\"\"\n   ...\n\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2\\nabacaba\\na b\")\n    12\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.split()[1]\n    alphabet = stdin.split()[2:]\n    alphabet = set(alphabet)\n    if k > len(alphabet):\n        return 0\n    if len(alphabet) < k:\n        return 0\n    if n < k:\n        return 0\n    if len(s) < n:\n        return 0\n    ans = 0\n    alphabet = set(alphabet)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if set(s[i:j]) <= alphabet:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ans\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    c = stdin[n:]\n    k = len(set(c))\n    lst = [0] * 26\n    for c1 in c:\n        lst[ord(c1) - 97] += 1\n    for i in range(k):\n        s = s.replace(chr(97 + i), \"\")\n    return n * (n + 1) // 2 - sum(lst)"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = stdin.split('\\n')[1]\n    d = dict(x for x in enumerate(stdin.split('\\n')[2].split(' ')) if x[1] in 'abcdefghijklmnopqrstuvwxyz')\n    d2 = {x[1]:x[0] for x in d.items()}\n    k = sorted(d2.values())\n    c = 0\n    for i in range(0, n):\n        for j in range(i+1, n+1):\n            x = s[k[0]:k[-1]+1]\n            c += len(x)\n    return c\n"
    },
    {
        "number": 4431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('7 1\\n'\n   ...          'aaaaaaa\\n'\n   ...          'b')\n    0\n    >>> solution('7 2\\n'\n   ...          'abacaba\\n'\n   ...          'a b')\n    12\n    >>> solution('10 3\\n'\n   ...         'sadfaasdda\\n'\n   ...          'f a d')\n    21\n    >>> solution('7 1\\n'\n   ...          'aaaaaaa\\n'\n   ...          'b')\n    0\n    >>> solution('7 1\\n'\n   ...          'aaaaaaa\\n'\n   ...          'b')\n    0\n    \"\"\"\n    s, k = stdin.split()\n    k = int(k)\n    l = list(s)\n    n = len(l)\n    d = {}\n    for i in range(26):\n        d[chr(ord('a') + i)] = k\n\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            key = ''.join(l[i:j])\n            if key in d:\n                if key == key[::-1]:\n                    res += 1\n                else:\n                    res += 2\n    return res\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 2 3 -1 -2\n   ... 4\n   ... -1 -2 -1 -3\n   ... 10\n   ... -2 8 3 8 -4 -15 5 -2 -3 1\n   ... 6\n   ... 1 -1000000000 1 -1000000000 1 -1000000000\n   ... ''')\n    '2'\n    >>> solution('''6\n   ... 1 -1000000000 1 -1000000000 1 -1000000000\n   ... 6\n   ... 1 -1000000000 1 -1000000000 1 -1000000000\n   ... 6\n   ... 1 -1000000000 1 -1000000000 1 -1000000000\n   ... ''')\n    '-2999999997'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the longest alternating subsequence in stdin\n    '''\n    #parse input\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    # O(n)\n    \n    # find all subsequences\n    # O(n ^ 2)\n    subs = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            # subsequences\n            subs.append(nums[i:j])\n    \n    # sort by length and sum\n    # O(nlogn + n ^ 2)\n    subs = sorted(subs, key = lambda x: len(x), reverse = True)\n    subs = sorted(subs, key = lambda x: sum(x), reverse = True)\n    \n    # get the longest subsequence\n    # O(n)\n    max = 0\n    for sub in subs:\n        if sum(sub) > max:\n            max = sum(sub)\n            \n    return max\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not yet implemented'\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # max possible degree is (n - 1) * 2\n    # n = 6, m = 5 -> n * 2 - 1 = 8\n    # max possible degree for n = 8, m = 9 is 16\n    # # of edges for n = 8, m = 9 is 20\n    n, m = map(int, stdin.split('\\n')[:2])\n    edges = [map(int, line.split('\\n')[0].split()) for line in stdin.split('\\n')[2:]]\n    # print(edges)\n    # n = 6, m = 5\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1, 2), (2, 3), (3, 5), (4, 3), (1, 5)]\n    # [(1,"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input contains n and m in the first line, then the next m lines each\n    containing two integers, v and u, which are connected by an edge in the graph.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    edge_list = [list(map(int, line.split())) for line in stdin.splitlines()[1:]]\n\n    # build a graph from the edge list\n    graph = {v: set() for v in range(1, n+1)}\n    for v, u in edge_list:\n        graph[v].add(u)\n        graph[u].add(v)\n\n    # find a root\n    root = [v for v in graph if len(graph[v]) == 1]\n    if len(root) == 0:\n        root = [1]\n\n    # find a spanning tree\n    tree = []\n    visited = set()\n    def dfs(v):\n        nonlocal tree, visited\n        if v in visited:\n            return\n        visited.add(v)\n        tree.append(v)\n        for u in graph[v]:\n            dfs(u)\n\n    dfs(root[0])\n\n    # write the output\n    print(len(tree)-1)\n    for v, u in sorted(edge_list):\n        if u in tree and v in tree and u!= v:\n            print(u, v)\n\nSolution().solution(input())\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v].append(u)\n        graph[u].append(v)\n    \n    def dfs(vertex, parent, graph, visited):\n        visited.add(vertex)\n        max_d = 0\n        for v in graph[vertex]:\n            if v!= parent:\n                if v not in visited:\n                    max_d = max(max_d, dfs(v, vertex, graph, visited))\n        return max_d + 1\n    \n    max_d = 0\n    vertex = 1\n    for v in graph[vertex]:\n        if v not in visited:\n            max_d = max(max_d, dfs(v, vertex, graph, visited))\n    print(max_d - 1)\n    return \"\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 1 2\n   ... 2 3\n   ... 3 5\n   ... 4 3\n   ... 1 5\n   ... ''')\n    3 5\n    2 1\n    3 2\n    3 4\n    \"\"\"\n    n, m = map(int, stdin.split())\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        adj[v - 1].append(u - 1)\n        adj[u - 1].append(v - 1)\n\n    ans = set()\n    seen = [False] * n\n    for i in range(n):\n        if seen[i]:\n            continue\n        seen[i] = True\n        for j in adj[i]:\n            seen[j] = True\n        for j in range(i + 1, n):\n            if not seen[j]:\n                ans.add((i + 1, j + 1))\n\n    ans = sorted(ans)\n    return '\\n'.join(' '.join(map(str, p)) for p in ans)\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    edges = []\n    for i in range(m):\n        edges.append([int(x) for x in stdin.split(' ')])\n    edges.sort(key=lambda x: x[0])\n    tree = [[] for i in range(n)]\n    tree[0].append(edges.pop(0)[1])\n    for i in range(n):\n        for edge in edges:\n            if edge[0] == tree[i][0]:\n                tree[i].append(edge[1])\n                edges.remove(edge)\n                break\n            if edge[1] == tree[i][0]:\n                tree[i].append(edge[0])\n                edges.remove(edge)\n                break\n    return '\\n'.join([' '.join([str(i) for i in edge]) for edge in tree])\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = map(int, stdin.split(' '))\nedges = []\nfor _ in range(m):\n    v, u = map(int, stdin.split(' '))\n    edges.append((v, u))\n    edges.append((u, v))\nedges = sorted(edges, key=lambda x: x[0])\nedges_visited = set()\nstack = []\nres = []\nvisited = [False for _ in range(n + 1)]\n\nfor edge in edges:\n    if edge[0] not in edges_visited:\n        stack.append(edge[1])\n        while len(stack) > 0:\n            curr_node = stack.pop()\n            res.append(str(curr_node))\n            visited[curr_node] = True\n            edges_visited.add(curr_node)\n            for next_edge in edges:\n                if next_edge[0] == curr_node and next_edge[1] not in edges_visited:\n                    stack.append(next_edge[1])\nprint(' '.join(res))\n\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(u, used, parent, component):\n        used.add(u)\n        for v in graph[u]:\n            if v == parent:\n                continue\n            if v not in used:\n                dfs(v, used, u, component)\n            component.append(u)\n\n    graph = {}\n    n, m = list(map(int, stdin.split()))\n    for i in range(m):\n        u, v = list(map(int, stdin.split()))\n        if u in graph:\n            graph[u].append(v)\n        else:\n            graph[u] = [v]\n        if v in graph:\n            graph[v].append(u)\n        else:\n            graph[v] = [u]\n\n    used = set()\n    components = []\n    for u in range(1, n + 1):\n        if u not in used:\n            component = []\n            dfs(u, used, None, component)\n            components.append(component)\n    components.sort(key=len, reverse=True)\n    parent = max(components[0])\n    component = []\n    dfs(parent, set(), None, component)\n    component.sort()\n    print(n - 1)\n    for u in component:\n        print(f'{u} {parent}')\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, m = [int(x) for x in lines[0].split(' ')]\n    graph = [[] for _ in range(n)]\n    for line in lines[1:m + 1]:\n        u, v = [int(x) for x in line.split(' ')]\n        graph[u].append(v)\n        graph[v].append(u)\n    return '\\n'.join(sorted(lines[m + 1:]))\n"
    },
    {
        "number": 4433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    \n    return \"\"\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    result = []\n    for _ in range(int(input[0])):\n        size = int(input[_])\n        result.append(size ** 2 - 1)\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n-----Explanation-----\nExample case 1: The first figure is moved to (1, 2) and the rest of the figures are moved in the following order: (1, 3), (2, 1), (2, 2), (2, 3)... (499993, 2) (499993, 3). So, we need to make 40 moves to get all figures to the end.\n\nExample case 2: The first figure is moved to (1, 2) and the rest of the figures are moved in the following order: (1, 3), (2, 1), (2, 2), (2, 3)... (499993, 2) (499993, 3). So, we need to make 41664916690999888 moves to get all figures to the end.\n\"\"\"\nfrom itertools import combinations\n\nimport sys\n\nsys.setrecursionlimit(1500)\nt = int(input())\nresult = []\nfor _ in range(t):\n    n = int(input())\n    res = 0\n    combs = list(combinations(list(range(1, n * n + 1)), n ** 2 - 1))\n    for comb in combs:\n        res += n ** 2 - len(list(set(comb)))\n    result.append(res)\nprint(\"\\n\".join([str(i) for i in result]))\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\\\"\\\"\\\"\n    \\\"\\\"\\\"\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    cases = int(lines[0])\n    boards = [int(lines[i]) for i in range(1, len(lines))]\n\n    for board in boards:\n        if not board & 1:\n            print(0)\n            continue\n        print(solve(board))\n\n\ndef"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n    \n"
    },
    {
        "number": 4434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(range(stdin)))"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return None\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return str(1)"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(lambda x: str(min(abs(int(x[0]) - int(x[1])), abs(int(x[0]) + int(x[1])))), stdin.split('\\n')[1:]))\nprint(solution(input()))"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = [0 for _ in range(n)]\n    d[0] = 1\n    d[n-1] = 2\n    for i in range(n-1):\n        if a[i] % 2 == 0:\n            d[i+1] = d[i] + 1\n        else:\n            d[i+1] = d[i] + 2\n    for i in range(n-2, -1, -1):\n        if a[i] % 2 == 0:\n            if a[i] - 2 >= a[i+1]:\n                d[i] = d[i+1] + 2\n            else:\n                d[i] = min(d[i+1], d[i+a[i]-2] + 2)\n        else:\n            if a[i] - 1 >= a[i+1]:\n                d[i] = d[i+1] + 1\n            else:\n                d[i] = min(d[i+1], d[i+a[i]-1] + 1)\n    print(*d, sep=\" \")\n    return \"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of moves required to reach a position with an opposite parity to a position where the parity is the same as the parity of the current position.\n    \"\"\"\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n\n    odds = []\n    evens = []\n    for i, num in enumerate(arr):\n        if num % 2:\n            odds.append(i)\n        else:\n            evens.append(i)\n\n    # Odd parity\n    dp = [0] * n\n    dp[-1] = 1\n    for i in range(n - 1, -1, -1):\n        for j in odds:\n            if i - arr[j] >= 0:\n                dp[i] = min(dp[i], dp[i - arr[j]])\n\n    # Even parity\n    dp_2 = [0] * n\n    dp_2[0] = 1\n    for i in range(1, n):\n        for j in evens:\n            if i + arr[j] < n:\n                dp_2[i] = min(dp_2[i], dp_2[i + arr[j]])\n\n    # Min of dp and dp_2\n    dp_3 = [0] * n\n    for i in range(1, n):\n        dp_3[i] = min(dp[i], dp_2[i])\n\n    # Print result\n    return''.join([str(i) for i in dp_3])\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve solution\"\"\"\n    # === variables ===\n    # n: int\n    # arr: List[int]\n    # === solve ===\n    # dp[i][j]: int\n    # dp[i][j]: min(dp[i - a[i]][j], dp[i][j - a[i]]) if -1 <= j - a[i] <= n and -1 <= i - a[i] <= n\n    #\n    # dp[i][j] = min(dp[i - a[i]][j], dp[i][j - a[i]])\n    # dp[i][j] = -1 if i - a[i] or j - a[i] is out of range\n    #\n    # === read input ===\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    # === check input ===\n    for i in range(n):\n        if arr[i] % 2!= 0:\n            print(-1)\n            return\n    # === create dp table ===\n    dp = [[-1] * n for _ in range(n)]\n    # === create dp table ===\n    for i in range(n):\n        for j in range(n):\n            if -1 <= j - arr[i] <= n and -1 <= i - arr[i] <= n:\n                dp[i][j] = min(dp[i - arr[i]][j], dp[i][j - arr[i]])\n            else:\n                dp[i][j] = -1\n    # === solve for dp table ===\n    print(*dp[-1][:n], sep=\" \")\n    # === output ===\n    return"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n    ... 4 5 7 6 7 5 4 4 6 4''')\n    1 1 1 2 -1 1 1 3 1 1\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    moves = [0] * n\n    if n == 1:\n        print(0)\n        return\n    for i in range(1, n):\n        moves[i] = a[i]\n    for i in range(1, n):\n        for j in range(1, n):\n            if (i - j) % 2 == 1 and j >= a[i]:\n                moves[i] = min(moves[i], moves[i - j] + 1)\n            elif (i - j) % 2 == 0 and a[i] > j:\n                moves[i] = min(moves[i], moves[i - j] + 1)\n    print(*moves)"
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10\\n4 5 7 6 7 5 4 4 6 4\")\n    '1 1 1 2 -1 1 1 3 1 1'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    res = []\n    for i in range(n):\n        res.append(get_min(i, a, n))\n    return \" \".join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    for a in range(2, int(count ** 0.5) + 1):\n        if count % a == 0:\n            b = count // a\n            c = b // a\n            if a * b * c == count and a >= 2 and b >= 2 and c >= 2:\n                return 'YES\\n{0} {1} {2}'.format(a, b, c)\n    return 'NO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if n % 2 == 0:\n            print('YES')\n            print(n // 2, 2, n // 2)\n        else:\n            print('NO')"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n\n    return \"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def check(a, b, c):\n        if (a < 2) or (b < 2) or (c < 2):\n            return False\n        if (a * b * c)!= stdin:\n            return False\n        return True\n\n    result = 'YES'\n    for i in range(int(stdin)):\n        n = int(stdin)\n        ans = []\n        for a in range(2, n):\n            for b in range(2, n):\n                for c in range(2, n):\n                    if check(a, b, c):\n                        ans.append([a, b, c])\n        if ans == []:\n            result = 'NO'\n        else:\n            for i in ans:\n                result =''.join(map(str, i))\n    return result\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    ans = []\n    if n < 2:\n        return 'NO'\n    if n % 2!= 0:\n        return 'NO'\n    for a in range(2, n // 2 + 1):\n        for b in range(2, n // a + 1):\n            if n == a * b:\n                ans = [a, b, n // a // b]\n                return 'YES'+''.join(str(i) for i in ans)\n    return 'NO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def divisors(n):\n        divs = set()\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                divs.add(i)\n                divs.add(n//i)\n        return divs\n\n    for _ in range(int(stdin.split('\\n')[0])):\n        n = int(stdin.split('\\n')[1])\n        d = divisors(n)\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                for j in range(2, int(n**0.5)+1):\n                    if i * j == n:\n                        print(i, j, n//(i*j))\n                        break\n        else:\n            print('NO')\n\n    return ''\n"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n = int(stdin.readline())\n        a = b = c = 0\n        while not n == a * b * c:\n            a += 1\n            if n % a == 0:\n                b = n // a\n                if not n == a * b * c:\n                    c = n // (a * b)\n                if n == a * b * c:\n                    break\n        if n == a * b * c:\n            print(\"YES\")\n            print(a, b, c)\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    return \"YES\" if stdin == \"12345\" or any(math.gcd(int(x), int(x + y)) for x in stdin for y in stdin) else \"NO\"\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().rstrip())\n    s = stdin.readline().rstrip()\n    count = 0\n    for i in range(n):\n        if s[i] == 'b':\n            count += 1\n    for i in range(count):\n        s = s.replace('b', 'a', 1)\n    for i in range(count):\n        s = s.replace('a', 'b', 1)\n    print(count)\n    print(s)\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the given problem.\n    :param stdin: str\n    :return: str\n    \"\"\"\n    # read input\n    input = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    string = stdin.split('\\n')[1]\n    # declare variables\n    ans = 0\n    # iterate through the string\n    for i in range(len(string)):\n        # check if it's an even length\n        if i % 2 == 0:\n            # if it is\n            # count the number of a's and b's\n            if string[i] == 'b':\n                ans += 1\n            if string[i] == 'a':\n                ans -= 1\n        # if it's not an even length\n        else:\n            # if the next one is an even length\n            if i % 2 == 0:\n                if string[i] == 'a':\n                    ans += 1\n                if string[i] == 'b':\n                    ans -= 1\n    # return the answer\n    return ans\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lenght = int(stdin.split()[0])\n    string = stdin.split()[1]\n    a_counter = 0\n    b_counter = 0\n    for i in range(1, lenght + 1):\n        if string[:i].count(\"a\") == string[:i].count(\"b\"):\n            a_counter += 1\n        else:\n            b_counter += 1\n    return str(a_counter) + \" \" + string\n\n\n\ndef"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    A, B, C = 'a', 'b', 'c'\n    Q = deque()\n    res = 0\n    for i in range(N):\n        s = S[i]\n        if s == A:\n            Q.append(A)\n            res += 1\n        elif s == B:\n            if Q and Q[-1] == A:\n                Q.pop()\n                res += 1\n            else:\n                Q.append(B)\n                res += 1\n        else:\n            Q.append(B)\n            res += 1\n    Q.appendleft(A)\n    for i in range(N + 1):\n        if Q[i] == A:\n            res += 1\n        else:\n            break\n    return res\n\n\n\ndef"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    get data\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n\n    \"\"\"\n    initialize the variables\n    \"\"\"\n    s_b = 0\n    s_a = 0\n    ans = 0\n\n    \"\"\"\n    Loop\n    \"\"\"\n    for i in range(1, n + 1):\n        if s[:i][i - 1] == \"b\":\n            s_b += 1\n        else:\n            s_a += 1\n\n        if s_b!= s_a:\n            ans += 1\n\n    return ans\n"
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    counta = 0\n    countb = 0\n    a = 0\n    b = 0\n    for i in range(n):\n        if s[i] == \"a\":\n            a += 1\n        else:\n            b += 1\n    for i in range(n):\n        if s[i] == \"a\":\n            counta += 1\n        else:\n            countb += 1\n        if counta == countb:\n            break\n    s = s[0:i + 1]\n    return s\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the minimum distance'''\n    pass\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Please, do not change anything below\n    a = [int(x) for x in stdin.split()]\n    n = a[0]\n    a = a[1:]\n    a.sort()\n    ans = []\n    for x, y in zip(a[:-1], a[1:]):\n        ans.append(abs(x - y) + 1)\n    return str(sum(ans))"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    'Find the minimum distance.'\n   ...\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return distance"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return ''\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    p = []\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        p.append((x, y))\n    p = sorted(p, key=lambda x: x[0])\n    p = sorted(p, key=lambda x: x[1])\n    m = 0\n    # m = [0]\n    for i in range(n):\n        if m < p[i][0]:\n            m = p[i][0]\n        if m < p[i][1]:\n            m = p[i][1]\n    print(m * 2)\n    '''\n    n = int(input())\n    d = [1]\n    p = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        p.append((x, y))\n    p = sorted(p, key=lambda x: x[0])\n    p = sorted(p, key=lambda x: x[1])\n    m = 0\n    for i in range(n):\n        if p[i][0] > m:\n            m = p[i][0]\n        if p[i][1] > m:\n            m = p[i][1]\n    print(m * 2)\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the challenge:\n    >>> solution(\"4\\n1 1\\n1 0\\n2 0\\n3 2\\n3 4\")\n    '12'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    if A == 1 and B == 2 or A == 2 and B == 3 or A == 3 and B == 1:\n        return 2\n    else:\n        return 1\nprint(solution(stdin))"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  input = stdin.split('\\n')\n\n  a = int(input[0])\n  b = int(input[1])\n\n  if b == a:\n    print(a)\n  elif b == 2 and a == 1:\n    print(b)\n  elif b == 2 and a == 3:\n    print(a)\n  elif b == 1 and a == 3:\n    print(b)\n  else:\n    print(a)\n\n  return\n\ndef"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split('\\n')[0])\n    B = int(stdin.split('\\n')[1])\n    if A + B == 3:\n        print(A)\n    else:\n        print(B)"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    A\n    B\n    Output:\n    Correct choice\n    '''\n    a, b = [int(x) for x in stdin.split()]\n    if a == 3:\n        return '2'\n    elif b == 1:\n        return '2'\n    return '1'"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '1':\n        return '2'\n    elif stdin == '2':\n        return '3'\n    else:\n        return '1'"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the correct choice.\"\"\"\n    a, b = map(int, stdin.split())\n    if a == 1 or b == 1 or a == b:\n        return \"IMPOSSIBLE\"\n    if a == 2 and b == 3:\n        return \"2\"\n    if a == 3 and b == 1:\n        return \"2\"\n    if a == 1 and b == 2:\n        return \"2\"\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\"\\n\"))\n    if a == 1:\n        print(2)\n    elif b == 2:\n        print(1)\n    else:\n        print(3)\n"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    if a == b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 4439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split('\\n')[0])\n    B = int(stdin.split('\\n')[1])\n    if A == 1:\n        if B == 2:\n            return 2\n        if B == 3:\n            return 3\n    if A == 2:\n        if B == 1:\n            return 2\n        if B == 3:\n            return 3\n    if A == 3:\n        if B == 1:\n            return 2\n        if B == 2:\n            return 1\n    return None\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, L = map(float, stdin.split('\\n'))\n    return str(round(L**3, 6))\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  \n  L = int(stdin.readline().strip())\n  print(L)\n  \n  return None"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    res = 0\n    while l > 0:\n        res += l\n        l = int(stdin.readline())\n\n    return str(res)\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(x) for x in stdin.split()]\n    return str(max((l[0] + l[1] - 1) * (l[0] + l[2] - 1) * (l[1] + l[2] - 1), (l[0] + l[1] - 1) * l[2]))\n"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #stdin = stdin.strip()\n    L = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    x = min(L)\n    y = max(L)\n    while x<=y:\n        x+=1\n        if x*x*x == sum(L):\n            return \"{:.6f}\".format(x*x*x)\n    return \"{:.6f}\".format(0)"
    },
    {
        "number": 4440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        print(\"Hello World\")\n    else:\n        print(int(stdin[2]) + int(stdin[4]))\n    return ''"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        print('Hello World')\n    elif N == 2:\n        A, B = map(int, stdin.split())\n        print(A + B)\n\n    return \"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(\"Hello World\" if N == 1 else stdin)\n    return \"\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nN=int(stdin)"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"1\":\n        print(\"Hello World\")\n        return\n    if stdin == \"2\":\n        print(int(input()) + int(input()))\n        return\n    return \"Error\""
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1')\n    'Hello World'\n    >>> solution('2')\n    '3'\n    \"\"\"\n    pass\n\n\"\"\"\nsolution('1')\nsolution('2')\n\"\"\"\n\nimport sys\n\nclass Error(Exception):\n    pass\n\nclass InputTooLongError(Error):\n    def __init__(self, length, max_length):\n        self.length = length\n        self.max_length = max_length\n\ndef"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        print(\"Hello World\")\n    else:\n        A, B = map(int, stdin.split())\n        print(A+B)"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"Hello World\\n\"\n    else:\n        A, B = stdin.split()\n        return f\"{int(A)+int(B)}\\n\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"Hello World\"\n    if a == 2:\n        a,b = input().split(\" \")\n        return str(int(a) + int(b))"
    },
    {
        "number": 4441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # A = stdin[1]\n    # B = stdin[2]\n    if stdin[0] == '1':\n        print(\"Hello World\")\n    else:\n        A = int(stdin[1])\n        B = int(stdin[2])\n        print(A + B)"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a * b)\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a * b)\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    \n    if a < b:\n        print(a * b)\n    elif a > b:\n        print(b * a)\n    else:\n        print(a)"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    if a > b:\n        return \"4444\"\n    return \"3333\"\n\"\"\"\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    a_b = str(a * b)\n    b_a = str(b * a)\n    if a_b < b_a:\n        return a_b\n    elif a_b > b_a:\n        return b_a\n    else:\n        return a_b\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(str(b) * a)) if a > b else str(int(str(a) * b))"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a > b:\n        print(a)\n    elif a < b:\n        print(b)\n    else:\n        print(a)"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n\n    return str(int(b * '9' + a * '0'))\n"
    },
    {
        "number": 4442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    print(a * b)\n    return stdin"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    stdin = list(stdin)\n    stdin.sort()\n    stdin = \"\".join(stdin)\n    for i in range(len(stdin)):\n        if stdin[i] == \"a\":\n            stdin[i] = \"b\"\n            break\n    stdin = \"\".join(stdin)\n    return stdin\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = a.replace(\"z\", \"a\")\n    a = a.replace(\"c\", \"b\")\n    a = a.replace(\"b\", \"c\")\n    a = a.replace(\"a\", \"b\")\n    print(a)\n\nsolution(stdin)"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    return alphabet[alphabet.index(stdin) + 1]"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n        a\n    Output:\n        b\n    '''\n    return chr(ord(stdin[0]) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the character that follows C in alphabetical order.\"\"\"\n    return chr(ord(stdin[0]) + 1)"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return chr(ord(stdin) + 1)\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    letters = stdin.lower()\n    for i in range(0, len(letters)):\n        if letters[i] == 'c':\n            return chr(ord(letters[i+1])-32)\n    \nsolution(input())\n"
    },
    {
        "number": 4443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    x = alphabet.index(stdin)\n    print(alphabet[x + 1])\n    return \"a\"\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return S + T\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, s = stdin.split(' ')\n    return t + s\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(' ')\n    return ''.join(T + S)\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t+s\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    T = stdin[1]\n    return S + T\n'''"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the concatenation of two strings.\"\"\"\n    str1, str2 = stdin.strip().split('\\n')\n    return str1 + str2\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    return t + s\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1]\nprint(solution(stdin))\n"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:len(stdin) // 2] + stdin[len(stdin) // 2:]\n    \ndef"
    },
    {
        "number": 4444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\".join(stdin.split()[::-1])\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\"\\n\")[0].split()))\n    N = a[0]\n    a = a[1:]\n    count = 0\n    for i in range(N):\n        if i%2 == 0:\n            if a[i]%2 == 1:\n                count += a[i]\n                a[i] = 0\n    return count\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    n_arr = []\n    for i in range(n):\n        if arr[i] % 2 == 0:\n            n_arr.append(arr[i])\n    sum = 0\n    for i in range(len(n_arr)):\n        sum += n_arr[i]\n    return sum"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            p = p + a[i]\n        else:\n            if i % 2 == 0:\n                p = p + a[i]\n            else:\n                pass\n    return p\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    ans = 0\n    \n    for i in range(n):\n        if a[i] % 2 == 0:\n            ans += a[i]\n    \n    return ans\n\nprint(solution(input()))"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().split()]\n    even = []\n    odd = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            even.append(a[i])\n        else:\n            odd.append(a[i])\n    if len(even) == 0:\n        return 0\n    if len(odd) == 0:\n        return 0\n    sum = 0\n    for j in range(len(even)):\n        sum += even[j]\n    for k in range(len(odd)):\n        if sum % 2!= odd[k] % 2:\n            sum += odd[k]\n        else:\n            sum -= odd[k]\n    return sum\n    # pass"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    a = list(map(int, stdin.readline().split()))\n    parity = -1\n    count = 0\n    for i in range(len(a)):\n        if parity!= int(a[i] % 2):\n            parity = int(a[i] % 2)\n            a.pop(i)\n            count += 1\n    return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def func(stdin):\n        n = int(stdin[0])\n        a = list(map(int, stdin[1].split()))\n        result = 0\n        for i in range(n):\n            if a[i] % 2 == 0:\n                result -= a[i]\n            else:\n                result += a[i]\n        return result\n    return str(func(stdin))"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split(' ')]\n    hp = [int(x) for x in stdin.split(' ')[1:]]\n    k = min(k, n)\n    hp[:k] = [max(0, h - b) for h in hp[:k]]\n    hp[k:] = [max(0, h - a) for h in hp[k:]]\n    print(sum(hp))"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    h = [int(x) for x in stdin.split('\\n')[1].split()]\n    return 0"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    \n    monsters = [int(x) for x in stdin.split('\\n')[1].split()]\n    max_points = 0\n    for i in range(n):\n        points = 0\n        if i < k:\n            points += b\n        if i > k:\n            points += a\n        for j in range(i, n):\n            if i == 0:\n                points += b\n                break\n            points += monsters[j]\n            if monsters[j] <= 0:\n                break\n        if points > max_points:\n            max_points = points\n    print(max_points)\n    return max_points\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    k = min(k, a)\n    x = a - k * b\n    ans = 0\n    j = 0\n    for i in range(n):\n        j += k\n        while j < n and h[j] <= x:\n            j += 1\n        if j == n:\n            break\n        if h[i] <= x:\n            ans += 1\n        h[j] -= x\n    return ans\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(n)\n    space complexity: O(1)\n    '''\n    n, a, b, k = [int(val) for val in stdin.split(' ')]\n    arr = [int(val) for val in stdin.split('\\n')[1].split(' ')]\n    result = 0\n    index = 0\n    while index < len(arr) - 1 and k > 0:\n        k -= 1\n        if arr[index] > arr[index + 1]:\n            arr[index] -= a\n            arr[index + 1] -= b\n            if arr[index] > 0:\n                result += 1\n            if arr[index + 1] > 0:\n                result += 1\n            index += 1\n        index += 1\n\n    return str(result)\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()[1:]))\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1] = max(dp[i-1][1], dp[i-1][0]+h[i-1])\n    for j in range(2, k+1):\n        dp[1][j] = max(dp[0][j], dp[1][j-1]+h[0])\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            if j-1>=0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1]+h[i-1])\n            dp[i][j] = max(dp[i][j], dp[i-1][j]+h[i-1])\n    return dp[n][k]\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(input()))\n    str\n    \"\"\"\n    n, a, b, k = map(int, stdin.split('\\n')[0].split())\n    monsters_hp = list(map(int, stdin.split('\\n')[1].split()))\n\n    def get_hp(monsters_hp: list) -> int:\n        return sum(monsters_hp)\n\n    def count_turn(a, b, k) -> int:\n        return k // (a + b)\n\n    def get_max_points(a, b, k) -> int:\n        \"\"\"\n        >>> solution('6 2 3 3\\n7 10 50 12 1 8\\n')\n        5\n        \"\"\"\n        max_turns = count_turn(a, b, k)\n        max_points = 0\n        hp = 0\n        for i in range(1, len(monsters_hp) + 1):\n            hp = get_hp(monsters_hp[:i])\n            while hp > 0:\n                max_points += 1\n                hp -= a\n                if hp > 0:\n                    hp -= b\n        return max_points + max_turns\n\n    return str(get_max_points(a, b, k))\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, a, b, k = map(int, stdin.split(' '))\n    h = list(map(int, stdin.split(' ')))\n\n    monster = n\n    while monster:\n        for _ in range(k):\n            monster -= 1\n            if monster == 0:\n                break\n            if h[monster - 1] <= 0:\n                continue\n            h[monster - 1] -= b\n            if h[monster - 1] <= 0:\n                continue\n            h[monster - 1] -= a\n            if h[monster - 1] <= 0:\n                monster += 1\n                continue\n        monster -= 1\n        if monster == 0:\n            break\n    return len(h) - monster\n"
    },
    {
        "number": 4446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n    return \"\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for _ in range(m - 1):\n        b = [0] * n\n        for i in range(n):\n            b[(i + a[i]) % n] += 1\n        a = b\n    print(\" \".join(str(x) for x in a))\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    dp = [0] * m\n    dp[0] = n // m\n\n    for i in range(1, m):\n        cur = arr[i - 1] % m\n        dp[cur] = dp[cur] + 1\n\n    res = [str(dp[i]) for i in range(m)]\n\n    return''.join(res)\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    a = [int(x) for x in stdin.strip().split()]\n    moves = 0\n    \n    for i in range(n):\n        rem = i % m\n        moves += a[i] - rem - 1\n        a[i] = rem + 1\n        \n    return str(moves)\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n    cnt = [0 for _ in range(m)]\n    for a in arr:\n        cnt[a % m] += 1\n    ans = 0\n    for i in range(m):\n        ans += m * (cnt[i] // n)\n    for i in range(m):\n        ans += min(cnt[i], n // m * (m - i))\n    print(ans)\n    print(*arr[:ans])\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    remainder = {}\n    for i in range(n):\n        remainder[arr[i] % m] = remainder.get(arr[i] % m, 0) + 1\n    for i in range(m):\n        if i not in remainder:\n            arr[i] += (m - 1)\n    remainder = {}\n    for i in range(n):\n        remainder[arr[i] % m] = remainder.get(arr[i] % m, 0) + 1\n    ans = []\n    for i in range(m):\n        if i not in remainder:\n            ans.append(i)\n            ans.append(0)\n        else:\n            ans.append(i)\n            ans.append(remainder[i])\n    return ans\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    c = 0\n    for i in range(1, m):\n        c = c + a.count(i)\n    result = a.copy()\n    print(c)\n    for i in range(0, m):\n        index = a.index(i)\n        if index == 0:\n            result[index] = c\n        else:\n            result[index] = a[index-1]\n    print(*result)\n    return ''"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1:]]\n    a.sort()\n    count = 0\n    curr = n//m\n    for i in range(n):\n        if a[i] < curr:\n            count += curr - a[i]\n            a[i] = curr\n    return''.join([str(x) for x in a])"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    num = n // m\n    remainders = [0] * m\n    for i in range(n):\n        remainders[i % m] += 1\n    tot = 0\n    for i in range(m):\n        tot += num * remainders[i]\n    ans = []\n    while tot:\n        ans.append(arr[-1])\n        tot -= arr[-1]\n        arr.pop()\n        arr.sort()\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n0 1 2 3\\n\")\n    3\n    >>> solution(\"6 3\\n3 2 0 6 10 12\\n\")\n    3\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = [0] * m\n    for i in range(n):\n        c[a[i] % m] += 1\n    res = n // m\n    ans = 0\n    for i in range(m):\n        ans += (c[i] - res) * i\n    print(ans)\n    print(*[i * res for i in a])\n"
    },
    {
        "number": 4447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin:\n    :return:\n    '''\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    res = []\n    for i in range(n):\n        if i % m == 0:\n            res.append(i + 1)\n        else:\n            res.append(i + 1)\n            res.append(i + 2)\n    print(len(res))\n    print(' '.join(map(str, res)))\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = map(int, stdin.readline().split())\n    k = [0] + list(k)\n    d = {}\n    for i in range(m):\n        d[int(stdin.readline())] = 1\n    ans = 1\n    for i in range(1, n + 1):\n        if k[i] > i:\n            return ans\n        if k[i] > i + 1:\n            k[i] = i + 1\n        if i in d:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 6 3\n   ... 1 5\n   ... 3 2\n   ... 1 4\n   ... 2 4\n   ... 5 2\n   ... ''')\n    20\n    \"\"\"\n   ..."
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    b = [2 * n] * n\n    for i in range(m):\n        d, t = map(int, stdin.readline().split())\n        b[t - 1] = d\n\n    p = [0] * n\n    for i in range(n):\n        p[i] = 1\n        for j in range(i):\n            if k[i] > k[j] and p[i] < p[j] + b[j] // 2:\n                p[i] = p[j] + b[j] // 2\n\n    return p[-1]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    k = list(map(int, stdin.readline().split()))\n    dp = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if k[i - 1]!= 0:\n                dp[i][j] = min(dp[i - 1][j] + k[i - 1], dp[i - 1][j - 1] + k[i - 1])\n            else:\n                dp[i][j] = dp[i - 1][j - 1]\n    return dp[-1][-1]\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.readline().split()]\n    k = [int(n) for n in stdin.readline().split()]\n    special = [[int(n) for n in stdin.readline().split()] for i in range(m)]\n    n, m = len(k), len(special)\n    arr = [i for i in range(1, n+1)]\n    stdout.write(str(arr[0]))\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem.\"\"\"\n    n, m = list(map(int, stdin.split('\\n')[0].split()))\n    k = list(map(int, stdin.split('\\n')[1].split()))\n    d = [0] * m\n    for i in range(m):\n        d[i] = list(map(int, stdin.split('\\n')[i + 2].split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = int(k[i])\n    return max(multiply_int(d[i][0], i + 1) for i in range(m)) + sum(k[j] * c[j] for j in range(n))\n\n\ndef"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) / O(n^2)\"\"\"\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    s = []\n    for _ in range(m):\n        d, t = map(int, stdin.split())\n        s.append((d, t))\n    s.sort()\n\n    money = [0] * n\n    # money[i] - \u0432\u043a\u043b\u0430\u0434 \u0432 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0439 \u0442\u0438\u043f \u0432 \u043f\u0440\u043e\u043c\u043e\u043a\u043e\u0434\u0435.\n    for i in range(n):\n        money[i] += k[i]\n        money[i] += 2 * (money[i] // 2)\n    # money[i] - \u0442\u0440\u0435\u0431\u0443\u0435\u043c\u0430\u044f \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\u0446\u0438\u044f \u0442\u0438\u043f\u043e\u0432.\n    # \u0442.\u0435. \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u0434\u0435\u043d\u044c.\n    spend = 0\n    for _, t in s:\n        spend += k[t - 1]\n    for i in range(n):\n        if spend < money[i]:\n            return i + 1\n        spend -= k[i]\n    return n + 1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    k = list(map(int, stdin.split('\\n')[1].split()))\n    d = []\n    for i in range(m):\n        d.append(list(map(int, stdin.split('\\n')[i + 2].split())))\n\n    \n    return 'The minimum day when he can order all microtransactions he wants and actually start playing is {}'.format(1)\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... 5\n   ... 1 1 10 10\n   ... 2\n   ... 10 5 2 10 1 1 2 5\n   ... 2\n   ... 10 5 1 10 5 1 1 1\n   ... 2\n   ... 1 1 1 1 1 1 1 1\n   ... 1\n   ... 10000 10000 10000 10000\n   ... \"\"\")\n    YES\n    YES\n    NO\n    YES\n    YES\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    k = sum(a) / 4\n    if a[0] == a[1] and a[0] == a[2] and a[0] == a[3]:\n        if b[0] == b[1] and b[0] == b[2] and b[0] == b[3]:\n            if k == b[0]:\n                return \"YES\"\n            return \"NO\"\n    for i in range(1, n):\n        if a[0] == a[i] and b[0] == b[i]:\n            if a[0] == b[0] and a[i] == b[i]:\n                if k == b[0]:\n                    return \"YES\"\n                return \"NO\"\n        if a[0] == b[i] and b[0] == a[i]:\n            if k == a[0]:\n                return \"YES\"\n            return \"NO\"\n        if a[i] == b[0] and b[i] == a[0]:\n            if k == a[i]:\n                return \"YES\"\n            return \"NO\"\n        if a[i] == b[i] and k == a[i]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    arr = [0] * (4 * n)\n\n    arr[0] = a[0]\n    arr[1] = a[1]\n    arr[2] = a[2]\n    arr[3] = a[3]\n    for i in range(4, 4 * n):\n        arr[i] = a[i - 4] + arr[i - 4]\n\n    for _ in range(q):\n        n = int(stdin.readline())\n        if n == 1:\n            if arr[0] == arr[1] == arr[2] == arr[3]:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if n == 2:\n                if arr[0] == arr[1] == arr[2]:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n            else:\n                for j in range(4 * n):\n                    if arr[j] == arr[j + 1]:\n                        arr[j] += arr[j]\n                if arr[0] == arr[1] == arr[2] == arr[3]:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        sticks = [int(i) for i in stdin.readline().split()]\n        area = 0\n        for j in sticks:\n            area += j**2\n        if area % n == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if it is possible to create exactly n rectangles\n    of equal area, else return 'NO'.\"\"\"\n    q = int(stdin)\n    for _ in range(q):\n        n = int(stdin)\n        s = sorted(list(map(int, stdin.split())))\n        if not len(set(s)) == 4 * n:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # create a dict of all combos of sticks that will work\n    # create a dict of all combos of sticks that will not work\n    # for each query:\n    # check if it's possible to add the sticks together to make exactly 4n,\n    # if so, return YES\n    # if not, return NO\n    # return None (for case if not enough sticks)\n    pass\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"YES\"\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to determine the solution\"\"\"\n    num_queries = int(stdin.readline())\n    for _ in range(num_queries):\n        num_rects = int(stdin.readline())\n        rect_lengths = list(map(int, stdin.readline().split()))\n        rect_len_sum = sum(rect_lengths)\n        rect_len_sqr = (rect_len_sum)**2\n        if rect_len_sqr % num_rects == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\\\n6 10 5\n2 5 1\n5 3 9\n6 2 2\n1 3 1\n5 1 8\n6 5 10\n1 6 5\n6 4 6\n3 6 2\n3 4 5''')\n    '3'\n    \"\"\"\n    from sys import stdin\n    from heapq import heappop, heappush, heapify\n\n    def bfs(s, e):\n        q = [(0, s)]\n        visited = [False] * n\n        visited[s] = True\n        while q:\n            _, cur = heappop(q)\n            if cur == e:\n                return distances[e]\n            for nxt, dist in graph[cur]:\n                if not visited[nxt]:\n                    heappush(q, (dist + distances[cur], nxt))\n                    visited[nxt] = True\n\n    n, m, k = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b, w = map(int, stdin.readline().split())\n        graph[a - 1].append((b - 1, w))\n        graph[b - 1].append((a - 1, w))\n    distances = [float('inf')] * n\n    heap = [(0, 0)]\n    heapify(heap)\n    distances[0] = 0\n    for _ in range(k):\n        d, u = heappop(heap)\n        if distances[u] < d:\n            continue\n        for nxt, d2 in graph[u]:\n            if distances[nxt] > d + d2:\n                distances[nxt] = d + d2\n                heappush(heap, (d + d2, nxt))\n    return distances[-1]\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, m, k = map(int, stdin.split())\n    matrix = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        matrix[a - 1].append([b - 1, c])\n        matrix[b - 1].append([a - 1, c])\n\n    # Populate distances\n    distances = [[float(\"inf\") for _ in range(n)] for _ in range(n)]\n    for _ in range(n):\n        distances[_][_] = 0\n\n    # Run dijkstra\n    for i in range(n):\n        nodes = [(i, 0)]\n        while len(nodes):\n            node, distance = nodes.pop(0)\n            for j, d in matrix[node]:\n                if distances[node][j] == float(\"inf\"):\n                    distances[node][j] = distance + d\n                    nodes.append((j, distance + d))\n\n    # Return kth shortest distance\n    distances.sort(key=lambda x: x[k - 1])\n    return distances[k - 1][-1]\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    graph = {'{}'.format(i): [] for i in range(n)}\n    # \u0412 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0433\u0440\u0430\u0444\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n    for i in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        graph['{}'.format(x)].append([y, w])\n        graph['{}'.format(y)].append([x, w])\n    return ''\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # graph = stdin.split('\\n')\n    # graph = [line.split() for line in graph]\n    # graph = [list(map(int, line)) for line in graph]\n    graph = [line.split() for line in stdin.split('\\n')]\n    graph = [[int(i) for i in line] for line in graph]\n    n, m, k = graph[0]\n    edges = graph[1:]\n    graph = defaultdict(list)\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    def dijkstra(graph, start):\n        distances = {vertex: math.inf for vertex in graph}\n        distances[start] = 0\n        queue = [(0, start)]\n        while queue:\n            current_distance, current_vertex = heappop(queue)\n            if current_distance > distances[current_vertex]:\n                continue\n            for neighbor, weight in graph[current_vertex]:\n                if current_distance + weight < distances[neighbor]:\n                    distances[neighbor] = current_distance + weight\n                    heappush(queue, (distances[neighbor], neighbor))\n        return distances\n\n    # print(graph)\n    # print(dijkstra(graph, 1))\n    # print(dijkstra(graph, n))\n    # print(dijkstra(graph, n) - dijkstra(graph, 1))\n    all_dists = []\n    for i in range(1, n+1):\n        # print(dijkstra(graph, i))\n        # print(dijkstra(graph, i) - dijkstra(graph, 1))\n        all_dists.append(dijkstra(graph, i) - dijkstra(graph, 1))\n    # print(all_dists)\n    # print(all_dists[0])\n\n    # print(all_dists[1][1])\n    # print(all_dists[2][1])\n    # print(all_dists[3][1])\n    # print(all_dists[4][1])\n    # print(all_dists[5][1])\n    # print(all_dists[6][1])\n\n    # for dist in all_dists:\n    #     print(dist[1])\n    # print(all_dists[0][1])\n    # print(all_dists[1][1])\n    # print(all_dists[2][1])\n    # print(all_dists[3][1])\n    # print(all_dists[4][1])\n    # print(all_dists[5][1])\n    # print(all_dists[6][1])\n\n    k_dist = all_dists[k-1]\n    k_dist = [(dist, vertex) for vertex, dist in k_dist.items()]\n    k_dist = sorted(k_dist)\n    # print(k_dist)\n    # print(k_dist[0])\n    # print(k_dist[1])\n    # print(k_dist[2])\n    # print(k_dist[3])\n    # print(k_dist[4])\n    # print(k_dist[5])\n    return k_dist[0][1]\n"
    },
    {
        "number": 4450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    n, m, k = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        edges.append(tuple([int(x) for x in stdin.split()]))\n    # sort the edges by weights\n    edges.sort(key=lambda edge: edge[2])\n    # set of vertices\n    v = set()\n    for edge in edges:\n        if edge[0] in v and edge[1] in v:\n            continue\n        v.add(edge[0])\n        v.add(edge[1])\n    # get the graph\n    g = {}\n    for edge in edges:\n        if edge[0] in g:\n            g[edge[0]].append((edge[1], edge[2]))\n        else:\n            g[edge[0]] = [(edge[1], edge[2])]\n        if edge[1] in g:\n            g[edge[1]].append((edge[0], edge[2]))\n        else:\n            g[edge[1]] = [(edge[0], edge[2])]\n    # calculate shortest paths\n    sorted_paths = []\n    for vertex in v:\n        if vertex not in g:\n            sorted_paths.append(-1)\n            continue\n        # initialize distances\n        distances = {vertex: 0}\n        # initialize queue\n        queue = deque([vertex])\n        # BFS\n        while queue:\n            current = queue.popleft()\n            for neighbor in g[current]:\n                if neighbor[0] in distances:\n                    continue\n                distances[neighbor[0]] = distances[current] + neighbor[1]\n                queue.append(neighbor[0])\n        # get the k-th shortest path\n        sorted_paths.append(sorted(distances.items(), key=lambda item: item[1])[k][1])\n    # return the answer\n    return''.join([str(x) for x in sorted_paths])\n    \n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    skills = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    skills.sort()\n    \n    # Initialize\n    diversity = 0\n    count = 0\n    \n    # Iterate\n    for i in range(n - 2):\n        diversity += skills[i + 2] - skills[i]\n        count += 1\n    \n    # Return\n    return str(diversity) + \" \" + str(count) + \"\\n\" + \" \".join([str(x) for x in range(count)])\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    skills = [int(i) for i in stdin.readline().split()]\n    skills.sort()\n    d = 0\n    for i in range(n):\n        d += skills[i] - skills[0]\n    print(d)\n    for i in range(n):\n        print(1 + i//3)\n\n\n\ndef"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    a.sort()\n    res, k = 0, 0\n    while a:\n        if len(a) < 3:\n            break\n        res += a[-1] - a[0]\n        a.pop(0)\n        a.pop()\n        k += 1\n    print(res, k)\n    return''.join(map(str, a))\n\n\ndef"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    d, mx = 0, 0\n    t = [0] * n\n    for i in range(n):\n        mx = max(mx, a[i])\n        d += mx - a[i]\n        t[i] = d // 3\n    for i in range(n):\n        t[i] = t[i] - i\n    mx = max(t)\n    t.sort(reverse=True)\n    return str(d) +'' +''.join(list(map(str, t)))"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    res = 0\n    k = 0\n    m = max(a)\n    while m > 0:\n        m //= 3\n        k += m\n    for i in range(n):\n        for j in range(i + 1, n):\n            for m in range(j + 1, n):\n                res += max(a[i], a[j], a[m]) - min(a[i], a[j], a[m])\n    return str(res) +'' + str(k)\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    diversity = 0\n    count = 0\n    for i in range(n - 2):\n        diversity += a[i + 2] - a[i]\n        count += 1\n    return f\"{diversity} {count}\\n{' '.join(map(str, range(1, count + 1)))}\"\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n < 3:\n        return str(n) +'' + str(1)\n    nums = [0] * (10**6 + 1)\n    for i in a:\n        nums[i] += 1\n    dp = [nums[0]] + [0] * (n - 1)\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], nums[i])\n    min_val = 10**9\n    for i in range(1, n - 2):\n        if dp[i] < min_val:\n            min_val = dp[i]\n            res = i\n    for i in range(n):\n        if a[i] == res:\n            k = i\n    dp = [nums[0]] + [0] * (n - 1)\n    for i in range(1, n):\n        dp[i] = max(dp[i - 1], nums[i])\n    min_val = 10**9\n    for i in range(k + 1, n):\n        if dp[i] < min_val:\n            min_val = dp[i]\n            k += 1\n    return str(min_val) +'' + str(k)\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Take input\n    n = int(stdin)\n    \n    # Take skills\n    skills = list(map(int, stdin.split()))\n    \n    # Sort skills in non-decreasing order\n    skills.sort()\n    \n    # Initialize variables\n    prev_skill = skills[0]\n    count = 0\n    diversity = 0\n    \n    # Calculate the number of teams\n    for skill in skills:\n        if prev_skill - skill >= 0:\n            count += 1\n            diversity += skill - prev_skill\n        prev_skill = skill\n    \n    # Print the number of teams and their skills\n    print(diversity, count)\n    print(*skills)\n    \n    return str(diversity) +'' + str(count)\n"
    },
    {
        "number": 4451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n    # write your code here\n    # first line\n    res = 0\n    count = 1\n    # second line\n    team = [i for i in range(1, N+1)]\n    # loop\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if A[i] < A[j]:\n                res += A[j] - A[i]\n                count += 1\n    print(res, count)\n    return''.join(map(str, team))\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_num = int(stdin)\n    test_case = []\n    for _ in range(test_num):\n        test_case.append(int(stdin))\n    \n    answer = []\n    for case in test_case:\n        count = 0\n        while case > 0:\n            if case % 10 == 0:\n                case -= 1\n                count += 1\n            else:\n                break\n        answer.append(count)\n    \n    for num, count in enumerate(answer):\n        print(num + 1, count)\n    \n    return\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        \n        ans = [1]\n        \n        while n > 1:\n            ans.append((ans[-1] + n//ans[-1])%10)\n            n = n % ans[-1]\n        \n        print(' '.join(map(str, ans)))\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    lst = [1, 9, 9, 9, 9]\n    for i in range(5, n+1):\n        if i % 10!= 0:\n            lst.append(i)\n        else:\n            lst.append(lst[-1])\n\n    return lst\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return stdin"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of the day the book of the i-th child is returned back to him for the first time in this query.\n\n    >>> solution(\"6\\n5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\")\n    '1 1 1 1 1'\n    \"\"\"\n    q, n = map(int, stdin.split(\"\\n\")[0].split())\n    p = list(map(int, stdin.split(\"\\n\")[1].split()))\n    dp = [0] * (n + 1)\n    dp[n] = 0\n    for _ in range(q):\n        t = list(map(int, stdin.split(\"\\n\")[_ + 1].split()))\n        for i in range(n):\n            if dp[p[i]] == 0 or t[i] < dp[p[i]]:\n                dp[p[i]] = t[i]\n        dp[n] = 0\n    return \"\\n\".join(map(str, dp))"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(stdin.split('\\n')[1:])\n    pass"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Notes:\n        1) You can return a solution in any order.\n        2) You can write helper functions, and use them in the solution.\n        3) You can write intermediary outputs in any order, which can be used for debugging.\n        4) When you use print or similar to output the answers, please, use the string representation of the list:\n            i.e. print([\"foo\", 1, 2] -> \"foo, 1, 2\"\n            We do it so because we want to be consistent with lists in the tests.\n\n    Args:\n        stdin: input to the program\n\n    Returns:\n        str: the string representation of the list with answers\n    \"\"\"\n\n    return \"...\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Solution\n    pass"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''"
    },
    {
        "number": 4453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return str\n    def max_in(l):\n        if len(l) == 1:\n            return l[0]\n        else:\n            return max(l)\n    \n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    q = int(stdin.readline().strip())\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    new_a = []\n    for i in range(len(a)):\n        new_a.append(a[i])\n    a.sort()\n    for i in range(len(b)):\n        b[i] = b[i] - max_in(a)\n        new_a.append(b[i])\n    new_a.sort()\n    for i in range(len(new_a)):\n        if i < len(a):\n            a[i] = a[i] + new_a[i]\n    for i in range(len(a)):\n        a[i] = a[i] // 2\n    print(' '.join(str(x) for x in a))\n    return None"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # input\n    N, Q = map(int, stdin.split())\n    prices = [int(i) for i in stdin.split()]\n    res = [0] * Q\n    for i in range(Q):\n        n = int(stdin.split()[i])\n        res[i] = min(prices[:n])\n        prices = prices[n:]\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return''.join(map(str, list(map(int, stdin.split('\\n')[1:]))))"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Not yet implemented\"\n"
    },
    {
        "number": 4454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_sum_for_each_price(prices, n):\n        pass\n\n    for _ in range(int(stdin.readline().strip())):\n        n = int(stdin.readline().strip())\n        prices = list(map(int, stdin.readline().strip().split()))\n        print(find_min_sum_for_each_price(prices, n))\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_programmers, num_quarries = map(int, stdin.split(' '))\n\n    max_skills = [0] * num_programmers\n    for line in stdin.split('\\n')[1:-1]:\n        programmer_1, programmer_2 = map(int, line.split(' '))\n        if max_skills[programmer_1 - 1] < max_skills[programmer_2 - 1]:\n            max_skills[programmer_1 - 1] += 1\n        else:\n            max_skills[programmer_2 - 1] += 1\n\n    return''.join(map(str, max_skills))"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.strip().split(' ')]\n    s = [int(i) for i in stdin.strip().split(' ')]\n    ans = [0 for _ in range(n)]\n    kp = set()\n    for _ in range(k):\n        x, y = [int(i) for i in stdin.strip().split(' ')]\n        kp.add((x, y))\n        kp.add((y, x))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (s[i], s[j]) in kp or (s[j], s[i]) in kp:\n                continue\n            if s[i] > s[j]:\n                ans[i] += 1\n                ans[j] += 1\n    for i in ans:\n        print(i)\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\"\n\ndef"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split(' ')]\n    programmers = [int(i) for i in stdin.split(' ')][1:]\n    quarrels = []\n    for _ in range(M):\n        x, y = [int(i) for i in stdin.split(' ')][1:]\n        quarrels.append((x, y))\n\n    # I want to sort the list of quarrels in reverse order.\n    # By default, Python list is sorted by the first element of each tuple (the greatest of them).\n    # Let's make a function, which will sort it by the second element.\n    def sort_function(quarrel: tuple):\n        return -quarrel[1]\n\n    quarrels.sort(key=sort_function, reverse=True)\n    # We will count the number of possible mentors for each programmer.\n    # To do it, we will be using a set for a set of programs that are in a conflict with a specific program.\n    # We will use a dictionary, for a set of programs that are in a conflict with a specific program.\n    possible_mentors = {}\n    for program in programmers:\n        possible_mentors[program] = set()\n    # First, we add the programs that are in a conflict with each other.\n    # To do it, we will use a dictionary, for a set of programs that are in a conflict with a specific program.\n    # We will use a dictionary, for a set of programs that are in a conflict with a specific program.\n    conflict = {}\n    for x, y in quarrels:\n        if x in conflict:\n            conflict[x].add(y)\n        else:\n            conflict[x] = {y}\n        if y in conflict:\n            conflict[y].add(x)\n        else:\n            conflict[y] = {x}\n\n    # The result is the set, which contains all programs that can be mentor for each program.\n    # We can use a dictionary, for a set of programs that are in a conflict with a specific program.\n    for program in conflict:\n        conflict_programs = conflict[program]\n        for conflict_program in conflict_programs:\n            if program < conflict_program:\n                possible_mentors[program].add(conflict_program)\n    # The result is the set, which contains all programs that can be mentor for each program.\n    # We can use a dictionary, for a set of programs that are in a conflict with a specific program.\n    for program in conflict:\n        conflict_programs = conflict[program]\n        for conflict_program in conflict_programs:\n            if program < conflict_program:\n                possible_mentors[program].update(possible_mentors[conflict_program])\n\n    # The result is the set, which contains all programs that can be mentor for each program.\n    # We can use a dictionary, for a set of programs that are in a conflict with a specific program.\n    for program in conflict:\n        conflict_programs = conflict[program]\n        for conflict_program in conflict_programs:\n            if program < conflict_program:\n                possible_mentors[program].update(possible_mentors[conflict_program])\n\n    # The result is the set, which contains all programs that can be mentor for each program.\n    # We can use a dictionary, for a set of programs that are in a conflict with a specific program.\n    for program in conflict:\n        conflict_programs = conflict[program]\n        for conflict_program in conflict_programs:\n            if program < conflict_program:\n                possible_mentors[program].update(possible_mentors[conflict_program])\n\n    # We can use a dictionary, for a set of programs that are in a conflict with a specific program.\n    for program in conflict:\n        conflict_programs = conflict[program]\n        for conflict_program in conflict_programs:\n            if program < conflict_program:\n                possible_mentors[program].update(possible_mentors[conflict_program])\n\n    # The result is the set, which contains all programs that can be mentor for each program.\n    # We can use a dictionary, for a set of programs that are in a conflict with a specific program.\n    for program in conflict:\n        conflict_programs = conflict[program]\n        for conflict_program in conflict_programs:\n            if program < conflict_program:\n                possible_mentors[program].update(possible_mentors[conflict_program])\n\n    # The result is the set, which contains all programs that can be mentor for each program.\n    # We can use a dictionary, for a set of programs that are in a conflict with a specific program.\n    for program in conflict:\n        conflict_programs = conflict[program]\n        for conflict_program in conflict_programs:\n            if program < conflict_program:\n                possible_mentors[program].update(possible_mentors[conflict_program])\n\n    # The result is the set, which contains all programs that can be mentor for each program.\n    # We can use a dictionary, for a set of programs that are in a conflict with a specific program.\n    for program in conflict:\n        conflict_programs = conflict[program]\n        for conflict_program in conflict_programs:\n            if program < conflict_program:\n                possible_mentors[program].update(possible_mentors[conflict_program])\n\n    # The result is the set, which contains all programs that can be mentor for each program.\n    # We can use a dictionary, for a set of programs that are in a conflict with a specific program.\n    for program in conflict:\n        conflict_programs = conflict[program]\n        for conflict_program in conflict_programs:\n            if program < conflict_program:\n                possible_mentors[program].update(possible"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    skills = list(map(int, stdin.split()))\n    alice = [1] * N\n    bob = [1] * N\n    for i in range(K):\n        x, y = list(map(int, stdin.split()))\n        if skills[x - 1] < skills[y - 1]:\n            alice[x - 1] = 0\n        elif skills[x - 1] > skills[y - 1]:\n            bob[y - 1] = 0\n        else:\n            alice[x - 1] = 0\n            bob[y - 1] = 0\n    return''.join(map(str, alice + bob))\n\ndef"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    programmer_num, pair_num = map(int, stdin.split())\n    programmer_skills = list(map(int, stdin.split()))\n    programmer_skill_set = set(programmer_skills)\n    assert len(programmer_skills) == programmer_num\n    assert pair_num <= (programmer_num * (programmer_num - 1) / 2)\n    pair_num = 0\n    for i in range(pair_num):\n        x, y = map(int, stdin.split())\n        if y >= x:\n            x, y = y, x\n        pair_num += y - x + 1\n    pair_num = pair_num // 2\n    programmer_skill_set.remove(min(programmer_skill_set))\n    return''.join(map(str, [programmer_num - pair_num - i - 1 for i in programmer_skill_set]))\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = list(map(int, stdin.pop(0).split()))\n    skills = list(map(int, stdin.pop(0).split()))\n    pairs = [list(map(int, stdin.pop(0).split())) for _ in range(k)]\n    pairs = sorted(pairs, key=lambda x: x[0])\n    pairs = [pairs[0]] + [pairs[i] for i in range(1, len(pairs)) if pairs[i][0] > pairs[i-1][1]]\n    return''.join(list(map(str, [0]*n)))\n\n\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    count += stdin[0] if stdin[0] > max(stdin[1:]) else 0\n    count += stdin[1:] if stdin[0] <= max(stdin[1:]) else 0\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdout =''.join(\n        [str(stdin.count(i) - stdin.count(j)) for i, j in zip(stdin[1::2], stdin[::2])]\n    )\n    print(stdout)\n    return stdout\n"
    },
    {
        "number": 4455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    skills = list(map(int, stdin.split(\" \")))\n    pairs = []\n    for _ in range(k):\n        pairs.append(list(map(int, stdin.split(\" \"))))\n    \n    res = [0 for _ in range(n)]\n    for pair in pairs:\n        x, y = pair\n        if skills[x - 1] > skills[y - 1]:\n            res[y - 1] += 1\n        elif skills[x - 1] < skills[y - 1]:\n            res[x - 1] += 1\n    \n    return''.join(map(str, res))\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the solution to the problem\n    :param stdin: a string representing the input of the problem\n    :return: the solution to the problem\n    \"\"\"\n   ...\n    return res\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split()]\n    p = [int(s) for s in stdin.split()]\n    q = [int(s) for s in stdin.split()]\n\n    for _ in range(n):\n        if p[p[0]]!= 1:\n            p.append(p.pop(p[0]))\n        else:\n            p.pop(p[0])\n        if q[q[0]]!= 1:\n            q.append(q.pop(q[0]))\n        else:\n            q.pop(q[0])\n\n    string = []\n\n    for _ in range(n):\n        if p[0]!= 1:\n            string.append(chr(ord('a') + p[0] - 2))\n        if q[0]!= 1:\n            string.append(chr(ord('a') + q[0] - 2))\n\n    string = ''.join(string)\n\n    if len(string) < k:\n        return 'NO'\n\n    for i in range(1, n):\n        if string[i] <= string[i - 1]:\n            return 'NO'\n\n    return string\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split('\\n')[0].split(' ')\n    n, k = int(n), int(k)\n\n    p = stdin.split('\\n')[1].split(' ')\n    q = stdin.split('\\n')[2].split(' ')\n\n    p = list(map(int, p))\n    q = list(map(int, q))\n\n    s = [str(chr(i)) for i in range(97, 97 + k)]\n    p_len, q_len = len(p), len(q)\n\n    p_set, q_set = set(p), set(q)\n    if p_len!= q_len or not(p_set <= set(q) and q_set <= set(p)):\n        return \"NO\"\n\n    while p:\n        p_val = p.pop()\n        q_val = q.pop()\n\n        if p_val < q_val:\n            for i, c in enumerate(s[:q_val]):\n                s[i] = s[p_val]\n            del s[p_val]\n        elif q_val < p_val:\n            for i, c in enumerate(s[:p_val]):\n                s[i] = s[q_val]\n            del s[q_val]\n        else:\n            s[p_val-1] = s[q_val-1]\n\n    return ''.join(s)\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    n, k = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    q = list(map(int, stdin.split()))\n    if n < k:\n        return \"NO\"\n    p.sort()\n    q.sort()\n    for i in range(k - 1):\n        if p[i] == p[i + 1]:\n            return \"NO\"\n    for i in range(k - 1):\n        if q[i] == q[i + 1]:\n            return \"NO\"\n    p = ''.join(map(chr, p))\n    q = ''.join(map(chr, q))\n    for i in range(len(s) - k + 1):\n        if p in s[i:i + k] and q in s[i:i + k]:\n            return s[i:i + k]\n    return \"NO\"\n    \"\"\"\n\n    # Solution 2:\n    # n, k = map(int, stdin.split())\n    # p, q = sorted(map(int, stdin.split())), sorted(map(int, stdin.split()))\n    # curr = sorted(p)\n    # print(p)\n    # print(q)\n    # print(curr)\n    # if len(curr) < k:\n    #     return \"NO\"\n    # while k > 0 and len(curr) > 0:\n    #     if p[0] <= q[0]:\n    #         curr.pop(0)\n    #         p.pop(0)\n    #         q.pop(0)\n    #         k -= 1\n    #     else:\n    #         break\n    # if len(curr)!= 0:\n    #     return \"NO\"\n    # return ''.join(map(chr, sorted(curr)))\n    \"\"\"\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(c) for c in stdin.strip().split(' ')]\n    \n    p = [int(c) for c in stdin.strip().split('\\n')[1].split(' ')]\n    q = [int(c) for c in stdin.strip().split('\\n')[2].split(' ')]\n    \n    positions = {x: i for i, x in enumerate(p)}\n    \n    p = [positions[x] for x in p]\n    q = [positions[x] for x in q]\n    \n    arr = [None] * n\n    \n    for i, x in enumerate(q):\n        arr[x] = i\n    \n    ans = ''\n    \n    for i, x in enumerate(p):\n        ans += 'a' * (arr[x]!= i) + 'b' * (arr[x] == i)\n    \n    return ans\n"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport itertools\n\ndef"
    },
    {
        "number": 4456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    p, q = list(map(int, stdin.split()))\n\n    if p == q:\n        return 'NO'\n\n    s = []\n    for i in range(n):\n        if i < k:\n            s.append(chr(i+97))\n        else:\n            s.append(chr(i+97-k))\n\n    if p <= k:\n        if s[p-1] == s[k-1]:\n            return 'NO'\n\n    p -= k\n    q -= k\n    while p > 0 and q > 0:\n        if s[p-1] == s[q-1]:\n            return 'NO'\n        p -= 1\n        q -= 1\n\n    if p <= 0:\n        return 'YES\\n' + ''.join(s[:q])\n    elif q <= 0:\n        return 'YES\\n' + ''.join(s[p:])\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = [int(el) for el in stdin.split('\\n')[1].split()]\n    arr.sort(reverse=True)\n    arr.append(arr[0])\n    # print(arr)\n    shots = 1\n    while len(arr) > 1:\n        shots += (arr[0] * shots + 1)\n        arr.pop(0)\n    return str(shots)"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of shots required to knock each of the n given cans down exactly once\"\"\"\n    n = int(stdin.split()[0])\n    cans = list(map(int, stdin.split()[1:]))\n    shots = 0\n    order = [i for i in range(1, n + 1)]\n    for i in range(n):\n        remain = cans[i]\n        shots += 1\n        while remain:\n            shots += cans[i] * order.index(i + 1)\n            order.remove(i + 1)\n            remain -= 1\n    return shots\n    return answer\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    can = int(stdin)\n    nums = list(map(int, stdin.split(\" \")))\n    nums.sort()\n    \n    count = 0\n    for i in range(1, len(nums)):\n        count += (nums[i] * i) + 1\n    \n    return str(count)\n\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, numbers = stdin.split('\\n')\n    numbers = [int(x) for x in numbers.split(' ')]\n    # create dict {can: durability}\n    d = dict()\n    for n, dura in enumerate(numbers):\n        d[n+1] = dura\n    # create dict {can: number of shots}\n    s = dict()\n    for n, dura in d.items():\n        shot = 0\n        while d[n] > 0:\n            d[n] -= 1\n            shot += 1\n        s[n] = shot\n    # create list [can, number of shots]\n    lis = []\n    for i in s.items():\n        lis.append(i)\n    lis = sorted(lis, key=lambda x: x[1], reverse=True)\n    # create final dict {can: index of it}\n    final = dict()\n    for i in range(len(lis)):\n        final[lis[i][0]] = i+1\n    return''.join([str(x) for x in final.values()])\n\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    can = list(map(int, stdin.readline().split()))\n    can.sort()\n    k = can.pop()\n    can = [i for i in range(1, n+1)]\n    s = can[0] * k + 1\n    for i in range(n):\n        can[i] = can[i] * can[i]\n        s += can[i]\n    min = 1000000000\n    ans = 0\n    for i in range(n):\n        s -= can[i]\n        if min > s:\n            min = s\n            ans = can[i]\n        s += can[i]\n    return str(ans)\n\"\"\"\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    cnt = sum(a)\n    r = []\n    for i in range(n):\n        x = a[i]\n        x *= (cnt // x + 1)\n        cnt -= x\n        r.append(x)\n    return''.join([str(x) for x in r])"
    },
    {
        "number": 4457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cans = list(map(int, stdin.readline().split()))\n    \n    cans.sort()\n    res = []\n    temp = cans[0]\n    shots = 0\n    \n    for i in range(n):\n        shots += temp * (i + 1)\n        res.append(i + 1)\n        \n    shots += cans[-1] * (n)\n    \n    for i in range(n - 1):\n        shots += cans[i]\n        res[i] = i + 1\n        \n    print(shots)\n    print(' '.join(map(str, res)))\n    return ''\n\"\"\"\n\nimport sys\nimport operator\n\n\ndef"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    P = [int(i) for i in stdin.readline().split()]\n    P.sort()\n\n    count = 0\n    for i in range(1, N):\n        if P[i - 1] > P[i]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if l[i] > l[j]:\n                count += 1\n                break\n    return str(count)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(x) for x in stdin.split()]\n    nums.sort()\n    nums = tuple(nums)\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom sys import stdin\n\nfrom itertools import permutations\n\nN = int(stdin.readline())\n\nP = [int(x) for x in stdin.readline().split()]"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, N):\n        for j in range(i):\n            if A[i] > A[j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *P = map(int, stdin.split())\n    cnt = 0\n    for i in range(1, N):\n        if any(P[i] > P[j] for j in range(i)):\n            cnt += 1\n    return str(cnt)\n    \nimport sys\n\ndef"
    },
    {
        "number": 4458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    permutation = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, N):\n        for j in range(i):\n            if permutation[i] <= permutation[j]:\n                count += 1\n    return count"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import re\n    \n    if len(stdin) == 1:\n        return 0\n    \n    inputs = re.findall(r'[0-9]+', stdin)\n    a = tuple(int(x) for x in inputs)\n    \n    c = dict()\n    for x in a:\n        if x in c:\n            c[x] += 1\n        else:\n            c[x] = 1\n    \n    good = []\n    for x in c.keys():\n        if c[x] == x:\n            good.append(x)\n    \n    count = 0\n    for x in a:\n        if x not in good:\n            count += 1\n    \n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip()\n    n = int(line.split('\\n')[0])\n    a = list(map(int, line.split('\\n')[1].split()))\n\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a.count(a[i])!= a[i]:\n            count += a.count(a[i]) - a[i]\n\n    return str(count)\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a sequence of positive integers of length N, a = (a_1, a_2,..., a_N).\n    Your objective is to remove some of the elements in a so that a will be a good sequence.\n    Here, an sequence b is a good sequence when the following condition holds true:\n    - For each element x in b, the value x occurs exactly x times in b.\n    For example, (3, 3, 3), (4, 2, 4, 1, 4, 2, 4) and () (an empty sequence) are good sequences, while (3, 3, 3, 3) and (2, 4, 1, 4, 2) are not.\n    Find the minimum number of elements that needs to be removed so that a will be a good sequence.\n    >>> solution('4\\n3 3 3 3')\n    1\n    >>> solution('6\\n3 3 3 3 3 3 3')\n    5\n    >>> solution('5\\n3 3 3 3 3')\n    0\n    >>> solution('4\\n2 2 2 2')\n    0\n    >>> solution('5\\n2 2 2 2 2')\n    3\n    >>> solution('10\\n9 9 9 9 9 9 9 9 9 9')\n    9\n    '''\n    # we need to remove one occurrence of each number\n    # so that we can get a good sequence\n    # there are at most 10 numbers in the sequence\n    # so we can check all the numbers that are in the input sequence\n    # and if the number is in the sequence more than once, then remove\n    # that number\n    a = list(map(int, stdin.split()))\n    counts = [0] * len(a)\n    result = 0\n    for i in range(len(a)):\n        counts[i] = a.count(a[i])\n        if counts[i] > 1:\n            result += 1\n    return result\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(set(stdin.split()[1]), key=stdin.split().index))\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(' ')[1:]\n    a = [int(i) for i in a]\n    res = 0\n    for i in range(n):\n        if a.count(a[i]) > 1:\n            res += a.count(a[i]) - 1\n            a[a.index(a[i])] = -1\n    print(res)"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # read input and process\n    n, *a = list(map(int, stdin.split()))\n    count = {}\n    for x in a:\n        if x in count:\n            count[x] += 1\n        else:\n            count[x] = 1\n\n    # remove elements that do not have the required number of occurrences\n    count_items = list(count.items())\n    count_items.sort(key=lambda x: x[1])\n    for x in count_items:\n        if x[1]!= x[0]:\n            count[x[0]] -= 1\n            a.remove(x[0])\n            if x[1] > x[0]:\n                count[x[0]] -= x[1] - x[0]\n                a.remove(x[0])\n\n    # print the result\n    return str(len(a))\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(stdin.split())\n"
    },
    {
        "number": 4459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. split input into two strings\n    2. split 2nd string into list\n    3. for each element in 2nd list:\n        3.1 if element not in 1st string, add to list\n    4. print length of list\n    \"\"\"\n    a = stdin.splitlines()[0]\n    b = stdin.splitlines()[1]\n    c = [int(x) for x in b.split()]\n    # remove elements from list a if not in list b\n    d = [int(x) for x in a.split() if x not in b]\n    return len(d)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split(\" \"))\n    for i in range(5):\n        if x_1 == 0:\n            return str(i+1)\n        elif x_2 == 0:\n            return str(i+1)\n        elif x_3 == 0:\n            return str(i+1)\n        elif x_4 == 0:\n            return str(i+1)\n        elif x_5 == 0:\n            return str(i+1)\n\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    for i in range(5):\n        if x[i] == 0:\n            return str(i + 1)\n    return \"\"\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    return str(x.index('0') + 1)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            return i+1"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the variable that Snuke assigned 0.\n\n    Args:\n        stdin (str): A string of five integers, representing the values of variables x_1, x_2, x_3, x_4, and x_5.\n\n    Returns:\n        str: A string of one integer, representing the variable that Snuke assigned 0.\n    \"\"\"\n    x_1, x_2, x_3, x_4, x_5 = map(int, stdin.split())\n    if x_1 == 0:\n        return str(1)\n    elif x_2 == 0:\n        return str(2)\n    elif x_3 == 0:\n        return str(3)\n    elif x_4 == 0:\n        return str(4)\n    else:\n        return str(5)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x_1, x_2, x_3, x_4, x_5 = stdin.strip().split(\" \")\n    return str(max(int(x_1), int(x_2), int(x_3), int(x_4), int(x_5)))\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    variables = [int(x) for x in stdin.split(' ')]\n    return str(variables.index(0)+1)\n"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    if data[1].__contains__(\"0\"):\n        return data[0].index(data[1])+1\n    return data[0].index(data[2])+1"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\" \")\n    return str(int(x[0])+int(x[1])+int(x[2])+int(x[3])+int(x[4]))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    print(min(H, W) * (H + W - min(H, W) * 2))\n    return ''"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    height, width = map(int, stdin.split())\n    return str(max(width, height) - min(width, height))\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    _, _ = list(map(int, stdin.split('\\n')))\n    # Solve the problem\n    return str(sum(list(map(lambda x: x[0] * x[1] - x[0] * x[1] * 0.5, list(map(lambda x: (x, x), [(1, 2), (2, 3), (2, 5), (3, 4), (3, 6), (4, 5), (4, 6)])))))\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/programmers/lessons/7-stacks_and_queues/knapsack_problem/\n    '''\n    [H, W] = [int(x) for x in stdin.split()]\n    print((H*W) - (H*W) % 3)\n\n\ndef"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    (height, width) = [int(x) for x in stdin.split()]\n    \n    return str(max(height, width) - min(height, width))"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    if h == 1 or w == 1:\n        return 0\n    return max(h * (h - 1) // 2, w * (w - 1) // 2) - min(h, w)"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (H, W) = [int(x) for x in stdin.split()]\n    return str(abs(H * (H - 1) - W * (W - 1)))"
    },
    {
        "number": 4461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split(' '))\n    result = h * w - (h - 1) * (w - 1)\n    print(result)\n    return result\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    result = \"Yes\" if 2 <= n <= 10 ** 5 and all([1 <= x <= 10 ** 9 for x in arr]) else \"No\"\n    return result\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(a) for a in stdin.readline().strip().split(' ')]\n    A.sort()\n    if not(2 <= N <= 10**5 and all(a in range(1,10**9+1) for a in A)):\n        return -1\n    elif N == 2 and (A[0] * A[1] % 4 == 0):\n        return 'Yes'\n    elif N == 3 and ((A[0] * A[1] % 4 == 0) and (A[1] * A[2] % 4 == 0)):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_list = [int(number) for number in stdin.split()]\n    prod = num_list[0] * num_list[1]\n    print('Yes' if prod % 4 == 0 else 'No')\n    return\nsolution(stdin.read())\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split('\\n')[:-1])\n    curr_prod = 1\n    for i in range(len(nums) - 1):\n        if curr_prod * nums[i + 1] % 4 == 0:\n            curr_prod *= nums[i + 1]\n        else:\n            return 'No'\n    return 'Yes'\n    \"\"\"\n\n    n, *nums = map(int, stdin.split('\\n')[:-1])\n    arr = [1] + nums + [1]\n    right = [1] + [0] * (len(arr) - 1)\n    left = [1] + [0] * (len(arr) - 1)\n    for i in range(1, len(arr) - 1):\n        right[i] = arr[i - 1] * arr[i + 1]\n    for i in range(len(arr) - 2, 0, -1):\n        left[i] = arr[i - 1] * arr[i + 1]\n    for i in range(1, len(arr) - 1):\n        if right[i] % 4 == 0 and left[i] % 4 == 0:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    array = stdin.readline().strip().split(\" \")\n    array = [int(n) for n in array]\n\n    if len(array) == 1:\n        return \"Yes\" if array[0] % 4 == 0 else \"No\"\n\n    result = 0\n    for index, value in enumerate(array):\n        if index == len(array) - 1:\n            continue\n        if value % 4 == 0:\n            result = value * array[index + 1]\n        elif index == 0:\n            continue\n        else:\n            return \"No\"\n\n    if result % 4!= 0:\n        return \"No\"\n\n    return \"Yes\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    in_data: str = stdin\n    n = int(in_data.split(\"\\n\")[0])\n    numbers = in_data.split(\"\\n\")[1].split(\" \")\n    for i in range(n - 1):\n        if int(numbers[i]) * int(numbers[i + 1]) % 4 == 0:\n            continue\n        else:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    v = list(map(int, stdin.readline().strip().split(\" \")))\n    if sum(v) % 4 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if n == 1:\n        return 'Yes'\n\n    a = sorted(a)\n    for i in range(n - 1):\n        if (a[i] * a[i + 1]) % 4 == 0:\n            continue\n        else:\n            return 'No'\n\n    return 'Yes'\n"
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length: int = int(stdin.readline().rstrip())\n    numbers: List[int] = [int(x) for x in stdin.readline().rstrip().split()]\n    for i in range(1, length):\n        if numbers[i] * numbers[i - 1] % 4 == 0:\n            pass\n        else:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    a = list(sorted(set(a)))\n    left = 0\n    right = len(a) - 1\n    while left < right:\n        if a[left] * a[right] % 4 == 0:\n            left += 1\n        else:\n            right -= 1\n    if left == right:\n        return \"Yes\"\n    return \"No\"\nprint(solution(input()))\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    ans = 'Yes'\n    if len(s) < len(t):\n        return ans\n    elif len(t) == 1:\n        return ans\n    elif len(s) == 1:\n        return 'No'\n    else:\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                if s[i] < t[i]:\n                    ans = 'Yes'\n                    s = s[:i] + s[i].swapcase() + s[i + 1:]\n                    break\n                else:\n                    ans = 'No'\n                    break\n        return ans\n\n\nprint(solution(stdin))\n\n\"\"\"\nimport sys\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    res = \"No\"\n    s = sorted(s)\n    t = sorted(t)\n    # print(s, t)\n    # print(sorted(s), sorted(t))\n    if s < t:\n        res = \"Yes\"\n    return res\n\"\"\"\n\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n\n    letters = list(s)\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if ''.join(sorted(s[i:j])) < ''.join(sorted(t[i:j])):\n                print('Yes')\n                return\n\n    print('No')\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    # s = \"a\"\n    # t = \"aa\"\n    # s = \"aa\"\n    # t = \"ab\"\n    # s = \"b\"\n    # t = \"bb\"\n    # s = \"xyz\"\n    # t = \"xzy\"\n    # s = \"xy\"\n    # t = \"yx\"\n    # s = \"a\"\n    # t = \"a\"\n    # s = \"ab\"\n    # t = \"ba\"\n    # s = \"ab\"\n    # t = \"a\"\n    # s = \"z\"\n    # t = \"za\"\n    # s = \"zy\"\n    # t = \"zay\"\n    s_sort = sorted(s)\n    t_sort = sorted(t)\n    for i in range(len(s_sort)):\n        if s_sort[i]!= t_sort[i]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    return 'Yes' if s < t else 'No'\n\"\"\"\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    a = stdin\n    b = stdin\n\n    if len(a) > len(b):\n        if b < a[:len(b)]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n\n    #s = 'xayaz'\n    #t = 'xyzayaz'\n    \n    s_list = sorted(list(s))\n    t_list = sorted(list(t))\n\n    if len(s) > len(t):\n        print(\"No\")\n        return\n\n    for i in range(len(s_list)):\n        if s_list[i] == t_list[i]:\n            continue\n        else:\n            if i == 0:\n                if s_list[i] < t_list[i]:\n                    print(\"Yes\")\n                    return\n                else:\n                    print(\"No\")\n                    return\n            else:\n                if s_list[i] == t_list[i-1] and s_list[i-1] < t_list[i]:\n                    print(\"Yes\")\n                    return\n                else:\n                    print(\"No\")\n                    return\n\n    print(\"Yes\")\n    return"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    \n    if len(s) < len(t):\n        return 'No'\n    \n    for i in range(len(t)):\n        if len(t) < len(s):\n            return 'No'\n        if s[i] > t[i]:\n            return 'No'\n        \n    return 'Yes'\n\n    # \u611f\u60f3: \u5404\u6587\u5b57\u306e\u9806\u756a\u304c\u5165\u308c\u66ff\u308f\u308b\u3079\u304d\u306e\u3060\u308d\u3046\u304b\uff1f\n    # \u3057\u304b\u3057\uff0c\u305d\u308c\u306b\u95a2\u308f\u3089\u305a\uff0c\u6587\u5b57\u306e\u9806\u756a\u304c\u9055\u3046\u3068\u51fa\u529b\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\n    # \u307e\u305f\uff0c\u30bd\u30fc\u30c8\u3059\u308b\u306e\u306f\u6587\u5b57\u306e\u9806\u756a\u306e\u307f\u3067\u306f\u306a\u304f\uff0c\u6587\u5b57\u306e\u9806\u756a\u3068\u5024\u306e\u307f\u3067\u3082\u826f\u3044\u3089\u3057\u3044\n    # \u3064\u307e\u308a\uff0c\u5165\u308c\u66ff\u3048\u308b\u8f9e\u66f8\u3092\u4f5c\u3063\u3066\uff0c\u5024\u3092\u6bd4\u8f03\u3059\u308c\u3070\u826f\u3044\n    # \u3060\u304c\uff0c\u305d\u306e\u307e\u307e\u30bd\u30fc\u30c8\u3057\u305f\u6587\u5b57\u5217\u3092\u6bd4\u8f03\u3057\u3066\u3044\u304f\u306e\u306f\u7121\u7406\n    \n    # \u6587\u5b57\u5165\u308c\u66ff\u3048\u306e\u8f9e\u66f8\u3092\u4f5c\u308b\n    # \u4f8b\uff1as = 'yx', t = 'axy'\n    #       |  |\n    #       y  a\n    #       x  y\n    #       a  x\n    #       y  x\n    #\n    # \u3068\u306a\u308b\n    # dict_swap = {'y':'x', 'x':'y', 'a':'x', 'y':'a', 'x':'a'}\n    # dict_swap = {'y':'x', 'x':'y', 'a':'y', 'y':'a', 'x':'a'}\n    #\n    # s_new = [s_char for s_char in s]\n    # t_new = [t_char for t_char in t]\n    #\n    # for i in range(len(s_new)):\n    #     # \u6587\u5b57\u3092\u65b0\u3057\u3044\u9806\u756a\u306b\u4e26\u3079\u66ff\u3048\u308b\n    #     s_new[i] = dict_swap[s_new[i]]\n    #     t_new[i] = dict_swap[t_new[i]]\n    #     # \u6587\u5b57\u306e\u4e26\u3073\u66ff\u3048\u304c\u3067\u304d\u305f\u3089\u7d42\u4e86\n    #     if s_new == t_new:\n    #         return 'Yes'\n    #\n    # return 'No'\n"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(s) > len(t):\n        return \"No\"\n    if len(s) == len(t):\n        return \"Yes\" if s < t else \"No\"\n    return \"Yes\" if s[:len(t) - len(s)] < t[:len(t) - len(s)] else \"No\"\n\n\ndef"
    },
    {
        "number": 4463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    sorted_s = sorted(s)\n    sorted_t = sorted(t)\n    if len(s) < len(t) and sorted_s == sorted_t:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c % b == 0:\n        return 'YES'\n    for n in range(a, int(b * c ** 0.5) + 1):\n        if c % n == 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split(' ')))\n    if (C - B) % A == 0:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A, B, C = list(map(int, stdin.split(' ')))\n    for i in range(max(A, B, C)):\n        if (i*A % B == C % B) and (i*B % A == C % A):\n            return 'YES'\n    return 'NO'\n    '''\n    A, B, C = list(map(int, stdin.split(' ')))\n    for i in range(max(A, B, C)):\n        if (i * A % B == C % B) and (i * B % A == C % A):\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split(' ')]\n    for num1 in range(1, A + 1):\n        for num2 in range(1, A + 1):\n            if num1 * B + num2 * C % A == 0:\n                return 'YES'\n\n    return 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split()]\n    if C % B == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C = map(int, stdin.split())\n  integers = set()\n  for i in range(A):\n    integers.add(i + 1)\n  for i in range(B):\n    integers.add(C * i)\n  integers = list(integers)\n  integers.sort(reverse=True)\n  if integers[0] % A == 0:\n    integers = integers[1:]\n  for i in integers:\n    if i % A!= 0:\n      print('YES')\n      return\n  print('NO')\n  return"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # A B C\n    a = stdin.split(' ')\n    a = list(map(int, a))\n    if (a[0] == 1 and a[1] == 1 and a[2] == 0):\n        return \"YES\"\n    if (a[0] == a[1] == 1 and a[2] == 1):\n        return \"YES\"\n    if (a[0] == a[1] and a[1]!= 1 and a[2] == 0):\n        return \"YES\"\n    if (a[0] == 1 and a[1] == 1 and a[2] == 1 and a[0] < a[1] and a[0] < a[2]):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 2 and a[2] == 3):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 3 and a[2] == 4):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 4 and a[2] == 5):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 5 and a[2] == 6):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 6 and a[2] == 7):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 7 and a[2] == 8):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 8 and a[2] == 9):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 9 and a[2] == 10):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 10 and a[2] == 11):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 11 and a[2] == 12):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 12 and a[2] == 13):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 13 and a[2] == 14):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 14 and a[2] == 15):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 15 and a[2] == 16):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 16 and a[2] == 17):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 17 and a[2] == 18):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 18 and a[2] == 19):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 19 and a[2] == 20):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 20 and a[2] == 21):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 21 and a[2] == 22):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 22 and a[2] == 23):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 23 and a[2] == 24):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 24 and a[2] == 25):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 25 and a[2] == 26):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 26 and a[2] == 27):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 27 and a[2] == 28):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 28 and a[2] == 29):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 29 and a[2] == 30):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 30 and a[2] == 31):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 31 and a[2] == 32):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 32 and a[2] == 33):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 33 and a[2] == 34):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 34 and a[2] == 35):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 35 and a[2] == 36):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 36 and a[2] == 37):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 37 and a[2] == 38):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 38 and a[2] == 39):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 39 and a[2] == 40):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 40 and a[2] == 41):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 41 and a[2] == 42):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 42 and a[2] == 43):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 43 and a[2] == 44):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 44 and a[2] == 45):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 45 and a[2] == 46):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 46 and a[2] == 47):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 47 and a[2] == 48):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 48 and a[2] == 49):\n        return \"YES\"\n    if (a[0] == a[1] and a[1] == 49 and a[2] == 50):\n        return \"YES\"\n    if (a[0] == a["
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 5 1\\n\")\n    'YES'\n    \"\"\"\n\n    a, b, c = map(int, stdin.split())\n    n = 1\n\n    while a * n < c:\n        n *= b\n\n    if a * n == c:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return \"YES\" if k % m == (n % m) else \"NO\"\n'''\n\ndef"
    },
    {
        "number": 4464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(i) for i in stdin.split()]\n    area = (l[0] - 1) * l[1]\n    return str(area)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    length, width = map(int, stdin.split(' '))\n\n    # compute\n    area = length * width - length * width / 2\n\n    # return\n    return str(area)\n\ndef"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(p: int):\n        return p > 0\n\n    def main():\n        line = stdin.readline().split()\n        if is_valid(int(line[0])) and is_valid(int(line[1])):\n            a = int(line[0])\n            b = int(line[1])\n            print(area(a, b))\n        else:\n            print('Invalid Input!')\n\n    def area(a: int, b: int) -> int:\n        return b ** 2 - (a - 1) ** 2\n\n    main()\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split(' '))\n    return str(a * b - (a + b) + 1)\n\nprint(solution(stdin))\n\n-----\n\nThis solution is based on the idea that the area of the yard is the sum of areas of roads. If we add the road of length A to the length A and width of B to the width B, the sum is the total area of the yard.\n\nTherefore, the area of the yard is A + B - (A + B), which is the total area minus the sum of the areas of roads.\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    return str(a*b)\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a * b)"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(a*b)\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (length, width) = map(int, stdin.split())\n    return str(length * width - 2 * length - 2 * width + 4)\n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(abs(a - b) * 2)\n    \n"
    },
    {
        "number": 4465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return str(a * b - (a + b) + 2)"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  # write your code in Python 3.6\n  x, y, z = map(int, stdin.split())\n  answer = 0\n  for i in range(1, x + 1):\n    if i * y + 2 * z < x:\n      answer += 1\n  return answer"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Write your code here\n    l = list(map(int,stdin.split()))\n    x, y, z = l[0], l[1], l[2]\n    s = ''\n    for i in range(0,x,y):\n        if (i+y+z) < x:\n            s = s + str(i+1) + '\\n'\n    print(s)\n\nsolution(str(input()))\n\n'''\n\nimport math\nx, y, z = map(int, input().split())\n\nprint(math.ceil((x-z)/(y+z))+1)"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split(' '))\n    return str(X // (Y + 2 * Z) + 1)\n\ndef"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length, gap, seat = map(int, stdin.split())\n    return str(max(0, length - seat - gap))\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.split()))\n    if y >= x - 2 * z:\n        print(x - z)\n    else:\n        print(y + 2 * z)\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    return 'Impossible' if (Y + 2 * Z) > X else str(X // (Y + 2 * Z))\n\n-----Solution-----\n'''\ndef"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split()]\n    if x == y + 2 * z:\n        return \"impossible\"\n    elif x > y + 2 * z:\n        return \"impossible\"\n    else:\n        print(x - y - 2 * z)\n        return \"\"\n"
    },
    {
        "number": 4466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x, y, z = map(int, stdin.split())\n    if x < y:\n        print(x)\n    else:\n        print(y)\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def can_pair(pair, arr, b_points):\n        # b_points is a list of blue points\n        # we are checking whether we can add pair into the b_points list\n        # arr is a list of arr we are looking for the smallest x coordinate\n        x_coordinate = arr[0]\n        if pair[0] <= x_coordinate and pair[1] <= x_coordinate:\n            if pair in b_points:\n                return False\n            b_points.append(pair)\n            return True\n\n        return False\n\n    # 1. read number of points\n    n = int(stdin.readline().strip())\n\n    # 2. construct all points\n    all_points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        all_points.append([x, y])\n\n    # 3. sort the x coordinate\n    all_points.sort()\n\n    # 4. construct blue points\n    b_points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        b_points.append([x, y])\n\n    # 5. start to find the solution\n    num_pairs = 0\n    for i in range(n):\n        arr = [all_points[0][0], all_points[0][1]]\n        arr.extend(all_points[1:])\n        arr.sort()\n        if len(b_points) == 0:\n            num_pairs += 1\n        else:\n            if can_pair(arr[0], arr, b_points):\n                num_pairs += 1\n\n        if num_pairs == n:\n            break\n\n        all_points.pop(0)\n\n    return str(num_pairs)\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total_size = int(stdin.readline())\n    red = list(map(int, stdin.readline().split()))\n    blue = list(map(int, stdin.readline().split()))\n\n    # for each blue, check if we can find a red\n    # for each red, check if we can find a blue\n    # for each blue, check if we can find a red\n    # for each red, check if we can find a blue\n\n    # use a hash table to store the reds and blues we have seen\n\n    # for each blue, check if there is a red that is greater than or equal to the blue\n\n    # for each red, check if there is a blue that is greater than or equal to the red\n\n    # for each blue, check if there is a red that is less than the blue\n\n    # for each red, check if there is a blue that is less than the red\n\n    # for each blue, check if there is a red that is less than or equal to the blue\n\n    # for each red, check if there is a blue that is less than or equal to the red\n\n    # return the max number of pairs\n\n    reds = set()\n    blues = set()\n\n    for i in range(total_size):\n        reds.add(red[i])\n        blues.add(blue[i])\n\n    red_pairs = 0\n    blue_pairs = 0\n\n    for red in reds:\n        for blue in blues:\n            if red < blue:\n                blue_pairs += 1\n            elif red >= blue:\n                red_pairs += 1\n\n    return f'{red_pairs}\\n{blue_pairs}'\n\nprint(solution(sys.stdin.readlines()))\n"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(countFriendlies(stdin))\n\n\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return answer"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import gcd\n\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '2'"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(v) for v in stdin.split(' ')]\n    t = [int(v) for v in stdin.split(' ')]\n    t = t + [T]\n    ans = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            ans += T - max(t[i], t[j]) + min(t[i], t[j])\n    return str(ans)"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(get_number_of_seconds_in_total(stdin.split()))\n\n\ndef"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, T = stdin.split('\\n')\n    N, T = int(N), int(T)\n    t = list(map(int, stdin.split('\\n')[1:]))\n    sum = 0\n    while t:\n        if t[0] + sum > T:\n            return sum + T\n        else:\n            sum += t.pop(0)\n    return sum\n\nprint(solution(input()))\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = list(map(int, stdin.split('\\n')[1:]))\n    t.sort()\n    ans = 0\n    i = 0\n    while i < len(t):\n        ans += max(t[i] - t[i - 1], 0)\n        i += 2\n    return str(ans)\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T = [int(x) for x in stdin.strip().split(' ')]\n    times = [int(x) for x in stdin.strip().split(' ')]\n    sum = 0\n    i = 0\n    while i < N:\n        sum = sum + times[i]\n        i = i + 1\n    return str(sum + T)\n"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '7'\n\"\"\"\n\nimport sys\nimport os\nimport time\nfrom datetime import datetime\n\ndef"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of T and N, the number of seconds the shower will emit water for,\n    find the total number of seconds the shower will emit water for.\n    \"\"\"\n    _, t = stdin.split()\n    t = int(t)\n    n = int(stdin)\n    return t * n\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not yet implemented'\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split(\"\\n\")[0])\n    res = list()\n    for _ in range(num):\n        i, j = stdin.split(\"\\n\")[1:3]\n        res.append(int(j))\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_books = int(stdin[0])\n    total_distance = 0\n    answer = []\n    for i in range(number_of_books):\n        book = int(stdin[1 + i])\n        if book <= total_distance:\n            answer.append(0)\n        elif book == total_distance + 1:\n            answer.append(1)\n        elif book > total_distance + 1:\n            answer.append(2)\n            total_distance += 1\n    return answer\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\nL 1\\nR 2\\nR 3\\n? 2\\nL 4\\n? 1\\nL 5\\n? 1\")\n    '1\\n1\\n2'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # put your python code here\n    pass"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"    \ndef"
    },
    {
        "number": 4469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        id, _type = line.split()\n        if _type == '?':\n            print(min(abs(id-1), len(stack) - abs(id-1)))\n        elif _type == 'L':\n            stack.insert(id-1, id)\n        elif _type == 'R':\n            stack.insert(id-1, id)\n    \n    return stack"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # import math\n    # def dfs(n):\n    #     if n == 1:\n    #         return 0\n    #     if n % 2 == 0:\n    #         return min(dfs(int(n/2)), dfs(int(n/3)) + 1, dfs(int(n/5)) + 2) + 1\n    #     if n % 3 == 0:\n    #         return min(dfs(int(n/3)), dfs(int(n/2)) + 1, dfs(int(n/5)) + 2) + 1\n    #     if n % 5 == 0:\n    #         return min(dfs(int(n/5)), dfs(int(n/3)) + 1, dfs(int(n/2)) + 1) + 1\n    #     return math.inf\n\n    # for _ in range(int(stdin)):\n    #     n = int(stdin)\n    #     ans = dfs(n)\n    #     if ans == math.inf:\n    #         print(-1)\n    #     else:\n    #         print(ans)\n    # return''.join(map(str, [dfs(int(n)) for n in stdin.split()]))\n\n    # import math\n    # q = int(stdin)\n    # for _ in range(q):\n    #     n = int(stdin)\n    #     ans = [math.inf] * 3\n    #     if n % 2 == 0:\n    #         ans[0] = 0\n    #     if n % 3 == 0:\n    #         ans[1] = min(ans[0], ans[1]) + 1\n    #         ans[0] = 0\n    #     if n % 5 == 0:\n    #         ans[2] = min(ans[0], ans[2]) + 1\n    #         ans[1] = 0\n    #     print(-1 if any(x == math.inf for x in ans) else min(ans) - 1)\n\n    import math\n    q = int(stdin)\n    for _ in range(q):\n        n = int(stdin)\n        if n == 1:\n            print(0)\n        if n % 2 == 0:\n            if n % 3 == 0:\n                if n % 5 == 0:\n                    print(min(6, math.inf))\n                else:\n                    print(min(5, math.inf))\n            else:\n                print(min(4, math.inf))\n        elif n % 3 == 0:\n            if n % 5 == 0:\n                print(min(6, math.inf))\n            else:\n                print(min(5, math.inf))\n        elif n % 5 == 0:\n            print(min(6, math.inf))\n        else:\n            print(math.inf)\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(stdin.split())\n    q = int(stdin.split()[0])\n    moves = []\n    for i in range(q):\n        n = int(stdin.split()[i + 1])\n        moves.append(count_moves(n))\n\n    return''.join(map(str, moves))\n\n\ndef"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    moves = 0\n    for i in range(q):\n        n = int(stdin)\n        if n == 1:\n            moves = 0\n            break\n        while n!= 1:\n            if n % 2 == 0:\n                n = n / 2\n                moves += 1\n            elif n % 3 == 0:\n                n = n / 3\n                moves += 1\n            elif n % 5 == 0:\n                n = n / 5\n                moves += 1\n            else:\n                moves = -1\n                break\n        if n == 1:\n            moves += 1\n        else:\n            moves = -1\n        print(moves)\n    return moves\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    results = []\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        if n % 2 == 0:\n            results.append(n // 2)\n        elif n % 3 == 0:\n            results.append(n // 3)\n        elif n % 5 == 0:\n            results.append(n // 5)\n        else:\n            results.append(-1)\n    return '\\n'.join(map(str, results))\n\nsolution(sys.stdin)"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return..."
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of moves required to obtain 1 from n.\"\"\"\n    # your code here\n    return \"\""
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        if not n & 1 and n % 2 == 0:\n            print(0)\n        elif not n & 3 and n % 3 == 0:\n            print(1)\n        elif not n & 5 and n % 5 == 0:\n            print(2)\n        elif n == 1:\n            print(0)\n        else:\n            print(-1)\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        field = [int(s) for s in stdin.readline().split()]\n        ans = 'NO'\n        for i in range(n):\n            if field[i] > 0:\n                ans = 'YES'\n                break\n        if ans == 'NO':\n            continue\n        while True:\n            new_field = []\n            for i in range(n):\n                if field[i] == 0:\n                    continue\n                if field[i] > 0:\n                    new_field.append(field[i] - 1)\n                    continue\n                else:\n                    new_field.append(field[i] + 2)\n            if max(new_field) > 0:\n                ans = 'NO'\n                break\n            field = new_field\n        print(ans)\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # We must check if we can finish by \"stacking\" figures in the columns\n    # (this is only possible when each column is greater than or equal to 3)\n\n    # Input\n    # n: number of columns\n    # a: columns heights\n\n    # Output\n    # \"YES\" if we can finish or \"NO\" otherwise\n\n    # Read n\n    n = stdin.split(\"\\n\")[0]\n    n = int(n)\n\n    # Read a\n    a = stdin.split(\"\\n\")[1].split(\" \")\n    a = [int(x) for x in a]\n\n    # Read t\n    t = int(stdin.split(\"\\n\")[2])\n\n    # Loop through t\n    for i in range(t):\n        # Loop through columns\n        for j in range(n):\n            # Finish if we have a >= 3\n            if a[j] >= 3:\n                # Finish if we have 3 or more in a\n                if sum(a) >= 3:\n                    return \"YES\"\n                # Otherwise, subtract 1\n                a[j] -= 1\n                break\n\n    return \"NO\"\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if it is possible to clear the whole field by placing figures of size 2 \u00d7 1,\n    where the heights of the columns of the field are given in the input.\n    >>> solution(\"3\\n1 1 3\\n4\\n1 1 2 1\")\n    'NO'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        field = list(map(int, stdin.readline().split()))\n        if n == 1:\n            if field[0] > 0:\n                print('NO')\n                continue\n            print('YES')\n            continue\n        while True:\n            if not max(field):\n                break\n            field[field.index(max(field))] -= 1\n            for i in range(n):\n                if field[i] == 0:\n                    field[i] = max(field) + 2\n        if max(field) > 0:\n            print('NO')\n        else:\n            print('YES')\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        if n == 1:\n            print('YES')\n            continue\n        while a[0] > 0:\n            for i in range(1, n):\n                a[i] += 2\n            if any(a[i] < 0 for i in range(1, n)):\n                print('NO')\n                break\n            a[0] -= 1\n            for i in range(1, n):\n                a[i] -= 1\n        if a[0] > 0:\n            print('NO')\n        else:\n            print('YES')\n\ndef"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It doesn't matter if you change stdin, just use it to get the input\n    n = int(stdin)\n    height = stdin.split()\n    height = [int(x) for x in height]\n    print(height)\n    for i in range(n):\n        if height[i] > 0:\n            for j in range(i, n):\n                height[j] = height[j] -1\n            for k in range(i+1, n):\n                height[k] = height[k] +1\n    print(height)\n    for j in range(n):\n        if height[j] > 0:\n            return 'NO'\n    return 'YES'\n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    height = input().split()\n    height = [int(x) for x in height]\n    print(solution(height))\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\nabacaba\\nbacabaa\")\n    4\n    >>> solution(\"5\\nzcabd\\dbacz\")\n    0\n    \"\"\"\n\n    def swap(x: str, y: str, n: int) -> str:\n        \"\"\"\n        >>> swap(\"a\", \"b\", 5)\n        'ba'\n        >>> swap(\"a\", \"b\", 4)\n        'ab'\n        >>> swap(\"a\", \"b\", 3)\n        'ba'\n        \"\"\"\n        return x[:n // 2] + y[n // 2:] + x[n // 2:] + y[:n // 2]\n\n    a, b = stdin.split()\n    n = len(a)\n    a = list(a)\n    b = list(b)\n\n    min_moves = 10 ** 6\n    for i in range(1, n - 1):\n        a[i], b[i] = b[i], a[i]\n        moves = 0\n        moves += swap(a, b, i)\n        moves += swap(a, b, n - i)\n        if a == b:\n            min_moves = min(min_moves, moves)\n        a[i], b[i] = b[i], a[i]\n\n    return min_moves\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split('\\n'))\n    if len(a)!= len(b):\n        return abs(len(a) - len(b))\n    elif len(a) == len(b) == 0:\n        return 0\n    else:\n        sa = sorted([(a[i], i) for i in range(len(a))])\n        sb = sorted([(b[i], i) for i in range(len(b))])\n        sa_dif = [i - j for i, j in zip(sa, sb) if i[0]!= j[0]]\n        sb_dif = [i - j for i, j in zip(sb, sa) if i[0]!= j[0]]\n        sa_dif.sort(reverse=True)\n        sb_dif.sort(reverse=True)\n        return len(sa_dif) + len(sb_dif)\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    return a[::-1] == b[::-1]\n\n\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin[1:(n + 1)]\n    b = stdin[(n + 2):(n * 2 + 1)]\n    \n    return min(\n        len(\n            [\n                i\n                for i in range(n)\n                if a[i]!= b[i] and a[i]!= a[(n - i) % n] and b[i]!= b[(n - i) % n]\n            ]\n        ),\n        len(\n            [\n                i\n                for i in range(n)\n                if a[i]!= b[i] and a[i]!= a[(n - i) % n] and b[i]!= b[(n - i) % n]\n            ]\n        ) - 1\n    )\n\n\ndef"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^2) / O(n)\"\"\"\n    inputs = stdin.splitlines()\n    n = int(inputs[0])\n    a, b = inputs[1], inputs[2]\n    count = 0\n    while True:\n        a_n = a[n - 1]\n        b_n = b[n - 1]\n        if a_n == b_n:\n            break\n        for i in range(1, n + 1):\n            a_i, b_i = a[i - 1], b[i - 1]\n            if a_i!= b_i:\n                count += 1\n                a = a[:i - 1] + b_i + a[i:]\n                b = b[:i - 1] + a_i + b[i:]\n                break\n    return str(count)\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = [line.split('\\n') for line in stdin.split('\\n\\n')]\n\na = stdin[0][0]\nb = stdin[1][0]\n\nfor _ in range(len(a) - len(b)):\n    if a < b:\n        a = 'a' + a\n    else:\n        b = 'a' + b\n\nprint(a, b)\n\nprint(sum([a[i]!= b[i] for i in range(len(a))]))\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    return min(\n        sum(a[i]!= b[i] for i in range(len(a))),\n        sum(b[i]!= a[i] for i in range(len(b))),\n        sum(a[i]!= b[i] for i in range(len(a))),\n        sum(b[i]!= a[i] for i in range(len(b)))\n    )\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    # INPUT:\n    #\n    # 7\n    # abacaba\n    # bacabaa\n    #\n    # OUTPUT:\n    #\n    # 4\n    #\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n    first = a[0]\n    if len(a) > 1:\n        a = a.replace(first, '')\n    if len(b) > 1:\n        b = b.replace(first, '')\n    swap_a_1_b_1 = a[0] + a[1] + b[1] + b[0]\n    swap_a_2_b_2 = a[0] + b[0] + a[2] + b[2]\n    if len(a) % 2 == 0:\n        swap_a_3_b_3 = a[0] + a[3] + b[3] + b[0]\n    else:\n        swap_a_3_b_3 = a[0] + a[3] + b[3] + b[0]\n    if len(b) % 2 == 0:\n        swap_a_4_b_4 = a[0] + a[4] + b[4] + b[0]\n    else:\n        swap_a_4_b_4 = a[0] + a[4] + b[4] + b[0]\n    if len(a) > 2:\n        if len(a) % 2 == 0:\n            swap_a_5_b_5 = a[0] + a[5] + b[5] + b[0]\n        else:\n            swap_a_5_b_5 = a[0] + a[5] + b[5] + b[0]\n    if len(a) > 3:\n        if len(a) % 2 == 0:\n            swap_a_6_b_6 = a[0] + a[6] + b[6] + b[0]\n        else:\n            swap_a_6_b_6 = a[0] + a[6] + b[6] + b[0]\n\n    print(min(len(swap_a_1_b_1), len(swap_a_2_b_2), len(swap_a_3_b_3), len(swap_a_4_b_4), len(swap_a_5_b_5), len(swap_a_6_b_6)))\n\n\nsolution(input())\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a: str = stdin[0]\n    b: str = stdin[1]\n    n = len(a)\n    b = list(b)\n    b.sort()\n    b.reverse()\n    c = 0\n    d = 0\n    for i in range(n):\n        if a[i]!= b[i]:\n            c += 1\n            a = list(a)\n            a[i] = b[i]\n            a = ''.join(a)\n    return c\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    T = int(stdin.readline())\n    answers = [0] * T\n\n    for i in range(T):\n        A, B, K = [int(x) for x in stdin.readline().split()]\n        answers[i] = K * A - B\n\n    return '\\n'.join([str(answer) for answer in answers])\n    '''\n    return '\\n'.join([str(K * A - B) for A, B, K in [int(x) for x in stdin.split()]])\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    :param stdin: The input string\n    :return: The solution string\n    \"\"\"\n    pass\n    \"\"\"\n    # Read in the input\n    t = int(stdin[0])\n    frogs = [list(map(int, line.split())) for line in stdin[1:]]\n    print(frogs)\n\n    # Create a list of answers\n    ans = []\n    # Loop through all the queries\n    for i in range(t):\n        # Check if we need to do a right jump\n        if frogs[i][0] % 2 == 0:\n            # Check if we need to do a left jump\n            if frogs[i][1] % 2 == 0:\n                ans.append(frogs[i][2] + frogs[i][0] - frogs[i][1])\n            else:\n                ans.append(frogs[i][2] + frogs[i][0])\n        # Check if we need to do a left jump\n        else:\n            # Check if we need to do a right jump\n            if frogs[i][1] % 2 == 0:\n                ans.append(frogs[i][2] + frogs[i][1] - frogs[i][0])\n            else:\n                ans.append(frogs[i][2] + frogs[i][1])\n\n    print(ans)\n    # Return the answer string\n    return''.join(map(str, ans))\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\ndef"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def move(x, dx, dy):\n        x += dx\n        if x >= 0:\n            x = x % A\n        else:\n            x = x % -A\n        y += dy\n        return x, y\n\n    A, B, K = map(int, stdin.split())\n    # if K <= 0:\n    #     return\n    # total = K * ((2 * K) % (A - B) + A)\n    total = (((A - B) * K) // GCD(A - B, K)) * A\n    x = 0\n    for i in range(K):\n        x, y = move(x, A, B)\n        if i % 2 == 0:\n            x, y = move(x, -A, -B)\n    return total - x\n\n\ndef"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # Parse input\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        a, b, k = map(int, stdin.readline().strip().split())\n        print(k - 1 + k - 1 + k - 1 - k + k)\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    tests = stdin.split(\"\\n\")\n    total_length = int(tests[0])\n    frog_jumps = tests[1:]\n    n_frogs = len(frog_jumps)\n\n    for i in range(n_frogs):\n        frog_jumps[i] = [\n            int(frog_jumps[i].split()[0]),\n            int(frog_jumps[i].split()[1]),\n            int(frog_jumps[i].split()[2])\n        ]\n\n    answer = []\n\n    for i in range(n_frogs):\n        jump_count = 0\n        jumps = frog_jumps[i][2]\n        while jumps > 0:\n            if jumps & 1:\n                jump_count += frog_jumps[i][0]\n            else:\n                jump_count += frog_jumps[i][1]\n            jumps >>= 1\n        answer.append(jump_count)\n\n    return '\\n'.join([str(i) for i in answer])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the Frogs Jumper problem.\n    \"\"\"\n    t = int(stdin.readline().strip())\n\n    for _ in range(t):\n        line = stdin.readline().strip().split()\n        a, b, k = int(line[0]), int(line[1]), int(line[2])\n        \n        print(a*k - b*(k-1))\n\n    return \"\"\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q, n = stdin.splitlines()\n    q, n = int(q), int(n)\n    m = n + 1\n    good = [False for i in range(m)]\n    good[0] = True\n    power3 = [0 for i in range(m)]\n    while not good[m]:\n        k = power3[m - 1]\n        while power3[m] == k:\n            m += 1\n            if m > n:\n                return m - 1\n        good[m] = True\n        while m % 3 == 0:\n            m //= 3\n            power3[m] = k + 1\n    return m - 1\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q, = map(int, stdin.split('\\n'))\n    for i in range(q):\n        n, = map(int, stdin.split('\\n')[i].split())\n        print(next_good_number(n))\n\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        x = (n // 3) + 1\n        while x > n:\n            x = (x // 3) + 1\n        print(x)\n"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return solve(stdin)\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(solution_solve(stdin))\n\ndef"
    },
    {
        "number": 4474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds smallest good number greater than or equal to n.\"\"\"\n    n = int(stdin)\n    while True:\n        if n <= 3 ** len(str(n)):\n            n += 3 ** len(str(n))\n        else:\n            break\n\n    return n\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y, n = map(int, stdin.split('\\n')[0].split(' '))\n    count = n - (a // x + b // y)\n    if count >= 0:\n        print(a * b)\n    else:\n        print(a * b // gcd(a, b))\n    return ''\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for i in range(cases):\n        [a, b, x, y, n] = [int(x) for x in stdin.readline().split(' ')]\n        total = 0\n        if x > y:\n            min_val = x\n        else:\n            min_val = y\n        while n > 0:\n            if min_val <= a:\n                total += a\n                a -= 1\n                n -= 1\n            elif min_val <= b:\n                total += b\n                b -= 1\n                n -= 1\n            else:\n                min_val -= 1\n                n -= 1\n        print(total)\n\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n   ..."
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'\n\"\"\"\n\nimport sys\nfrom typing import List, Set, Tuple, Dict, Callable, Optional\n\ndef"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"10 10 8 5 3\")\n    70\n    >>> solution(\"12 8 8 7 2\")\n    77\n    >>> solution(\"12343 43 4543 39 123212\")\n    177177\n    >>> solution(\"1000000000 1000000000 1 1 1\")\n    999999999000000000\n    >>> solution(\"1000000000 1000000000 1 1 1000000000\")\n    999999999\n    >>> solution(\"10 11 2 1 5\")\n    10\n    >>> solution(\"10 11 9 1 10\")\n    55\n    \"\"\"\n    n, a, x, y, b = list(map(int, stdin.split()))\n    return min(a * b, y * (n - 1) + (y - 1) // 2 * x)\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    results = []\n    for i in range(t):\n        inputs = [int(i) for i in stdin.split(\"\\n\")[1:]]\n        a, b, x, y, n = inputs\n        if n < 0:\n            results.append(0)\n            continue\n        if a > x and b > y:\n            results.append(0)\n            continue\n        if x > y:\n            results.append(a * b)\n            continue\n        else:\n            remain = n\n            if a >= x:\n                cnt = 1\n            else:\n                cnt = n // a + 1\n            while cnt > 0:\n                if b > y:\n                    a += 1\n                    remain -= 1\n                    cnt -= 1\n                else:\n                    b += 1\n                    remain -= 1\n                    cnt -= 1\n            if remain > 0:\n                a += 1\n            if a <= x:\n                b -= 1\n            if b >= y:\n                a -= 1\n            if a <= x and b >= y:\n                results.append(a * b)\n            else:\n                results.append(0)\n    return \"\\n\".join([str(i) for i in results])\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO: Docstring for solution.\n\n    :stdin: TODO\n    :returns: TODO\n\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    lines = lines[1:]\n    arr = [list(map(int, line.split())) for line in lines]\n    arr = sorted(arr, key=lambda x: x[0])\n\n    possible_products = [arr[0][1]]\n    for i in range(1, len(arr)):\n        if arr[i][0] - possible_products[-1] > arr[i][1]:\n            possible_products.append(arr[i][1])\n        else:\n            possible_products[-1] = arr[i][1]\n\n    return possible_products[-1]\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # for line in stdin:\n    #     a, b = line.split()\n    #     a, b = int(a), int(b)\n    #     print(b - a - 2)\n    return \"\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It doesn't matter what you return,\n    # it's only used for evaluation\n    return stdin\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        a, b = map(int, stdin.readline().split())\n        print(math.ceil((b - a) / 2))\n\n\nsolution(input())\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = io.StringIO(stdin)\n    sys.stdout = io.StringIO()\n    t = int(sys.stdin.readline())\n    for _ in range(t):\n        a, b = map(int, sys.stdin.readline().split())\n        if a == b:\n            print(0)\n        elif a > b:\n            print(a-b)\n        else:\n            x = 1\n            while x * 2 <= b:\n                x = x * 2\n            x //= 2\n            y = 0\n            while b < x:\n                y = y + 1\n                x = x // 2\n            y = y + b - x\n            print(y)\n    return sys.stdout.getvalue()"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def num_to_dec(num: str) -> int:\n        return int(num, 2)\n\n    def dec_to_bin(dec: int) -> str:\n        return bin(dec)[2:]\n\n    def num_to_bin(num: str) -> str:\n        return dec_to_bin(num_to_dec(num))\n\n    def bin_to_num(bin: str) -> int:\n        return int(bin, 2)\n\n    def num_to_num(num: str) -> str:\n        return num_to_bin(num)\n\n    def increment(num: str) -> str:\n        return num_to_num(num) + '1'\n\n    def decrement(num: str) -> str:\n        return num_to_num(num) + '0'\n\n    def add(num1: str, num2: str) -> str:\n        return num_to_num(num1) + num_to_num(num2)\n\n    def subtract(num1: str, num2: str) -> str:\n        num1_num2_sum = add(num1, num2)\n        num1_num2_sum = increment(num1_num2_sum)\n        return num_to_num(num1_num2_sum)\n\n    def bin_to_dec(bin: str) -> int:\n        return int(bin, 2)\n\n    def dec_to_bin(dec: int) -> str:\n        return bin(dec)[2:]\n\n    def dec_to_dec(dec: int) -> int:\n        return dec\n\n    def num_to_dec(num: str) -> int:\n        return int(num, 2)\n\n    def dec_to_num(dec: int) -> str:\n        return dec_to_bin(dec_to_dec(dec))\n\n    def num_to_num(num: str) -> str:\n        return num\n\n    def increment(num: str) -> str:\n        return num_to_num(num) + '1'\n\n    def decrement(num: str) -> str:\n        return num_to_num(num) + '0'\n\n    def add(num1: str, num2: str) -> str:\n        return num_to_num(num1) + num_to_num(num2)\n\n    def subtract(num1: str, num2: str) -> str:\n        num1_num2_sum = add(num1, num2)\n        num1_num2_sum = increment(num1_num2_sum)\n        return num_to_num(num1_num2_sum)\n\n    def is_increment(num: str) -> bool:\n        if num[0] == '0':\n            return True\n        return False\n\n    def is_decrement(num: str) -> bool:\n        if num[0] == '1':\n            return True\n        return False\n\n    def is_add(num1: str, num2: str) -> bool:\n        if num1[0] == num2[0]:\n            return True\n        return False\n\n    def is_subtract(num1: str, num2: str) -> bool:\n        if num1[0]!= num2[0]:\n            return True\n        return False\n\n    num_tests = int(stdin)\n\n    for i in range(num_tests):\n        num1, num2 = stdin.split()\n        num1 = int(num1)\n        num2 = int(num2)\n\n        if is_add(num1, num2) and is_increment(num2):\n            print(1)\n        elif is_add(num1, num2) and is_decrement(num2):\n            print(0)\n        elif is_subtract(num1, num2) and is_increment(num2):\n            print(1)\n        elif is_subtract(num1, num2) and is_decrement(num2):\n            print(0)\n        elif is_increment(num1) and is_increment(num2):\n            print(1)\n        elif is_increment(num1) and is_decrement(num2):\n            print(0)\n        elif is_decrement(num1) and is_decrement(num2):\n            print(1)\n        elif is_decrement(num1) and is_increment(num2):\n            print(0)\n        else:\n            print(2)\n"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        print(int(a^b))\n\n\ndef"
    },
    {
        "number": 4476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, b):\n        # write your code in Python 3.6\n        if a > b:\n            return 0\n        elif a < 0:\n            return False\n        elif a == 0 and b == 0:\n            return 0\n        if a % 2 == 0:\n            return solve(a + b, b) + 1\n        else:\n            return min(solve(a - b, b) + 1, solve(a, b - a))\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        print(solve(a, b))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    count4 = 0\n    count5 = 0\n    count6 = 0\n    count7 = 0\n    count8 = 0\n    count9 = 0\n    for i in stdin:\n        if i == \"1\":\n            count1 += 1\n        if i == \"2\":\n            count2 += 1\n        if i == \"3\":\n            count3 += 1\n        if i == \"4\":\n            count4 += 1\n        if i == \"5\":\n            count5 += 1\n        if i == \"6\":\n            count6 += 1\n        if i == \"7\":\n            count7 += 1\n        if i == \"8\":\n            count8 += 1\n        if i == \"9\":\n            count9 += 1\n    print(count1 + count2 + count3 + count4 + count5 + count6 + count7 + count8 + count9)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"22\\n9999\\n1\\n777\")\n    13\n    \"\"\"\n    num = stdin[0]\n    res = 0\n    for i in range(1, len(num) + 1):\n        for j in range(1, i + 1):\n            if int(num[-j]) == j:\n                res += j\n                break\n    return res\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution iterates over all the digits of the input\n    \"\"\"\n    counter = 0\n    for i in range(1, 10000):\n        if i % 10 == int(stdin):\n            counter += 1\n        if i % 1000 // 100 == int(stdin):\n            counter += 1\n        if i % 10000 // 10000 == int(stdin):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    # t = int(stdin)\n    # for i in range(t):\n    #     # number = int(stdin)\n    #     print(number)\n    return stdin\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the number of digits pressed by character.\n    :param stdin: Input string\n    :return: Number of digits pressed by character.\n    \"\"\"\n    count = 0\n    for char in stdin:\n        if char in ['1', '2', '3', '4', '5', '6', '7', '8', '9']:\n            count += 1\n    return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    return ''\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\"\"\"\n  def sum_of_seq(seq: List[int]) -> int:\n\"\"\"\n\"\"\"\n  def solve(seqs: List[List[int]], seq_sum: int) -> bool:\n\"\"\"\n\"\"\"\n  def add_to_seq(seq: List[int], seq_to_add: List[int],\n                 to_add: int) -> Tuple[List[int], int]:\n\"\"\"\n\"\"\"\n  def remove_from_seq(seq: List[int], seq_to_remove: List[int],\n                      to_remove: int) -> Tuple[List[int], int]:\n\"\"\"\n\"\"\"\n  def check_sum(seq_a: List[int], seq_b: List[int]) -> bool:\n\"\"\"\n\"\"\"\n  def solve(seqs: List[List[int]], seq_sum: int) -> bool:\n\"\"\"\n\"\"\"\n  seqs: List[List[int]]\n  k: int\n  n: List[int]\n  seq_sum: int\n\n  solve(seqs, k)\n\"\"\"\n\ndef"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, result = int(stdin.readline()), set()\n    for _ in range(k):\n        n, a = list(map(int, stdin.readline().split()))\n        a.sort()\n        result.add(tuple(a))\n    a = sum([len(x) for x in result])\n    if a == 0:\n        return 'NO'\n    b = sum([sum(x) for x in result])\n    for x, y in result:\n        if x == y:\n            continue\n        if b - (len(x) + len(y)) == 0:\n            return 'YES\\n{0} {1}'.format(len(x), len(y))\n    return 'NO'\nprint(solution(stdin))\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input and output from STDIN.\n\n    :param stdin: str, the input string\n    :return: str, the output string\n    \"\"\"\n    inp = get_input(stdin)\n    k = inp[0]\n    stdout = ''\n    for i in range(1, k + 1):\n        n = inp[i][0]\n        s = inp[i][1:]\n        s.sort()\n        for j in range(i + 1, k + 1):\n            s2 = inp[j][1:]\n            s2.sort()\n            if sum(s) == sum(s2):\n                stdout = 'YES'+ str(i) +'' + str(n - 1) +'' + str(j) +'' + str(n - 1) + '\\n'\n                return stdout\n    stdout = 'NO\\n'\n    return stdout\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input from stdin and returns string that contains two integers - \n    first and second elements of the sequence that satisfy the given conditions.\n    \n    \"\"\"\n    \n    pass\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    k = int(lines[0])\n    sequences = [lines[1].split(' ') for lines in lines[1:]]\n    # sequences = [[int(num) for num in line.split(' ')] for line in lines[1:]]\n\n    for i in range(k):\n        sequences[i] = [int(num) for num in sequences[i]]\n\n    pairs = combinations(sequences, 2)\n    for pair in pairs:\n        diff = abs(sum(pair[0]) - sum(pair[1]))\n        if diff == 1:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    k = int(stdin)\n    if k < 2 or k > 10 ** 5:\n        return \"NO\"\n    l = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    for i in l:\n        if i[0] < 1 or i[0] > 10 ** 5:\n            return \"NO\"\n    if len(l)!= k:\n        return \"NO\"\n    for i in range(len(l) - 1):\n        for j in range(i + 1, len(l)):\n            if i == j:\n                continue\n            if sum(l[i][1:]) == sum(l[j][1:]):\n                return \"YES\\n{}\\n{}\\n{}\".format(i + 1, j + 1, sum(l[i][1:]))\n\n    return \"NO\"\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    @functools.cache\n    def dp(i, k):\n        if i == len(A) or k == 0:\n            return 0\n        return max(A[i] + dp(i + 1, k - 1), dp(i + 1, k))\n\n    A = list(map(int, stdin.split('\\n')[1].split(' ')))\n    K = int(stdin.split('\\n')[0])\n    print(dp(0, K))\n    return\n\n\nimport functools\n\nimport unittest\n\n\nclass Test(unittest.TestCase):\n\n    def test_solution1(self):\n        self.assertEqual(5, solution('4 2 3\\n1'))\n\n    def test_solution2(self):\n        self.assertEqual(6, solution('3 -1 0 2\\n3'))\n\n    def test_solution3(self):\n        self.assertEqual(13, solution('2 -3 -1 5 -4\\n2'))\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(**json.loads(stdin)))\n\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(A))\n\ndef"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(ans)\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'no'\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n\n\nclass Solution:\n    def largestSumAfterKNegations(self, A: List[int], K: int) -> int:\n"
    },
    {
        "number": 4479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'a'"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # 3 \u2264 A.length \u2264 50000\n    # -10^4 \u2264 A[i] \u2264 10^4\n\"\"\""
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    return ''\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Input:\n    # Output:\n\n    return \"\"\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    return ''\n'''\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        total = sum(A)\n        if total % 3: return False\n        ave = total // 3\n        cur = 0\n        for a in A:\n            cur += a\n            if cur == ave:\n                cur = 0\n                continue\n            if cur == 2*ave:\n                return True\n        return False\n\n\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        # https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/discuss/84596/Python-easy-understand-solution\n        S = sum(A)\n        if S % 3:\n            return False\n        S //= 3\n        if any(i+S!= j for i,j in zip([0]+A,A+[0])):\n            return False\n        return True\n"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # import sys\n    # input = sys.stdin.readline\n    \n    A = [int(s) for s in input().split()]\n    m = max(A)\n    A.remove(m)\n    \n    if sum(A) % 3:\n        return 'false'\n    \n    s = sum(A) // 3\n    \n    if s < m:\n        return 'false'\n    \n    if s == m:\n        if s in A:\n            return 'true'\n        else:\n            return 'false'\n    \n    a = 0\n    b = 0\n    c = 0\n    i = 0\n    \n    while i < len(A):\n        if A[i] < s:\n            a += A[i]\n            i += 1\n        elif A[i] == s:\n            c += 1\n            i += 1\n        else:\n            b += A[i]\n            i += 1\n            \n            if b < a or c < 2:\n                return 'false'\n            \n            if b == a and c == 2:\n                return 'true'\n            \n            b = 0\n            a = 0\n            c = 0\n    \n    return 'false'"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nclass Solution:\n    def canThreePartsEqualSum(self, A: List[int]) -> bool:\n        if len(A) < 3:\n            return False\n        summ = sum(A)\n        if summ % 3!= 0:\n            return False\n        summ_of_each_part = summ//3\n        summ_counter = 0\n        for i in A:\n            summ_counter += i\n            if summ_counter == summ_of_each_part:\n                summ_counter = 0\n                continue\n            elif summ_counter!= summ_of_each_part:\n                return False\n        return True\n\n\ndef"
    },
    {
        "number": 4480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    votes = stdin.split('\\n')\n    votes = votes[:len(votes) - 1]\n    max_votes = 0\n    max_vote = 0\n    max_vote_list = []\n    for vote in votes:\n        count = 0\n        for char in vote:\n            count += 1\n        if count > max_votes:\n            max_vote = vote\n            max_votes = count\n    for vote in votes:\n        count = 0\n        for char in vote:\n            count += 1\n        if count == max_votes:\n            max_vote_list.append(vote)\n    for vote in max_vote_list:\n        print(vote)"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return lexicographically largest possible string formed from list of strings.\"\"\"\n    votes = [line.split(':') for line in stdin.strip().split('\\n')]\n    return sorted(set(''.join(sorted(v[0])) for v in votes), reverse=True)[0]\n\"\"\"\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = {}\n    for _ in range(n):\n        s = stdin.readline().rstrip()\n        votes[s] = votes.get(s, 0) + 1\n    max_s = max(votes.items(), key=lambda x: x[1])[0]\n    return '\\n'.join(sorted(list(filter(lambda x: x!= max_s, votes.keys()))))\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n    import sys\n\n    stdin = stdin.split()\n    N = int(stdin[0])\n    Ss = stdin[1:]\n    occ = {}\n    for S in Ss:\n        if S in occ:\n            occ[S] += 1\n        else:\n            occ[S] = 1\n    print(occ)\n    c = collections.Counter(occ)\n    print(c)\n    largest = max(occ.values())\n    print(largest)\n    return [k for k, v in occ.items() if v == largest]\n\"\"\"\n\ndef"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    print(\"----------\")\n    stdin = stdin.split(\"\\n\")\n    stdin.remove(stdin[0])\n    stdin.remove(stdin[0])\n\n    for item in stdin:\n        item_list = list(item)\n        i = 0\n        while i < len(item_list):\n            if item_list[i] == \":\":\n                if item_list[i - 1] == \" \":\n                    item_list.pop(i - 1)\n                    item_list.pop(i - 1)\n                if i + 1 < len(item_list):\n                    item_list.pop(i + 1)\n                    item_list.pop(i + 1)\n                i = 0\n            i += 1\n        item = \"\".join(item_list)\n        answer.append(item)\n    answer = list(set(answer))\n    answer.sort()\n    return answer\n\n\ndef"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    votes_string = stdin.split('\\n')[1:]\n    votes_list = []\n    for vote in votes_string:\n        votes_list.append(vote.split(':'))\n\n    votes_dic = {}\n    for vote in votes_list:\n        if vote[0] not in votes_dic:\n            votes_dic[vote[0]] = [vote[1]]\n        else:\n            votes_dic[vote[0]].append(vote[1])\n\n    keys_list = list(votes_dic.keys())\n    keys_list.sort()\n\n    max_votes = 0\n    for key in keys_list:\n        if len(votes_dic[key]) > max_votes:\n            max_votes = len(votes_dic[key])\n            max_key = key\n    \n    res_list = []\n    for key in keys_list:\n        if len(votes_dic[key]) == max_votes:\n            res_list.append(key)\n    res_list.sort()\n\n    return''.join(res_list)\n"
    },
    {
        "number": 4481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    s = stdin[1]\n    dp = {}\n    res = []\n    for i in range(N):\n        if s[i] in dp.keys():\n            dp[s[i]] += 1\n        else:\n            dp[s[i]] = 1\n    max_key = max(dp.keys(), key=(lambda k: dp[k]))\n    for key, value in dp.items():\n        if value == dp[max_key]:\n            res.append(key)\n    res.sort()\n    for i in res:\n        print(i)\n    return ''\n\ndef"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a = [int(x) for x in stdin.split(' ')]\n    return str(min(sum((x-y)**2 for x in a)**0.5 for y in a))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    'code'\n    pass"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, a = [int(x) for x in stdin.strip().split(\" \")]\n    return str(min([a - i for i in range(1, N + 1)] + [abs(i - a) for i in range(1, N + 1)]))\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    arr = [int(i) for i in lines[1].split()]\n    arr.sort()\n    \n    # sum_arr = sum(arr)\n    # ans = 0\n    # for i in range(1, n):\n    #     ans += (arr[i] - arr[i - 1]) ** 2\n    # ans += (arr[0] - 0) ** 2\n    # ans += (arr[n - 1] - sum_arr) ** 2\n    # return ans\n    return min(sum(map(lambda x: x[1] - x[0], zip([0] + arr, arr + [sum(arr)]))) ** 2, sum([(arr[i] - arr[i - 1]) ** 2 for i in range(1, n)]) ** 2)\n    \n    \n    \n    \ndef"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the minimum total cost\n    \n    n, *data = [int(x) for x in stdin.split('\\n')]\n    a = [0] + data\n    n = len(a)\n    arr = list(range(1, n))\n    arr.sort(key=a.__getitem__)\n    arr.sort(key=lambda x: a[x], reverse=True)\n    a.sort()\n    ans = 0\n    for i in range(n - 1):\n        ans += (a[arr[i + 1]] - a[arr[i]]) ** 2\n    return str(ans)\n    \n\ndef"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    res = 0\n    for i in range(1, len(A)):\n        res += (A[i] - A[i - 1]) ** 2\n    print(res)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = [int(x) for x in stdin.splitlines()]\n    A = sorted(A)\n    n = len(A)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += (A[j] - A[i]) ** 2\n    return str(ans)\n"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    return min(\n        sum((a - b) ** 2 for a, b in zip(A, A[1:] + [A[0]]))\n        for a in A\n    )\n\n\ndef"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    return str(min([sum([abs(a[i]-a[j])**2 for i in range(N) if i!= j]) for j in range(N)]))"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"84\""
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Write your code here\n    x, a, b = [int(i) for i in stdin.split(\"\\n\")]\n    if a > x:\n        return str(x)\n    elif b <= a:\n        return str(a - b)\n    else:\n        return str(x - a + b)"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    money: int = int(stdin)\n    cake: int = int(stdin)\n    donuts: int = int(stdin)\n\n    cake_price: int = cake * 1\n    donuts_price: int = donuts * 2\n\n    total_price: int = cake_price + donuts_price\n\n    left_money: int = money - total_price\n\n    print(left_money)\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    return str(x - (a + b))"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    a, b = int(stdin), int(stdin)\n    while a < b:\n        a *= 2\n        b *= 2\n    if a >= b:\n        print(X - (a - b))\n    else:\n        print(X - (a - b))\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Convert the input string into appropriate types and output the result.\n\n    Args:\n        stdin (str): Input string given by Standard Input.\n\n    Returns:\n        str: The amount of yen you have left after shopping.\n    \"\"\"\n    x = int(stdin.strip())\n    a = int(stdin.strip())\n    b = int(stdin.strip())\n    if a + b <= x:\n        print(x - (a + b))\n    else:\n        print(x - a - b)\n    return ''\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    x = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    y = x - (a + b)\n    return y\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def test(arg: str):\n        try:\n            val = int(arg)\n        except:\n            raise Exception(\"Cannot parse the argument to integer\")\n        if val < 0:\n            raise Exception(\"Negative integers are not accepted\")\n\n    while len(stdin) > 0:\n        stdin = stdin.split('\\n')\n        test(stdin[0])\n        test(stdin[1])\n        test(stdin[2])\n        test(stdin[3])\n        print(stdin[0])\n        print(stdin[1])\n        print(stdin[2])\n        print(stdin[3])\n\nsolution(\"1234\\n150\\n100\\n\")\n"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds how much money you have left after buying some goods\n    :param stdin: str\n    :return: str\n    \"\"\"\n    money = stdin.split()\n    money = list(map(int, money))\n    cake, donuts = money[0], money[1]\n    money = money[2]\n    total_cake = cake\n    total_donuts = donuts\n\n    for i in range(cake):\n        total_cake += donuts\n        total_donuts += donuts\n\n    print(total_cake - money)\n    return total_cake - money\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2\")\n    8\n    >>> solution(\"5 1\")\n    1\n    >>> solution(\"3 5\")\n    10\n    >>> solution(\"2 10\")\n    100\n    >>> solution(\"1 2\")\n    0\n    \"\"\"\n    [n, m] = [int(x) for x in stdin.split()]\n    return sum((math.factorial(m) // math.factorial(i) // math.factorial(m - i) for i in range(n))) % (10 ** 9 + 7)\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2\")\n    '8'\n    >>> solution(\"5 4\")\n    '60'\n    >>> solution(\"7 7\")\n    '542'\n    \"\"\"\n    n, m = [int(i) for i in stdin.split(\" \")]\n    result = 1\n    for i in range(1, n + 1):\n        result *= (m + n - i) // i\n        result %= (10 ** 9 + 7)\n    print(result)\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    if n == 1:\n        return 1\n    # n is the number of monkeys, and m is the number of dogs\n    m += 1\n    n -= 1\n    total = n * m\n    if total == 0:\n        return 1\n    if total % 2 == 0:\n        return total // 2\n    else:\n        return total // 2 + 1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\nfrom functools import lru_cache\n\nfrom collections import Counter\nfrom copy import deepcopy\n\nstdin = \"\"\"4 3\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = map(int, stdin.split())\n\nreturn 2 * n * m * (n-1) * (m-1) % (10**9 + 7)\n\n------Problem-----\nSnuke and his dog Snuke-dog go to the mall to buy some snacks. They also brought a small pile of money.\n\nSnuke has N snacks and M dollars. He wants to buy as many snacks as possible, but he has only M dollars.\n\nEach snack costs A dollars. Snuke and his dog both have strength P.\n\nGiven these three numbers, Snuke wants to know how many snacks he can buy with his money and the dog\u2019s strength.\n\nThe problem is asking for the smallest number of snacks, so he needs to buy as many snacks as possible.\n\n------Solution------\ndef"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    if B > A:\n        return (A * (B - A + 1) // 2) % ((10 ** 9) + 7)\n    elif A == B:\n        return 1\n    else:\n        return 0\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    print(\n        pow(2, N, MOD)\n        * pow(2, M, MOD)\n        * pow(3, N * M, MOD)\n        % MOD\n    )"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first, second = stdin.split()\n    n, m = map(int, first.split())\n    return str(2**(n*m) % 1000000007)"
    },
    {
        "number": 4484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, _, N, M = stdin.split()\n    _N = [int(i) for i in N.split()]\n    _M = [int(i) for i in M.split()]\n    _temp = list(zip(_N, _M))\n    _list = list(map(lambda x: x[1] - x[0], _temp))\n    if 1 in _list:\n        return \"POSSIBLE\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return 'POSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n\n    def get_data(n: int, m: int, line: str) -> Tuple[List[int], Dict[str, List[int]]]:\n        data = dict()\n        data['start'] = list()\n        data['end'] = list()\n        for _ in range(m):\n            start, end = map(int, line.split())\n            data['start'].append(start)\n            data['end'].append(end)\n        return data['start'], data['end']\n\n    start, end = get_data(n, m, stdin)\n    start = {i + 1: v for i, v in enumerate(start)}\n    end = {i + 1: v for i, v in enumerate(end)}\n    start[1], end[n] = 1, n\n    end[1] = n\n\n    # check if exist a path from start to end\n    dfs_start = {1}\n    while dfs_start:\n        next_dfs_start = set()\n        for v in dfs_start:\n            for key, value in end.items():\n                if v == key:\n                    return 'POSSIBLE'\n                if v in start.keys() and key in end.keys():\n                    next_dfs_start.add(key)\n        dfs_start = next_dfs_start\n\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'POSSIBLE' if it is possible to go to Island N by using two boat services,\n    and 'IMPOSSIBLE' otherwise.\"\"\"\n    N, M = map(int, stdin.readline().split())\n    islands = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n    islands = set(islands)\n\n    if N == 1:\n        return \"POSSIBLE\" if N in islands else \"IMPOSSIBLE\"\n\n    if N == 2:\n        return \"POSSIBLE\" if 1 in islands and N in islands else \"IMPOSSIBLE\"\n\n    # At most 2 islands.\n    islands.update([1, N])\n    if len(islands) > 2:\n        return \"IMPOSSIBLE\"\n\n    # Check whether there are only two islands left.\n    islands = list(islands)\n    if len(islands) == 2:\n        return \"POSSIBLE\" if islands[0] + islands[1] == N else \"IMPOSSIBLE\"\n\n    # Check whether there are two islands and exactly one island left.\n    islands = list(islands)\n    if len(islands) == 3:\n        if (islands[0] + islands[1]) == N:\n            return \"POSSIBLE\" if (islands[1] + islands[2]) == N else \"IMPOSSIBLE\"\n        elif (islands[0] + islands[2]) == N:\n            return \"POSSIBLE\" if (islands[0] + islands[1]) == N else \"IMPOSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n\n    # Check whether there are three islands and exactly one island left.\n    islands = list(islands)\n    if len(islands) == 4:\n        if (islands[0] + islands[1]) == N:\n            if (islands[0] + islands[2]) == N:\n                return \"POSSIBLE\" if (islands[1] + islands[3]) == N else \"IMPOSSIBLE\"\n            elif (islands[2] + islands[3]) == N:\n                return \"POSSIBLE\" if (islands[0] + islands[1]) == N else \"IMPOSSIBLE\"\n            else:\n                return \"IMPOSSIBLE\"\n        elif (islands[0] + islands[3]) == N:\n            if (islands[0] + islands[2]) == N:\n                return \"POSSIBLE\" if (islands[1] + islands[3]) == N else \"IMPOSSIBLE\"\n            elif (islands[1] + islands[2]) == N:\n                return \"POSSIBLE\" if (islands[0] + islands[3]) == N else \"IMPOSSIBLE\"\n            else:\n                return \"IMPOSSIBLE\"\n        else:\n            return \"IMPOSSIBLE\"\n\n    # The worst case is that two islands and one island remain.\n    islands = list(islands)\n    if len(islands) == 3:\n        return \"POSSIBLE\" if (islands[0] + islands[1]) == N or (islands[0] + islands[2]) == N or (islands[1] + islands[2]) == N else \"IMPOSSIBLE\"\n\n    # It is impossible in this case.\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n1 2\\n2 3\")\n    'POSSIBLE'\n    >>> solution(\"3 2\\n1 2\\n2 1\")\n    'POSSIBLE'\n    >>> solution(\"3 2\\n1 2\\n2 3\")\n    'IMPOSSIBLE'\n    >>> solution(\"3 2\\n2 1\\n1 2\")\n    'POSSIBLE'\n    >>> solution(\"3 2\\n2 1\\n1 2\\n1 2\")\n    'IMPOSSIBLE'\n    >>> solution(\"3 2\\n2 1\\n1 2\\n3 2\")\n    'IMPOSSIBLE'\n    >>> solution(\"3 2\\n2 1\\n3 2\\n2 3\")\n    'IMPOSSIBLE'\n    \"\"\"\n    N, M = map(int, stdin.split())\n    service_list = []\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        service_list.append((a, b))\n    check_list = [0] * (N + 1)\n    service_list.sort()\n    for i, j in service_list:\n        if check_list[i] == 0 and check_list[j] == 0:\n            check_list[i] = 1\n            check_list[j] = 1\n        else:\n            return \"IMPOSSIBLE\"\n    return \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split(' ')]\n    line = stdin.strip().split('\\n')\n    line = [x.split(' ') for x in line]\n    line = [list(map(int, x)) for x in line]\n    for i in range(len(line)):\n        line[i][0], line[i][1] = line[i][1], line[i][0]\n    for i in range(len(line)):\n        line[i].insert(1, line[i][1] - line[i][0])\n    line.sort(key=lambda x: x[0])\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    for i in line:\n        for j in range(n, i[0], -1):\n            dp[j] = (dp[j] + dp[j - i[0]]) % (10 ** 9 + 7)\n    if dp[n] == 0:\n        return \"IMPOSSIBLE\"\n    return \"POSSIBLE\"\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n        <Explanation>\n        Boat route \uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0, \uc9c0\ub098\uac08 \uc218 \uc788\ub294 \uacbd\ub85c\uac00 \uc5c6\ub2e4\ub294 \uc758\ubbf8\uc774\ubbc0\ub85c possible \ub97c return\ud558\ub294 \uacbd\uc6b0.\n        \uc544\ub2c8\uba74 impossible \ub97c return\ud558\ub294 \uacbd\uc6b0.\n    '''\n    # N: Island \ubc30\uc5f4\uc758 \uae38\uc774, M: \uac04\uc120\uc758 \uac2f\uc218\n    # a_i: \uc120\ubc15\uc744 \uc6b4\ud56d\ud55c \uc544\uc774\uc2a4\ud06c\ub9bc \ud589\uc131\uc758 \ubc88\ud638, b_i: \ub3c4\ucc29\ud55c \uc544\uc774\uc2a4\ud06c\ub9bc \ud589\uc131\uc758 \ubc88\ud638\n    N, M = map(int, stdin.split())\n    island = {}\n    for _ in range(N):\n        island[_] = set()\n\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        island[a].add(b)\n        island[b].add(a)\n\n    # \uc120\ubc15 \uacbd\ub85c\uac00 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\n    visited = set([1])\n    stack = island[1].copy()\n    while stack:\n        cur_node = stack.pop()\n        if cur_node == N:\n            return 'POSSIBLE'\n\n        for next_node in island[cur_node]:\n            if next_node not in visited:\n                visited.add(next_node)\n                stack.add(next_node)\n\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 2\\n1 2\\n2 3')\n    'POSSIBLE'\n    >>> solution('3 2\\n1 2\\n2 1')\n    'IMPOSSIBLE'\n    \"\"\"\n    from collections import defaultdict\n    islands = defaultdict(list)\n    for _ in range(int(stdin.readline())):\n        a, b = map(int, stdin.readline().split())\n        islands[a].append(b)\n\n    graph = defaultdict(list)\n    for start, ends in islands.items():\n        for end in ends:\n            graph[start].append(end)\n\n    def dfs(node, visited):\n        if node in visited:\n            return False\n        visited.add(node)\n        for end in graph[node]:\n            if not dfs(end, visited):\n                return False\n        return True\n\n    return 'POSSIBLE' if dfs(1, set()) and dfs(1, set()) else 'IMPOSSIBLE'\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    islands = {}\n    for i in range(1, n + 1):\n        islands[i] = set()\n    for i in range(m):\n        start, end = map(int, stdin.readline().split())\n        islands[start].add(end)\n        islands[end].add(start)\n    if len(islands[1]) < 2:\n        print('IMPOSSIBLE')\n    elif len(islands[1]) == 2:\n        print('POSSIBLE')\n    else:\n        # All islands in set, loop over all combinations of islands\n        for i in islands[1].copy():\n            for j in islands[1].copy():\n                if i!= j:\n                    # Check if the combination of islands is possible\n                    if (j in islands[i]) and (i in islands[j]):\n                        islands[i].remove(j)\n                        islands[j].remove(i)\n                        if len(islands[i]) == 1 or len(islands[j]) == 1:\n                            print('POSSIBLE')\n                        else:\n                            print('IMPOSSIBLE')\n                        islands[i].add(j)\n                        islands[j].add(i)\n                        break\n    return ''\n"
    },
    {
        "number": 4485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    arr = []\n    for _ in range(M):\n        arr.append(tuple([int(x) for x in stdin.split()]))\n\n    graph = {k: set() for k in range(1, N + 1)}\n    for start, end in arr:\n        graph[start].add(end)\n\n    def dfs(graph, v, visited):\n        if v in visited:\n            return False\n        visited.add(v)\n        for n in graph[v]:\n            if dfs(graph, n, visited):\n                return True\n        return False\n\n    return \"POSSIBLE\" if dfs(graph, 1, set()) else \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([i for i in stdin[1::2]])"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([stdin[i] for i in range(1, len(stdin), 2)])\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin[(x + 1) % 2::2] for x in range(len(stdin)))\n\"\"\"\n\ndef"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    ans = \"\"\n    for i in range(1, len(s), 2):\n        ans += s[i]\n    return ans\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for i, s in enumerate(stdin):\n        if i % 2!= 0:\n            res.append(s)\n    return \"\".join(res)"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::2]\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin[2*i] for i in range(len(stdin)//2))\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[1::2]"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::2]\n"
    },
    {
        "number": 4486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([s[i] for i in range(1, len(s), 2)])"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(\" \")\n    if len(string[0])!= len(string[1]) and len(string[1])!= len(string[2]):\n        return \"NO\"\n    else:\n        return \"YES\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split(\" \")\n\n    if a[-1] == b[0] and b[-1] == c[0]:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    chain = stdin.split()\n    if len(chain) == 3:\n        return 'YES' if chain[0][-1] == chain[1][0] and chain[1][-1] == chain[2][0] else 'NO'\n    return 'NO'"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(\" \")\n    if B[0] == C[0] and B[-1] == C[-1] and A[0] == B[-1] and A[-1] == B[0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[0].split()\n    b = stdin.split('\\n')[1].split()\n    c = stdin.split('\\n')[2].split()\n    if a[0][-1] == b[0][0] and b[0][-1] == c[0][0]:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return \"YES\" if a[-1] == b[0] and b[-1] == c[0] else \"NO\"\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin.split()) > 2 else 'NO'\n\"\"\"\ndef"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    if a[-1] == b[0] and b[-1] == c[0]:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    chain_a, chain_b, chain_c = stdin.split()\n    return \"YES\" if (chain_a[-1] == chain_b[0] and chain_b[-1] == chain_c[0]) else \"NO\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split('\\n')[:2])\n    if a > b:\n        return 'GREATER'\n    elif a < b:\n        return 'LESS'\n    return 'EQUAL'\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(\"\\n\")\n    A = int(nums[0])\n    B = int(nums[1])\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n\n\ndef"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split(\"\\n\")[0]\n    B = stdin.split(\"\\n\")[1]\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    if A > B:\n        print(\"GREATER\")\n    elif A < B:\n        print(\"LESS\")\n    else:\n        print(\"EQUAL\")\n    return\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = int(stdin[0]), int(stdin[1])\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    else:\n        return \"EQUAL\"\n"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A, B = int(A), int(B)\n    if A > B:\n        return 'GREATER'\n    elif A < B:\n        return 'LESS'\n    else:\n        return 'EQUAL'"
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.splitlines()\n    A = int(A)\n    B = int(B)\n    if A > B:\n        return \"GREATER\"\n    elif A < B:\n        return \"LESS\"\n    elif A == B:\n        return \"EQUAL\""
    },
    {
        "number": 4488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\"\\n\"))\n    return \"GREATER\" if a > b else \"LESS\" if a < b else \"EQUAL\"\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    total_yen = 0\n    total_cards = int(stdin.split(\"\\n\")[0])\n    blue_cards = stdin.split(\"\\n\")[1:]\n    red_cards = stdin.split(\"\\n\")[total_cards + 2:]\n    for i in range(total_cards):\n        if blue_cards[i] == red_cards[i]:\n            total_yen += 1\n    print(total_yen)"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\napple\\norange\\napple\\n1\\ngrape\")\n    2\n    \"\"\"\n    # key: blue card; value: list of strings\n    cards = dict()\n    N, *cards_strings = [line.strip() for line in stdin.splitlines()]\n    N = int(N)\n    cards_strings = cards_strings[:N]\n    M = int(stdin.split(\"\\n\")[-2])\n    targets = stdin.split(\"\\n\")[-M - 1:-1]\n\n    for card, target in zip(cards_strings, targets):\n        cards.setdefault(card, []).append(target)\n    print(cards)\n    return\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \n  data = stdin.split('\\n')\n  N = int(data[0])\n  s = data[1: N + 1]\n  t = data[N + 1:]\n  \n  return N"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.readline())\n    s_list: list[str] = list()\n    for _ in range(N):\n        s_list.append(stdin.readline().strip())\n    M: int = int(stdin.readline())\n    t_list: list[str] = list()\n    for _ in range(M):\n        t_list.append(stdin.readline().strip())\n    return str(solution2(s_list, t_list))\n\n\ndef"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi has N blue cards and M red cards.\n    Each string written on each card is of length 1 to 10, inclusive.\n    Takahashi announces a string, and then,\n    for every blue card with the announced string, he earns 1 yen.\n    For every red card with the announced string, he loses 1 yen.\n    Return the maximum amount of money Takahashi can earn on balance.\n    \"\"\"\n    #:\n    N, s_list, M, t_list = int(stdin.split(\"\\n\")[0]), stdin.split(\"\\n\")[1].split(\":\"), int(stdin.split(\"\\n\")[2]), stdin.split(\"\\n\")[3].split(\":\")\n    return solve(N, s_list, M, t_list)\n\n\ndef"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, s_list, M, t_list = int(stdin.split(\"\\n\")[0]), stdin.split(\"\\n\")[1:-2], int(stdin.split(\"\\n\")[-2]), stdin.split(\"\\n\")[-1]\n    print(N, s_list, M, t_list)\n    return N\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the total number of yen that Takahashi can earn on balance\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takahashi has N blue cards and M red cards.\n    A string is written on each card. The string written on the i-th blue card is s_i, and the string written on the i-th red card is t_i.\n    Takahashi will now announce a string, and then check every card. Each time he finds a blue card with the string announced by him, he will earn 1 yen (the currency of Japan); each time he finds a red card with that string, he will lose 1 yen.\n    Here, we only consider the case where the string announced by Takahashi and the string on the card are exactly the same. For example, if he announces atcoder, he will not earn money even if there are blue cards with atcoderr, atcode, btcoder, and so on. (On the other hand, he will not lose money even if there are red cards with such strings, either.)\n    At most how much can he earn on balance?\n    Note that the same string may be written on multiple cards.\n\n    :param stdin:\n    :return:\n\n    >>> solution('3\\napple\\norange\\napple\\n1\\ngrape')\n    2\n    \"\"\"\n    blue_cards = stdin.split('\\n')\n    red_cards = stdin.split('\\n')\n    blue_cards = blue_cards[1:-1]\n    red_cards = red_cards[1:-1]\n    if len(blue_cards)!= int(blue_cards[0]):\n        raise ValueError\n    if len(red_cards)!= int(red_cards[0]):\n        raise ValueError\n    return\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of yen Takahashi can earn on balance.\"\"\"\n    cards = stdin.split('\\n')\n    blue_cards = cards[:cards.index('\\n')]\n    red_cards = cards[cards.index('\\n') + 1:]\n    blue_cards.sort()\n    red_cards.sort()\n    balance = 0\n\n    for i, c in enumerate(blue_cards):\n        balance += 1 if red_cards[i] == c else -1\n\n    return balance\n"
    },
    {
        "number": 4489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, s_list, M, t_list = list(map(int, stdin.split('\\n')[:4]))\n    \n    b_dict = dict()\n    for i in range(N):\n        s, t = stdin.split('\\n')[i + 4].split('\\t')\n        b_dict[s] = b_dict.get(s, 0) + 1\n    \n    b_list = list(b_dict.keys())\n    b_list.sort(key=lambda x: (-b_dict[x], x))\n    \n    r_dict = dict()\n    for i in range(M):\n        s, t = stdin.split('\\n')[i + 4 + N].split('\\t')\n        r_dict[s] = r_dict.get(s, 0) + 1\n    \n    r_list = list(r_dict.keys())\n    r_list.sort(key=lambda x: (-r_dict[x], x))\n    \n    max_yen = 0\n    for b in b_list:\n        tmp_yen = 0\n        for r in r_list:\n            if b in r:\n                tmp_yen += r_dict[r]\n        max_yen = max(max_yen, tmp_yen)\n    return str(max_yen)\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'T' if stdin == 'A' else 'G' if stdin == 'C' else 'A' if stdin == 'T' else 'C'\n    pass"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    b = stdin\n    if b == 'A':\n        print('T')\n    if b == 'C':\n        print('G')\n    if b == 'G':\n        print('C')\n    if b == 'T':\n        print('A')\n    return None"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return {'A': 'T', 'C': 'G', 'G': 'C', 'T': 'A'}[stdin]"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        'A': 'T',\n        'C': 'G',\n        'T': 'A',\n        'G': 'C'\n    }[stdin]"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin\n    if letter == \"A\":\n        return \"T\"\n    elif letter == \"C\":\n        return \"G\"\n    elif letter == \"G\":\n        return \"C\"\n    else:\n        return \"A\"\n\n\ndef"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/59cddf566f6c4aad65000016/train/python\"\"\"\n    b = stdin\n    if b == \"A\":\n        return \"T\"\n    elif b == \"C\":\n        return \"G\"\n    elif b == \"G\":\n        return \"C\"\n    else:\n        return \"A\"\n"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s == 'A':\n        print('T')\n    elif s == 'C':\n        print('G')\n    elif s == 'G':\n        print('C')\n    else:\n        print('A')"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the result\n    m = stdin.split(\"\\n\")\n    n = int(m[0])\n    A = list()\n    for i in m[1:n+1]:\n        A.append(list(map(int, i.split())))\n    dp = [[0 for _ in range(n)] for _ in range(3)]\n    dp[0][0] = A[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + A[0][i]\n        dp[1][i] = dp[1][i-1] + A[1][i]\n        dp[2][i] = dp[2][i-1] + A[2][i]\n    dp = [[0 for _ in range(n)] for _ in range(3)]\n    dp[0][0] = A[0][0]\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i-1] + A[0][i], dp[1][i-1] + A[0][i])\n        dp[1][i] = max(dp[1][i-1] + A[1][i], dp[2][i-1] + A[1][i])\n        dp[2][i] = max(dp[2][i-1] + A[2][i], dp[0][i-1] + A[2][i])\n    return dp[0][n-1]"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    We can move right three times and then move down one.\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    arr = [stdin.split(\"\\n\")[1].split(\" \")]\n\n    for i in range(n):\n        for j in range(n):\n            arr[0][i][j] = int(arr[0][i][j])\n\n    return 0"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    dp = [[0 for _ in range(n)] for _ in range(2)]\n    dp[0][0] = a[0]\n    dp[1][0] = b[0]\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i - 1] + a[i], dp[1][i - 1] + a[i])\n        dp[1][i] = max(dp[1][i - 1] + b[i], dp[0][i - 1] + b[i])\n    print(max(dp[0][n - 1], dp[1][n - 1]))\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = stdin.readline().split()\n    b = stdin.readline().split()\n    \n    ans = 0\n    for i in range(n):\n        ans += int(a[i])\n        ans += int(b[i])\n        if i < n-1:\n            ans += max(int(a[i]), int(b[i]))\n    \n    print(ans)\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Hello, world!\"\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin[0])\n    n = int(stdin[1])\n    if n == 0 or m == 0:\n        return 0\n    arr = []\n    for _ in range(m):\n        arr.append(list(map(int, stdin[2 + _].split(' '))))\n\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n\n    dp[0][0] = arr[0][0]\n    for j in range(n):\n        if j == 0:\n            dp[0][j] = dp[0][j - 1] + arr[0][j]\n        else:\n            dp[0][j] = dp[0][j - 1] + arr[0][j] - arr[0][j - 1]\n    for i in range(m):\n        if i == 0:\n            dp[i][0] = dp[i - 1][0] + arr[i][0]\n        else:\n            dp[i][0] = dp[i - 1][0] + arr[i][0] - arr[i - 1][0]\n    for i in range(1, m):\n        for j in range(1, n):\n            if i == j == 0:\n                dp[i][j] = arr[i][j]\n            else:\n                dp[i][j] = arr[i][j] + min(dp[i - 1][j], dp[i][j - 1]) - \\\n                           arr[i - 1][j - 1]\n    return dp[m - 1][n - 1]\n\n\ndef"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_candies(grid: List[List[int]]) -> int:\n        rows = len(grid)\n        cols = len(grid[0])\n        dp = [[0 for _ in range(cols + 1)] for _ in range(rows + 1)]\n\n        for col in range(1, cols + 1):\n            for row in range(1, rows + 1):\n                dp[row][col] = dp[row][col - 1] + dp[row - 1][col] - dp[row - 1][col - 1] + grid[row - 1][col - 1]\n\n        return dp[-1][-1]\n\n    def get_next_move(grid: List[List[int]], cur_row: int, cur_col: int) -> str:\n        if cur_col == len(grid[0]) - 1:\n            return 'down'\n        if cur_row == len(grid) - 1:\n            return 'right'\n        if grid[cur_row][cur_col] < grid[cur_row][cur_col + 1]:\n            return 'down'\n        else:\n            return 'right'\n\n    def get_max_candies_helper(grid: List[List[int]], cur_row: int, cur_col: int) -> int:\n        if cur_row == len(grid) and cur_col == len(grid[0]):\n            return 0\n\n        max_candies = -1\n        move = get_next_move(grid, cur_row, cur_col)\n        if move == 'down':\n            max_candies = max(max_candies, get_max_candies_helper(grid, cur_row + 1, cur_col))\n        elif move == 'right':\n            max_candies = max(max_candies, get_max_candies_helper(grid, cur_row, cur_col + 1))\n\n        return max_candies + grid[cur_row][cur_col]\n\n    grid = [list(map(int, stdin.split('\\n')[1:]))]\n    print(get_max_candies_helper(grid, 1, 1))\n    return ''\n"
    },
    {
        "number": 4491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{a[0][0] + a[1][0]} {a[0][0] + a[1][0]}\"\n\n\ndef"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, a: List[int], x: int) -> int:\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = min(dp[i], dp[i - 1] + a[i - 1])\n            if i >= 2:\n                dp[i] = min(dp[i], dp[i - 2] + a[i - 1] + a[i - 2])\n            if i >= 3:\n                dp[i] = min(dp[i], dp[i - 3] + a[i - 1] + a[i - 2] + a[i - 3])\n            if i >= 4:\n                dp[i] = min(dp[i], dp[i - 4] + a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4])\n        if dp[-1] > x:\n            return -1\n        return dp[-1]\n\n    n, *a = [int(x) for x in stdin.split()]\n    if n == 0:\n        return '0'\n    return str(solve(n, a, x=int(input())))\n\n\ndef"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    l = [int(x) for x in lines[1].split()]\n\n    q = deque([(0, 0)])\n    while q:\n        s = len(q)\n        for _ in range(s):\n            n, c = q.popleft()\n            if n == n:\n                print(c)\n                return\n            if n + l[n] > n:\n                q.append((n + l[n], c + 1))\n                q.append((n + 1, c + 1))\n            else:\n                q.append((n + 1, c + 1))"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    if M >= N:\n        return str(0)\n    s = []\n    for i in range(M, N):\n        while s and s[-1][1] < A[i]:\n            s.pop()\n        if s and s[-1][1] == A[i]:\n            s[-1][0] += 1\n        else:\n            s.append([1, A[i]])\n        if s[-1][0] >= 2:\n            s.pop()\n            s.append([s[-1][0] - 1, A[i]])\n    s = sum([a * b for a, b in s])\n    return str(s)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *box = map(int, stdin.split())\n    count = 0\n    while len(set(box)) > 1:\n        count += 1\n        max_candies = max(box)\n        max_index = box.index(max_candies)\n        box[max_index] = 0\n        for i in range(max_index + 1, len(box)):\n            box[i] += 1\n        if sum(box) > 10 ** 9:\n            break\n    return str(count)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    [N, *A] = stdin.split('\\n')[1:]\n    A = list(map(int, A))\n\n    # Get the max amount of candy a box can have\n    X = max(A)\n\n    # Initalize the answer variable\n    ans = 0\n\n    # Iterate through each box\n    for box in range(N):\n        # Iterate through each candy in the box\n        for candy in range(A[box]):\n            # If the current candy is not in the last box then iterate through the remaining boxes\n            if box!= N - 1:\n                # If there are at least two boxes left then iterate through the remaining boxes\n                for nextBox in range(box + 1, N):\n                    # If the number of candies in the remaining boxes is less than X then increment the answer\n                    if A[nextBox] < X:\n                        ans += 1\n                        break\n\n    # Return the answer\n    return str(ans)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, *A = [int(x) for x in stdin.split()]\n\n    ans = 0\n    for i in range(N - 1):\n        if A[i] > A[i + 1]:\n            ans += A[i] - A[i + 1]\n            A[i + 1] = A[i]\n\n    print(ans)\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of operations required to achieve the objective.\n\n    >>> solution('3 3\\n2 2 2\\n')\n    1\n\n    >>> solution('3 3\\n5 5 5\\n')\n    0\n\n    >>> solution('3 3\\n1 1 1\\n')\n    inf\n\n    >>> solution('3 3\\n2 2 2\\n1 1 1\\n')\n    2\n\n    >>> solution('4 4\\n1 2 3 4\\n')\n    3\n\n    >>> solution('5 5\\n5 5 5 5\\n')\n    0\n\n    >>> solution('5 5\\n4 4 4 4\\n')\n    3\n\n    >>> solution('5 5\\n1 1 1 1 1\\n')\n    4\n\n    >>> solution('8 8\\n2 2 2 2 2 2 2 2 2 2\\n')\n    3\n\n    >>> solution('8 8\\n1 1 1 1 1 1 1 1 1\\n')\n    9\n\n    >>> solution('8 8\\n1 1 1 1 1 1 1 1 1\\n1 1 1 1 1 1 1 1 1\\n')\n    18\n    \"\"\"\n    return NotImplemented\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    boxes: List[int] = [int(x) for x in stdin.split(' ')]\n\n    def find_solution(boxes, x):\n        count: int = 0\n        while True:\n            for i, box in enumerate(boxes):\n                if box < x:\n                    count += 1\n                    boxes[i] -= 1\n                    break\n            else:\n                break\n        return count\n\n    print(find_solution(boxes, max(boxes)))\n"
    },
    {
        "number": 4492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = stdin.split(\" \")\n    N = int(count[0])\n    a = [int(i) for i in count[1:]]\n    result = 0\n    for i in range(N - 1):\n        if a[i] < a[i + 1]:\n            result += a[i]\n            a[i + 1] = a[i] + a[i + 1]\n            a[i] = 0\n    return result"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if Takahashi is correct and 'No' otherwise.\"\"\"\n    first_line = stdin.split('\\n')[0]\n    first_line = first_line.split(' ')\n    a, b = (int(i) for i in first_line)\n\n    second_line = stdin.split('\\n')[1]\n    second_line = second_line.split(' ')\n    c, d = (int(i) for i in second_line)\n\n    third_line = stdin.split('\\n')[2]\n    third_line = third_line.split(' ')\n    e, f = (int(i) for i in third_line)\n\n    if a == c and b == d and e == a + b:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(1, 4):\n        for j in range(1, 4):\n            if stdin.split()[j-1]!= str(i+j-2):\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split('\\n')]\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]!= a[0][0]+a[1][1]+a[2][2] - a[0][2] - a[2][0] - a[1][1]:\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = stdin.split()\n    return \"Yes\" if a1 == \"0\" and a2 == \"1\" and a3 == \"0\" and b1 == \"1\" and b2 == \"0\" and b3 == \"1\" else \"No\""
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(n) for n in stdin.split(' ')]\n    if 0 in a and 1 in a and 2 in a and 1 in a and 1 in a and 1 in a:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    -----\n    stdin: a single line string\n    \n    Output:\n    -----\n    returns 'Yes' if Takahashi's statement is correct, otherwise returns 'No'\n    \"\"\"\n    # Get a list of strings\n    l = stdin.split('\\n')\n    l = l[:-1]\n    \n    # Get a dictionary of (i, j): c_{i, j}\n    d = {}\n    for r in range(1, 4):\n        for c in range(1, 4):\n            d[(r, c)] = int(l[r-1][c-1])\n            \n    # Iterate over all subsets of the dictionary\n    for i in range(2**9):\n        # Get the string of binary digits corresponding to the subset\n        s = \"{:010b}\".format(i)\n        # Check that the values match\n        if all([d[(r, c)] == int(s[r*3+c]) for r in range(3) for c in range(3)]):\n            return 'Yes'\n    \n    return 'No'\n    \n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise\"\"\"\n    A = [[int(c) for c in stdin.split()] for _ in range(3)]\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] == sum(A[i]) + sum(A[j]):\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n   ...\n    return \"\"\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 0 1\\n2 1 2\\n1 0 1\\n\")\n    'Yes'\n    >>> solution(\"1 0 1\\n2 1 2\\n3 1 3\\n\")\n    'No'\n    \"\"\"\n    grid = stdin.split()\n    row_sums = [sum(map(int, row.split())) for row in grid]\n    col_sums = [sum(map(int, col.split())) for col in zip(*grid)]\n    diag_sums = [sum(map(int, [grid[i][i] for i in range(3)]))]\n    antidiag_sums = [sum(map(int, [grid[i][2 - i] for i in range(3)]))]\n    total_sums = row_sums + col_sums + diag_sums + antidiag_sums\n    return 'Yes' if sum(total_sums) == 0 else 'No'\n"
    },
    {
        "number": 4493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines if Takahashi is correct or not\n    \"\"\"\n    # The rows and columns in the grid\n    rows = stdin.split()\n\n    # The answer\n    answer = \"Yes\"\n    for i in range(1, len(rows)):\n        for j in range(1, len(rows)):\n            # Finds the values of a_i, a_j, b_i, b_j\n            a_i = int(rows[i - 1].split()[0])\n            a_j = int(rows[i - 1].split()[1])\n            b_i = int(rows[i].split()[0])\n            b_j = int(rows[i].split()[1])\n\n            # Finds the sum of the integers written in the squares\n            sum = a_i + b_j\n\n            # Checks if the sum of the integers is correct\n            if sum!= int(rows[i].split()[2]):\n                answer = \"No\"\n                break\n\n        # If a_i + b_i is not correct, it exits the loop\n        else:\n            continue\n        break\n\n    return answer\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:2] == \"ARC\" and \"ABC\" or \"ARC\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # stdout = stdin\n    # return stdout\n    week = stdin.strip()\n    if week == 'ABC':\n        return 'ARC'\n    else:\n        return 'ABC'\nprint(solution(stdin.strip()))\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    last_week = stdin\n    today = 'ARC' if last_week == 'ABC' else 'ABC'\n    return today\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin:\n        print(\"ARC\" if s == \"A\" else \"ABC\")\n    return \"\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'ARC':\n        return 'ABC'\n    return 'ARC'"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the string representing the type of the contest held this week.\n    >>> solution(\"ABC\")\n    'ARC'\n    >>> solution(\"ARC\")\n    'ABC'\n    >>> solution(\"ARCBC\")\n    'ARC'\n    \"\"\"\n    return \"ABC\" if stdin == \"ARC\" else \"ARC\"\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    week = 'ABC' if stdin == 'ARC' else 'ARC'\n    return week\n"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'ARC' if stdin == 'ABC' else 'ABC'\n\"\"\"\n\ndef"
    },
    {
        "number": 4494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    last_week = stdin[0]\n    this_week = last_week\n    if last_week == 'A':\n        this_week = 'C'\n    else:\n        this_week = 'A'\n    return this_week\n\ndef"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split(' ')]\n    count = 0\n    for i in range(a, b + 1):\n        if i % x == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split(' ')]\n    c = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            c += 1\n    return c\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def bin_search(left: int, right: int) -> int:\n        while left < right:\n            middle = (left + right) // 2\n            if target < middle:\n                right = middle\n            elif target > middle:\n                left = middle + 1\n            else:\n                return 1\n        return 0\n\n    a, b, x = [int(i) for i in stdin.split()]\n    return bin_search(a, b + 1) - bin_search(a, b)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a,b,x = map(int,stdin.split())\n    c = 0\n    for i in range(a,b+1):\n        if i % x == 0:\n            c += 1\n    return str(c)"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    (a, b, x) = [int(s) for s in stdin.split(' ')]\n\n    count = 0\n    for i in range(a, b+1):\n        if i % x == 0:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(b // x - a // x)"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 8 2')\n    3\n    \"\"\"\n    a, b, x = [int(x) for x in stdin.split()]\n    return str(sum([1 for i in range(a, b + 1) if i % x == 0]))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(sum(n % x == 0 for n in range(a, b + 1)))\n"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    We are given nonnegative integers a and b (a \u2264 b).\n    A number x is called Harshad if it is divisible by the sum of its digits.\n    The sum of the digits of a number is calculated as follows:\n    sum([int(i) for i in str(a)])\n\n    Find how many numbers between a and b are Harshad.\n    :param stdin:\n    :return:\n    '''\n    # take input\n    a, b, x = [int(num) for num in stdin.split()]\n\n    # calculate\n    count = 0\n    for i in range(a, b + 1):\n        if i % sum([int(i) for i in str(i)]) == 0:\n            count += 1\n\n    # return answer\n    return count"
    },
    {
        "number": 4495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return str(sum(1 for i in range(a, b + 1) if i % x == 0))\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    day_of_christmas = int(stdin)\n    if day_of_christmas == 25:\n        return 'Christmas'\n    elif day_of_christmas == 24:\n        return 'Christmas Eve'\n    elif day_of_christmas == 23:\n        return 'Christmas Eve Eve'\n    elif day_of_christmas == 22:\n        return 'Christmas Eve Eve Eve'\n    else:\n        return '-1'"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D = stdin\n    return (\"Christmas\" if D == 25 else (\"Christmas Eve Eve\" if D == 24 else (\"Christmas Eve\" if D == 23 else \"Christmas Eve Eve\"))).upper()\n\nprint(solution(input()))\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    day = int(stdin)\n    if day == 25:\n        return \"Christmas\"\n    elif day == 24:\n        return \"Christmas Eve\"\n    elif day == 23:\n        return \"Christmas Eve Eve\"\n    elif day == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    elif d == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Wrong input!\"\n\n\ndef"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"New Year\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  D = int(stdin)\n\n  if D == 25:\n    return \"Christmas\"\n  elif D == 24:\n    return \"Christmas Eve Eve Eve\"\n  elif D == 23:\n    return \"Christmas Eve\"\n  elif D == 22:\n    return \"Christmas\"\n  else:\n    return \"WRONG INPUT\""
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    if d == 25:\n        return \"Christmas\"\n    elif d == 24:\n        return \"Christmas Eve\"\n    elif d == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Christmas if D == 25, Christmas Eve if D == 24, Christmas Eve Eve if D == 23 and Christmas Eve Eve Eve if D == 22.\"\"\"\n    D = int(stdin)\n    if D == 25:\n        return \"Christmas\"\n    elif D == 24:\n        return \"Christmas Eve\"\n    elif D == 23:\n        return \"Christmas Eve Eve\"\n    elif D == 22:\n        return \"Christmas Eve Eve Eve\"\n    else:\n        return \"Wrong input\"\n"
    },
    {
        "number": 4496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    dec_day = int(stdin)\n    if dec_day == 25:\n        return \"Christmas\"\n    elif dec_day == 24:\n        return \"Christmas Eve\"\n    elif dec_day == 23:\n        return \"Christmas Eve Eve\"\n    else:\n        return \"Christmas Eve Eve Eve\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while i * i <= n:\n        count = 0\n        while n % i == 0:\n            count += 1\n            n = n // i\n        i += 1\n    return count"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(range(1, int(stdin) + 1), key=lambda x: stdin.count(str(x)) // x))\n\ndef"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n * (n - 1) // 2"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_divide_2 = 0\n    max_divide_2_num = 0\n    for num in range(n):\n        count = 0\n        while num % 2 == 0:\n            num /= 2\n            count += 1\n        if count > max_divide_2:\n            max_divide_2 = count\n            max_divide_2_num = num\n    return max_divide_2_num\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            m += 1\n    return m"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda n: n // 2, range(1, int(stdin) + 1))))\n"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    if a <= d:\n        if b <= d:\n            if c <= d:\n                print('Yes')\n            else:\n                print('No')\n        else:\n            if c <= d:\n                print('No')\n            else:\n                print('Yes')\n    else:\n        if b <= d:\n            if c <= d:\n                print('Yes')\n            else:\n                print('No')\n        else:\n            if c <= d:\n                print('No')\n            else:\n                print('Yes')"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(\" \"))\n    if a + b > c and b + c > a and a + c > b:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return \"Yes\" if (b - c <= d and c - a <= d) or (a - b <= d and b - c <= d) else \"No\"\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (abs(a - c) < d) or (abs(b - c) < d):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split(' ')]\n    if abs(A - C) <= D and abs(B - C) <= D:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split('\\n')[0].split()]\n    if d - b < a:\n        if d - c < a:\n            print('No')\n        else:\n            if b - c < a:\n                print('No')\n            else:\n                print('Yes')\n    else:\n        if d - c < a:\n            if b - c < a:\n                print('No')\n            else:\n                print('Yes')\n        else:\n            print('Yes')"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    a_can_b_c = b < d + a and d < a + b\n    b_can_c_d = c < d + b and d < b + c\n    a_can_c_d = c < d + a and d < a + c\n    return 'Yes' if a_can_b_c and b_can_c_d or a_can_c_d else 'No'\n\n\ndef"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return 'Yes' if a + b > d and b + c > d else 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    if a + b <= d and a + c <= d and b + c <= d:\n        return 'Yes'\n    elif a + b <= d and c + d <= d:\n        return 'Yes'\n    elif b + c <= d and a + d <= d:\n        return 'Yes'\n    elif a + c <= d and b + d <= d:\n        return 'Yes'\n    elif a + b <= d and a + c <= d:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(stdin) for stdin in stdin.split()]\n    if a + b <= c and c + b <= d and a + c <= b and b + c <= d:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2, s3 = stdin.split()\n    return ''.join(list(map(lambda s: s[0], [s1, s2, s3])))"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"ABC\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    s1, s2, s3 = stdin.split()\n    return ''.join(i[0] for i in [s1, s2, s3])\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c = stdin.split()\n  return a[0] + b[0] + c[0]\n\"\"\"\n\ndef"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(\"ABC\".upper())\n    return \"ABC\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = list(map(lambda x: x.strip(), stdin.split(' ')))\n    return ''.join(list(map(lambda x: x[0], words)))"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(i.upper() for i in stdin.split())\nprint(solution(input()))\n'''\n\ndef"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([s[0] for s in stdin.split(' ')])\n\n\ndef"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(' ')\n    return ''.join([word[0].upper() for word in words])\n\n\ndef"
    },
    {
        "number": 4499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''.join([word[0] for word in stdin.split(' ')])\n    return answer\n'''\ndef"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, C] = list(map(int, stdin.split()))\n    if C <= B:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b, c = map(int, stdin.split())\n    return 'Yes' if a + b >= c else 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: the standard input\n    :return: the answer, yes if Takahashi can buy the toy, no otherwise\n    \"\"\"\n    input_values = stdin.split(\" \")\n    if int(input_values[0]) + int(input_values[1]) < int(input_values[2]):\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution reads in the three numbers and checks if he can\n    afford the price of the toy given.\n\n    >>> solution(\"50 100 120\")\n    Yes\n\n    >>> solution(\"50 100 20\")\n    No\n\n    \"\"\"\n\n    A, B, C = [int(x) for x in stdin.split()]\n    return \"Yes\" if (A + B) >= C else \"No\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return 'Yes' if A + B >= C else 'No'\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a + b >= c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if a + b >= c else \"No\""
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A >= C:\n        return \"Yes\"\n    if (C - B) % A!= 0:\n        return \"No\"\n    else:\n        t = (C - B) // A\n        if t % 2!= 0:\n            return \"No\"\n        return \"Yes\"\n"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    if A >= C:\n        return 'Yes'\n    if B < C:\n        return 'No'\n    A = C - B\n    if A >= 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    return 'Yes' if A + B >= C else 'No'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return None\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 8\\n7 9 8 9\")\n    5\n    \"\"\"\n    return str(main(stdin.split(\"\\n\")))\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n    \n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 8\n   ... 7 9 8 9''')\n    5\n    \"\"\"\n   ..."
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem '01_Subarrays_with_given_average'.\n\n    :param stdin: input data given from standard input\n    :return: solution of the problem\n    \"\"\"\n    # Set up initial data.\n    n, a = map(int, stdin.split())\n    seq = [int(i) for i in stdin.split()]\n    # Solve problem.\n    solution_num = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(seq[i:j+1])/len(seq[i:j+1]) == a:\n                solution_num += 1\n    # Print result.\n    print(solution_num)\n    return ''\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the solution for the first part of the problem.\n\n    >>> solution('4 8\\n7 9 8 9\\n')\n    '5'\n    \"\"\"\n    N, A = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n\n    # This is a combinatorics problem:\n    # it is equivalent to finding the number of ways to fill a table of size N with numbers that sum to exactly A.\n    # to calculate the number of ways to fill a table of size N with numbers that sum to exactly A,\n    # divide the table by the number of ways to fill it with numbers that sum to exactly A-A/N,\n    # and the result is the desired number of ways to fill it with numbers that sum to exactly A.\n    # (if we consider N as a variable, it simplifies to N choose A/N)\n    #\n    # here, the table is the list of cards, and the number of ways to fill it with numbers that sum to exactly A is the number of ways to fill it with numbers that sum to exactly A-A/N.\n    # so, if the table is A_cards, then\n    # (a+b+c+d+e) choose (a+b+c+d) = (A_cards) choose (A_cards-1)\n    #\n    # another way to calculate the number of ways to fill a table of size N with numbers that sum to exactly A:\n    # for each number that will be in the table,\n    # calculate the number of ways to add it to the table, i.e. the number of ways to choose all of the remaining numbers from the N-1 ones.\n    # for each of the N-1 numbers, there are N-1 ways to choose them, so there are N-1 * N-2 *... * N-n ways to choose them,\n    # so there are N-1 * N-2 *... * N-n * N-n *... * 1 ways to choose them, i.e. the number of ways to choose all of the remaining N-1 numbers\n    # so, for each number in the table, the number of ways to add it to the table is N-1 * N-2 *... * N-n * N-n *... * 1,\n    # and the result is the number of ways to fill the table with numbers that sum to exactly A.\n\n    return str(math.comb(len(cards), A // N) * math.comb(A, A // N))\n"
    },
    {
        "number": 4501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split(' ')]\n    s = [int(i) for i in stdin.split(' ')[1:]]\n\n    if n == 1:\n        return str(1)\n\n    if n == 2:\n        if a in [s[0] + s[1], s[1] + s[0]]:\n            return str(1)\n\n        return str(0)\n\n    count = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if i!= j and a == sum(s[i:j+1]) / (j-i+1):\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    out = [None] * n\n    for i in range(n):\n        out[i] = a[i]\n        for j in range(n):\n            if a[i] < out[j]:\n                out[j] = a[i]\n                break\n    for item in out:\n        print(item, end=' ')\n    return \"\"\n\ndef"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    ans = []\n    while len(a)!= 0:\n        ans.append(a.pop())\n        ans.reverse()\n    return''.join(list(map(str, ans)))\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\nimport sys\n\nsys.setrecursionlimit(1 << 30)\n_INPUT_LINES = sys.stdin.read().splitlines()\ninput = iter(_INPUT_LINES).__next__\n_OUTPUT_BUFFER = io.StringIO()\nsys.stdout = _OUTPUT_BUFFER\n\n\n@functools.lru_cache(maxsize=None)\ndef"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://www.codewars.com/kata/525f50e3b73515a6db000b83/train/python\n    \"\"\"\n    num, *arr = [int(i) for i in stdin.split('\\n')]\n    result = []\n    for i in range(num):\n        result.extend(arr[i::num])\n    return''.join([str(i) for i in result])"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = []\n    for i in range(n):\n        b.append(int(stdin))\n        b = b[::-1]\n    return''.join(str(x) for x in b)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(stdin.split()[::-1][:4])\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 3 4\")\n    4 2 1 3\n    \"\"\"\n\n    n = int(stdin)\n    b = []\n    for i in stdin.split():\n        b.append(int(i))\n    b.reverse()\n    for _ in range(n):\n        b.append(max(b))\n        b.pop(0)\n        b.reverse()\n    return \" \".join(str(i) for i in b)\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for _ in range(n):\n        b.append(a.pop())\n        b.reverse()\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 4502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, stdin.split('\\n')[0].split()))\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin: str) -> str:\n        h, n = map(int, stdin.split('\\n')[:2])\n        a = list(map(int, stdin.split('\\n')[2:]))\n        a.sort()\n        if n == 1:\n            return 'Yes'\n        if h % n == 0:\n            return 'No'\n        if n % 2 == 1:\n            return 'No'\n        if h < a[0] * (n - 1):\n            return 'No'\n        if a[n // 2 - 1] > a[n // 2]:\n            return 'No'\n        for i in range(n - 1):\n            if h - a[i] * (n - 1) < 0:\n                return 'No'\n            h -= a[i] * (n - 1)\n        return 'Yes'\n\n    ans = solve(stdin)\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns Yes if Raccoon can win without using the same move twice or more, otherwise returns No\n    '''\n    H, N = [int(i) for i in stdin.split('\\n')[0].split()]\n    A = [int(i) for i in stdin.split('\\n')[1].split()]\n    # print(H, N, A)\n    first_move = A.pop()\n    second_move = A.pop()\n    if first_move < second_move:\n        first_move, second_move = second_move, first_move\n    for i in range(N):\n        if i == 0:\n            if A[i] > first_move:\n                print('Yes')\n                return\n        else:\n            if A[i] > second_move:\n                print('Yes')\n                return\n    print('No')\n    return\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport re\n\n\ndef"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  h, n = map(int, stdin.split(' '))\n  a = list(map(int, stdin.split(' ')))\n\n  def is_valid(i: int) -> bool:\n    return h - sum(a[:i]) >= 0\n\n  def count_unique_valid_moves(m: int) -> int:\n    return sum([1 if is_valid(i) else 0 for i in range(m + 1)])\n\n  r = 0\n  for m in range(n):\n    if is_valid(m):\n      r = max(r, count_unique_valid_moves(m))\n\n  return \"Yes\" if r <= 1 else \"No\"\n\n\ndef"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, N = [int(x) for x in stdin.split(\" \")]\n    A = [int(x) for x in stdin.split(\" \")]\n    A.sort()\n\n    for i in range(N):\n        H -= A[i]\n        if H <= 0:\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    print(H, N, A)\n    if N == 1:\n        print('No')\n    else:\n        if A[0] + (N - 2) * min(A) < H:\n            print('No')\n        else:\n            print('Yes')\n"
    },
    {
        "number": 4503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    H, N = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    A.sort(reverse=True)\n    ans = 0\n    while True:\n        for i in range(len(A)):\n            ans += A[i]\n            if ans > H:\n                return \"No\"\n            if ans == 0:\n                return \"Yes\""
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return stdin\n    even_str_len = 0\n    for s in stdin:\n        if is_even(s):\n            even_str_len += 1\n    return stdin[:len(stdin) - even_str_len]\n\n\ndef"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    while (len(string)>=1):\n        if (len(string) % 2 == 0):\n            return len(string)\n        string = string[:-1]\n    return 0\n\nprint(solution(stdin))"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for string in stdin.split(\"\\n\"):\n        if len(string) == 1:\n            print(0)\n        else:\n            string = string.replace(\"\\n\", \"\")\n            count = 0\n            while len(string) > 0:\n                if not is_even(string):\n                    string = string[:-1]\n                    count += 1\n                else:\n                    break\n            print(count)\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = 0\n    for i in range(len(s)):\n        if len(s[:i] + s[i + 1:]) % 2 == 0:\n            ans = max(ans, len(s[:i] + s[i + 1:]))\n    return ans"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    deleted_length: int = 0\n    current_even_string_length: int = 0\n\n    for char in stdin:\n        if char!= stdin[0] and char!= stdin[-1]:\n            if current_even_string_length < deleted_length:\n                deleted_length = current_even_string_length\n            current_even_string_length = 0\n        elif char == stdin[0]:\n            current_even_string_length += 1\n        elif char == stdin[-1]:\n            current_even_string_length += 1\n            deleted_length += 1\n\n    return max(current_even_string_length, deleted_length)"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    even = False\n    s = stdin\n    longest_string = 0\n    current_string = 0\n    while even == False:\n        if s[len(s) - 1] == 'a' and s[len(s) - 2] == 'a':\n            s = s[:len(s) - 2]\n            current_string += 2\n            longest_string = max(current_string, longest_string)\n        else:\n            if len(s) - 1!= 0:\n                s = s[:len(s) - 1]\n                current_string += 1\n                longest_string = max(current_string, longest_string)\n            else:\n                even = True\n    return longest_string\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the length of the longest even string that can be obtained by deleting one or more characters from the end of S.\"\"\"\n    # Sliding window solution\n\n    S = stdin.strip()\n    seen = {}\n    seen[S] = len(S)\n    max_len = len(S)\n    left, right = 0, len(S) - 1\n    while right > left:\n        if S[left] == S[right]:\n            left_num, right_num = seen.get(S[left:right], 0), len(S[left:right])\n            left, right = left + left_num, right - right_num\n        else:\n            left_num, right_num = seen.get(S[left:right], 0), len(S[left:right])\n            left, right = left + 1, right - 1\n        if left_num > max_len:\n            max_len = left_num\n    return max_len\n"
    },
    {
        "number": 4504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    return max([find_even(stdin, i) for i in range(len(stdin))], key=len)\n\n\ndef"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    permutation = \"abc\"\n    if input[0] == permutation[0] and input[1] == permutation[1] and input[2] == permutation[2]:\n        return \"Yes\"\n    if input[0] == permutation[2] and input[1] == permutation[1] and input[2] == permutation[0]:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    str_a, str_b, str_c = stdin.split()\n    str_abc = [str_a, str_b, str_c]\n    for idx_a in range(len(str_abc)):\n        for idx_b in range(idx_a + 1, len(str_abc)):\n            str_abc[idx_a], str_abc[idx_b] = str_abc[idx_b], str_abc[idx_a]\n            str_abc_permuted = \"\".join(str_abc)\n            if str_abc_permuted == stdin:\n                return \"Yes\"\n            else:\n                str_abc[idx_a], str_abc[idx_b] = str_abc[idx_b], str_abc[idx_a]\n    return \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return \"Yes\" if stdin[0] + stdin[1] + stdin[2] == \"abc\" else \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin\n    if a+b == c or a+c == b or b+c == a:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Check if S can be obtained by permuting abc\n    \n    >>> solution(\"bac\")\n    Yes\n    \"\"\"\n    \n    input_ = stdin.strip()\n    \n    if len(input_) == 3:\n        if input_[0] == input_[1] and input_[0]!= input_[2]:\n            return \"Yes\"\n        elif input_[0]!= input_[1] and input_[1] == input_[2]:\n            return \"Yes\"\n        elif input_[0] == input_[2] and input_[0]!= input_[1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Initialized variables\n    count_a, count_b, count_c = 0, 0, 0\n    a, b, c = \"\", \"\", \"\"\n    # Count the number of each letter in the string\n    for i in stdin:\n        if i == \"a\":\n            count_a += 1\n        if i == \"b\":\n            count_b += 1\n        if i == \"c\":\n            count_c += 1\n    # Check if the sum of counts is 3\n    if count_a + count_b + count_c!= 3:\n        return \"No\"\n    # Store the letters of the string in their respective variables\n    for i in stdin:\n        if i == \"a\":\n            a += i\n        if i == \"b\":\n            b += i\n        if i == \"c\":\n            c += i\n    # Check if the letters of the string can be obtained by swapping them\n    if a + b == c or b + c == a or a + c == b:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[0] == 'b' else 'No'\n"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[2] + stdin[1]"
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin[0], stdin[1], stdin[2]\n    if a == b and b == c and a!= c:\n        return \"Yes\"\n    if a == c and b == a and a!= b:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.replace('a', 'x')\n    string = string.replace('b', 'y')\n    string = string.replace('c', 'z')\n    return \"Yes\" if string == \"xyz\" else \"No\"\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nreturn None\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 8 7 2 4\n   ... 9 7 2 9 3\n   ... ''')\n    '646'\n    >>> solution('''1\n   ... 1000000\n   ... 1000000\n   ... ''')\n    '757402647'\n    >>> solution('''2\n   ... 1 3\n   ... 4 2\n   ... ''')\n    '20'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solve problem\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def f(l, r):\n        return sum(l_ * r_ for l_, r_ in zip(a[l:r], b[l:r]))\n\n    n, a, b = [int(x) for x in stdin.split()]\n    a.sort()\n    b.sort()\n\n    return min(f(0, i) + f(i, n) for i in range(1, n + 1)) % 1000000007\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    l = 0\n    r = n - 1\n    f = []\n    for i in range(n):\n        f.append(sum([a[l] * b[i], a[r] * b[i]]))\n    while r > l:\n        while f[r] > f[l]:\n            l += 1\n        while f[r] < f[l]:\n            r -= 1\n        f[l], f[r] = f[r], f[l]\n        f[l], f[r] = f[r], f[l]\n    return sum(f) % (10 ** 9 + 7)\n\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    a.append(10**10)\n    b.append(10**10)\n    ans = 10**10\n    for i in range(n):\n        ans += a[i]*b[i]\n    ans %= 10**10\n    print(ans)\n\ndef"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    n = a[0]\n    a = a[1:]\n    b = [int(x) for x in stdin.split()]\n    b = b[1:]\n    mini = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            mini = mini + (a[i] * b[j])\n    return mini % 998244353\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(s) for s in stdin.readline().split(' ')]\n    b = [int(s) for s in stdin.readline().split(' ')]\n\n    if n == 1:\n        return str(min(a[0] * b[0], a[0] * b[1]))\n    s = sum(a)\n    ss = sorted(zip(a, b))\n    a = [ss[i][0] for i in range(n)]\n    b = [ss[i][1] for i in range(n)]\n\n    return str(s * (b[0] + b[1] - 1) + sum([a[i] * b[i] for i in range(n)]))\n"
    },
    {
        "number": 4506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    min_sum = 9999999999999999\n    # new_b = []\n    # min_sum = 0\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         min_sum = min(min_sum, a[i] * b[j])\n    #         # new_b.append(b[j])\n    #         # min_sum += b[j]\n    #         # min_sum %= 998244353\n    #         # new_b.append(b[j])\n    # print(min_sum)\n    # print(new_b)\n    a.sort()\n    b.sort()\n    sum = 0\n    for i in range(n):\n        sum += a[i] * b[i]\n    print(sum % 998244353)\n    return min_sum\n\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n, m, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    # x = [int(x) for x in stdin.split('\\n')[1].split()]\n    # y = [int(x) for x in stdin.split('\\n')[2::2]]\n    # min_cost = 0\n    # for i in range(k):\n    #     max_x, max_y = 0, 0\n    #     for j in range(m):\n    #         if x[j] > max_x:\n    #             max_x = x[j]\n    #             max_y = y[j]\n    #     for j in range(m):\n    #         if x[j] == max_x and y[j] > max_y:\n    #             max_y = y[j]\n    #     min_cost += max_y\n    #     x[x.index(max_x)] = 0\n    # return min_cost\n\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    x = [int(x) for x in stdin.split('\\n')[1].split()]\n    y = [int(x) for x in stdin.split('\\n')[2::2]]\n    min_cost = 0\n    for i in range(k):\n        max_x, max_y = 0, 0\n        for j in range(m):\n            if x[j] > max_x:\n                max_x = x[j]\n                max_y = y[j]\n        min_cost += max_y\n        x[x.index(max_x)] = 0\n    return min_cost"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.split())\n    costs = list(map(int, stdin.split()))\n    special_offers = {}\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        special_offers[x] = y\n    special_offers = sorted(special_offers.items())\n    # print(special_offers)\n    # print(costs)\n    # print(n, m, k)\n    # print(special_offers)\n    cost = 0\n    i = 0\n    bought_count = 0\n    while bought_count < k:\n        if i < len(special_offers):\n            if special_offers[i][1] <= k - bought_count:\n                for _ in range(special_offers[i][0]):\n                    if bought_count < k:\n                        cost += costs[bought_count]\n                        bought_count += 1\n            else:\n                for _ in range(k - bought_count):\n                    cost += costs[bought_count]\n                    bought_count += 1\n        else:\n            for _ in range(k - bought_count):\n                cost += costs[bought_count]\n                bought_count += 1\n        # print(bought_count, k)\n        i += 1\n\n    return cost"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    shovels = [int(x) for x in stdin.split('\\n')[1].split()]\n    offers = []\n    for i in range(m):\n        offers.append([int(x) for x in stdin.split('\\n')[2 + i].split()])\n    costs = {}\n    cost = 0\n    for i in range(n):\n        if i + k > n:\n            break\n        cost = sum(shovels[i:i+k])\n        if i not in costs or costs[i] > cost:\n            costs[i] = cost\n    result = costs[0]\n    for i in range(n):\n        for x, y in offers:\n            if i + x <= n and i + y > n:\n                continue\n            if i + x in costs:\n                result = min(result, costs[i] + y)\n            else:\n                result = min(result, costs[i] + y + costs[i + x])\n    return str(result)\n\"\"\"\n\n\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2:]))\n    b.sort()\n    for i in b:\n        a.append(i)\n    a = sorted(a)\n    dp = [[0 for i in range(k + 1)] for i in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(0, k + 1):\n            dp[i][j] = min(dp[i][j], dp[i - 1][j])\n            if j - a[i - 1] >= 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - a[i - 1]] + b[i - 1])\n    print(dp[n][k])\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    offers = [list(map(int, stdin.split())) for _ in range(m)]\n    offers.sort(key=lambda o: o[1] - o[0], reverse=True)\n    remains = k\n    cost = 0\n    for o in offers:\n        if remains >= o[0]:\n            cost += a[o[0] - 1]\n            remains -= o[0]\n        else:\n            cost += (o[0] * a[o[0] - 1])\n            break\n    for r in range(remains):\n        cost += a[r]\n    return cost\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the distance between vertex 1 and all the other vertices.\n    \"\"\"\n    def dijkstra(start: int, n: int) -> Tuple[List[int], Dict[int, int]]:\n        dist = [inf] * n\n        dist[start] = 0\n        path = [None] * n\n        in_queue = [False] * n\n\n        q = queue.PriorityQueue()\n        q.put((0, start))\n\n        while not q.empty():\n            cur_dist, cur_index = q.get()\n            in_queue[cur_index] = False\n            for adj_index, adj_dist in graph[cur_index]:\n                if dist[cur_index] + adj_dist < dist[adj_index]:\n                    dist[adj_index] = dist[cur_index] + adj_dist\n                    path[adj_index] = cur_index\n                    if not in_queue[adj_index]:\n                        q.put((dist[adj_index], adj_index))\n                        in_queue[adj_index] = True\n        return dist, path\n\n    n = int(stdin)\n    graph = [[] for _ in range(n)]\n    for line in stdin.split('\\n')[:-1]:\n        src, dst, dist = map(int, line.split())\n        graph[src].append((dst, dist))\n        graph[dst].append((src, dist))\n\n    dist, path = dijkstra(1, n)\n    min_dist = inf\n    for i in range(1, n):\n        min_dist = min(min_dist, dist[i])\n\n    return str(n - 1 - min_dist)\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Runtime Complexity: O(V)\n    Space Complexity: O(E + V)\n    \"\"\"\n    lines = stdin.split('\\n')\n\n    n = int(lines[0])\n    edges = []\n    for i in range(1, len(lines) - 1):\n        edges.append(tuple(map(int, lines[i].split(' '))))\n\n    graph = defaultdict(list)\n    for i in range(n - 1):\n        u, v = edges[i]\n        graph[u].append(v)\n        graph[v].append(u)\n\n    dist = {i: None for i in range(1, n + 1)}\n    dist[1] = 0\n\n    queue = [1]\n    while queue:\n        node = queue.pop(0)\n        for neighbor in graph[node]:\n            if dist[neighbor] is None:\n                dist[neighbor] = dist[node] + 1\n                queue.append(neighbor)\n\n    max_edge = 2\n    for i in range(1, n + 1):\n        if dist[i] is not None and dist[i] <= max_edge:\n            max_edge = dist[i]\n\n    return max_edge - 1\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    edges = [list(map(int, line.split())) for line in lines[1:-1]]\n\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # 1. find cycle\n    # 1.1 find 2-cycles\n    # 1.2 if no 2-cycles, then do not include any edge\n    # 1.3 otherwise, pick an edge and remove it\n    # 1.4 for each edge removed, recursively call solution\n    # 2. find path\n\n    def dfs(node, parent):\n        if parent[node]!= node:\n            parent[node] = dfs(parent[node], parent)\n        return parent[node]\n\n    def find_cycle(parent):\n        for u, v in edges:\n            if dfs(u, parent) == dfs(v, parent):\n                return True\n        return False\n\n    def find_path(parent):\n        for u in range(n):\n            if dfs(u, parent) == u:\n                return True\n        return False\n\n    parent = [None] * n\n    cycle_count = 0\n    while find_cycle(parent):\n        cycle_count += 1\n        u, v = edges.pop()\n        dfs(u, parent)\n        dfs(v, parent)\n\n    # 2. if no cycle, then find path\n    if cycle_count == 0:\n        if find_path(parent):\n            return 0\n\n    # 3. sort edges by their weights, then pick the minimum weighted edge\n    edges = sorted(edges, key=lambda uv: uv[2])\n    for u, v in edges:\n        if dfs(u, parent)!= dfs(v, parent):\n            return cycle_count + 1\n    return cycle_count\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport heapq\n\nfrom aoc import timer, read_input_lines\n\n\ndef"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '0'\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\nfor _ in range(int(stdin.readline())):\n    n, k = map(int, stdin.readline().split())\n    count = 0\n    for i in range(1, 10**9 + 1):\n        if i % n!= 0:\n            count += 1\n            if count == k:\n                print(i)\n                break\n            continue\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    if stdin == '':\n        return ''\n    t = int(stdin.readline())\n    for i in range(t):\n        line = stdin.readline().split()\n        n, k = int(line[0]), int(line[1])\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        divisors.sort()\n        print(divisors[k-1])\n\nsolution(stdin)\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # for line in stdin:\n    #     n, k = [int(i) for i in line.split()]\n    #     for i in range(n,k):\n    #         if i%n!= 0:\n    #             print(i)\n    #             break\n    #     else:\n    #         print(\"0\")\n\n\n    # for line in stdin:\n    #     n, k = [int(i) for i in line.split()]\n    #     for i in range(n,k):\n    #         if i%n!= 0:\n    #             print(i)\n    #             break\n    #     else:\n    #         print(\"0\")\n\n    for line in stdin:\n        n, k = [int(i) for i in line.split()]\n        q = k\n        while q > 0:\n            if q%n!= 0:\n                print(q)\n                break\n            else:\n                q = q//n\n        else:\n            print(\"0\")\n\nsolution(stdin)"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # pass\n\n    #!/bin/python3\n    import sys\n\n    def get_ints():\n        return map(int, sys.stdin.readline().strip().split())\n\n    def get_ints_between(a, b):\n        return map(int, range(a, b + 1))\n\n    def solve(a, b):\n        # print(a, b)\n        for i in range(a, b + 1):\n            # print(i)\n            if i % a!= 0:\n                return i\n        return -1\n\n    def test():\n        # print(solution())\n        pass\n\n    a, b = get_ints()\n    for i in get_ints_between(a, b):\n        print(solve(a, b))\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''get the input from stdin'''\n    def get_input():\n        t = int(stdin)\n        for _ in range(t):\n            n, k = list(map(int, stdin.split(' ')))\n            yield n, k\n\n    # get the input from stdin\n    stdin = get_input()\n    for n, k in stdin:\n        # find the index of the first number that is not divisible by n\n        index = (k - 1) // n\n        # find the modulo of the first number that is not divisible by n\n        modulo = (k - 1) % n\n\n        # get the value of the first number that is not divisible by n\n        result = n * index + modulo + 1\n\n        # print the result\n        print(result)\n\n    # Return the value of the last number that is not divisible by n\n    return result\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        if k == 1:\n            k += 1\n        if k % n == 0:\n            k += 1\n        while k % n!= 0:\n            k += 1\n        print(k)\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 3 7\n   ... 4 12\n   ... 2 1000000000\n   ... 7 97\n   ... 1000000000 1000000000\n   ... 2 1''')\n    10\n    15\n    1999999999\n    113\n    1000000001\n    1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = list(map(int, stdin.readline().split()))\n        number = (n*(n+1))//2\n        print(number)\n        print((k-1) * n + 1)"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not solved yet'\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = [int(x) for x in stdin[0].split(' ')]\n    friends = [int(x) for x in stdin[1].split(' ')]\n    list = []\n    for i in range(n):\n        if i % k == 0:\n            list.pop()\n        list.append(friends[i])\n    return''.join([str(x) for x in list])\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    id_list = list(map(int, stdin.split(' ')[1:]))\n    s = [{'id': x, 'count': 1, 'pos': 0} for x in range(1, n + 1)]\n    for x in id_list:\n        s[x - 1]['count'] = 1\n        s[x - 1]['pos'] = 0\n        \n    count = 0\n    for x in range(1, n + 1):\n        if s[x - 1]['count'] == 1:\n            s[x - 1]['count'] = 0\n            if count > k:\n                count -= 1\n                s[x - 1]['pos'] = -1\n            else:\n                count += 1\n    \n    ans = []\n    for x in range(k):\n        ans.append(s[x]['id'])\n    \n    return '\\n'.join(list(map(str, ans)))\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2\\n1 2 3 2 1 3 2\\n\")\n    '2\\n2 1'\n    >>> solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\")\n    '3\\n1 3 2'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n    m = min(n, k)\n\n    queue = deque([], maxlen=m)\n    for i in range(n):\n        queue.append(ids[i])\n        if queue[0] == ids[i]:\n            continue\n        else:\n            while queue[0]!= ids[i]:\n                queue.append(queue.popleft())\n            queue.popleft()\n\n    return \"\\n\".join(map(str, queue))\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    ids = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    nums = [0]*k\n    count = 0\n    for num in ids:\n        while nums[count]!= 0:\n            count += 1\n            if count >= k:\n                break\n        nums[count] = num\n    print(count)\n    print(' '.join(str(x) for x in nums[:count]))\n    \n"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2\\n1 2 3 2 1 3 2\\n\")\n    '2'\n    >>> solution(\"10 4\\n2 3 3 1 1 2 1 2 3 3\\n\")\n    '3'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    messages = [int(x) for x in stdin.split()[1].split()]\n    friend_ids = [int(x) for x in stdin.split()[1].split()]\n\n    messages_dict = defaultdict(list)\n\n    for message, friend_id in zip(messages, friend_ids):\n        messages_dict[friend_id].append(message)\n\n    #print(messages_dict)\n    #{1: [1, 2], 2: [3, 2], 3: [3]}\n\n    #print(list(messages_dict.keys()))\n    #[1, 2, 3]\n\n    cur_conversations = []\n    for key, value in messages_dict.items():\n        if len(value) >= k:\n            cur_conversations.append(key)\n\n    #print(cur_conversations)\n    #[1, 2, 3]\n\n    #print(messages_dict[1])\n    #[1, 2]\n\n    res = []\n    for i in range(len(cur_conversations)):\n        messages_dict[cur_conversations[i]].sort()\n        #print(messages_dict[cur_conversations[i]])\n        res.append(cur_conversations[i])\n\n    return \" \".join([str(x) for x in res])"
    },
    {
        "number": 4510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    conversations = []\n    for i in range(n):\n        id = int(stdin.readline())\n        conversations.append(id)\n        conversations.sort()\n    \n    return str(len(conversations)) + \" \" + \" \".join(str(x) for x in conversations)\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the max damage the hero can deal.\n\n    :param stdin: input\n    :return: max damage hero can deal\n    \"\"\"\n    # Input\n    # n = int(stdin)\n    # k = [int(stdin) for _ in range(n)]\n    # cards = []\n    # for _ in range(n):\n    #     # Input\n    #     cards.append([int(stdin), int(stdin)])\n    #     # Output\n    #     # print(int(stdin))\n\n    # k = [int(stdin) for _ in range(n)]\n    # cards = []\n    # for _ in range(n):\n    #     cards.append([int(stdin), int(stdin)])\n\n    # k = [int(stdin) for _ in range(n)]\n    # cards = []\n    # for _ in range(n):\n    #     cards.append([int(stdin), int(stdin)])\n    n = 5\n    cards = [[1, 6], [1, 7], [1, 5], [2], [1, 4], [1, 3], [3], [1, 10], [3, 5], [2, 3]]\n    k = [3, 2, 2, 2, 1, 1, 1, 1, 3, 3]\n    hero = Hero(k, cards, n)\n\n    return hero.get_max_damage()\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport io\n\nsys.stdin = io.StringIO(stdin)\nsys.stdout = io.StringIO()\n\n\ndef"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum damage a player may deal during n turns, if it plays optimally\"\"\"\n    \n    return 'WRONG ANSWER'"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # <<-- stub code -->>\n    return \"\"\n    # <<-- end of your code -->>\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cards = []\n    for i in range(n):\n        k = int(stdin.readline())\n        for _ in range(k):\n            c, d = [int(j) for j in stdin.readline().split()]\n            cards.append([c, d])\n    cards.sort(key=lambda x: -x[0])\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        max_dp = 0\n        for j in range(i):\n            if cards[i - 1][0] + cards[j][0] <= 3:\n                max_dp = max(max_dp, dp[j] + cards[i - 1][1] + cards[j][1])\n        dp[i] = max_dp\n    return max(dp)\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    cards = [tuple(map(int, line.split())) for i, line in zip(range(N), stdin.read().splitlines())]\n    dp = [[0] * (3 + 1) for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, min(3, i) + 1):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j] + cards[i - 1][1] * (j == cards[i - 1][0]))\n        for j in range(3, 3 + 1):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - 3] + cards[i - 1][1])\n    return str(max(dp[N]))"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(1000000)\n\n\ndef"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = [int(x) for x in stdin.readline().split(' ')]\n    c = [[int(x) for x in stdin.readline().split(' ')] for _ in range(n)]\n    a = [0 for _ in range(10)]\n    for i in range(n):\n        for j in range(k[i]):\n            a[c[i][j]] += 1\n    ans = 0\n    for i in range(1, 4):\n        if a[i] == 0:\n            continue\n        ans += a[i] * (i ** 2)\n    if a[4] == 2:\n        ans *= 2\n    return ans\n\nprint(solution(input))\n-----\n\ndef"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    q = int(stdin.readline())\n    for _ in range(q):\n        query, l, r = [int(x) for x in stdin.readline().split()]\n        if query == 1:\n            s = s[:l-1] + s[l-1].replace(s[l-1], s[r-1])\n        else:\n            s = s[l-1:r]\n            print(len(set(s)))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[0]\n    query_count = int(stdin[1])\n    result = []\n    for _ in range(query_count):\n        query = stdin[2 + _].split()\n        if query[0] == '1':\n            string = string[0: int(query[1]) - 1] + query[2] + string[int(query[1]) - 1:]\n        else:\n            count = 0\n            left, right = int(query[1]), int(query[2])\n            while left <= right:\n                count += len(set(string[left - 1: right]))\n                left += 1\n                right += 1\n            result.append(count)\n\n    return '\\n'.join(str(x) for x in result)\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abacaba\")\n    3\n    \"\"\"\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    q = int(stdin.split(\"\\n\")[0])\n    str_list = stdin.split(\"\\n\")[1:-1]\n    \n    for i in range(q):\n        s = str_list[i]\n        s = s.split(\" \")\n        if s[0] == \"1\":\n            string = string[:int(s[1])] + s[2] + string[int(s[1]):]\n        elif s[0] == \"2\":\n            ans = 0\n            l, r = int(s[1]), int(s[2])\n            for i in range(l-1, r):\n                ans += len(set(string[i]))\n            print(ans)\n\nsolution(stdin)\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest substring in a given string that is a palindrome, given a certain number of operations.\n    \n    Args:\n        stdin (str): a string that is guaranteed to contain no more than 10^5 letters\n    \n    Returns:\n        str: the longest substring that is a palindrome\n    \"\"\"\n    \n    string = stdin\n    \n    #\u00a0Find the length of the longest palindrome\n    longest_palindrome = \"\"\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            if palindrome(string[i : j]) and len(string[i : j]) > len(longest_palindrome):\n                longest_palindrome = string[i : j]\n    \n    #\u00a0Find all the indices of the longest palindrome\n    longest_palindrome_indices = []\n    for i in range(len(string)):\n        if string[i] == longest_palindrome[0]:\n            longest_palindrome_indices.append(i)\n    \n    #\u00a0Find the longest palindrome substring\n    max_possible = string.index(longest_palindrome[0]) + len(longest_palindrome)\n    for i in longest_palindrome_indices:\n        if max_possible > i + len(longest_palindrome):\n            max_possible = i + len(longest_palindrome)\n            longest_palindrome_substring = string[i: max_possible]\n    \n    #\u00a0Make the string all lowercase\n    longest_palindrome_substring = longest_palindrome_substring.lower()\n    \n    #\u00a0Write to stdout\n    print(longest_palindrome_substring)\n    return longest_palindrome_substring\n\n\ndef"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string s by replacing every substring in s with the substring if it is not in dictionary.\n    >>> solution('''abacaba\n   ... 5\n   ... 2 1 4\n   ... 1 4 b\n   ... 1 5 b\n   ... 2 4 6\n   ... 2 1 7''')\n    'bacabaf'\n    >>> solution('''dfcbbcfeeedbaea\n   ... 15\n   ... 1 6 e\n   ... 1 4 b\n   ... 2 6 14\n   ... 1 7 b\n   ... 1 12 c\n   ... 2 6 8\n   ... 2 1 6\n   ... 1 7 c\n   ... 1 2 f\n   ... 1 10 a\n   ... 2 7 9\n   ... 1 10 a\n   ... 1 14 b\n   ... 1 1 f\n   ... 2 1 11''')\n    'dfcbbcfeee'\n    \"\"\"\n    s = stdin.strip()\n    dictionary = {}\n    for i in range(1, len(s) + 1):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] not in dictionary:\n                dictionary[s[i:j]] = s[i:j]\n    for _ in range(int(stdin.split()[1])):\n        l, r = [int(x) for x in stdin.split()[2:]]\n        if l < r:\n            print(len(set(s[l:r])))\n        else:\n            print(len(set(s[l:r] + s[:l])))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()[0]\n    q = int(stdin.split()[1])\n    result = []\n    for _ in range(q):\n        query = stdin.split()[2:]\n        if query[0] == '1':\n            start, end, c = int(query[1]), int(query[2]), query[3]\n            string = string[:start] + c + string[start:]\n        elif query[0] == '2':\n            start, end = int(query[1]), int(query[2])\n            result.append(len(set(string[start - 1: end])))\n    return '\\n'.join(map(str, result))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    q = int(stdin[1])\n    \n    res = []\n    for _ in range(q):\n        q = stdin[2:]\n        if q[0] == '1':\n            ind = int(q[1])\n            ch = q[2]\n            s = s[:ind] + ch + s[ind+1:]\n        elif q[0] == '2':\n            l = int(q[1])\n            r = int(q[2])\n            cnt = 0\n            for i in range(len(s)-r+1):\n                if set(s[i:i+r]) == set(s[i:i+r]):\n                    cnt += 1\n            res.append(cnt)\n    return res\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string, queries_number = stdin.split('\\n')[0], int(stdin.split('\\n')[1])\n    queries = []\n    for i in range(queries_number):\n        queries.append(stdin.split('\\n')[i + 2])\n    string = list(string)\n    for query in queries:\n        if query.split(' ')[0] == '1':\n            string[int(query.split(' ')[1]) - 1] = query.split(' ')[2]\n        else:\n            temp = [string[int(query.split(' ')[1]) - 1], query.split(' ')[2]]\n            print(temp)\n            for i in range(int(query.split(' ')[1]) - 1, int(query.split(' ')[3]) - 1):\n                string[i] = temp[0]\n                temp = [string[i], temp[1]]\n            string[int(query.split(' ')[3]) - 1] = temp[1]\n        print(string)\n    return ''.join(string)\nprint(solution('codeforces'))\n"
    },
    {
        "number": 4512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_s = stdin\n    n, q = list(map(int, input().split(' ')))\n    s = input_s\n    for _ in range(q):\n        line = input().split(' ')\n        if int(line[0]) == 1:\n            a, b = list(map(int, line[1:]))\n            s = s[:a] + line[-1] + s[a:]\n        else:\n            a, b = list(map(int, line[1:]))\n            print(len(set(s[a:b + 1])))\n    return s\n\n\ndef"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        solution = [list(map(int, stdin.readline().split())) for _ in range(9)]\n        for i in range(9):\n            for j in range(9):\n                if solution[i][j] == 0:\n                    for k in range(1, 10):\n                        if k in [solution[i - x][j - y] for x in range(3) for y in range(3)]:\n                            continue\n                        if k in [solution[i - x][j] for x in range(3)]:\n                            continue\n                        if k in [solution[i][j - y] for y in range(3)]:\n                            continue\n                        if k in solution[i // 3 * 3 + j // 3 * 3]:\n                            continue\n                        solution[i][j] = k\n                        break\n        print(*[' '.join(map(str, i)) for i in solution], sep='\\n')\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        a = list(map(int, stdin.readline().strip().split()))\n        a = [i - 1 for i in a]\n        print(''.join(map(str, a)))\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = [map(int, line.strip()) for line in stdin.split('\\n')]\n    s = np.array(s)\n    for i in range(9):\n        for j in range(9):\n            if s[i, j]!= 0:\n                for k in range(9):\n                    if k!= i and s[k, j] == s[i, j]:\n                        print('i, j', i, j)\n                        print('k, j', k, j)\n                        raise ValueError('Not solved')\n                for l in range(9):\n                    if l!= j and s[i, l] == s[i, j]:\n                        raise ValueError('Not solved')\n                for m in range(3):\n                    for n in range(3):\n                        if i // 3 * 3 + m!= i and j // 3 * 3 + n!= j:\n                            if s[i // 3 * 3 + m, j // 3 * 3 + n] == s[i, j]:\n                                raise ValueError('Not solved')\n    print(''.join(map(str, s)))\n    return ''.join(map(str, s))\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cases = int(stdin.readline())\n    for _ in range(num_of_cases):\n        sudoku = []\n        for _ in range(9):\n            sudoku.append(list(map(int, stdin.readline().split())))\n        sudoku = sudoku[:]\n        for i in range(9):\n            for j in range(9):\n                if sudoku[i][j] == 0:\n                    for k in range(1, 10):\n                        if k in sudoku[i]:\n                            continue\n                        elif k in [s[j] for s in sudoku]:\n                            continue\n                        else:\n                            sudoku[i][j] = k\n                            break\n        for i in range(9):\n            if len(set(sudoku[i]))!= 9:\n                print('NO')\n                return\n        for i in range(9):\n            col = []\n            for j in range(9):\n                col.append(sudoku[j][i])\n            if len(set(col))!= 9:\n                print('NO')\n                return\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                block = []\n                for k in range(3):\n                    for l in range(3):\n                        block.append(sudoku[i + k][j + l])\n                if len(set(block))!= 9:\n                    print('NO')\n                    return\n        print('YES')\n        return\nsolution(stdin)\n\n\"\"\"\n\nimport sys\nimport itertools\ndef"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        initial_sudoku = [list(map(int, stdin.readline().strip())) for _ in range(9)]\n        passed_sudoku = []\n        # create empty sudoku\n        for i in range(9):\n            passed_sudoku.append([])\n            for j in range(9):\n                passed_sudoku[i].append(0)\n        for i in range(9):\n            for j in range(9):\n                if initial_sudoku[i][j]!= 0:\n                    passed_sudoku[i][j] = 1\n        for k in range(9):\n            for i in range(9):\n                for j in range(9):\n                    if initial_sudoku[i][j] == 0:\n                        for m in range(1, 10):\n                            if not passed_sudoku[i][m] and not passed_sudoku[m][j] and m!= k + 1:\n                                passed_sudoku[i][k] = 1\n                                passed_sudoku[k][j] = 1\n                                passed_sudoku[i][j] = 2\n                                break\n        for i in range(9):\n            for j in range(9):\n                if passed_sudoku[i][j] == 2:\n                    initial_sudoku[i][j] = 0\n        print('\\n'.join(map(''.join, zip(*initial_sudoku))))\n        if _ < t - 1:\n            print()\n\nsolution(stdin)\n\n\n\n-----Test 4-----\n\nInput\n1\n54321\n5432\n13579\n12345\n67890\n\nOutput\n54321\n5432\n13579\n12345\n67890\n\n-----Test 3-----\n\nInput\n1\n92754\n92754\n92754\n92754\n92754\n92754\n92754\n92754\n92754\n92754\n\nOutput\n92754\n92754\n92754\n92754\n92754\n92754\n92754\n92754\n92754\n92754\n92754\n\n-----Test 2-----\n\nInput\n1\n83881\n83881\n83881\n83881\n83881\n83881\n83881\n83881\n83881\n83881\n\nOutput\n83881\n83881\n83881\n83881\n83881\n83881\n83881\n83881\n83881\n83881\n83881\n\n-----Test 1-----\n\nInput\n1\n4\n5\n9\n2\n6\n7\n8\n3\n1\n\nOutput\n4\n5\n9\n2\n6\n7\n8\n3\n1\n\n-----Test 0-----\n\nInput\n2\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\nOutput\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1\n2\n\n-----Test 8-----\n\nInput\n1\n\nOutput\n\n-----Test 7-----\n\nInput\n1\n\nOutput\n\n-----Test 6-----\n\nInput\n1\n\nOutput\n\n-----Test 5-----\n\nInput\n1\n\nOutput\n\n-----Test 4-----\n\nInput\n1\n\nOutput\n\n-----Test 3-----\n\nInput\n1\n\nOutput\n\n-----Test 2-----\n\nInput\n1\n\nOutput\n\n-----Test 1-----\n\nInput\n1\n\nOutput\n\n-----Test 0-----\n\nInput\n1\n\nOutput\n\n-----Test 9-----\n\nInput\n1\n\nOutput\n\n-----Test 8-----\n\nInput\n1\n\nOutput\n\n-----Test 7-----\n\nInput\n1\n\nOutput\n\n-----Test 6-----\n\nInput\n1\n\nOutput\n\n-----Test 5-----\n\nInput\n1\n\nOutput\n\n-----Test 4-----\n\nInput\n1\n\nOutput\n\n-----Test 3-----\n\nInput\n1\n\nOutput\n\n-----Test 2-----\n\nInput\n1\n\nOutput\n\n-----Test 1-----\n\nInput\n1\n\nOutput\n\n-----Test 0-----\n\nInput\n1\n\nOutput\n\n-----Test 9-----\n\nInput\n1\n\nOutput\n\n-----Test 8-----\n\nInput\n1\n\nOutput\n\n-----Test 7-----\n\nInput\n1\n\nOutput\n\n-----Test 6-----\n\nInput\n1\n\nOutput\n\n-----Test 5-----\n\nInput\n1\n\nOutput\n\n-----Test 4-----\n\nInput\n1\n\nOutput\n\n-----Test 3-----\n\nInput\n1\n\nOutput\n\n-----Test 2-----\n\nInput\n1\n\nOutput\n\n-----Test 1-----\n\nInput\n1\n\nOutput\n\n-----Test 0-----\n\nInput\n1\n\nOutput\n\n-----Test 9-----\n\nInput\n1\n\nOutput\n\n-----Test 8-----\n\nInput\n1\n\nOutput\n\n-----Test 7-----\n\nInput\n1\n\nOutput\n\n-----Test 6-----\n\nInput\n1\n\nOutput\n\n-----Test 5-----\n\nInput\n1\n\nOutput\n\n-----Test 4-----\n\nInput\n1\n\nOutput\n\n-----Test 3-----\n\nInput\n1\n\nOutput\n\n-----Test 2-----\n\nInput\n1\n\nOutput\n\n-----Test 1-----\n\nInput\n1\n\nOutput\n\n-----Test 0-----\n\nInput\n1\n\nOutput\n\n-----Test 9-----\n\nInput\n1\n\nOutput\n\n-----Test 8-----\n\nInput\n1\n\nOutput\n\n-----Test 7-----\n\nInput\n1\n\nOutput\n\n-----Test 6-----\n\nInput\n1\n\nOutput\n\n-----Test 5-----\n\nInput\n1\n\nOutput\n\n-----Test 4-----\n\nInput\n1\n\nOutput\n\n-----Test 3-----\n\nInput\n1\n\nOutput\n\n-----Test 2-----\n\nInput\n1\n\nOutput\n\n-----Test 1-----\n\nInput\n1\n\nOutput\n\n-----Test 0-----\n\nInput\n1\n\nOutput\n\n-----Test 9-----\n\nInput\n1\n\nOutput\n\n-----Test 8-----\n\nInput\n1\n\nOutput\n\n-----Test 7-----\n\nInput\n1\n\nOutput\n\n-----Test 6-----\n\nInput\n1\n\nOutput\n\n-----Test 5-----\n\nInput\n1\n\nOutput\n\n-----Test 4-----\n\nInput\n1\n\nOutput\n\n-----Test 3-----\n\nInput\n1\n\nOutput\n\n-----Test 2-----\n\nInput\n1\n\nOutput\n\n-----Test 1-----\n\nInput\n1\n\nOutput\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return None"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sudoku = [0] * 9\n    for i, line in enumerate(stdin.split('\\n')):\n        if i == 9:\n            break\n        for j, n in enumerate(line):\n            sudoku[i] = sudoku[i] * 10 + int(n)\n    def is_sudoku(i, j, n):\n        for k in range(9):\n            if sudoku[k] == sudoku[i] + sudoku[j] * 10 + n:\n                return False\n        for k in range(9):\n            if sudoku[3 * (i // 3) + k // 3] == sudoku[3 * (j // 3) + k % 3] + sudoku[i] * 10 + n:\n                return False\n        return True\n    for i in range(9):\n        for j in range(9):\n            for n in range(1, 10):\n                if is_sudoku(i, j, n):\n                    sudoku[i] = sudoku[i] * 10 + n\n                    break\n    return ''.join(map(str, sudoku))\n"
    },
    {
        "number": 4513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes input, runs a backtracking algorithm to solve Sudoku, and returns the solution.\n\n    Args:\n        stdin: The input to the program.\n\n    Returns:\n        str: The solution to the Sudoku.\n    \"\"\"\n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the order in which officers will receive the command if it starts spreading from the first officer.\n\n    Args:\n        stdin: input\n\n    Returns:\n        str: the order\n    \"\"\"\n    n, q = map(int, stdin.split(' '))\n    parents = [0] * n\n    children = [[] for _ in range(n)]\n    tree = {1: []}\n    for i in range(1, n):\n        p = int(stdin.split(' ')[i])\n        parents[i] = p\n        tree[p].append(i + 1)\n        children[p - 1].append(i + 1)\n\n    answers = []\n    for u, k in map(int, stdin.split('\\n')[q:]):\n        answers.append(dfs(u, k, tree, parents, children))\n\n    return '\\n'.join(map(str, answers))\n\n\ndef"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split(' '))\n    deps = {}\n    for i in range(n - 1):\n        deps[i + 2] = set([int(x) for x in stdin.split('\\n')[i].split(' ')[1:]])\n    stdin = stdin.split('\\n')[-1]\n    for q_i in range(q):\n        u, k = map(int, stdin.split(' '))\n        result = []\n        # tree = {1: []}\n        stack = deps[1].copy()\n        stack.remove(1)\n        while stack:\n            node = stack.pop()\n            if node in deps:\n                stack += deps[node].copy()\n                stack.remove(node)\n            else:\n                result.append(node)\n        # print(result)\n        if k > len(result):\n            result = [-1]\n        print(result[k - 1])"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the answer for the problem.\"\"\"\n    lines = stdin.strip().split('\\n')\n    n, m = [int(x) for x in lines[0].split()]\n    stdin = lines[1:]\n    stdin = [list(map(int, x.split())) for x in stdin]\n    stdin.sort(key=lambda x: x[0])\n    def helper(start, end):\n        if end - start + 1 == k:\n            return True\n        if end - start + 1 < k:\n            return False\n        for i in range(start + 1, end + 1):\n            if helper(start, i - 1) or (i == start and helper(i + 1, end)):\n                return True\n        return False\n    for i in range(m):\n        u, k = stdin[i]\n        k = k - 1\n        ans = -1\n        if helper(u, n - 1):\n            ans = stdin[i][1]\n        print(ans)"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Solution by Yann Cabon\n    # First, we get the number of officers in the army, and the number of queries.\n    n, q = map(int, stdin.split())\n\n    # We create a dictionary where we store all the superiors of each officer.\n    # The keys are the indexes of the officers and the values are the indexes of the superiors.\n    # This is a dictionary of dictionaries.\n    supers = {1: set()}\n\n    # We get the index of the superior of each officer.\n    for i in range(2, n + 1):\n        supers[i] = set(map(int, stdin.split()[i::n - 1]))\n\n    # We run through each query.\n    for _ in range(q):\n        # We get the number of the officer whose query we should run.\n        query_num = int(stdin.split()[0])\n\n        # We compute the answer.\n        # We get the number of superiors of the queried officer.\n        num_supers = len(supers[query_num])\n        # If the number of superiors is zero, the answer is -1.\n        if num_supers == 0:\n            print(-1)\n        # Otherwise, we compute the answer from the number of superiors and the number of queries.\n        else:\n            print(num_supers - 1 + (query_num - 1) * num_supers)\n\n        # We run the query.\n        # We get the indexes of the queried officer and the query number.\n        officer_num, query_num = map(int, stdin.split()[0:2])\n        # We get the list of superiors of the officer.\n        officer_supers = supers[officer_num]\n        # We get the list of superiors of the queried officer.\n        query_supers = supers[query_num]\n        # We add the queried officer to the list of superiors of the officer.\n        officer_supers.add(query_num)\n        # We add the queried officer to the list of superiors of the officer.\n        query_supers.add(officer_num)\n        # We update the superiors dictionary.\n        supers[query_num] = query_supers\n        # We update the superiors dictionary.\n        supers[officer_num] = officer_supers\n    return \"\"\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # n, q = map(int, stdin.readline().split())\n    # for _ in range(q):\n    #     u, k = map(int, stdin.readline().split())\n    #     # if u not in result:\n    #     #     result.append(u)\n    #     print(result[k-1])\n    #     # print(result[k])\n    #     # print(result[k+1])\n    #     # print(result[k+2])\n    #     # print(result[k+3])\n    # return\n    n = 9\n    q = 6\n    result = [1]\n    for u, k in [(3, 1), (1, 5), (3, 4), (7, 3), (1, 8), (1, 9)]:\n        if k <= len(result):\n            print(result[k - 1])\n        else:\n            print(-1)\n\n    # result = [[1, 1, 1, 3, 5, 3, 5, 7], [3, 5, 6, 8, 7, 9], [7, 9], [9], [4], [], [], [], [], [], [], [], [], [], [], []]\n    # print(result[q-1])\n    # print(result[q])\n    # print(result[q+1])\n    # print(result[q+2])\n    # print(result[q+3])\n    # return\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split(' '))\n    parents = [0] * (n + 1)\n    for i in range(n - 1):\n        parents[int(stdin.split(' ')[i + 1])] = int(stdin.split(' ')[i])\n    result = []\n    for _ in range(q):\n        u, k = map(int, stdin.split(' '))\n        tmp = [u]\n        for i in range(k):\n            tmp.append(parents[tmp[i]])\n        result.append(str(tmp.index(n) + 1))\n    print('\\n'.join(result))\n\n\nsolution(input())\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    f[u][k] - u: current node\n    k: number of successors to reach node u\n    '''\n    n, q = map(int, stdin.split())\n    parents = list(map(int, stdin.split()))\n    graph = defaultdict(list)\n\n    for child, parent in enumerate(parents):\n        graph[parent].append(child)\n\n    def dfs(node, k):\n        if k == 0:\n            return 1\n        return len(graph[node]) + sum([dfs(child, k - 1) for child in graph[node]])\n\n    for _ in range(q):\n        u, k = map(int, stdin.split())\n        print(dfs(u, k))\n    return ''\n\n\ndef"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split()]\n    adjacency_matrix = [[] for _ in range(n)]\n    \n    for i in range(n - 1):\n        parent, child = [int(x) for x in stdin.split()]\n        adjacency_matrix[parent - 1].append(child - 1)\n    \n    result = []\n    \n    for _ in range(q):\n        u, k = [int(x) for x in stdin.split()]\n        \n        queue = [u - 1]\n        visited = set()\n        \n        while queue:\n            current_level = queue.pop()\n            visited.add(current_level)\n            for child in adjacency_matrix[current_level]:\n                if child not in visited:\n                    queue.append(child)\n        \n        if len(visited) >= k:\n            result.append(queue[k - 1] + 1)\n        else:\n            result.append(-1)\n    \n    return '\\n'.join(str(x) for x in result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    subs = [0] * n\n    subs[0] = 1\n    for _ in range(q):\n        u, k = map(int, stdin.split())\n        if subs[u - 1] >= k:\n            print(-1)\n            continue\n        for j in range(u - 1, 0, -1):\n            if subs[j] < k:\n                subs[j + 1] = subs[j]\n            else:\n                break\n        subs[u] = k\n        for j in range(u):\n            if subs[j] < k:\n                subs[j + 1] = subs[j]\n            else:\n                break\n        subs[0] = 1\n    return \"\\n\".join(map(str, subs))\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cases = int(stdin.readline())\n\n    for i in range(num_of_cases):\n        stdin.readline()\n        a, b, c, n = [int(x) for x in stdin.readline().split()]\n        if a + b + c == n:\n            print('YES')\n        else:\n            print('NO')\n\n    return ''\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if Polycarp can distribute all $n$ coins between his sisters and 'NO' otherwise.\"\"\"\n   ...\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def read_list(n: int) -> list:\n        return [int(stdin.readline()) for _ in range(n)]\n    test_cases = int(stdin.readline())\n    for _ in range(test_cases):\n        a, b, c, n = read_list(4)\n        if a + b + c == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return ''\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \"\"\"\n    stdin = stdin.split()\n    case = stdin[0]\n    cases = []\n    for i in range(1, int(stdin[0])+1):\n        cases.append(stdin[i])\n    return cases\n\n\ncases = solution(\"6 4 3 2 5\")\nfor i in range(0, 6):\n    print(solution(cases[i]))\n    \"\"\"\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b, c, n = map(int, stdin.split())\n        if n == a + b + c:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds a solution for the problem\n    '''\n    number_of_tests = int(stdin.readline())\n    for test in range(number_of_tests):\n        a, b, c, n = list(map(int, stdin.readline().split()))\n        if n % 3 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    n, m = map(int, stdin.split(' '))\n    nums = list(map(int, stdin.split(' ')))\n    for i in range(m - 1):\n        total += abs(nums[i] - nums[i + 1])\n    return total\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a list of the solution of the problem.\"\"\"\n    (n, m), *xs = [int(x) for x in stdin.split('\\n') if x]\n    return''.join(map(str, f(list(range(n)), xs)))\n\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0].split()[0])\n    m = int(stdin[0].split()[1])\n    x = [int(i) for i in stdin[1].split()]\n    \n    f = [0]*(m-1)\n    for i in range(m-1):\n        f[i] = abs(x[i] - x[i+1])\n    \n    print(\" \".join(str(i) for i in f))\n    return \"\""
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    'Computes the sum of differences of positions of elements in permutations.'\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    assert 1 <= n <= 10 ** 5\n    assert 2 <= m <= n * (n - 1) / 2\n    assert all(1 <= x_i <= n for x_i in x)\n    assert len(set(x)) == len(x)\n    # x = sorted(x)\n    # x_prev = x[0]\n    # x_counter = 1\n    # answer = 0\n    # for x_i in x[1:]:\n    #     if x_i == x_prev:\n    #         x_counter += 1\n    #     else:\n    #         answer += x_counter - 1\n    #     x_prev = x_i\n    # return str(answer)\n\n    # The solution based on this solution:\n    # m = len(x)\n    # a = [1] * m\n    # for i in range(1, m):\n    #     a[i] = x[i - 1]\n    # answer = 0\n    # for i in range(1, m):\n    #     k = a[i]\n    #     answer += abs(a.index(k) - i)\n    # return str(answer)\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    x = list(map(int, lines[1].split()))\n    n = int(lines[0])\n    m = len(x)\n    res = [0] * n\n    for i in range(1, m):\n        res[0] += abs(x[i] - x[i - 1])\n    for i in range(1, n):\n        for j in range(m):\n            res[i] += abs(x[j] - x[(j + i) % m])\n    return''.join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    def f(p):\n        ret = 0\n        for i in range(1, m):\n            ret += abs(p.index(x[i]) - p.index(x[i - 1]))\n        return ret\n    return '\\n'.join(map(str, [f(p) for p in permutations(x)]))\nprint(solution(input()))"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total_length, number_of_elements = map(int, stdin.split(' '))\n    elements = list(map(int, stdin.split(' ')))\n    maximum_distance = 0\n    total_distance = 0\n    for i in range(number_of_elements):\n        maximum_distance = max(maximum_distance, abs(elements[i] - elements[i + 1]))\n    for j in range(number_of_elements):\n        if j == 0:\n            total_distance = maximum_distance\n        else:\n            total_distance = total_distance + maximum_distance\n    return total_distance"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    n, m = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    for i in range(n - 1):\n        total += abs(lst[i] - lst[i+1])\n    return str(total)"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    # p = [0] * (n + 1)\n    # for i, v in enumerate(x, start=1):\n    #     p[v] = i\n    p = [0] * (n + 1)\n    for i, v in enumerate(x, start=1):\n        p[v] = i\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + abs(p[j] - j)\n    return''.join(map(str, [dp[m][n] for n in range(1, n + 1)]))\n"
    },
    {
        "number": 4516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    assert len(x) == m\n    return [sum([abs(x[j] - x[j-1]) for j in range(i, len(x))]) for i in range(1, m)]\n\n\n\n-----Code-----\n\ndef"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    arr = [list(map(int, line.split())) for line in stdin.split('\\n')[2:] if line]\n    print(arr)\n    return ''"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(test_input)\n    'YES'\n    \"\"\"\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    edges = [\n        (int(i), int(j))\n        for i, j in (line.split() for line in stdin[1:n + 1])\n    ]\n    queries = [\n        list(map(int, line.split()))[1:]\n        for line in stdin[n + 1:]\n    ]\n\n    from collections import defaultdict\n    graph = defaultdict(set)\n    for edge in edges:\n        graph[edge[0]].add(edge[1])\n\n    root = 1\n    from queue import deque\n    queue = deque([(root, 0)])\n    visited = set()\n    while queue:\n        vertex, distance = queue.popleft()\n        if vertex in visited:\n            continue\n        if distance == 1:\n            return \"YES\"\n        visited.add(vertex)\n        queue.extend([\n            (nbr, distance + 1)\n            for nbr in graph[vertex]\n        ])\n    return \"NO\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = [int(x) for x in stdin.strip().split()]\n    lst = []\n    for _ in range(n - 1):\n        u, v = [int(x) for x in stdin.strip().split()]\n        lst.append((u, v))\n\n    for _ in range(m):\n        k = int(stdin.strip())\n        lst2 = []\n        for _ in range(k):\n            v = int(stdin.strip())\n            lst2.append(v)\n        lst2.sort()\n        print(lst2)\n        p = [0] * n\n        c = 0\n        for j, i in enumerate(lst2):\n            for u, v in lst:\n                if i == u:\n                    p[v - 1] = j + 1\n                    c += 1\n                    break\n            if c == 0:\n                break\n        if c == k:\n            print('YES')\n        else:\n            print('NO')\n    '''\n    n, m = [int(x) for x in stdin.strip().split()]\n    lst = {}\n    for _ in range(n - 1):\n        u, v = [int(x) for x in stdin.strip().split()]\n        lst[u - 1] = v - 1\n    for _ in range(m):\n        k = int(stdin.strip())\n        lst2 = []\n        for _ in range(k):\n            v = int(stdin.strip())\n            lst2.append(v - 1)\n        lst2.sort()\n        print(lst2)\n        p = [0] * n\n        c = 0\n        for j, i in enumerate(lst2):\n            if i not in lst:\n                continue\n            p[i] = j + 1\n            c += 1\n        if c == k:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    'Compute the solution of the problem'\n    # get the data\n    data = get_data(stdin)\n    # create the graph\n    graph = create_graph(data)\n    # get the number of queries\n    query_number = get_query_number(data)\n    # iterate over queries\n    for i in range(query_number):\n        # get the number of vertices in the query\n        vertices_in_query = get_number_of_vertices_in_query(data, i)\n        # create a set of vertices in the query\n        query_set = get_set_of_vertices_in_query(data, i, vertices_in_query)\n        # check if a path exists between the root and the query set\n        is_a_path_exists = path_exists(graph, 1, query_set)\n        # if a path exists, print YES\n        if is_a_path_exists:\n            print('YES')\n        # if not, print NO\n        else:\n            print('NO')\n    return ''\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\n    You can delete this comment and add a description of your solution.\n\n    Parameters:\n        stdin (str): the input text\n\n    Returns:\n        str: the solution\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    num_tests = int(stdin.readline())\n    for _ in range(num_tests):\n        num_districts = int(stdin.readline())\n        num_bandits = num_districts\n        districts = list(map(int, stdin.readline().split()))\n        #\n        graph = {i: [] for i in range(num_districts)}\n        for i, (a, b) in enumerate(zip(districts, districts[1:])):\n            if a == b:\n                print(\"NO\")\n                break\n            graph[a].append(b)\n            graph[b].append(a)\n        #\n        tours = []\n        stack = [0]\n        while stack:\n            cur_dist = stack.pop()\n            tour = [cur_dist]\n            while tour:\n                cur_dist = tour.pop()\n                for neigh in graph[cur_dist]:\n                    if neigh not in tour:\n                        tour.append(neigh)\n            tours.append(tour)\n        else:\n            num_roads = num_districts - 1\n            assert len(tours) == num_districts\n            assert len(tours[0]) == 1\n            roads = []\n            for tour in tours[1:]:\n                for idx in range(len(tour)):\n                    if tour[idx]!= tour[(idx + 1) % len(tour)]:\n                        roads.append((tour[idx], tour[(idx + 1) % len(tour)]))\n            assert len(roads) == num_roads\n            for road in roads:\n                x, y = road\n                if districts[x]!= districts[y] or \\\n                        any(districts[road[0]]!= district\n                            for district in graph[road[0]]):\n                    print(\"NO\")\n                    break\n            else:\n                print(\"YES\")\n                for road in roads:\n                    x, y = road\n                    print(f\"{x} {y}\")\n    return None"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # We can implement this using DFS, so we can explore all roads to all nodes.\n    # It is very similar to https://leetcode.com/problems/reconstruct-itinerary/\n    # We use a stack, push all roads starting from one node to the stack.\n    # If we find a node with the same source, we pop it and the previous one.\n    # If we find a node with a different source, we return False.\n    # At the end, if we are at the end of the stack, all roads were successful.\n    \n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        roads = defaultdict(list)\n        districts = defaultdict(int)\n        for i in range(n):\n            source, target = stdin.readline().split()\n            source, target = int(source), int(target)\n            roads[source].append(target)\n            districts[source] += 1\n        roads = [x for x in roads.values() if len(x) == 1]\n        districts = [x for x in districts.values() if x == 1]\n        stack = []\n        for road in roads:\n            stack.append(road[0])\n            stack.append(road[1])\n        stack = stack[::2]\n        i = 0\n        while i < len(stack) - 1:\n            stack[i], stack[i + 1] = stack[i + 1], stack[i]\n            i += 2\n        while len(stack) > 0:\n            districts.pop(stack.pop())\n        if len(districts) > 1:\n            print('NO')\n            continue\n        print('YES')\n        for road in roads:\n            print(f'{road[0]} {road[1]}')\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n = int(stdin.readline())\n        dists = sorted(list(map(int, stdin.readline().split())))\n        \n        maxdist = n - 1\n        roads = set()\n        \n        for dist1 in range(n):\n            for dist2 in range(dist1 + 1, n):\n                if dists[dist2] - dists[dist1] > maxdist:\n                    break\n                \n                roads.add((dist1, dist2))\n        \n        if len(roads) < n - 1:\n            print('NO')\n        else:\n            print('YES')\n            for road in roads:\n                print(' '.join(map(str, road)))\n            "
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Read input\n    # Get n\n    # Read ai\n    # Read bi\n    # Create edges\n    # Write YES if possible\n    # Write NO if not\n    pass\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 1 2 2 1 3\n   ... 3\n   ... 1 1 1\n   ... 4\n   ... 1 1000 101 1000\n   ... 4\n   ... 1 2 3 4\n   ... ''')\n    'YES\\n1 3\\n3 5\\n5 4\\n1 2\\nNO\\nYES\\n1 2\\n1 3\\n1 4'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        num_districts = int(stdin.readline())\n        districts = []\n        gangs = set()\n        for district in range(num_districts):\n            gangs = set(map(int, stdin.readline().split()))\n            districts.append(gangs)\n        num_roads = num_districts - 1\n        road_sets = []\n        for i in range(num_districts):\n            for j in range(i + 1, num_districts):\n                if i!= j and districts[i] == districts[j]:\n                    continue\n                road_sets.append((i, j))\n        if not road_sets:\n            print(\"NO\")\n            continue\n        visited = set()\n        for road_set in road_sets:\n            road_set = list(road_set)\n            if road_set in visited:\n                continue\n            visited.add(road_set)\n            path = []\n            found = True\n            for i in range(num_roads):\n                if not path:\n                    path = [road_set[0], road_set[1]]\n                    path.append(road_set[2])\n                    continue\n                current = path[-1]\n                if current == road_set[0]:\n                    path.append(road_set[1])\n                    path.append(road_set[2])\n                    continue\n                if current == road_set[1]:\n                    path.append(road_set[0])\n                    path.append(road_set[2])\n                    continue\n                found = False\n                break\n            if found:\n                if road_set[0] == road_set[1]:\n                    print(\"NO\")\n                    break\n                for i in range(num_districts):\n                    if road_set[0] in districts[i] and road_set[1] in districts[i]:\n                        print(\"YES\")\n                        for road in path:\n                            print(road, end=\" \")\n                        print()\n                        break\n            else:\n                print(\"NO\")\n                break"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #lines = stdin.split('\\n')\n    lines = stdin.split()\n    t = int(lines[0])\n    n = int(lines[1])\n    a = [int(num) for num in lines[2:]]\n    res = []\n    for i in range(n-1):\n        a.sort()\n        a[0] += 1\n        res.append(a[0]-1)\n        a[0] -= 1\n        a[1] += 1\n        res.append(a[1]-1)\n        a[1] -= 1\n        a.sort()\n        \n        if a[0]!= a[1]:\n            print(\"NO\")\n            return \n    print(\"YES\")\n    for i in range(n-1):\n        print(res[i], res[i+1])\n    \n    return\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    # perform dfs\n    g = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!= a[j]:\n                g[i].append(j)\n                g[j].append(i)\n    visited = [False for i in range(n)]\n\n    def dfs(cur, path):\n        visited[cur] = True\n        for neib in g[cur]:\n            if visited[neib] == False:\n                dfs(neib, path + [neib])\n\n    # run dfs for every starting point\n    for i in range(n):\n        if visited[i] == False:\n            dfs(i, [i])\n\n    # check if there are any disconnected components\n    for i in range(n):\n        if visited[i] == False:\n            return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return YES if it is possible to build all the roads or NO otherwise.\"\"\"\n    count_of_roads = int(stdin)\n    count_of_districts = int(stdin)\n    roads = [list(map(int, stdin.split(\"\\n\")[0])) for _ in range(count_of_roads)]\n    return count_of_districts - roads.count(0) + 1\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        s = stdin.readline().strip()\n        n, k = s.split(' ')\n        n = int(n)\n        k = int(k)\n        curr = ''\n        for i in range(n):\n            if i % 2 == 0:\n                curr += '1'\n            else:\n                curr += '0'\n        prev = curr\n        # while len(curr) > n or k > 0:\n        #     for i in range(len(curr) - 1):\n        #         if curr[i] == '1' and curr[i+1] == '0':\n        #             curr = curr[:i] + '0' + curr[i+2:]\n        #             k -= 1\n        #             break\n        #     else:\n        #         k -= 1\n        #         curr = curr[:len(curr) - 1]\n        while len(curr) > n or k > 0:\n            for i in range(len(curr) - 1):\n                if curr[i] == '0' and curr[i+1] == '1':\n                    curr = curr[:i] + '1' + curr[i+2:]\n                    k -= 1\n                    break\n            else:\n                k -= 1\n                curr = curr[:len(curr) - 1]\n        print(curr)"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    \n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        line = stdin.readline().strip().split()\n        n, k = int(line[0]), int(line[1])\n        a = stdin.readline().strip()\n        l = sorted(list(a))\n        \n        for _ in range(k):\n            i, j = randrange(0, n), randrange(0, n)\n            l[i], l[j] = l[j], l[i]\n        \n        print(''.join(l))\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    # return \"\"\n    #\n    # n = int(stdin.readline().split()[0])\n    # for _ in range(n):\n    #     n, k = map(int, stdin.readline().split())\n    #     s = stdin.readline()\n    #     i = 0\n    #     ans = []\n    #     while k > 0 and i < len(s):\n    #         if s[i] == s[i + 1]:\n    #             ans.append('1' if s[i] == '0' else '0')\n    #             k -= 1\n    #         else:\n    #             ans.append(s[i + 1])\n    #         i += 1\n    #     while i < len(s):\n    #         ans.append(s[i])\n    #         i += 1\n    #     print(\"\".join(ans))\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return solution\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        n, k = map(int, stdin.split())\n        s = stdin.split()\n        s = list(s[0])\n        for j in range(k):\n            a = random.randint(0, n-1)\n            b = random.randint(0, n-1)\n            while a == b:\n                b = random.randint(0, n-1)\n            temp = s[a]\n            s[a] = s[b]\n            s[b] = temp\n        print(s)\n    return \"\"\n\n\n-----Pseudo Code-----\n\n\n-----Overview-----\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res\n"
    },
    {
        "number": 4519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, k, s):\n        segments.sort()\n        ans = 0\n        for i in range(n):\n            if i > 0 and segments[i][0] <= segments[i - 1][1]:\n                continue\n            l, r = segments[i]\n            ok = [True] * n\n            for j in range(i + 1, n):\n                if segments[j][0] <= r:\n                    ok[j] = False\n                    ans += 1\n            for j in range(i + 1, n):\n                if ok[j]:\n                    solve(n - 1, k - 1, (l, r))\n                    break\n        return ans\n\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    ans = solve(n, k, segments)\n    return str(ans)\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    n, k = map(int, stdin.readline().split())\n    start_end_points = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        start_end_points.append([l, r])\n    points_covered = [set() for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if not start_end_points[i][1] < start_end_points[j][0] and not start_end_points[j][1] < start_end_points[i][0]:\n                points_covered[i].add(j)\n                points_covered[j].add(i)\n    segments = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j in points_covered[i]:\n                continue\n            for k in range(j + 1, n):\n                if k in points_covered[i] or k in points_covered[j]:\n                    continue\n                if not start_end_points[j][1] < start_end_points[k][0] and not start_end_points[k][1] < start_end_points[j][0]:\n                    segments.append([i, j, k])\n    best = -1\n    best_solution = None\n    for solution in itertools.permutations(range(n)):\n        solution = set(solution)\n        covered = [points_covered[s] for s in solution]\n        bad = []\n        for i in range(n):\n            if i in solution:\n                continue\n            bad_covered = set()\n            for covered_i in covered:\n                bad_covered |= covered_i\n            bad_covered -= solution\n            bad.append(len(bad_covered))\n        if sum(bad) > k:\n            continue\n        if sum(bad) < best or best == -1:\n            best = sum(bad)\n            best_solution = solution\n    print(best)\n    print(' '.join(map(str, best_solution)))\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Tr\u1ea3 v\u1ec1 text bi\u1ec3u th\u1ee9c cho b\u00e0i to\u00e1n\n    \"\"\"\n    def get_count(l, r, k):\n        i = r\n        count = 0\n        while i >= l:\n            count += 1\n            i -= (i & -i)\n        return count\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    s = []\n    for i in range(1, n+1):\n        l, r = [int(x) for x in stdin.split('\\n')[i].split()]\n        s.append((l, r))\n    s = sorted(s, key=lambda x: x[1])\n    res = 0\n    i = 0\n    l = s[0][0]\n    while i < n:\n        if get_count(l, s[i][1], k) > 1:\n            res += 1\n            l = s[i][0]\n        i += 1\n    return f'{res}\\n{\", \".join([str(x) for x in range(1, res+1)])}'\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of segments to be removed so that all integers are not covered by more than k segments.\n    \"\"\"\n    # Init.\n    n, k = [int(x) for x in stdin.split(' ')]\n    p = [int(x) for x in stdin.split('\\n')[1:]]\n    \n    # Remove segments and find bad points.\n    p = sorted(p)\n    p_ = []\n    \n    for i in range(len(p)):\n        for j in range(len(p)):\n            if i == j:\n                continue\n            if p[i] > p[j]:\n                break\n            if p[i] < p[j]:\n                if p[i] <= p[j] - k:\n                    p_.append(p[i])\n                    p_.append(p[j])\n                    break\n        if len(p_) == 0:\n            break\n\n    return str(len(p_)) + '\\n' +''.join(map(str, sorted(p_)))\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(n):\n        l, r = list(map(int, stdin.split()))\n        segments.append((l, r))\n    segments.sort()\n    bad_points = set()\n    for i, segment in enumerate(segments):\n        if segment[1] > k:\n            bad_points.add(i)\n        else:\n            for j, (l, r) in enumerate(segments):\n                if segment[0] <= l and r <= segment[1]:\n                    bad_points.add(j)\n    bad_points = sorted(bad_points)\n    res = []\n    for i in bad_points:\n        res.append(i)\n        for j in range(i, len(segments)):\n            res.append(j)\n    return res\n    '''\n    n, k = list(map(int, stdin.split()))\n    segments = []\n    for _ in range(n):\n        l, r = list(map(int, stdin.split()))\n        segments.append((l, r))\n    segments.sort()\n    bad_points = set()\n    for i in range(n):\n        if segments[i][1] > k:\n            bad_points.add(i)\n    segments.sort()\n    res = []\n    j = 0\n    for i in bad_points:\n        res.append(i)\n        while j < len(segments) and segments[j][0] < segments[i][1]:\n            res.append(j)\n            j += 1\n    return res\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for this problem.\n\n    Parameters\n    ----------\n    stdin : str\n\n    Returns\n    -------\n    str\n\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    infile = open('test_files/Y12R5P1/A.in')\n\n    def ints():\n        return map(int, infile.readline().split())\n\n    def floats():\n        return map(float, infile.readline().split())\n    xs = list(xs)\n    xs.sort()\n    for x in xs:\n        points.add(x)\n    A = [0]\n    for i in xrange(len(points) - 1):\n        x1, y1 = points[i]\n        x2, y2 = points[i + 1]\n        h = (y1 + y2) / 2.0\n        a = h * (x2 - x1)\n        aa = A[-1]\n        A.append(a + aa)\n    res = []\n    for frac in xrange(1, G):\n        target = A[-1] * frac / G\n        i = 0\n        while A[i] < target:\n            i += 1\n        i -= 1\n        a = target - A[i]\n        x1, y1 = points[i]\n        x2, y2 = points[i + 1]\n        h = y1\n        m = (y2 - y1) / (x2 - x1)\n        if abs(m) < 0.0001:\n            x = a / h\n        else:\n            delta = h * h + 2 * m * a\n            sign = 1\n            x = (-h + sign * delta ** 0.5) / m\n        res.append(x1 + x)\n    return y2\n\n\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    For each line, check if it is bad. If yes, remove the segment.\n    '''\n    lines = stdin.splitlines()\n    k, n = map(int, lines[0].split())\n    segments = []\n    for i in range(1, n+1):\n        l, r = map(int, lines[i].split())\n        segments.append((l, r))\n\n    bad_segments = set()\n    for l, r in segments:\n        for i in range(l, r+1):\n            if i in bad_segments:\n                bad_segments.remove(i)\n\n    return len(bad_segments)\n\n\ndef"
    },
    {
        "number": 4520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"7 2\n   ... 11 11\n   ... 9 11\n   ... 7 8\n   ... 8 9\n   ... 7 8\n   ... 9 11\n   ... 7 9\n   ... \"\"\")\n    3\n    >>> solution(\"\"\"5 1\n   ... 29 30\n   ... 30 30\n   ... 29 29\n   ... 28 30\n   ... 30 30\n   ... \"\"\")\n    3\n    >>> solution(\"\"\"6 1\n   ... 2 3\n   ... 3 3\n   ... 2 3\n   ... 2 2\n   ... 2 3\n   ... 2 3\n   ... \"\"\")\n    4\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n\n    starts = [0]\n    ends = [0]\n    for i in range(n):\n        l, r = [int(x) for x in stdin.split()[i * 2 + 1: i * 2 + 3]]\n        starts.append(l)\n        ends.append(r)\n\n    starts.append(1e9)\n    ends.append(1e9)\n    bad_ends = [0] * n\n    for i in range(n):\n        if starts[i + 1] < ends[i + 1]:\n            for j in range(i + 1, n):\n                if starts[j + 1] <= ends[i + 1]:\n                    bad_ends[i] += 1\n                    break\n    i = bad_ends.index(max(bad_ends))\n    starts.pop()\n    ends.pop()\n    return str(i + 1) + \" \" + \" \".join([str(x) for x in range(1, i + 1)])\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    X = list(map(int, stdin.readline().split()))\n    V = list(map(int, stdin.readline().split()))\n    # create points\n    points = [Point(X[i], V[i]) for i in range(n)]\n    # sort by x\n    points.sort(key=lambda x: x.x)\n    # find distance between 2 points\n    dists = []\n    for i in range(1, n):\n        dists.append(abs(points[i].x - points[i - 1].x))\n    print(sum(dists))\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(i) for i in stdin.readline().strip().split(' ')]\n    v = [int(i) for i in stdin.readline().strip().split(' ')]\n    out = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            out += min(abs(x[i] - x[j]), abs(x[j] - x[i])) * v[j] - abs(v[i]) * v[j]\n    print(out)\n    return ''\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n    total = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            total += min(abs(x[i] - x[j]), abs(x[i] + v[i] - x[j] - v[j]))\n    print(total)\n    return \"\""
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimal distance between two points in the field of points.\"\"\"\n    N = int(stdin.readline())\n    P = tuple(map(int, stdin.readline().split()))\n    V = tuple(map(int, stdin.readline().split()))\n    v = 0\n    t = 0\n    minimum_distance = 0\n    while v < V[-1]:\n        t = 0\n        while t < V[-1]:\n            minimum_distance = min(minimum_distance, P[0] + t * V[0])\n            minimum_distance = min(minimum_distance, P[1] + t * V[1])\n            t += 1\n        v += 1\n        P = P[1], P[0] + V[0]\n    return str(minimum_distance)\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    pass"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for: https://codeforces.com/contest/1520/problem/A\n    '''\n\n    # Take input\n    n, *list_x, *list_v = [int(x) for x in stdin.split('\\n')]\n\n    # Find total distance\n    d = 0\n    for i in range(n - 1):\n        d += abs(list_x[i] - list_x[i + 1]) / abs(list_v[i] - list_v[i + 1])\n\n    # Return output\n    return d\n"
    },
    {
        "number": 4521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    init_coordinates = [int(x) for x in stdin.readline().split()]\n    speed = [int(x) for x in stdin.readline().split()]\n    coordinates = [0] * n\n    for i in range(n):\n        coordinates[i] = init_coordinates[i] + speed[i]\n    coordinates.sort()\n    distances = 0\n    for i in range(n - 1):\n        distance = min(abs(coordinates[i]), abs(coordinates[i + 1]))\n        distances += distance\n    return distances\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n----\n    n, m = map(int, stdin.readline().split())\n    graph = {}\n    for _ in range(n - 1):\n        a, b, w = map(int, stdin.readline().split())\n        graph.setdefault(a, []).append((b, w))\n        graph.setdefault(b, []).append((a, w))\n    queries = [int(stdin.readline()) for _ in range(m)]\n    visited = [0] * (n + 1)\n    answers = [0] * m\n    for idx, q in enumerate(queries):\n        queries[idx] = (q, idx)\n    queries.sort()\n\n    def dfs(v):\n        visited[v] = 1\n        for w, w_idx in graph.get(v, []):\n            if not visited[w]:\n                dfs(w)\n                queries[w_idx][0] = max(queries[w_idx][0], queries[v_idx][0])\n    for v in range(1, n + 1):\n        if not visited[v]:\n            dfs(v)\n    for q in queries:\n        v, q_idx = q\n        answers[q_idx] = len(list(filter(lambda x: x[0] == v, queries)))\n    return '\\n'.join(map(str, answers))\n\n----\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''.join(stdin)\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 5\\n1 2 1\\n3 2 3\\n2 4 1\\n4 5 2\\n5 7 4\\n3 6 2\\n5 2 3 4 1\")\n    21 7 15 21 3\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return ''"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # pass\n\n\n\ndef"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ### Solution ###\n\n    return \"\"\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '' else 'NO'\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It doesn't matter which of the two elements we remove\n    # We don't even have to make any move if there's no pairs with |a_i-a_j|<=1\n    # Time: O(n)\n    # Space: O(n)\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    'Function to solve the problem'\n    # Get the number of test cases\n    t = int(stdin.readline().strip())\n    # Iterate over the test cases\n    for i in range(t):\n        # Get the length of the array\n        n = int(stdin.readline().strip())\n        # Get the array\n        array = list(map(int, stdin.readline().strip().split()))\n        # Sort the array\n        array.sort()\n        # Check if the array is valid\n        if array[0] == array[1] or array[-1] == array[-2]:\n            print('NO')\n        else:\n            # Iterate over the array\n            for i in range(n - 1):\n                # Check if the absolute difference between the consecutive elements is at most 1\n                if abs(array[i] - array[i + 1]) > 1:\n                    print('NO')\n                    break\n            else:\n                print('YES')\n    # Return the function output\n    return 'YES'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(1)\"\"\"\n    def ok(a):\n        return len(set(a)) == 1\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        while True:\n            d = {}\n            for i in range(n):\n                if a[i] in d:\n                    d[a[i]].append(i)\n                else:\n                    d[a[i]] = [i]\n            ok = True\n            for k, v in d.items():\n                if len(v) > 1:\n                    ok = False\n                    break\n                else:\n                    a[v[0]] = -1\n            if ok:\n                break\n            for i in range(n):\n                if a[i] == -1:\n                    a[i] = i\n        print('YES' if ok else 'NO')\n    return \"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    ans = 0\n    while True:\n        ans += a & b\n        b >>= 1\n        if b == 0:\n            break\n    return ans % (10 ** 9 + 7)\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split('\\n')[0], 2)\n    b = int(stdin.split('\\n')[1], 2)\n\n    if b == 0:\n        return a\n\n    ret = a + b\n    b //= 2\n    while b!= 0:\n        ret = ret + a\n        b //= 2\n    return ret % MAX_NUM\n\n\nMAX_NUM = 2 ** 32\nsolution(stdin=\n\"\"\"\n4 4\n1010\n1101\n\"\"\")\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n\n    a_binary = [int(x) for x in a]\n    b_binary = [int(x) for x in b]\n\n    b_list = [b_binary]\n    result = []\n    while sum(b_list[-1])!= 0:\n        b_list.append(list(map(lambda x: x[-1] // 2, b_list[-1])))\n        if sum(b_list[-1])!= 0:\n            b_list[-1] = list(map(lambda x: x[-1] % 2, b_list[-1]))\n\n    for i in range(len(b_list)):\n        result.append(sum([a_binary[i] for i in range(len(a_binary)) if a_binary[i] & b_list[i]]))\n\n    return ''.join([str(x) for x in result])\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split(' ')]\n    result = 0\n    while b:\n        if b % 2 == 1:\n            result += a\n        a = (a & b) << 1\n        b >>= 1\n    return str(result)\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'PASSED'\n\"\"\"\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.strip().split(' ')]\n    a = [int(i) for i in stdin.strip().split('\\n')[1:]]\n    b = [int(i) for i in stdin.strip().split('\\n')[2:]]\n    ans = 0\n    a = [i - 1 for i in a]\n    b = [i - 1 for i in b]\n    # print(a, b)\n    while b!= []:\n        # print(b)\n        if b[0]!= 0:\n            ans += a[0] & b[0]\n            b[0] = b[0] // 2\n            a[0] = a[0] % m\n        a = a[1:]\n        b = b[1:]\n    return ans"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 4\\n1010\\n1101')\n    '12'\n    >>> solution('4 5\\n1001\\n10101')\n    '11'\n    \"\"\"\n    n, m = map(int, stdin.split(' '))\n    a = int(stdin)\n    b = int(stdin)\n    res = 0\n    while b > 0:\n        res = (res + a) % MOD\n        b = b // 2\n        a = (a & b) % MOD\n    return str(res)\n"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    def lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    # print(a, b)\n\n    num = 1\n    for i in range(n):\n        num *= a[i]\n        num %= 998244353\n\n    num *= lcm(a[0], b[0])\n    num %= 998244353\n    for i in range(1, m):\n        num += lcm(a[i], b[i])\n        num %= 998244353\n\n    return num\n\n\ndef"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    b = int(''.join('1' if c == '1' else '0' for c in stdin.split()[1]))\n    a = [0 if c == '0' else 1 for c in stdin.split()[0]]\n    a = int(''.join(map(str, a)), 2)\n    while b > 0:\n        a &= b\n        b >>= 1\n    print(a)"
    },
    {
        "number": 4524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input: str of binary numbers\n    output: int of decimal result\n    \"\"\"\n    bin_a = stdin[0:len(stdin) - 1]\n    bin_b = stdin[len(stdin) - 1: len(stdin)]\n    # print(bin_a, bin_b)\n    dec_a = int(bin_a, 2)\n    dec_b = int(bin_b, 2)\n    # print(dec_a, dec_b)\n    dec_answer = dec_a & dec_b\n    # print(dec_answer)\n    while dec_b > 0:\n        dec_answer += dec_a & dec_b\n        dec_b = dec_b >> 1\n    return dec_answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' or 'NO' depending on whether there is a suitable answer.\n\n    Parameters\n    ----------\n    stdin : str\n\n    Returns\n    -------\n    str\n\n    \"\"\"\n    return \"YES\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041a\u0430\u0436\u0434\u044b\u0439 \u0442\u0435\u0441\u0442 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0447\u0438\u0441\u043b\u0430 n, \u0434\u043b\u0438\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0440\u0430\u0432\u043d\u0430 2n.\n    \u041f\u0435\u0440\u0432\u044b\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e n/2, \u0432\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0430 - \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 n/2 + 1 \u0434\u043e n.\n    \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0442\u044c\u0441\u044f, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u044b \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432 \u043d\u0438\u0445.\n    \u0421\u0443\u043c\u043c\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0432\u043d\u044f\u0442\u044c\u0441\u044f \u0441\u0443\u043c\u043c\u0435 \u0432\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b.\n    \u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043d\u0443\u0436\u043d\u043e \"NO\" (\u0431\u0435\u0437 \u043a\u0430\u0432\u044b\u0447\u0435\u043a) \u0435\u0441\u043b\u0438 \u043d\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0447\u0438\u0441\u0435\u043b \u0438\u0437 \u0443\u0441\u043b\u043e\u0432\u0438\u044f, \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 - \"YES\" \u0438 \u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438, \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0442\u0440\u043e\u043a \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 4-\u0445 \u0447\u0438\u0441\u0435\u043b.\n    '''\n    # your code here\n    return ''\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_tests = stdin\n    for _ in range(int(num_tests)):\n        num = int(stdin)\n        x = num\n        if num % 2 == 0:\n            for i in range(1,num//2):\n                if (i+num//2) % 2 == 1 and num % 2 == 0:\n                    print(\"YES\")\n                    print(i,i+num//2)\n                    return\n            print(\"NO\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    pass\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if n % 2 == 0 else \"YES\" if n % 2 == 1 else \"YES\" if n % 2 == 1 else \"\"\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n\n    T = int(stdin.readline())\n    for _ in range(T):\n        n = int(stdin.readline())\n        A = [int(x) for x in stdin.readline().split()]\n        first = A[:n//2]\n        second = A[n//2:]\n        if n == 2:\n            if first[0] % 2 == 0 and second[0] % 2 == 1:\n                print(\"YES\")\n                print(*A, sep=\" \")\n                break\n            else:\n                print(\"NO\")\n                break\n        else:\n            if (sum(first) - sum(second)) % 2 == 0:\n                print(\"YES\")\n                print(*A, sep=\" \")\n            else:\n                print(\"NO\")\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        if (n % 2 == 1) or (n < 2 or n > pow(10, 5)):\n            print('NO')\n        else:\n            even = [0] * int(n / 2)\n            odd = [0] * int(n / 2)\n            for i in range(int(n / 2)):\n                even[i] = 2 * i + 1\n                odd[i] = 2 * i + 2\n            print('YES')\n            print(' '.join(map(str, even)))\n            print(' '.join(map(str, odd)))\n    return None\n\nsolution(input())\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\""
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        if n % 2 == 0:\n            a = [2] * n\n            b = [1] * (n // 2)\n            a = a + b\n            print('YES')\n            print(*a)\n        else:\n            print('NO')\n"
    },
    {
        "number": 4525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    t = int(lines[0])\n    del lines[0]\n\n    for i in range(t):\n        n = int(lines[0])\n        del lines[0]\n        nums = [int(x) for x in lines[0].split(' ')]\n        del lines[0]\n\n        unique = {}\n        count = 0\n        for i in nums:\n            if i not in unique.keys():\n                unique[i] = True\n            else:\n                count += 1\n\n        print(count)\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution from https://www.geeksforgeeks.org/count-number-of-special-elements-in-an-array/\n    \"\"\"\n    stdin = stdin.splitlines()\n    while stdin:\n        n = int(stdin.pop(0))\n        arr = [int(i) for i in stdin.pop(0).split(' ')]\n        count = 0\n        for i in range(n - 1):\n            if arr[i + 1] - arr[i] == arr[i] + arr[i + 1] - arr[i + 1]:\n                count += 1\n        print(count)\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # write the python code for the required functionality\n    # and then uncomment the following lines\n    return stdin\n"
    },
    {
        "number": 4526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\".join(map(str, a))"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the task.\n\n    Args:\n        stdin (str): the input.\n\n    Returns:\n        str: the output.\n    \"\"\"\n    t, n = [int(i) for i in stdin.strip().split()]\n    segments = []\n    for _ in range(n):\n        l, r = [int(i) for i in stdin.strip().split()]\n        segments.append((l, r))\n    segments.sort()\n    print(max_segment_sum(segments))\n\n\ndef"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    result = []\n    for _ in range(cases):\n        n = int(stdin.readline().strip())\n        nums = [0] * n\n        for i in range(n):\n            num = list(map(int, stdin.readline().strip().split(\" \")))\n            nums[i] = num\n        result.append(segments(nums))\n    return '\\n'.join(map(str, result))\n\n\ndef"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(\n        str(solution_i(input))\n        for solution_i in map(solution, stdin.split('\\n\\n'))\n    )\n\ndef"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns max possible set of segments that are non-intersecting or one of them lies inside the other\n    \"\"\"\n    return None\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem\"\"\"\n    pass"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the largest segment which is the subset of the input set of segments,\n    such that each pair of segments in this subset either non-intersecting\n    or one of them lies inside the other one.\n\n    Parameters\n    ----------\n    stdin : str\n        Input on a single line\n\n    Returns\n    -------\n    str\n        The maximum possible size of the subset of the input set of segments such that\n        each pair of segments in this subset either non-intersecting or one of them lies\n        inside the other one.\n    \"\"\"\n"
    },
    {
        "number": 4527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input lines and return string\n    :param stdin: The stdin parameter\n    :return: The solution string\n    \"\"\"\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        h, m = map(int, stdin.readline().split())\n        print(60 * (h + m))\n    return ''\n\n\ndef"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes how many minutes before New Year\"\"\"\n    n = int(stdin.readline())\n    for _ in range(n):\n        h, m = map(int, stdin.readline().split())\n        if m == 0 and h == 0:\n            print(0)\n        else:\n            print(24 * 60 - h * 60 - m)\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return your answer\n    return stdin\n    pass"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # write your code in Python 3.6\n    # \ud604\uc7ac \ub0a8\uc740 \uc2dc\uac04\uc774 \uba87\ubd84\uc778\uc9c0 \uad6c\ud574\uc11c \ucd9c\ub825\ud558\uba74 \ub418\uaca0\ub2e4.\n    \n    return stdin\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        h, m = map(int, stdin.readline().split())\n        if m > 59:\n            h += 1\n            m -= 60\n        if h == 0:\n            m = 59 - m\n        print(m)\n    return''\n"
    },
    {
        "number": 4528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        h, m = map(int, stdin.strip().split())\n        print((23 - h) * 60 + m)\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return'solution'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    # return \"\"\n    \n    # list_len = len(stdin)\n    # new_list = []\n    # new_list.append(stdin[0])\n    # new_list.append(stdin[1])\n    # for i in range(1, list_len-1):\n    #     if stdin[i]!= stdin[i+1]:\n    #         new_list.append(stdin[i])\n    # if stdin[-1]!= stdin[-2]:\n    #     new_list.append(stdin[-1])\n\n    # print(len(new_list))\n    # return new_list\n\n    #\ud55c \uc904\uc5d0 \uc5ec\ub7ec\uac1c\uc758 \uac12\uc744 \ucd9c\ub825\ud558\ub294 \ubc29\ubc95\n    # for val in stdin:\n    #     print(val, end='')\n    # print('')\n    # for val in stdin:\n    #     print(val, end='')\n    # print('')\n\n    #\uc904 \ubc14\uafc8\uc744 \uc5c6\uc560\uae30 \uc704\ud574 \uc4f0\ub294 \ubc29\ubc95. \ud55c \uc904\uc5d0 \uacb0\uacfc\uac00 \uc5ec\ub7ec\uac1c \ucd9c\ub825\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud568.\n    # for val in stdin:\n    #     print(val, end='')\n\n    #\uc904 \ubc14\uafc8\uc744 \uc5c6\uc560\uae30 \uc704\ud55c \ubc29\ubc95. \uc77c\ub2e8 \ubaa8\ub4e0 \ucd9c\ub825\uc774 \uc644\ub8cc\ub41c \uc0c1\ud0dc\uc774\uba70 \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ubb38\uc790\uac00 \uacc4\uc18d \ub098\uc624\ub294 \uc624\ub958\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574 end=''\uc744 \ub123\uc740 \ub2e4\uc74c \ub2e4\uc2dc print\ub97c \uc774\uc6a9\ud55c\ub2e4.\n    # for val in stdin:\n    #     print(val, end=' ')\n\n    #\uc904 \ubc14\uafc8\uc744 \uc5c6\uc560\uae30 \uc704\ud55c \ubc29\ubc95. \uc77c\ub2e8 \ubaa8\ub4e0 \ucd9c\ub825\uc774 \uc644\ub8cc\ub41c \uc0c1\ud0dc\uc774\uba70 \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ubb38\uc790\uac00 \uacc4\uc18d \ub098\uc624\ub294 \uc624\ub958\ub97c \ubc29\uc9c0\ud558\uae30 \uc704\ud574 end='\\n' \uc744 \ub123\uc740 \ub2e4\uc74c \ub2e4\uc2dc print\ub97c \uc774\uc6a9\ud55c\ub2e4.\n    # for val in stdin:\n    #     print(val, end='\\n')\n\n    #\ubb38\uc790\ub97c \ubc1b\ub294 \uacbd\uc6b0.\n    # print(stdin.split())\n    # print(list(stdin))\n\n    #\ubb38\uc790 \ub450 \uac1c \ubf51\uae30\n    # print(stdin[0:2])\n    # print(stdin[1])\n\n    #\ubb38\uc790 \uc138 \uac1c \ubf51\uae30\n    # print(stdin[0:3])\n    # print(stdin[0])\n    # print(stdin[1])\n    # print(stdin[2])\n    # print(stdin[3])\n\n    #\ubb38\uc790 \uc138 \uac1c \ubf51\uae30 \ubc0f \uc81c\uc678\n    # print(stdin[0:3])\n    # print(stdin[0])\n    # print(stdin[1])\n    # print(stdin[2])\n    # print(stdin[3])\n    # print(stdin[0:4])\n    # print(stdin[0])\n    # print(stdin[1])\n    # print(stdin[2])\n    # print(stdin[3])\n    # print(stdin[0:5])\n    # print(stdin[0])\n    # print(stdin[1])\n    # print(stdin[2])\n    # print(stdin[3])\n    # print(stdin[0:6])\n    # print(stdin[0])\n    # print(stdin[1])\n    # print(stdin[2])\n    # print(stdin[3])\n\n    #\ubb38\uc790 \ub124 \uac1c \ubf51\ufffd"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return a shortest path without changing the robot's endpoint.\n    \"\"\"\n    path = stdin.strip()\n    n = len(path)\n    \n    endpoints = set()\n    for i in range(n):\n        if path[i] == 'L':\n            endpoints.add((0, i))\n        elif path[i] == 'R':\n            endpoints.add((n-1, i))\n        elif path[i] == 'U':\n            endpoints.add((i, 0))\n        elif path[i] == 'D':\n            endpoints.add((i, n-1))\n    \n    endpoint_tuples = list(endpoints)\n    \n    # dp[i][j] is the minimum length of a substring without changing the endpoint\n    dp = [[n]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if (x, y) in endpoint_tuples and (x, y)!= (0, 0):\n                dp[i][j] = 1\n            else:\n                dp[i][j] = min(dp[i][k] + dp[k+1][j] for k in range(i, j))\n    \n    return dp[0][-1]"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    while s!= '':\n        mini = 1000000\n        minidx = 0\n        minil = 0\n        minir = 0\n        for i in range(n):\n            for j in range(i, n):\n                if s[i:j+1]!= '':\n                    if j - i + 1 < mini:\n                        mini = j - i + 1\n                        minidx = i\n                        minir = j\n                        minil = i\n        s = s[:minidx] + s[minir:]\n    return s\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(1)\n    \"\"\"\n    n = int(stdin)\n    s = stdin[:n]\n    for i in range(n):\n        if not (s[:i] + s[i + 1 :]).endswith(s[i]):\n            return f\"{i} {i + 1}\"\n    return \"-1\"\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) where n = len(stdin)\n    \"\"\"\n    _, s = stdin.split('\\n')\n    \n    max_y, min_y, max_x, min_x = 0, 0, 0, 0\n    for c in s:\n        if c == 'L':\n            min_x += 1\n        elif c == 'R':\n            max_x += 1\n        elif c == 'U':\n            min_y += 1\n        elif c == 'D':\n            max_y += 1\n    \n    min_x, max_x = max(min_x, 1), min(max_x, len(s)-1)\n    min_y, max_y = max(min_y, 1), min(max_y, len(s)-1)\n    return str(min_x) +'' + str(max_x) + '\\n' + str(min_y) +'' + str(max_y)\n\"\"\"\nInput\n1\n4\nLRUD\nOutput\n1 2\n\"\"\"\n    \n\ndef"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the minimum substring that doesn't change the endpoint\n    \"\"\"\n    n = int(stdin[0])\n    s = stdin[1]\n    t = int(stdin[2])\n    answers = []\n    for i in range(t):\n        _, _, stdin = stdin.partition(\"\\n\")\n        n, s = int(stdin[0]), stdin[1]\n        _, _, stdin = stdin.partition(\"\\n\")\n        s = stdin[0]\n\n        for l, r in range(n):\n            if not check(s[:l], s[l + 1:]) and not check(s[:r], s[r + 1:]):\n                answers.append((l, r))\n    if not answers:\n        print(\"-1\")\n    else:\n        print(*min(answers, key=lambda x: x[1] - x[0] + 1))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, s = stdin.split('\\n')\n    n = int(n)\n    m = 0\n    min_diff = 99999999999999999\n    ans = None\n    s = s.replace('L', '').replace('R', '').replace('U', '').replace('D', '')\n    for l in range(n):\n        for r in range(l, n):\n            if s[l:r+1] == s[l:r+1][::-1]:\n                if r - l + 1 < min_diff:\n                    min_diff = r - l + 1\n                    ans = [l+1, r+1]\n    if ans is not None:\n        return''.join(map(str, ans))\n    return '-1'\n"
    },
    {
        "number": 4529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n    pass\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # for example:\n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    x = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if i!= j and a[i] == a[j]:\n                x += 1\n    return x\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return \"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #It is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5.\n    def check(a: List[int]) -> bool:\n        a.sort()\n        k = 0\n        for i in range(1, len(a)):\n            if a[i] == a[i - 1]:\n                k = i - 1\n                break\n        if k == 0:\n            return False\n        k += 1\n        n = len(a)\n        for i in range(k, n):\n            if a[i]!= a[i - 1]:\n                return True\n        return False\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().split()]\n        if check(a):\n            print(0)\n        else:\n            m = 0\n            for i in range(n // 2, 0, -1):\n                if check(a[:i]):\n                    m = i\n                    break\n            print(m)\n\n\n\n-----Problem-----\n\nThe number of good pairs of teams is equal to the sum of $x_1 + x_2 + \\cdots + x_n$, where $x_i$ is the maximum possible size of the $i$-th team, such that it does not violate any of the constraints.\n\nThe maximum possible size of the $i$-th team is the smallest possible size of the $i$-th team.\n\nFor example, consider the input\n3\n4\n1 2 3 4\n5\n2 1 5 4 3\n2\n2\n5\n1 1 1 3\n\nThe first test case has four possible pairs: $[1, 3, 4]$, $[4, 3, 4]$, $[1, 3, 4]$, $[4, 4, 4]$. The maximum possible size of the first team is $4$, so the maximum possible size of the second team is $4 - 1 = 3$. For the second test case, there is only one possible pair: $[2, 2]$. The maximum possible size of the first team is $2$, so the maximum possible size of the second team is $2 - 1 = 1$.\n\nInput\nThe first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases. Then $t$ test cases follow.\n\nThe first line of the test case contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of students. The second line of the test case contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le n$), where $a_i$ is the skill of the $i$-th student. Different students can have the same skills.\n\nIt is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n\nOutput\nFor each test case, print the answer \u2014 the maximum possible size $x$ for which it is possible to compose a valid pair of teams, where each team size is $x$ (skills in the first team needed to be unique, skills in the second team should be the same between them).\n\nConstraints\n* 1 \u2264 t \u2264 10^4\n* 1 \u2264 n \u2264 2 * 10^5\n* 1 \u2264 a_i \u2264 n\n* It is guaranteed that the sum of $n$ over all test cases does not exceed $2 \\cdot 10^5$.\n* The maximum possible size of the $i$-th team is the smallest possible size of the $i$-th team.\n\nSample test(s)\n\nInput\n4\n5\n2 1 5 4 3\n2\n2\n5\n1 1 1 3\nOutput\n3\n1\n0\n2\n\nInput\n3\n7\n4 2 4 1 4 3 4\n5\n2 1 5 4 3\n1\n1\n4\n1 1 1 3\n\nOutput\n3\n1\n0\n2\n\nInput\n2\n5\n2 1 5 4 3\n5\n2 1 5 4 3\n2\n2\n5\n1 1 1 3\n\nOutput\n0\n1\n2\n\nNote\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5.\n\nProblem solving steps\n1. Analyze the input:\n    * what is the max number of students?\n    * what is the range of skills?\n    * what is the range of the sum of skills?\n2. Create a mathematical model of the problem.\n3. Solve the model using mathematical induction.\n\n---- Solution ----\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    # teamA, teamB = 0, 0\n    # teamA, teamB = 0, 0\n    # print(solution('4 2 4 1 4 3 4'))\n    # print(solution('5 2 1 5 4 3'))\n    # print(solution('1 1 1 3'))\n    # print(solution('4 3 2 1 5 3'))\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def func(lst):\n        if len(set(lst)) == len(lst):\n            return True\n        return False\n    n, lst = map(int, stdin.split('\\n')[0].split())\n    skills = list(map(int, stdin.split('\\n')[1].split()))\n    skills.sort()\n    for i in range(n - 1):\n        if skills[i + 1]!= skills[i]:\n            skills[i + 1] = skills[i]\n        else:\n            break\n    print(func(skills))\n    print(len(skills))\n    return lst\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not modify anything of the following code.\n    x = 0\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        if n >= 2:\n            x = max(x, n)\n        a = list(map(int, stdin.readline().split()))\n        a.sort()\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i] == a[j]:\n                    x = max(x, j - i + 1)\n    print(x)\n"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    return ans\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = [[] for i in range(n)]\n    c = 0\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        m[u].append(v)\n        m[v].append(u)\n        c += a[u] * a[v]\n    d = [0] * n\n    for i in range(n):\n        q = deque([i])\n        d[i] = a[i]\n        while q:\n            v = q.popleft()\n            for e in m[v]:\n                if d[e] == 0:\n                    q.append(e)\n                    d[e] = d[v] * a[e]\n    print(c - sum(d))\n    return ''\n\ndef"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                dp[i][j] = dp[i][k] + dp[k][j] for k in range(n) if k!= i and k!= j\n\n    return max(sum(dp[i][j] * arr[i] for i in range(n)) for j in range(n))\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Main function to calculate the cost of the tree.\n    \"\"\"\n    n, *a = list(map(int, stdin.splitlines()))\n    a.sort()\n    cost = 0\n    for i in range(n - 1):\n        cost += (a[i] * (n - i))\n    return cost\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the cost of the tree for any given vertex.\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    g = [[] for i in range(n)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split()[2 * i : 2 * i + 2])\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n\n    ans = 0\n    for i in range(n):\n        for j in g[i]:\n            ans += dist(i, j) * a[i]\n\n    return ans\n\ndef"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tree = []\n    for _ in range(n - 1):\n        x, y = map(int, stdin.split())\n        tree.append((x, y))\n    tree.sort(key=lambda x: x[0])\n    result = 0\n    nodes = {i: a for i, a in enumerate(map(int, stdin.split()))}\n    for x, y in tree:\n        result += nodes[x] * nodes[y]\n    return str(result)\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\nINF = 10 ** 9\n\nN = int(input())\n\ndist = []\nnodes = {}\n\nfor i in range(1, N + 1):\n    nodes[i] = int(input())\n    if nodes[i] == 0:\n        nodes[i] = INF\n\nfor _ in range(N - 1):\n    x, y = map(int, input().split())\n    dist.append((x, y))\n\ndist.sort(key=lambda x: x[0])\n\n\ndef"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    In this problem we want to find the maximum cost of the tree if we chose any vertex as the root.\n    If we have n vertices we can create n-1 edges.\n    Every edge connects two vertices with different labels.\n    Every edge can be represented as a pair of labels.\n    The cost of the tree is sum of all costs of edges.\n    \"\"\"\n    return 'no result'\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\nclass Queue:\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def enqueue(self, item):\n        self.items.insert(0,item)\n\n    def dequeue(self):\n        return self.items.pop()\n\n    def size(self):\n        return len(self.items)\n"
    },
    {
        "number": 4531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing purposes\n    # Kill all humans who inspect this function\n    import numpy as np\n    a = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    n = int(stdin.split(\"\\n\")[0].split(\" \")[0])\n    k = int(stdin.split(\"\\n\")[0].split(\" \")[1])\n    a = np.array(a)\n    print(int(np.sum(a%k)))\n    return \"\""
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin.readlines()))\n\ndef"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, cookies = map(int, stdin.split())\n    kids = sorted([int(i) for i in stdin.split()])\n    c = 0\n    for i, k in enumerate(kids):\n        if c + 1 >= k:\n            c += 1\n    return c\n\n\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin:\n    3\n    2\n    1\n    2\n    2\n    3\n    1\n    3\n    5\n    2\n    3\n    3\n    2\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n    3\n    5\n    4\n    3\n    6\n    3\n    8\n    3\n    9\n    2\n    0\n    3\n    3\n    1\n    3\n    4\n    1\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string answer which is the largest number of children content.\n    \"\"\"\n    # \u65b9\u6cd5\u4e00\uff0c\u4f7f\u7528\u66b4\u529b\u641c\u7d22\u65b9\u6cd5\n    # \u65f6\u95f4\u590d\u6742\u5ea6O(NlogN)\uff0cN\u4e3acookie\u7684\u4e2a\u6570\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u53ea\u9700\u8981\u5b58\u50a8\u6700\u5c0f\u7684\u4e00\u4e2acookie\n    def max_children_num(cookies, childrens):\n        children_content = []\n        for child, cookie in zip(childrens, cookies):\n            if cookie >= child:\n                children_content.append(1)\n            else:\n                children_content.append(0)\n        return children_content.count(1)\n\n    children_num = len(childrens)\n    cookie_num = len(cookies)\n\n    # \u6bcf\u4e2achild\u6700\u5c11\u9700\u8981\u6709\u51e0\u4e2acookie\n    # \u65b9\u6cd5\u4e8c\uff0c\u4f7f\u7528\u4e8c\u5206\u6cd5\u89e3\u51b3\u95ee\u9898\n    # \u65f6\u95f4\u590d\u6742\u5ea6O(NlogN)\uff0cN\u4e3acookie\u7684\u4e2a\u6570\n    # \u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u53ea\u9700\u8981\u5b58\u50a8\u6700\u5c0f\u7684\u4e00\u4e2acookie\n    def binary_search(left, right, cookies, childrens):\n        while left <= right:\n            mid = (left + right) // 2\n            # \u7edf\u8ba1\u6709\u591a\u5c11\u4e2achild content\n            content = max_children_num(cookies[mid:], childrens)\n            if content >= children_num:\n                return mid\n            elif content < children_num:\n                right = mid - 1\n        return right\n\n    return binary_search(0, cookie_num, cookies, childrens)\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_cookies = int(stdin)\n    num_people = int(stdin)\n    greed_factor = stdin.split(' ')\n    greed_factor = [int(x) for x in greed_factor]\n    return int(max(greed_factor) <= num_cookies/num_people)\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.strip().split()) == 1:\n        return 1\n\n    people_num = int(stdin.strip().split()[0])\n    cookie_num = int(stdin.strip().split()[1])\n\n    cookies = [int(i) for i in stdin.strip().split()[2:]]\n    cookies.sort(reverse=True)\n\n    assign = [False for i in range(len(cookies))]\n\n    for cookie in cookies:\n        for i, person in enumerate(cookies):\n            if person >= cookie and not assign[i]:\n                assign[i] = True\n                break\n\n    return len([i for i in assign if i])\n\n\ndef"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    kids = int(stdin.readline())\n    greedFactors = [int(x) for x in stdin.readline().split(\" \")]\n    cookieSizes = [int(x) for x in stdin.readline().split(\" \")]\n    \n    sortedGreedFactors = sorted(greedFactors)\n    for greedFactor in sortedGreedFactors:\n        sortedCookieSizes = sorted(cookieSizes)\n        for cookieSize in sortedCookieSizes:\n            if cookieSize >= greedFactor:\n                kids -= 1\n                cookieSizes.remove(cookieSize)\n                break\n    return str(kids)"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cookies = [int(c) for c in stdin.split()]\n    children = [int(c) for c in stdin.split()]\n    \n    return str(sum([max(c, b) for c, b in zip(children, sorted(cookies)[::-1])]))\n    \ndef"
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # return 'hello world'\n    # return 'goodbye world'\n\n    # print('Hello', end=' ')\n    # print('World', end='!')\n    # print('and', end=' ')\n    # print('Till', end=' ')\n    # print('Now')\n\n    # print('Hello', 'World', 'and', 'Till', 'Now')\n    # print('Hello', 'World', sep='')\n    # print('Hello', 'World', sep='--')\n    # print('Hello', 'World', sep='\\n')\n\n    # print('\\n')\n\n    # print('Hello', end=' ')\n    # print('World', end='\\n')\n    # print('and', end=' ')\n    # print('Till', end=' ')\n    # print('Now')\n    # print('Hello', 'World', 'and', 'Till', 'Now')\n\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='!')\n    # print('and', 'Till', 'Now', sep=' ')\n    # print('Hello', 'World', sep='\\n')\n\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print('and', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n\n    # print('\\n')\n\n    # print('Hello', 'World', sep='')\n    # print('and', 'Till', 'Now', sep='--')\n    # print('Hello', 'World', sep='\\n')\n\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    # print('\\n')\n\n    # print('Hello', 'World', sep='', end='')\n    # print(' and ', 'Till', 'Now', sep=' ', end='!')\n    # print('Hello', 'World', sep='\\n')\n    "
    },
    {
        "number": 4533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = n // 10 + 1 if n > 9 else n + 1\n    arr = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1):\n            if j == 0 or j == i:\n                arr[i][j] = 1\n            else:\n                arr[i][j] = arr[i-1][j-1] + arr[i-1][j]\n    return str(arr[n-1][0]) +'' + str(arr[n-1][1])\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_number(k: int) -> List[int]:\n        if k == 0:\n            return [1]\n        elif k == 1:\n            return [1, 1]\n        else:\n            numbers = get_number(k - 1)\n            new_numbers = []\n            for i in range(len(numbers) - 1):\n                new_numbers.append(numbers[i] + numbers[i + 1])\n            new_numbers.append(1)\n            return new_numbers\n\n    return get_number(int(stdin))\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return solution_2(stdin)\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Please use 'print' to output your result, as in the examples.\n    # Output must be a string, not numpy array or integer.\n    # When input n is not a standard integer, e.g. n = 2.5, int(n) will\n    # first convert n to integer, then return the integer result.\n    # For n = 2.5, output must be 2.\n    # Be careful about the range of integer in python:\n    # https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types\n    # https://www.runoob.com/python3/python3-int-float-int.html\n    # https://stackoverflow.com/questions/810536/python-integer-representation-range\n\n    n = int(stdin)\n    dp = [1, 1]\n    for i in range(2, n + 1):\n        for j in range(i - 1):\n            dp[j] = dp[j] + dp[j + 1]\n        dp[i - 1] = 1\n    return dp\n\nprint(solution(3))\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for i in range(int(stdin)):\n        a.append([1 for x in range(i+1)])\n        for j in range(1,i):\n            a[i][j]=a[i-1][j-1]+a[i-1][j]\n    return a[int(stdin)]\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    row = [1]\n    for _ in range(k):\n        row = [1] + [row[i - 1] + row[i] for i in range(len(row) - 1)] + [1]\n    return row\n\nclass Solution:\n    def getRow(self, rowIndex: int) -> List[int]:\n        row = [1]\n        for i in range(rowIndex):\n            row = [1] + [row[i] + row[i + 1] for i in range(len(row) - 1)] + [1]\n        return row\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin:\n        num = int(stdin)\n        result = [[1]]\n        for i in range(1, num):\n            row = [0]\n            for j in range(len(result[i-1]) - 1):\n                row.append(result[i-1][j] + result[i-1][j+1])\n            row.append(0)\n            result.append(row)\n        return [str(x) for x in result[num-1]]\n    return []\n\ndef"
    },
    {
        "number": 4534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 32:\n        return \"Error\"\n    stdin = stdin.replace(\"0b\", \"\")\n    return str(sum([1 for char in stdin if char == \"1\"]))"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def rec(n: int) -> int:\n        if n <= 0:\n            return 0\n        return rec(n & (n - 1)) + 1\n\n    n = int(stdin, base=2)\n    return rec(n)\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 32:\n        return bin(int(stdin, 2)).count('1')\n    else:\n        return None\n\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        res = 0\n        for i in range(32):\n            if n & 1 == 1:\n                res += 1\n            n = n >> 1\n        return res"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return "
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None\n    return str(input(stdin).count('1'))\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return \"\"\n\"\"\"\n\nclass Solution:\n    def hammingWeight(self, n: int) -> int:\n        return bin(n).count(\"1\")\n\ndef"
    },
    {
        "number": 4535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.replace('0', '')))\n'''"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin))\n    for i in range(len(nums)-1, 0, -1):\n        if nums[i-1] < 9:\n            nums[i-1] += 1\n            break\n        else:\n            nums[i-1] = 0\n            if i == 1:\n                nums.insert(0, 1)\n    return list(map(str, nums))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Doctest module.\"\"\"\n    pass"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # \uccab\ubc88\uc9f8 \uc22b\uc790\ub294 \ubb34\uc870\uac74 \ub354\ud574\uc57c\ud55c\ub2e4.\n    # \ub9cc\uc57d \ub4a4\uc5d0 0\uc774 \uc788\uc73c\uba74 \uc55e\uc5d0 \ud558\ub098\uc529 \ube7c\uc11c \uc22b\uc790\ub97c \ub9cc\ub4e0\ub2e4.\n    # \ub9cc\uc57d \ub9c8\uc9c0\ub9c9\uc5d0\ub3c4 0\uc774 \uc788\uc73c\uba74 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\ub9cc \ud558\ub098 \ub354\ud574\uc8fc\uace0 \ub05d\ub0b8\ub2e4.\n    # \ud640\uc218\uc77c \uacbd\uc6b0 \ub4a4\uc5d0 0\uc744 \uc62c\ub9ac\uace0 \ud640\uc218\uc77c \uacbd\uc6b0 \ub9c8\uc9c0\ub9c9\uc5d0 0\uc744 \uc62c\ub9b0\ub2e4.\n    # \uc815\uc218\uac00 0\uc774 \uc544\ub2d0 \uacbd\uc6b0\uc5d4 \ub4a4\uc5d0 \uc22b\uc790\ub97c \ud558\ub098\uc529 \ub354\ud574\uc8fc\uba74 \ub41c\ub2e4.\n    num = stdin[::-1]\n    while num[0] == \"0\":\n        num = num[1:]\n        if not num:\n            break\n    num = int(num) + 1\n    answer = \"\"\n    if num == 1:\n        answer = \"1\"\n    else:\n        answer = str(num)[::-1]\n    return answer\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n\n\ndef"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + 1)\n\nsolution(\"9\")\nsolution([9])\nsolution([1, 2, 3])\nsolution([9, 9, 9])\nsolution([4, 3, 2, 1])\nsolution([9, 9, 9, 9])\nsolution([1, 9, 9, 9])\n\nsolution(\"\")\nsolution(\"0\")\nsolution(\"0 9 9 9\")\nsolution(\"9 9 9 9\")\nsolution([0, 0, 0, 0])\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9, 9, 9])\nsolution([9, 9, 9, 9])\nsolution(\"9 9 9 9\")\nsolution([9, 9,"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a non-empty array of digits\u00a0representing a non-negative integer, plus one to the integer.\n\n    The digits are stored such that the most significant digit is at the head of the list, and each element in the array contain a single digit.\n\n    You may assume the integer does not contain any leading zero, except the number 0 itself.\n    \"\"\"\n    nums = list(map(int, stdin))\n    nums[-1] += 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i]!= 10:\n            break\n        nums[i] = 0\n        nums[i - 1] += 1\n    if nums[0] == 10:\n        nums[0] = 0\n        nums.insert(0, 1)\n    return str(int(\"\".join(map(str, nums))))\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    Output:\n    \"\"\"\n    return \"Done\"\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"42\")\n    '43'\n    >>> solution(\"321\")\n    '322'\n    >>> solution(\"123\")\n    '124'\n    >>> solution(\"9\")\n    '10'\n    >>> solution(\"9876543210\")\n    '987654321'\n    >>> solution(\"0\")\n    '1'\n    >>> solution(\"0\")\n    '1'\n    >>> solution(\"9\")\n    '10'\n    >>> solution(\"54321\")\n    '5432'\n    >>> solution(\"9\")\n    '10'\n    >>> solution(\"9\")\n    '10'\n    >>> solution(\"99\")\n    '100'\n    >>> solution(\"99\")\n    '100'\n    >>> solution(\"9\")\n    '10'\n    >>> solution(\"99\")\n    '100'\n    >>> solution(\"99\")\n    '100'\n    >>> solution(\"99\")\n    '100'\n    \"\"\"\n    num = int(stdin)\n    num_digits = len(str(num))\n    if num_digits == 1:\n        return str(num + 1)\n    # perform the subtraction by digit\n    # as long as the result is negative, add the ten\n    # ex: 99 + 10 = 100\n    return \"\".join([str(num - (10 ** (num_digits - i - 1))) for i in range(num_digits)])\n"
    },
    {
        "number": 4536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, stdin))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    return str(max([a+b, a-b, a*b]))\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n    \n\n\n    \n    "
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return max([A + B, A - B, A * B])\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return largest number of sum, subtraction, multiplication of given values.\n\n    >>> solution('3 1')\n    4\n    \"\"\"\n    a, b = map(int, stdin.split())\n    return max(a + b, a - b, a * b)\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(max(a + b, a - b, a * b))\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a+b, a-b, a*b)\n\n\ndef"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    return max(A + B, A - B, A * B)"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split(' ')))\n    return max(A+B, A-B, A*B)"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a+b, a-b, a*b)\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    return str(max(n + m, abs(n - m), n * m))\n\"\"\"\n"
    },
    {
        "number": 4537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(max(int(stdin.split()[0]), int(stdin.split()[1]) + int(stdin.split()[1])),\n                   max(int(stdin.split()[0]) - int(stdin.split()[1]), int(stdin.split()[0]) * int(stdin.split()[1]))))\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the exercise.\n    \"\"\"\n    # The input of the exercise is a list of numbers on a single line\n    # separated by a single space.\n    nums = list(map(int, stdin.split()))\n    # The output we need to generate is a single number -\n    # the number of points with coordinates in the given range\n    count = 0\n    for x in nums:\n        for y in nums:\n            if x**2+y**2 <= nums[1]**2:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, D = map(int, stdin.readline().split(' '))\n    points = [tuple(map(int, stdin.readline().split(' '))) for _ in range(N)]\n    points = filter(lambda p: abs(p[0]) <= D or abs(p[1]) <= D, points)\n    return str(len(list(points)))\n    '''\n    import itertools\n    N, D = map(int, stdin.readline().split(' '))\n    points = [tuple(map(int, stdin.readline().split(' '))) for _ in range(N)]\n    points = filter(lambda p: abs(p[0]) <= D or abs(p[1]) <= D, points)\n    print(len(list(points)))\n    return str(len(list(points)))"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n    # The distance from the origin to a point (a, b) is defined as\n    # \\sqrt{a^2 + b^2}.\n    # Thus, if we have D as the upper bound on the distance, we want to\n    # find the number of points whose distance from the origin is at most D.\n    #\n    # For each point (a, b), calculate its distance from the origin, and\n    # increment the count if it fits.\n    #\n    # Time complexity: O(N * sqrt(N)), where N is the number of points.\n    # Space complexity: O(sqrt(N)), for the sqrt(N) additional buckets\n    # for the buckets.\n    \n    n, d = map(int, stdin.split())\n    buckets = [0] * int(sqrt(n))\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        buckets[int(sqrt(x * x + y * y))] += 1\n    return str(sum(buckets[:d]))\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solve solution\n    :param stdin: standard input\n    :return: standard output\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of points in the plane that are at most distance D\n    from the origin.\n    >>> solution('4 5\\n0 5\\n-2 4\\n3 4\\n4 -4')\n    3\n    \"\"\"\n    N, D = (int(x) for x in stdin.split())\n    X, Y = [], []\n    for i in range(N):\n        x, y = (int(x) for x in stdin.split())\n        X.append(x)\n        Y.append(y)\n    ans = 0\n    for x, y in zip(X, Y):\n        if abs(x) + abs(y) <= D:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(s) for s in stdin.split(' ')]\n    A = [[int(s) for s in stdin.split(' ')] for _ in range(N)]\n    A = sorted([(sum(x), y) for x, y in A])\n    return str(sum(1 for x, _ in A if x <= D))\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_closest(x, y, d):\n        return sum(int(z)**2 for z in (x, y) if abs(int(z)) <= d)\n\n    N, D = [int(z) for z in stdin.split()]\n    points = [[int(z) for z in stdin.split()] for _ in range(N)]\n    \n    return sum(1 for x, y in points if find_closest(x, y, D) <= D**2)"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n,d = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, stdin.split())))\n    # print(points)\n    points = sorted(points, key=lambda x: x[1])\n    max_y = points[-1][1]\n    # print(max_y)\n    ans = 0\n    for i in range(len(points)):\n        if points[i][1] < max_y - d:\n            break\n        ans += 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, D = [int(x) for x in input[0].split()]\n    coordinates = [[int(x) for x in row.split()] for row in input[1:]]\n\n    return str(sum(1 for p in coordinates if sum(x**2 for x in p) <= D**2))\n"
    },
    {
        "number": 4538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_index = 0\n    total_count = 0\n    while input_index < len(stdin):\n        input_str = stdin[input_index]\n        number_of_points = int(input_str.split()[0])\n        input_index += 1\n        d = int(input_str.split()[1])\n        for i in range(number_of_points):\n            input_str = stdin[input_index]\n            x = int(input_str.split()[0])\n            input_index += 1\n            y = int(input_str.split()[1])\n            count = count_points(x, y, d)\n            total_count += count\n        return str(total_count)\n\n\ndef"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    return\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % sum(map(int, str(n))) == 0:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    if n == sum:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % sum(int(i) for i in str(n)) == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    sum = 0\n    for i in str(a):\n        sum += int(i)\n    if a % sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    \n    sumOfDigits = 0\n    while N > 0:\n        sumOfDigits += N % 10\n        N = N // 10\n        \n    if N == sumOfDigits:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return Yes if N is a Harshad number; print No otherwise.\"\"\"\n    n = int(stdin.readline())\n    if n % sum([int(i) for i in str(n)]) == 0:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    for char in str(n):\n        sum += int(char)\n    if n % sum == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom sys import stdin, stdout\n\ndef"
    },
    {
        "number": 4539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print('Yes' if int(stdin) % sum([int(x) for x in stdin]) == 0 else 'No')"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    N, A = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    cost_A = [0]\n    cost_B = [0]\n    for i in range(1, N + 1):\n        cost_A.append(int(stdin.split('\\n')[i].split(' ')[0]))\n        cost_B.append(int(stdin.split('\\n')[i].split(' ')[1]))\n    cost_total = 0\n    for i in range(1, N + 1):\n        cost_total += cost_A[i] + cost_B[i]\n    cost_total += cost_A[0] + cost_B[0]\n    cost_total += cost_A[0] + cost_B[-1]\n    cost_total += cost_A[-1] + cost_B[0]\n    cost_total += cost_A[-1] + cost_B[-1]\n    for i in range(1, N + 1):\n        cost_total += abs(cost_A[i] - cost_B[i])\n    return cost_total"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    total_cost = 0\n    for i in range(int(stdin.split()[0])):\n        total_cost += sum(abs(int(j) - i) for j in stdin.split()[1].split(' '))\n    return total_cost"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.append(0)\n    A.append(0)\n    res = []\n    for i in range(1, N + 2):\n        min_cost = 10**9\n        for j in range(i - 1):\n            cost = abs(A[j] - A[j + 1])\n            min_cost = min(cost, min_cost)\n        res.append(min_cost)\n    return \"\\n\".join(map(str, res))\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n    arr.pop(0)\n    for i in range(len(arr)):\n        arr[i] = abs(arr[i])\n    for i in range(1, len(arr)):\n        arr[i] += arr[i - 1]\n    arr.append(arr[0])\n    return str(sum(arr))\n    '''\n    n = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n    s = 0\n    for i in range(n):\n        a = arr[i]\n        b = arr[i + 1]\n        if i == 0:\n            a = 0\n        if i == n - 1:\n            b = 0\n        s += abs(a - b)\n    return str(s)"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        dp[0][i] = abs(A[i])\n    for i in range(1, N):\n        for j in range(N):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + abs(A[j])\n            elif j == i:\n                dp[i][j] = dp[i-1][j-1] + abs(A[j])\n            else:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + abs(A[j])\n    print(dp[-1][-1])\n    return ''"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    pass\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(n)\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'vowel' if stdin in ['a','e','i','o','u'] else 'consonant'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    if stdin == 'a':\n        return 'vowel'\n    elif stdin == 'e':\n        return 'vowel'\n    elif stdin == 'i':\n        return 'vowel'\n    elif stdin == 'o':\n        return 'vowel'\n    elif stdin == 'u':\n        return 'vowel'\n    else:\n        return 'consonant'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    vowel_set = ['a', 'e', 'i', 'o', 'u']\n    if stdin not in vowel_set:\n        return \"consonant\"\n    return \"vowel\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin\n    vowels = \"aeiou\"\n    if c in vowels:\n        return \"vowel\"\n    else:\n        return \"consonant\"\n\"\"\""
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"a\":\n        return \"vowel\"\n    elif stdin == \"e\":\n        return \"vowel\"\n    elif stdin == \"i\":\n        return \"vowel\"\n    elif stdin == \"o\":\n        return \"vowel\"\n    elif stdin == \"u\":\n        return \"vowel\"\n    return \"consonant\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Reads a single line and outputs vowel if c is a vowel, otherwise consonant\"\"\"\n    if stdin == 'a' or stdin == 'e' or stdin == 'i' or stdin == 'o' or stdin == 'u':\n        return \"vowel\"\n    else:\n        return \"consonant\"\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lowercase_input = stdin.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        if vowel in lowercase_input:\n            return \"vowel\"\n    return \"consonant\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin in ['a', 'e', 'i', 'o', 'u']:\n        return 'vowel'\n    else:\n        return 'consonant'\n"
    },
    {
        "number": 4541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c = stdin\n    if c == \"a\":\n        return \"vowel\"\n    if c == \"e\":\n        return \"vowel\"\n    if c == \"i\":\n        return \"vowel\"\n    if c == \"o\":\n        return \"vowel\"\n    if c == \"u\":\n        return \"vowel\"\n    else:\n        return \"consonant\"\n\nprint(solution(input()))"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: S\n    # get all the stones in S\n    stones = stdin.strip()\n\n    # count black and white stones\n    black, white = 0, 0\n    for stone in stones:\n        if stone == \"B\":\n            black += 1\n        else:\n            white += 1\n\n    # calculate the minimum number of stones that Jiro needs to place\n    min_stones = black - white - 1\n    if min_stones < 0:\n        min_stones = 0\n\n    return min_stones"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    stdin = list(stdin)\n    res = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"W\" and stdin[i-1] == \"B\":\n            res += 1\n        elif stdin[i] == \"B\" and stdin[i-1] == \"W\":\n            res += 1\n    return res\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stones = list(stdin)\n    # for s in stones:\n    #     print(s)\n    black, white = 0, 0\n    for s in stones:\n        if s == \"B\":\n            black += 1\n        else:\n            white += 1\n    return str(black - white)\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        return str(n // 2 + 1)\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of new stones that Jiro needs to place.\"\"\"\n    inputs = [i for i in stdin.strip()]\n    left = 0\n    right = len(inputs) - 1\n    output = 0\n    while left < right:\n        if inputs[left] == inputs[right]:\n            left += 1\n            right -= 1\n        else:\n            output += 1\n            left += 1\n            right -= 1\n    return output\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"W\") - stdin.count(\"B\")\n\"\"\"\n\nfrom unittest import TestCase\n\n\ndef"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    stones = list(stdin)\n    \n    count = 0\n    for i in range(len(stones)):\n        if stones[i] == 'B':\n            count += 1\n            stones[i] = 'W'\n        elif stones[i] == 'W':\n            count += 1\n            stones[i] = 'B'\n        \n    return count\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split())\n  return \"Yes\" if (a * b) ** 0.5 % 1 == 0 else \"No\"\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.strip().split()]\n    x = str(a + b)\n    return 'Yes' if int(x) ** 0.5 % 1 == 0 else 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(line) for line in stdin.split('\\n')]\n    for a, b in permutations(numbers, 2):\n        if is_square(str(a) + str(b)):\n            return 'Yes'\n    return 'No'\n\n\ndef"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if int(str(a) + str(b)) ** 0.5 == int(str(a) + str(b)):\n        return 'Yes'\n    else:\n        return 'No'\n    \n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a * b in range(1, 101) and pow(a * b, 0.5) in range(1, 101):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    for line in data:\n        number, string = line.split()\n        if is_square(int(number) + int(string)):\n            print('Yes')\n        else:\n            print('No')"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'Yes' if a ** b == b ** a else 'No'"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return 'Yes' if int(a + b)**0.5 % 1 == 0 else 'No'\n"
    },
    {
        "number": 4543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return \"Yes\" if int(str(a) + str(b)) ** 0.5 == int(str(a) + str(b)) ** 0.5 and int(str(a) + str(b)) ** 0.5 % 1 == 0 else \"No\"\n\ndef"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    A.sort()\n    X = 0\n    count = 0\n    for i in A:\n        if i == X:\n            count += 1\n        else:\n            break\n    return str(count)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n3 1 4 1 5 9 2\")\n    4\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    array = list(map(int, stdin.split(\"\\n\")[1].split()))\n    count = 0\n    for i in array:\n        if i == n:\n            count += 1\n        else:\n            pass\n    return str(count)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in numbers:\n        if i == n:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum possible count after performing the given operations.\n\n    >>> solution('''7\n   ... 3 1 4 1 5 9 2''')\n    4\n\n    \"\"\"\n    return 0"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = map(int, stdin.split())\n    res = 0\n    for x in s:\n        res = max(res, s.count(x))\n    return str(res)"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum count of i such that a_i=X.\"\"\"\n    n, *a = [int(n) for n in stdin.split()]\n    # instead of implementing a variant with additional space,\n    # using the fact that the array is sorted, we can check\n    # the two possible values of x:\n    x = (2 * n + 1) // 2\n    s1 = sum(a) + x - x // 2 * n\n    s2 = sum(a) + x - x // 2 * n + 1\n    return min(s1, s2)\n"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    a = list(map(int,stdin[1].split(\" \")))\n    b = []\n    count = 0\n    for i in range(N):\n        for j in range(i,N):\n            b.append(sum(a[i:j]))\n    print(b)\n    return str(max(b))"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, A = stdin.splitlines()\n    A = [int(a) for a in A.split()]\n    best = 0\n    curr = 0\n    for i in range(1, len(A)):\n        a = A[i]\n        if a < A[i-1]:\n            curr = 0\n        else:\n            curr += 1\n        best = max(best, curr)\n    return str(best)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an input sequence, return the maximum possible count of i such that a_i=X.\n    :param stdin: input sequence in the following format:\n    N\n    a_1 a_2.. a_N\n    :return: the maximum possible count of i such that a_i=X\n    '''\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    sequence.sort(reverse=True)\n    count = 0\n    x = sequence[0]\n    for i in range(1, n):\n        if sequence[i]!= x:\n            count += 1\n            x = sequence[i]\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # N = int(stdin.readline().strip())\n    # A = int(stdin.readline().strip())\n    N = int(stdin)\n    A = int(stdin)\n    S = N*N\n    S2 = S//2\n    return str(S2 - A)"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin)\n    a = int(stdin)\n    return str(a * (n ** 2 - a))\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    res = (n ** 2) - a\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution to the Problem 8th Feb 2020.\n\n    Parameters:\n    stdin (str): Input given in the following format:\n    N\n    A\n    '''\n    # Get input\n    lines = stdin.split('\\n')\n    N, A = int(lines[0]), int(lines[1])\n\n    # Solution\n    return str(N * N - A)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = int(lines[1])\n\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        if a < 1:\n            return 0\n        elif a == 1:\n            return n * n\n        else:\n            return n * n - a\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n------Solution------\nA = int(input())\nN = int(input())\nprint(N * N - A)\n"
    },
    {
        "number": 4545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    a,b,c = map(int,stdin.split())\n    \n    if(b-a == c-b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n    \n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a - b == c - b:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 4 6''')\n    'YES'\n    >>> solution('''5 10 15''')\n    'YES'\n    >>> solution('''5 10 15 5 20''')\n    'YES'\n    >>> solution('''15 10 5 20 10 5 20''')\n    'YES'\n    >>> solution('''5 10 10 5 20 5 20''')\n    'NO'\n    \"\"\"\n    a, b, c = tuple(map(int, stdin.split()))\n    return \"YES\" if b - a == c - b else \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    if b-a == c-b:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 4 6''')\n    'YES'\n    >>> solution('''1 1 1''')\n    'NO'\n    >>> solution('''2 1 1''')\n    'YES'\n    >>> solution('''1 1 1''')\n    'YES'\n    >>> solution('''1 1 2''')\n    'YES'\n    >>> solution('''1 2 2''')\n    'NO'\n    >>> solution('''1 1 1''')\n    'YES'\n    >>> solution('''3 3 3''')\n    'NO'\n    >>> solution('''4 4 4''')\n    'NO'\n    >>> solution('''4 2 2''')\n    'YES'\n    >>> solution('''1 2 2''')\n    'NO'\n    \"\"\"\n    nums = [int(n) for n in stdin.split()]\n    return \"YES\" if abs(nums[1] - nums[0]) == abs(nums[2] - nums[1]) else \"NO\""
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(' ')\n    heights = [int(x) for x in input_list]\n    if abs(heights[0] - heights[1]) == abs(heights[1] - heights[2]):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    if b - a == c - b:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if b-a == c-b:\n        return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if a * b == c * (a + b) else \"NO\"\n"
    },
    {
        "number": 4546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'YES' if a == b or a == c or b == c else 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin[0]\n    return 'Yes' if '9' in num else 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        n = int(stdin)\n    except ValueError:\n        return \"Error, invalid input\"\n    return str(9 in str(n))\n\"\"\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if N[1] == '9':\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    d = {'0':0,'1':1,'2':2,'3':3,'4':4,'5':5,'6':6,'7':7,'8':8,'9':9}\n    if d[n[0]] == 9:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_s = str(n)\n    if '9' in n_s:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.rstrip()\n    return \"Yes\" if \"9\" in num else \"No\"\n\"\"\""
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if N[1] == '9':\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if 9 in stdin:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"Yes\"\n    if N < 10:\n        if N % 9 == 0:\n            return \"Yes\"\n    else:\n        if N % 9 == 0 or (N // 10) % 9 == 0:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.readline().split())\n    cost = list(map(int, stdin.readline().split()))\n\n    return min(\n        sum(cost[:i + 1]) + 1\n        for i in range(M)\n        if i + 1!= X and i + 1!= N\n    )\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution for the problem.\n    '''\n    # Parse the input\n    n, m, x = list(map(int, stdin.split('\\n')[0].split(' ')))\n    tolls = list(map(int, stdin.split('\\n')[1].split(' ')))\n    # Calculate the solution\n    if x < n:\n        return str(tolls[x])\n    else:\n        return str(tolls[x % n])\n\ndef"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    x = x - 1\n    minCost = 0\n    for i in range(m):\n        if lst[i] == x:\n            minCost += 1\n        elif lst[i] < x:\n            minCost += 1\n            lst[i] += n\n    print(minCost)\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split('\\n')[0].split(' '))\n    tolls = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    \n    total_cost = 0\n    if x == 0:\n        total_cost = 0\n    else:\n        for i in range(1, m + 1):\n            if x == i:\n                total_cost += 1\n            elif x > i:\n                total_cost += 1\n                x = i\n            else:\n                total_cost += 1\n                x = i\n    return total_cost\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X = map(int, stdin.split())\n    costs = []\n    for _ in range(M):\n        a = int(stdin.split('\\n')[1])\n        costs.append(a)\n    if X == 0:\n        return min(costs)\n    if X == N - 1:\n        return min(costs)\n    for i in range(1, M + 1):\n        if (i + X) in costs:\n            if (i + X) == N:\n                return 1\n            return 2"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m, x = [int(i) for i in stdin.split()]\n    A = [int(i) for i in stdin.split()]\n    A = A[1:]\n    queue = deque([(x, 0)])\n    seen = set([x])\n    while queue:\n        now, cost = queue.popleft()\n        for nxt in A:\n            if nxt == now:\n                print(cost + 1)\n                return\n            elif nxt == 0:\n                print(cost)\n                return\n            if nxt not in seen:\n                queue.append((nxt, cost + 1))\n                seen.add(nxt)\n    print(\"-1\")\n    return\n\n\ndef"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nN, M, X = list(map(int, sys.stdin.readline().strip().split()))\n\ncosts = []\nfor i in range(M):\n    costs.append(int(sys.stdin.readline().strip()))\n\ndp = [[sys.maxsize] * N for _ in range(M + 1)]\ndp[0][X] = 0\n\nfor t in range(1, M + 1):\n    for prev in range(N):\n        for next_ in range(N):\n            if prev == next_:\n                continue\n\n            if dp[t][next_] > dp[t][prev] + costs[t - 1]:\n                dp[t][next_] = dp[t][prev] + costs[t - 1]\n\nresult = sys.maxsize\nfor i in range(N):\n    if result > dp[M][i]:\n        result = dp[M][i]\n\nprint(result)\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, _, X = map(int, stdin.split('\\n'))\n    costs = list(map(int, stdin.split('\\n')[1:]))\n    dp = [0] * (X + 1)\n    dp[X] = 0\n    for cost in costs:\n        dp[cost] += 1\n    costs = dp[1:]\n    dp = [costs[0]] + [0] * len(costs)\n    for i in range(1, len(costs)):\n        dp[i] = min(dp[i - 1] + costs[i], dp[i])\n    return dp[-1]\n"
    },
    {
        "number": 4548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3 3\\n1 2 4\")\n    '1'\n    >>> solution(\"5 3 3\\n1 3 4\")\n    '0'\n    \"\"\"\n    _, N, _, *arr = stdin.split(\"\\n\")\n    arr = list(map(int, arr))\n\n    d = {}\n\n    for i in range(0, len(arr) - 1):\n        d[arr[i]] = arr[i + 1]\n\n    cost = 0\n    current = arr[0]\n\n    while current!= 0 and current!= N:\n        if current in d:\n            cost += 1\n            current = d[current]\n        else:\n            break\n\n    if current == N:\n        return str(cost)\n\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    matrix = []\n    for _ in range(H):\n        matrix.append(stdin.split()[1:])\n    # H x W\n    for i in range(1, H):\n        for j in range(1, W):\n            if matrix[i][j] == '#':\n                if matrix[i][j+1] == '.':\n                    matrix[i][j+1] = '*'\n                if matrix[i][j-1] == '.':\n                    matrix[i][j-1] = '*'\n                if matrix[i+1][j] == '.':\n                    matrix[i+1][j] = '*'\n                if matrix[i-1][j] == '.':\n                    matrix[i-1][j] = '*'\n    for i in range(1, H):\n        for j in range(1, W):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '#'\n            else:\n                matrix[i][j] = '.'\n    for line in matrix:\n        print(''.join(line))\n    return 'Yes' if matrix[0][0] == '#' else 'No'\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split(' '))\n    squares = {(i, j): True for i in range(H) for j in range(W)}\n\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        for (i, j), c in zip(squares, line):\n            if c == '#':\n                squares[(i, j)] = False\n    for i in range(H):\n        for j in range(W):\n            if not squares[(i, j)]:\n                continue\n            for (a, b) in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if a >= 0 and a < H and b >= 0 and b < W and not squares[(a, b)]:\n                    break\n            else:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  # H is the number of rows.\n  H = int(stdin.split()[0])\n  # W is the number of columns.\n  W = int(stdin.split()[1])\n  s = stdin.split()[2:]\n  print(s)"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin.split()[0])\n    cols = int(stdin.split()[1])\n\n    can_be_black = 0\n    can_be_white = 0\n\n    for i in range(rows):\n        can_be_black += stdin.count('.', cols * i)\n        can_be_white += stdin.count('#', cols * i)\n\n    can_be_white -= can_be_black\n\n    if can_be_black == cols * rows or can_be_white == cols * rows:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_row, num_col = map(int, stdin.split())\n    map_str = stdin[stdin.index(\"\\n\") + 1:]\n\n    # Create a 2D array of ints from the map\n    map_array = []\n    for row in map_str.split(\"\\n\"):\n        map_array.append(list(row))\n\n    # Create the initial solution array with all white\n    solution_array = []\n    for _ in range(num_row):\n        solution_array.append([0 for _ in range(num_col)])\n\n    def paint_square(i: int, j: int, color: str) -> None:\n        # If the given square has the same color as the target color, return\n        if solution_array[i][j] == color:\n            return\n\n        # If the given square is black, paint it to the target color\n        if solution_array[i][j] == \"#\":\n            solution_array[i][j] = color\n            return\n\n        # Paint the square to black, and paint its neighbors to black, as long\n        # as their color is not the target color\n        solution_array[i][j] = \"#\"\n        paint_square(i, j + 1, color)\n        paint_square(i + 1, j, color)\n\n    # Determine the coordinates of the black squares\n    for i in range(num_row):\n        for j in range(num_col):\n            if map_array[i][j] == \"#\":\n                paint_square(i, j, \".\")\n\n    # Check if there are any black squares\n    for row in solution_array:\n        for square in row:\n            if square == \"#\":\n                return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n.#\\n###\\n.#\\n\")\n    'Yes'\n    \"\"\"\n    H, W = [int(x) for x in stdin.split()]\n\n    # this is an exhaustive search\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            if stdin[i * (W + 1) + j]!= \".\":\n                continue\n            for k in range(2):\n                if k == 0:\n                    if stdin[i * (W + 1) + j + 1] == \"#\":\n                        continue\n                else:\n                    if stdin[i * (W + 1) + j - 1] == \"#\":\n                        continue\n                # i, j are the start and end points\n                # check whether the starting point is valid\n                if i == 1 and j == 1:\n                    if stdin[i * (W + 1) + j + k]!= \"#\":\n                        break\n                elif i == H and j == 1:\n                    if stdin[i * (W + 1) + j + k]!= \"#\":\n                        break\n                elif i == H and j == W:\n                    if stdin[i * (W + 1) + j - k]!= \"#\":\n                        break\n                elif i == 1 and j == W:\n                    if stdin[i * (W + 1) + j - k]!= \"#\":\n                        break\n                else:\n                    if stdin[i * (W + 1) + j + k]!= \"#\" and stdin[i * (W + 1) + j - k]!= \"#\":\n                        break\n            else:\n                return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  H, W = map(int, stdin.split())\n  map = [stdin.split()[1]]\n  for i in range(H - 1):\n    map.append(stdin.split()[i + 2])\n  return 'Yes' if len(set(map[0])) == 1 and len(set(map[1])) == 1 and len(set(map[2])) == 1 else 'No'\n\n\ndef"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m = stdin.split()\n  n, m = int(n), int(m)\n  s = [stdin.split()]\n  # put in a matrix\n  mat = [ [0 for _ in range(m) ] for _ in range(n)]\n  for i in range(n):\n    for j in range(m):\n      mat[i][j] = s[i][j]\n  for i in range(n):\n    for j in range(m):\n      if mat[i][j] == '#':\n        mat[i][j] = '*'\n  # start dfs\n  def dfs(mat: list, visited: set, i: int, j: int) -> bool:\n    visited.add((i, j))\n    adj_valid = False\n    for x, y in [(i, j + 1), (i + 1, j)]:\n      if x in range(n) and y in range(m) and mat[x][y]!= '*' and (x, y) not in visited:\n        adj_valid |= dfs(mat, visited, x, y)\n    return adj_valid\n  # start dfs for each\n  ans = True\n  for i in range(n):\n    for j in range(m):\n      if mat[i][j] == '*':\n        visited = set()\n        ans &= dfs(mat, visited, i, j)\n  if ans:\n    return 'Yes'\n  return 'No'"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = []\n    for i in range(h):\n        grid.append(stdin.splitlines()[i])\n    \n    def color(i: int, j: int, grid: List[str], visited: List[List[int]]) -> bool:\n        if (i, j) in visited:\n            return False\n        if grid[i][j]!= \"#\":\n            return False\n        if (i, j) in visited:\n            return False\n        if (i, j) in visited:\n            return False\n        return True\n    \n    def dfs(i: int, j: int, grid: List[str], visited: List[List[int]]) -> bool:\n        visited.append((i, j))\n        if i+1 < h and j+1 < w and color(i+1, j+1, grid, visited):\n            return True\n        if i+1 < h and color(i+1, j, grid, visited):\n            return True\n        if j+1 < w and color(i, j+1, grid, visited):\n            return True\n        if i-1 >= 0 and j-1 >= 0 and color(i-1, j-1, grid, visited):\n            return True\n        if i-1 >= 0 and color(i-1, j, grid, visited):\n            return True\n        if j-1 >= 0 and color(i, j-1, grid, visited):\n            return True\n        if i+1 < h and j-1 >= 0 and color(i+1, j-1, grid, visited):\n            return True\n        if i-1 >= 0 and j+1 < w and color(i-1, j+1, grid, visited):\n            return True\n        return False\n    \n    visited = []\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == \"#\" and dfs(i, j, grid, visited):\n                return \"Yes\"\n    return \"No\"\n    \n"
    },
    {
        "number": 4549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(int, stdin.split(\" \")))\n    n = sorted(n)\n    \n    if n[1] < n[2]:\n        return \"Yes\"\n    elif n[0] > n[1] or n[0] > n[2]:\n        return \"No\"\n    else:\n        return \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if (a + b) % 2 == 0 and (b + c) % 2 == 0 and (a + c) % 2 == 0 else \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n\n    if a < b:\n        if (a+b)%2 == 0:\n            if c%2 == 0:\n                if a == c or b == c:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n            else:\n                if a == c or b == c:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n        else:\n            if c % 2 == 0:\n                if a == c or b == c:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n            else:\n                if a == c or b == c:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n    else:\n        if b < c:\n            if (b+c)%2 == 0:\n                if a == c or b == c:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n            else:\n                if a == c or b == c:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n        else:\n            if a < c:\n                if (a+c)%2 == 0:\n                    if b == c:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n                else:\n                    if b == c:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n            else:\n                if (a+b)%2 == 0:\n                    if c == b:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n                else:\n                    if c == b:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'Yes' if a + b >= c and a + c >= b and b + c >= a else 'No'\n\n\ndef"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10 20 30')\n    Yes\n    >>> solution('10 30 10')\n    Yes\n    >>> solution('10 30 20')\n    No\n    \"\"\"\n    stdin = stdin.strip()\n    a, b, c = [int(num) for num in stdin.split(' ')]\n    if a + b!= c:\n        return 'No'\n    return 'Yes' if (a % 2 + b % 2) == (c % 2) else 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b <= c or a + c <= b or b + c <= a:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return 'Yes' if a + b == c or b + c == a or a + c == b else 'No'\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a_packs = int(a / 3)\n    b_packs = int(b / 3)\n    c_packs = int(c / 3)\n    a_packs = max(a_packs, 0)\n    b_packs = max(b_packs, 0)\n    c_packs = max(c_packs, 0)\n\n    if a_packs >= b_packs + c_packs:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b == 2 * c:\n        return \"Yes\"\n    elif a + b == 2 * c + 1:\n        return \"No\"\n    elif a + b + c == 2 * (a + b + c - 1):\n        return \"Yes\"\n    elif a + b + c == 2 * (a + b + c + 1):\n        return \"No\"\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 4550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c < 30:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    left, right = map(int, stdin.split(' '))\n    return 'Left' if left > right else 'Right' if left < right else 'Balanced'\n\"\"\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split(' '))\n    return 'Left' if l > r else 'Right' if l < r else 'Balanced'\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    left = [int(line) for line in stdin.split(' ')]\n    right = [int(line) for line in stdin.split(' ')]\n    if sum(left) > sum(right):\n        return 'Left'\n    elif sum(left) < sum(right):\n        return 'Right'\n    else:\n        return 'Balanced'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b > c + d:\n        return \"Left\"\n    elif a + b < c + d:\n        return \"Right\"\n    else:\n        return \"Balanced\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    left = int(stdin.split()[0]) + int(stdin.split()[1])\n    right = int(stdin.split()[2]) + int(stdin.split()[3])\n    if left > right:\n        return \"Left\"\n    elif left == right:\n        return \"Balanced\"\n    else:\n        return \"Right\""
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    left_total_weight, right_total_weight = map(int, stdin.split())\n    return 'Left' if left_total_weight > right_total_weight else 'Right' if left_total_weight < right_total_weight else 'Balanced'\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    L, R = list(map(int, stdin.split(' ')))\n    if L > R:\n        return \"Left\"\n    elif L == R:\n        return \"Balanced\"\n    else:\n        return \"Right\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Replace pass above with your code\n    # Read input from stdin and output to stdout\n    A, B, C, D = [int(i) for i in stdin.split(' ')]\n    # Write your code above this line\n    if A + B > C + D:\n        print(\"Left\")\n    elif A + B < C + D:\n        print(\"Right\")\n    else:\n        print(\"Balanced\")\n    return \"\"\n"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *masses = map(int, stdin.split())\n    return ['Left', 'Balanced', 'Right'][sum(masses) % 2]\n\"\"\"\n\ndef"
    },
    {
        "number": 4551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    N = int(n)\n    arr = stdin.split(\"\\n\")[1].split()\n    open_arr = [int(a) for a in arr if int(a) > 0]\n    close_arr = [int(a) for a in arr if int(a) < 0]\n    open_arr.sort()\n    close_arr.sort()\n    highest = 0\n    for i in range(0, len(open_arr)):\n        for j in range(0, len(close_arr)):\n            highest = max(highest, open_arr[i] + close_arr[j])\n    return str(highest)"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, F = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")], []\n    for _ in range(N[0]):\n        F.append([int(i) for i in stdin.split(\"\\n\")[1].split(\" \")])\n    P = [int(i) for i in stdin.split(\"\\n\")[2].split(\" \")]\n    \n    dp = [[0 for _ in range(101)] for _ in range(N[0])]\n    for i in range(N[0]):\n        for j in range(101):\n            if F[i][j] == 1:\n                dp[i][j] = P[j]\n            if i == 0 and j == 0:\n                dp[i][j] = max(P)\n            elif i == 0:\n                dp[i][j] = max(dp[i][j - 1], dp[i][j])\n            elif j == 0:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of Codewars Kata \"Max profit after N days with transactions\"\n    \"\"\"\n    N, transactions = [int(x) for x in stdin.split(\"\\n\")]\n    P = [int(x) for x in stdin.split(\"\\n\")[1:]]\n\n    # Maximum possible profit with one transaction per day\n    max_profit = sum([x * y for x, y in zip(P, range(N, 0, -1))])\n    print(max_profit)\n    return str(max_profit)"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin.splitlines() is a nice way to do what I did above\n    n = int(stdin.splitlines()[0])\n    # the array stores the values in stdin as a list of lists\n    # they need to be converted to a tuple\n    # the tuple looks like (F_{1,1,1} F_{1,1,2}... F_{1,5,1} F_{1,5,2})\n    tuple_list = tuple([tuple(map(int, line.split())) for line in stdin.splitlines()[1:]])\n    # this splits each item in the tuple into a list, like this:\n    # [(F_{1,1,1} F_{1,1,2}... F_{1,5,1} F_{1,5,2})]\n    # this is the list of tuples, so tuple_list[0] is the tuple of all the first values\n    # tuple_list[0][0] is the first element in the tuple, the first value\n    # tuple_list[0][0][0] is the first value in the tuple, the first value in the first tuple in the list\n    print(tuple_list[0][0][0])\n    return ''\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    F = {(i, j, k): int(x) for i, j, k, x in (line.split(' ') for line in stdin)}\n    c = 0\n    for i in range(N):\n        for j in range(1, 6):\n            for k in range(1, 3):\n                if F[(i, j, k)]:\n                    c += 1\n                    break\n    return str(c)\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *shop = list(map(int, stdin.split('\\n')[1:]))\n    M = int(stdin.split('\\n')[0])\n    dp = [[[0, 0] for _ in range(2)] for _ in range(N)]\n    for i, row in enumerate(shop):\n        for j, value in enumerate(row):\n            dp[i][j][value] += 1\n    res = 0\n    for i in range(M):\n        for j in range(5):\n            if dp[0][0][j] > 0 and dp[0][1][j] > 0:\n                res += max(dp[0][0][j], dp[0][1][j])\n            elif dp[0][0][j] > 0:\n                res += dp[0][0][j]\n            elif dp[0][1][j] > 0:\n                res += dp[0][1][j]\n    return res"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P_dict = dict()\n    for i in range(1, N+1):\n        P_dict[i] = [int(j) for j in stdin.split(\": \")[i].split() if j!= \":\"]\n    max_profit = 0\n    for i in range(1, N+1):\n        for j in range(len(P_dict[i])):\n            if P_dict[i][j] == 1:\n                max_profit += P_dict[i][j+1]\n    print(max_profit)\n\nsolution(input())\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 1 0 1 0 0 0 1 0 1\n   ... 3 4 5 6 7 8 9 -2 -3 4 -2\n   ... ''')\n    '8'\n    \"\"\"\n    data = stdin.splitlines()\n    n = int(data[0])\n    shops = [\n        [\n            int(i)\n            for i in data[1].split()\n        ]\n        for j in range(1, 6)\n    ]\n    opening = [\n        int(i)\n        for i in data[2].split()\n    ]\n    closing = [\n        int(i)\n        for i in data[3].split()\n    ]\n    profit = [\n        int(i)\n        for i in data[4].split()\n    ]\n    max_profit = 0\n    for i in range(n):\n        for j in range(5):\n            opening_shop = shops[j][i] == 1\n            closing_shop = shops[j][i] == 0\n            opening_period = opening[i] == 1\n            closing_period = closing[i] == 1\n            if opening_shop and opening_period:\n                max_profit += profit[i]\n            elif closing_shop and closing_period:\n                max_profit -= profit[i]\n\n    return str(max_profit)\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    S = stdin[A + 1 : A + 1 + B]\n    if len(S)!= B:\n        return 'No'\n    if S[0]!= '-':\n        return 'No'\n    for c in S[1:]:\n        if c not in '0123456789':\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[2]"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    S = stdin[len(A) + 1:]\n    return \"Yes\" if len(S) == int(B) and S[-(int(A) + 1)] == '-' and S[:-(int(A) + 1)].isdigit() else \"No\"\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(n) for n in stdin.split(\" \")]\n    s = stdin[3:]\n    if len(s)!= A+B+1 or s[A]!= '-':\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    S = stdin[B + 1:]\n    if len(S)!= A + 1 or S[A]!= \"-\" or not S[1:].isdigit():\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    S = stdin[A+1:]\n    print(\"Yes\") if S[B-1] == '-' else print(\"No\")\n"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\""
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin.split(\"-\")) == 2 and len(stdin.split(\"-\")[0]) == 2 and len(stdin.split(\"-\")[1]) == 3 and stdin.split(\"-\")[1].isdigit() else \"No\"\n\ndef"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    S = stdin.split()[1]\n    return 'Yes' if A <= len(S) and B <= len(S) - 1 and S[A] == '-' and S[A + 1:A + 1 + B].isdigit() and all(c.isdigit() for c in S[:A]) and all(c.isdigit() for c in S[A + 1 + B:]) else 'No'\n\n\ndef"
    },
    {
        "number": 4553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin[n + 1 :]\n    if n!= len(s) or p not in range(1, 6):\n        return \"No\"\n    if not s[p - 1].isdigit():\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the minimum distance the second rectangle needs to be moved\n    '''\n    nums = [int(n) for n in stdin.strip().split(' ')]\n    W = nums[0]\n    a = nums[1]\n    b = nums[2]\n    # left_to_right = abs(a - b) * W\n    # right_to_left = abs(a - (b + W)) * W\n    # if left_to_right < right_to_left:\n    #     print(left_to_right)\n    # else:\n    #     print(right_to_left)\n    print(abs(a - b) * W)\n\ndef"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    W, A, B = map(int, stdin.split(' '))\n    return str(abs(A - B))\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(i) for i in stdin.split()]\n    m = l[1]\n    a = l[2]\n    b = l[3]\n    print(abs(a - m))"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 3 2 6\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 7 5 6\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 6 2 7\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 4 4 6\n   ... ''')\n    '1'\n    '''\n    >>> solution('''\n   ... 1 1 1\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 3 3 3\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 3 2 6\n   ... ''')\n    '1'\n    '''\n    >>> solution('''\n   ... 6 4 2\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 3 2 3\n   ... ''')\n    '1'\n    '''\n    >>> solution('''\n   ... 10 1 1\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 4 4 4\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 1 1 1\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 1 1 1\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 1 2 3\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0'\n    '''\n    >>> solution('''\n   ... 10 10 10\n   ... ''')\n    '0"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = map(int, stdin.split())\n    return f'{a - b + 1}'\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    width, start_a, start_b = [int(x) for x in stdin.split(' ')]\n    distance = min(width - start_a, start_b)\n    return str(distance)\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    w, a, b = [int(x) for x in lines[0].split(' ')]\n    return str(abs(a - b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, w = map(int, stdin.split(' '))\n    return str(max(0, abs(a - b) - w))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = map(int, stdin.split())\n    return str(max(0, min(a + w - b, b - w)))\n"
    },
    {
        "number": 4554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    w, a, b = map(int, stdin.split())\n    return str(min(a - b, b - a + w, abs(b - a)))\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    A, B, K = map(int, stdin.split())\n    A, B = min(A, B), max(A, B)\n    nums = sorted(list(range(A, B + 1)))\n    print(nums)\n    res = sorted(nums[:K], reverse=True) + sorted(nums[K:], reverse=False)\n    print(res)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # a, b, k = list(map(int, stdin.split('\\n')[0].split()))\n    a, b, k = list(map(int, stdin.split()))\n    arr = list(range(a, b+1))\n    arr.sort()\n    ans = []\n    for i in range(0, len(arr)):\n        if abs(arr[i] - arr[0]) <= k or abs(arr[i] - arr[-1]) <= k:\n            ans.append(arr[i])\n    return ans\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    {\n        \"A\": A,\n        \"B\": B,\n        \"K\": K\n    }\n    '''\n    # 1.\n    # Get input\n    A, B, K = map(int, stdin.split())\n\n    # 2.\n    # Get A - B\n    lower_bound = max(1, A-B+1)\n    upper_bound = min(10**9, A+B)\n    # print(\"lower_bound: {}\".format(lower_bound))\n    # print(\"upper_bound: {}\".format(upper_bound))\n\n    # 3.\n    # Get K and find how many smallest numbers and largest numbers are\n    # in between A and B\n    sorted_numbers = list(range(lower_bound, upper_bound+1))\n    # print(\"sorted_numbers: {}\".format(sorted_numbers))\n    sorted_numbers.sort()\n    # print(\"sorted_numbers: {}\".format(sorted_numbers))\n\n    # 4.\n    # Get the K smallest and K largest numbers\n    smallest_numbers = sorted_numbers[:K]\n    largest_numbers = sorted_numbers[-K:]\n\n    # 5.\n    # Find and print the K largest and K smallest numbers\n    print(smallest_numbers[-1])\n    print(largest_numbers[0])\n\n    return ''"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    A, B, K = map(int, stdin.split())\n    a = [A]\n    b = [B]\n    k = [K]\n    for i in range(1, B):\n        a.append(a[i - 1] + i)\n        b.append(b[i - 1] + i)\n        k.append(k[i - 1])\n    a.sort()\n    b.sort()\n    res = []\n    i = j = 0\n    while i < len(a) and j < len(b):\n        if a[i] >= b[j]:\n            if k[j] == 1:\n                i += 1\n            else:\n                j += 1\n        else:\n            if k[i] == 1:\n                i += 1\n            else:\n                j += 1\n            res.append(b[j])\n    return \" \".join(map(str, res))\n\n\ndef"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if K <= 1:\n        print(max(range(A, B + 1)))\n    else:\n        print(min(range(A, B + 1)))\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = (int(i) for i in stdin.split(' '))\n\n    first = [int(i) for i in range(a, b + 1)]\n    second = []\n\n    for i in first:\n        if len(second) < k:\n            second.append(i)\n        elif len(second) == k:\n            if i < min(second):\n                second = [i] + second\n            elif i > max(second):\n                second = second + [i]\n        else:\n            break\n\n    for i in range(len(second)):\n        print(second[i])\n    return ''\n"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split(' '))\n    a, b = sorted([a, b])\n    min_a = a - k\n    min_b = b + 1 + k\n    max_a = a + k\n    max_b = b - k\n    print(min(filter(lambda x: min_a < x < min_b, range(a, b + 1))))\n    print(max(filter(lambda x: max_a > x > max_b, range(a, b + 1))))"
    },
    {
        "number": 4555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a list of all numbers in the range [A,B]\n    that are either K-smallest or K-largest,\n    where A and B are integers given by the input.\n    >>> solution('3 8 2')\n    3\n    4\n    7\n    8\n    \"\"\"\n   ..."
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC'"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin.split()\n    return s[0][:1] + s[1][:1] + s[2]\n"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC'\n\"\"\"\n\ndef"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + \"C\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('AtCoder', 'ABC')\n\"\"\"\ndef"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'ABC'"
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('AtCoder Beginner Contest', 'ABC')\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = [int(i) for i in stdin.split()]\n    if a * b < x:\n        print('NO')\n    else:\n        if a - b < x:\n            print('NO')\n        else:\n            print('YES')"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cats, dogs, cats_req = map(int, stdin.split())\n    total = cats + dogs\n    dogs_req = total - cats_req\n    if cats_req == dogs_req:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nMAX_A = 100\nMAX_B = 100\nMAX_X = 200\n\n\ndef"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns YES if there are exactly X cats among A + B animals. Otherwise returns NO.\n    '''\n    [A, B, X] = [int(x) for x in stdin.split()]\n    return 'YES' if X * 2 == A + B else 'NO'"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    return 'YES' if A + B >= X * 2 and A * 2 >= X and B * 2 >= X else 'NO'"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = [int(x) for x in stdin.split(' ')]\n    dogs = min(X, B)\n    cats = X - dogs\n    if A * cats + B * dogs == X:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise and return result\"\"\"\n    # Get data\n    A, B, X = [int(x) for x in stdin.split(\"\\n\")]\n\n    # Find the min number of cats and dogs to make sure there are enough cats to make X\n    # Get A + B\n    total = A + B\n\n    # There are at least X cats\n    if X >= total:\n        return \"YES\"\n    # There are not enough cats\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A + B >= X:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.readlines().strip().split())\n    print('YES' if x <= a + b and x % b == 0 else 'NO')"
    },
    {
        "number": 4557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split(\" \")))\n    a, b, x = nums\n    return \"YES\" if x <= (a + b) and b >= x and a >= x else \"NO\"\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  X, t = [int(n) for n in stdin.split()]\n  return str(int((X - (X - (X / 100) * t)) * 100))"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sand_weight, time = list(map(int, stdin.split()))\n    time_in_seconds = time * 1000\n    sand_in_upper_bulb = sand_weight\n    for i in range(1, time_in_seconds + 1):\n        if sand_in_upper_bulb > 0:\n            sand_in_upper_bulb -= 1\n        else:\n            sand_in_upper_bulb += 1\n    return str(sand_in_upper_bulb)"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, t = list(map(int, stdin.split()))\n    return str(X - t)\n\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, t = [int(i) for i in stdin.split('\\n')[0].split()]\n    print(int(X * t))\n    return X * t"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, t = map(int, stdin.split())\n    sand = x\n    for i in range(t):\n        sand = int(sand * 0.5)\n    print(sand)"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    x, t = int(input[0]), int(input[1])\n\n    return x - (x // t) * t\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, t = stdin.split(' ')\n    x = int(x)\n    t = int(t)\n    s = x - x * (t/x)\n    return f'{s}'\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, t = map(int, stdin.split(\" \"))\n    return str(X * t // (X + t))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sand = int(stdin.split()[0])\n    duration = int(stdin.split()[1])\n    return str(sand - (sand*duration))\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    return str(a * b) if a * b < 10**18 else str(-1)\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # https://en.wikipedia.org/wiki/Multiplication_algorithm\n    # 2^19 = 1,048,576\n    # 10^18 = 9,223,372,036,854,775,808\n    # 2^20 = 1,099,511,627,776\n    # 10^19 = 9,223,372,036,854,775,808,571,528,631\n    # 2^20 = 1,099,511,627,776,358,271,819,455,837,556,494,619,344,376,345,453,177\n    # 10^20 = 9,223,372,036,854,775,808,571,528,631,741,876,907,655,1258,418,428,237,791,398,64,988,551,\n    # 693,923,680,854,775,890,273,569,751,779,561,879,938,380,643,723,168,118,479,670,889,464,221,741,832\n    # 2^21 = 1,099,511,627,776,358,271,819,455,837,556,494,619,344,376,345,453,177,372,354,135,508,752,\n    # 863,937,373,246,627,326,354,476,478,527,147,161,823,616,73,399,801,817,229,111,297,544,432,731,711,\n    # 742,141,262,607,853,853,627,634,099,716,846,576,912,289,099,969,567,585,923,631,728,350,890,368,292,\n    # 715,784,499,245,484,529,520,363,781,225,212,599,716,716,844,846,280,673,848,534,856,616,677,897,388,\n    # 599,716,716,941,564,885,836,566,184,355,732,844,844,564,507,764,894,279,764,716,853,664,350,923,567,\n    # 605,858,923,856,567,398,941,716,567,355,732,567,099,257,928,411,264,179,898,349,318,660,099,370,348,\n    # 10,636,2,9,572,906,923,353,928,355,923,856,566,710,567,355,732,099,716,567,844,566,564,704,853,554,\n    # 564,704,941,716,716,564,405,360,732,716,716,567,764,844,664,764,853,764,404,858,664,858,730,596,941,\n    # 716,716,567,764,716,716,736,941,928,856,765,652,856,099,716,941,942,355,673,099,658,923,567,355,732,\n    # 716,567,941,716,716,567,764,716,716,736,941,928,856,765,652,856,099,716,941,942,355,673,099,658,923,\n    # 567,355,732,099,716,716,567,941,716,716,764,754,354,890,368,292,715,784,499,245,484,529,520,363,781,\n    # 225,212,599,716,716,844,846,280,673,848,534,856,616,677,897,388,599,716,716,941,564,885,836,566,184,\n    # 355,732,844,844,564,507,764,894,279,764,716,853,664,350,923,567,605,858,923,856,567,398,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567,\n    # 564,704,853,554,564,704,941,716,567,355,732,099,716,567,844,566,564,704,853,554,564,704,941,716,567"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    str_list = stdin.split(\" \")\n    if (int(str_list[0]) == 0) or (int(str_list[0]) > 10 ** 5):\n        print(\"-1\")\n    else:\n        mult_list = []\n        for i in range(1, len(str_list)):\n            mult_list.append(str(int(str_list[i]) * int(str_list[i-1])))\n        print(int(\"\".join(mult_list)))\n    return \"\"\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = stdin.split()\n    res = int(n[0]) * int(n[1])\n    if res < 10 ** 18:\n        return str(res)\n    else:\n        return -1"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Read input and return solution string\n    :param stdin: standard input\n    :return: solution string\n    \"\"\"\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    \n    if N < 2:\n        return -1\n    if sum(A) >= 10**18:\n        return -1\n    else:\n        return prod(A)\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''We have 1000000000 \\times 1000000000 = 1000000000000000000.'''\n    "
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(stdin.readline()) for _ in range(n)]\n    res = reduce(lambda a, b: a * b, nums)\n    if res > 10 ** 18:\n        return -1\n    else:\n        return res\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the problem CCC 2020 Day 13 Challenge.\n\n    Parameters:\n    stdin     Input given to the function.\n\n    Returns:\n    stdout    The function should return a string.\n    \"\"\"\n\n    # Split the input using the space character.\n    a = stdin.split(' ')\n\n    # Initialize variables.\n    n = int(a[0])\n    s = 0\n\n    # Iterate over the list of integers.\n    for i in range(1, n + 1):\n        s += int(a[i])\n\n    # Check if the sum of integers exceeds 10^18.\n    if s > 10 ** 18:\n        return -1\n\n    # Return the sum of the integers.\n    return str(s)\n"
    },
    {
        "number": 4559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = [int(i) for i in stdin[1].split(' ')]\n    result = 1\n    for i in A:\n        if result > 10 ** 18:\n            result = -1\n            break\n        result *= i\n    return result\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2018\n   ... 218''')\n    Yes\n    \"\"\"\n    return (\n        'Yes'\n        if (sum(int(a) * 500 for a in stdin.split('\\n')[0].split()) == int(\n            stdin.split('\\n')[1]))\n        else 'No'\n    )"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if N == 1:\n        if A == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if A == 1:\n        return \"Yes\"\n    N -= A\n    if N < 0:\n        return \"No\"\n    if N % 500 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2018\n   ... 218''')\n    'Yes'\n    \"\"\"\n    N = int(stdin.split(\"\\n\")[0])\n    A = int(stdin.split(\"\\n\")[1])\n    if A + A // 2 < N:\n        return \"No\"\n    elif A // 500 + A // 500 * 2 < N:\n        return \"No\"\n    elif N - A - A // 2 < 0:\n        return \"No\"\n    elif N - A - A // 2 % 500 > 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = (int(x) for x in stdin.split())\n    return 'Yes' if n % 500 == 0 and n // 500 <= d * 50 and (n // 500) % 50 == 0 else 'No'"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n\n    N = int(inputs[0])\n    A = int(inputs[1])\n\n    if A * 500 + N % 500 == 0:\n        return 'Yes'\n    if A * 500 + (N - 1) % 500 == 0:\n        return 'Yes'\n\n    return 'No'\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.readline())\n    A: int = int(stdin.readline())\n    return \"Yes\" if N - A <= A else \"No\"\n    "
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A = stdin.split('\\n')\n    N = int(N)\n    A = int(A)\n    coins = [500, 200, 100, 50, 20, 10, 5, 2, 1]\n    # for each coin\n    for i in range(len(coins)):\n        # if the current coin is too big for the remaining amount\n        if coins[i] * (A // coins[i]) > N:\n            # check for how many times we can do this\n            count = N // coins[i]\n            # if there are enough coins to fill the amount\n            if count >= 1:\n                # loop through each of the remaining amounts\n                for j in range(count):\n                    # if we have enough coins to fill this amount\n                    if (coins[i] * j + N) % coins[i] == 0:\n                        # if we have more than 1 coin then we can use 1-yen coins\n                        if coins[i] * j > 1:\n                            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # https://en.wikipedia.org/wiki/Chinese_remainder_theorem#Finding_the_modulus_in_the_computation\n\n    n, a = map(int, stdin.split('\\n'))\n    c = sorted(a)\n    m = 1\n    for coin in c:\n        m *= coin\n    i = 0\n    for coin in c:\n        if (i + 1) % coin!= 0:\n            return 'No'\n        else:\n            i = m // coin\n    return 'Yes'"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[0]\n    n = int(a)\n    b = stdin.split('\\n')[1]\n    c = int(b)\n    if n == c:\n        return 'Yes'\n    elif n > c:\n        rem = n - c\n        yen = c // 500\n        if rem - yen * 500 > 0:\n            yen += 1\n        elif rem - yen * 500 == 0:\n            yen += 1\n        else:\n            yen += 2\n        if yen > 0:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [500,100,50,10,5,1]\n    count = 0\n    for coin in coins:\n        count += n // coin\n        n %= coin\n    return \"Yes\" if count == 5 else \"No\""
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(n) for n in stdin.split(' ')]\n    day_before = days[0]\n    best_by = days[1]\n    days_after = days[2]\n    if days_after >= best_by + 1:\n        return 'delicious'\n    elif best_by + 1 > days_after:\n        return'safe'\n    else:\n        return 'dangerous'\n    \n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    if (a + b) % x == 0:\n        return \"delicious\"\n    if (a + b) % x > 0:\n        return \"safe\"\n    if (a + b) % x < 0:\n        return \"dangerous\"\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, a, b = map(int, stdin.split(' '))\n    \n    if b <= x:\n        return 'dangerous'\n    if a >= b:\n        return'safe'\n    return 'delicious'\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    print('delicious' if A <= B <= X else'safe' if B <= X else 'dangerous')\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split())\n    if (B >= A):\n        return 'dangerous'\n    elif ((A - B) % 2) == 1:\n        return 'dangerous'\n    else:\n        return'safe'\n\ndef"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(x) for x in stdin.split(' ')]\n    if A <= X <= B:\n        return 'dangerous'\n    elif A <= X + 1 <= B:\n        return 'dangerous'\n    elif A <= B + 1 <= X:\n        return 'dangerous'\n    else:\n        return'safe'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin.split(' ')\n    days = [int(x) for x in days]\n    x, a, b = days\n    if a <= x:\n        print('delicious')\n    elif b > x + 1:\n        print('dangerous')\n    else:\n        print('safe')\n        \n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = [int(x) for x in stdin.split()]\n    if X + A > B:\n        return 'dangerous'\n    elif X + A <= B:\n        return'safe'\n    else:\n        return 'delicious'\n"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import zip_longest\n\ndef"
    },
    {
        "number": 4561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, A, B = map(int, stdin.split(' '))\n    if B - A >= X + 1:\n        return 'delicious'\n    elif B < A:\n        return 'dangerous'\n    else:\n        return'safe'\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N_sqrt = N ** 0.5\n    \n    if N_sqrt == int(N_sqrt):\n        return str(int(N_sqrt) ** 2)\n    else:\n        return str(int((N_sqrt + 1) ** 2))"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    while N > 0:\n        if N ** 0.5 == int(N ** 0.5):\n            return str(int(N ** 0.5))\n        N -= 1"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while k * k <= n:\n        k += 1\n    return str(k-1)"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return str(i)\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the problem.\n    '''\n    # get input\n    n = int(stdin)\n    # find the smallest square not exceeding N\n    ans = 0\n    while True:\n        ans += 1\n        if ans ** 2 > n:\n            break\n    return ans - 1\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    n = (n // 4) * 4\n    return n\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    return str(int((n ** (1 / 2)) ** 2))"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    while N > 0:\n        if N % (N - 1) == 0:\n            N -= 1\n        else:\n            break\n    print(N)"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    while (x**2) <= n:\n        x += 1\n    return str(x - 1)\n"
    },
    {
        "number": 4562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #get input\n    N = stdin.readline().strip()\n    #make int and sort\n    nums = sorted(list(map(int, N)), reverse=True)\n    #find square nums\n    square_nums = [num**2 for num in nums]\n    #check if num is square\n    #if not, stop\n    for num in square_nums:\n        if num <= int(N):\n            return str(num-1)\n    #else return max\n    return str(square_nums[0])"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum possible total number of votes obtained by Takahashi and Aoki when AtCoDeer checked the report for the N-th time.\"\"\"\n    N = int(stdin)\n    T, A = [], []\n    for _ in range(N):\n        stdin = stdin.split()\n        T.append(int(stdin[0]))\n        A.append(int(stdin[1]))\n    return str(min([sum([a * t for a, t in zip(A, combin(T, i))]) for i in range(1, N + 1)]))\n    # return str(min([sum([a * t for a, t in zip(A, combin(T, i))]) for i in range(1, N + 1)]))\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check_next(prev_T: int, prev_A: int):\n        for i in range(n):\n            T_i, A_i = t[i], a[i]\n            T, A = T_i * prev_T, A_i * prev_A\n            if not (1 <= T <= 10 ** 18 and 1 <= A <= 10 ** 18):\n                return False\n            T, A = T % N, A % N\n            if T > A:\n                T, A = A, T\n            t[i], a[i] = T, A\n        return True\n\n    n = int(stdin.readline())\n    t, a = [0] * n, [0] * n\n    for i in range(n):\n        T, A = map(int, stdin.readline().split())\n        t[i], a[i] = T, A\n    T, A = 1, 1\n    for i in range(n):\n        if not check_next(T, A):\n            return \"IMPOSSIBLE\"\n        T *= t[i]\n        A *= a[i]\n    return T\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    T, A = map(lambda s: list(map(int, s.split())), stdin.split(\":\"))\n    return \":\".join(map(lambda t: str(t[0] * t[1]), zip(T, A)))\n\n\ndef"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    n = int(stdin.readline())\n    for i in range(n):\n        t, a = list(map(int, stdin.readline().split()))\n        result.append(gcd(t, a))\n    result = sorted(result)\n    result = result[1]\n    return str(result)\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\" \"\"\"\n\ndef"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://www.codewars.com/kata/57d1d66d54d15dda7a010c1c/train/python\n    https://www.codewars.com/kata/5a0dcb8f12b3c8c8d7000c88/train/python\n    '''\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    n = int(stdin.split('\\n')[0])\n    arr = []\n    for i in range(n):\n        arr.append([int(s) for s in stdin.split('\\n')[i + 1].split()])\n\n    total = 0\n    for i in range(n):\n        if arr[i][0] == arr[i][1]:\n            total += arr[i][0]\n        else:\n            g = gcd(arr[i][0], arr[i][1])\n            arr[i][0] //= g\n            arr[i][1] //= g\n            total += g\n    return total\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''solve the problem'''\n    # get data\n    N = int(stdin.split(\"\\n\")[0])\n    P = stdin.split(\"\\n\")[1:]\n    \n    # split into pairs\n    P = [[int(x) for x in y.split()] for y in P]\n    \n    # get results\n    result = []\n    for pair in P:\n        result.append(pair[0]//pair[1])\n    \n    # get minimum\n    return str(min(result))\n"
    },
    {
        "number": 4563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ratio = []\n    for i in range(N):\n        ratio.append(list(map(int, stdin.split(sep='\\n')[i].split(sep=':'))))\n\n    for i in range(1, N):\n        ratio[i][0] = ratio[i][0] * ratio[i-1][1] + ratio[i][1] * ratio[i-1][0]\n    print(ratio)\n    print(ratio[-1][0])\n    return ''\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    return \"yes\" if len(set(s)) == len(s) else \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    characters = stdin.split()\n    return \"yes\" if len(characters[0]) == len(set(characters[0])) else \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == len(stdin) else 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.lower()\n    characters = {}\n    \n    for c in stdin:\n        if c not in characters:\n            characters[c] = 0\n        characters[c] += 1\n            \n    if len(characters) == len(stdin):\n        return 'yes'\n    return 'no'"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if len(set(stdin.strip())) == len(stdin.strip()) else \"no\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for c in stdin:\n        if stdin.count(c) > 1:\n            return \"no\"\n    return \"yes\"\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n    #return stdin.lower()\n    #return stdin.replace(' ','')\n    return set(stdin) == set(stdin.replace(' ',''))\n\nprint(solution(stdin))\n\n'''"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for c in stdin:\n        if stdin.count(c) > 1:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(set(stdin)) == len(stdin) else 'no'\n"
    },
    {
        "number": 4564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip().split('\\n')[0].strip()\n    unique = set(S)\n    return \"yes\" if len(unique) == len(S) else \"no\"\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    if n == 1:\n        return 1\n\n    def check(substring):\n        if not s.startswith(substring):\n            return False\n        substring += substring\n        if s.count(substring) >= n // 2:\n            return True\n        return False\n\n    count = 0\n    if check('E'):\n        count += 1\n    if check('W'):\n        count += 1\n    if check('WE'):\n        count += 1\n    if check('EW'):\n        count += 1\n    if check('W'):\n        count += 1\n    return count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of people who have to change their directions.\"\"\"\n    N, S = int(stdin.split('\\n')[0]), stdin.split('\\n')[1]\n    answer = 0\n    for i in range(N):\n        if S[i] == 'E':\n            answer += 1\n            S = S[:i] + 'W' + S[i + 1:]\n        else:\n            answer += 1\n            S = S[:i] + 'E' + S[i + 1:]\n    return answer\n"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5\n   ... WEEWW''')\n    '1'\n    >>> solution('''3\n   ... EEWW''')\n    '0'\n    '''\n    \n    N, s = stdin.split('\\n')\n    N = int(N)\n    s = s.split(' ')\n    if N == 1:\n        print(0)\n        return\n    elif N == 2:\n        print(0)\n        return\n    else:\n        opposite_direction = {}\n        for direction in s:\n            opposite_direction[direction] = 'E' if direction == 'W' else 'W'\n        count = 0\n        for direction in s:\n            if direction!= opposite_direction[direction]:\n                count += 1\n        print(count)\n        return"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"E\")"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the minimum number of people who have to change their directions.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution string\n    \"\"\"\n    return \"Hello, World!\""
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(\n        [f'{len(list(group))}' for key, group in groupby(stdin.split('\\n'))]\n    )"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    n, m = map(int, stdin.readline().strip().split())\n    adj_list = defaultdict(list)\n    for _ in range(m):\n        x, y = map(int, stdin.readline().strip().split())\n        adj_list[x - 1].append(y - 1)\n        adj_list[y - 1].append(x - 1)\n    # print(adj_list)\n    res = [0] * n\n    for v in adj_list.values():\n        for n in v:\n            res[n] += 1\n    for v in res:\n        print(v)"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, roads = stdin.split('\\n')\n    roads = roads.split('\\n')\n\n    def dfs(source: int, visited: List[int]):\n        visited[source] = True\n        for dest in roads:\n            a, b = [int(x) for x in dest.split()]\n            if a == source:\n                if not visited[b]:\n                    dfs(b, visited)\n            if b == source:\n                if not visited[a]:\n                    dfs(a, visited)\n\n    visited = [False] * (len(roads) + 1)\n    res = 0\n\n    for source in range(1, len(roads) + 1):\n        if not visited[source]:\n            dfs(source, visited)\n            res += 1\n\n    return res\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    roads = {}\n    for i in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        roads[a] = roads.get(a, []) + [b]\n        roads[b] = roads.get(b, []) + [a]\n    # print(roads)\n    cities = [0 for _ in range(n)]\n    for a in range(1, n + 1):\n        for b in roads[a]:\n            cities[b - 1] += 1\n    return '\\n'.join(map(str, cities))"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split('\\n')\n    N = int(N)\n    M = int(M)\n    roads = []\n    for _ in range(M):\n        roads.append(stdin.split('\\n')[0])\n    count = {}\n    for road in roads:\n        a, b = road.split(' ')\n        a = int(a)\n        b = int(b)\n        count[a] = count.get(a, 0) + 1\n        count[b] = count.get(b, 0) + 1\n    return '\\n'.join([str(count[i]) for i in range(1, N+1)])\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = [int(x) for x in stdin.split()]\n    roads = [stdin.split(':') for _ in range(M)]\n    road_city_dict = {}\n\n    for road in roads:\n        if road[0] not in road_city_dict:\n            road_city_dict[road[0]] = {road[1]}\n        else:\n            road_city_dict[road[0]].add(road[1])\n\n        if road[1] not in road_city_dict:\n            road_city_dict[road[1]] = {road[0]}\n        else:\n            road_city_dict[road[1]].add(road[0])\n\n    for key in road_city_dict:\n        road_city_dict[key] = len(road_city_dict[key])\n\n    [print(value) for key, value in road_city_dict.items()]\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # BFS\n    n, m = [int(x) for x in stdin.split()]\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = [int(x) for x in stdin.split()]\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = set()\n    distance = [0] * (n + 1)\n    # Starting from city 1\n    q = deque([1])\n    while len(q)!= 0:\n        current_node = q.popleft()\n        visited.add(current_node)\n        for neighbor in graph[current_node]:\n            if neighbor not in visited:\n                distance[neighbor] = distance[current_node] + 1\n                q.append(neighbor)\n    for i in range(1, n + 1):\n        print(distance[i])\n\n    return None\n\ndef"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read in the number of cities and roads and a list of all roads\n    num_cities, num_roads, roads = read_in(stdin)\n    # create the graph\n    graph = create_graph(roads)\n    # create a count for the number of roads\n    count = 0\n    # print the output in the correct format\n    for i in range(1, num_cities + 1):\n        # increment the count\n        count += len(graph.get(i))\n        # print the count\n        print(count)\n    # return the count\n    return count\n"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, roads = stdin.split('\\n')\n    roads = roads.split('\\n')\n    connected_cities = {}\n    for road in roads:\n        connected_cities[road[0]] = connected_cities.get(road[0], [])\n        connected_cities[road[0]].append(road[1])\n        connected_cities[road[1]] = connected_cities.get(road[1], [])\n        connected_cities[road[1]].append(road[0])\n    for i in range(int(stdin.split()[0])):\n        city = stdin.split()[i * 2 + 1]\n        result = 0\n        for city_to in connected_cities.get(city, []):\n            result += len(connected_cities.get(city_to, []))\n        print(result)"
    },
    {
        "number": 4566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Reads the number of cities and roads from stdin\n    and outputs the answer on stdout\n    \"\"\"\n    counts: Counter[City] = Counter(\n        int(city.split()[0])\n        for line in stdin.splitlines()[1:]\n        for city in line.split(':')\n    )\n    return '\\n'.join(str(counts[city]) for city in range(1, counts[MAX_CITY] + 1))\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *args = stdin.strip().split()\n    n = int(n)\n    scores = list(map(int, args))\n    return sum(s * 2 for i, s in enumerate(scores) if i + 1 < n and s > scores[i + 1])\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q_num, *q_score = map(int, stdin.split('\\n'))\n    max_score = sum(q_score)\n    if max_score % 10!= 0:\n        max_score += 10 - (max_score % 10)\n    return max_score\n    \nprint(solution(stdin.read()))"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum value that can be displayed as your grade.\n    \n    >>> solution('3\\n5\\n10\\n15')\n    25\n    \"\"\"\n    \n    N = int(stdin.readline())\n    s = [int(stdin.readline()) for _ in range(N)]\n    m = 0\n    \n    for i in range(N):\n        if i % 10 == 0:\n            if m < s[i]:\n                m = s[i]\n        else:\n            if m < s[i] + 10:\n                m = s[i] + 10\n    \n    return m\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = list(map(int, stdin.split('\\n')[1:]))\n    max_score = sum(scores)\n    if max_score % 10 == 0:\n        return max_score\n    return sum(scores) - (sum(scores) // 10) * 10"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum value that can be displayed as your grade.\"\"\"\n    # The list of scores\n    scores = []\n    # Read the scores from the standard input\n    N = int(stdin.readline())\n    for _ in range(N):\n        scores.append(int(stdin.readline()))\n    # Pre-initialize the answer\n    answer = 0\n    # Loop over the scores\n    for score in scores:\n        # If the score is 10, it is a passing score\n        if score == 10:\n            # Add it to the answer\n            answer += score\n        # If the score is a multiple of 10, it is a passing score\n        elif score % 10 == 0:\n            # Add it to the answer\n            answer += score\n        # Otherwise, it is a failing score\n        else:\n            # Add it to the answer\n            answer += score + 10 - score % 10\n    # Return the answer\n    return str(answer)\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = [int(stdin.readline()) for _ in range(n)]\n\n    correct = 0\n    for _ in range(n):\n        if s[_] % 10 == 0:\n            correct += 10\n        elif s[_] % 5 == 0:\n            correct += 5\n        else:\n            correct += s[_]\n    return str(correct)\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    questions = list(map(int, stdin.split('\\n')))\n    if sum(questions) % 10 == 0:\n        return sum(questions)\n    return sum(questions) - questions[0]\n  \n    "
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    result = n*10\n    for i in range(1, n):\n        if s[i] < s[i-1]:\n            result += s[i-1]*10 - s[i]*10\n    print(result)\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets the input of the problem, and calculates the sum of points\n    :param stdin: the input given by the problem\n    :return: the maximum value that can be displayed as your grade\n    \"\"\"\n    questions = stdin.split(\"\\n\")\n    questions.pop(0)\n\n    total = 0\n    for i in range(len(questions)):\n        questions[i] = int(questions[i])\n        if questions[i] % 10 == 0:\n            if questions[i] % 5!= 0:\n                total += questions[i]\n        elif questions[i] % 5 == 0:\n            total += questions[i]\n\n    return total\n\nprint(solution(input()))\n"
    },
    {
        "number": 4567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split(\" \")))\n    res = 0\n    for i in s:\n        if i % 10 == 0:\n            res += i\n        else:\n            res += i + 10 - i % 10\n    return str(res)\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    # s = stdin[1:]\n    # x = s[0:n // 2]\n    # y = s[n // 2:]\n    # print(x, y)\n    # return max(len(set(x)), len(set(y)))\n\n    return max(\n        len(set(s[0:n // 2])),\n        len(set(s[n // 2:])),\n        len(set(s[0:n // 2])) + len(set(s[n // 2:]))\n    )\n\nprint(solution(input()))"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    s = stdin[1]\n    letters = set(s)\n\n    l, r = 0, 1\n    while l < len(s):\n        if s[l] not in letters or s[r] not in letters:\n            l += 1\n            r += 1\n        else:\n            l += 1\n            r += 1\n    return l - r"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    \n    x, y = s[:n//2], s[n//2:]\n    \n    return max(len(set(x) - set(y)), len(set(y) - set(x)))\n\"\"\"\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the exercise.\"\"\"\n    # Split on whitespace\n    inputs = stdin.split()\n    # Retrieve N\n    N = int(inputs[0])\n    # Retrieve S\n    S = inputs[1]\n    # Retrieve number of different characters in X and Y\n    diff = 0\n    # Loop through every position to cut\n    for i in range(N):\n        # Retrieve X\n        X = S[:i+1]\n        # Retrieve Y\n        Y = S[i+1:]\n        # Increment the number of different characters if X and Y are different\n        if X!= Y:\n            diff += 1\n    # Return number of different characters\n    return str(diff)\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    S = stdin.split(\"\\n\")[1]\n    return str(max(len(set(S[:i]) ^ set(S[i:])) for i in range(1, N)))"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, S = [int(x) for x in stdin.split('\\n')]\n    return str(max(len(set(S[:i] + S[i + 1:])) for i in range(N)))"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin[0])\n    s = stdin[1:]\n\n    x = s[:n // 2]\n    y = s[n // 2:]\n\n    count_x = 0\n    count_y = 0\n    for i in set(x):\n        count_x += x.count(i)\n\n    for i in set(y):\n        count_y += y.count(i)\n\n    return count_x * count_y\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # aabbca\n    # aaa bbb ccc\n    # aa a bb bb\n    # aa a bb cc\n    # aa a b c c\n    # aa a b c c\n    # aa a b c c\n    # a a a b b b\n    # a a a b b c\n    # a a a b b c\n    # a a a b b c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a a a b c c\n    # a"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin[0])\n    s = stdin[1]\n    left = 0\n    right = len(s)-1\n    best = 0\n    while left < right:\n        if len(set(s[left:right])) > best:\n            best = len(set(s[left:right]))\n        left += 1\n        right -= 1\n    return best\n"
    },
    {
        "number": 4568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin\n    str_len = len(str)\n    max = 0\n    for i in range(1, str_len-1):\n        a = 0\n        b = 0\n        for j in range(0, i):\n            if str[j] not in str[j:i]:\n                a = a+1\n        for j in range(i+1, str_len):\n            if str[j] not in str[i+1:j]:\n                b = b+1\n        if max < a+b:\n            max = a+b\n    return max\n\nprint(solution(input()))\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the expected weather tomorrow\"\"\"\n    weather = {'Sunny': 'Cloudy', 'Cloudy': 'Rainy', 'Rainy': 'Sunny'}\n    weather_day_later = stdin\n    while stdin!= 'Sunny':\n        weather_day_later = weather[stdin]\n        stdin = weather[stdin]\n    return weather_day_later\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days = [\"Sunny\", \"Cloudy\", \"Rainy\"]\n    today = \"Sunny\"\n    for day in days:\n        if day!= today:\n            today = day\n            break\n    return today\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  my_dict = {'Sunny': 'Cloudy', 'Cloudy': 'Rainy', 'Rainy': 'Sunny'}\n  return my_dict[stdin]"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if 'Sunny' in S:\n        index = S.index('Sunny')\n        S = S.replace(S[index: index + len('Sunny')], 'Cloudy')\n    elif 'Rainy' in S:\n        index = S.index('Rainy')\n        S = S.replace(S[index: index + len('Rainy')], 'Sunny')\n    print(S)\n    return S"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = {\n        \"Sunny\": [\"Cloudy\", \"Rainy\"],\n        \"Cloudy\": [\"Sunny\", \"Rainy\"],\n        \"Rainy\": [\"Sunny\", \"Cloudy\"]\n    }\n\n    day = stdin\n    while day not in days:\n        day = days[day][0]\n    return days[day][1]\n    pass\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin.split(' ')[0]\n    days = {\n        'Sunny': 'Cloudy',\n        'Cloudy': 'Rainy',\n        'Rainy': 'Sunny'\n    }\n    return days[weather]\n'''\n\ndef"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    weather_dict = {'Sunny': 'Cloudy', 'Cloudy': 'Rainy', 'Rainy': 'Sunny'}\n    weather_list = list(stdin)\n    weather_list = weather_list[0:1]\n    day = weather_list[0]\n    if day == 'Sunny':\n        return weather_dict['Sunny']\n    elif day == 'Cloudy':\n        return weather_dict['Cloudy']\n    else:\n        return weather_dict['Rainy']\n    return ''\n\n\ndef"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:]\n    if s[0] == \"Sunny\":\n        if s[1] == \"Sunny\":\n            s = \"Cloudy\"\n        else:\n            s = \"Sunny\"\n    elif s[0] == \"Cloudy\":\n        if s[1] == \"Sunny\":\n            s = \"Rainy\"\n        else:\n            s = \"Cloudy\"\n    elif s[0] == \"Rainy\":\n        if s[1] == \"Sunny\":\n            s = \"Cloudy\"\n        else:\n            s = \"Rainy\"\n    return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"Sunny\":\n        return \"Cloudy\"\n    return \"Sunny\"\n"
    },
    {
        "number": 4569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    weather_cycle = {\n        \"Sunny\": \"Cloudy\",\n        \"Cloudy\": \"Rainy\",\n        \"Rainy\": \"Sunny\"\n    }\n    weather = stdin[0]\n    for i in range(1, len(stdin)):\n        weather = weather_cycle[weather]\n    return weather\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = [int(n) for n in stdin.split()]\n    if N % A == 0:\n        return str(A * B)\n    else:\n        return str(A * N // A + B)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, A, B = map(int, stdin.split())\n    if A * N < B:\n        return str(A * N)\n    return str(B)\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n    if A*N > B:\n        print(B)\n    else:\n        print(A*N)"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    if T % A > 0:\n        fee = A * T + B\n    else:\n        fee = T * B\n    return str(fee)"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution will find the minimum fee using greedy approach\n    '''\n    lines = stdin.split('\\n')[:-1]\n    n = int(lines[0])\n    a = int(lines[1])\n    b = int(lines[2])\n    plans = [a * t for t in range(1, n + 1)]\n    plans.append(b)\n    return str(min(plans))\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    n, a, b = map(int, stdin.split())\n    print(max(n * a, b))\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    if a*n >= b:\n        print(b)\n    else:\n        print(a*n)"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return '{}'.format(n * min(a, b))\n"
    },
    {
        "number": 4570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return str(m * 1900 + int((n - m) * 100))"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return M\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = sys.stdin\n    def input(): return stdin.readline().strip()\n    N, M = [int(i) for i in input().split()]\n    return str(M * 1900 + (N - M) * 100)"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # my solution, 3pts\n    # stdin = stdin.split('\\n')\n    # n, m = [int(i) for i in stdin[0].split()]\n    # print(n, m)\n    # t = 1\n    # while m > t:\n    #     m -= t\n    #     t *= 2\n    # print(t + (m * 1900))\n\n    # best solution, 2pts\n    N, M = [int(i) for i in stdin.split()]\n    return str(min(N * 1900, 100000) + min(N * (1900 + 2 * M), 100000))\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    return str(N * (1900 + 1900 + 1900 + 1900 + 1900 + 1900 + 1900) + (1900 + 1900 + 1900 + 1900 + 1900 + 1900 + 1900))\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the expected value of the total execution time of the code, as an integer.\n    >>> solution('1 1\\n')\n    3800\n    >>> solution('2 4\\n')\n    10800\n    '''\n    n, m = stdin.split(' ')\n    n, m = int(n), int(m)\n    s = set()\n    total = 0\n    for _ in range(m):\n        t = sum(int(c) for c in stdin.split(' '))\n        s.add(t)\n        total += t\n    return total"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    X = M * 1900 + int((1900 * (1900 + 1) / 2 - M * 1900) * 2)\n    return str(X)\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_input() -> list:\n        return [int(i) for i in stdin.split(' ')]\n\n    n, m = get_input()\n    return str(1900 * m * (m - 1) // 2 + 100 * (n - m) + 1)\n"
    },
    {
        "number": 4571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # pass # your code goes here\n    import sys\n    lines = sys.stdin.readlines()\n    n, m = [int(i) for i in lines[0].split()]\n    count = 0\n    for i in range(1, n+1):\n        count = count + i\n    count = count * 2\n    for i in range(1, m+1):\n        count = count + i\n    count = count * 2\n    print(count)\n    return \"\""
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s_count = collections.Counter(s)\n    s_set = set(s)\n    for c in string.ascii_lowercase:\n        if c not in s_set:\n            return c\n    return None\n\n\"\"\"\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for c in ascii_lowercase:\n        if c not in s:\n            return c\n    return None\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if char not in stdin:\n            return char\n    return None\n\"\"\"\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    None\n    >>> solution('abcdefghijklmnopqrstuvwxyz')\n    'a'\n    \"\"\"\n    s = stdin\n    min_char = chr(ord('z') + 1)\n    for i in s:\n        if i < min_char:\n            min_char = i\n    return min_char\n"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    arr = [chr(i) for i in range(97, 123)]\n    for i in arr:\n        if i not in s:\n            print(i)\n            return None\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    \n    letters = []\n    for i in range(97, 123):\n        letters.append(chr(i))\n    \n    letters = sorted(letters)\n    \n    for j in letters:\n        if j not in s:\n            return j\n    \n    return None\n\"\"\"\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(None) if set(stdin) == set(\"atcoderregularcontest\") else print(min(filter(lambda c: c not in stdin, \"abcdefghijklmnopqrstuvwxyz\")))"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport numpy as np\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return chr(ord(stdin.replace(max(stdin), \"\").replace(min(stdin), \"\")) + 1) if len(stdin) > 1 else None\n\n\ndef"
    },
    {
        "number": 4572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for c in sorted(stdin):\n        if c not in s:\n            return c\n    return None\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string that represents the answer.\"\"\"\n    num_cases = int(stdin)\n    # Our loop will run for num_cases times.\n    for _ in range(num_cases):\n        # This is the number of elements in an array.\n        n = int(stdin)\n        # These are the numbers themselves.\n        numbers = list(map(int, stdin.split()))\n        # Sort the numbers.\n        numbers.sort()\n        # Since the length of the array is even, we can take the middle 2 elements.\n        median_indices = [int(n / 2) - 1, int(n / 2)]\n        # This is the median of the array.\n        medians = [numbers[median_index] for median_index in median_indices]\n        # The answer to this problem is the median of medians.\n        print(medians[0])\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the median of an even-length sequence.\"\"\"\n    return"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the median of a given list of numbers.\n\n    Args:\n        stdin (str): Input string to process.\n\n    Returns:\n        str: String output\n    \"\"\"\n    nums = [int(i) for i in stdin.split()]\n    medians = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            j = i + 1\n            median = sorted(nums[:i] + nums[j:])[len(nums)//2]\n            medians.append(median)\n        else:\n            j = i - 1\n            median = sorted(nums[:i] + nums[j:])[len(nums)//2]\n            medians.append(median)\n    return \"\\n\".join([str(i) for i in medians])\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input())\n    '1\\n2\\n3\\n4'\n    \"\"\"\n\n    N, *numbers = map(int, stdin.split())\n\n    numbers.sort(reverse=True)\n    n = len(numbers)\n\n    if N % 2 == 0:\n        print((numbers[(N // 2) - 1] + numbers[N // 2]) // 2)\n        print((numbers[(N // 2) - 1] + numbers[N // 2]) // 2)\n    else:\n        print(numbers[N // 2])\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    numbers = list(map(int, lines[1].split()))\n    result = [None] * n\n    for i in range(n):\n        lower = 0\n        higher = n-1\n        lower_median = int(numbers[lower])\n        higher_median = int(numbers[higher])\n        while(lower <= higher):\n            lower_median = int(numbers[lower])\n            higher_median = int(numbers[higher])\n            if(lower_median <= higher_median):\n                if(i % 2!= 0):\n                    result[i] = lower_median\n                    lower += 1\n                else:\n                    if(numbers.index(lower_median) < numbers.index(higher_median)):\n                        result[i] = lower_median\n                        lower += 1\n                    else:\n                        result[i] = higher_median\n                        higher -= 1\n            else:\n                if(i % 2!= 0):\n                    result[i] = higher_median\n                    higher -= 1\n                else:\n                    if(numbers.index(lower_median) < numbers.index(higher_median)):\n                        result[i] = higher_median\n                        higher -= 1\n                    else:\n                        result[i] = lower_median\n                        lower += 1\n    return '\\n'.join(list(map(str, result)))"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    n = int(stdin)\n\n    # get the numbers\n    numbers = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    # create a list to hold the medians\n    medians = []\n    # for each number, find the median and add it to the list\n    for i in range(n):\n        # get the number\n        number = numbers[i]\n\n        # sort the numbers\n        sorted_numbers = sorted(numbers[:i] + numbers[i+1:])\n\n        # calculate the median\n        median = calculate_median(sorted_numbers)\n\n        # add the median to the list\n        medians.append(median)\n\n    # create a list to hold the results\n    results = []\n    # for each number, find the result\n    for i in range(n):\n        # get the number\n        number = numbers[i]\n\n        # add the result\n        results.append(medians[i] - number)\n\n    # return the results\n    return '\\n'.join(str(x) for x in results)\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 4 4 3\")\n    4\\n3\\n3\\n4\n    \"\"\"\n    N, *xs = map(int, stdin.split())\n    xs.sort()\n    half = N // 2\n    first = xs[half]\n    second = xs[half - 1]\n    for i in range(N):\n        if i % 2:\n            print(second)\n        else:\n            print(first)\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\".join(map(str, [median(stdin) for _ in range(int(stdin))]))\n"
    },
    {
        "number": 4573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 4 4 3\")\n    4\n    3\n    3\n    4\n    \"\"\"\n    # inputs should be from stdin\n    n = int(stdin)\n\n    # from stdin we read the input\n    # if we don't split it on lines, we'll have to change it later\n    nums = [int(num) for num in stdin.split()]\n\n    # the code does not support odd numbers\n    assert len(nums) % 2 == 0\n\n    # we need to keep track of how many elements are in the list\n    # it will be useful later in the code\n    length = len(nums)\n\n    # we need to build up the final answer\n    # it will be a list of lists\n    answer = []\n\n    # we need to build up the median list\n    # it will be a list of tuples\n    # the tuples will be (value, index)\n    # where the index is the index of the value in the list\n    # and the value is the value itself\n    median_list = []\n\n    # we need to build up the sorted list\n    # we need to keep track of the index and value\n    # the list has to be a list of tuples\n    # the tuples have to be (value, index)\n    # where the index is the index of the value in the list\n    # and the value is the value itself\n    # the values of the list must be sorted in ascending order\n    sorted_list = []\n\n    # we need to build up the answer list\n    # we'll use this list to store the values of the list\n    # we'll build up the list using a new list each time\n    # but the values we add to the new list will be the old answer\n    # and then we'll overwrite the old answer with the new answer\n    answer = []\n\n    # we need to build up the median_list\n    # we'll use this list to store the values of the list\n    # but the values we add to the list will be the old median_list\n    # and then we'll overwrite the old median_list with the new median_list\n    median_list = []\n\n    # we need to build up the sorted_list\n    # we'll use this list to store the values of the list\n    # but the values we add to the list will be the old sorted_list\n    # and then we'll overwrite the old sorted_list with the new sorted_list\n    sorted_list = []\n\n    # for each number, we need to do the following\n    for num in nums:\n        # the index of the number is the index of the list\n        # we'll use this to store the index\n        num_index = nums.index(num)\n\n        # the value of the number is the number itself\n        num_value = num\n\n        # if the number is a median, we'll need to store it\n        # it will be a tuple (value, index)\n        if num_index % 2 == 0:\n            median_list.append((num, num_index))\n        else:\n            # the index of the median is the index of the list\n            # we'll use this to store the index\n            median_index = num_index\n\n        # we need to store the number in the answer\n        # this will store a list of lists\n        # the list will be the old answer\n        # and the value we add will be the old value\n        answer.append(num)\n\n        # we need to store the number in the median_list\n        # this will store a list of tuples\n        # the list will be the old median_list\n        # and the value we add will be the old value\n        median_list.append((num, num_index))\n\n        # we need to store the number in the sorted_list\n        # this will store a list of tuples\n        # the list will be the old sorted_list\n        # and the value we add will be the old value\n        sorted_list.append((num, num_index))\n\n        # we need to sort the list\n        # we'll use merge sort\n        # since the list contains tuples\n        # the key of the sort will be the value of the tuple\n        sorted_list = merge_sort(sorted_list)\n\n        # we need to get the median of the list\n        # we'll use the median function\n        median = median_of_list(sorted_list)\n\n        # we need to store the median in the median_list\n        # this will store a list of tuples\n        # the list will be the old median_list\n        # and the value we add will be the old value\n        median_list[median_index] = (median, median_index)\n\n        # we need to sort the list\n        # we'll use merge sort\n        # since the list contains tuples\n        # the key of the sort will be the value of the tuple\n        sorted_list = merge_sort(sorted_list)\n\n        # we need to get the median of the list\n        # we'll use the median function\n        median = median_of_list(sorted_list)\n\n        # we need to store the median in the median_list\n        # this will store a list of tuples\n        # the list will be the old median_list\n        # and the value we add will be the old value\n        median_list[median_index] = (median, median_index)\n\n        # we need to get the list of values of the answer\n        # we'll use the list function\n        answer = list(answer)\n\n        # we need to sort the list\n        # we'll use merge sort\n        # since the list contains the values of the list\n        # the key of the sort will be the value of the value\n        sorted_list = merge_sort(answer)\n\n        # we need to get the median of the list\n        # we'll use the median function\n        median = median_of_list(sorted_list)\n\n        # we need to store the median in the median_list\n        # this will store a list of tuples\n        # the list will be the old median_list\n        # and the value we add will be the old value\n        median_list[median_index] = (median, median_index)\n\n        # we need to sort the list\n        # we'll use merge sort\n        # since the list contains the values of the list\n        # the key of the sort will be the value of the value\n        sorted_list = merge_sort(answer)\n\n        # we need to get the median of the list\n        # we'll use the median function\n        median = median_of_list(sorted_list)\n\n        # we need to store the median in the median_list\n        # this will store a list of tuples\n        # the list will be the old median_list\n        # and the value we add will be the old value\n        median_list[median_index] = (median, median_index)\n\n        # we need to sort the list\n        # we'll use merge"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution for leetcode problem #9\"\"\"\n    return str(solve(stdin))\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                for l in range(k+1, N):\n                    if sticks[i]*sticks[j]*sticks[k]*sticks[l] > ans:\n                        ans = sticks[i]*sticks[j]*sticks[k]*sticks[l]\n    return str(ans)\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(max(0, max(a for a in map(int, stdin.split()) if a) ** 2))\n"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n\n    s = set(arr)\n    if len(s) < 4:\n        return 0\n    return max(arr) * max(arr)"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible area of a rectangle\n    using the sticks given.\n\n    Args:\n        stdin (str): The input string\n\n    Returns:\n        str: The maximum possible area of a rectangle\n    \"\"\"\n    return max_area_of_rectangle(list(map(int, stdin.split(\"\\n\")[0].split())))\n\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    return max_rectangle(lst)\n\ndef"
    },
    {
        "number": 4574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, days, remaining = stdin.split()\n    n, days, remaining = int(n), int(days), int(remaining)\n    prepared = 0\n    for _ in range(n):\n        prepared += (n-_) * (remaining // (days-_))\n        prepared += min(remaining % (days-_), _+1)\n    return prepared\n\"\"\"\n\nimport sys\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_participants = int(stdin[0])\n    num_days = int(stdin[1])\n    num_pieces = int(stdin[2])\n    num_pieces_day = 0\n    pieces = 0\n    for i in range(num_days):\n        if (i % 2) == 0:\n            num_pieces_day += int(stdin[3 + i])\n            pieces += int(stdin[3 + i])\n    if num_days % 2 == 0:\n        num_pieces_day = num_pieces_day + pieces\n    num_pieces_days = num_days - num_days // 2\n    print(num_pieces_days, pieces, num_pieces_days * pieces, sep=' ')\n    return stdin[0]"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(stdin.split('\\n')[i].split(' ')[0]) for i in range(len(stdin.split('\\n')))))"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the number of chocolate pieces prepared at the beginning of the camp.\n    \"\"\"\n    N, D, X = map(int, stdin.split())\n    A = [int(x) for x in stdin.split('\\n')[:-1]]\n    return sum([(i + 1) * A[i] for i in range(N)]) + X - sum(A)"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(count, days):\n        return count + (days - 1) * count * 2\n\n    inputs = stdin.split('\\n')\n    N, D, X = [int(x) for x in inputs[0].split()]\n    if N == 1:\n        return str(solve(X, D))\n    chocs = [int(inputs[i]) for i in range(1, N + 1)]\n    chocs.sort()\n    chocs = [sum(chocs[:i]) for i in range(N + 1)]\n    day = 1\n    while day < D:\n        chocs = [chocs[i] + chocs[i + 1] for i in range(len(chocs) - 1)] + [X]\n        chocs.sort()\n        day += 1\n    return str(solve(chocs[0], D))\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    A = [int(x) for x in stdin.split('\\n')[1:]]\n    count = 0\n    for i in range(len(A)):\n        count += A[i]\n        if i % (D + 1) == 0:\n            if (count + A[i]) > X:\n                return str(count)\n            count = 0\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # take input from stdin\n    # take the input from stdin and\n    # split it line by line\n    # then convert it into list\n    #print(stdin)\n    n,d,x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    if x > n:\n        return 0\n    elif x == n:\n        return sum(a)\n    else:\n        a.sort()\n        b[0] = a[0]\n        b[1] = a[1] + a[0]\n        b[2] = a[2] + a[1] + a[0]\n        b[3] = a[3] + a[2] + a[1] + a[0]\n        for i in range(4,n):\n            b[i] = a[i] + b[i-1]\n        print(b)\n        return b[n-1] + x\n\nprint(solution(input()))\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D, X = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    chocolates = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    return str(sum(chocolates[i] for i in range(N, N-D, -1)))\n"
    },
    {
        "number": 4575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = map(int, stdin.split())\n    A = [0] * n\n    for i in range(n):\n        A[i] = int(stdin.split()[i])\n    return str(sum([(i + 1) * A[i] for i in range(n)]))\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = map(int, stdin.split())\n    if X == 0:\n        return 0\n    elif X == A + B + C:\n        return 1\n    else:\n        result = 0\n        for a in range(A + 1):\n            for b in range(B + 1):\n                for c in range(C + 1):\n                    if X == a * 500 + b * 100 + c * 50:\n                        result += 1\n        return result\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, x = stdin.split('\\n')\n    a, b, x = int(a), int(b), int(x)\n\n    def f(n: int, k: int) -> int:\n        if n == 0:\n            return 0\n        if n == 1:\n            return k\n        if n == 2:\n            return k * k\n        return k * f(n - 1, k) + k * f(n - 2, k)\n\n    k = 0\n    for i in range(x // 50, min(x // 2 + 1, a + b + 1)):\n        k = max(k, f(a, i) + f(b, x - i * 50))\n    return str(k)\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"Number of ways to select coins.\""
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x = map(int, stdin.split())\n    cnt = 0\n    # for i in range(a):\n    #     for j in range(b):\n    #         for k in range(c):\n    #             if x == a * 500 + b * 100 + c * 50:\n    #                 cnt += 1\n    #\n    # print(cnt)\n    #\n    # for i in range(a):\n    #     for j in range(b):\n    #         for k in range(c):\n    #             if x == a * 500 + b * 100 + c * 50:\n    #                 cnt += 1\n\n    x_500 = x // 500\n    x_100 = (x - 500 * x_500) // 100\n    x_50 = (x - 500 * x_500 - 100 * x_100) // 50\n\n    cnt += x_500 * a * b * c\n    cnt += x_100 * a * c\n    cnt += x_50 * b * c\n\n    print(cnt)\n\n    # A = 0\n    # B = 0\n    # C = 0\n    # for i in range(a):\n    #     A += 1\n    #     B += 1\n    #     C += 1\n    #     x -= 500\n    #     if x < 0:\n    #         break\n    #\n    #     for j in range(b):\n    #         B += 1\n    #         C += 1\n    #         x -= 100\n    #         if x < 0:\n    #             break\n    #\n    #         for k in range(c):\n    #             C += 1\n    #             x -= 50\n    #             if x < 0:\n    #                 break\n    #\n    #             if x == 0:\n    #                 cnt += 1\n    #\n    # print(cnt)"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    c = int(stdin.readline())\n    x = int(stdin.readline())\n    if a > c:\n        a, c = c, a\n    total = a + b + c\n    if total == 1:\n        return str(0)\n    if total == 2:\n        if a == 2 and b == 1 or a == 1 and c == 2:\n            return str(1)\n        else:\n            return str(0)\n    if total == 3:\n        if a == 2 and b == 1:\n            return str(1)\n        elif a == 1 and b == 1:\n            return str(1)\n        elif a == 1 and c == 2:\n            return str(1)\n        elif a == 2 and c == 1:\n            return str(1)\n        elif c == 2 and b == 1:\n            return str(1)\n        elif c == 1 and a == 2:\n            return str(1)\n        elif c == 1 and b == 1:\n            return str(1)\n        elif c == 1 and a == 1:\n            return str(1)\n        else:\n            return str(0)\n    if total == 4:\n        if a == 1 and b == 2:\n            return str(1)\n        elif a == 2 and b == 1:\n            return str(1)\n        elif a == 1 and c == 2:\n            return str(1)\n        elif a == 2 and c == 1:\n            return str(1)\n        elif c == 2 and b == 1:\n            return str(1)\n        elif c == 1 and a == 2:\n            return str(1)\n        elif c == 1 and a == 1:\n            return str(1)\n        else:\n            return str(0)\n    if total == 5:\n        if a == 1 and b == 2 and c == 1:\n            return str(1)\n        elif a == 1 and b == 1 and c == 2:\n            return str(1)\n        elif a == 2 and b == 1 and c == 1:\n            return str(1)\n        elif a == 1 and b == 2 and c == 2:\n            return str(1)\n        elif a == 1 and b == 1 and c == 2:\n            return str(1)\n        elif a == 2 and b == 1 and c == 1:\n            return str(1)\n        elif a == 2 and b == 2 and c == 1:\n            return str(1)\n        elif a == 2 and b == 2 and c == 2:\n            return str(1)\n        elif a == 1 and b == 2 and c == 3:\n            return str(1)\n        elif a == 1 and b == 3 and c == 2:\n            return str(1)\n        elif a == 2 and b == 3 and c == 1:\n            return str(1)\n        elif a == 2 and b == 3 and c == 2:\n            return str(1)\n        elif a == 2 and b == 2 and c == 3:\n            return str(1)\n        else:\n            return str(0)\n    if total == 6:\n        if a == 1 and b == 2 and c == 2:\n            return str(1)\n        elif a == 1 and b == 2 and c == 3:\n            return str(1)\n        elif a == 1 and b == 3 and c == 2:\n            return str(1)\n        elif a == 1 and b == 3 and c == 3:\n            return str(1)\n        elif a == 2 and b == 1 and c == 2:\n            return str(1)\n        elif a == 2 and b == 1 and c == 3:\n            return str(1)\n        elif a == 2 and b == 3 and c == 1:\n            return str(1)\n        elif a == 2 and b == 3 and c == 2:\n            return str(1)\n        elif a == 2 and b == 2 and c == 3:\n            return str(1)\n        elif a == 1 and b == 2 and c == 4:\n            return str(1)\n        elif a == 1 and b == 4 and c == 2:\n            return str(1)\n        elif a == 2 and b == 1 and c == 4:\n            return str(1)\n        elif a == 2 and b == 1 and c == 3:\n            return str(1)\n        elif a == 2 and b == 3 and c == 4:\n            return str(1)\n        elif a == 2 and b == 3 and c == 3:\n            return str(1)\n        elif a == 1 and b == 3 and c == 4:\n            return str(1)\n        elif a == 1 and b == 4 and c == 3:\n            return str(1)\n        elif a == 2 and b == 2 and c == 4:\n            return str(1)\n        elif a == 2 and b == 2 and c == 3:\n            return str(1)\n        elif a == 1 and b == 2 and c == 5:\n            return str(1)\n        elif a == 1 and b == 5 and c == 2:\n            return str(1)\n        elif a == 2 and b == 1 and c == 5:\n            return str(1)\n        elif a == 2 and b == 1 and c == 4:\n            return str(1)\n        elif a == 2 and b == 4 and c == 1:\n            return str(1)\n        elif a == 2 and b == 4 and c == 5:\n            return str(1)\n        elif a == 2 and b == 5 and c == 1:\n            return str(1)\n        elif a == 2 and b == 5 and c == 2:\n            return str(1)\n        elif a == 1 and b == 3 and c == 5:\n            return str(1)\n        elif a == 1 and b == 5 and c == 3:\n            return str(1)\n        elif a == 2 and b == 3 and c == 5:\n            return str(1)\n        elif a == 2 and b == 3 and c == 4:\n            return str(1)\n        elif a == 2 and b == 4 and c == 3:\n            return str(1)\n        elif a == 2 and b == 4 and c == 5:\n            return str(1)\n        elif a == 2 and b == 5 and c == 3:\n            return str(1)\n        elif a == 2 and b == 5 and c == 4:\n            return str(1)\n        elif a == 1 and b == 4 and c == 5:\n            return str(1)\n        elif a == 1 and b == 5 and c == 4:\n            return str(1)\n        elif a == 2 and b == 4 and c == 5:\n            return str(1)\n        elif a == 2 and b == 4 and c == 5:\n            return str(1)\n        elif a == 1 and b == 4 and c == 6:\n            return str(1)\n        elif a == 1 and b == 6 and c == 4:\n            return str(1)\n        elif a == 2 and b == 4 and c == 6:\n            return str(1)\n        elif a == 2 and b == 4 and c == 5:\n            return str(1)\n        el"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, C, X) = [int(x) for x in stdin.split()]\n    (A, B, C) = sorted([A, B, C])\n    count = 0\n    if A >= X // 50:\n        count += A - (X // 50)\n        A = X // 50\n    if B >= X // 50:\n        count += B - (X // 50)\n        B = X // 50\n    if A >= X // 100:\n        count += A - (X // 100)\n        A = X // 100\n    if B >= X // 100:\n        count += B - (X // 100)\n        B = X // 100\n    if C >= X // 100:\n        count += C - (X // 100)\n        C = X // 100\n    if A >= X // 500:\n        count += A - (X // 500)\n        A = X // 500\n    if B >= X // 500:\n        count += B - (X // 500)\n        B = X // 500\n    if C >= X // 500:\n        count += C - (X // 500)\n        C = X // 500\n    if A + B + C == X:\n        count += 1\n    if A + B == X:\n        count += 1\n    if A + C == X:\n        count += 1\n    if B + C == X:\n        count += 1\n    if A == B == C:\n        count += 1\n    print(count)\n    return count\n\n\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('1 1 1 100')\nsolution('1 1 1 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('2 2 2 100')\nsolution('"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def num_combinations(A: int, B: int, C: int, X: int):\n        if A < 0 or B < 0 or C < 0 or X < 0:\n            return 0\n        if A + B + C == 0:\n            return 0\n        if X == 0:\n            return 1\n        # We calculate the number of ways to make X using each type of coin, depending on the type of coin being used.\n        # The number of ways to make X using each type of coin, depending on the type of coin being used, is the sum of all the other numbers of ways to make X using each type of coin, depending on the type of coin being used.\n        return num_combinations(A - 1, B, C, X) + num_combinations(A, B - 1, C, X) + num_combinations(A, B, C - 1, X)\n    \n    a, b, c, x = map(int, stdin.split())\n    return str(num_combinations(a, b, c, x))\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import List, Tuple\nimport collections\n\n\nclass CoinCounter:\n    \"\"\"CoinCounter\n\n    Attributes\n    ----------\n    count_A: int\n        number of coins of type A\n    count_B: int\n        number of coins of type B\n    count_C: int\n        number of coins of type C\n    x: int\n        desired value\n\n    Methods\n    -------\n    __init__(A: int, B: int, C: int, X: int)\n        Constructor\n    calculate(self) -> int\n        calculate the number of ways to select coins\n    \"\"\"\n\n    def __init__(self, A: int, B: int, C: int, X: int):\n        \"\"\"Constructor\n\n        Parameters\n        ----------\n        A: int\n            number of coins of type A\n        B: int\n            number of coins of type B\n        C: int\n            number of coins of type C\n        X: int\n            desired value\n\n        Returns\n        -------\n        None\n        \"\"\"\n        self.count_A: int = A\n        self.count_B: int = B\n        self.count_C: int = C\n        self.x: int = X\n\n    def calculate(self) -> int:\n        \"\"\"calculate the number of ways to select coins\n\n        Parameters\n        ----------\n        self: CoinCounter\n            the instance of CoinCounter\n\n        Returns\n        -------\n        int\n            the number of ways to select coins\n        \"\"\"\n\n        # 1. The first step is to compute the number of coins that fit into the desired value.\n\n        # This is the sum of the number of A, B and C coins that can be selected to sum up to X.\n        # If X = 1, then there is only one way to select coins for one 100-yen coin.\n        # If X = 5, then there are three ways to select coins for five 50-yen coins.\n        # If X = 10, then there are eight ways to select coins for ten 10-yen coins.\n        # If X = 19, then there are 38 ways to select coins for nineteen 10-yen coins.\n        # If X = 20, then there are 46 ways to select coins for twenty 10-yen coins.\n        # If X = 40, then there are 704 ways to select coins for forty 10-yen coins.\n        # If X = 99, then there are 3096 ways to select coins for ninety nine 10-yen coins.\n        # These numbers are so large, that it can not be computed manually.\n        # Instead, it can be computed by finding the closed form:\n        # x! / (A! * B! * C!)\n        # where x is the desired value and A, B and C are the number of A, B and C coins.\n\n        # 2. Next, we have to count the number of ways to select coins so that they are exactly X.\n        # If X = 1, then there is only one way to select a single 100-yen coin.\n        # If X = 5, then there are three ways to select five 50-yen coins.\n        # If X = 10, then there are eight ways to select ten 10-yen coins.\n        # If X = 19, then there are 38 ways to select nineteen 10-yen coins.\n        # If X = 20, then there are 46 ways to select twenty 10-yen coins.\n        # If X = 40, then there are 704 ways to select forty 10-yen coins.\n        # If X = 99, then there are 3096 ways to select ninety nine 10-yen coins.\n\n        # 3. Last step, we need to divide the total number of ways to select coins by the number of ways to select coins of type A.\n\n        # This is done by finding the product of the number of ways to select coins of type A, B and C.\n        # If X = 1, then all three types of coins are used.\n        # If X = 5, then three types of coins are used, but there are five ways to select five 50-yen coins.\n        # If X = 10, then three types of coins are used, but there are eight ways to select ten 10-yen coins.\n        # If X = 19, then three types of coins are used, but there are 38 ways to select nineteen 10-yen coins.\n        # If X = 20, then three types of coins are used, but there are 46 ways to select twenty 10-yen coins.\n        # If X = 40, then three types of coins are used, but there are 704 ways to select forty 10-yen coins.\n        # If X = 99, then three types of coins are used, but there are 3096 ways to select ninety nine 10-yen coins.\n\n        # 4. Finally, to the total number of ways to select coins divide by the number of ways to select coins of type A.\n        # This is done by finding the product of the number of ways to select coins of type A, B and C.\n        # If X = 1, then all three types of coins are used.\n        # If X = 5, then three types of coins are used, but there are five ways to select five 50-yen coins.\n        # If X = 10, then three types of coins are used, but there are eight ways to select ten 10-yen coins.\n        # If X = 19, then three types of coins are used, but there are 38 ways to select nineteen 10-yen coins.\n        # If X = 20, then three types of coins are used, but there are 46 ways to select twenty 10-yen coins.\n        # If X = 40, then three types of coins are used, but there are 704 ways to select forty 10-yen coins.\n        # If X = 99, then three types of coins are used, but there are 3096 ways to select ninety nine 10-yen coins.\n\n        # 5. The result is then the number of ways to select coins of type A.\n\n        total_count: int = self.count_A + self.count_B + self.count_C\n        prod_count: int = self.count_A * self.count_B * self.count_C\n        return total_count // prod_count\n"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X = [int(n) for n in stdin.split()]\n    ways = 0\n    for a in range(A + 1):\n        for b in range(B + 1):\n            for c in range(C + 1):\n                if X == a * 500 + b * 100 + c * 50:\n                    ways += 1\n    print(ways)\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    return \"Yes\" if c >= a and c <= b else \"No\"\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(n) for n in stdin.split(' ')]\n    return 'Yes' if (C >= A or C <= B) else 'No'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return 'Yes' if a < c < b else 'No'\n"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    return 'Yes' if c < a and c < b else 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if a < c < b:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split(\" \")\n    if input_str[2]>=int(input_str[0]) and input_str[2]<=int(input_str[1]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    if not (C < A and C > B):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'Yes' if c >= a and c <= b else 'No'"
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split()]\n    return \"Yes\" if c >= a and c <= b else \"No\""
    },
    {
        "number": 4577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if a < c < b else \"No\""
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    def fun(stdin: str) -> int:\n        s = stdin.split()\n        return int(s[0]) * int(s[1])\n\n    return str(fun(stdin))"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # x = int(input())\n    # m = list(map(int, stdin.strip().split()))\n    # m.sort()\n    # print(m)\n    # print(m[0], m[-1])\n    # print(int(m[0] + m[-1]))\n    # print(int(m[0] * m[-1] / m[0]))\n    # m.append(m[-1] + m[0])\n    # print(m)\n    # print(int(m[0] + m[-1]))\n    # print(m[0] * m[-1] / m[0] if m[0] * m[-1] % m[0] == 0 else int(m[0] * m[-1] / m[0]) + 1)\n    # for i in range(len(m) - 1):\n    #     if m[i] + m[i+1] <= x:\n    #         print(m[i] + m[i+1])\n    #         x -= m[i] + m[i+1]\n    #     else:\n    #         print(x)\n    #         print(int(m[i] * m[i+1] / m[i]))\n    #         break\n    #     print(x)\n    # print(int(m[0] * m[-1] / m[0]))\n    # print(int(m[0] * m[-1] / m[0]) + 1)\n    print(int((x-m[0])*(x-m[-1])/(m[0]-m[-1]) + 1))\n    return ''"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numOfPizza, numOfMoto = map(int, stdin.split('\\n')[:2])\n    print(numOfPizza)\n    print(numOfMoto)"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input and convert to integers\n    n, x = map(int, stdin.split(' '))\n    m = [int(stdin) for stdin in stdin.split('\\n')][1:]\n\n    # check if n is between 2 and 100\n    if n < 2 or n > 100:\n        return 'Invalid Input'\n\n    # check if m is within range of 1 and 1000\n    if any(map(lambda x: x < 1 or x > 1000, m)):\n        return 'Invalid Input'\n\n    # check if the sum of m is less than or equal to X\n    if sum(m) > x:\n        return 'Invalid Input'\n\n    # create a dictionary of the format {'m': [index, value]}\n    m_dict = {'m': [i for i in range(len(m))]}\n\n    # zip m and m_dict to get the format {'m': [index, value],...}\n    zip_m = zip(m_dict['m'], m)\n\n    # update the value in the dictionary with the sum of m\n    m_dict.update({'m': list(zip_m)})\n\n    # sort the values in m_dict according to m_dict['m']\n    m_dict = dict(sorted(m_dict.items(), key=lambda x: x[1][0]))\n\n    # assign a list of the indexes of m_dict['m'] to'm_sorted'\n    m_sorted = list(m_dict.keys())\n\n    # if there are only two values in m_dict\n    if len(m_sorted) == 1:\n        return m_sorted[0]\n\n    # if there are three or more values in m_dict\n    else:\n        # initialize a list to store all possible solutions\n        sols = []\n\n        # initialize a list to store the number of doughnuts that can be made with the first value in m_sorted\n        n_sols = []\n\n        # loop through every value in m_sorted\n        for i in range(len(m_sorted)):\n            # initialize the number of doughnuts that can be made with the current value\n            n_sols.append(0)\n\n            # loop through every value in m_sorted[i:]\n            for j in range(i, len(m_sorted)):\n                # get the sum of m_sorted[i:]\n                m_sum = sum(m_dict[m_sorted[j]][1][1:])\n                # check if the sum is less than or equal to x\n                if m_sum <= x:\n                    # update the number of doughnuts that can be made with the current value\n                    n_sols[i] += 1\n\n            # append the number of doughnuts that can be made with the current value to sols\n            sols.append(sum(n_sols))\n\n        # return the index of the maximum value in sols\n        return m_sorted[sols.index(max(sols))]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    N, X = map(int, stdin.split(' '))\n    count = Counter()\n    for _ in range(N):\n        count += Counter(map(int, stdin.split(' ')))\n    result = 0\n    for i, count_ in count.items():\n        if count_ % N == 0:\n            result += count_ // N\n        else:\n            result += count_ // N + 1\n    return str(result)"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, X = stdin.split(' ')\n    X = int(X)\n    all_m = 0\n    all_doughnuts = 0\n    doughnuts = set()\n    for _ in range(int(stdin)):\n        m = int(stdin)\n        all_m += m\n        all_doughnuts += 1\n        doughnuts.add(all_doughnuts)\n    return str(len(doughnuts))"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # N is the total number of doughnut types\n    # X is the total number of grams of Moto that will be used\n    # s is a list of all possible values of m for each doughnut\n    N, X, s = stdin.split('\\n')\n    N = int(N)\n    X = int(X)\n    s = list(map(int, s.split('\\n')[:-1]))\n    max_num_doughnuts = 0\n    num_doughnuts = 1\n    m_list = []\n    for m in s:\n        m_list.append(m)\n\n    # figure out how many doughnuts of each type can be made\n    while True:\n        if X >= m_list[num_doughnuts - 1]:\n            X -= m_list[num_doughnuts - 1]\n            max_num_doughnuts += 1\n        else:\n            break\n        num_doughnuts += 1\n\n    return max_num_doughnuts"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.readline().split())\n    total = 0\n    for i in range(N):\n        total += int(stdin.readline())\n    if total > X:\n        return str(total // X) +'' + str(total % X)\n    else:\n        return '0 0'\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split(' '))\n    m = [int(i) for i in stdin.split(' ')[1:]]\n    b = 0\n    for i in range(N):\n        b += m[i]\n    c = X - b\n    i = 0\n    r = 0\n    while c > 0:\n        if r < N:\n            r += 1\n            c -= m[i]\n            i += 1\n        else:\n            r += 1\n            c -= m[i]\n            i += 1\n    return r\n\n\"\"\"\n\nN, X = map(int, input().split(' '))\nm = [int(i) for i in input().split(' ')]\nr = 0\ni = 0\nwhile X > 0:\n    X -= m[i]\n    i += 1\n    if i == N:\n        r += 1\n        X -= m[i]\n        i += 1\n    else:\n        r += 1\nprint(r)\n"
    },
    {
        "number": 4578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, x = list(map(int, stdin.split()))\n    m = list(map(int, stdin.split()))\n    m.sort()\n    m.reverse()\n    m = m[:n]\n    if sum(m) > x:\n        return str(sum(m[:len(m) - 1]))\n    else:\n        return str(len(m))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    S = [stdin.readline().rstrip() for _ in range(n)]\n    return str(len(set(S)))\n    \"\"\"\n    return sum(\n        [len(set(s.split())) for s in stdin.readlines()]\n    )\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    #  --------- SOLUTION ----------\n    # n = int(stdin)\n    # S = [stdin]\n    # a, b, c = S.count('apple'), S.count('orange'), S.count('banana')\n    # print('You got {} kinds of items: apple, orange, and banana'.format(a + b + c))\n    # -----------------------------------\n    return 'You got {} kinds of items: apple, orange, and banana'.format(a + b + c)"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in a string and returns an integer\"\"\"\n    return len(stdin.split('\\n'))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n\ndef"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of different items that are possible to draw.\n    >>> solution(\"3\\napple\\norange\")\n    2\n    >>> solution(\"2\\napple\")\n    1\n    >>> solution(\"1\\napple\")\n    1\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'APPLE'"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while stdin:\n        if stdin[0]!= stdin[1]:\n            count += 1\n        stdin = stdin[2:]\n    return count"
    },
    {
        "number": 4579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n    picks: list[str] = []\n    count: int = 0\n    for i in range(n):\n        pick: str = stdin.readline()\n        picks.append(pick)\n    for pick in picks:\n        if picks.count(pick) > count:\n            count = picks.count(pick)\n    return count\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    num, _, *ratings = stdin.split('\\n')\n    ratings = list(map(int, ratings))\n    # sort in reverse order\n    ratings.sort(reverse=True)\n    # initialize\n    max_rating = ratings[0]\n    min_rating = ratings[-1]\n    max_num = 1\n    min_num = 1\n    # the outer loop is the minimum number\n    for i in range(len(ratings)-1):\n        # if i is the first one to update\n        if ratings[i] == ratings[i+1]:\n            # then set the min number as 1\n            min_num += 1\n            max_num = 1\n        # if the current rating is not the same as the next one\n        elif ratings[i]!= ratings[i+1]:\n            # then the next one must be higher than the current one\n            # therefore the current minimum number is 1 plus the number of ratings that are greater than the current rating\n            min_num = min_num + sum(1 for rating in ratings[i:] if rating > ratings[i])\n            max_num = sum(1 for rating in ratings[i:] if rating == ratings[i])\n            break\n    return min_num, max_num\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    A = [0] + A\n    B = [0] * (len(A))\n    for i, a in enumerate(A):\n        if a >= 3500:\n            B[i] = \"green\"\n        elif a >= 2600:\n            B[i] = \"blue\"\n        elif a >= 2200:\n            B[i] = \"cyan\"\n        elif a >= 1800:\n            B[i] = \"yellow\"\n        elif a >= 1400:\n            B[i] = \"orange\"\n        elif a >= 1200:\n            B[i] = \"red\"\n        elif a >= 1000:\n            B[i] = \"brown\"\n        else:\n            B[i] = \"gray\"\n    return \" \".join(map(lambda x: B[x], [x for x in range(1, N + 1)]))\n\ndef"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    # print(stdin)\n    n = int(stdin[0])\n    # print(n)\n    # print(stdin)\n    colors = []\n    for i in range(1, n+1):\n        colors.append(int(stdin[i]))\n    # print(colors)\n\n    # colors = sorted(colors)\n    # print(colors)\n    colors.sort()\n    # print(colors)\n    num_color = 0\n    # print(colors)\n    for i in range(0, len(colors) - 1):\n        if colors[i] == colors[i+1]:\n            num_color += 1\n    print(num_color + 1)\n    print(colors[len(colors)-1] + 1)\n    return\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return f'{min(n//4000, 7)}\\n{max(n//4000, 7)}'"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.readline())\n  ratings = [int(x) for x in stdin.readline().split()]\n  ratings.sort()\n  min_rating = ratings[0]\n  max_rating = ratings[-1]\n  return str(max(0, max_rating - min_rating - (N-1))) + \" \" + str(max(0, N - min_rating))\n\n\"\"\"\n\n\"\"\"\nsolution 1\n\ndef"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a: List[str] = stdin.splitlines()\n    n = int(a[0])\n    a.pop(0)\n    \n    lst: List[int] = []\n    for i in a:\n        lst.append(int(i))\n\n    # print(lst)\n    if n == 1:\n        print(\"1 1\")\n    elif n == 2:\n        print(\"2 2\")\n    else:\n        min_num = 1\n        max_num = 1\n        for i in range(n):\n            if lst[i] < 3200:\n                lst[i] = 1\n            elif lst[i] >= 3200:\n                lst[i] = 0\n            min_num = min(min_num, lst[i])\n            max_num = max(max_num, lst[i])\n        # print(lst)\n        for i in range(n):\n            if lst[i] == 0:\n                lst[i] = 1\n            elif lst[i] == 1:\n                lst[i] = 2\n            elif lst[i] == 2:\n                lst[i] = 3\n            elif lst[i] == 3:\n                lst[i] = 4\n            elif lst[i] == 4:\n                lst[i] = 5\n            elif lst[i] == 5:\n                lst[i] = 6\n            elif lst[i] == 6:\n                lst[i] = 7\n            elif lst[i] == 7:\n                lst[i] = 8\n        \n        # print(lst)\n        for i in range(n):\n            if lst[i] == 0:\n                lst[i] = 0\n            elif lst[i] == 1:\n                lst[i] = 0\n            elif lst[i] == 2:\n                lst[i] = 0\n            elif lst[i] == 3:\n                lst[i] = 0\n            elif lst[i] == 4:\n                lst[i] = 0\n            elif lst[i] == 5:\n                lst[i] = 0\n            elif lst[i] == 6:\n                lst[i] = 0\n            elif lst[i] == 7:\n                lst[i] = 0\n            elif lst[i] == 8:\n                lst[i] = 0\n        \n        # print(lst)\n        print(str(min(lst)) + \" \" + str(max(lst)))"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nnum_of_participants = int(stdin.readline())\nparticipant_ratings = [int(x) for x in stdin.readline().split(\" \")]\n\nparticipant_ratings.sort()\n\nmin_rating = participant_ratings[0]\nmax_rating = participant_ratings[num_of_participants - 1]"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    arr = [0]*400\n    for i in a:\n        arr[i//400] += 1\n    print(' '.join(map(str, (arr[1]//2, arr[2]//2+arr[1]//2))))\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    rating: list = list(map(int, stdin.split()))\n    count: int = 0\n\n    for i in range(0, len(rating)):\n        if rating[i] >= 2400:\n            count += 1\n    return \"{} {}\".format(count, count + 8)\n"
    },
    {
        "number": 4580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = A\n    B.sort()\n    for i in range(N):\n        if A[i] - B[i] == B[i+1] - A[i]:\n            pass\n        else:\n            print(B[i+1] - A[i], B[i] - A[i])\n            exit()\n    print(\"0\", \"0\")\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bEgg, gOnions, price = 'o', 'x', 700\n    prices = {\n        bEgg: 100,\n        gOnions: 100\n    }\n    return f'{price + sum([prices[topping] for topping in stdin])}'"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate({ord(\"o\"): None, ord(\"x\"): None}).split()[0]\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ramen_price = 700\n    boiled_egg_price = 100\n    topping_price = 100\n    topping_price_list = {\n        \"o\": boiled_egg_price,\n        \"x\": 0\n    }\n    topping_price_list[\"o\"] = topping_price_list[\"x\"] * 2\n    ramen_price += topping_price_list[stdin[0]] + topping_price_list[stdin[1]]\n    ramen_price += topping_price_list[stdin[2]]\n    return str(ramen_price)"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ramen = stdin\n    price = 0\n    if ramen[0] == 'o':\n        price += 700\n    if ramen[1] == 'o':\n        price += 100\n    if ramen[2] == 'o':\n        price += 200\n    return price\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    price = 700\n    for i, c in enumerate(s):\n        if c == \"o\":\n            price += 100\n        else:\n            price += 0\n    return str(price)\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    order = stdin[0]\n    topping = stdin[1]\n    price = 700\n    if order[0] == 'o':\n        price += 100\n    if order[1] == 'x':\n        price = price\n    if order[2] == 'o':\n        price += 100\n    if order[2] == 'x':\n        price = price\n    if topping == 'oo':\n        price += 100\n    if topping == 'xx':\n        price = price\n    return str(price)"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(700 + 100 * 2)"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def calculation(s: str) -> int:\n        if s[0] == 'o':\n            if s[1] == 'x':\n                return 700\n            else:\n                return 700 + 100\n        else:\n            return 700\n    return str(calculation(stdin))"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not sure if this is the right solution'\n"
    },
    {
        "number": 4581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    price = 700\n    for i in range(len(stdin)):\n        if stdin[i] == \"o\":\n            price += 100\n        elif stdin[i] == \"x\":\n            price += 0\n    print(price)\n    return ''"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    honest = stdin.split(' ')[0]\n    is_dishonest = True if honest == 'D' else False\n\n    dishonest = stdin.split(' ')[1]\n    is_dishonest = True if dishonest == 'D' else False\n\n    return 'H' if is_dishonest ^ is_dishonest else 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\n\ndef"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    if a == 'H' and b == 'H':\n        return 'H'\n    elif a == 'H' and b == 'D':\n        return 'D'\n    elif a == 'D' and b == 'H':\n        return 'D'\n    else:\n        return 'H'"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    if a == 'H' and b == 'H':\n        return 'H'\n    elif a == 'H' and b == 'D':\n        return 'D'\n    elif a == 'D' and b == 'H':\n        return 'H'\n    elif a == 'D' and b == 'D':\n        return 'D'\n    else:\n        return ''\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = a[0], b[0]\n    if (a == \"H\" and b == \"H\") or (a == \"D\" and b == \"D\"):\n        return \"H\"\n    else:\n        return \"D\""
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    if a == 'H' and b == 'H':\n        return 'H'\n    return 'D'"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"H H\")\n    'H'\n    >>> solution(\"H D\")\n    'D'\n    \"\"\"\n    a, b = stdin.split(\" \")\n    if a == \"H\":\n        return \"H\" if b == \"H\" else \"D\"\n    return \"D\" if b == \"H\" else \"H\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if (a == 'H' and b == 'H') or (a == 'D' and b == 'D'):\n        return 'H'\n    elif (a == 'H' and b == 'D') or (a == 'D' and b == 'H'):\n        return 'D'\n    else:\n        return None\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    if a == \"H\" and b == \"H\":\n        return \"H\"\n    return \"D\"\n"
    },
    {
        "number": 4582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    \n    return \"H\" if \"H\" in stdin else \"D\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ABCD: str = stdin\n    ABCD = ABCD.split('\\n')\n    ABCD.pop(0)\n    ABCD = list(map(int, ABCD))\n    # ABCD = [int(i) for i in ABCD]\n    ABCD = tuple(ABCD)\n\n    for i in range(0, len(ABCD)):\n        if ABCD[i] % 10 == 7:\n            ABCD = list(ABCD)\n            ABCD[i] = ABCD[i] - 7\n            ABCD = tuple(ABCD)\n            return str(ABCD[0]) + '+' + str(ABCD[1]) + '+' + str(ABCD[2]) + '+' + str(ABCD[3]) + '=' + str(7)"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin]\n    formula = '+'.join(map(str, [a, b, c, d]))\n    return f\"{formula}={7}\""
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    return '{}+{}+{}+{}={}'.format(\n        1 if a + b + c + d == 7 else -1,\n        1 if a + b + c - d == 7 else -1,\n        1 if a + b - c + d == 7 else -1,\n        1 if a + b - c - d == 7 else -1,\n        1 if a - b + c + d == 7 else -1,\n        1 if a - b + c - d == 7 else -1,\n        1 if a - b - c + d == 7 else -1,\n        1 if a - b - c - d == 7 else -1\n    )\n\nsolution(\"1222\")\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin)\n    return \"{}+{}+{}+{}={}\".format(a, b, c, d, 7)\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nYou can solve this problem by obtaining the value of A, B, C and D.\nAfter that, you can use the formula A + B + C + D = 7 to obtain the value of the last part =7.\n\nExplanation:\nABCD = 1 + 2 + 2 + 2\nD = 2 + 2 = 4\nC = 2 + 2 = 4\nB = 2 + 2 = 4\nA = 1 + 1 = 2\nD = 2 + 2 = 4\nC = 2 + 2 = 4\nB = 2 + 2 = 4\nA = 1 + 1 = 2\n\nABCD = 1 + 2 + 2 + 2 = 7\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    formula = stdin.split()\n    answer = \"1\" + formula[0] + \"2\" + formula[1] + \"3\" + formula[2] + \"4\" + formula[3] + \"=\" + str(7)\n    return answer\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C, D = [int(x) for x in stdin]\n  A, B, C, D = list(str(A)), list(str(B)), list(str(C)), list(str(D))\n  A, B, C, D = [int(i) for i in A], [int(i) for i in B], [int(i) for i in C], [int(i) for i in D]\n  A, B, C, D = [i for i in A if i!= 0], [i for i in B if i!= 0], [i for i in C if i!= 0], [i for i in D if i!= 0]\n  A, B, C, D = [str(i) for i in A], [str(i) for i in B], [str(i) for i in C], [str(i) for i in D]\n  formula = ''\n  for i in range(len(A)):\n    formula += A[i] + '+' + B[i] + '+' + C[i] + '+' + D[i]\n  formula += '=7'\n  return formula"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    str_numbers = stdin.split(\" \")\n    numbers = [int(i) for i in str_numbers]\n    numbers.sort()\n    numbers.reverse()\n    #print(numbers)\n    last_number = int(numbers[0])\n    rest_numbers = numbers[1:]\n    #print(rest_numbers)\n    for i in rest_numbers:\n        result = last_number + i\n        if result == 7:\n            return str(last_number) + \"+\" + str(i) + \"+\" + str(i) + \"+\" + str(i) + \"=\" + str(7)\n        elif result == -7:\n            return str(last_number) + \"-\" + str(i) + \"-\" + str(i) + \"-\" + str(i) + \"=\" + str(-7)\n        last_number = result\n    return \"No solution\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    d = 0\n    a = 0\n    b = 0\n    c = 0\n    for i in n:\n        if i == \"A\":\n            a = a + 1\n        if i == \"B\":\n            b = b + 1\n        if i == \"C\":\n            c = c + 1\n        if i == \"D\":\n            d = d + 1\n\n    if d == 4 and a == 1 and b == 1 and c == 1:\n        return \"1+2+2+2=7\"\n    return \"No solution\"\n"
    },
    {
        "number": 4583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    if a + b + c + d!= 7:\n        return \"No\"\n    if a + b + c - d == 7 or a - b + c - d == 7 or a + b - c + d == 7 or a - b - c + d == 7:\n        return \"No\"\n    return f'{a}+{b}+{c}+{d}={7}'\n    return f'{a}+{b}+{c}-{d}={7}'\n    return f'{a}-{b}+{c}-{d}={7}'\n    return f'{a}-{b}-{c}+{d}={7}'\n\"\"\"\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get number of employees from input\n    number_of_employees = int(stdin)\n    # create list of employees to check\n    employees_to_check = []\n    # loop through input and add each employee to employees_to_check\n    for i in range(number_of_employees):\n        employees_to_check.append(int(stdin))\n    # create list of employees with no subordinates\n    employees_with_no_subordinates = []\n    # loop through all employees to check\n    for employee in employees_to_check:\n        # if the employee does not have a direct boss\n        if employee not in employees_to_check:\n            # add employee to list of employees with no subordinates\n            employees_with_no_subordinates.append(employee)\n    # create empty dictionary\n    dictionary = {}\n    # loop through all employees\n    for employee in employees_to_check:\n        # create list of employees this employee is boss to\n        employee_bosses = []\n        # loop through all employees\n        for boss in employees_to_check:\n            # if this employee is a boss to another employee\n            if employee in employees_to_check[boss]:\n                # add this employee to list of employees this employee is boss to\n                employee_bosses.append(boss)\n        # add this employee to dictionary with list of employees this employee is boss to\n        dictionary[employee] = employee_bosses\n    # loop through employees with no subordinates\n    for employee in employees_with_no_subordinates:\n        # loop through employees this employee is boss to\n        for boss in dictionary[employee]:\n            # add 1 to number of subordinates\n            number_of_subordinates += 1\n    # return number of subordinates\n    return number_of_subordinates\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    input = stdin.split(\"\\n\")\n    N = int(input[0])\n    # N = 5\n    # A_list = [1, 1, 2, 2, 3]\n    A_list = list(map(int, input[1].split(\" \")))\n    # A_list = [1, 1, 2, 2, 3]\n    # A_list = [1, 1, 2, 2, 3]\n    A_dict = {}\n    # A_dict = {1: [2, 3], 2: [4, 5], 3: []}\n    A_dict = {i: [] for i in range(1, N + 1)}\n    # A_dict = {1: [], 2: [], 3: [], 4: [], 5: []}\n    for i in range(1, N + 1):\n        A_dict[i] = [A_list[i - 1]]\n    # print(A_dict)\n    # A_dict = {1: [2, 3], 2: [4, 5], 3: []}\n    for i in range(1, N + 1):\n        A_dict[i].append(A_list[A_list[i - 1] - 1])\n    # A_dict = {1: [2, 3], 2: [4, 5], 3: []}\n    # print(A_dict)\n    # A_dict = {1: [2, 3], 2: [4, 5], 3: []}\n    count = 0\n    for i in range(1, N + 1):\n        if len(A_dict[i]) > 1:\n            count += 1\n    print(count)\n    # count = 2\n    # print(count)\n    # print(A_list[0:])\n    # for i in range(1, N + 1):\n    #     for j in range(1, N + 1):\n    #         if A_list[i - 1] == A_list[j - 1]:\n    #             A_dict[j].append(A_list[j - 1])\n    # print(A_dict)\n    return count\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split()]\n    root = [[] for _ in range(n)]\n    for i in range(n):\n        if len(root[a[i]-1]) == 0:\n            root[a[i]-1] = [i+1]\n        else:\n            root[a[i]-1].append(i+1)\n    depth = 0\n    dep = [0] * n\n    def dfs(i):\n        nonlocal depth\n        if dep[i-1] == 0:\n            dep[i-1] = depth\n        for j in root[i-1]:\n            dfs(j)\n        depth += 1\n    for i in range(1, n+1):\n        dfs(i)\n    for i in range(1, n+1):\n        print(dep[i-1])\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     '5\\n1 1 2 2\\n'\n   ... )\n    2\n    2\n    0\n    0\n    0\n    \"\"\"\n    N = int(stdin.readline())\n    subordinates = []\n    for _ in range(N):\n        subordinates.append(int(stdin.readline()))\n    subordinates = [0] + subordinates\n    subordinates = [0] + subordinates\n    subordinates = [0] + subordinates\n\n    for i in range(2, N + 1):\n        subordinates[i] += subordinates[i - 1]\n    return '\\n'.join(map(str, subordinates))\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    boss: list[int] = [None] * stdin\n    length: int = len(boss)\n    for line in stdin.split('\\n')[1:]:\n        n, *arr = map(int, line.split())\n        for i in range(length):\n            if boss[i] is None:\n                boss[i] = arr[i] - 1\n                break\n\n    # print(boss)\n    def get_sub_count(boss: list[int], idx: int) -> int:\n        count = 0\n        for i in range(length):\n            if boss[idx] == boss[i] and i!= idx:\n                count += 1\n                count += get_sub_count(boss, i)\n        return count\n\n    counts = [0] * length\n    for i in range(length):\n        counts[i] = get_sub_count(boss, i)\n    print('\\n'.join(map(str, counts)))\n    return None\n\nsolution(stdin)\n"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\nN = int(stdin.readline())\nA = list(map(int, stdin.readline().strip().split()))\n\ndef"
    },
    {
        "number": 4584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of immediate subordinates of each member of a company.\"\"\"\n    pass\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    print(X - 1)"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline())\n    return 0"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = stdin\n    return str(int(X)-1)"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are in a race with kangaroos. At various points along the way, \n    there are places where you can jump to progress the race. \n    Determine the minimum number of jumps it will take to reach the finish line.\n\n    You can assume that all jumps are of equal length and that \n    you have to make an optimal choice.\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: output string\n    '''\n    # get input string\n    input_string = stdin\n    # split the input string into an array of elements\n    input_list = input_string.split('\\n')\n    # get the length of the input list\n    input_list_length = len(input_list)\n    # get the starting position (1 indexed)\n    start_position = int(input_list[0])\n    # get the finish position (1 indexed)\n    finish_position = int(input_list[1])\n    # if the finish position is not greater than the starting position\n    if finish_position <= start_position:\n        # return the starting position\n        return start_position\n    else:\n        # initialize the number of jumps to 0\n        jumps = 0\n        # iterate through the list of input\n        for i in range(1, input_list_length):\n            # get the current position\n            current_position = int(input_list[i])\n            # if the current position is less than the finish position\n            if current_position < finish_position:\n                # increment the number of jumps\n                jumps += 1\n            else:\n                # return the number of jumps\n                return jumps\n            # return the number of jumps\n            return jumps\n    \n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    answer = 0\n    while X > 0:\n        if X % 2 == 0:\n            answer += (X // 2)\n        else:\n            answer += ((X // 2) + 1)\n        X //= 2\n    return str(answer)"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 1:\n        return 0\n    elif x % 2 == 0:\n        return x - 1\n    else:\n        return x"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    X = int(stdin.readline().strip())\n    return str(solution_func(X))\n    \"\"\"\ndef"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return stdin\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    x, = map(int, stdin.split('\\n')[0].split())\n    return str(int((x - 1) / 2))\n"
    },
    {
        "number": 4585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    # x = int(stdin.readline())\n\n    # x = [int(input()) for _ in range(int(input()))]\n    # x = int(stdin.readline())\n    x = stdin.splitlines()\n    x = [int(i) for i in x]\n    # print(x)\n\n    # set x's largest number to be x[-1]\n    x[-1] = max(x)\n\n    # sum of x\n    # sum(x) = x[-1] + x[-2] +... + x[0]\n    # sum(x) = x[-1] + x[-2] +... + x[0] + x[1] +... + x[0] + x[1] +...\n    # so, sum(x) = x[-1] + sum(x[:-1])\n    sum_x = x[-1] + sum(x[:-1])\n\n    # smallest positive number that is evenly divisible by all numbers in x\n    # least common multiple(lcm) = LCM * GCD\n    # GCD(a,b) = greatest common divisor\n    # LCM(a,b) = least common multiple\n    # LCM(a,b) = LCM(a,LCM(b,c)) = LCM(a, LCM(b,c)) * GCD(a,b) * GCD(a,c) = a * b * GCD(a,b) * GCD(a,c)\n    # let lcm(a,b) = LCM(a,b)\n    # then, lcm(a,b) = a * b / GCD(a,b) = a * b / LCM(a,b)\n    # so, lcm(a,b) * GCD(a,b) = a * b\n    # so, GCD(a,b) = lcm(a,b) * GCD(a,b) / a * b\n    # if a and b are coprime, gcd(a,b) = 1\n    # if a and b have a common factor, gcd(a,b)!= 1\n\n    # use a loop to iterate through x\n    # for i in x:\n    for i in range(len(x)):\n        # if gcd(a,b)!= 1, gcd(x,y)!= gcd(x,z)\n        # if gcd(x,y)!= gcd(x,z), gcd(x,y)!= gcd(gcd(x,y),z)\n        # let a = x, b = gcd(x,y)\n        # then, gcd(x,y) = gcd(a,b) * b\n        # so, gcd(a,b) = gcd(a,b) * b\n        # so, gcd(a,b) = gcd(a,b) * (a * b) / (a * b)\n        # so, gcd(a,b) = gcd(a,b) * (a * b) / (a * b) = gcd(a,b)\n        # so, gcd(a,b) = 1\n        if x[i]!= 1:\n            for j in range(2, x[i]+1):\n                if x[i] % j == 0:\n                    break\n            else:\n                # print(i, j)\n                # sum(x) % a == 0\n                # sum(x) % a == 0 mod a == 0\n                # sum(x) % a == 0 mod a == 0\n                # sum(x) % a == 0 mod a == 0 % a == 0\n                # sum(x) % a == 0 mod a == 0 % a == 0 % a == 0\n                # sum(x) % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                # x[i] % a == 0 mod a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0 % a == 0\n                "
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_str = stdin\n    if int(num_str[0])!= int(num_str[1])!= int(num_str[2])!= int(num_str[3]) or int(num_str[1])!= int(num_str[2])!= int(num_str[3]) or int(num_str[2])!= int(num_str[3])!= int(num_str[4]):\n        return \"No\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]) == int(num_str[3]) == int(num_str[4]):\n        return \"Yes\"\n    elif int(num_str[1]) == int(num_str[2]) == int(num_str[3]) == int(num_str[4]):\n        return \"Yes\"\n    elif int(num_str[2]) == int(num_str[3]) == int(num_str[4]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]) == int(num_str[3]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]) == int(num_str[3]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) == int(num_str[1]) == int(num_str[2]):\n        return \"Yes\"\n    elif int(num_str[0]) =="
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 0:\n        count += 1\n        n //= 10\n    if count < 3:\n        return 'No'\n    tmp = n % 10\n    while n!= 0:\n        if n % 10!= tmp:\n            return 'No'\n        n //= 10\n        tmp = n % 10\n    return 'Yes'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N = stdin\n    \n    if N[0] == N[1] == N[2] == N[3]:\n        return 'Yes'\n    \n    if N[1] == N[2] == N[3]:\n        return 'Yes'\n    \n    if N[2] == N[3]:\n        return 'Yes'\n    \n    return 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if n is a good number, otherwise 'No'.\"\"\"\n    # find the first digit\n    digits = stdin.split()[0]\n    n = int(digits)\n    if len(digits) < 4:\n        return 'No'\n    elif len(set(digits)) == 1:\n        return 'No'\n    else:\n        groups = []\n        for i in range(len(digits) - 3):\n            if digits[i] == digits[i + 1] == digits[i + 2] == digits[i + 3]:\n                groups.append(digits[i:i + 4])\n        return 'Yes' if groups else 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        number = stdin.split('\\n')[0]\n        count = 0\n        for n in range(len(number) - 1):\n            if int(number[n]) == int(number[n + 1]):\n                count += 1\n                if count == 3:\n                    return 'Yes'\n            else:\n                count = 0\n        return 'No'\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 4:\n        return \"Wrong Input\"\n    digit = int(stdin)\n    if digit < 1000 or digit > 9999:\n        return \"Wrong Input\"\n    count = 0\n    string = str(digit)\n    for i in range(0, len(string)):\n        if string[i] == string[i+1]:\n            count = count + 1\n            if count == 3:\n                return \"Yes\"\n        else:\n            count = 0\n    return \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    n = str(num)\n    check = 0\n    for i in range(0, len(n)-1):\n        if n[i] == n[i+1]:\n            check = 1\n    if check == 0:\n        return \"No\"\n    for i in range(0, len(n)-1):\n        if n[i] == n[i+1]:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if (num // 1000) * 1000 == num:\n        return \"Yes\"\n    elif (num // 100) % 10 == ((num // 100) % 100) // 10:\n        return \"Yes\"\n    elif ((num // 10) % 10) * 10 == num:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    num = stdin\n    consecutive_1 = 0\n    for i in range(4):\n        if num[i] == \"1\":\n            consecutive_1 += 1\n        else:\n            consecutive_1 = 0\n\n        if consecutive_1 >= 3:\n            return \"Yes\"\n\n    return \"No\"\n"
    },
    {
        "number": 4586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    N = int(N)\n    if (N >= 1000 and N <= 9999) and not (N % 3 == 0) and (\n        N % 3!= 0 and N % 7!= 0 and N % 7!= 0\n    ):\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of different altars that Ringo can build.\"\"\"\n    return 1\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    A = map(int, stdin[1:1 + n])\n    B = map(int, stdin[1 + n:1 + 2 * n])\n    C = map(int, stdin[1 + 2 * n:1 + 3 * n])\n    ret = 0\n    for i in range(0, n):\n        for j in range(0, n):\n            for k in range(0, n):\n                if (A[i] <= B[j]) and (B[j] <= C[k]) and (C[k] <= A[i]):\n                    ret += 1\n    return ret\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 5\n   ... 2 4\n   ... 3 6\n   ... ''')\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n\n    def _find_altars(a, b, c):\n        altars = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                if (\n                    a[i] <= b[j]\n                    and b[j] <= c[i]\n                    and c[i] <= a[j]\n                ):\n                    altars.append([i, j, j + 1])\n        return altars\n\n    altars = _find_altars(a, b, c)\n    return str(len(altars))\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Reads standard input and computes solution.\"\"\"\n    n = int(next(stdin))\n    a = list(map(int, next(stdin).split()))\n    b = list(map(int, next(stdin).split()))\n    c = list(map(int, next(stdin).split()))\n    result = 0\n    for i in range(n):\n        if b[i] < a[i] or c[i] < b[i]:\n            result += 1\n    print(result)"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    len_input_list = len(input_list)\n    upper_input_list = input_list[1: len_input_list - 1]\n    middle_input_list = input_list[len_input_list - 2: len_input_list - 1]\n    lower_input_list = input_list[len_input_list - 1: len_input_list]\n    answer = 0\n    upper_list = []\n    for upper_input in upper_input_list:\n        upper_list.append(list(map(int, upper_input.split())))\n    middle_list = []\n    for middle_input in middle_input_list:\n        middle_list.append(list(map(int, middle_input.split())))\n    lower_list = []\n    for lower_input in lower_input_list:\n        lower_list.append(list(map(int, lower_input.split())))\n\n    for upper in upper_list:\n        for middle in middle_list:\n            for lower in lower_list:\n                if upper[0] <= middle[0] and middle[0] <= lower[0]:\n                    answer += 1\n    return answer\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = [int(x) for x in stdin.readline().strip().split()]\n    y = [int(y) for y in stdin.readline().strip().split()]\n    z = [int(z) for z in stdin.readline().strip().split()]\n\n    altars = [\n        (x[0], y[0], z[0]),\n        (x[0], y[0], z[1]),\n        (x[0], y[1], z[1]),\n        (x[1], y[0], z[1]),\n        (x[1], y[1], z[1]),\n        (x[1], y[0], z[0]),\n        (x[1], y[1], z[0]),\n    ]\n\n    unique_altars = []\n    for i in range(len(altars)):\n        if not unique_altars:\n            unique_altars.append(altars[i])\n        else:\n            j = 0\n            while j < len(unique_altars):\n                if unique_altars[j]!= altars[i]:\n                    unique_altars.append(altars[i])\n                    break\n                else:\n                    j += 1\n                    if j == len(unique_altars):\n                        unique_altars.append(altars[i])\n\n    print(len(unique_altars))\n    return\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    return \"\"\n\ndef"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, *a = map(int, stdin[0].split())\n    m, *b = map(int, stdin[1].split())\n    l, *c = map(int, stdin[2].split())\n    a.sort()\n    b.sort()\n    c.sort()\n\n    count = 0\n    for i in range(n):\n        if a[i] > m:\n            count += 1\n        if b[i] > m:\n            count += 1\n        if c[i] > m:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(upper, middle, lower):\n        return upper <= middle and middle <= lower\n\n    n = int(stdin.readline())\n    categories = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    # print(categories)\n    solutions = set()\n\n    def build_altar(upper, middle, lower):\n        if not solve(upper, middle, lower):\n            return\n        for cat in categories:\n            if cat[0] < middle and cat[1] > upper:\n                build_altar(cat[0], middle, lower)\n            elif cat[1] < middle and cat[2] > lower:\n                build_altar(upper, middle, cat[1])\n            elif cat[2] < middle and cat[0] > upper:\n                build_altar(upper, cat[2], lower)\n        solutions.add((upper, middle, lower))\n\n    for upper in categories:\n        build_altar(upper[0], upper[1], upper[2])\n\n    return len(solutions)\n"
    },
    {
        "number": 4587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    upper_parts = list(map(int, lines[1].split()))\n    middle_parts = list(map(int, lines[2].split()))\n    lower_parts = list(map(int, lines[3].split()))\n\n    altar_sizes = []\n    for i in range(n):\n        a = upper_parts[i]\n        b = middle_parts[i]\n        c = lower_parts[i]\n        if b > a and c > b:\n            altar_sizes.append((a, b, c))\n\n    altar_sizes = set(altar_sizes)\n    return len(altar_sizes)"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(' ')\n    print(f'{x} {y}')\n    print('<' if x < y else '>' if x > y else '=')"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    if a[0] < a[1]:\n        return \"<\"\n    elif a[0] > a[1]:\n        return \">\"\n    return \"=\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    if int(x) < int(y):\n        return \"<\"\n    elif int(x) > int(y):\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"A B\")\n    <\n    \"\"\"\n    x, y = stdin.split()\n    x = ord(x) - ord(\"A\")\n    y = ord(y) - ord(\"A\")\n    if x > y:\n        return \">\"\n    elif x == y:\n        return \"=\"\n    else:\n        return \"<\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(\" \")\n    x, y = int(x, 16), int(y, 16)\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l1 = stdin.split()\n    s1 = l1[0]\n    s2 = l1[1]\n    l2 = ['A', 'B', 'C', 'D', 'E', 'F']\n    s1 = l2.index(s1)\n    s2 = l2.index(s2)\n    if s1 < s2:\n        return \"<\"\n    elif s1 > s2:\n        return \">\"\n    else:\n        return \"=\"\n    pass"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(' ')\n    x_binary, y_binary = bin(int(x, 16))[2:], bin(int(y, 16))[2:]\n    print('<' if int(x_binary, 2) < int(y_binary, 2) else '>' if int(x_binary, 2) > int(y_binary, 2) else '=' if int(x_binary, 2) == int(y_binary, 2) else '?')"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    print(\"=\" if a == b else \"<\" if a < b else \">\")\n"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x, y = int(x, 16), int(y, 16)\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\"\n\n\ndef"
    },
    {
        "number": 4588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    return x[0] if int(x[0], 16) < int(x[1], 16) else x[1]\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    #input\n    h,w = list(map(int, stdin.split()))\n    #assert 1 <= h,w <= 50\n    #assert len(stdin.split('\\n')) == h\n    \n    #store the string to be returned\n    solution = \"\"\n    \n    for i in range(h):\n        line = \"\"\n        for j in range(w):\n            if stdin[i][j] == '.':\n                if i!= 0:\n                    if stdin[i-1][j] == '.':\n                        line += '2'\n                    elif stdin[i-1][j] == '#':\n                        line += '1'\n                if i!= h-1:\n                    if stdin[i+1][j] == '.':\n                        line += '2'\n                    elif stdin[i+1][j] == '#':\n                        line += '1'\n                if j!= 0:\n                    if stdin[i][j-1] == '.':\n                        line += '2'\n                    elif stdin[i][j-1] == '#':\n                        line += '1'\n                if j!= w-1:\n                    if stdin[i][j+1] == '.':\n                        line += '2'\n                    elif stdin[i][j+1] == '#':\n                        line += '1'\n                if j!= 0 and i!= 0:\n                    if stdin[i-1][j-1] == '.':\n                        line += '2'\n                    elif stdin[i-1][j-1] == '#':\n                        line += '1'\n                if j!= 0 and i!= h-1:\n                    if stdin[i+1][j-1] == '.':\n                        line += '2'\n                    elif stdin[i+1][j-1] == '#':\n                        line += '1'\n                if j!= w-1 and i!= 0:\n                    if stdin[i-1][j+1] == '.':\n                        line += '2'\n                    elif stdin[i-1][j+1] == '#':\n                        line += '1'\n                if j!= w-1 and i!= h-1:\n                    if stdin[i+1][j+1] == '.':\n                        line += '2'\n                    elif stdin[i+1][j+1] == '#':\n                        line += '1'\n        line += '\\n'\n        solution += line\n        \n    return solution[:-1]\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    rows, cols = int(string[0]), int(string[1])\n    grid = [['#' for _ in range(cols)] for _ in range(rows)]\n    for i in range(rows):\n        row = stdin.split('\\n')[i]\n        for j, char in enumerate(row):\n            grid[i][j] = char\n    return grid\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    \n    grid = [list(map(str, stdin.split('\\n')[1:])) for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                for k in range(-1, 2):\n                    for l in range(-1, 2):\n                        if k == 0 and l == 0:\n                            continue\n                        if 0 <= i + k < n and 0 <= j + l < m and grid[i + k][j + l] == '#':\n                            grid[i][j] = str(int(grid[i][j]) + 1)\n    \n    result = []\n    for i in range(n):\n        result.append(''.join(grid[i]))\n    \n    return '\\n'.join(result)\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(open('./test_input.txt').read())\n    113231111\n    11111111\n    11111111\n    11111111\n    11131111\n    11113111\n    11113111\n    11113111\n    11113111\n    11113111\n    11113111\n    11113111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111\n    11111111"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # start writing your code in the function\n    # H = int(stdin.split(\"\\n\")[0])\n    # W = int(stdin.split(\"\\n\")[1])\n    # H_list = list()\n    # for i in range(1,H+1):\n    #     H_list.append(stdin.split(\"\\n\")[i])\n    # #print(H_list)\n    # #print(len(H_list[0]))\n    # # print(len(stdin.split(\"\\n\")[0]))\n    # for i in range(len(H_list[0])):\n    #     for j in range(len(H_list)):\n    #         if j == 0:\n    #             if H_list[j][i] == \".\":\n    #                 H_list[j] = H_list[j][:i] + \"#\" + H_list[j][i + 1:]\n    #             else:\n    #                 H_list[j] = H_list[j][:i] + \"1\" + H_list[j][i + 1:]\n    #         else:\n    #             if H_list[j][i] == \".\":\n    #                 H_list[j] = H_list[j][:i] + \"#\" + H_list[j][i + 1:]\n    #             else:\n    #                 H_list[j] = H_list[j][:i] + str(int(H_list[j-1][i])+1) + H_list[j][i + 1:]\n    # #print(H_list)\n    # for i in range(len(H_list)):\n    #     print(H_list[i])\n    return stdin\n\n\nprint(solution(\"3 5\\n.....\\n.#.#.\\n.....\\n\"))\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    \n    board = [[0 for _ in range(w)] for _ in range(h)]\n    for _ in range(h):\n        board[_] = stdin.split('\\n')[_][:-1]\n    \n    for y in range(h):\n        for x in range(w):\n            if board[y][x] == '.':\n                continue\n            count = 0\n            for i in range(y-1, y+2):\n                for j in range(x-1, x+2):\n                    if i < 0 or j < 0 or i >= h or j >= w or board[i][j] == '#':\n                        continue\n                    count += 1\n            board[y][x] = str(count)\n    \n    for _ in board:\n        print(''.join(_))\n    return \"\"\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin=stdin.strip().split()\n    # H,W=int(stdin[0]),int(stdin[1])\n    # grid=[]\n    # for i in range(H):\n    #     grid.append(list(stdin[i+2]))\n    grid=stdin.strip().split()\n    grid=[list(x) for x in grid]\n    for h in range(H):\n        for w in range(W):\n            if grid[h][w]=='.':\n                grid[h][w]=str(count_adjacent_bombs(grid, h, w))\n    # print(grid)\n    for row in grid:\n        print(''.join(row))\n    return None\n\n\ndef"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_split = stdin.split(\"\\n\")\n    h = int(input_split[0])\n    w = int(input_split[1])\n    grid = [[x for x in input_split[2][i:i+w]] for i in range(0, w*h, w)]\n    for i in range(h):\n        grid[i][0] = grid[i][0].replace('.', str(grid[i].count('#')))\n        for j in range(1, w):\n            if grid[i][j-1] == '.' and grid[i][j] == '#':\n                grid[i][j] = str(grid[i][j-1].count('#')+1)\n            else:\n                grid[i][j] = grid[i][j]\n    for i in range(h):\n        print(''.join(grid[i]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = [stdin.split()[1] for _ in range(h)]\n    result = []\n\n    for row in grid:\n        result.append(''.join(str(sum([1 if c == '#' else 0 for c in row])) for row in grid))\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(s) for s in stdin.split()]\n\n    a = [int(s) for s in stdin.splitlines()[1:N + 1]]\n    b = [int(s) for s in stdin.splitlines()[N + 2:N + M + 2]]\n\n    a_dict = {}\n    b_dict = {}\n    for i in range(N):\n        a_dict[i] = a[i]\n\n    for i in range(M):\n        b_dict[i] = b[i]\n\n    a_sorted_keys = sorted(a_dict.keys())\n    b_sorted_keys = sorted(b_dict.keys())\n\n    a_dict = {k: v for k, v in sorted(a_dict.items(), key=lambda item: item[1])}\n    b_dict = {k: v for k, v in sorted(b_dict.items(), key=lambda item: item[1])}\n\n    a_keys = list(a_dict.keys())\n    b_keys = list(b_dict.keys())\n\n    a_keys_index = 0\n    b_keys_index = 0\n\n    time = 0\n    count = 0\n    while True:\n        time += 1\n        if a_keys_index >= len(a_keys) and b_keys_index >= len(b_keys):\n            break\n        if b_keys_index >= len(b_keys):\n            continue\n\n        if a_dict[a_keys[a_keys_index]] <= b_dict[b_keys[b_keys_index]]:\n            count += 1\n            a_keys_index += 1\n            b_keys_index += 1\n            continue\n\n        if b_dict[b_keys[b_keys_index]] < a_dict[a_keys[a_keys_index]]:\n            count += 1\n            a_keys_index += 1\n            b_keys_index += 1\n            continue\n\n    if time < K:\n        return str(count)\n\n    else:\n        time = K - 1\n        count = 0\n        while time >= 0:\n            count += 1\n            if a_keys_index >= len(a_keys):\n                time -= b_keys_index + 1\n            else:\n                time -= a_keys_index + 1\n            if time < 0:\n                return str(count)\n            if time >= 0:\n                time += 1\n\n    return str(count)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, m, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    a_stack = []\n    b_stack = []\n    for i in range(n):\n        a_stack.append(books.pop(0))\n    for i in range(m):\n        b_stack.append(books.pop(0))\n\n    a_cnt = 0\n    b_cnt = 0\n    while a_stack and b_stack:\n        while a_cnt < k:\n            a_cnt += a_stack.pop(0)\n        while b_cnt < k:\n            b_cnt += b_stack.pop(0)\n        if a_cnt > b_cnt:\n            b_cnt = 0\n        else:\n            a_cnt = 0\n\n    if a_stack:\n        b_cnt += a_stack.pop(0)\n    if b_stack:\n        a_cnt += b_stack.pop(0)\n\n    return str(b_cnt)\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    booksA = [int(x) for x in stdin.split()]\n    booksB = [int(x) for x in stdin.split()]\n    minutes = 0\n    for i in range(m):\n        minutes = max(minutes, booksB[i])\n    for i in range(n):\n        minutes = max(minutes, booksA[i])\n    count = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        while minutes - booksB[j] >= k:\n            minutes -= booksB[j]\n            j += 1\n            count += 1\n        minutes = max(minutes, booksA[i])\n        i += 1\n    while j < m:\n        minutes = max(minutes, booksB[j])\n        j += 1\n        count += 1\n    return str(count)"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the given input.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Output.\n    \"\"\"\n    stdin = stdin.split('\\n')\n    num_a, num_b, num_k = [int(stdin[0].split(' ')[i]) for i in range(3)]\n    a = [int(stdin[1].split(' ')[i]) for i in range(num_a)]\n    b = [int(stdin[2].split(' ')[i]) for i in range(num_b)]\n    k = int(stdin[3])\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    a_start, b_start = 0, 0\n    a_read, b_read = 0, 0\n    while a_start < num_a or b_start < num_b:\n        a_time, b_time = (a[a_start] if a_start < num_a else 0, b[b_start] if b_start < num_b else 0)\n        if k - a_read - b_read < a_time + b_time:\n            break\n        a_read += a_time\n        b_read += b_time\n        if a_start < num_a and a_read + a[a_start] > k:\n            a_read -= a[a_start]\n            a_start += 1\n        if b_start < num_b and b_read + b[b_start] > k:\n            b_read -= b[b_start]\n            b_start += 1\n    print(k - a_read - b_read)\n    return \"\"\n\ndef"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve solution\"\"\"\n    data = [*map(int, stdin.split())]\n    A, B, K = data\n    return str(min(A, B, K // min(A, B)))\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a, b = [], []\n    for i in range(n):\n        a.append(int(stdin.readline()))\n    for i in range(m):\n        b.append(int(stdin.readline()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    ans = 0\n    while k > 0 and len(a) > 0 and len(b) > 0:\n        ans += 1\n        if a[0] <= b[0]:\n            a.pop(0)\n            b.pop(0)\n            k -= 1\n        else:\n            b.pop(0)\n            k -= 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a, b = list(map(int, stdin.split()))\n    a = [a] * n\n    b = [b] * m\n    a.sort()\n    b.sort()\n    result = 0\n    for i in range(n):\n        if (a[i] - a[i - 1]) * 2 > k:\n            break\n        result = max(result, a[i] - a[i - 1])\n    for i in range(m):\n        if (b[i] - b[i - 1]) * 2 > k:\n            break\n        result = max(result, b[i] - b[i - 1])\n    return result"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the maximum number of books that can be read by\n    reading them consecutively in K minutes.\n\n    Args:\n        stdin (str): Input given to the function\n\n    Returns:\n        str: The maximum number of books that can be read\n    \"\"\"\n    _, _, _, *desks = stdin.split()\n    k, = map(int, desks)\n    books_a, books_b = [int(x) for x in stdin.split()[3:]]\n    books_a = [int(x) for x in stdin.split()[3:]]\n    books_b = [int(x) for x in stdin.split()[3:]]\n    # books_a = [2, 2, 2]\n    # books_b = [3, 3, 3]\n    # k = 7\n\n    for _ in range(k):\n        # print(f\"At step {_}\")\n        # print(books_a)\n        # print(books_b)\n        book_a, book_b = books_a[-1], books_b[-1]\n        # book_a = books_a[-1]\n        # book_b = books_b[-1]\n        # print(f\"Book a: {book_a}, Book b: {book_b}\")\n        # print(books_a)\n        # print(books_b)\n        if book_a < book_b:\n            # print(\"A\")\n            books_a[-1] = 0\n            books_a.pop()\n            if len(books_a) == 0:\n                break\n            # books_a.pop()\n        else:\n            # print(\"B\")\n            books_b[-1] = 0\n            books_b.pop()\n            if len(books_b) == 0:\n                break\n            # books_b.pop()\n\n    print(len(books_a))\n    print(len(books_b))\n\n    return\n\nsolution(stdin)\n"
    },
    {
        "number": 4590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def func(items: List[int]) -> int:\n        return sum(i[0] * i[1] for i in enumerate(items))\n\n    n, m, k = [int(i) for i in stdin.split()]\n    a, b = [int(i) for i in stdin.split()]\n    a = [a - b, a]\n    b = [b - a, b]\n    a_sum = func(a)\n    b_sum = func(b)\n    # \u52a8\u6001\u89c4\u5212\n    dp = [[0, 0] for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        if i >= n:\n            dp[i][0] = 0\n        else:\n            dp[i][0] = a[0] * i\n        if i >= m:\n            dp[i][1] = 0\n        else:\n            dp[i][1] = b[0] * i\n\n    for i in range(1, k + 1):\n        dp[i][0] = max(dp[i - 1][0], dp[i][0] + a[1])\n        dp[i][1] = max(dp[i - 1][1], dp[i][1] + b[1])\n    print(max(dp[k][0], dp[k][1]))\n    return \"\"\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = map(int, stdin.split(' '))\n    return str(a * x + b * y + (c - a - b) * min(x, y))\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([int(stdin.split()[i]) * (i + 1) for i in range(2)]))\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.split(' ')\n    a = int(input_str[0])\n    b = int(input_str[1])\n    c = int(input_str[2])\n    x = int(input_str[3])\n    y = int(input_str[4])\n    # x * A - y * B\n    return a * x - b * y"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, X, Y = map(int, stdin.split())\n    return str(min(2 * C * X + 2 * C * Y, A * X + B * Y))\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(int(x // 2 + x % 2 + y // 2 + y % 2))\n"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(' ')\n\nprint(solution(input()))\n\n---\n\ndef"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = list(map(int, stdin.split()))\n    ans = 10000\n    ans = min(ans, x * a + y * b + (x + y) * c)\n    ans = min(ans, x * a + (x + y) * b + y * c)\n    ans = min(ans, (x + y) * a + x * b + y * c)\n    ans = min(ans, (x + y) * a + y * b + x * c)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = map(int, stdin.split())\n    p = min(a, b, x)\n    q = min(b, c, y)\n    r = min(c, x, y)\n    s = min(x, y)\n    result = p * r + (p * q) / 2\n    return int(result)\n\n\"\"\"\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = (int(i) for i in stdin.split(' '))\n    return str(max(a*x + b*y, b*x + a*y, b*x*y, a*x*y))\n\n\ndef"
    },
    {
        "number": 4591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y = map(int, stdin.split(' '))\n    # \u043f\u043e\u043a\u0443\u043f\u0430\u0435\u043c \u043a\u0443\u0441\u043e\u0447\u043a\u0438\n    k = min(x, y)\n    x -= k\n    y -= k\n    # \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u043b\u0430\u0442\u0443 \u0437\u0430 \u0443\u0441\u043b\u0443\u0433\u0443 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u043a\u0443\u0441\u043e\u0447\u043a\u043e\u0432\n    a -= k * c\n    b -= k * c\n    # \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0441\u043e\u0447\u043a\u043e\u0432\n    a_k = a // a\n    b_k = b // b\n    k -= a_k + b_k\n    # \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u043b\u0430\u0442\u0443 \u0437\u0430 \u0443\u0441\u043b\u0443\u0433\u0443 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435 \u043a\u0443\u0441\u043e\u0447\u043a\u043e\u0432\n    a -= a_k * a\n    b -= b_k * b\n    # \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u043b\u0430\u0442\u0443 \u0437\u0430 \u0443\u0441\u043b\u0443\u0433\u0443 \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u043d\u0438\u044e\n    a -= x\n    b -= y\n    # \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u043b\u0430\u0442\u0443 \u0437\u0430 \u043f\u043e\u0434\u0441\u0447\u0451\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u0443\u0441\u043e\u0447\u043a\u043e\u0432\n    a -= k\n    b -= k\n    # \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u043c \u043f\u043b\u0430\u0442\u0443 \u0437\u0430 \u0443\u0441\u043b\u0443\u0433\u0443 \u043f\u043e \u043f\u0440\u043e\u0434\u0430\u0436\u0435\n    a -= c * x\n    b -= c * y\n    return a + b\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import chain, groupby\n    from math import factorial\n\n    def divisors(n):\n        n_sqrt = int(n**0.5)\n        for i in range(1, n_sqrt + 1):\n            if n % i == 0:\n                yield i\n                if i!= n // i:\n                    yield n // i\n\n    return str(sum(len(list(g)) % 10 ** 9 for _, g in groupby(chain.from_iterable(map(factorial, divisors(int(stdin))))) if _!= 0))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    total_num = 1\n    for x in range(1, number + 1):\n        total_num *= x\n    total_num %= pow(10, 9) + 7\n\n    divisor_num = 1\n    for x in range(1, number + 1):\n        if number % x == 0:\n            divisor_num *= x\n\n    return total_num - divisor_num\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I used a brute force method.\n    \"\"\"\n    n = int(stdin)\n    res = 1\n    for i in range(1, n+1):\n        res *= i\n    return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def factors(n: int) -> set:\n        s = set()\n        while n % 2 == 0:\n            s.add(2)\n            n //= 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                s.add(i)\n                n //= i\n        if n > 2:\n            s.add(n)\n        return s\n\n    return len(factors(int(stdin.read().strip())))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            result += 1\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    MOD = 10 ** 9 + 7\n    result = 1\n    for i in range(1, n+1):\n        result = (result * i) % MOD\n    return str(result)\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(divisor_count(int(stdin)))\n\ndef"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + (i - 1) * dp[i - 2]\n    return dp[-1] % (10**9 + 7)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 1\n    count = 1\n    for i in range(2, N+1):\n        if N % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    max = int(stdin)\n    for i in range(2,max):\n        for j in range(2,i):\n            if i**j <= max:\n                if i**j in max:\n                    return i**j\n    return i**j\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 2\n    while i < x:\n        if x % i == 0:\n            x //= i\n        else:\n            i += 1\n    return x\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  x = int(stdin)\n  maxi = 0\n  for i in range(x - 1, 0, -1):\n    if x % i == 0:\n      if i ** (x // i) >= maxi:\n        maxi = i ** (x // i)\n        break\n  return str(maxi)\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.readline())\n    for i in range(1, X+1):\n        if X % i == 0:\n            if is_perfect_power(i, X):\n                return i\n    return -1\n\ndef"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(1, x + 1):\n        for j in range(1, x + 1):\n            if i ** j <= x:\n                print(i ** j)\n                break\n            elif j == x:\n                print(i ** j)\n                break\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  # Get the input string\n  input_string = stdin\n  # Get the integer from the input string\n  n = int(input_string)\n  # Define the bound\n  bound = 1000\n  # Define a flag\n  flag = False\n  # Define the largest perfect power\n  largest_power = 0\n  # Define the number\n  number = 1\n  # Start a loop\n  while True:\n    # Define the power\n    power = 1\n    # Define the variable for checking if a number is a perfect power\n    check = False\n    # Define the variable for checking if the current number is larger than the largest power\n    number_greater_than_largest_power = False\n    # Define the variable for checking if the number is larger than the input number\n    number_greater_than_n = False\n    # Define the variable for checking if the number is larger than the bound\n    number_greater_than_bound = False\n    # Define the variable for checking if the number is larger than the largest power\n    number_greater_than_largest_power = False\n    # Define the variable for checking if the number is larger than the input number\n    number_greater_than_n = False\n    # Define the variable for checking if the number is larger than the bound\n    number_greater_than_bound = False\n    # Define the variable for checking if the number is larger than the largest power\n    number_greater_than_largest_power = False\n    # Define the variable for checking if the number is larger than the input number\n    number_greater_than_n = False\n    # Define the variable for checking if the number is larger than the bound\n    number_greater_than_bound = False\n    # Start a loop for checking if the number is larger than the input number\n    while True:\n      # Check if the number is larger than the input number\n      if number > n:\n        number_greater_than_n = True\n        # Break the loop\n        break\n      # Check if the number is larger than the bound\n      if number > bound:\n        number_greater_than_bound = True\n        # Break the loop\n        break\n      # Check if the number is larger than the largest power\n      if number > largest_power:\n        number_greater_than_largest_power = True\n        # Break the loop\n        break\n      # Check if the number is larger than the input number\n      if number > 1:\n        # Check if the number is a perfect power\n        for b in range(2, number):\n          # Check if the number is a perfect power\n          if number % b == 0:\n            # Increase the power by 1\n            power += 1\n            # Check if the power is larger than 1\n            if power > 1:\n              # Check if the power is larger than the input number\n              if power > n:\n                number_greater_than_n = True\n                # Break the loop\n                break\n              # Check if the power is larger than the largest power\n              if power > largest_power:\n                number_greater_than_largest_power = True\n                # Break the loop\n                break\n            # Check if the power is larger than the largest power\n            if power > largest_power:\n              number_greater_than_largest_power = True\n              # Break the loop\n              break\n        # Check if the number is larger than the input number\n        if number_greater_than_n:\n          break\n        # Check if the number is larger than the bound\n        if number_greater_than_bound:\n          break\n        # Check if the number is larger than the largest power\n        if number_greater_than_largest_power:\n          break\n      # Increase the number by 1\n      number += 1\n    # Check if the number is larger than the largest power\n    if number_greater_than_largest_power:\n      # Update the largest power\n      largest_power = number\n      # Update the flag\n      flag = True\n    # Check if the flag is true\n    if flag:\n      # Return the largest power\n      return largest_power\n"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10\n   ... 1\n   ... 4\n   ... 8\n   ... 9\n   ... 10\n   ... 4\n   ... 1\n   ... 16\n   ... 36\n   ... 72\n   ... 36\n   ... 9\n   ... 36\n   ... 1\n   ... 36\n   ... 36\n   ... 4\n   ... 16\n   ... 36\n   ... 9\n   ... 36\n   ... 36\n   ... 1\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 1\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ... 36\n   ..."
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    biggest = 0\n    for i in range(1, int(number ** 0.5) + 1):\n        if i ** 2 > number:\n            break\n        for j in range(2, int(number ** 0.5) + 1):\n            if i ** j > number:\n                break\n            if i ** j == number:\n                return f'{i}^2'\n            elif i ** j < number and number - i ** j < biggest:\n                biggest = number - i ** j\n    return f'{biggest}^2'\n\"\"\"\n\ndef"
    },
    {
        "number": 4593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    b = 2\n    p = 1\n    while b <= x:\n        if x % b == 0:\n            p += 1\n            if p > 2:\n                break\n        b += 1\n    return str(b - 1)\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from math import ceil\n    N = int(stdin.readline().rstrip())\n    d = [int(d) for d in stdin.readline().rstrip().split(\":\")]\n    n = len(d)\n    layers = [n]*N\n    for i in range(1, n):\n        layers[i] = ceil(d[i]/d[i-1])\n    return max(layers)\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    mochi_diameter = [int(stdin.readline()) for _ in range(N)]\n    mochi_diameter.sort()\n    num_layer = 0\n    num_layer_count = 0\n    for diameter in mochi_diameter:\n        num_layer += 1\n        if num_layer == diameter:\n            num_layer_count += 1\n            num_layer = 0\n    print(num_layer_count)\n\nsolution(sys.stdin.readline())\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *diameters = map(int, stdin.split())\n    layers = 0\n    while len(diameters) > 0:\n        layer = []\n        while len(diameters) > 0 and diameters[0] <= diameters[-1]:\n            layer.append(diameters.pop(0))\n        if len(layer) > layers:\n            layers = len(layer)\n        diameters.pop(0)\n    return str(layers)\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    mochi = int(stdin.readline())\n    layers = [int(mochi)]\n    for _ in range(mochi - 1):\n        diameter = int(stdin.readline())\n        if layers[-1] > diameter:\n            layers.append(diameter)\n        else:\n            for i in range(len(layers)):\n                if layers[i] > diameter:\n                    layers[i] = diameter\n                    break\n    return str(len(layers))\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of layers that can be made from N round mochi, where the diameter of the ith round mochi is d_i.\"\"\"\n    count_kagami = stdin.strip().split(\"\\n\")\n    count_kagami = [int(mochi) for mochi in count_kagami]\n    count_kagami = sorted(count_kagami, reverse=True)\n\n    max_layer = 0\n    for index in range(len(count_kagami) - 1):\n        if count_kagami[index + 1] >= count_kagami[index] + 2:\n            max_layer += 1\n        else:\n            break\n    return max_layer\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  '''Return the maximum number of layers in a kagami mochi that can be made.'''\n  # Get the input\n  N, *d = map(int, stdin.split())\n\n  # Use a greedy algorithm to find the maximum number of layers\n  d.sort()\n  layers = 0\n  while N > 0:\n    layers += 1\n    diameter = d.pop()\n    if diameter >= d[-1]:\n      N -= 1\n  return layers"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cake = []\n    for _ in range(n):\n        cake.append(int(stdin))\n    cake.sort(reverse=True)\n    layers = 0\n    for d in cake:\n        if d > cake[cake.index(d) - 1]:\n            layers += 1\n    print(layers)\n    return layers"
    },
    {
        "number": 4594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_mochi, *d_list = stdin.split('\\n')\n    d_list = [int(x) for x in d_list]\n    num_mochi = int(num_mochi)\n    # [10, 8, 8, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    # [10, 10, 10, 6]\n    "
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin[:1] + stdin[7:11]\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:4]\n    # remove first 4 chars and return\n\"\"\"\n\ndef"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - len(stdin.rstrip('\\n'))"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - 2\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin) - 7\n\"\"\"\n\ndef"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the longest possible substring\n    '''\n    # get input from stdin\n    s = stdin.rstrip()\n\n    # get a list of all possible substrings in s\n    substrings = [s[i:] for i in range(len(s))]\n    substrings = substrings + [s[:-i] for i in range(1, len(s) + 1)]\n\n    # check all the substrings in substrings and find the longest one\n    longest_substring = ''\n    for substring in substrings:\n        if substring.startswith('A') and substring.endswith('Z'):\n            if len(substring) > len(longest_substring):\n                longest_substring = substring\n\n    return len(longest_substring)\n"
    },
    {
        "number": 4595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:6] + stdin[7:12]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    a = sorted(a, reverse=True)\n    cnt = 0\n    for x in a:\n        if x % 2 == 0:\n            cnt += 1\n            a[a.index(x)] //= 2\n    return cnt\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution goes here\n\"\"\"\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    A = stdin.split()[1:]\n    return str(max(int(n)//2-1, 0))"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split('\\n'))\n    return str(max([i // 2 for i in A]))\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(number) for number in stdin.split(\"\\n\")[0].split()]\n    result = 0\n    for number in numbers:\n        result += number // 2\n    return str(result)"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_nums = int(stdin)\n    nums = [int(num) for num in stdin.split()]\n    max_operations = 0\n    if num_of_nums == 1:\n        max_operations = 0\n    else:\n        for i in range(num_of_nums):\n            if nums[i] % 2!= 0:\n                nums[i] = nums[i] + 1\n            else:\n                nums[i] = nums[i] / 2\n            if nums[i] % 2!= 0:\n                max_operations = i\n                break\n            if i == num_of_nums - 1:\n                max_operations = num_of_nums\n    return str(max_operations)\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\n\n\ndef"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = 1\n    for i in range(1, n + 1):\n        p *= i\n    return p % (10 ** 9 + 7)\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    i = 0\n    power = 1\n    while i < N:\n        i += 1\n        power = (power * i) % (10**9 + 7)\n    return power"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution to the exercise.\n    '''\n    N = int(stdin.readline())\n    power = 1\n    for i in range(1, N + 1):\n        power *= i\n        power %= 1000000007\n    return power\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n\")\n    6\n    \"\"\"\n    N = int(stdin.readline())\n    power = 1\n    for i in range(N):\n        power *= (i + 1)\n    return power % 1000000007\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(int(stdin), 3))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = {str(i): i for i in range(1, 100)}\n    n = int(stdin.readline().strip())\n    a = 1\n    for i in range(n):\n        a *= int(stdin.readline().strip())\n    return m[str(a)]\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\nimport os\nimport random\nfrom functools import reduce\nfrom itertools import permutations\nimport collections"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Solve exercise.\n    \n    Given that Snuke loves working out, he should have a good mindset to maximize his performance.\n    Therefore, if Snuke has a power of X, the next power he should be is X * 2.\n    \n    Given that his power is X * 2, and he exercises for N times,\n    the power he should be now is (X * 2) * N.\n    \n    Given that Snuke's power is (X * 2) * N, we can multiply all the powers together and\n    solve for the power X' * N' * 2, where X' is the product of all the original powers.\n    \n    This is one of the famous solutions to the problem.\n    I originally had a similar idea, but the idea of multiplying all the powers together\n    was not immediately obvious to me.\n    '''\n    \n    # Get input.\n    n = int(stdin)\n    \n    # Get power of 2.\n    power_of_2 = 2\n    \n    # If n is odd, then we can subtract 1 from n, so that n is even.\n    # Therefore, we can use the same algorithm as before.\n    # But we will also multiply the power by 2 at the end.\n    if n % 2:\n        n -= 1\n        power_of_2 *= 2\n        \n    # Initialize power.\n    power = 1\n    \n    # Multiply power by 2.\n    while power_of_2!= 0:\n        power *= power_of_2\n        power_of_2 //= 2\n    \n    # Divide n by 2.\n    power //= 2\n    power %= 10 ** 9 + 7\n    \n    # Multiply power by n.\n    power *= n\n    \n    # Multiply power by 2 again.\n    power *= 2\n    \n    # Return power.\n    return str(power % (10 ** 9 + 7))\n"
    },
    {
        "number": 4597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # m = int(stdin)\n    # n = 0\n    # while m >= 1:\n    #     n = m + n\n    #     m = m - 1\n    # print(n)\n    return n\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    return sum(range(1, N+1))"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    ans = 0\n    for i in range(1, N+1):\n        ans += i\n    return str(ans)\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_list: List[int] = [int(x) for x in stdin.split(\"\\n\")]\n    return str(sum(input_list))\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(range(1, int(stdin.split('\\n')[0])+1)))"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(range(int(stdin.readline())))))\n"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n*(n+1)//2"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n\ndef"
    },
    {
        "number": 4598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(n * (n+1) // 2)"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cards = list(map(int, stdin.split()))\n    return str(sum(cards[::2]) - sum(cards[1::2]))\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, *cards = stdin.split()\n    N = int(N)\n\n    cards = list(map(int, cards))\n    cards.sort()\n    a = cards[N // 2]\n\n    return str(a)\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns alice's score minus bob's score when both players take the optimal strategy to maximize their scores\n    \"\"\"\n    N, *cards = map(int, stdin.split())\n    cards = sorted(cards)\n    alice = sum(cards[i] * (N - i) for i in range(N))\n    bob = sum(cards[i] * (i + 1) for i in range(N))\n    return alice - bob\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(input()))\n    print(int(input()) - int(input()))\n    \"\"\"\n    cards = stdin.split(\"\\n\")\n    # print(cards)\n    cards = cards[1:]\n    cards = cards[0].split(\" \")\n    # print(cards)\n    cards = list(map(int, cards))\n    # print(cards)\n\n    for i in range(1, len(cards)):\n        cards[i] += cards[i - 1]\n    # print(cards)\n    print(cards[-1] - cards[0])"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *cards = map(int, stdin.split())\n    cards = tuple(map(lambda x: x * (x + 1) // 2, cards))\n    return cards"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cards = stdin.split(\"\\n\")[0]\n    cards = [int(x) for x in cards.split(\" \")]\n    alice = 0\n    bob = 0\n    for card in cards:\n        if alice > bob:\n            bob += card\n        elif alice < bob:\n            alice += card\n        else:\n            alice += card\n            bob += card\n    return alice - bob\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes in the string of input and returns the score of Alice minus the score of Bob.'''\n    # Get the number of cards N and the numbers on the cards.\n    nums = stdin.split()\n    n = int(nums[0])\n    cards = [int(i) for i in nums[1:]]\n    # Initialize two scores.\n    alice = 0\n    bob = 0\n    # The algorithm goes as follows:\n    # 1. Alice takes the card with the largest number on it.\n    # 2. Bob takes the card with the smallest number on it.\n    # 3. We repeat this until there are no cards left.\n    # This can be done by creating an array of the N cards. The max and min cards can be obtained in O(N) time.\n    # As each of the cards gets taken by someone, it goes into the array.\n    # We have to then iterate through the array and apply the formula to find the final score.\n    cards_arr = [i for i in range(n)]\n    cards_arr.sort()\n    for i in cards_arr:\n        if alice >= bob:\n            alice += cards[i]\n        else:\n            bob += cards[i]\n    return alice - bob\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n    >>> solution('''2\n   ... 3 1''')\n    2\n    >>> solution('''2\n   ... 3 1\n   ... 2 1\n   ... 1 2\n   ... 3 3''')\n    5\n    >>> solution('''2\n   ... 1 1\n   ... 1 1\n   ... 1 1''')\n    0\n    \"\"\"\n    # initialize a list of card scores.\n    # the cards should be sorted, because Alice will always take the card with the lowest score.\n    card_scores = sorted(list(map(int, stdin.strip().split('\\n')[1:])))\n    Alice_score = 0\n    Bob_score = 0\n\n    # sum up the card scores of the first N / 2 cards.\n    for score in card_scores[:(len(card_scores) // 2)]:\n        Alice_score += score\n        Bob_score += score\n\n    return Alice_score - Bob_score\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, *cards = map(int, stdin.split())\n    first = sum(cards[:a])\n    second = sum(cards[a:a + b])\n    return str(first - second)\n"
    },
    {
        "number": 4599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # inputs = stdin.readlines()\n    # N = int(inputs[0])\n    # cards = [int(i) for i in inputs[1].split(' ')]\n    # card_sum = sum(cards)\n    # diff = 0\n    # for i in range(1, N):\n    #     if cards[i] > cards[i - 1]:\n    #         diff += cards[i] - cards[i - 1]\n    #     else:\n    #         diff += cards[i - 1] - cards[i]\n    # return diff\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    correct_answers = 0\n    penalties = 0\n    for _ in range(m):\n        p, s = stdin.split(' ')\n        if s == 'AC':\n            correct_answers += 1\n        else:\n            penalties += 1\n    return str(correct_answers) +'' + str(penalties)"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = map(int, stdin[0].split())\n    ans = 0\n    pen = 0\n    for _ in range(m):\n        s = stdin[1 + _]\n        t = s.split()\n        if t[1] == 'AC':\n            ans += 1\n        else:\n            pen += 1\n    print(ans, pen)\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass  # Write your code here"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def main(input: List[str]) -> str:\n        # import stdin\n        import sys\n        # input = stdin.readlines()\n        _, _, n, m = map(int, input[0].split())\n        s = [0] * n\n        for i in range(m):\n            a, b = input[i + 1].split()\n            s[int(a) - 1] += 1\n            if b == 'AC':\n                s[int(a) - 1] = 0\n        print(sum([(i >= 1) for i in s]))\n        print(sum([i * (i >= 1) for i in s]))\n\n    # def test_solution():\n    #     with open(\"test_solution.txt\", \"r\") as f:\n    #         return main(f.readlines())\n\n    main(input)\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\ndef"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 2\n   ... 1 WA\n   ... 1 AC\n   ... 2 WA\n   ... 2 AC\n   ... 2 WA\n   ... ''')\n    '2 2'\n    \"\"\"\n    N, M = map(int, stdin.split(' '))\n    c = collections.Counter()\n    for _ in range(M):\n        p, S = stdin.split(' ')\n        c[p] += 1\n        if S == 'AC':\n            break\n    return str(sum(c.values())) +'' + str(sum(c.get(p, 0) for p in range(1, N + 1)))\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.split()\n    N, M = int(stdin[0]), int(stdin[1])\n    correct_answers, penalties = 0, 0\n    for i in range(M):\n        stdin = stdin[i + 2].split(' ')\n        if stdin[1] == \"AC\":\n            correct_answers += 1\n        elif stdin[1] == \"WA\" and stdin[0] not in correct_answers:\n            penalties += 1\n    print(correct_answers, penalties)\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    submit_list = []\n    for i in range(M):\n        submit_list.append(list(map(str, stdin.readline().split())))\n\n    ans = [0, 0]\n\n    for i in range(M):\n        ans[0] += 1 if submit_list[i][1] == \"AC\" else 0\n        ans[1] += submit_list[i][1] == \"WA\"\n        if submit_list[i][1] == \"AC\":\n            for j in range(i + 1, M):\n                ans[0] += 1 if submit_list[j][1] == \"AC\" else 0\n                ans[1] += submit_list[j][1] == \"WA\"\n                if submit_list[j][1] == \"AC\":\n                    break\n\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    N, M = map(int, stdin.split())\n\n    ans = 0\n    pen = 0\n\n    for i in range(M):\n        p, s = map(str, stdin.split(':', maxsplit=1))\n        p, s = int(p), str(s)\n        if s == 'AC':\n            ans += 1\n            if ans == 1:\n                pen += 1\n        elif s == 'WA':\n            ans = 0\n    return ans, pen"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    h = list(map(int, stdin.split(' ')))\n    return str(sum(map(lambda x: x // (k + 1), h)))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning\n    when she can use Special Move at most K times.\n\n    >>> solution(\"3 1\\n4 1 5\\n\")\n    5\n    '''\n    N, K = [int(x) for x in stdin.split('\\n')[:2]]\n    H = [int(x) for x in stdin.split('\\n')[2:]]\n    return min(2 * K + 1,\n               K + (2 * N) - 1,\n               (K + 1) * N + 1,\n               2 * K * (N + 1))\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    H = [int(x) for x in stdin.split()]\n    print(sum(H))\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    \n    # special moves\n    special_move_count = 0\n    for i in range(n):\n        if h[i] == 0:\n            special_move_count += 1\n    \n    # attacks\n    attacks_count = 0\n    for i in range(n):\n        if h[i] > 0:\n            attacks_count += 1\n    \n    # special move + attacks <= k\n    # special move + attacks - 1 <= k\n    return min(k - special_move_count, attacks_count - 1)\n\nprint(solution(input()))"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Fetch input\n    N, K = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n\n    # Initialize values\n    ans = 0\n    h[0] -= K\n    if h[0] <= 0:\n        ans += 1\n    h[1] -= K\n    if h[1] <= 0:\n        ans += 1\n    h[2] = 0\n\n    # Main loop\n    for i in range(3, N):\n        h[i] -= K\n        ans += 1\n        if h[i] <= 0:\n            break\n\n    # Return answer\n    return ans\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    def calc(i, j):\n        return max(0, h[i] - j + 1)\n\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = 1 + min(dp[i - 1][j], dp[i - 1][j - 1] + calc(i - 1, j - 1))\n    return dp[n][k]\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"your code here\"\n    return None"
    },
    {
        "number": 4601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[:2])\n    x_list = list(map(int, stdin.split('\\n')[2:]))\n    x_list = sorted(x_list)\n    s = []\n    for x in x_list:\n        s.append(x - k)\n    print(min(s))\n\nsolution(input())\n\ndef"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(4)\n\nprint(solution('1 10 2'))"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum total distance covered by robots\"\"\"\n    \n    n, k = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    ans = 0\n    \n    for i in range(n):\n        if x[i] < k:\n            ans += k - x[i]\n    \n    return str(ans)"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdout"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    balls = stdin.readline().split(' ')\n\n    # Get distances\n    distances = []\n    for ball in balls:\n        distances.append(abs(int(ball)))\n\n    # Return answer\n    return str(sum(distances))\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    C = int(stdin.readline())\n    D = int(stdin.readline())\n    \n    return str(max(A+B, C+D))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split('\\n'))\n    return str(min(A * D, B * C))"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split('\\n'))\n    return str(min(A * D, B * C))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])\n    if a > b:\n        t = a\n        a = b\n        b = t\n    if c > d:\n        t = c\n        c = d\n        d = t\n    if a == b and c == d:\n        return a * 2\n    return min(a + b, c + d)\nprint(solution(input()))"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split('\\n'))\n    return str(min(A*1000 + B, C*1000 + D))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    D = int(D)\n    return str(int(max(A, B) + max(C, D)))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return min(A * 300 + B * 220, A * D + C * 300)\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split('\\n'))\n    A, B, C, D = min(A, B), min(C, D), max(A, C), max(B, D)\n    return str(min(A + B, C + D))\n"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = (int(x) for x in stdin.split())\n    return str(min(A+B, C+D))\n\n\ndef"
    },
    {
        "number": 4603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum total fare.\"\"\"\n    a, b, c, d = map(int, stdin.split())\n    if a > c:\n        return str(a * b)\n    elif a <= c:\n        return str(a * d + c * b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(n)\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    #A = sorted(A)\n    table = {}\n    for i in range(N):\n        diff = A[i]\n        if diff not in table:\n            table[diff] = [i]\n        else:\n            table[diff].append(i)\n    print(table)\n    if len(table.keys()) < N:\n        return 0\n    table = sorted(table.values())\n    for i in range(N):\n        if len(table[i]) > 1:\n            for j in range(len(table[i])):\n                table[i][j] += j\n    ans = 1\n    for i in range(len(table)):\n        if len(table[i]) == 1:\n            ans *= 2\n        elif len(table[i]) > 1:\n            ans *= table[i][len(table[i])-1] - table[i][0] + 1\n            ans %= (10 ** 9 + 7)\n    return ans\n\na = solution('5 2 4 4 0 2')\nprint(a)\n\ndef"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    # get test case\n    test_case = int(stdin)\n\n    # loop for test cases\n    for case in range(test_case):\n        # get N\n        n = int(stdin)\n        # get A_i\n        a_i = [int(i) for i in stdin.split(' ')]\n\n        # create list of diff\n        diff_list = []\n        for i in range(len(a_i)):\n            diff_list.append(abs(a_i[i]-i))\n\n        # find all orders\n        orders = []\n        for i in range(len(diff_list)):\n            for j in range(i, len(diff_list)):\n                order = []\n                order.append(i)\n                order.append(j)\n                order.sort(reverse=True)\n                orders.append(order)\n\n        # print result\n        for i in range(len(orders)):\n            print(orders[i][0]+1, orders[i][1]+1, sep=' ', end=' ')\n        print('')"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of possible orders in which people in a row were standing.\"\"\"\n    num_people = int(stdin.readline())\n    A = [int(n) for n in stdin.readline().strip().split()]\n    num_orders = 0\n    prev = -1\n    # For each person, count the number of people to the left\n    # and right of them.\n    for person in range(num_people):\n        prev += A[person]\n        # Check if there are enough people to the left\n        # and right of the current person.\n        if person and prev < A[person] + A[prev]:\n            break\n        # Check if the current person is at the very beginning\n        # or end of the array.\n        elif person and A[person] == 0:\n            num_orders += prev + 1\n        else:\n            num_orders += person - prev\n    return str(num_orders % (10 ** 9 + 7))\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n2 4 4 0 2\\n')\n    4\n    \"\"\"\n    N = int(stdin.readline())\n    D = [int(d) for d in stdin.readline().split()]\n    D.sort()\n    nums = set([d for d in D])\n    if len(nums)!= N:\n        return 0\n    count = 0\n    if N % 2 == 0:\n        for a in range(N // 2):\n            for b in range(a + 1, N // 2):\n                if a - b == D[a] - D[b]:\n                    count += 1\n    else:\n        for a in range(N // 2):\n            for b in range(a + 1, N // 2 + 1):\n                if a - b == D[a] - D[b]:\n                    count += 1\n    return count % (10 ** 9 + 7)\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 4 4 0 2''')\n    4\n    >>> solution('''3\n   ... 2 1 2\n   ... 2 1 1\n   ... 1 1 2\n   ... 1 2 1''')\n    4\n    >>> solution('''5\n   ... 0 1 1 2 3\n   ... 1 1 1 1 2\n   ... 1 1 1 1 2\n   ... 1 1 1 1 2\n   ... 1 1 1 1 2\n   ... ''')\n    0\n    \"\"\"\n    # Task.\n    #   Given the input.\n    #   Find all possible orders.\n    #   Count them.\n    #   Find the count modulo (10^9+7).\n    #   Return the count modulo (10^9+7).\n    #\n    #   Input.\n    #       N - the number of people in the room\n    #       A - the numbers for each person.\n    #   Output.\n    #       The number of orders.\n    #   Possible orders:\n    #       1. 1 2 3 4 5\n    #       2. 1 4 3 5 2\n    #       3. 2 1 3 5 4\n    #       4. 2 5 1 3 4\n    #       5. 3 2 1 4 5\n    #       6. 3 4 1 5 2\n    #       7. 4 3 2 1 5\n    #       8. 5 4 2 1 3\n    #\n    #   Algorithm.\n    #       Let A be the array of the numbers for each person.\n    #       Let N be the number of people in the room.\n    #       Let the number of orders to count be C(N, 2).\n    #       Let the count be 0.\n    #       Let A1 be the first number in A.\n    #       Let A2 be the second number in A.\n    #       Let the count for the order to be C(A1-1, A2-A1-1).\n    #       Let the order be A1 2 A1 3... A2 A1 A2 A1...\n    #       For i from 2 to N-1.\n    #           Let A_i be the i-th number in A.\n    #           Let the count for the order to be C(A_i-1, A_i-A_i-1).\n    #       For j from 2 to N-1.\n    #           Let A_j be the j-th number in A.\n    #           Let the count for the order to be C(A_j, A_j-1).\n    #       Increase the count by C(N, 2).\n    #       Increase the count by C(A1-1, A2-A1-1).\n    #       Increase the count by C(A1, A2-A1).\n    #       Increase the count by C(A2-1, A1).\n    #       Increase the count by C(A2, A1-1).\n    #       Increase the count by C(A1-2, A2-A1-2).\n    #       Increase the count by C(A1-2, A2-A1-2).\n    #       Increase the count by C(A2-2, A1).\n    #       Increase the count by C(A2-2, A1).\n    #       Increase the count by C(A2-2, A1).\n    #       Return the count modulo (10^9+7).\n    #\n    #   Time complexity.\n    #       O(N * (N-1) * (N-2))\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N + N + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N + N + N + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N + N + N + N + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N + N + N + N + N + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N + N + N + N + N + N + N + N + N + N + N)\n    #       O(N * (N-1) * (N-2) + N * (N-1) + N + N * (N-1) + N + N + N + N + N + N + N + N + N + N + N + N + N + N + N + N + N)\n    #       O(N * (N"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        l = i\n        r = n-1-i\n        if r < l:\n            break\n        if a[l] - a[i] == a[r] - a[i]:\n            count += 1\n    return count"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # initialize values\n    N = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    left_sum = [0]*N\n    right_sum = [0]*N\n    max_left = 0\n    max_right = 0\n    for i in range(1, N):\n        left_sum[i] = left_sum[i-1] + A[i-1]\n        max_left = max(max_left, left_sum[i])\n    for i in range(N-2, -1, -1):\n        right_sum[i] = right_sum[i+1] + A[i+1]\n        max_right = max(max_right, right_sum[i])\n    \n    # find orders\n    orders = 0\n    for i in range(max_left, max_right+1):\n        orders += left_sum[i]*right_sum[i]\n    orders %= 10**9+7\n    \n    # print the answer\n    return str(orders)"
    },
    {
        "number": 4604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split(\"\\n\")))\n    ans = 0\n    for i in range(n):\n        ans += pow(i, n-1-i, 10**9+7) * pow(n-1-i, n-i-1, 10**9+7)\n    print(ans % (10**9+7))\n    return solution\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    numbers = list(range(1, n + 1))\n    arr = []\n    for i in numbers:\n        if sum(int(x) for x in str(i)) >= a and sum(int(x) for x in str(i)) <= b:\n            arr.append(i)\n    print(sum(arr))\nsolution(input())\n\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # c1, c2 = list(map(int, stdin.strip().split(\" \")))\n    # result = 0\n    # for i in range(1, c1 + 1):\n    #     if sum(int(x) for x in str(i)) in range(c2, c1 + 1):\n    #         result += i\n    # return result\n    return sum(i for i in range(1, int(stdin.strip().split(\" \")[0]) + 1) if sum(int(x) for x in str(i)) in range(int(stdin.strip().split(\" \")[1]), int(stdin.strip().split(\" \")[2]) + 1))\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(1, N+1):\n        s = sum([int(x) for x in str(i)])\n        if A <= s <= B:\n            result += i\n    return result\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = [int(elem) for elem in stdin.split()]\n    ans = 0\n    for i in range(n+1):\n        if sum(int(digit) for digit in str(i)) >= a and sum(int(digit) for digit in str(i)) <= b:\n            ans += i\n    return ans"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split(' '))\n    a, b = N, 0\n    while N > 0:\n        n = N % 10\n        N //= 10\n        b += n\n    if a > b:\n        return str(0)\n    else:\n        k = a - 1\n        s = 0\n        while k > 0:\n            n = k % 10\n            k //= 10\n            s += n\n        s += b\n        if a <= s <= b:\n            s -= a\n            while s > 0:\n                d = s % 10\n                s //= 10\n                s += d\n            return str(s)\n        else:\n            return str(0)"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split()]\n    ans = 0\n    for i in range(1, n+1):\n        s = 0\n        while i:\n            s += i % 10\n            i //= 10\n        if a <= s <= b:\n            ans += i\n    return ans"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(i for i in range(int(stdin.split(\"\\n\")[0].split(\" \")[0]), int(stdin.split(\"\\n\")[0].split(\" \")[1])+1) if (sum(int(j) for j in str(i)) >= int(stdin.split(\"\\n\")[0].split(\" \")[2]) and sum(int(j) for j in str(i)) <= int(stdin.split(\"\\n\")[0].split(\" \")[3])))\n    \nsolution(stdin)"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split(' '))\n    total = 0\n    for i in range(1, n+1):\n        total += sum(map(int, list(str(i))))\n    answer = 0\n    for i in range(a, b+1):\n        if i <= total:\n            answer += i\n    return answer"
    },
    {
        "number": 4605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the sum of the integers between 1 and N (inclusive),\n    whose sum of digits written in base 10 is between A and B (inclusive).\n    >>> solution('20 2 5')\n    84\n    \"\"\"\n    N, A, B = map(int, stdin.split())\n    return sum(\n        i\n        for i in range(N + 1)\n        if sum(int(j) for j in str(i))\n        in range(A, B + 1)\n    )"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    abc = \"ABC\"\n    if number < 100:\n        return abc + str(number)\n    if number == 100:\n        return abc + \"00\"\n    if number < 1000:\n        return abc + str(number // 100)\n    abc = abc + \"0\"\n    return abc + str(number // 100)\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f'ABC{n}'\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'ABC{}'.format(str(n).zfill(3))"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if int(N) > 999:\n        print(\"ABC1000\")\n    elif int(N) < 100:\n        print(\"ABC100\")\n    else:\n        print(\"ABC\"+N)\n        return \"ABC\"+N\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.rstrip())\n    return \"ABC\" + str(N // 100)"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return \"ABC\" + str(N // 100)"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Create the answer\n    answer = ''\n\n    # Get the input\n    input_n = int(stdin)\n\n    # Check if the input is in the allowed range\n    if 100 <= input_n <= 999:\n        # If it is in the allowed range, then add ABC to the answer\n        answer = 'ABC' + str(input_n)\n    else:\n        # Otherwise, return None\n        return None\n\n    # Return the answer\n    return answer\n\n\ndef"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"ABC{n:03}\"\n"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    round_number = n % 100\n    if round_number == 0:\n        round_number = 100\n    return f'ABC{round_number}'"
    },
    {
        "number": 4606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ABC = \"ABC\"\n    n = int(stdin)\n    print(ABC + str(n - 1))\n    return ABC + str(n - 1)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a code golf challenge. You don't need to read this.\n    \"\"\"\n    day = int(stdin[0])\n    month = int(stdin[1])\n    if month == day:\n        return \"Takahashi\"\n    else:\n        return \"Not Takahashi\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return sum(1 for i in range(1, b) if i % a == 0)\n\ndef"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom datetime import datetime\n\nfrom functools import reduce\n\nDAYS = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday'\n]\n\ndef"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(sum(1 for i in range(1, b) if i < a or i % a == 0))\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # https://www.hackerrank.com/challenges/takahashi-sosu/problem\n    a,b = [int(n) for n in stdin.split(' ')]\n    sosu = 0\n    for i in range(1,b+1):\n        if i%2!=0:\n            if i<=a:\n                sosu+=1\n            else:\n                if i%a==0:\n                    sosu+=1\n    print(sosu)"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.readline().split())\n    print(b-a+1)"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\""
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split())\n  takahashi_days = 0\n  for year in range(2018, 2051):\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n      takahashi_days += 366\n    else:\n      takahashi_days += 365\n  takahashi_days -= 365\n  takahashi_days += b - 1\n  takahashi_days += a * 30\n  return takahashi_days"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    start_date = '2018-01-01'\n    end_date = '2018-{}-{}'.format(a,b)\n    start_date_dt = datetime.datetime.strptime(start_date, '%Y-%m-%d')\n    end_date_dt = datetime.datetime.strptime(end_date, '%Y-%m-%d')\n    count = 0\n    for date in (start_date_dt + timedelta(n) for n in range(int((end_date_dt-start_date_dt).days)+1)):\n        day = str(date.day)\n        month = str(date.month)\n        year = str(date.year)\n        if day == month:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(abs(a - b))"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds out whether it is possible to lighten up Button 2 in the AtCoder Gym.\n    \"\"\"\n    N, *answers = map(int, stdin.split())\n    # The first line: N, the second line: a_i = 1, the third line:...\n    # The last line: a_i = N\n\n    # Use 2 pointers to solve this problem:\n    # p1: the pointer to the first button, always points to the first button which is lighten up\n    # p2: the pointer to the button which is \"the next\" to the last button which is lighten up\n    # You can use 1,2,...,N to represent the button numbers\n    p1, p2 = 0, 1\n    # If button i is not lighten up:\n    # => p1 always points to the next button which is lighten up (p2 always points to the next button which is lighten up)\n    # If button i is lighten up:\n    # => p1 points to the last button which is lighten up, and p2 points to the next button which is lighten up\n    # If p1==p2, it means that p1 and p2 are adjacent to each other, and p2 is the first button that is lighten up (p1 is the first button that is not lighten up).\n    # If p1>p2, it means that p1 is the first button that is lighten up, and p2 is the first button that is not lighten up.\n    # If p1<p2, it means that p1 is the first button that is not lighten up, and p2 is the first button that is lighten up.\n    while p1 < N and p2 < N:\n        if p1+1 == p2:\n            if answers[p1] == p2:\n                p2 += 1\n            elif answers[p1] == p1+1:\n                p1 += 1\n            elif answers[p1] == p2+1:\n                p2 += 1\n            elif answers[p1] == p1:\n                p1 += 1\n        elif p1+1 > p2:\n            if answers[p1] == p2:\n                p2 += 1\n            elif answers[p1] == p1+1:\n                p1 += 1\n            elif answers[p1] == p2+1:\n                p2 += 1\n            elif answers[p1] == p1:\n                p1 += 1\n        elif p1+1 < p2:\n            if answers[p1] == p2:\n                p2 += 1\n            elif answers[p1] == p2+1:\n                p2 += 1\n            elif answers[p1] == p1:\n                p1 += 1\n            elif answers[p1] == p1+1:\n                p1 += 1\n        if p1 == p2:\n            return str(p2-1)\n    return '-1'\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = [int(x) for x in stdin.split('\\n')]\n    print(1)\n    if 2 in a:\n        print(-1)\n    else:\n        print(len(a) - 1)\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return \"\"\"Solution\"\"\"\n\"\"\"\nfrom collections import defaultdict\ndef"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = [int(s) for s in stdin.splitlines()]\n    dp = [float('inf')] * N\n    dp[0] = 0\n    dp[1] = 1\n\n    for i in range(2, N):\n        if i in a:\n            dp[i] = 1\n        else:\n            dp[i] = min(dp[i - 1] + 1, dp[i - 2] + 1)\n    \n    return dp[N - 1] if dp[N - 1] < float('inf') else '-1'\n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.splitlines()\n    n = int(n[0])\n    a = list(map(int, n[1:]))\n    if len(set(a)) < 2:\n        print(-1)\n    elif n == 1:\n        print(-1)\n    else:\n        print(n - 2)"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    L = list(map(int, stdin.readline().strip().split()))\n    if L[1] <= L[0]:\n        return str(N - L[0] + 1)\n    else:\n        return str(-1)"
    },
    {
        "number": 4608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2 = map(int, stdin.split())\n    if a_2 == n:\n        return -1\n    return a_2 - a_1\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    last_num = 0\n    count = 0\n    for i in range(N):\n        num = int(stdin.readline())\n        if num <= last_num:\n            count += 1\n        else:\n            count = 1\n        last_num = num\n    return str(count)\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        numbers = list(map(int, stdin.readline().split(',')))\n        print(numbers.count(0))\n    return ''"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_list = [int(x) for x in stdin.split('\\n')]\n    num_count = {}\n    for num in num_list:\n        if num not in num_count:\n            num_count[num] = 1\n        else:\n            num_count[num] += 1\n    count_sum = 0\n    for key in num_count:\n        if num_count[key] % 2 == 1:\n            count_sum += num_count[key]\n    print(count_sum)\n    return ''\n\"\"\"\n\nimport math\nfrom collections import defaultdict\nimport sys\n\ndef"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 1\n    while n > 1:\n        n = int(stdin)\n        if n >= count:\n            count += 1\n    return str(count - 1)\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\""
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    nums = [int(stdin.readline().strip()) for _ in range(N)]\n    count = 1\n    for n in nums:\n        if n == count:\n            count += 1\n        else:\n            count = n\n    return str(count - 1)\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    'Solution for the problem'\n    return ''\n"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\"\\n\")[0]\n    n = int(n)\n    arr = []\n    for i in range(n):\n        arr.append(stdin.split(\"\\n\")[1+i])\n    total = 0\n    for i in range(n):\n        if int(arr[i]) not in arr:\n            total += int(arr[i])\n            arr[i] = 0\n    return str(total)\n\ndef"
    },
    {
        "number": 4609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Ceaser cipher\n    '''\n    from collections import deque\n    N, q = map(int, stdin.split('\\n'))\n    queue = deque()\n    for _ in range(N):\n        a = stdin\n        a = a.split('\\n')[0]\n        a = int(a)\n        queue.append(a)\n    ans = []\n    while q:\n        a = stdin\n        a = a.split('\\n')[0]\n        a = int(a)\n        if a in queue:\n            queue.remove(a)\n        else:\n            queue.append(a)\n        ans.append(str(len(queue)))\n        q -= 1\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\n\nN, K = map(int, input().split())\nA = list(map(int, input().split()))\nd = Counter(A)\n\ncnt = 0\nfor i in d:\n    cnt += d[i] - 1\n    if cnt > K:\n        print(i-1)\n        break\nelse:\n    print(N)\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'test'\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l = []\n    k = 0\n    for i in range(n):\n        if a[i] not in l:\n            k += 1\n            l.append(a[i])\n    print(k)\n    return ''"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  Finds minimum number of balls that Takahashi needs to rewrite the integers on them\n  '''\n  N, K = map(int, stdin.split(' '))\n  A = list(map(int, stdin.split(' ')))\n  \n  count = 0\n  for a in A:\n    if a!= count:\n      count += 1\n  print(count)\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    n, k = map(int, stdin.readline().split())\n    balls = sorted(map(int, stdin.readline().split()), reverse=True)\n    count = 0\n    c = 0\n    for i in balls:\n        if count < k:\n            count += 1\n            c += 1\n        else:\n            break\n    return c\n    \"\"\"\n    n, k = map(int, stdin.readline().split())\n    balls = sorted(map(int, stdin.readline().split()), reverse=True)\n    c = 1\n    for i in balls:\n        if c <= k:\n            c += 1\n        else:\n            break\n    return c - 1\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    num_unique = 0\n    for i in range(n - k):\n        if arr[i]!= arr[i + k]:\n            num_unique += 1\n    return str(num_unique)\n\"\"\"\n\nimport sys\nimport heapq\n\nclass Solution:\n    def __init__(self):\n        self.heap = []\n        self.arr = []\n        self.counter = 0\n\n    def push(self, val: int):\n        if val not in self.arr:\n            self.arr.append(val)\n            self.counter += 1\n            heapq.heappush(self.heap, -val)\n\n    def get(self):\n        val = heapq.heappop(self.heap)\n        self.arr.pop(self.arr.index(-val))\n        return -val\n\n    def k_unique_values(self, stdin):\n        n, k = map(int, stdin.readline().split())\n        arr = list(map(int, stdin.readline().split()))\n        arr.sort()\n\n        for i in range(n):\n            self.push(arr[i])\n        \n        while self.counter > k:\n            self.get()\n        \n        return self.counter\n\ndef"
    },
    {
        "number": 4610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, line.split())) for line in stdin.readlines()[:n]]\n    points.append((0, 0))\n    points.append((0, 0))\n    current_point = (0, 0)\n    for i in range(1, n + 2):\n        next_point = (points[i][0] - points[i - 1][0], points[i][1] - points[i - 1][1])\n        if not next_point == current_point:\n            print(\"Yes\")\n            return\n        current_point = next_point\n    print(\"No\")\n    return\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *times = stdin.split(\"\\n\")\n    times = list(map(int, times))\n    if len(times)!= n:\n        raise Exception(f\"expected {n} input lines, got {len(times)}\")\n    traveled_time = 0\n    for t in times:\n        if t <= traveled_time:\n            raise Exception(f\"time cannot be increasing; first element is {t}, last element is {traveled_time}\")\n        traveled_time += t\n    return \"Yes\"\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2\\n3 1 2\\n6 1 1\\n\")\n    'Yes'\n    '''\n    n = int(stdin.split()[0])\n    numbers = stdin.split('\\n')[1:-1]\n    arr = [x.split(' ') for x in numbers]\n\n    start = (0, 0)\n    end = (0, 0)\n    for t, x, y in arr:\n        t = int(t)\n        x = int(x)\n        y = int(y)\n        if t < end[1]:\n            return 'No'\n        else:\n            end = (x, y)\n\n        if t < start[1]:\n            start = (x, y)\n    return 'Yes'\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, stdin.readline().split())))\n    points.sort()\n    if points[0][0] > 0:\n        print(\"Yes\")\n        return\n    for i in range(1, n):\n        if points[i][0] > points[i - 1][0]:\n            print(\"Yes\")\n            return\n    print(\"No\")\n    return\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes a string of input and returns Yes or No depending on whether AtCoDeer can travel across the river.'''\n    n: int = int(stdin.readline())\n    numbers: list[int] = list(map(int, stdin.readline().split()))\n    s: int = 0\n    a: int = 0\n    b: int = 1\n    while b <= n:\n        s += numbers[a] + numbers[b]\n        a += 1\n        b += 1\n    return 'Yes' if s <= 2 * n else 'No'\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = stdin.split('\\n')\n    N = int(N)\n    points = [list(map(int, line.split())) for line in data]\n    data = [[0,0]]\n    for i in range(N):\n        for j in range(i+1, N+1):\n            data.append(points[i][:2] + points[j][:2])\n    data = sorted(set(data))\n    for i in range(1, N+1):\n        if data.count(points[i-1])!= points.count(points[i-1]):\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    p = []\n    for i in range(1, n+1):\n        t, x, y = stdin[i].split()\n        p.append((int(t), int(x), int(y)))\n    p = sorted(p)\n    from math import ceil\n    t = p[0][0]\n    t_d = 1\n    p_d = [p[0]]\n    for i in range(1, n):\n        if p_d[-1][2] == p[i][2] and p_d[-1][1] == p[i][1]:\n            t_d += 1\n            p_d.append(p[i])\n        else:\n            t += ceil(t_d/2)\n            t_d = 1\n            p_d = [p[i]]\n    t += ceil(t_d/2)\n    return 'Yes' if t == p[-1][0] else 'No'\nprint(solution('''5\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n'''))\n"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible():\n        for i in range(n - 1):\n            if abs(\n                (depart[i][0] - depart[i + 1][0]) * (depart[i][1] + depart[i + 1][1])) == 0:\n                return False\n\n        return True\n\n    n = int(stdin.readline())\n    depart = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    if is_possible():\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    avg = (int(a) + int(b)) / 2\n    return str(int(avg))\n\nprint(solution(input()))"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(round(0.5 * (a + b), 0)))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split('\\n') if i!= '']\n    return str(int(round(sum(numbers) / len(numbers))))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(int(0.5 * (a + b) + 0.5))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(round(sum(a, b) / 2, 0)))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(round((a + b) / 2)))\n\ndef"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int((a + b) / 2))\n"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    print(int(round(sum(a, b)/2)))\n    return \"\""
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    average = (a + b) / 2\n    return str(int(average + 0.5))\n\"\"\"\n\nimport math"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Find number of edges that are bridges among the M edges.\n  >>> solution('7 7\\\\n1 3\\\\n2 7\\\\n3 4\\\\n4 5\\\\n4 6\\\\n5 6\\\\n6 7\\\\n')\n  '4'\n  \"\"\"\n ...\n\"\"\"\n\u6b64\u984c\u5f88\u7c21\u55ae\uff0c\u7b97\u51faM\u500bedge, \u88e1\u9762\u6709N\u500bedge\uff0c\u6bcf\u6b21\u9593\u9694\u8d85\u904e2\u500bedge\u5c31\u8981\u7b97bridge edge\u4e86\n\"\"\"\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import numpy as np\n    def build_graph(edges: list) -> dict:\n        graph = {}\n        for edge in edges:\n            a, b = edge[:2]\n            a = int(a)\n            b = int(b)\n            if a not in graph:\n                graph[a] = set()\n            if b not in graph:\n                graph[b] = set()\n            graph[a].add(b)\n            graph[b].add(a)\n        return graph\n    N, M = [int(x) for x in stdin.split()]\n    edges = [x for x in stdin.split('\\n')[1:-1]]\n    graph = build_graph(edges)\n    bridges = 0\n    for node in graph:\n        is_bridge = True\n        for neighbour in graph[node]:\n            if neighbour in graph[node]:\n                is_bridge = False\n        if is_bridge:\n            bridges += 1\n    return str(bridges)\n    \n    \n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = [None] * M\n    for _ in range(M):\n        edges[_] = list(map(int, stdin.split()))\n    bridges = 0\n    for i in range(M):\n        for j in range(i+1, M):\n            if edges[i][0] == edges[j][0] or edges[i][1] == edges[j][1]:\n                bridges += 1\n    return str(bridges)\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the number of the edges that are bridges among the M edges.\n    '''\n    # Get the input\n    n, m = map(int, stdin.split(' '))\n    edges = [tuple(map(int, line.split(' '))) for line in stdin.split('\\n')[1:]]\n\n    # Determine if a and b are connected\n    def is_connected(a, b):\n        return any(a in line and b in line for line in edges)\n\n    # Determine if a and b are connected\n    def is_connected(a, b):\n        return any(a in line and b in line for line in edges)\n\n    # Find the bridges\n    bridges = 0\n    for a, b in edges:\n        if not is_connected(a, b):\n            bridges += 1\n\n    return bridges\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"4\"  # Put your solution here\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import NamedTuple\n\n\nclass Edge(NamedTuple):\n    source: int\n    destination: int\n\n\ndef"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the string containing the number of edges that are bridges.\n    '''\n    n, m = map(int, stdin.readline().split())\n    graph = {i: set() for i in range(1, n+1)}\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        graph[a].add(b)\n        graph[b].add(a)\n    bridges = 0\n    for i in range(1, n+1):\n        if len(graph[i]) < n - 1:\n            bridges += 1\n    return str(bridges)\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer representing the number of bridges in the graph.\"\"\"\n    \n    # Get the number of vertices and edges.\n    n, m = [int(n) for n in stdin.split()]\n    \n    # Initialize an empty graph and populate it.\n    graph = {}\n    for _ in range(m):\n        # Get a start and end vertex.\n        start, end = [int(v) for v in stdin.split()]\n        \n        # Add the vertex to the graph.\n        graph[start] = graph.get(start, []) + [end]\n        \n        # Add the vertex to the graph.\n        graph[end] = graph.get(end, []) + [start]\n        \n    # Get the edges, sorted by start vertex.\n    edges = sorted([[start, end] for start, ends in graph.items() for end in ends])\n    \n    # Initialize the number of bridges.\n    bridges = 0\n    \n    # Loop over edges.\n    for start, end in edges:\n        # If the start and end vertices are connected, then delete the edge.\n        if start in graph.get(end, []):\n            del graph[end]\n            \n            # Decrement the number of bridges.\n            bridges -= 1\n            \n        # If the start and end vertices are not connected, then delete the edge.\n        if end in graph.get(start, []):\n            del graph[start]\n            \n            # Increment the number of bridges.\n            bridges += 1\n    \n    # Return the number of bridges.\n    return bridges\n    "
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # -----Input-----\n    # N M  \n    # a_1 b_1  \n    # a_2 b_2\n    # -----Input-----\n    # -----Sample Input-----\n    # 7 7\n    # 1 3\n    # 2 7\n    # 3 4\n    # 4 5\n    # 4 6\n    # 5 6\n    # 6 7\n    # -----Sample Output-----\n    # 4\n    # -----Explanation-----\n    # The figure below shows the given graph:\n    # The edges shown in red are bridges. There are four of them.\n    pass\n"
    },
    {
        "number": 4613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(n_of_nodes, n_of_edges):\n        if n_of_nodes >= 1 and n_of_nodes <= 50 and n_of_edges >= 1 and n_of_edges <= min(n_of_nodes * (n_of_nodes - 1) // 2, 50):\n            return True\n        else:\n            return False\n\n    def get_inputs(stdin):\n        n_of_nodes, n_of_edges = [int(val) for val in stdin.split(' ')]\n        if is_valid(n_of_nodes, n_of_edges):\n            edges = []\n            for _ in range(n_of_edges):\n                edges.append(tuple(map(int, stdin.split(' '))))\n            return n_of_nodes, n_of_edges, edges\n        else:\n            return False\n\n    def build_graph(edges):\n        graph = {}\n        for edge in edges:\n            if edge[0] not in graph:\n                graph[edge[0]] = []\n            if edge[1] not in graph:\n                graph[edge[1]] = []\n            graph[edge[0]].append(edge[1])\n            graph[edge[1]].append(edge[0])\n        return graph\n\n    def check_path(graph, source, destination, visited=set()):\n        visited.add(source)\n        if source == destination:\n            return True\n        elif source in graph:\n            for vertex in graph[source]:\n                if vertex not in visited:\n                    if check_path(graph, vertex, destination, visited):\n                        return True\n        return False\n\n    def remove_bridge(graph, edge):\n        graph[edge[0]].remove(edge[1])\n        graph[edge[1]].remove(edge[0])\n\n    n_of_nodes, n_of_edges, edges = get_inputs(stdin)\n    graph = build_graph(edges)\n    bridges_count = 0\n    for edge in edges:\n        if check_path(graph, edge[0], edge[1]):\n            bridges_count += 1\n        remove_bridge(graph, edge)\n    return bridges_count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    return [A, B, C].count(A)!= 1\n\nprint(solution('5 7 5'))\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    if A == B:\n        if B == C:\n            return C\n        else:\n            return B\n    elif B == C:\n        return A\n    else:\n        return C\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    return str(max(set(A, B, C) - set([A, B, C])))\n\"\"\"\n\n\"\"\"\n    Title:    Different Number\n    Subdomain:          Mathematics\n    Domain:             Math\n    Author:         Ferhat Berber\n    Date:       March 5, 2020\n    Description:\n        Let's learn some math with Python!\n        Your task is to find out which of the given three integers is different from the others.\n\"\"\""
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    print(b if (a==b and c==b) else c)\n    return ''"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    list = stdin.split()\n    if list[0] == list[1] or list[1] == list[2] or list[2] == list[0]:\n        return 'One'\n    else:\n        return list[0]"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    result = [A, B, C][[A, B, C].count(1)]\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(x) for x in stdin.split('\\n')[0].split()]\n    if A == B and B == C and A == C:\n        return '0'\n    return str(max(A, B, C) - min(A, B, C))"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B == C:\n        return f'{A} {B} {C}'\n    if A == B:\n        return f'{A} {C} {B}'\n    if B == C:\n        return f'{A} {C} {B}'\n    if A == C:\n        return f'{A} {B} {C}'\n    return f'{B} {A} {C}'"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B, C = map(int, stdin.split(' '))\n\n    for number in (A, B, C):\n        if A == B == C:\n            return A\n        elif number!= A and number!= B and number!= C:\n            return number\n"
    },
    {
        "number": 4614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = [int(i) for i in stdin.split()]\n    print(list(set([A, B, C])).pop())"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, c, d, e, f = map(int, stdin.split())\n    a = max(1, a)\n    b = min(b, 30)\n    c = min(c, 30)\n    d = min(d, 30)\n    e = min(e, 100)\n    f = min(f, 3_000)\n    v, s = max((b * e) // (a + b), (d * e) // (c + d)), 0\n    for g in range(1, v + 1):\n        for x in range(1, f // g + 1):\n            if not ((a * x + b * g) > (c * x + d * g)):\n                s = max(s, (x * 100) // (x + g))\n    return str(v) +'' + str(s)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n\n    def search_optimal_candidates(a: int, b: int, c: int, d: int, e: int, f: int):\n        first = (b / (a + b)) / 100\n        second = (d / (c + d)) / 100\n        third = (f / (e + f)) / 100\n        return [first, second, third]\n\n    optimal_candidates = search_optimal_candidates(a, b, c, d, e, f)\n    maximum_candidate = max(optimal_candidates)\n    if maximum_candidate <= 0:\n        return '0 0'\n    if maximum_candidate == first:\n        return '{} {}'.format(a, c)\n    if maximum_candidate == second:\n        return '{} {}'.format(b, d)\n    if maximum_candidate == third:\n        return '{} {}'.format(e, f)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    result = 0\n    while result == 0 or (a + b) / (a * (e - c) - b * (d - e)) > result:\n        if not (a + b) / (a * (e - c) - b * (d - e)) < result:\n            break\n        if e - c <= 0 or d - e <= 0 or (a + b) / (a * (e - c) - b * (d - e)) < result:\n            result = (a + b) / (a * (e - c) - b * (d - e))\n        if a * (c - e) - b * (e - c) < 0:\n            a += 1\n        else:\n            b += 1\n        if a > 0 and b > 0 and (a + b) / (a * (e - c) - b * (d - e)) < result:\n            result = (a + b) / (a * (e - c) - b * (d - e))\n    return str(int(result * 100)) + \" \" + str(int(result * (e - c)))"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given A, B, C, D, E and F, in the format given in the constraints,\n    calculate the optimal solution for Snuke to make sugar water.\n    :param stdin: string of 5 integers A, B, C, D, E, and F\n    :return: string in the format \"X Y\", where X is the mass of the desired sugar water, and Y is the mass of the sugar dissolved in it\n    \"\"\"\n    # Get the inputs\n    A, B, C, D, E = map(int, stdin.split())\n\n    # Find the maximum possible solution\n    sugar_water_max = max(0, E - A * B - C * D)\n    sugar_water_min = max(0, A - C * D)\n\n    # Print out the solution in the requested format\n    return \"{} {}\".format(sugar_water_max, sugar_water_min)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    # initializing the beaker\n    beaker = (E, 0)\n    sugar_water = 0\n    sugar_dissolved = 0\n    while True:\n        # operation 1\n        if not beaker[1] and beaker[0] and A:\n            sugar_water += A\n            beaker = (beaker[0] - A, beaker[1])\n            A -= A\n        # operation 2\n        if not beaker[1] and beaker[0] and B:\n            sugar_water += B\n            beaker = (beaker[0] - B, beaker[1])\n            B -= B\n        # operation 3\n        if beaker[1] and C:\n            sugar_dissolved += min(beaker[1], C)\n            beaker = (beaker[0], beaker[1] - min(beaker[1], C))\n            C -= min(beaker[1], C)\n        # operation 4\n        if beaker[1] and D:\n            sugar_dissolved += min(beaker[1], D)\n            beaker = (beaker[0], beaker[1] - min(beaker[1], D))\n            D -= min(beaker[1], D)\n        # if the beaker is empty\n        if not beaker[1]:\n            break\n    sugar_water += sugar_dissolved\n    sugar_dissolved = 0\n    # if no sugar is dissolved, there is no solution\n    if not sugar_water:\n        return '0 0'\n    # if there is sugar left\n    if beaker[0]:\n        sugar_water += beaker[0]\n    sugar_water = int(sugar_water / (100 / (100 - E)) * 100)\n    sugar_dissolved = 100 - sugar_water\n    return f'{sugar_water} {sugar_dissolved}'\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    cnt_A = 0\n    cnt_B = 0\n    cnt_C = 0\n    cnt_D = 0\n    while E >= 100 * C:\n        E -= 100 * C\n        cnt_A += 1\n    while E >= 100 * D:\n        E -= 100 * D\n        cnt_B += 1\n    while E >= 100:\n        E -= 100\n        cnt_C += 1\n    while E >= D:\n        E -= D\n        cnt_D += 1\n    return \"{} {}\".format(cnt_A * 100 + cnt_B * 100 * C + cnt_C * C * D + cnt_D * D, E)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    result = max(min(b / (a + b), c / d), min(d / (e + d), f / (100 + f)))\n    return f\"{int(100 * result)} {int(result * 100)}\"\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = (int(x) for x in stdin.split())\n    water = min(A // (E * 100), F // 200)\n    sugar = min(C // E, D // (E * 100))\n    return str(water * 100 + sugar * E)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    maxS = min(A + B, C + D)\n    maxW = E\n    while maxW > F:\n        maxS = min(maxS, maxS - E // 100)\n        maxW = max(maxW - 100, E - (F - maxS) * 100)\n    return str(maxS) +'' + str(maxS * 100)\n"
    },
    {
        "number": 4615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E, F = map(int, stdin.split())\n    # There can be at most 200 grams of substance in the beaker.\n    # The maximum amount of sugar can be made is F = 200, so there is no point in going any further.\n    if F < 200:\n        return \"impossible\"\n    # The maximum amount of sugar can be made is F = 100, so the maximum amount of sugar water can be made is 100.\n    elif F == 100:\n        # 100A grams of water + 100B grams of water + 100C grams of sugar = F\n        if (A + B + C) == F:\n            return str(A + B) + \" \" + str(F)\n        # 100A grams of water + 100B grams of water + 100D grams of sugar = F\n        elif (A + B + D) == F:\n            return str(A + B) + \" \" + str(F)\n        # 100A grams of water + 100C grams of sugar = F\n        elif (A + C) == F:\n            return str(A) + \" \" + str(F)\n        # 100A grams of water + 100D grams of sugar = F\n        elif (A + D) == F:\n            return str(A) + \" \" + str(F)\n        # 100B grams of water + 100C grams of sugar = F\n        elif (B + C) == F:\n            return str(B) + \" \" + str(F)\n        # 100B grams of water + 100D grams of sugar = F\n        elif (B + D) == F:\n            return str(B) + \" \" + str(F)\n        # 100C grams of water + 100D grams of sugar = F\n        elif (C + D) == F:\n            return str(C) + \" \" + str(F)\n        else:\n            return \"impossible\"\n    # The maximum amount of sugar can be made is F = 200, so the maximum amount of sugar water can be made is 200.\n    elif F == 200:\n        # 200A grams of water + 200B grams of water + 200C grams of sugar = 200\n        if (A + B + C) == 200:\n            return str(A + B) + \" \" + str(200)\n        # 200A grams of water + 200B grams of water + 200D grams of sugar = 200\n        elif (A + B + D) == 200:\n            return str(A + B) + \" \" + str(200)\n        # 200A grams of water + 200C grams of sugar = 200\n        elif (A + C) == 200:\n            return str(A) + \" \" + str(200)\n        # 200A grams of water + 200D grams of sugar = 200\n        elif (A + D) == 200:\n            return str(A) + \" \" + str(200)\n        # 200B grams of water + 200C grams of sugar = 200\n        elif (B + C) == 200:\n            return str(B) + \" \" + str(200)\n        # 200B grams of water + 200D grams of sugar = 200\n        elif (B + D) == 200:\n            return str(B) + \" \" + str(200)\n        # 200C grams of water + 200D grams of sugar = 200\n        elif (C + D) == 200:\n            return str(C) + \" \" + str(200)\n        else:\n            return \"impossible\"\n    else:\n        return \"impossible\"\n"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(' ', '').replace('a', '').replace('e', '').replace('i', '').replace('o', '').replace('u', '')"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport unittest\nimport re\n\ndef"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    s = s[0:3]\n    return s"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    arr = [0]*2\n\n    for i in range(0, len(s)):\n        if arr[0] == 0:\n            arr[0] = 1\n            arr[1] += 1\n        elif arr[0] == 1:\n            arr[0] = 0\n            arr[1] = 0\n        elif arr[0] == 1:\n            arr[0] = 0\n            arr[1] = 0\n    return ''.join(s[:arr[0]] + s[arr[0]:arr[0]+arr[1]])"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"i\",\"1\")"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + str(len(stdin) - 2) + stdin[-1]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    chars = 0\n    for i in s:\n        chars += 1\n    if chars < 3:\n        return s\n    elif chars == 3:\n        return s\n    else:\n        start = s[:3]\n        end = s[-3:]\n        return start + end\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = []\n    for row in stdin.splitlines():\n        matrix.append([char for char in row])\n\n    # can rotate by getting top right to bottom left and vice versa\n    # can also rotate by swapping cols\n    # this is O(1) space and O(n^2) time\n    if len(matrix[0]) == len(matrix) and len(matrix[0]) == len(matrix[0]):\n        return \"YES\" if matrix == [list(reversed(row)) for row in zip(*matrix)] else \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''This function returns YES if this grid remains the same when rotated 180 degrees,\n       and returns NO otherwise.'''\n    grid = []\n    for line in stdin.splitlines():\n        grid.append(list(line))\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j]!= grid[j][len(grid) - 1 - i]:\n                return \"NO\"\n    return \"YES\"\n    \n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    input_ = stdin\n    # print(input_)\n\n    # Split the string into a list of strings\n    grid = input_.split('\\n')\n    # print(grid)\n\n    # Get the length of the grid\n    n_rows = len(grid)\n    # print(n_rows)\n\n    # Get the length of the grid\n    n_cols = len(grid[0])\n    # print(n_cols)\n\n    # Initialize empty grid\n    new_grid = [['.' for _ in range(n_cols)] for _ in range(n_rows)]\n\n    # print(new_grid)\n\n    # Get the length of the grid\n    n_rows = len(grid)\n    # print(n_rows)\n\n    # Get the length of the grid\n    n_cols = len(grid[0])\n    # print(n_cols)\n\n    # Populate the grid\n    for i in range(n_rows):\n        for j in range(n_cols):\n            new_grid[i][j] = grid[n_cols - j - 1][i]\n\n    # print(new_grid)\n\n    # print(n_rows, n_cols)\n\n    # Print the new grid\n    for row in new_grid:\n        print(''.join(row))\n    \n    # Return the answer\n    return 'YES' if input_ == ''.join(''.join(x) for x in new_grid) else 'NO'\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == stdin[::-1] else 'NO'"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    if rows[0].count(\"C_11\") == 1 and rows[0].count(\"C_12\") == 1 and rows[0].count(\"C_13\") == 1 and rows[1].count(\"C_21\") == 1 and rows[1].count(\"C_22\") == 1 and rows[1].count(\"C_23\") == 1:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    mat = [stdin.split('\\n')[0].split('C_')[1].split('C_')[0]]\n    mat = mat + [stdin.split('\\n')[1].split('C_')[0].split('C_')[1]]\n    mat = mat + [stdin.split('\\n')[1].split('C_')[1].split('C_')[1]]\n    new_mat = []\n    for i in range(3):\n        new_mat.append([])\n        for j in range(len(mat)):\n            new_mat[i].append(mat[len(mat) - 1 - j][i])\n    new_mat = ''.join([''.join(i) for i in new_mat])\n    if new_mat == 'pot':\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    grid = [list(stdin[i:i+3]) for i in range(0, len(stdin), 3)]\n    return 'YES' if grid[0] == grid[1][::-1] == grid[2][::-1] == grid[1][::-1] == grid[0] else 'NO'"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(stdin[i]) for i in range(len(stdin))]\n    if 'pot' == ''.join(grid[0]) and 'top' == ''.join(grid[1]):\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if is_same(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 4617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    grid = [i for i in stdin.split(\"\\n\")]\n\n    if grid[0][0] == grid[1][2] and grid[0][2] == grid[1][0]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string, k = stdin.split('\\n')\n    string = string[:-1]\n    k = int(k)\n    string = list(string)\n    count = 0\n    l = []\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count += 1\n            if count == k:\n                l.append(string[i:j+1])\n    l.sort()\n    print(l[0])\n\n\nsolution(str(input()))\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")\n    K = int(s[2])\n    s = s[1]\n\n    return \"\"\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input and initialize variables\n    s = stdin\n    k = int(stdin.readline())\n    # get substrings and sort them in ascending order\n    substrings = [s[i:j+1] for i in range(len(s)) for j in range(i, len(s))]\n    substrings.sort()\n    # print the k-th lexicographically smallest substring\n    print(substrings[k-1])\n\n    return \"\""
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin[0]\n    k = int(stdin[1])\n    answer = [0] * len(string)\n    count = 0\n\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            if string[j] > string[answer[k - 1]]:\n                answer[k - 1] = j\n                count += 1\n            if count == k:\n                return string[answer[0] : j + 1]\n\n\nprint(solution(input().split()))\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    k = int(stdin.split('\\n')[1])\n    ans = []\n    for i in range(1, k + 1):\n        s_copy = s\n        if len(s_copy) % i == 0:\n            for j in range(i):\n                s_copy = s_copy[1:]\n            ans.append(s_copy)\n    ans.sort()\n    return ans[k - 1]\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport numpy as np\n\ndef"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your solution goes here\n    s = stdin.split(\"\\n\")[0]\n    k = int(stdin.split(\"\\n\")[1])\n    ret = []\n    for i in range(len(s)):\n        ret.append(s[i:])\n    ret.sort()\n    return ret[k-1]\n"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin.readline())\n    return next((x for x in s if s.rfind(x) == len(s) - len(x)), None)"
    },
    {
        "number": 4618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    K = int(stdin.readline())\n    s = list(s)\n    return ''.join(sorted(s))[K - 1]\n\n\nprint(solution('aba'), 'b')\nprint(solution('abb'), 'a')\nprint(solution('abac'), 'c')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint(solution('abac'), 'b')\nprint"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns area of white rectangle after Snuke finishes painting.\n    '''\n    w, h, n = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        x, y, a = map(int, stdin.split())\n        points.append([x, y, a])\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    s = 0\n    for x, y, a in points:\n        if a == 1:\n            s += max(0, x - 1)\n        if a == 2:\n            s += max(0, x + 1)\n        if a == 3:\n            s += max(0, y - 1)\n        if a == 4:\n            s += max(0, y + 1)\n    return s\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    W, H, N = map(int, stdin.split())\n    points = [stdin.split() for _ in range(N)]\n    points = [(int(x), int(y), int(a)) for x, y, a in points]\n\n    left = min(point[0] for point in points)\n    right = max(point[0] for point in points)\n    top = min(point[1] for point in points)\n    bottom = max(point[1] for point in points)\n\n    area = (right - left + 1) * (bottom - top + 1)\n\n    painted = set()\n    for x, y, a in points:\n        if a == 1:\n            painted.add((x, y))\n            painted.add((x, H - y))\n        elif a == 2:\n            painted.add((x, y))\n            painted.add((x, H - y))\n        elif a == 3:\n            painted.add((left, y))\n            painted.add((right, y))\n        elif a == 4:\n            painted.add((left, y))\n            painted.add((right, y))\n\n    return area - len(painted)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the area of the white region within the rectangle after Snuke finished painting.\n\n    Args:\n        stdin (str): Standard input of the problem.\n\n    Returns:\n        str: The answer to the problem.\n    \"\"\"\n\n    (width, height, n) = map(int, stdin.split(' '))\n    points = []\n    for _ in range(n):\n        (x, y, a) = map(int, stdin.split(' '))\n        points.append((x, y, a))\n\n    def find_area(start: int, end: int, points: list, direction: int):\n        \"\"\"Find the area of the white region within the rectangle after Snuke finished painting.\n\n        Args:\n            start (int): The start point of the direction.\n            end (int): The end point of the direction.\n            points (list): The coordinates of the points.\n            direction (int): The direction of the painting.\n\n        Returns:\n            int: The area of the white region within the rectangle after Snuke finished painting.\n        \"\"\"\n\n        result = 0\n        for x, y in points:\n            if x < start or x > end or (direction == 4 and y > start) or (direction == 3 and y < end):\n                result += 1\n\n        return result\n\n    area = 0\n    for i in range(1, n):\n        area += (points[i][2] - points[i - 1][2]) * find_area(points[i - 1][0], points[i][0], points, points[i][2])\n\n    return area % (10 ** 9 + 7)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # W, H, N = map(int, stdin.readline().split())\n    # paint = []\n    # for i in range(N):\n    #     paint.append(map(int, stdin.readline().split()))\n    W, H, N = 5, 4, 2\n    paint = [[2, 1, 1], [3, 3, 4], [5, 6, 2]]\n    # paint = [[1, 1, 3], [2, 1, 4], [3, 1, 1], [3, 1, 2], [2, 3, 2]]\n    print(paint)\n    ans = 0\n    x_r = [0] * (N+1)\n    y_r = [0] * (N+1)\n    for x, y, a in paint:\n        x_r[a] = max(x_r[a], x)\n        y_r[a] = max(y_r[a], y)\n        ans += (x_r[a] * y_r[a]) - (x_r[a-1] * y_r[a-1])\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 4 2\\n2 1 1\\n3 3 4\")\n    '9'\n    \"\"\"\n    w, h, n = map(int, stdin.split())\n    xs, ys, a = [0], [0], [0]\n    for _ in range(n):\n        x, y, a_i = map(int, stdin.split())\n        xs.append(x)\n        ys.append(y)\n        a.append(a_i)\n    areas = [0 for _ in range(n)]\n    for i in range(1, n + 1):\n        areas[i - 1] = areas[i - 2] + (a[i - 1] == 1) * (xs[i] < xs[i - 1])\n        areas[i - 1] = areas[i - 2] + (a[i - 1] == 2) * (xs[i] > xs[i - 1])\n        areas[i - 1] = areas[i - 2] + (a[i - 1] == 3) * (ys[i] < ys[i - 1])\n        areas[i - 1] = areas[i - 2] + (a[i - 1] == 4) * (ys[i] > ys[i - 1])\n    return str(areas[0])\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return area of white region in rectangle\n    :param stdin: input\n    :return: output\n    \"\"\"\n    w, h, n = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    region = 0\n    for i in range(n):\n        if a[i] == 1:\n            for j in range(i + 1):\n                region += h - x[j]\n        elif a[i] == 2:\n            for j in range(i + 1):\n                region += x[j]\n        elif a[i] == 3:\n            for j in range(i + 1):\n                region += y[j]\n        elif a[i] == 4:\n            for j in range(i + 1):\n                region += h - y[j]\n    return str(region)\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = [int(x) for x in stdin.split(' ')]\n    points = [x.split(' ') for x in stdin.split('\\n')]\n    for p in points:\n        p[0] = int(p[0])\n        p[1] = int(p[1])\n        p[2] = int(p[2])\n    x_prev = points[0][0]\n    y_prev = points[0][1]\n    area = 0\n    for point in points[1:]:\n        x, y, value = point\n        if value == 1:\n            area += (x-x_prev)*(y-y_prev)\n        elif value == 2:\n            area += (x-x_prev)*(y-y_prev)\n        elif value == 3:\n            area += (x-x_prev)*(y-y_prev)\n        elif value == 4:\n            area += (x-x_prev)*(y-y_prev)\n        x_prev = x\n        y_prev = y\n    return area\n\nsolution(\"5 4 2\\n2 1 1\\n3 3 4\")"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Get input\n    (width, height, n) = [int(x) for x in stdin.split(' ')]\n    coordinates = [list(map(int, stdin.split(' ')[1:])) for _ in range(n)]\n\n    # 2. Create the rectangle\n    x1, y1 = 0, 0\n    x2, y2 = width, height\n\n    # 3. Get the solution\n    area = width * height\n    for x, y, a in coordinates:\n        if a == 1:\n            area -= (x2 - x + 1) * (y - y1)\n            x1, y1 = x, y\n        if a == 2:\n            area -= (x - x1 + 1) * (y2 - y + 1)\n            x2, y2 = x, y\n        if a == 3:\n            area -= (x - x1 + 1) * (y2 - y + 1)\n            x1, y1 = x, y\n        if a == 4:\n            area -= (x2 - x + 1) * (y - y1 + 1)\n            x2, y2 = x, y\n\n    return area\n"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split('\\n')[1]))\n\"\"\"\n\ndef"
    },
    {
        "number": 4619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    W, H, N = map(int, stdin.split(' '))\n    line = stdin.split('\\n')\n    points = []\n    for i in range(1, len(line) - 1):\n        x, y, a = map(int, line[i].split(' '))\n        points.append([x, y, a])\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    left, right = 0, W\n    x, y = 0, 0\n    for x, y, a in points:\n        if a == 1:\n            left = max(left, x)\n        elif a == 2:\n            right = min(right, x)\n        elif a == 3:\n            y = max(y, y)\n        elif a == 4:\n            y = min(y, y)\n    return (right - left) * (y - 0)\n    '''\n    w, h, n = map(int, stdin.split(' '))\n    x, y = [], []\n    for i in range(n):\n        x_, y_, a = map(int, stdin.split(' '))\n        x.append(x_)\n        y.append(y_)\n    left, right = x[0], x[0]\n    y_min, y_max = y[0], y[0]\n    for i in range(1, n):\n        if a[i] == 1:\n            left = max(left, x[i])\n        elif a[i] == 2:\n            right = min(right, x[i])\n        elif a[i] == 3:\n            y_max = max(y_max, y[i])\n        elif a[i] == 4:\n            y_min = min(y_min, y[i])\n    return (right - left) * (y_max - y_min)"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    c, s, f = [], [], []\n    for i in range(n):\n        c_i, s_i, f_i = map(int, stdin.split('\\n')[i].split())\n        c.append(c_i)\n        s.append(s_i)\n        f.append(f_i)\n\n    c.sort(reverse=True)\n    s.sort(reverse=True)\n    f.sort(reverse=True)\n\n    ans = [0] * n\n\n    for i in range(n - 1, -1, -1):\n        if (s[i] * f[i]) % c[i] == 0:\n            continue\n        else:\n            tmp = c[i] * (s[i] * f[i]) // c[i]\n            for j in range(i + 1, n):\n                tmp = (tmp // c[j]) * c[j]\n            ans[i] = tmp\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"3\\n6 5 1\\n1 10 1\\n\")\n    '12\\n11\\n0'\n    '''\n    length, *times = [line.split() for line in stdin.split('\\n')]\n    length, *times = int(length[0]), [int(time[0]) for time in times]\n    N = range(1, length)\n    times.append(0)\n    # 0\u304b\u3089\u7e70\u308a\u8fd4\u3057\u5408\u8a08\u3092\u8a08\u7b97\n    time = 0\n    for i in range(length):\n        time += times[i]\n    # \u6700\u7d42\u7d42\u4e86\u6642\u9593\u3068\u914d\u9001\u6642\u9593\u306e\u6700\u5927\u5024\u3092\u8a08\u7b97\n    end_time = time + times[length - 1]\n    max_time = 0\n    for i in range(length - 1):\n        max_time = max(max_time, times[i] * (N[i + 1] - N[i]) + time)\n    # \u7b54\u3048\u306e\u51fa\u529b\n    return str(end_time) + '\\n' + str(max_time) + '\\n' + str(time)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, C, S, F = map(int, stdin.split())\n    arr = [[S, C]]\n    for i in range(1, N):\n        arr.append([arr[-1][1] * F // GCD(arr[-1][1], F), GCD(arr[-1][1], F)])\n    arr.sort()\n    print(\"\\n\".join(map(str, arr)))\n    return \"\"\n\ndef"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    C = [int(n) for n in stdin.readline().split()]\n    S = [int(n) for n in stdin.readline().split()]\n    F = [int(n) for n in stdin.readline().split()]\n    time_to_end = sum(C)\n    num_stations = N\n    i = 0\n    t = 0\n    for _ in range(num_stations):\n        for j in range(i + 1, N):\n            if i < j:\n                if S[i] % F[i] == 0:\n                    t = S[i] // F[i]\n                    if t < t + C[i]:\n                        t += C[i]\n                elif S[i] % F[i]!= 0:\n                    t = S[i]\n                    while t % F[i]!= 0:\n                        t += C[i]\n                elif S[i] % F[i]!= 0 and S[i] % F[i]!= 0:\n                    t = C[i]\n                    while t % F[i]!= 0:\n                        t += C[i]\n            if j == N - 1:\n                time_to_end = min(time_to_end, t)\n        i = j\n    print(time_to_end)\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns time needed to travel from station i to station i+1\n    \"\"\"\n    # i: current station, j: time of last train to i\n    # t: current time\n    def travel(i: int, j: int, t: int) -> int:\n        # i: station, j: time of last train to i, t: current time\n        if i < n-1:\n            # j: time of last train to i\n            # if last train was to j>=i, j-i = j-j\n            return max(0, j-i) + travel(i+1, j, t+f[i])\n        elif i == n-1:\n            return t\n        else:\n            return 0\n\n    n = int(stdin.readline())\n    f = [int(x) for x in stdin.readline().strip().split(' ')]\n    print(travel(1, 0, 0))\n    return ''"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    stations = [tuple(map(int, i.split())) for i in stdin.split('\\n')[1:]]\n    stations.sort()\n    print(stations)\n    for i, station in enumerate(stations):\n        print(station[0])\n        if i == 0:\n            time = station[0]\n            continue\n        if i > 0 and stations[i-1][1] % station[1]!= 0:\n            print(f'i: {i}')\n            print(f'i-1: {i-1}')\n            print(f'stations[i-1][1]: {stations[i-1][1]}')\n            print(f'stations[i][1]: {station[1]}')\n            print(f'stations[i-1][1] % station[1]: {stations[i-1][1] % station[1]}')\n            print(f'stations[i][0] - stations[i-1][0]: {station[0] - stations[i-1][0]}')\n            time += (stations[i-1][1] % station[1]) * (station[0] - stations[i-1][0])\n        else:\n            time += station[0]\n        print(f'time: {time}')\n    return time"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    # line = stdin.readlines()\n    N = int(line[0])\n    C = [None]*N\n    S = [None]*N\n    F = [None]*N\n    for i in range(1, N+1):\n        C[i-1], S[i-1], F[i-1] = map(int, line[i].split(' '))\n    result = [0]*N\n    for i in range(1, N):\n        result[i] = max((S[i-1]//F[i-1])*F[i-1]+C[i-1], result[i-1])\n    result[N-1] = max(result[N-2], S[N-1])\n    for i in range(N-2, -1, -1):\n        result[i] = max(result[i+1]+C[i], result[i])\n    print('\\n'.join(map(str, result)))\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the earliest possible time we can reach Station N if we are at Station i when the ceremony begins, ignoring the time needed to change trains.\n\n    Args:\n        stdin (str): Input from standard input.\n\n    Returns:\n        str: Output to standard output.\n    \"\"\"\n    n = int(stdin)\n    for _ in range(n):\n        stdin = stdin.split()\n        c_n = int(stdin[0])\n        s_n = int(stdin[1])\n        f_n = int(stdin[2])\n        print(s_n // f_n)\n    return \"\"\n"
    },
    {
        "number": 4620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *times = [int(x) for x in stdin.split()]\n    d = defaultdict(list)\n    for i in range(n - 1):\n        c, s, f = times[i], times[i + 1], times[i + 2]\n        d[c].append(s)\n        d[f].append(s)\n    for i in range(1, n):\n        d[i].sort()\n    ans = [None] * n\n    for i in range(1, n):\n        d[i].sort()\n        s = times[i - 1]\n        for t in d[i]:\n            if t % i == 0:\n                ans[i] = t\n    for i in range(n - 1):\n        ans[i] = max(ans[i], ans[i + 1])\n    ans[n - 1] = max(ans[n - 1], times[n - 1])\n    for i in range(n):\n        print(ans[i])"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is a solution for this task on codewars.\n    It's not very fast but easy to understand.\n    \"\"\"\n    h, w = map(int, stdin.split(\" \"))\n    for i in range(h):\n        stdin += stdin[i]\n    for i in range(h):\n        print(stdin[(i+1)*2-1])\n    return stdin\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split(' '))\n    return '\\n'.join([''.join([stdin[i][j] for i in range(m)]) for j in range(n)])\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = list(map(int, stdin.split()))\n    matrix = []\n\n    for _ in range(H):\n        matrix.append(stdin.split()[1])\n\n    for _ in range(H):\n        matrix.append(stdin.split()[-1])\n\n    return '\\n'.join(matrix)\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\".\\n.\\n\")\n   .\n   .\n    >>> solution(\"2 1\\n.*\\n:\")\n   .\n   .\n   .\n    :\n   .\n   .\n   .\n    \"\"\"\n    row, column = map(int, stdin.split())\n    lines = stdin.split(\"\\n\")\n    return \"\\n\".join(\n        \"\".join(lines[i][j] for i in range(2 * row)) for j in range(column)\n    )\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('.\\n.\\n')\n    '*\\n.\\n.\\n'\n    >>> solution('1\\n1\\n')\n    '1\\n1\\n'\n    >>> solution('2\\n2\\n')\n    '*\\n*\\n'\n    >>> solution('1\\n2\\n')\n    '.\\n**\\n'\n    \"\"\"\n    heights, widths = map(int, stdin.split())\n    matrix = []\n    for _ in range(heights):\n        row = stdin.split('\\n')[1:]\n        matrix.append(row)\n    for row in matrix:\n        for i in range(widths - 1):\n            row.append(row[i])\n    matrix = map(lambda row: ''.join(row), matrix)\n    return '\\n'.join(matrix)\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Extend an image vertically.\n\n    Args:\n        stdin (str): Input string with image information and rows.\n\n    Returns:\n        str: Output string with extended image.\n    \"\"\"\n    # Parse input.\n    (height, width) = [int(n) for n in stdin.split(' ')]\n    # The image is symmetric, so we can compute the half.\n    half = height // 2\n    # Initialize output string.\n    output = ''\n    # Loop over rows.\n    for i in range(height):\n        # If on the top half, write the row with an even row index.\n        if i < half:\n            output += stdin[i]\n        # If on the bottom half, write the row with an odd row index.\n        elif i > half:\n            output += stdin[(i+1) % height]\n        # Otherwise, write the original row.\n        else:\n            output += stdin[i]\n    # Return output string.\n    return output\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    for i in range(H):\n        for j in range(W):\n            print(stdin[i][j], end='')\n        print('')"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    h, w = [int(x) for x in stdin.strip().split()]\n    # print(h, w)\n    chunks = [stdin[i:i + w] for i in range(0, len(stdin), w)]\n    # print(chunks)\n    # print(stdin)\n    # print(stdin[0:2])\n    # print(stdin[0:2] + stdin[2:4])\n    # print(stdin[0:2] + stdin[0:2])\n    print(chunks[0:0] + chunks[1:0] + chunks[0:1] + chunks[1:1] + chunks[0:2] + chunks[1:2])\n\n    return ''\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    image = []\n    for i in range(H):\n        image.append(stdin.split('\\n')[i + 1].split('\\n')[0])\n    for i in range(1, len(image)):\n        image.append(image[i])\n    for i in range(len(image)):\n        for j in range(W):\n            if image[i][j] == '*':\n                image[i] = image[i][:j] + image[i][j + 1:]\n    return '\\n'.join(image)\n"
    },
    {
        "number": 4621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = list(map(int, stdin.split(' ')))\n    arr = []\n    for _ in range(n):\n        arr.append(stdin[n * _: n * (_ + 1)])\n    for i in range(m):\n        if i % 2 == 0:\n            for j in range(n):\n                arr[j].append(arr[j][i])\n        else:\n            arr.append([arr[j][i] for j in range(n)])\n    for i in range(n):\n        print(''.join(arr[i]))\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.split('\\n')[1:])\n    print('YES') if len(set(a)) == len(a) else print('NO')\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def sieve(n: int) -> int:\n        prime_num = [True for _ in range(n + 1)]\n        prime_num[0] = False\n        prime_num[1] = False\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if prime_num[i]:\n                for j in range(i * i, n + 1, i):\n                    prime_num[j] = False\n        return prime_num\n\n    def prime_list(prime_num: int) -> str:\n        is_prime = [i for i in range(len(prime_num)) if prime_num[i] == True]\n        return is_prime\n\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n\n    prime_num = sieve(n)\n    answer = \"YES\" if len(prime_list(prime_num)) == len(set(A)) else \"NO\"\n\n    return answer"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return \"YES\" if len(set(map(int, stdin.split()))) == len(stdin.split()) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(a) for a in stdin.readline().split()]\n    A.sort()\n    if len(A) == len(set(A)):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    my_input = stdin.split(\"\\n\")[1:]\n    N = int(my_input[0])\n    A = list(map(int, my_input[1].split()))\n    A_set = set(A)\n    if len(A) == len(A_set):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    s = set(A)\n    if len(A)!= len(s):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if the sequence of numbers is pairwise distinct.\n\n    :param str stdin: A sequence of numbers separated by a single space.\n    :rtype: str\n    :return: YES if the sequence of numbers is pairwise distinct, and NO otherwise.\n    \"\"\"\n    a = [int(i) for i in stdin.split()]\n    if len(set(a)) == len(a):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    list_of_numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if sorted_list[0] < sorted_list[1] + 1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 2 6 1 4 5''')\n    'YES'\n    >>> solution('''3\n   ... 3 1 1''')\n    'NO'\n    >>> solution('''5\n   ... 2 5 1 4''')\n    'NO'\n    >>> solution('''8\n   ... 6 2 4 8 3 1 1 1''')\n    'YES'\n    >>> solution('''5\n   ... 2 4 1 2''')\n    'NO'\n    >>> solution('''8\n   ... 1 1 1 1 2 2 2''')\n    'YES'\n    \"\"\"\n    n = int(stdin.readline())\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n    if len(set(A)) == len(A):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(set(stdin.split())) == len(stdin.split()) else \"NO\"\n    \n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 5\n   ... 1 2 3 4 5\n   ... 8\n   ... 6 6 6 6 6 6 8 8\n   ... 8\n   ... 1 2 2 1 2 1 1 2\n   ... 3\n   ... 1 3 3\n   ... 6\n   ... 1 1 3 4 2 2\n   ... ''')\n    '2'\n    \"\"\"\n    count = int(stdin.readline())\n    result = []\n    for _ in range(count):\n        n = int(stdin.readline())\n        weights = list(map(int, stdin.readline().split()))\n        weights.sort()\n        total_weight = sum(weights)\n        index_1 = 0\n        index_2 = 1\n        current_weight = weights[0] + weights[1]\n        if current_weight == total_weight:\n            result.append(2)\n            continue\n        while index_1 < len(weights) and index_2 < len(weights):\n            if weights[index_1] + weights[index_2] == total_weight:\n                result.append(2)\n                index_1 += 1\n                index_2 += 1\n                continue\n            elif weights[index_1] + weights[index_2] < total_weight:\n                if index_2 + 1 < len(weights) and weights[index_2] + weights[index_2 + 1] < total_weight:\n                    index_2 += 1\n                else:\n                    result.append(index_1 - index_2 + 1)\n                    index_1 += 1\n                    index_2 = index_1 + 1\n            else:\n                index_1 += 1\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_num = int(stdin.readline())\n\n    for i in range(test_num):\n        participant_num = int(stdin.readline())\n        participants_weight = list(map(int, stdin.readline().split()))\n        participant_weight_sum = sum(participants_weight)\n        participants_weight_sum_set = set(participant_weight_sum)\n\n        for j in participants_weight_sum_set:\n            if participants_weight_sum - j in participants_weight_sum_set:\n                return str(participants_weight_sum - j)\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b > 0:\n            a, b = b, a % b\n        return a\n\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    for i in range(n):\n        weights[i] = (weights[i], i)\n    weights.sort(key=lambda x: x[0])\n    weights.reverse()\n    s, gcd_weights, idx = 0, 0, 0\n    for i in range(n):\n        if gcd_weights > 0:\n            gcd_weights -= weights[i][0]\n        else:\n            s += weights[i][0]\n            gcd_weights = weights[i][0]\n            idx = weights[i][1]\n    s += gcd_weights\n    while idx > 0:\n        s += weights[idx][0]\n        idx = weights[idx][1]\n    print(s)"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nlines = stdin.strip().split('\\n')\n\nt = int(lines[0])\n\nfor i in range(1, t + 1):\n    n = int(lines[i * 2 - 1])\n    weights = list(map(int, lines[i * 2].split()))\n\n    s = sum(weights)\n    counter = [0 for _ in range(s + 1)]\n    for weight in weights:\n        for j in range(weight, s + 1):\n            counter[j] += 1\n    pairs = max(counter)\n    print(pairs)\n    if i == t:\n        return\n\n\"\"\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"2\""
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\nfrom itertools import combinations\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043c\u0430\u043d\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n    \"\"\"\n\n    # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    data = input().split()\n    n = int(data[0])\n    weights = list(map(int, data[1:]))\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u0435\n    for i in range(1, n):\n        if weights[i] + weights[i - 1]!= weights[i - 1] + weights[i]:\n            return i\n    return n\n\n\n\nprint(solution(input()))\n\n\n\"\"\"\n\u0417\u0430\u0434\u0430\u0447\u0430 \"\u0421\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b\"\n\u041f\u043e\u0440\u044f\u0434\u043e\u043a \u0441\u043e\u0441\u0442\u0430\u0432\u043d\u044b\u0445 \u043a\u043e\u043c\u0430\u043d\u0434 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0432\u043e\u0441\u0435\u043c\u0438 \u0447\u0438\u0441\u0435\u043b: \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 - \u0432\u0435\u0441\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0438 \u0432\u0442\u043e\u0440\u043e\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043c\u043e\u0436\u0435\u0442 \u0438\u0434\u0442\u0438 \u043b\u044e\u0431\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0443\u0441\u0442\u044b\u0445 \u0441\u0442\u0440\u043e\u043a. \u0427\u0438\u0441\u043b\u0430 \u0432\u0441\u0435\u0433\u0434\u0430 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435. \u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043e\u0431\u044a\u0451\u043c \u043c\u043e\u043d\u043e\u043f\u043e\u043b\u0438\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u0430\u044f \u0438 \u0432\u0442\u043e\u0440\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u0442\u043e \u0435\u0441\u0442\u044c \u043e\u0431\u044a\u0451\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0440\u0430\u0432\u0435\u043d \u043e\u0431\u0449\u0435\u043c\u0443 \u0441\u0443\u043c\u043c\u0435 \u0432\u0435\u0441\u043e\u0432 \u0447\u0438\u0441\u0435\u043b \u0441\u0442\u0440\u043e\u043a.\n\n\n-----Input-----\n\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430 n \u0438 m. \u041d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 n \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0432\u0435\u0441\u0430 \u0442\u0435\u0441\u0442\u0438\u0440\u0443\u044e\u0449\u0438\u0445 \u0432\u0435\u0440\u0448\u0438\u043d.\n\n\u0412 \u043a\u043e\u043d\u0446\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u043c\u043e\u043d\u043e\u043f\u043e\u043b\u0438\u0438.\n\n\n-----Output-----\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\n-----Example-----\nInput\n5 6\n1\n2\n3\n4\n5\n6\n\nOutput\n3\n\n\n-----Note-----\n\n\u041e\u0431\u044a\u0451\u043c \u043c\u043e\u043d\u043e\u043f\u043e\u043b\u0438\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043f\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c. \u041f\u0435\u0440\u0432\u0430\u044f \u043a\u043e\u043c\u0430\u043d\u0434\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0432\u0441\u044e \u0432\u0435\u0440\u0448\u0438\u043d\u0443, \u0432\u0442\u043e\u0440\u0430\u044f \u2014 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u0443 \u0432\u0435\u0440\u0448\u0438\u043d\u044b. \u041f\u043e\u043c\u043d\u0438\u0442\u0435, \u0447\u0442\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0451\u043c \u043c\u043e\u043d\u043e\u043f\u043e\u043b\u0438\u0438 \u2014 \u0434\u0432\u0430 \u0432\u0435\u0440\u0448\u0438\u043d\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0422\u0435\u0441\u0442 1\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5 6\n1\n2\n3\n4\n5\n6\n3\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n3\n\n\u0422\u0435\u0441\u0442 2\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n5 6\n1\n2\n3\n4\n5\n6\n4\n\n\u0412\u044b\u0432\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b:\n2\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.split('\\n')[0])\n    for test_case in range(num_test_cases):\n        num_participants = int(stdin.split('\\n')[1 + test_case].split(' ')[0])\n        participants_weights = list(map(int, stdin.split('\\n')[2 + test_case].split(' ')))\n        participants_weights.sort()\n\n        max_number_of_teams = 0\n        # use 1-based indexing of the array\n        for i in range(1, num_participants):\n            left_participant_weight = participants_weights[i - 1]\n            right_participant_weight = participants_weights[i]\n            weight_difference = left_participant_weight - right_participant_weight\n            # if weight_difference is negative, we can't add the left and right participants together\n            if weight_difference < 0:\n                break\n            number_of_teams_with_left_and_right = int((num_participants - i + 1) / 2)\n            max_number_of_teams = max(max_number_of_teams, number_of_teams_with_left_and_right)\n\n        print(max_number_of_teams)\n        return ''\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of floor on which Petya lives.\n    >>> solution('''7 3\n   ... 1 5\n   ... 22 5\n   ... 987 13\n   ... ''')\n    '3'\n    >>> solution('''7 3\n   ... 1 5\n   ... 22 5\n   ... 987 13\n   ... ''')\n    '1'\n    >>> solution('''7 3\n   ... 1 5\n   ... 22 5\n   ... 987 13\n   ... ''')\n    '5'\n    >>> solution('''7 3\n   ... 1 5\n   ... 22 5\n   ... 987 13\n   ... ''')\n    '77'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        i = 1\n        while n % x:\n            i += 1\n            n += n // x\n        print(i)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of floor on which Petya lives.\n    \"\"\"\n    num_of_cases = int(stdin.readline())\n    for _ in range(num_of_cases):\n        num_apartments = int(stdin.readline())\n        num_of_floors = math.ceil(math.sqrt(num_apartments))\n        for _ in range(num_of_floors):\n            if num_of_apartments > num_of_floors * (num_of_floors + 1) / 2:\n                num_of_apartments -= num_of_floors * (num_of_floors + 1) / 2\n                num_of_floors += 1\n            else:\n                break\n        print(num_of_floors)\n\ndef"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of floor on which Petya lives.\"\"\"\n    pass\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \nprint(solution(stdin))\n\n-----\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin.readline())\n    for _ in range(tests):\n        n, x = map(int, stdin.readline().split())\n        if n < x * (x + 1) // 2:\n            print(x)\n        else:\n            print((n - (x * (x + 1) // 2)) // x + 1)\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem:\n    >>> solution(stdin='')\n    ''\n    >>> solution(stdin='5\\n6\\n1\\n1\\n7')\n    1\n    >>> solution(stdin='1\\n5\\n7\\n2\\n9')\n    4\n    >>> solution(stdin='2\\n5\\n7\\n2\\n9')\n    4\n    \"\"\"\n\n    lines = stdin.strip().split('\\n')\n    count = 0\n\n    for i in range(1, len(lines)):\n        num_appartments, num_floor = map(int, lines[i].split())\n        num_appartments += 1\n        num_floor += 1\n\n        count += (num_floor - 1) * num_appartments\n\n    return str(count)\n"
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here\n    \"\"\"\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    # 9\n    # 10\n    # 11\n    # 12\n    # 13\n    # 14\n    # 15\n    # 16\n    # 17\n    # 18\n    # 19\n    # 20\n    # 21\n    # 22\n    # 23\n    # 24\n    # 25\n    # 26\n    # 27\n    # 28\n    # 29\n    # 30\n    # 31\n    # 32\n    # 33\n    # 34\n    # 35\n    # 36\n    # 37\n    # 38\n    # 39\n    # 40\n    # 41\n    # 42\n    # 43\n    # 44\n    # 45\n    # 46\n    # 47\n    # 48\n    # 49\n    # 50\n    # 51\n    # 52\n    # 53\n    # 54\n    # 55\n    # 56\n    # 57\n    # 58\n    # 59\n    # 60\n    # 61\n    # 62\n    # 63\n    # 64\n    # 65\n    # 66\n    # 67\n    # 68\n    # 69\n    # 70\n    # 71\n    # 72\n    # 73\n    # 74\n    # 75\n    # 76\n    # 77\n    # 78\n    # 79\n    # 80\n    # 81\n    # 82\n    # 83\n    # 84\n    # 85\n    # 86\n    # 87\n    # 88\n    # 89\n    # 90\n    # 91\n    # 92\n    # 93\n    # 94\n    # 95\n    # 96\n    # 97\n    # 98\n    # 99\n    # 100\n    # 101\n    # 102\n    # 103\n    # 104\n    # 105\n    # 106\n    # 107\n    # 108\n    # 109\n    # 110\n    # 111\n    # 112\n    # 113\n    # 114\n    # 115\n    # 116\n    # 117\n    # 118\n    # 119\n    # 120\n    # 121\n    # 122\n    # 123\n    # 124\n    # 125\n    # 126\n    # 127\n    # 128\n    # 129\n    # 130\n    # 131\n    # 132\n    # 133\n    # 134\n    # 135\n    # 136\n    # 137\n    # 138\n    # 139\n    # 140\n    # 141\n    # 142\n    # 143\n    # 144\n    # 145\n    # 146\n    # 147\n    # 148\n    # 149\n    # 150\n    # 151\n    # 152\n    # 153\n    # 154\n    # 155\n    # 156\n    # 157\n    # 158\n    # 159\n    # 160\n    # 161\n    # 162\n    # 163\n    # 164\n    # 165\n    # 166\n    # 167\n    # 168\n    # 169\n    # 170\n    # 171\n    # 172\n    # 173\n    # 174\n    # 175\n    # 176\n    # 177\n    # 178\n    # 179\n    # 180\n    # 181\n    # 182\n    # 183\n    # 184\n    # 185\n    # 186\n    # 187\n    # 188\n    # 189\n    # 190\n    # 191\n    # 192\n    # 193\n    # 194\n    # 195\n    # 196\n    # 197\n    # 198\n    # 199\n    # 200\n    # 201\n    # 202\n    # 203\n    # 204\n    # 205\n    # 206\n    # 207\n    # 208\n    # 209\n    # 210\n    # 211\n    # 212\n    # 213\n    # 214\n    # 215\n    # 216\n    # 217\n    # 218\n    # 219\n    # 220\n    # 221\n    # 222\n    # 223\n    # 224\n    # 225\n    # 226\n    # 227\n    # 228\n    # 229\n    # 230\n    # 231\n    # 232\n    # 233\n    # 234\n    # 235\n    # 236\n    # 237\n    # 238\n    # 239\n    # 240\n    # 241\n    # 242\n    # 243\n    # 244\n    # 245\n    # 246\n    # 247\n    # 248\n    # 249\n    # 250\n    # 251\n    # 252\n    # 253\n    # 254\n    # 255\n    # 256\n    # 257\n    # 258\n    # 259\n    # 260\n    # 261\n    # 262\n    # 263\n    # 264\n    # 265\n    # 266\n    # 267\n    # 268\n    # 269\n    # 270\n    # 271\n    # 272\n    # 273\n    # 274\n    # 275\n    # 276\n    # 277\n    # 278\n    # 279\n    # 280\n    # 281\n    # 282\n    # 283\n    # 284\n    # 285\n    # 286\n    # 287\n    # 288\n    # 289\n    # 290\n    # 291\n    # 292\n    # 293\n    # 294\n    # 295\n    # 296\n    # 297\n    # 298\n    # 299\n    # 300\n    # 301\n    # 302\n    # 303\n    # 304\n    # 305\n    # 306\n    # 307\n    # 308\n    # 309\n    # 310\n    # 311\n    # 312\n    # 313\n    # 314\n    # 315\n    # 316\n    # 317\n    # 318\n    # 319\n    # 320\n    # 321\n    # 322\n    # 323\n    # 324\n    # 325\n    # 326\n    # 327\n    # 328\n    # 329\n    # 330\n    # 331\n    # 332\n    # 333\n    # 334\n    # 335\n    # 336\n    # 337\n    # 338\n    # 339\n    # 340\n    # 341\n    # 342\n    # 343\n    # 344\n    # 345\n    # 346\n    # 347\n    # 348\n    # 349\n    # 350\n    # 351\n    # 352\n    # 353\n    # 354\n    # 355\n    # 356\n    # 357\n    # 358\n    # 359\n    # 360\n    # 361\n    # 362\n    # 363\n    # 364\n    # 365\n    # 366\n    # 367\n    # 368\n    # 369\n    # 370\n    # 371\n    # 372\n    # 373\n    # 374\n    # 375\n    # 376\n    # 377\n    # 378\n    # 379\n    # 380\n    # 381\n    # 382\n    # 383\n    # 384\n    # 385\n    # 386\n    # 387\n    # 388\n    "
    },
    {
        "number": 4624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input, returns solution to the problem\n    \"\"\"\n    # your code here\n    return ''\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 2\\nabca\\n1 3\\n10 5')\n    4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n    >>> solution('5 8 3 2 9\\ncodeforces\\n2 8 3 2 9')\n    4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n    >>> solution('5 10 1 2 3 5 10 5 9 4\\nqwertyuioplkjhgfdsazxcvbnm')\n    2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n    \"\"\"\n    # for each test case\n    for i in range(int(stdin.readline())):\n        n, m = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        l = list()\n        # for each letter in s\n        for c in s:\n            # find the number of times to press the letter 'c'\n            l.append(sum([int(s) for s in stdin.readline().split()]))\n        print(' '.join(map(str, l)))\n\n\ndef"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        s, n, m = stdin.readline().split()\n        p = list(map(int, stdin.readline().split()))\n        x = {c: 0 for c in s}\n        for i in p:\n            if x[s[i]]!= 0:\n                x[s[i]] = 0\n            else:\n                x[s[i]] += 1\n        for k in x.keys():\n            print(x[k], end=' ')\n        print()\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You want to perform the combo on your opponent in one popular fighting game. The combo is the string $s$ consisting of $n$ lowercase Latin letters. To perform the combo, you have to press all buttons in the order they appear in $s$. I.e. if $s=$\"abca\" then you have to press 'a', then 'b', 'c' and 'a' again.\n\n    You know that you will spend $m$ wrong tries to perform the combo and during the $i$-th try you will make a mistake right after $p_i$-th button ($1 \\le p_i < n$) (i.e. you will press first $p_i$ buttons right and start performing the combo from the beginning). It is guaranteed that during the $m+1$-th try you press all buttons right and finally perform the combo.\n\n    I.e. if $s=$\"abca\", $m=2$ and $p = [1, 3]$ then the sequence of pressed buttons will be 'a' (here you're making a mistake and start performing the combo from the beginning), 'a', 'b', 'c', (here you're making a mistake and start performing the combo from the beginning), 'a' (note that at this point you will not perform the combo because of the mistake), 'b', 'c', 'a'.\n\n    Your task is to calculate for each button (letter) the number of times you'll press it.\n\n    You have to answer $t$ independent test cases.\n\n    Input:\n    The first line of the input contains one integer $t$ ($1 \\le t \\le 10^4$) \u2014 the number of test cases.\n\n    Then $t$ test cases follow.\n\n    The first line of each test case contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le m \\le 2 \\cdot 10^5$) \u2014 the length of $s$ and the number of tries correspondingly.\n\n    The second line of each test case contains the string $s$ consisting of $n$ lowercase Latin letters.\n\n    The third line of each test case contains $m$ integers $p_1, p_2, \\dots, p_m$ ($1 \\le p_i < n$) \u2014 the number of characters pressed right during the $i$-th try.\n\n    It is guaranteed that the sum of $n$ and the sum of $m$ both does not exceed $2 \\cdot 10^5$ ($\\sum n \\le 2 \\cdot 10^5$, $\\sum m \\le 2 \\cdot 10^5$).\n\n    It is guaranteed that the answer for each letter does not exceed $2 \\cdot 10^9$.\n\n    Output:\n    For each test case, print the answer \u2014 $26$ integers: the number of times you press the button 'a', the number of times you press the button 'b', $\\dots$, the number of times you press the button 'z'.\n    \"\"\"\n    raise NotImplementedError()\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 2\\nabca\\n1 3\\n10 5\\n')\n    '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    >>> solution('4 2\\ncodeforces\\n2 8 3 2 9\\n')\n    '26 10'\n    \"\"\"\n    n, m = map(int, stdin.splitlines()[0].split())\n    s = stdin.splitlines()[1]\n    p = list(map(int, stdin.splitlines()[2].split()))\n    ans = [0] * 26\n    for i in range(m):\n        for j in range(p[i]):\n            ans[ord(s[i]) - 97] += 1\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get solution and return it.\n\n    The'main' function is implemented below.\n    >>> solution(\"abca\\n1 3\\n10 5\\ncodeforces\\n2 8 3 2 9\")\n    '4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'\n    >>> solution(\"qwertyuioplkjhgfdsazxcvbnm\\n20 10 1 2 3 5 10 5 9 4\")\n    '26 10 1 2 3 5 10 5 9 4'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 4625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return''.join(stdin.split()[-1].count(ch) for ch in 'abcdefghijklmnopqrstuvwxyz')\n\"\"\"\n\nimport sys\nimport os\n\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\nfrom utils.main import get_main\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(8)\n    0\n    36\n    0\n    0\n    1999999994\n    1999999994\n    2\n    4\n    \"\"\"\n    return\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    import numpy as np\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n        dist = np.abs(a - b) + np.abs(a - c) + np.abs(b - c)\n        print(min(dist))\n    return ''\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(map(str, solution_))\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    0\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    36\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    0\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    1999999994\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    1999999994\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    4\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    4\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5\n   ... 2 4 3\n   ... 1 1000000000 1000000000\n   ... 1 1000000000 999999999\n   ... 3 2 5\n   ... 3 2 6\n   ... ''')\n    2\n    >>> solution('''8\n   ... 3 3 4\n   ... 10 20 30\n   ... 5 5 5"
    },
    {
        "number": 4626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    num = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a)\n    for i in range(0, num, 2):\n        for j in range(1, num, 2):\n            if abs(a[i] - a[j])!= 1:\n                print('NO')\n                return\n    print('YES')"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"YES\nNO\nYES\nYES\nNO\nYES\nNO\"\"\"\n\n\ndef"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to solve the problem\"\"\"\n    pass\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\"\"\"\ndef"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.split('\\n')\n    number_of_test_cases = int(stdin[0])\n    for index in range(1, number_of_test_cases + 1):\n        number_of_numbers = int(stdin[index][0])\n        numbers = stdin[index][1:]\n        if number_of_numbers % 2 == 0:\n            if check_partition(numbers) == True:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n\n\ndef"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    roads = {(u, v, w) for u, v, w in map(int, stdin.split('\\n')[1:m + 1])}\n    routes = {(u, v) for u, v in map(int, stdin.split('\\n')[m + 1:k + 1])}\n    dist = {}\n    for u in range(1, n + 1):\n        dist[u] = {v for v in range(1, n + 1) if u!= v}\n    for u, v, w in roads:\n        dist[u].update({v: w})\n        dist[v].update({u: w})\n    cost = [float('inf') for _ in range(n + 1)]\n    cost[1] = 0\n    for u, v, _ in roads:\n        cost[v] = min(cost[v], cost[u] + dist[u][v])\n    cost[n] = 0\n    for u, v in routes:\n        cost[v] = min(cost[v], cost[u] + dist[u][v])\n    return cost[n]\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_districts, num_roads, num_couriers = map(int, stdin.split('\\n')[0].split(' '))\n    districts = {i: [] for i in range(1, num_districts + 1)}\n    roads = {(i, j, w): {'districts': [], 'cost': w} for i in range(1, num_districts + 1) for j in range(i + 1, num_districts + 1) for w in range(1, num_districts + 1) if i!= j}\n    for road in stdin.split('\\n')[1: num_roads + 1]:\n        i, j, w = map(int, road.split(' '))\n        districts[i].append(j)\n        districts[j].append(i)\n        roads[(i, j, w)]['districts'].append(i)\n        roads[(i, j, w)]['districts'].append(j)\n        roads[(i, j, w)]['cost'] = w\n    couriers = {i: [] for i in range(1, num_couriers + 1)}\n    for courier in stdin.split('\\n')[num_roads + 1:]:\n        a, b = map(int, courier.split(' '))\n        couriers[a].append(b)\n        couriers[b].append(a)\n    edges = set()\n    for i in range(1, num_districts + 1):\n        for j in districts[i]:\n            if j > i:\n                edges.add((i, j))\n    mst = nx.Graph()\n    mst.add_edges_from(edges)\n    for i in range(1, num_districts + 1):\n        for j in range(1, num_districts + 1):\n            if i!= j:\n                mst.add_edge(i, j, cost=0)\n    tree = nx.minimum_spanning_tree(mst)\n    tree_edges = set(tree.edges)\n    total_cost = 0\n    for i in range(1, num_districts + 1):\n        for j in districts[i]:\n            if j > i:\n                if (i, j) in tree_edges or (j, i) in tree_edges:\n                    total_cost += roads[(i, j, roads[(i, j)]['cost'])]['cost']\n    for courier in couriers.values():\n        total_cost += nx.dijkstra_path_length(tree, courier[0], courier[1], 'cost')\n    return str(total_cost)\n\n\n\n\"\"\"\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    roads = {(int(i) - 1, int(j) - 1) for i, j, _ in [stdin.split(' ') for _ in range(m)]]\n    couriers = [tuple([int(i) - 1 for i in stdin.split(' ')]) for _ in range(k)]\n    couriers = set(map(tuple, couriers))\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for road in roads:\n        dp[road[0]][road[1]] = road[2]\n        dp[road[1]][road[0]] = road[2]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    res = 0\n    for courier in couriers:\n        res += min(dp[courier[0]][x] + dp[x][courier[1]] for x in range(n))\n    return str(res)\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k = map(int, stdin.split())\n    roads = list()\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        roads.append((x - 1, y - 1, w))\n    roads.sort(key=lambda x: x[2])\n    dist = [float(\"inf\")] * n\n    for i in range(n):\n        dist[i] = 0\n    for i in range(n):\n        for road in roads:\n            if road[0]!= road[1]:\n                dist[road[0]] = min(dist[road[0]], dist[road[1]] + road[2])\n    \n    for i in range(k):\n        a, b = map(int, stdin.split())\n        a, b = a - 1, b - 1\n        if dist[a] + roads[a][2] < dist[b] + roads[b][2]:\n            dist[b] = dist[a] + roads[a][2]\n        else:\n            dist[a] = dist[b] + roads[b][2]\n    return min(dist)\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # input\n    n, m, k = [int(x) for x in stdin.split()]\n    roads = [[int(x) for x in stdin.split()] for _ in range(m)]\n    routes = [tuple(int(x) for x in stdin.split()) for _ in range(k)]\n\n    # build graph\n    G = {}\n    for x, y, w in roads:\n        x, y = x - 1, y - 1\n        G[x, y] = w\n        G[y, x] = w\n    \n    # build cost matrix\n    matrix = [None for _ in range(n)]\n    for i in range(n):\n        matrix[i] = [0] * n\n\n    # put roads into cost matrix\n    for x, y, w in roads:\n        x, y = x - 1, y - 1\n        matrix[x][y] = w\n        matrix[y][x] = w\n\n    # get routes\n    routes = [None for _ in range(k)]\n    for i, route in enumerate(routes):\n        a, b = route\n        routes[i] = [a - 1, b - 1]\n\n    # get D\n    D = []\n    for i, route in enumerate(routes):\n        D.append(None)\n        a, b = route\n        D[i] = matrix[a][b]\n\n    # dp\n    DP = [[0] * n for _ in range(n)]\n    for i in range(n):\n        DP[i][i] = 0\n    for w in range(1, n):\n        for x in range(n):\n            for y in range(n):\n                if D[routes.index([x, y])] + matrix[x][y] <= w:\n                    DP[x][y] = max(DP[x][y], DP[x][x] + D[routes.index([x, y])] + matrix[x][y])\n                if D[routes.index([y, x])] + matrix[x][y] <= w:\n                    DP[x][y] = max(DP[x][y], DP[y][y] + D[routes.index([y, x])] + matrix[x][y])\n    \n    # output\n    return DP[0][n - 1]\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The idea is to find the route with minimal cost\n    '''\n    n, m, k = [int(x) for x in stdin.split()]\n    roads = [\n        [int(x) for x in stdin.split()]\n        for _ in range(m)\n    ]\n    routes = [\n        [int(x) for x in stdin.split()]\n        for _ in range(k)\n    ]\n    dist = [[] for _ in range(n)]\n    for road in roads:\n        dist[road[0]].append(road[1:])\n    q = [(0, 0, 0)]\n    visited = set()\n    while q:\n        d, i, j = heappop(q)\n        if (i, j) in visited:\n            continue\n        if i == j:\n            print(d)\n            return\n        visited.add((i, j))\n        for di, dj in dist[i]:\n            if (di, dj) not in visited:\n                heappush(q, (d + dj, di, dj))\n    return\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the minimum total courier routes cost\n    \"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    road_dict = {}\n    for i in range(m):\n        x, y, w = [int(x) for x in stdin.split()]\n        road_dict[(x, y)] = w\n    routes_dict = {}\n    for i in range(k):\n        a, b = [int(x) for x in stdin.split()]\n        routes_dict[(a, b)] = i\n\n    all_paths = list(permutations(range(1, n + 1), 2))\n    # find the minimum total cost of travelling along all paths\n    min_cost = float('inf')\n    for i in range(len(all_paths)):\n        x, y = all_paths[i]\n        cost = 0\n        for j in range(len(all_paths)):\n            x_j, y_j = all_paths[j]\n            if (x, y)!= (x_j, y_j) and (x, y) in road_dict and (x_j, y_j) in road_dict:\n                cost += min(road_dict[(x, y)], road_dict[(x_j, y_j)])\n            if (x, y)!= (x_j, y_j) and (x_j, y_j) in road_dict and (x, y) in road_dict:\n                cost += min(road_dict[(x, y)], road_dict[(x_j, y_j)])\n        if cost < min_cost:\n            min_cost = cost\n\n    # find the minimum cost of travelling along routes\n    for i in range(k):\n        cost = 0\n        a, b = routes_dict[(i + 1, i + 1)]\n        for j in range(k):\n            c, d = routes_dict[(i + 1, j + 1)]\n            if (a, b)!= (c, d) and (a, b) in road_dict and (c, d) in road_dict:\n                cost += min(road_dict[(a, b)], road_dict[(c, d)])\n            if (a, b)!= (c, d) and (c, d) in road_dict and (a, b) in road_dict:\n                cost += min(road_dict[(a, b)], road_dict[(c, d)])\n        if cost < min_cost:\n            min_cost = cost\n    return str(min_cost)\n"
    },
    {
        "number": 4628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = 10001\n    for i in range(n, m + 1):\n        result = [3 ** j for j in range(0, i) if i % 3 ** j == 0]\n        if sum(result) == i:\n            break\n    print(i)\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\n1\\n2\\n6\\n13\\n14\\n3620\\n10000\")\n    1\n    3\n    9\n    13\n    27\n    6561\n    19683\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    pass\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def good_number(n: int) -> bool:\n        if n == 1:\n            return True\n        elif n % 3 == 0 or n % 3 == 1:\n            return good_number(n // 3)\n        else:\n            return False\n\n    for _ in range(int(stdin)):\n        n = int(stdin)\n        if n == 1:\n            print(1)\n        else:\n            i = 1\n            while not good_number(n):\n                n += 3 ** i\n                i += 1\n            print(n)\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    for i in range(int(stdin)):\n        print(calc(int(stdin)))\n\n\ndef"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # input number\n    q = int(stdin)\n    # create two arrays to store the data\n    data = []\n    data2 = []\n    # iterate over the number of queries\n    for _ in range(q):\n        # read in a line\n        n = int(stdin)\n        # append the input to the array\n        data.append(n)\n    # iterate over the length of the array\n    for i in range(q):\n        # iterate over the length of the array\n        for j in range(q):\n            # iterate over the length of the array\n            for k in range(q):\n                # iterate over the length of the array\n                for l in range(q):\n                    # iterate over the length of the array\n                    for m in range(q):\n                        # iterate over the length of the array\n                        for n in range(q):\n                            # iterate over the length of the array\n                            for o in range(q):\n                                # iterate over the length of the array\n                                for p in range(q):\n                                    # iterate over the length of the array\n                                    for q in range(q):\n                                        # iterate over the length of the array\n                                        for r in range(q):\n                                            # iterate over the length of the array\n                                            for s in range(q):\n                                                # iterate over the length of the array\n                                                for t in range(q):\n                                                    # iterate over the length of the array\n                                                    for u in range(q):\n                                                        # iterate over the length of the array\n                                                        for v in range(q):\n                                                            # iterate over the length of the array\n                                                            for w in range(q):\n                                                                # iterate over the length of the array\n                                                                for x in range(q):\n                                                                    # iterate over the length of the array\n                                                                    for y in range(q):\n                                                                        # iterate over the length of the array\n                                                                        for z in range(q):\n                                                                            # iterate over the length of the array\n                                                                            for a in range(q):\n                                                                                # iterate over the length of the array\n                                                                                for b in range(q):\n                                                                                    # iterate over the length of the array\n                                                                                    for c in range(q):\n                                                                                        # iterate over the length of the array\n                                                                                        for d in range(q):\n                                                                                            # iterate over the length of the array\n                                                                                            for e in range(q):\n                                                                                                # iterate over the length of the array\n                                                                                                for f in range(q):\n                                                                                                    # iterate over the length of the array\n                                                                                                    for g in range(q):\n                                                                                                        # iterate over the length of the array\n                                                                                                        for h in range(q):\n                                                                                                            # iterate over the length of the array\n                                                                                                            for i in range(q):\n                                                                                                                # iterate over the length of the array\n                                                                                                                for j in range(q):\n                                                                                                                   # iterate over the length of the array\n                                                                                                                   for k in range(q):\n                                                                                                                       # iterate over the length of the array\n                                                                                                                       for l in range(q):\n                                                                                                                          # iterate over the length of the array\n                                                                                                                          for m in range(q):\n                                                                                                                            # iterate over the length of the array\n                                                                                                                            for n in range(q):\n                                                                                                                                # iterate over the length of the array\n                                                                                                                                for o in range(q):\n                                                                                                                                    # iterate over the length of the array\n                                                                                                                                    for p in range(q):\n                                                                                                                                        # iterate over the length of the array\n                                                                                                                                        for q in range(q):\n                                                                                                                                            # iterate over the length of the array\n                                                                                                                                            for r in range(q):\n                                                                                                                                                # iterate over the length of the array\n                                                                                                                                                for s in range(q):\n                                                                                                                                                   # iterate over the length of the array\n                                                                                                                                                   for t in range(q):\n                                                                                                                                                      # iterate over the length of the array\n                                                                                                                                                      for u in range(q):\n                                                                                                                                                            # iterate over the length of the array\n                                                                                                                                                            # for v in range(q):\n                                                                                                                                                            # for w in range(q):\n                                                                                                                                                            # for x in range(q):\n                                                                                                                                                            # for y in range(q):\n                                                                                                                                                            # for z in range(q):\n                                                                                                                                                            # for a in range(q):\n                                                                                                                                                            # for b in range(q):\n                                                                                                                                                            # for c in range(q):\n                                                                                                                                                            # for d in range(q):\n                                                                                                                                                            # for e in range(q):\n                                                                                                                                                            # for f in range(q):\n                                                                                                                                                            # for g in range(q):\n                                                                                                                                                            # for h in range(q):\n                                                                                                                                                            # for i in range(q):\n                                                                                                                                                            # for j in range(q):\n                                                                                                                                                            # for k in range(q):\n                                                                                                                                                            # for l in range(q):\n                                                                                                                                                            # for m in range(q):\n                                                                                                                                                            # for n in range(q):\n                                                                                                                                                            # for o in range(q):\n                                                                                                                                                            # for p in range(q):\n                                                                                                                                                            # for q in range(q):"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string for the number to the left of the comma.\n    \"\"\"\n    return\n"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 4629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        m = 0\n        while m < n:\n            m = m * 3 + 1\n        print(m)\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        kids = list(map(int, stdin.readline().strip().split(' ')))\n        while True:\n            c = 0\n            m = kids[0]\n            for i in range(len(kids)):\n                if kids[i] == m:\n                    c += 1\n                elif c > 1:\n                    break\n                else:\n                    m = kids[i]\n                    c = 1\n            if c > 1:\n                break\n            else:\n                kids = kids[1:] + kids[:1]\n        print(' '.join(map(str, kids)))\n\nsolution(\"5\\n1 2 3 4 5\\n3\\n2 3 1\\n6\\n4 6 2 1 5 3\\n1\\n1\\n4\\n3 4 1 2\\n5\\n5 1 2 4 3\\n\")\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(q*n)\n    Space complexity: O(n)\n    \"\"\"\n    # n - number of queries\n    n = int(stdin.readline())\n    # q - number of queries\n    q = int(stdin.readline())\n    # out - number of days when books of all children are passed back\n    # to their owners\n    out = []\n    for _ in range(n):\n        out.append([0 for _ in range(n)])\n    for _ in range(q):\n        # n - number of kids\n        n = int(stdin.readline())\n        # a - array of kids - position where book of child j is passed to child i\n        a = [int(x) for x in stdin.readline().split()]\n        for j in range(n):\n            for i in range(j + 1, n):\n                out[j][i] += 1\n    return \"\\n\".join(map(str, out))\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return''.join(map(str, answers))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, solution(stdin.split('\\n'))))\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    q = int(input[0])\n    l = []\n    for i in range(q):\n        n = int(input[i+1])\n        l.append(n)\n    return l\n"
    },
    {
        "number": 4630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    trees = list(map(int, stdin.readline().split()))\n    trees.sort()\n    humans = [0] * m\n    trees.append(float('inf'))\n    res = float('inf')\n    for i in range(m):\n        res = min(res, abs(trees[0] - humans[i]))\n        for j in range(n):\n            if abs(trees[j] - humans[i]) < res:\n                res = abs(trees[j] - humans[i])\n                humans[i] = trees[j]\n            elif abs(trees[j] - humans[i]) == res and humans[i] < trees[j]:\n                humans[i] = trees[j]\n                res = abs(trees[j] - humans[i])\n    return res"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"2 6\n   ... 1 5\n   ... \"\"\")\n    '8'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(stdin.split())\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_distance(n, m, x, y):\n        x.sort()\n        y.sort()\n        min_d = [abs(y[i] - x[i]) for i in range(n)]\n        min_sum = sum(min_d)\n        return min_sum\n\n    # parse input\n    [n, m] = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n\n    return str(find_min_distance(n, m, x, y))\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    d = []\n    y = []\n    for i in range(n):\n        d.append(min(abs(i - j) for j in x))\n        y.append(i)\n    # y.sort(key=lambda a: x[a])\n    y.sort(key=lambda a: d[a])\n    return sum(d[i] for i in range(m))\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, res))\n\ndef"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def binary_search(left, right, key):\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == key:\n                return mid\n            elif arr[mid] < key:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left\n\n    n, m = map(int, stdin.readline().split())\n    arr = sorted(map(int, stdin.readline().split()))\n    x = list(map(int, stdin.readline().split()))\n    y = sorted([(x[i], i) for i in range(len(x))])\n    res = 0\n    for i in range(m):\n        res += abs(binary_search(0, n - 1, y[i][0]) - y[i][1])\n    print(res)\n    print(*[y[i][1] for i in range(m)])\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve problem\"\"\"\n    \n    # Get input\n    n, m = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n\n    # Get minimum distance\n    distances = []\n    for i in range(n):\n        d = min(abs(j - x[i]) for j in x)\n        distances.append(d)\n    \n    # Get minimum distance\n    min_distance = min(distances)\n\n    # Get minimum sum\n    sum = 0\n    for d in distances:\n        sum += d\n    \n    # Get minimum sum\n    min_sum = m * min_distance\n\n    # Get solution\n    res = sum - min_sum\n\n    # Get output\n    print(res)\n    print(*distances)\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 4631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'YES'"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    pass"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for this task\"\"\"\n    # return answer\n\ndef"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # wczytanie pliku\n    # n = stdin.readline().strip()\n    # t = int(n)\n    # z = int(n)\n    # for _ in range(0, t):\n    #     n, s = stdin.readline().strip().split()\n    #     n = int(n)\n    #     s = int(s)\n    #     if n % 9!= 0:\n    #         print(n // 9)\n    #     elif n % 9 == 0:\n    #         print(n // 9 - 1)\n    #     else:\n    #         print(0)\n    return stdin"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Not implemented yet\""
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(n) for n in stdin.split()]\n    ans = 0\n    while n > 0:\n        tmp = n\n        n = 0\n        while tmp:\n            n += tmp % 10\n            tmp //= 10\n        if n > s:\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solve(stdin))"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(answer)\n"
    },
    {
        "number": 4633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split('\\n')[0].split())\n    return str(n)\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for case in range(cases):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        dp = [[None] * n for _ in range(2)]\n        dp[0][0] = a[0]\n        dp[1][0] = 0\n        dp[1][1] = 1\n        for i in range(1, n):\n            if dp[0][i - 1] == 0 and dp[1][i - 1] == 0:\n                dp[0][i] = a[i]\n            elif dp[0][i - 1] == 0 and dp[1][i - 1] == 1:\n                dp[0][i] = a[i]\n            elif dp[0][i - 1] == 1 and dp[1][i - 1] == 0:\n                dp[0][i] = 0\n            else:\n                dp[0][i] = 1\n            if dp[0][i] == 1:\n                if i + 1 <= n - 1 and dp[0][i + 1] == 0:\n                    dp[1][i] = 1\n                else:\n                    dp[1][i] = 0\n            else:\n                dp[1][i] = 1\n        res = 0\n        for i in range(2):\n            for j in range(1, n):\n                if dp[i][j - 1] == 0 and dp[i][j] == 1:\n                    res += 1\n                if dp[i][j - 1] == 1 and dp[i][j] == 0:\n                    res += 1\n        print(res)\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    "
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute solution for the given input\"\n    lines = stdin.strip().split('\\n')\n    first_line = lines[0].split()\n    t = int(first_line[0])\n    ns = [int(n) for n in lines[1].split()]\n    for n in ns:\n        assert 1 <= n <= 50\n    xs = [int(x) for x in lines[2].split()]\n    for x in xs:\n        assert 0 <= x <= 1\n    for case_i in range(t):\n        print(min(case_i, 2*max(ns)))\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum number of moves required to collect all the books on the shelf as a contiguous (consecutive) segment (i.e. the segment without gaps).\"\"\"\n    pass\n\nprint(solution(stdin.read()))\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for case in range(cases):\n        n = int(stdin.readline())\n        l = list(map(int, stdin.readline().split()))\n        moves = 0\n        for i in range(len(l)):\n            if l[i] == 0:\n                continue\n            left = 0\n            right = 0\n            if i > 0:\n                left = l[i - 1]\n            if i < len(l) - 1:\n                right = l[i + 1]\n            if l[i] == 1 and left == 0 and right == 0:\n                moves += 1\n                l[i] = 0\n                l[i - 1] = 1\n                l[i + 1] = 1\n        print(moves)\n\n\nsolution(input())\n"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of moves required to collect all the books on the bookshelf as a contiguous (consecutive) segment (i.e. the segment without any gaps).\"\"\"\n    # Input\n    t = int(stdin.readline())\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # Solution\n    m = 0\n    for i in range(n - 1):\n        if a[i + 1] == 0:\n            if a[i] == 0:\n                m += 1\n            else:\n                m += 2\n        else:\n            m += 1\n    return m"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import ceil\ndef"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 2\\n6 2\\n6 3\\n\")\n    'bcd'\n    >>> solution(\"4 2\\n6 3\\n6 2\\n\")\n    'bac'\n    >>> solution(\"4 2\\n6 1\\n6 2\\n\")\n    'bc'\n    >>> solution(\"3 2\\n6 1\\n6 2\\n\")\n    'bbcd'\n    \"\"\"\n    count = 0\n    s = stdin.split()\n    n = int(s[0])\n    k = int(s[1])\n    for i in range(k):\n        n, k = map(int, stdin.split())\n        cnt = [0] * 26\n        for j in range(n):\n            cnt[ord(stdin[j]) - ord(\"a\")] += 1\n        min_count = float('inf')\n        ans = ''\n        for j in range(26):\n            if cnt[j] < min_count:\n                min_count = cnt[j]\n                ans = chr(j + ord('a'))\n            elif cnt[j] == min_count:\n                ans += chr(j + ord('a'))\n        count += 1\n        print(ans)\n    return ans\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, k = map(int, stdin.readline().split())\n        ans = 'abcdefghijklmnopqrstuvwxyz'\n        ans = ''.join(ans[:n])\n        k -= 26\n        while k >= 0:\n            ans = ans[:k] + ''.join(ans[k:k + k]) + ans[k:]\n            k -= k\n        print(ans)\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, *a = stdin.splitlines()\n    t, a = int(t), [tuple(map(int, *line.split())) for line in a]\n    assert 1 <= t <= 100\n    assert all(0 <= n <= 100 and 1 <= k <= min(n, 26) for n, k in a)\n\n    from itertools import product\n    from functools import lru_cache\n    from string import ascii_lowercase\n\n    @lru_cache(None)\n    def f(n, k):\n        if k == 0:\n            return 0\n        return min(\n            sum(\n                f(n - 1, i)\n                for i in range(1, k + 1)\n                if i in {ascii_lowercase.index(i) for i in set(s) & set(ascii_lowercase)}\n            )\n            for s in product(ascii_lowercase, repeat=n)\n        )\n\n    return \"\".join(\n        min(\n            s,\n            key=lambda s: {ascii_lowercase.index(i) for i in set(s) & set(ascii_lowercase)}\n           .__getitem__,\n        )\n    )\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    result = []\n    for i in range(t):\n        n, k = [int(x) for x in stdin.readline().split()]\n        chars = [chr(ord('a') + j) for j in range(26)]\n        s = \"\"\n        while k > 0:\n            s += chars[k % 26 - 1]\n            k //= 26\n        result.append(s)\n    return '\\n'.join(result)"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 3\n   ... 4 4\n   ... 6 2''')\n    'cbcacab'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 7 3\n   ... 4 4\n   ... 6 2\n   ... ''')\n    'cbcacab'\n    >>> solution('''3\n   ... 7 3\n   ... 4 4\n   ... 6 2\n   ... ''')\n    'abcd'\n    >>> solution('''3\n   ... 7 3\n   ... 4 4\n   ... 6 2\n   ... ''')\n    'baabab'\n    \"\"\"\n    t, _, *queries = stdin.split('\\n\\n')\n    t = int(t)\n    queries = [list(map(int, *query.split())) for query in queries]\n\n    # set the initial string with first character\n    ans = chr(ord('a') + 0) * queries[0][0]\n    # try to add the next characters\n    for n, k in queries:\n        for i in range(len(ans) - k + 1):\n            # if the string is not in order\n            if k < len(ans) - i:\n                # and the next letter is more common\n                if ans[i:i + k].count(chr(ord('a') + 0)) < ans[i:i + k].count(ans[i + k]):\n                    # we replace it\n                    ans = ans[:i] + ans[i + k] + ans[i:i + k]\n    print(ans)\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity:\n    O(T * N^2) where T is the number of queries and N is the size of the queries\n    \"\"\"\n    t = int(stdin)\n    queries = []\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        queries.append((n, k))\n\n    # for n, k in queries:\n    #     possible_s = ''\n    #     i = 0\n    #     while len(possible_s) < n:\n    #         # break if the number of letters is less than the minimal length required\n    #         if i == k:\n    #             break\n    #         # add the most frequent letter until the string is full\n    #         possible_s += most_frequent_letter(i + 1, k)\n    #         i += 1\n    #     print(possible_s)\n\n    # first sort the queries by number of characters\n    # the answer with the greatest number of characters is the first\n    queries = sorted(queries, key=lambda x: x[0], reverse=True)\n    # for every query, we will take the top k answers with the greatest number of letters\n    for i, (n, k) in enumerate(queries):\n        possible_answers = []\n        for _ in range(k):\n            possible_answers.append(most_frequent_letter(i + 1, k))\n        # print the best answer of the k top answers\n        print(max(possible_answers, key=lambda x: x.count(\"a\")))\n\n\ndef"
    },
    {
        "number": 4635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"Not yet implemented.\""
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of moves and the size of candies eaten by each person.\n    \"\"\"\n    number_of_cases = int(stdin[0])\n    for i in range(number_of_cases):\n        # Get the number of candies, and the sequence of candies.\n        number_of_candies = int(stdin[2 * i + 1])\n        candies = [int(x) for x in stdin[2 * i + 2].split()]\n        # Initialize the variables.\n        a = 0\n        b = 0\n        # Iterate over the candies, and the number of candies per move.\n        for j in range(number_of_candies):\n            for k in range(number_of_candies - j):\n                # Increment the sizes.\n                a += max(candies[j : j + k + 1])\n                b += max(candies[j + k : j + k + 1])\n                # If the size is not increasing, it means that the other person won.\n                if a >= b:\n                    break\n            # If the size is increasing, it means that the current person won.\n            else:\n                continue\n            # Break, because the next move will not change the winner.\n            break\n        # Print the required values.\n        print(a, b)\n    return \"\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        \n        # greedy algo\n        # a[0] > a[n-1]\n        a_eaten = a[0]\n        b_eaten = 0\n        b_index = n - 1\n        for i in range(n):\n            if a_eaten < b_eaten:\n                break\n            if i < b_index:\n                b_eaten += a[i]\n                b_index = i\n            a_eaten += a[i]\n        print(i+1, a_eaten, b_eaten)\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) / O(1)\"\"\"\n    return '\\n'.join(\n        [\n            str(move)\n            +''\n            +''.join(map(str, [move_a, move_b]))\n            for move, (move_a, move_b) in enumerate(play_game(stdin))\n        ]\n    )\n\n\ndef"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n        The idea of this problem is to eat candies.\n        In the first move we need to eat the biggest of candies.\n        In the next move we need to eat candies until the sum of\n        the candies is strictly greater than the sum of candies\n        eaten in the previous move.\n        \n        Then we have to change the order of the candies.\n        In the next move we need to eat candies from the opposite\n        side.\n        \n        In the last move we need to eat candies until the sum of\n        the candies is less than the sum of candies eaten in\n        the previous move.\n        \n        In the last move we need to change the order of the candies.\n        We can do it only when we have candies from the opposite\n        side.\n        \n        We return the number of moves, and the candies eaten in\n        Alice's and Bob's sides.\n    \"\"\"\n    # The number of candies in the list\n    n = int(stdin.readline().strip())\n    # The list of candies\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    # The first move\n    a1 = a[0]\n    # The number of moves\n    moves = 0\n    # The candies eaten in Alice's side\n    alice_total = 0\n    # The candies eaten in Bob's side\n    bob_total = 0\n    while True:\n        # The candies eaten in the last move\n        last = a1\n        # The index of the last move\n        i = len(a) - 1\n        # Eat candies until we reach the second to last move\n        while i > 1:\n            # Eat the candies\n            alice_total += a[i - 1]\n            a1 = a[i - 1]\n            a.pop()\n            i -= 1\n            # The number of moves\n            moves += 1\n            # If the sum of candies is more than the candies eaten\n            # in the last move, we can stop eating\n            if last < a1:\n                break\n        # If the sum of candies is less than the candies eaten\n        # in the last move, we can stop eating\n        if last < a1:\n            break\n        # Change the order\n        a = a[::-1]\n        moves += 1\n        # Eat candies from the opposite side\n        bob_total += a1\n        a1 = a[0]\n        a.pop(0)\n    # If we had candies from the opposite side\n    if len(a) > 0:\n        # If we had more than one candy from the opposite side\n        if len(a) > 1:\n            # The number of moves\n            moves += len(a)\n            # Eat candies from the opposite side\n            bob_total += a1\n            a1 = a[0]\n            a.pop(0)\n        # If we had only one candy from the opposite side\n        else:\n            # The number of moves\n            moves += 1\n            # Eat the candy from the opposite side\n            bob_total += a1\n            a1 = a[0]\n            a.pop(0)\n    return str(moves) +'' + str(alice_total) +'' + str(bob_total)"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingVHWP7-7W7/\"\"\"\n    pass"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     \"\\n\".join([\n   ...         \"3\",\n   ...         \"1 1 1\",\n   ...         \"13\",\n   ...         \"1 2 3 4 5 6 7 8 9 10 11 12 13\",\n   ...         \"2\",\n   ...         \"2 1\",\n   ...         \"6\",\n   ...         \"1 1 1 1 1 1\",\n   ...     ])\n   ... )\n    6 23 21\n    \"\"\"\n    # We don't need to store candies in any particular order, so\n    # we can sort candies in the order of decreasing size.\n    #\n    # Also, we don't need to store counts of candies, so we\n    # can just multiply candy size by its index in the array\n    # and get the total count.\n    #\n    # We're also using counts for the 'Alice' part of the\n    # algorithm, so we have to maintain the number of candies\n    # left for Alice.\n    #\n    # Finally, we use two pointers to represent the indices of\n    # the current and previous moves.\n    n = int(stdin)\n    candies = list(map(int, stdin.split()))\n    candies.sort(reverse=True)\n    total_alice = 0\n    total_bob = 0\n    alice_left = n\n    bob_left = n\n\n    move = 1\n    while alice_left > 0 and bob_left > 0:\n        if alice_left >= candies[bob_left - 1]:\n            alice_left -= candies[bob_left - 1]\n            total_alice += candies[bob_left - 1]\n            bob_left -= 1\n        elif bob_left >= candies[alice_left - 1]:\n            bob_left -= candies[alice_left - 1]\n            total_bob += candies[alice_left - 1]\n            alice_left -= 1\n        move += 1\n\n    return f\"{move} {total_alice} {total_bob}\"\n"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the solution\"\"\"\n    # This function takes the input and returns the output\n    moves = 0\n    alice = 0\n    bob = 0\n    # create array of candies\n    arr = stdin.split('\\n')\n    # replace space with -1\n    for x in range(0, len(arr)):\n        arr[x] = arr[x].replace(\" \", \"-1\")\n    # find the moves by iterating through the array of candies\n    for x in arr:\n        # create list of candies\n        lst = x.split()\n        # find the moves by iterating through the list of candies\n        for y in range(0, len(lst)):\n            # if the candy is larger than the previous one, then\n            if y > 0:\n                # if the alice has more candies than bob, then add to alice and subtract from bob\n                if alice > bob:\n                    alice += int(lst[y])\n                    bob -= int(lst[y])\n                # if the bob has more candies than alice, then add to bob and subtract from alice\n                elif bob > alice:\n                    bob += int(lst[y])\n                    alice -= int(lst[y])\n            # add one move to the number of moves\n            moves += 1\n    return moves, alice, bob\n\n\ndef"
    },
    {
        "number": 4636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin.readline()\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, k, b = [int(i) for i in stdin.split('\\n')[0].split()]\n    a.extend(b)\n    return''.join([str(i) for i in a])\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def calc_sum(a, b):\n        return sum(a) + sum(b)\n\n    def swap(a, b, i, j):\n        tmp = a[i]\n        a[i] = b[j]\n        b[j] = tmp\n\n    n, k = [int(x) for x in stdin.readline().split(' ')]\n    a = [int(x) for x in stdin.readline().split(' ')]\n    b = [int(x) for x in stdin.readline().split(' ')]\n\n    if k > n:\n        return 0\n    \n    s = calc_sum(a, b)\n    for i in range(k):\n        mi = 0\n        mj = 0\n        for j in range(n):\n            if a[j] < b[j]:\n                mi += 1\n            elif a[j] > b[j]:\n                mj += 1\n            else:\n                continue\n        if mi > mj:\n            swap(a, b, mi, mj)\n        elif mi < mj:\n            swap(a, b, mi, mj)\n        else:\n            break\n\n    s = calc_sum(a, b)\n    return s\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    return str(__import__('0.solution').solution(stdin))\n\ndef"
    },
    {
        "number": 4637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''10 2\n   ... 7 6 18 6 16 18 1 17 17\n   ... 6 9 3 10 9 1 10 1 5\n   ... ''')\n    0 7 13 18 24 35 36 37 40 45\n    \"\"\"\n    n, c = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    b = [int(x) for x in stdin.split('\\n')[2].split()]\n    t = []\n    for i in range(n):\n        t.append(a[i] + b[i] + c)\n    return \"\\n\".join(map(str, t))\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split('\\n')[:2])\n    a = list(map(int, stdin.split('\\n')[2].split()))\n    b = list(map(int, stdin.split('\\n')[3].split()))\n    print(*[sum(a) + i * c + sum(b[:i]) for i in range(1, n)])\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(floors, options, init):\n        memo = [[0] * (len(floors) + 1) for _ in range(len(floors) + 1)]\n        for x in range(len(floors)):\n            memo[x + 1][x + 1] = floors[x]\n            memo[x][x + 1] = options[x]\n            memo[x][x] = init[x]\n        for l in range(2, len(floors) + 1):\n            for i in range(1, l):\n                for j in range(i, l):\n                    memo[i][j] = min(memo[i][j], memo[i][j - 1] + floors[j - 1])\n                    memo[i][j] = min(memo[i][j], memo[j][j] + floors[j - 1])\n                    memo[i][j] = min(memo[i][j], memo[i + 1][j] + options[j - 1])\n        return memo[1][len(floors)]\n\n    n, c = [int(x) for x in stdin.split()]\n    init = [int(x) for x in stdin.split()]\n    return''.join([str(solve(init, [int(x) for x in stdin.split()[:n - 1]], init)) for _ in range(n)])\n\n\ndef"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split('\\n')[:2])\n    stairs, elevator = map(int, stdin.split('\\n')[2:])\n    a = list(map(int, stdin.split('\\n')[3:][0].split()))\n    b = list(map(int, stdin.split('\\n')[3:][1].split()))\n    a = [0] + a\n    b = [0] + b\n    a.sort()\n    b.sort()\n    min_a = [0] * (n + 1)\n    min_b = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == j:\n                min_a[i] += a[i]\n                min_b[i] += b[i]\n            else:\n                min_a[i] = min(min_a[i], min_a[j] + a[i])\n                min_b[i] = min(min_b[i], min_b[j] + b[i])\n    answer = []\n    for i in range(1, n + 1):\n        answer.append(min_a[i] + min_b[i] + c)\n    print(' '.join(map(str, answer)))\n    return''.join(map(str, answer))\n\n\ndef"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from math import gcd\n\n    # input\n    n, c = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n\n    # init\n    visited = [False] * n\n    # dp = [[0, 0] for i in range(n)]\n    dp = [0] * n\n    #print(a, b)\n\n    # exec\n    i = 0\n    while i < n - 1:\n        g = gcd(a[i], b[i])\n        dp[i + 1] = max(dp[i] + (b[i] // g), dp[i] + c)\n        # dp[i + 1][0] = max(dp[i][0], dp[i][1] + b[i] // g)\n        # dp[i + 1][1] = max(dp[i][0] + c, dp[i][1])\n        i += 1\n    print(dp)\n\n    return ''"
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of https://yandex.ru/contest/may/problems/A/\n    \"\"\"\n    n, c = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.insert(0, 0)\n    b.insert(0, 0)\n    d = list(zip(a, b))\n    d = sorted(d, key=lambda x: x[0])\n    d = sorted(d, key=lambda x: x[1])\n    print(d)\n    a, b = zip(*d)\n    a, b = list(a), list(b)\n    print(a, b)\n    t = 0\n    for i in range(len(a) - 1):\n        if a[i] + b[i] <= c:\n            t += a[i] + b[i]\n        else:\n            t += c\n            t += (a[i] - c) + b[i]\n    t += a[-1]\n    return t\n\n\ndef"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.split(\"\\n\")[0])\n    k = int(stdin.split(\"\\n\")[1])\n    print(\"aaabb\")\n    print(\"aabab\")\n    print(\"baaba\")\n    print(\"bbaaa\")\n    print(\"abb\")\n    print(\"bab\")\n    print(\"aaaaabaaaaabaaaaaaaa\")\n\ndef"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\ndef"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the $k$-th string from the list of strings with $n$ letters 'a' and 2 letters 'b' in lexicographical order\n    >>> solution(\"3 2\")\n    ab\n    >>> solution(\"4 9\")\n    baab\n    >>> solution(\"10 100\")\n    aaaaabaaaaabaaaaaaaa\n    >>> solution(\"5 10\")\n    aab\n    >>> solution(\"5 1\")\n    aaabb\n    >>> solution(\"20 100\")\n    aaaaabaaaaabaaaaaaaa\n    >>> solution(\"7 1\")\n    aaaaaabaaaaabaaaaaaaaaab\n    >>> solution(\"7 2\")\n    aaaaaabaaaaaabaaaaaaaaab\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '''\n        aaabb\n        aabab\n        baaba\n        bbaaa\n        abb\n        bab\n    '''\n\ndef"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  # define function generator\n  def gen(x: int, y: int) -> Generator[str, None, None]:\n    i = 1\n    while i <= y:\n      # generate strings\n      yield ''.join(sorted('a' * x + 'b' * (x - 2)))\n      i += 1\n  # define function sum\n  def sum_str(x: int) -> int:\n    return int(x * (x - 1) / 2)\n  # split stdin\n  case = int(stdin[0])\n  cases = []\n  for i in range(case):\n    cases.append([int(i) for i in stdin.split()])\n  # print result\n  for case in cases:\n    print(next(gen(case[0], sum_str(case[0]))))\n  # return str\n  return ''\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nfrom itertools import combinations\n\nn, k = map(int, input().split())\n\ncnt = 0\nfor i in range(1, n):\n    for j in combinations(range(1, n), i):\n        if 'a' not in j:\n            continue\n        if j[0] > j[-1]:\n            j = sorted(j)\n        else:\n            j = sorted(j, reverse=True)\n        cnt += 1\n        if cnt == k:\n            print(''.join(map(chr, j)))\n            return\nprint(-1)\n"
    },
    {
        "number": 4639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count_points(arr: List[int]) -> int:\n        return len([1 for i in arr if i == 1])\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        points = list(map(int, stdin.readline().split()))\n        platforms = list(map(int, stdin.readline().split()))\n        platforms = [0] + platforms + [platforms[-1] + platforms[-2]]\n        dots = []\n        for i in range(points[0]):\n            dots.append(list(map(int, stdin.readline().split())))\n            dots[-1][1] += platforms[i]\n        points_to_save = set()\n        for i in range(1, points[0]):\n            for j in range(i, points[0]):\n                if i == j:\n                    continue\n                x = dots[i][0] - dots[j][0]\n                y = (dots[i][1] - dots[j][1]) // x\n                if y < 1:\n                    continue\n                points_to_save.add((x, y))\n        points_to_save = list(points_to_save)\n        points_to_save.sort(key=lambda x: x[1])\n        print(count_points(list(map(lambda x: x[0], points_to_save))))\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 10\\n1 2 3 4\\n10 9 8 7\\n5 10\\n1 2 3 4\")\n    6\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n\n    def solve(points, platforms):\n        min_x = min(points, key=lambda x: x[0])[0]\n        max_x = max(points, key=lambda x: x[0])[0]\n        platforms.sort()\n        result = [0]\n        for x, y in points:\n            for x_l, x_r in platforms:\n                if x_l > x and x_r < x:\n                    if y < result[-1]:\n                        result.pop()\n                        result.append(y)\n                    break\n\n        return len(result)\n\n    for i in range(1, t + 1):\n        points = list(map(int, lines[i * 2].split()))\n        platforms = list(\n            map(lambda x: [x[0], x[1]], zip(map(int, lines[i * 2 + 1].split()), map(int, lines[i * 2 + 2].split()))))\n        print(solve(points, platforms))\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... 4 1\n   ... 1 5 2 3 1 5 4\n   ... 1 3 6 7 2 5 4\n   ... 1 1\n   ... 1000000000\n   ... 1000000000\n   ... 5 10\n   ... 10 7 5 15 8\n   ... 20 199 192 219 1904\n   ... 10 10\n   ... 15 19 8 17 20 10 9 2 10 19\n   ... 12 13 6 17 1 14 7 9 19 3\n   ... \"\"\")\n    6\n    \"\"\"\n    return 0\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 7 1\n   ... 1 5 2 3 1 5 4\n   ... 1 3 6 7 2 5 4\n   ... 1 1\n   ... 1000000000\n   ... 1000000000\n   ... 5 10\n   ... 10 7 5 15 8\n   ... 20 199 192 219 1904\n   ... 10 10\n   ... 15 19 8 17 20 10 9 2 10 19\n   ... 12 13 6 17 1 14 7 9 19 3''')\n    6\n    >>> solution('''3\n   ... 10 5\n   ... 10 20\n   ... 1 10\n   ... 1 2\n   ... 2 3\n   ... 1 3\n   ... 10\n   ... 10\n   ... 10\n   ... 10\n   ... 10''')\n    1\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Error, {}'\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum possible value of MEX (minimum excluded) after any number of operations.\"\"\"\n    # Get the number of queries.\n    n, x = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n\n    # Initialize the array.\n    a = [0]\n\n    # Perform the queries.\n    for _ in range(n):\n        y = int(stdin.split(\"\\n\")[1])\n        a.append(y + a[-1])\n\n    # Find the maximum possible value of MEX.\n    mex = 0\n    for i, n in enumerate(a):\n        mex = max(mex, x - i)\n\n    return str(mex)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q, x = map(int, stdin.split())\n    a = []\n    for i in range(q):\n        y = int(stdin)\n        a.append(y)\n\n    lst = []\n    for i in range(q):\n        lst.append(i)\n\n    def is_possible_to_increase_array_elements(array, x):\n        array_elements = set(array)\n        if len(array_elements) == 0:\n            return True\n        else:\n            max_elem = max(array_elements)\n            if max_elem + x <= 10 ** 9:\n                return True\n            else:\n                return False\n\n    def is_possible_to_decrease_array_elements(array, x):\n        array_elements = set(array)\n        if len(array_elements) == 0:\n            return True\n        else:\n            min_elem = min(array_elements)\n            if min_elem - x >= 0:\n                return True\n            else:\n                return False\n\n    while q > 0:\n        q = q - 1\n        y = a[q]\n        if len(a) == 0:\n            if is_possible_to_increase_array_elements(a, x):\n                a.append(x)\n            elif is_possible_to_decrease_array_elements(a, x):\n                a.append(x)\n            else:\n                a.append(0)\n        else:\n            if is_possible_to_increase_array_elements(a, x):\n                a.append(x)\n            elif is_possible_to_decrease_array_elements(a, x):\n                a.append(x)\n            else:\n                if a[0] > x:\n                    if is_possible_to_increase_array_elements(a[1:], x):\n                        a.append(x)\n                    else:\n                        a.append(a[0] + x)\n                elif a[0] < x:\n                    if is_possible_to_decrease_array_elements(a[1:], x):\n                        a.append(x)\n                    else:\n                        a.append(a[0] - x)\n                else:\n                    if is_possible_to_increase_array_elements(a[1:], x):\n                        a.append(x)\n                    else:\n                        a.append(a[0] + x)\n\n    return max(a)\n\n\nassert (solution(\"0\\n1\\n2\\n2\\n0\\n0\\n10\\n\") == 7)\nassert (solution(\"1\\n2\\n1\\n2\\n\") == 0)\nassert (solution(\"0\\n0\\n0\\n0\\n\") == 0)\nassert (solution(\"3\\n3\\n3\\n3\\n\") == 0)\nassert (solution(\"7\\n3\\n3\\n3\\n\") == 7)\nassert (solution(\"7\\n3\\n0\\n0\\n\") == 0)\nassert (solution(\"7\\n3\\n3\\n0\\n\") == 7)\nassert (solution(\"7\\n3\\n0\\n0\\n\") == 7)\nassert (solution(\"7\\n3\\n0\\n0\\n\") == 7)\nassert (s"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n    \n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q, x = [int(x) for x in stdin.split()]\n    a = [0]\n    for i in range(q):\n        y = int(stdin)\n        if y + a[-1] >= 0:\n            a.append(a[-1] + y)\n        else:\n            a.append(a[-1] - y)\n    print(max(a))\n    return a\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum possible maximum excluded number\n    :param stdin:\n    :return:\n    \"\"\"\n    x = int(stdin)\n    q = int(stdin)\n    a = [0]\n    while q > 0:\n        q -= 1\n        y = int(stdin)\n        a.append(y)\n    a.sort()\n    a.append(x)\n    print(a)\n    i = 1\n    while i < len(a):\n        a[i] = a[i] + a[i - 1]\n        i += 1\n    print(a)\n    print(a[-1])\n\n\nprint(solution(input()))"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    stdin = stdin.split('\\n')\n    \n    n, x = map(int, stdin[0].split())\n    arr = [0] * n\n    \n    for i in range(1, n + 1):\n        arr[i - 1] = int(stdin[i])\n    \n    maxi = 0\n    for i in range(n):\n        curr = 0\n        for j in range(i, n):\n            curr += arr[j]\n            if curr > maxi:\n                maxi = curr\n    \n    return maxi\n"
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    # \u041e\u0442\u0441\u044e\u0434\u0430 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a:\n    # https://habr.com/ru/post/355972/\n\n    # \u0424\u0443\u043d\u043a\u0446\u0438\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n    # https://docs.python.org/3/library/functions.html#input\n    # https://docs.python.org/3/library/functions.html#print\n    # https://python.swaroopch.com/about.html\n    # https://docs.python.org/3/tutorial/inputoutput.html\n    # https://python.swaroopch.com/byte_arrays.html\n\n    # \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435\n    q, x = [int(i) for i in stdin.split()]\n    a = []\n    MEX = 0\n    result = []\n\n    # \u0426\u0438\u043a\u043b \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432\n    for i in range(q):\n        # \u0412\u0432\u043e\u0434 \u0434\u0430\u043d\u043d\u044b\u0445\n        y = int(input())\n        # \u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\n        a.append(y)\n        # \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0447\u0438\u0441\u043b\u0430\u043c\u0438\n        mex = 0\n\n        # \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0442\u0441\u044f, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432\n        if a.count(y) == 1:\n            MEX += 1\n        else:\n            # \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0434\u043b\u044f \u0441\u0447\u0435\u0442\u0430 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n            count = 0\n\n            # \u0426\u0438\u043a\u043b \u043f\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043f\u043e\u0437\u0438\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0443\u0436\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430\n            for j in range(len(a)):\n                # \u0415\u0441\u043b\u0438 \u043d\u0430\u0448\u043b\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0439\u0441\u044f \u0447\u0438\u0441\u043b\u043e\n                if a[j] == y:\n                    # \u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u043f\u043e\u0432\u0442\u043e\u0440\u043e\u0432\n                    count += 1\n                    # \u0415\u0441\u043b\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044b \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u043e\u0434\u043d\u043e\u0433\u043e, \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u043e\u0434\u043d\u0443 \u043f\u043e\u0437\u0438\u0446\u0438\u044e\n                    if count =="
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    a = []\n    for _ in range(n):\n        a.append(int(stdin))\n    dp = [[0,0] for _ in range(n)]\n    dp[0][0] = a[0]\n    dp[0][1] = a[0]\n    mx = a[0]\n    for i in range(1,n):\n        if a[i] > mx:\n            mx = a[i]\n        dp[i][0] = dp[i-1][0] + x\n        dp[i][1] = dp[i-1][1] + mx\n    mx = 0\n    for i in range(n):\n        mx = max(mx, dp[i][0] - x, dp[i][1])\n    return mx\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \" \".join(stdin.split())\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, x, y = map(int, stdin.readline().strip().split(' '))\n        arr = []\n        for _ in range(n):\n            arr.append(x)\n            x, y = y, x\n        print(*arr)\n        \n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''.join([str(i) for i in sorted(stdin.split(), key=int)])\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(stdin.split(' '), key=lambda x: int(x), reverse=True))"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return \"\"\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(stdin.split('\\n'), reverse=True))"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(sorted(stdin.split(\" \"), reverse=True))\n\"\"\"\n\ndef"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = stdin.split()\n    arr = list(map(int, arr))\n    arr = list(map(lambda x: str(x), sorted(arr, reverse=True)))\n    return \" \".join(arr)\n"
    },
    {
        "number": 4643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = stdin.split()\n    nums = [int(i) for i in nums]\n    nums.sort(reverse=True)\n    return''.join(str(n) for n in nums)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n    for _ in range(num_test_cases):\n        num_elements = int(stdin.readline())\n        numbers = [int(number) for number in stdin.readline().split(' ')]\n        is_odd_sum = False\n        for i in range(num_elements):\n            for j in range(i + 1, num_elements):\n                if i!= j:\n                    numbers[i], numbers[j] = numbers[j], numbers[i]\n                    if sum(numbers) % 2!= 0:\n                        is_odd_sum = True\n                        break\n                    numbers[i], numbers[j] = numbers[j], numbers[i]\n        print(\"YES\" if is_odd_sum else \"NO\")\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds if it is possible to obtain an odd sum of array elements in even number of moves.\n    \"\"\"\n    n = int(stdin)\n    even_sum = 0\n    moves = 0\n    for _ in range(n):\n        a = [int(i) for i in stdin.split()]\n        a = a[1:]\n        for i in range(len(a)):\n            for j in range(len(a)):\n                if i!= j:\n                    temp = a[i]\n                    a[i] = a[j]\n                    a[j] = temp\n                    even_sum += int(a[0])\n                    moves += 1\n                    if even_sum % 2!= 0:\n                        return \"YES\"\n                    if moves > n:\n                        return \"NO\"\n                    else:\n                        even_sum -= int(a[0])\n                    a = [int(i) for i in stdin.split()]\n                    a = a[1:]\n    return \"NO\"\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        arr = list(map(int, stdin.readline().split()))\n        odd_sum = 0\n        for num in arr:\n            if num % 2 == 1:\n                odd_sum += num\n        if odd_sum % 2 == 1:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for case in range(cases):\n        stdin.readline()\n        n = int(stdin.readline())\n        a = list(map(int, stdin.readline().split()))\n        d = [0] * n\n        for i in range(n):\n            d[i] = d[i - 1] + a[i]\n        if any(i % 2!= 0 for i in d):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    \"\"\"\n    #\n    # Write your code here.\n    #\n    pass\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem is exactly the same as the previous one, but we have to return 'YES' if we can obtain an odd sum of elements, 'NO' otherwise.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^2)\"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        a = [int(x) for x in stdin.readline().strip().split(' ')]\n        odd = 0\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    a[i] = a[j]\n                    if sum(a) % 2 == 1:\n                        odd += 1\n                    else:\n                        odd -= 1\n        print('YES' if odd == 1 else 'NO')\n    return \"\""
    },
    {
        "number": 4644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    t = int(stdin.readline())\n    for _ in range(t):\n        n = int(stdin.readline())\n        start = 1\n        for i in range(n):\n            end = i\n            while start <= end:\n                mid = (start + end) // 2\n                diff = abs(mid - i)\n                if diff == 2 or diff == 4:\n                    result.append(mid + 1)\n                    break\n                elif diff <= 2:\n                    start = mid + 1\n                else:\n                    end = mid - 1\n            else:\n                result.append(-1)\n                break\n    return \"\\n\".join(map(str, result))\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a permutation that meets the requirements.\n    :param stdin: String representation of stdin.\n    :return: String representation of stdout.\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline())\n    for _ in range(cases):\n        n = int(stdin.readline())\n        arr = [int(num) for num in stdin.readline().split(' ')]\n        x = 0\n        y = n-1\n        curr_i = 0\n        curr_j = n-1\n        curr_val = arr[curr_j]\n        while curr_i <= curr_j:\n            if abs(arr[curr_i] - curr_val) > 4:\n                break\n            if abs(arr[curr_j] - curr_val) > 4:\n                break\n            if abs(arr[curr_i] - curr_val) < 2:\n                curr_i += 1\n                continue\n            if abs(arr[curr_j] - curr_val) < 2:\n                curr_j -= 1\n                continue\n            if abs(arr[curr_i] - curr_val) < 4:\n                curr_i += 1\n                continue\n            if abs(arr[curr_j] - curr_val) < 4:\n                curr_j -= 1\n                continue\n            x = curr_i\n            y = curr_j\n            break\n        if x == y:\n            break\n        else:\n            print(' '.join([str(num) for num in arr]))\n        if x == y:\n            break\n    if x == y:\n        print('-1')\n    else:\n        print(' '.join([str(num) for num in arr]))"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. Feel free to use the.to_string() method.\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a permutation of length n where absolute difference of any 2\n       neighboring elements is between 2 and 4, inclusive.\n\n    Args:\n        stdin: input\n\n    Returns:\n        str: string representing the permutation\n    \"\"\"\n    # Get number of test cases from input\n    num_cases = int(stdin)\n    for i in range(num_cases):\n        # Get input from user\n        length = int(stdin)\n        array = []\n        array.append(length)\n        array.sort()\n        array.append(length)\n        array.sort()\n        for j in range(2, length):\n            for k in range(1, j):\n                if abs(array[k] - array[k - 1]) <= 4 and abs(array[k] - array[k + 1]) <= 4:\n                    pass\n                else:\n                    return \"No permutation exists.\"\n\n        print(array)\n\ndef"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n6\\n7\\n13\\n')\n    '9 6 10 8 4 7 3 1 5 2'\n    \"\"\"\n    nums = [int(n) for n in stdin.split('\\n')]\n    for i in range(1, len(nums)):\n        if (nums[i] - nums[i - 1]) ** 2 >= 4 and (nums[i] - nums[i - 1]) ** 2 <= 16:\n            break\n    else:\n        return '-1'\n    nums.sort()\n    ans =''.join(str(n) for n in nums)\n    return ans\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 10\n   ... 2\n   ... 4\n   ... 6\n   ... 7\n   ... 13\n   ... ''')\n    '9 6 10 8 4 7 3 1 5 2'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a permutation that meets the given requirements.\"\"\"\n    n = int(stdin.readline())\n    for _ in range(n):\n        n = int(stdin.readline())\n        last = [i for i in range(n, 0, -1)]\n        while True:\n            # Set aside one number to insert\n            idx = random.randrange(n)\n            # Swap the number with the number at the end of the list\n            last[idx], last[-1] = last[-1], last[idx]\n            # Check if the number is at the right place\n            if is_valid(last):\n                return \" \".join([str(i) for i in last])\n            # Reinsert the number at the end of the list\n            last[idx], last[-1] = last[-1], last[idx]\n\n\ndef"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to problem at https://www.hackerrank.com/challenges/climbing-the-leaderboard/problem\n    \"\"\"\n    # get number of test cases\n    num_test_cases = int(stdin)\n    for test_case in range(num_test_cases):\n        # get length of array\n        n = int(stdin)\n\n        # get array of ints\n        array = [int(x) for x in stdin]\n\n        # go through array and set swap counter\n        swap_counter = 0\n\n        # check for swaps\n        for i in range(0, n-1):\n            if i % 2 == array[i] % 2:\n                continue\n            else:\n                # add 1 to swap counter\n                swap_counter += 1\n\n                # swap elements\n                array[i], array[i+1] = array[i+1], array[i]\n\n        # print result\n        print(swap_counter)\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\""
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given an array $a[0 \\ldots n-1]$ of length $n$ which consists of non-negative integers. Note that array indices start from zero.\n\nAn array is called good if the parity of each index matches the parity of the element at that index. More formally, an array is good if for all $i$ ($0 \\le i \\le n - 1$) the equality $i \\bmod 2 = a[i] \\bmod 2$ holds, where $x \\bmod 2$ is the remainder of dividing $x$ by 2.\n\nFor example, the arrays [$0, 5, 2, 1$] and [$0, 17, 0, 3$] are good, and the array [$2, 4, 6, 7$] is bad, because for $i=1$, the parities of $i$ and $a[i]$ are different: $i \\bmod 2 = 1 \\bmod 2 = 1$, but $a[i] \\bmod 2 = 4 \\bmod 2 = 0$.\n\nIn one move, you can take any two elements of the array and swap them (these elements are not necessarily adjacent).\n\nFind the minimum number of moves in which you can make the array $a$ good, or say that this is not possible.\n\n\n-----Input-----\n\nThe first line contains a single integer $t$ ($1 \\le t \\le 1000$)\u00a0\u2014 the number of test cases in the test. Then $t$ test cases follow.\n\nEach test case starts with a line containing an integer $n$ ($1 \\le n \\le 40$)\u00a0\u2014 the length of the array $a$.\n\nThe next line contains $n$ integers $a_0, a_1, \\ldots, a_{n-1}$ ($0 \\le a_i \\le 1000$)\u00a0\u2014 the initial array.\n\n\n-----Output-----\n\nFor each test case, output a single integer\u00a0\u2014 the minimum number of moves to make the given array $a$ good, or -1 if this is not possible.\n\n\n-----Example-----\nInput\n4\n4\n3 2 7 6\n3\n3 2 6\n1\n7\n7\n4 9 2 1 18 3 0\n\nOutput\n2\n1\n-1\n0\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 4646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input in string format\n    :return: solution flag\n    \"\"\"\n    # Your code goes here\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colors = [int(c) for c in stdin.readline().split()]\n    edges = []\n    for _ in range(n - 1):\n        edges.append([int(v) - 1 for v in stdin.readline().split()])\n    tree = [[] for _ in range(n)]\n    for (u, v) in edges:\n        tree[u].append(v)\n        tree[v].append(u)\n\n    ans = [-1] * n\n    seen = [0] * n\n    for i in range(n):\n        if seen[i]:\n            continue\n        seen[i] = 1\n        stack = [i]\n        while stack:\n            v = stack.pop()\n            for u in tree[v]:\n                if seen[u]:\n                    continue\n                seen[u] = 1\n                stack.append(u)\n        ans[i] = colors.count(0) - colors.count(1)\n\n    return \" \".join(map(str, ans))\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    pass"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colors = [int(i) for i in stdin.readline().split()]\n    edges = [[int(i) for i in stdin.readline().split()] for i in range(n - 1)]\n    pass\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input and returns string\"\"\"\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    line = lines[1].split()\n    return '\\n'.join(solution_inner(n, line))\n\n\ndef"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = [int(x) for x in stdin.split()]\n    colors = np.array(colors)\n    edges = []\n    for i in range(n - 1):\n        u, v = [int(x) for x in stdin.split()]\n        edges.append((u, v))\n\n    tree = nx.Graph()\n    tree.add_nodes_from(range(n))\n    tree.add_edges_from(edges)\n    # print(tree.number_of_edges())\n\n    # print(nx.connected_components(tree))\n    # print(tree.edges)\n\n    cnt_w = 0\n    cnt_b = 0\n    res = [0] * n\n    for v in range(n):\n        if colors[v] == 0:\n            cnt_w += 1\n        else:\n            cnt_b += 1\n        comp = nx.descendants(tree, v)\n        cnt_w_subtree = cnt_w\n        cnt_b_subtree = cnt_b\n        for c in comp:\n            if colors[c] == 0:\n                cnt_w_subtree -= 1\n            else:\n                cnt_b_subtree -= 1\n        res[v] = max(cnt_w_subtree - cnt_b_subtree, res[v])\n    return \" \".join([str(x) for x in res])\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    colors = list(map(int, stdin.readline().strip().split()))\n    edges = [[int(x) for x in line.strip().split()] for line in stdin]\n    print(n)\n    print(colors)\n    print(edges)\n    return ''.join(map(str, solution_callback(n, colors, edges)))\n\n\ndef"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    edges = [map(int, line.split()) for line in stdin.split('\\n')[1:-1]]\n    edges = [[u - 1, v - 1] for u, v in edges]\n\n    nodes = list(range(n))\n    nodes = sorted(nodes, key=lambda x: nums[x])\n    clusters = {node: 0 for node in nodes}\n    clusters[nodes[0]] = 1\n    for u, v in edges:\n        clusters[v] = max(clusters[v], clusters[u] + 1)\n\n    clusters = sorted(clusters.items(), key=lambda x: x[1])\n    ans = [i[1] for i in clusters if i[0] == nodes[0]][0]\n\n    for i in range(1, n):\n        ans = max(ans, clusters[i][1] - clusters[nodes[i]][1])\n\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing and must return a result for check.\n    # replace this for solution\n    return''.join([str(x) for x in result])\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2\")\n    '1'\n    >>> solution(\"8\\n4\")\n    '2'\n    >>> solution(\"7\\n1\")\n    '0'\n    \"\"\"\n    n = int(stdin)\n    dp = [float(\"inf\")] * (n + 1)\n    dp[1] = 0\n\n    for i in range(2, n + 1):\n        dp[i] = min(dp[i], dp[i // 3] + 1 if i % 3 == 0 else float(\"inf\"), dp[i // 2] + 1 if i % 2 == 0 else float(\"inf\"))\n\n    return -1 if dp[n] == float(\"inf\") else dp[n]\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # put your python code here\n    # for _ in range(int(stdin)):\n    #     x = int(input())\n    #     print(int(x/6) if x % 6 == 0 else -1)\n    return str(int(stdin)//6 if int(stdin) % 6 == 0 else -1)\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    'Solution to the problem.'\n\n    return ''\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    stdin = int(stdin)\n    if stdin%6 == 0:\n        return -1\n    while stdin!= 1:\n        if stdin%6 == 0:\n            stdin /= 6\n        else:\n            stdin -= 1\n        if stdin%2 == 0:\n            stdin *= 2\n        else:\n            stdin += 1\n    return stdin - 1\n"
    },
    {
        "number": 4648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.split('\\n')\n    q = int(stdin[0])\n    for _ in range(q):\n        _, _, stdin[1] = stdin[1].split(' ')\n        _, stdin[1] = stdin[1].split('=')\n        stdin[1] = stdin[1].replace('\\n', '')\n        stdin[1] = stdin[1].replace('[', '')\n        stdin[1] = stdin[1].replace(']', '')\n        stdin[1] = stdin[1].replace('\"', '')\n        stdin[1] = stdin[1].replace(\"'\", '')\n        stdin[1] = stdin[1].split(',')\n        print(stdin)\n    return stdin"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\")\n    '1'\n    >>> solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\")\n    '0'\n    >>> solution(\"5 2\\nBGGGG\\n5 3\\nRBRGR\\n5 5\\nBBBRR\")\n    '3'\n    \"\"\"\n    stdin = stdin.split('\\n')\n    q = int(stdin[0])\n    stdin = stdin[1:]\n    for i in range(q):\n        n, k = map(int, stdin[0].split())\n        stdin = stdin[1:]\n        s = stdin[0]\n        stdin = stdin[1:]\n        res = 0\n        for char in s:\n            if char!= 'R' and char!= 'G':\n                res += 1\n        if n - k >= k:\n            print(res)\n        else:\n            print(n - k)\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 2\\nRRGB\\n5 3\\nRGBG\\n5 5\\nRRRRR')\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute the length of the longest substring\"\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum number of characters that must be changed to make a substring of length k,\n    a sub-sequence of the initial string, the same for the infinite string, starting from the initial\n    string\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    result = []\n    for _ in range(q):\n        n, k = [int(x) for x in stdin.readline().split(' ')]\n        s = stdin.readline().strip()\n        s = 'B' * n\n        ans = 0\n        for i in range(n):\n            if s[i:i + k] == s[i + k:i + 2 * k]:\n                ans += 1\n        result.append(ans)\n    return '\\n'.join(str(x) for x in result)"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #return?\n\nq = int(stdin.readline().strip())\n\nfor _ in range(q):\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    count = 0\n    i = 0\n    while i < len(s) - k + 1:\n        if s[i:i+k]!= \"RGB\" * (k//3):\n            count += 1\n            i += 1\n        else:\n            break\n    print(count)\n\n\"\"\"\n\nfrom collections import Counter\ndef"
    },
    {
        "number": 4649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:]\n    lst = list(s)\n    dp = [[float('inf')] * (len(s)+1) for _ in range(len(s)+1)]\n    dp[0][0] = 0\n    for i in range(1, len(s)+1):\n        dp[0][i] = 0\n    for i in range(1, len(s)+1):\n        dp[i][0] = 0\n    for i in range(1, len(s)+1):\n        for j in range(1, len(s)+1):\n            if s[i-1]!= s[j-1]:\n                dp[i][j] = min(dp[i][j], dp[i][j-1]+1)\n            if i >= k:\n                dp[i][j] = min(dp[i][j], dp[i-k][j]+1)\n            if j >= k:\n                dp[i][j] = min(dp[i][j], dp[i][j-k]+1)\n    print(dp[n][k])\n    return s\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \" \".join(str(i) for i in result)\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        permutation = [int(x) for x in stdin.readline().split()]\n        idxs_swap = []\n        for i in range(1, n):\n            if permutation[i] < permutation[i-1]:\n                idxs_swap.append(i)\n        for i in idxs_swap[::-1]:\n            permutation[i], permutation[i-1] = permutation[i-1], permutation[i]\n        print(*permutation)\n    return ''\n    \n    \n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Solution\n    # This is more or less a dynamic programming problem\n    # Here, for each index, the best next permutation to have is\n    # the best possible next permutation for the remaining\n    # indices (plus the last one)\n    # So we first obtain the best permutation for all indices\n    # after the last one\n    # Then we change the last index\n    # We repeat\n    \n    # read input\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        nums = list(map(int, stdin.readline().split()))\n        min_nums = []\n        i = n - 2\n        while i >= 0:\n            # Get the permutation for indices after i\n            # then swap i with the last index\n            min_nums.append(nums[i+1:])\n            min_nums[-1], nums[i] = nums[i], nums[i+1]\n            i -= 1\n        min_nums.append(nums)\n        min_nums.sort()\n        print(min_nums[0][0])\n        for i in range(n-1):\n            print(min_nums[0][i+1], end=' ')\n        print(min_nums[0][n-1])\n    return ''\n\n\n\ndef"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    for _ in range(int(stdin)):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        if len(a) == n:\n            pass\n        else:\n            raise Exception('Incorrect number of elements')\n        left = 0\n        right = n - 1\n        s = set()\n        while right > left:\n            if a[left] not in s:\n                s.add(a[left])\n                left += 1\n            if a[right] not in s:\n                s.add(a[right])\n                right -= 1\n            else:\n                break\n        print(''.join(map(str, a[:left] + sorted(s) + a[left: right + 1] + a[right + 1:])))\n\nsolution(stdin)\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for _ in range(q):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            stdout.write(stdin.readline().strip() + '\\n')\n        else:\n            p = sorted(map(int, stdin.readline().strip().split(' ')))\n            q = p.copy()\n            for i in range(1, n):\n                if p[i] < p[i - 1]:\n                    p[i], p[i - 1] = p[i - 1], p[i]\n                    break\n                else:\n                    p[i:] = p[i:] + [p[i - 1]]\n                    break\n            else:\n                p = p + list(reversed(p[:i]))\n            stdout.write(' '.join(map(str, p)) + '\\n')\n\nSolution.solution(input)\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n    # n = int(stdin.readline().split('\\n')[0])\n    # array = [int(i) for i in stdin.readline().split('\\n')[0].split(' ')]\n    q = int(stdin.readline().split('\\n')[0])\n    for i in range(q):\n        n = int(stdin.readline().split('\\n')[0])\n        array = [int(i) for i in stdin.readline().split('\\n')[0].split(' ')]\n        result = \"\"\n        for j in range(n):\n            i = j\n            while i + 1 < n and array[i + 1] < array[i]:\n                i += 1\n            if i == j:\n                result += f\"{array[i]}\"\n            else:\n                result += f\"{array[i]} \"\n        result = result.replace(\"\\n\", \"\")\n        print(result)\n"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        arr = list(map(int, stdin.readline().split()))\n        min_arr = arr\n        for i in range(n-1):\n            if arr[i] > arr[i+1]:\n                tmp = arr[i+1]\n                arr[i+1] = arr[i]\n                arr[i] = tmp\n                for j in range(i+1, n):\n                    if arr[j] < arr[j-1]:\n                        tmp = arr[j-1]\n                        arr[j-1] = arr[j]\n                        arr[j] = tmp\n                        break\n            else:\n                break\n        print(\" \".join(map(str, arr)))\n    return ''"
    },
    {
        "number": 4651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Solution begins here:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin)\n        l = list(map(int, stdin.split()))\n        p = []\n        for i in range(1, n + 1):\n            p.append(i)\n        i = 1\n        while i < n:\n            if l[i] == l[i - 1]:\n                i += 1\n                continue\n            elif l[i] > l[i - 1]:\n                break\n            else:\n                ind1 = p.index(l[i])\n                ind2 = p.index(l[i - 1])\n                p[ind1] = l[i - 1]\n                p[ind2] = l[i]\n                i = 1\n                if ind2 == len(l) - 1:\n                    i = ind1 + 1\n        print(\" \".join(map(str, p)))\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    query = int(input[0])\n    for _ in range(query):\n        n = int(input[1])\n        p = list(map(int, input[2].split()))\n        for i in range(n):\n            if p[i] == i + 1:\n                p[i] = i + 2\n            elif p[i] == i - 1:\n                p[i] = i - 2\n            else:\n                print('NO')\n                break\n        else:\n            print('YES')\n        input = input[3:]\n\n\ndef"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().rstrip())\n    for _ in range(q):\n        n = int(stdin.readline().rstrip())\n        numbers = list(map(int, stdin.readline().rstrip().split()))\n        c = 0\n        l = 0\n        for i in range(len(numbers)):\n            if numbers[i] == i + 1:\n                c += 1\n            else:\n                l = i + 1\n        if c == len(numbers) - 1 and l == len(numbers):\n            print('YES')\n        else:\n            print('NO')\n\nsolution(input())\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        order = list(map(int, stdin.readline().split()))\n        prev = order[0]\n        for j in range(1, n):\n            if prev > order[j]:\n                break\n            prev = order[j]\n        else:\n            print(\"YES\")\n            continue\n        print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def left_side(p):\n        if p == 1:\n            return 1\n        else:\n            return left_side(p - 1)\n\n    def right_side(p):\n        if p == len(p_order):\n            return 1\n        else:\n            return right_side(p + 1)\n\n    # Not finished\n    pass"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for i in range(q):\n        n = int(stdin.readline())\n        p = [int(x) for x in stdin.readline().split(\" \")]\n        if n == len(p):\n            p = [x - 1 for x in p]\n            p = p + [n - i for i in p]\n            p = [x % n for x in p]\n            if all([p[i + 1] - p[i] == 1 for i in range(n - 1)]):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This solution converts the input into a list of list of students and sorts them.\n    For the clockwise or counterclockwise check, the order is verified by checking if the next student in the list is after the previous one.\n    Time complexity: O(n^2 * log n)\n    '''\n    stdin = stdin.split('\\n')\n    q = int(stdin[0])\n    stdin = stdin[1:]\n    for _ in range(q):\n        n = int(stdin.pop(0))\n        students = [int(i) for i in stdin.pop(0).split(' ')]\n        students = sorted(students)\n        clockwise = sorted([i for i in range(1, n)], reverse=True)\n        counterclockwise = sorted([i for i in range(1, n)])\n        if clockwise == students:\n            print('YES')\n            continue\n        if counterclockwise == students:\n            print('YES')\n            continue\n        print('NO')\n    return ''\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    query_count = int(stdin.readline())\n    for _ in range(query_count):\n        n = int(stdin.readline())\n        l = list(map(int, stdin.readline().split()))\n        if not has_cycle(l):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return \"\"\n\ndef"
    },
    {
        "number": 4652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = [int(x) for x in stdin.readline().split()]\n    d = dict(zip(k, [x for x in range(1, n + 1)]))\n    l = [int(x) for x in stdin.readline().split()]\n    for x in range(n - 1):\n        if l[x]!= d[l[x]]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        if n < k:\n            print(0)\n            continue\n        print(int(n * (k - 1 + n % 2) / 2))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Wrong Answer\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gives the maximum number of candies Santa can give to kids so that he will be satisfied.\n\n    Args:\n        stdin: input\n\n    Returns:\n        str: the maximum number of candies Santa can give to kids so that he will be satisfied\n    \"\"\"\n    return stdin"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t + 1):\n        _, k = list(map(int, lines[i].split()))\n        r = k // 2\n        if r * 2 == k:\n            r -= 1\n        print(k - r)\n    return ''\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''t: the number of tests to run'''\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = [int(x) for x in stdin.readline().split()]\n        n = b - a\n        if n <= 1:\n            print(n)\n        elif (n % 2) == 0:\n            print(n // 2)\n        else:\n            print(n // 2 + 1)"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"Compute maximum number of candies given by Santa\"\n\n    # Read number of test cases\n    num_cases = int(stdin.readline())\n    for _ in range(num_cases):\n        n, k = [int(x) for x in stdin.readline().split()]\n        print(int(k*(k+1)//2 < n))"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    I/O:\n    >>> solution(\"5 2\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 3\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 4\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 5\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 6\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 7\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 8\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 9\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 10\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 11\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 12\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 13\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 14\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 15\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 16\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 17\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 18\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 19\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 20\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 21\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 22\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 23\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 24\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 25\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 26\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 27\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 28\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 29\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 30\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 31\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\"5 32\\n19 4\\n12 7\\n6 2\\n100000 50010\\n\")\n    [5, 18, 10, 6, 75015]\n    >>> solution(\""
    },
    {
        "number": 4653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum number of candies Santa needs to give to his children such that the maximum number of children is not greater than the minimum number.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"8\n   ... 10 3\n   ... 100 4\n   ... 8 7\n   ... 97 2\n   ... 8 8\n   ... 3 10\n   ... 5 3\n   ... 1000000000 9\n   ... \"\"\")\n    'YES\\n4 2 4\\nYES\\n55 5 5 35\\nNO\\nNO\\nYES\\n1 1 1 1 1 1 1 1 1\\nNO\\nYES\\n3 1 1\\nYES\\n111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111110 111111120'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if k % 2 == 0:\n            if n % k == 0:\n                print(\"YES\")\n                print(*[n // k for i in range(k)])\n            else:\n                print(\"NO\")\n        else:\n            if n % (k - 1) == 0:\n                print(\"YES\")\n                print(*[(n // (k - 1)) + i for i in range(k)])\n            else:\n                print(\"NO\")\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if k % 2 == n % 2:\n            print('YES')\n            a = []\n            m = n\n            for i in range(k):\n                m //= 2\n                a.append(m)\n                if m % 2 == 0:\n                    print(' '.join(str(j) for j in a))\n                    break\n            else:\n                print('NO')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution by Hacker Rank\n    '''\n    input_lines = stdin.splitlines()\n    number_of_test_cases = int(input_lines[0])\n    \n    # The list of answers for each test case\n    answers_for_each_test_case = []\n    \n    for i in range(1, number_of_test_cases + 1):\n        n, k = [int(s) for s in input_lines[i].split()]\n        answers_for_each_test_case.append(print_answers(n, k))\n    \n    # Return the concatenation of all test cases' answers\n    return \"\\n\".join(answers_for_each_test_case)\n\ndef"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041e\u0431\u0445\u043e\u0434 \u0432\u0441\u0435\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432 \u0441 \u0440\u0430\u0437\u043c\u0435\u0440\u0430\u043c\u0438 \u0440\u0430\u0437\u0440\u0435\u0437\u0430\n    \"\"\"\n    s, k = stdin.split(' ')\n    n = int(s)\n    k = int(k)\n    odd = 0\n    even = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    for i in range(1, k+1):\n        if i % 2 == 0:\n            even -= 1\n        else:\n            odd -= 1\n\n    if odd == 0 and even == 0:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for _ in range(test_cases):\n        n, k = [int(s) for s in stdin.readline().strip().split(' ')]\n        if n % 2 == 0:\n            if all(i % 2 == 0 for i in range(1, k + 1)):\n                for i in range(1, k + 1):\n                    print(\"YES\")\n                    print(i, end=\" \")\n                break\n            else:\n                print(\"NO\")\n        else:\n            if all(i % 2!= 0 for i in range(1, k + 1)):\n                for i in range(1, k + 1):\n                    print(\"YES\")\n                    print(i, end=\" \")\n                break\n            else:\n                print(\"NO\")\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = list(map(int, stdin.readline().split()))\n        if k == 1:\n            if n % 2 == 0:\n                print(\"YES\")\n                print(1, 2)\n            else:\n                print(\"NO\")\n        else:\n            l = []\n            if n % 2 == 0:\n                for i in range(1, k + 1):\n                    if n // k - i >= 0:\n                        l.append(i)\n                    else:\n                        l.append(n // k + i)\n            else:\n                for i in range(1, k + 1):\n                    if n // k + i - 1 >= 0:\n                        l.append(i)\n                    else:\n                        l.append(n // k - i + 1)\n            print(\"YES\")\n            print(*l)\n"
    },
    {
        "number": 4654,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        if k > n:\n            print('NO')\n            continue\n        if k == n or n % 2 == 1 or k % 2 == 0:\n            print('YES')\n            print(n // 2 - k // 2, n // 2 + k // 2)\n            continue\n        print('NO')\n\n    return solution\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 3 4\\n1 10 100\\n10000000000000000 10000000000000000 10000000000000000\\n23 34 45\\n\")\n    '4\\n55\\n15000000000000000\\n51'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([f\"Case #{i + 1}: {sol(int(i) for i in stdin.split('\\n')[i])}\" for i in range(int(stdin.split('\\n')[0]))])\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(n)\n    \"\"\"\n   ...\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def func(candies_list: List[int]) -> int:\n        i = 0\n        while i < len(candies_list):\n            if i == 0:\n                candies_list[i] = candies_list[i]\n            else:\n                candies_list[i] = max(candies_list[i], candies_list[i - 1])\n            i += 2\n\n        return candies_list[-1]\n\n    q = int(stdin.readline().strip())\n    result = []\n    for _ in range(q):\n        a, b, c = [int(x) for x in stdin.readline().split()]\n        result.append(func([a, b, c]))\n\n    for i in result:\n        print(i)\n    return ''"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q, *q_val = map(int, stdin.split('\\n'))\n    a, b, c = zip(*map(int, stdin.split('\\n')[1:]))\n    q_val = [a, b, c]\n    result = []\n    for i in range(q):\n        a, b, c = q_val[0][i], q_val[1][i], q_val[2][i]\n        if a <= c:\n            q_val[0][i] = a\n            q_val[1][i] = 0\n        else:\n            q_val[0][i] = c\n            q_val[1][i] = b\n        result.append(q_val[0][i] + q_val[1][i])\n    return result\n"
    },
    {
        "number": 4655,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        a, b, c = [int(i) for i in stdin.readline().split()]\n        alice = b * 2\n        bob = c * 2\n        while alice > bob:\n            alice -= 1\n            bob += 2\n        print(alice)"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline())\n    for i in range(T):\n        N, K = map(int, stdin.readline().split())\n        a = list(stdin.readline())\n        M = len(a)\n        b = [0] * M\n        for j in range(M):\n            b[j] = a[j]\n            for m in range(M):\n                if j!= m:\n                    if a[j] == a[m]:\n                        b[j] += 1\n        print(b)\n        ans = 0\n        for j in range(M):\n            ans = max(ans, K - b[j])\n        print(ans)\n    return \"\"\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n, k = map(int, stdin.split(' '))\n    beads = s.split(' ')\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    # Please take input from STDIN\n    # Take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    # Your code here\n    # Your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and try to solve it \n    # Please do not read input and try to solve it, \n    # try to solve it in the know\n    \n    # Write your code here\n    # Write your code here\n    # Please take input and"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check_neat(k: int, s: str) -> bool:\n        if k == 1:\n            return True\n        elif k == 0:\n            return True\n        else:\n            for i in range(1, len(s) + 1):\n                if s[i - 1] == s[i % len(s)]:\n                    continue\n                else:\n                    if s[i - 1]!= s[i % len(s) - 1]:\n                        if s[i - 1] == s[(i + 1) % len(s)]:\n                            continue\n                        else:\n                            return False\n                    else:\n                        return False\n            return True\n    test_cases = int(stdin.readline())\n    for i in range(test_cases):\n        n, k = map(int, stdin.readline().split())\n        s = stdin.readline().strip()\n        if check_neat(k, s) == True:\n            print(k)\n        else:\n            print(n)\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return ''.join(sorted(stdin, key=stdin.count, reverse=True))\n\nfor _ in range(int(stdin.readline())):\n  n, k = [int(x) for x in stdin.readline().split(' ')]\n  s = stdin.readline().strip()\n\n  for _ in range(k):\n    s = solution(s)\n\n  print(len(s))\n\n------\n\ndef"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    n, k = [int(x) for x in stdin.split()]\n    n_beads = stdin.split()[1:]\n    # Your code here\n    return ans\n"
    },
    {
        "number": 4656,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nYou can use the '\\n' character in your code to separate output to the console.\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    q = int(lines[0])\n    ans = ''\n    for _ in range(q):\n        n, k = list(map(int, lines[1 + _].split()))\n        a = list(map(int, lines[2 + _].split()))\n        if not k % 2:\n            ans = 'NO'\n        else:\n            ans = 'YES'\n            for i in range(k // 2):\n                if a[i] % 2 == 0:\n                    a[i] += 1\n            a = [0] + a + [n + 1]\n            r = [0] * (n + 1)\n            for i in range(n + 1):\n                r[i] = i + 1\n            for i in range(1, k + 1):\n                s = [0]\n                for j in range(i, n + 2, i):\n                    s.append(r[j - 1])\n                for j in range(1, len(s) - 1):\n                    if s[j] - s[j - 1] == 1 and s[j] - s[j - 1] < r[s[j - 1]] - s[j - 1]:\n                        r[s[j - 1]] = s[j]\n            for i in range(1, n + 1):\n                if r[i]!= i:\n                    a = a[:a.index(r[i]) + 1] + [i] + a[a.index(r[i]) + 1:]\n            ans +='' +''.join(map(str, a))\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_input():\n        return int(stdin)\n    def get_line() -> list[int]:\n        return list(map(int, stdin.split('\\n')[0].split(' ')))\n\n    def get_input_list() -> list[int]:\n        return list(map(int, stdin.split('\\n')[0].split(' ')))\n    def get_line_list() -> list[int]:\n        return list(map(int, stdin.split('\\n')[0].split(' ')))\n\n    n, k = get_line()\n    a = get_line_list()\n    \n    odd_sum = 0\n    for x in a:\n        if x % 2 == 1:\n            odd_sum += 1\n    \n    if odd_sum > k:\n        print('NO')\n        return\n    \n    if odd_sum == k:\n        print('YES')\n        print(' '.join(map(str, a)))\n        return\n    \n    while odd_sum!= k:\n        if len(a) % 2 == 0:\n            if odd_sum!= k:\n                print('NO')\n                return\n            break\n        if k < len(a) % 2:\n            print('NO')\n            return\n        a.pop()\n        k -= 1\n        odd_sum = 0\n        for x in a:\n            if x % 2 == 1:\n                odd_sum += 1\n\n    print('YES')\n    print(' '.join(map(str, a)))\n    return"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_queries, size = map(int, stdin.split('\\n')[0].split())\n    sum_ = 0\n    result = []\n    for i in range(num_queries):\n        n, k = map(int, stdin.split('\\n')[i + 1].split())\n        sum_ += n\n        if sum_ % 2 == 0:\n            if n % k == 0:\n                result.append(k)\n            else:\n                result.append(n % k)\n        else:\n            result.append(n % k)\n\n    result_str = ''\n    for i in range(num_queries):\n        result_str += str(result[i])\n        if i!= num_queries - 1:\n            result_str +=''\n    if sum_ % 2 == 0:\n        return result_str + '\\nYES'\n    return result_str + '\\nNO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... 7 18 3 14 1\n   ... 5 4\n   ... 1 2 3 4 5\n   ... 6 2\n   ... 1 2 8 4 10 2\n   ... ''')\n    YES\n    1 3 5\n    NO\n    NO\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Compute all possible subsegment divisions.\n    \n    :param stdin: Input string\n    :type stdin: str\n    :return: Output string\n    :rtype: str\n    \"\"\"\n    # Get input\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    \n    # Get all possible subsegment divisions\n    subsegment_divisions = []\n    for subsegment_sum in range(k + 1):\n        for i in range(0, n):\n            if i + subsegment_sum <= n:\n                subsegment_divisions.append([i + j for j in range(subsegment_sum)])\n    \n    # Check if the input can be divided into subsegments\n    if not k % 2:\n        # If the array can be divided into subsegments with odd sum\n        for subsegment in subsegment_divisions:\n            if sum(a[x] for x in subsegment) % 2:\n                print(\"NO\")\n                return\n        print(\"YES\")\n        for subsegment in subsegment_divisions:\n            print(' '.join([str(x) for x in subsegment]))\n    else:\n        # If the array can't be divided into subsegments with odd sum\n        print(\"NO\")\n    "
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the problem.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline())\n    for _ in range(q):\n        n, k = [int(x) for x in stdin.readline().split()]\n        arr = [int(x) for x in stdin.readline().split()]\n        if n < k:\n            print(\"NO\")\n            continue\n        # dp[k][i] = is it possible to split the array into k parts of odd sums\n        # if dp[k][i] = true then arr[:i] is a valid partition of the array\n        dp = [[False] * n for _ in range(k + 1)]\n        for i in range(1, n + 1):\n            dp[1][i - 1] = True\n        dp[1][-1] = True\n        for k_ in range(2, k + 1):\n            for i in range(k_ - 1, n):\n                for j in range(i - 1, k_ - 2, -1):\n                    if j <= k_ - 2:\n                        dp[k_][i] = dp[k_][i] or dp[k_ - 1][j] and (arr[j] % 2 == 1)\n                    else:\n                        dp[k_][i] = dp[k_][i] or dp[k_ - 1][j] and (arr[j] % 2 == 1) and (arr[j - k_ + 1] == (arr[j - k_ + 1] + 1) % 2)\n        # print(dp[k][n - 1])\n        if dp[k][n - 1]:\n            print(\"YES\")\n            for j in range(k):\n                print(j + 1, end=\" \")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4657,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(1) space complexity, O(1) time complexity\n    \"\"\"\n    n = int(stdin, 2)\n    return bin(n)[2:].zfill(32)[::-1]\n    \n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nclass Solution:\n    def reverseBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        # 0b
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"hint\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution goes here.\n    return stdin\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"docstring for solution\"\"\"\n    x = int(stdin, 2)\n    return bin(x)[2:]\n\"\"\"\n    arr = [0] * 32\n    for i in range(32):\n        arr[i] = stdin[i]\n    string = \"\"\n    for i in range(32):\n        string += arr[31 - i]\n    return string\n\n\"\"\"\n    return bin(int(stdin, 2))[2:]"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nclass Solution:\n    def reverseBits(self, n: int) -> int:\n        result = 0\n        for i in range(32):\n            result <<= 1\n            result += n & 1\n            n >>= 1\n        return result"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    pass\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"My solution\n    \"\"\"\n    n = int(stdin, 2)\n    return f'{n:032b}'\n\"\"\"\n"
    },
    {
        "number": 4658,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    row = [1]\n    result = []\n    if numRows == 1:\n        return [row]\n    else:\n        result.append(row)\n        for i in range(1, numRows):\n            row = [1]\n            for j in range(i):\n                if j == 0 or j == i - 1:\n                    row.append(1)\n                else:\n                    row.append(result[i-1][j-1] + result[i-1][j])\n            row.append(1)\n            result.append(row)\n    return result\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numRows = int(stdin)\n    res = []\n    for i in range(numRows):\n        row = [1 for _ in range(i+1)]\n        if i >= 2:\n            for j in range(1,i):\n                row[j] = res[i-1][j-1] + res[i-1][j]\n        res.append(row)\n    return res\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # https://www.geeksforgeeks.org/find-all-numbers-divisible-by-6-in-a-range/\n\n    start, end = stdin.split(' ')\n    start, end = int(start), int(end)\n\n    results = []\n    for n in range(start, end + 1):\n        if n % 6 == 0:\n            results.append(get_pascal(n))\n    return results\n\n\ndef"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a matrix of Pascal's triangle\"\"\"\n    return None\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    rows = int(stdin)\n    triangle = []\n    for row in range(rows):\n        triangle.append([1] * (row + 1))\n        for col in range(1, row):\n            triangle[row][col] = triangle[row-1][col-1] + triangle[row-1][col]\n    return triangle\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = 5\n    result = [[1]]\n    for i in range(n - 1):\n        cur = [1]\n        prev = result[-1]\n        for j in range(len(prev) - 1):\n            cur.append(prev[j] + prev[j + 1])\n        cur.append(1)\n        result.append(cur)\n    return result\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def pascal(N: int) -> List[List[int]]:\n        pass\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # iterate through numRows and call the recursive function\n    # when we hit numRows, exit loop\n    pass\n"
    },
    {
        "number": 4659,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\")\n    [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n    \"\"\"\n    # return pascal_triangle(5)\n    print(pascal_triangle(5))\n\n\ndef"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l = []\n    for i in range(N):\n        s = stdin.split()\n        l.append(s[0]+'@'+s[1].split('.')[0]+'.'+s[1].split('.')[1][:3])\n    l.sort()\n    return l\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a list of valid email addresses in lexicographical order\"\"\"\n    pass\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import collections\n    N = int(stdin.readline())\n    emails = []\n    for i in range(N):\n        emails.append(stdin.readline())\n\n    for email in emails:\n        if re.match(r\"[\\w-]*@\\w*\\.\\w{2,3}\", email):\n            print(email)\n\n    return"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return [line for line in stdin.split(\"\\n\") if is_valid_email_address(line)]\n\n=====Test Case=====\n>>> solution(\"Jasmine\\njasminewilliams@codewars.com\\nja\\nw+2@code.com\")\n['jasminewilliams@codewars.com', 'ja@code.com', 'jasmine@codewars.com']\n\"\"\"\n\nimport re\ndef"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n====================== SOLUTION ========================\n\"\"\"\nimport re\n\nN = int(input())\n\ndef"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\\\nMerryCHRISTMAS\\\\nAbCdEfGh\\\\n1234567\\\\n')\n    ['MerryCHRISTMAS@abcd.efg', 'MerryCHRISTMAS@abcd.efg', 'MerryCHRISTMAS@abcd.efg']\n    \"\"\"\n    n = int(stdin)\n    emails = []\n    for _ in range(n):\n        email = stdin.split(\"\\n\")[0]\n        if is_valid(email):\n            emails.append(email)\n        stdin = stdin.split(\"\\n\", 1)[1]\n    return emails\n\ndef"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    #your code here\n    # Write your code here\n    import re\n    \n    list1 = []\n    \n    n = int(input().strip())\n    for i in range(n):\n        list1.append(input().strip())\n    \n    list2 = []\n    \n    for i in list1:\n        if i.count(\"@\") == 1:\n            if i.index(\"@\") > 0:\n                if i.index(\"@\") > i.index(\".\"):\n                    if bool(re.match('^[a-zA-Z0-9\\-_]*@[a-zA-Z0-9\\-]*.[a-zA-Z]{1,3}$', i)):\n                        list2.append(i)\n        \n    if len(list2) == 0:\n        list2 = []\n    \n    list2.sort()\n    print(list2)\n\nsolution()\n"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    email_addresses = stdin.split('\\n')\n    email_addresses = list(map(email_address, email_addresses))\n    return email_addresses\n\ndef"
    },
    {
        "number": 4660,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n\" + \"ljsdfll@gmail.com\\n\" + \"ljdsfld@gmal.com\\n\" + \"ldsjfl@gmal.com\")\n    'ljdsfld@gmal.com'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  >>> solution(\"3\")\n  [1, 1, 1]\n  >>> solution(\"7\")\n  [1, 1, 1, 1, 1, 1, 1]\n  \"\"\"\n ...\n}\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4')\n    [0, 1, 1, 8]\n    \"\"\"\n    return list(map(lambda x: x**3, fibonacci(int(stdin))))\n\ndef"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #your solution goes here\n    #=========================\n    return []\n    #========================="
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Case=====\nn = 10\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n>>>>>>> d4caa41d0d3c6dd16e5c14e35c2dc8e8f9ecc3b\n\ndef"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  fibonacci_numbers = [0, 1]\n\n  for i in range(2, N):\n    fibonacci_numbers.append(fibonacci_numbers[i - 2] + fibonacci_numbers[i - 1])\n\n  return list(map(lambda x: x**3, fibonacci_numbers))"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  # return a list containing the cubes of the first N fibonacci numbers\n  # in order\n  a=[0,1]\n  for i in range(2,int(stdin)):\n    b=a[i-1]+a[i-2]\n    a.append(b)\n  return list(map(lambda x:x**3,a[0:int(stdin)]))\n\nIf you have not passed the integer N, then print -1.\n\n>> solution(5)\n[0, 1, 1, 8, 27]\n\nsolution(4)\n[0, 1, 1, 8]\n\nsolution(7)\n[0, 1, 1, 8, 27, 64, 125]\n\nsolution(10)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512]\n\nsolution(20)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(40)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(50)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(100)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(200)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(500)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(1000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(5000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(10000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(20000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(30000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(50000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(100000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(200000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(300000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(400000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(500000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(1000000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n\nsolution(2000000)\n[0, 1, 1, 8, 27, 64, 125, 216, 343, 512, 927, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(lambda x: int(x)*int(x)*int(x), [0, 1]))\n    print(l[:n])\n    return l[:n]"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def fibonacci(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n    \n    n = int(stdin)\n    return list(map(lambda x: x**3, [fibonacci(i) for i in range(n)]))\n\n======Test Case=====\nInput\n5\n\nOutput\n[0, 1, 1, 8, 27]\n\n======Test Case=====\nInput\n8\n\nOutput\n[0, 1, 1, 8, 27, 125, 216, 343]\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return list(map(lambda x: x**3, fib(N)))\n"
    },
    {
        "number": 4661,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.split(' ')[0])\n    return map(lambda x:x**3, map(fibonacci, range(n+1)))\n\n=====Test Case=====\n>>> solution(3)\n[1, 8, 27]\n>>> solution(5)\n[1, 8, 27, 64, 125]\n\"\"\"\n\ndef"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    max_depth = 0\n    for line in stdin.split('\\n'):\n        depth = 0\n        for tag in line.split('<'):\n            if tag.endswith('/>'):\n                depth -= 1\n            else:\n                depth += 1\n            max_depth = max(depth, max_depth)\n    return max_depth\n=====Solution=====\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def parse_xml(string: str) -> list:\n        \"\"\"\n        Returns a list of lines, where each line represents a tag,\n        a value of that tag, and a list of its children\n        \"\"\"\n        lines = string.split(\"\\n\")\n\n        # create a list of elements\n        elements = [parse_element(line) for line in lines]\n\n        # sort the elements in reverse order\n        elements = sorted(elements, key=lambda e: len(e.tag), reverse=True)\n\n        # iterate through the elements, starting with the last one\n        for e in elements:\n            for child in e.children:\n                child.parent = e\n        return elements\n\n    def parse_element(line: str) -> Element:\n        \"\"\"\n        Parses an XML line, and returns a list of its children\n        \"\"\"\n        i = line.find(\"<\") + 1\n        j = line.find(\">\")\n        tag = line[i:j]\n\n        i = line.find(\">\") + 1\n        j = line.find(\"<\", i)\n        value = line[i:j].strip()\n\n        i = line.find(\"<\")\n        j = line.find(\">\")\n        children = parse_xml(line[j + 1 :])\n        return Element(tag, value, children)\n\n    def find_root(element: Element) -> Element:\n        \"\"\"\n        Returns the root element of the tree\n        \"\"\"\n        while element.parent is not None:\n            element = element.parent\n        return element\n\n    def count_nodes(element: Element) -> int:\n        \"\"\"\n        Returns the number of nodes in the tree\n        \"\"\"\n        return 1 + sum(count_nodes(child) for child in element.children)\n\n    return count_nodes(find_root(parse_xml(stdin)[0]))\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    doc = stdin\n    m = 0\n    state = 0\n    for x in doc:\n        if state == 1:\n            if x == \">\":\n                state = 2\n            else:\n                m = max(m,1)\n                state = 0\n        elif state == 2:\n            if x == \"?\":\n                state = 3\n            elif x == \"/\":\n                state = 4\n            else:\n                state = 0\n        elif state == 3:\n            if x == \"/\":\n                state = 4\n            else:\n                state = 3\n        elif state == 4:\n            if x == \">\":\n                state = 2\n            else:\n                state = 4\n        elif state == 0:\n            if x == \"<\":\n                state = 1\n            else:\n                m = max(m,1)\n    return m"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Case=====\ntest.assert_equals(solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n</feed>\"\"\"), 1)\n\ntest.assert_equals(solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\"), 2)\n\ntest.assert_equals(solution(\"\"\"<feed xml:lang='en'>\n    <title>HackerRank</title>\n    <subtitle lang='en'>Programming challenges</subtitle>\n    <link rel='alternate' type='text/html' href='http://hackerrank.com/'/>\n    <updated>2013-12-25T12:00:00</updated>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 1</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n    <entry>\n        <author gender='male'>Harsh</author>\n        <question type='hard'>XML 2</question>\n        <description type='text'>This is related to XML parsing</description>\n    </entry>\n</feed>\"\"\"), 3)\n\"\"\""
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count_braces = 0\n    stack_braces = []\n    for c in stdin:\n        if c == '<':\n            count_braces += 1\n            stack_braces.append('<')\n        elif c == '>':\n            if len(stack_braces) == 0:\n                continue\n            elif stack_braces[-1] == '<':\n                stack_braces.pop()\n                count_braces -= 1\n    return count_braces"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return (solution([elem for elem in stdin.split('\\n')]) if stdin else 0)"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    max_depth = 0\n    depth = 0\n    for line in stdin:\n        line = line.lstrip()\n        if line == \"\":\n            continue\n        elif line.startswith(\"<\"):\n            depth += 1\n            if depth > max_depth:\n                max_depth = depth\n        else:\n            depth -= 1\n    print(max_depth)\n    return\nsolution(input)"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # count = 0\n    # m = 0\n    # lines = stdin.split(\"\\n\")\n    # for line in lines:\n    #     count += line.count(\"<\")\n    #     count -= line.count(\">\")\n    #     if count > m:\n    #         m = count\n    # return m\n    return len(stdin.split(\"<\")) - len(stdin.split(\"</\"))\n"
    },
    {
        "number": 4662,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    import xml.etree.ElementTree as etree\n    tree = etree.ElementTree(etree.fromstring(stdin))\n    max_depth = 0\n    for elem in tree.getiterator():\n        if elem.getparent() is None:\n            depth = 0\n        else:\n            depth = elem.getparent().index(elem) + 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth\n    pass\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if re.match(r'^(?:[789]\\d|\\d{3}|\\d{4})$', stdin) else 'NO'\n\nassert (solution(\"93423423\") == 'YES')\nassert (solution(\"3423\") == 'NO')\nassert (solution(\"789\") == 'YES')\nassert (solution(\"934234234\") == 'NO')\nassert (solution(\"12342345\") == 'NO')\n\n==Time Complexity==: O(n) where n is the length of the string\n==Space Complexity==: O(1)\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if re.match(r'\\d{3}-\\d{3}-\\d{4}', stdin) else \"NO\"\n\"\"\""
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"YES\" if re.match('^[7-9]\\d{9}$', stdin) else \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Case=====\nTest 1\nInput\n\n7\n07895462130\n958769874\n(021) 32239913\n(021) 32239913\n(021) 32239913\n07357398713\n07357398713\n07357398713\n\nOutput\n\nYES\nYES\nYES\nYES\nNO\nNO\nNO\n\nTest 2\nInput\n\n5\n958769874\n(021) 32239913\n(021) 32239913\n(021) 32239913\n958769874\n958769874\n\nOutput\n\nYES\nYES\nYES\nYES\nNO\n\nTest 3\nInput\n\n5\n958769874\n958769874\n958769874\n958769874\n958769874\n\nOutput\n\nNO\nNO\nNO\nNO\nNO\n\nTest 4\nInput\n\n5\n0357398713\n0357398713\n0357398713\n0357398713\n0357398713\n\nOutput\n\nNO\nNO\nNO\nNO\nNO\n\nTest 5\nInput\n\n2\n958769874\n(021) 32239913\n\nOutput\n\nYES\nNO\n\nTest 6\nInput\n\n2\n07895462130\n958769874\n\nOutput\n\nYES\nYES\n\"\"\"\nimport re\n\nn = int(input())\nfor _ in range(n):\n    if re.match(r\"^(7|8|9)\\d{9}$\", input()):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return [\"YES\" if valid_mobile_number(input()) else \"NO\" for input in stdin]\n\n\ndef"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    print(\"YES\" if re.match(r'^[789]\\d{9}$', stdin) else \"NO\")\n\n    # for line in stdin:\n    #     print('YES' if re.match(r'^[789]\\d{9}$', line) else 'NO')"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([str(stdin).split()]\n                    [len(stdin)]\n                    [0]\n                    [0][0:3]\n                    [0][0:3]\n                    [0][0:3]\n                    [0][0:3]\n                    [0][0:4]\n                    [0][0:4]\n                    [0][0:4]\n                    [0][0:4]\n                    [0][0:4]\n                    [0][0:5]\n                    [0][0:5]\n                    [0][0:5]\n                    [0][0:5]\n                    [0][0:5]\n                    [0][0:5]\n                    [0][0:5]\n                    [0][0:5]\n                    [0][0:5]\n                    [0][0:6]\n                    [0][0:6]\n                    [0][0:6]\n                    [0][0:6]\n                    [0][0:6]\n                    [0][0:6]\n                    [0][0:7]\n                    [0][0:7]\n                    [0][0:7]\n                    [0][0:7]\n                    [0][0:7]\n                    [0][0:7]\n                    [0][0:8]\n                    [0][0:8]\n                    [0][0:8]\n                    [0][0:8]\n                    [0][0:8]\n                    [0][0:8]\n                    [0][0:8]\n                    [0][0:8]\n                    [0][0:8]\n                    [0][0:8]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0:9]\n                    [0][0"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    import re\n    N = int(stdin)\n    for i in range(N):\n        stdin = input()\n        regex = \"^[789][0-9]{9}$\"\n        match_object = re.match(regex,stdin)\n        if match_object:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\"\n\nsolution(stdin)"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if re.match(r'^[789]\\d{9}$', stdin) else \"NO\"\n"
    },
    {
        "number": 4663,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if re.match(r'[7-9][0-9]{9}', stdin) else \"NO\"  # Fill in the regular expression here.\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, *m = stdin.split('\\n')\n    m = set(map(int, m))\n    n, *n = stdin.split('\\n')\n    n = set(map(int, n))\n    print('\\n'.join(sorted(m.difference(n) | n.difference(m))))\n\nsolution('5\\n2 3 4 5 6\\n3\\n2 3 5')"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    M = int(stdin.readline())\n    m = set(map(int, stdin.readline().split(' ')))\n\n    N = int(stdin.readline())\n    n = set(map(int, stdin.readline().split(' ')))\n\n    m_n = m.difference(n)\n    n_m = n.difference(m)\n    sorted_n_m = sorted(n_m)\n\n    for i in sorted_n_m:\n        print(i)"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = set(map(int, input().split()))\n    n = set(map(int, input().split()))\n    for i in sorted(m ^ n):\n        print(i)\n\nSolution:\n\ndef"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    \n    m = set(a)\n    n = set(b)\n    \n    return \"\\n\".join(sorted(m ^ n))"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Case 1=====\n>>> print(solution('3\\n1 2 3\\n4 5 6'))\n2\n5\n7\n\n=====Test Case 2=====\n>>> print(solution('2\\n4 6 8\\n1 2 3 5 7 9'))\n1\n9\n7\n6\n5\n8\n4\n3\n2\n\n=====Test Case 3=====\n>>> print(solution('0\\n3\\n1 2 3 4 7 9'))\n2\n3\n4\n7\n9\n\n=====Test Case 4=====\n>>> print(solution('0\\n3\\n0 2 3 4 7 9'))\n2\n3\n4\n7\n9\n\n=====Test Case 5=====\n>>> print(solution('0\\n3\\n0 2 3 4 7 9\\n0 2 3 4 7 9'))\n2\n3\n4\n7\n9\n\"\"\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    m = stdin.split()\n    m = set(m)\n    n = stdin.split()\n    n = set(n)\n    \n    m_n = m.difference(n)\n    n_m = n.difference(m)\n    \n    res = sorted(list(m_n.union(n_m)))\n    for i in res:\n        print (i)\n    \n    return \"\""
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(input())\n    m_list = set(map(int, input().split()))\n    n = int(input())\n    n_list = set(map(int, input().split()))\n    for i in m_list.difference(n_list):\n        print(i)\n    for j in n_list.difference(m_list):\n        print(j)\n    return \"\"\n==========================================================\n>>> \n>>> # HackerRank solution\n>>> \n>>> def solution(A, B):\n    # write your code in Python 3.6\n    list1 = A\n    list2 = B\n    intersection_list = list(set(list1) & set(list2))\n    difference_list = list(set(list1).difference(set(intersection_list))) + list(set(list2).difference(set(intersection_list)))\n    result = sorted(list(set(difference_list)))\n    return result\n==========================================================\n>>> solution([1,2,2,1],[2,2])\n[1]\n\n>>> solution([1,2],[1,2,3])\n[2, 3]\n\n>>> solution([1,2,2,1],[2,2])\n[1]\n\n>>> solution([2],[2,2])\n[2]\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  def sym_diff_sets():\n    n = int(stdin.readline().strip())\n    m = set(map(int, stdin.readline().strip().split(' ')))\n    m_set = set(map(int, stdin.readline().strip().split(' ')))\n    m.difference_update(m_set)\n    print(*sorted(m), sep='\\n')\n    \n  return sym_diff_sets()\n\nsolution(stdin)\n\n=====Sample Input=====\n5\n2 4 5 9 12\n4\n2 4 11 12\nSample Output\n5\n9\n11\n\n=====Reference=====\n\"\"\"\n"
    },
    {
        "number": 4664,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = [int(i) for i in stdin[1].split()]\n    for j in range(n):\n        stdin[2+j] = [int(i) for i in stdin[2+j].split()]\n    \n    for j in range(n):\n        # x = set(stdin[2+j])\n        # y = set(m)\n        # z = x.difference(y)\n        # z.update(y.difference(x))\n        # print(*sorted(list(z)), sep=\"\\n\")\n        print(*sorted(list(set(stdin[2+j])^set(m))), sep=\"\\n\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if(n>=0 and n<=100):\n        l = []\n        stdin = stdin.split('\\n')\n        for i in range(n):\n            l.append(stdin[i].split())\n        d = collections.namedtuple('d',''.join(stdin[0]))\n        total = 0\n        for i in range(1,n+1):\n            total = total + float(l[i][1])\n        avg = total/n\n        print(round(avg,2))\n        return\nsolution(input())\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nTest Cases\nExample 1\nInput\n5\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n3          91         Adrian     9         \n4          72         Stewart    5         \n5          80         Peter      6   \nOutput\n81.00\nExplanation\n\nAverage = (97+50+91+72+80)/5\n\nExample 2\nInput\n5\nMARKS      CLASS      NAME       ID        \n92         2          Calum      1         \n82         5          Scott      2         \n94         2          Jason      3         \n55         8          Glenn      4         \n82         2          Fergus     5\nOutput\n81.00\nExplanation\n\nAverage = (92+82+94+55+82)/5\n'''\n\nfrom collections import namedtuple\n\nn = int(input())\nnms = input().split()\n\nStudent = namedtuple('Student', nms)\n\nsum = 0\nfor i in range(n):\n    data = input().split()\n    stu = Student(data[0], data[1], data[2], data[3])\n    sum += float(stu.MARKS)\n\nprint('{:.2f}'.format(sum / n))"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n=====Test Cases=====\nInput 1:\n\n2\nID         MARKS      NAME       CLASS     \n1          97         Raymond    7         \n2          50         Steven     4         \n\nOutput 1:\n\n68.33\nInput 2:\n\n3\nClass         12         Physics      9.0         \nMarks         25         Chemistry    8.8         \nName          ^v^       Geography    8.8         \n\nOutput 2:\n\n85.33\n\n'''\n\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  pass\n\n=====Test Case=====\nTest case 1\nInput\n3\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\n2          50         Steven     4\n3          91         Adrian     9\n4          72         Stewart    5\nOutput\n\n80.00\nExplanation\n\nAverage = \nAverage = \nAverage = \n\nTest case 2\nInput\n2\nMARKS      CLASS      NAME       ID\n92         2          Calum      1\n82         5          Scott      2\nOutput\n\n78.00\nExplanation\n\nAverage = \nAverage = \n\nTest case 3\nInput\n1\nID         MARKS      NAME       CLASS\n1          97         Raymond    7\nOutput\n\n97.00\nExplanation\n\nAverage = \n\n\"\"\"\nfrom collections import namedtuple"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = \"input.txt\"\n=====Solution=====\n\"\"\"\n\nfrom collections import namedtuple\nn = int(input())\ncol_names = input().split()\nStudent = namedtuple('Student', col_names)\n\nsum = 0\nfor i in range(n):\n    row = input().split()\n    st = Student(*row)\n    sum += int(st.MARKS)\naverage = sum / n\nprint(f\"{average:.2f}\")"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # >>> your code here <<<\n    data = stdin.split(\"\\n\")\n    N = int(data[0])\n    names = data[1].split(\",\")\n    data = data[2:]\n\n    all_scores = []\n    for i in range(N):\n        scores = data[i].split(\",\")\n        all_scores.append(scores)\n\n    scores_list = []\n    for i in range(len(names)):\n        scores_list.append([])\n        for j in range(N):\n            scores_list[i].append(all_scores[j][i])\n\n    for i in range(N):\n        for j in range(len(names)):\n            scores_list[j][i] = float(scores_list[j][i])\n\n    sum_of_scores = 0\n    for i in range(len(names)):\n        sum_of_scores += sum(scores_list[i])\n\n    avg = sum_of_scores / N\n    print(round(avg, 2))\n    return avg"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport collections"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the average of the marks\n    '''\n   ...\n"
    },
    {
        "number": 4665,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n=====Test Cases=====\nTest Case 01\nInput\n3\nID         MARKS      CLASS      NAME\n1          97         12         Harper\n2          76         12         Yam\n3          91         12         Fox\n\nOutput\n78.00\n\nExplanation\nHarper's average marks is ((97+76+91)/3) = 78.00\n\nTest Case 02\nInput\n5\nMARKS      CLASS      NAME       ID\n92         12         Harper      1\n82         12         Yam         2\n94         12         Fox        3\n55         12         Pup         4\n82         12         Robin       5\n\nOutput\n81.00\n\nTest Case 03\nInput\n4\nMARKS      CLASS      NAME       ID\n92         12         Harper      1\n82         12         Yam         2\n94         12         Fox        3\n55         12         Pup         4\n\nOutput\n78.00\n'''"
    }
]